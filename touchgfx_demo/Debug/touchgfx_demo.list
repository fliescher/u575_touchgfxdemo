
touchgfx_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000270e8  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  0802731c  0802731c  0003731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08029864  08029864  00039864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029a0c  08029a0c  00039a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00025800  08029a24  08029a24  00039a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0804f224  0804f224  0005f224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0804f234  0804f234  0005f234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0804f23c  0804f23c  0005f23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0804f250  0804f250  0005f250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00025900  20000000  0804f258  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00025800  20025900  08074b58  00085900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00004808  2004b100  0809a358  000ab100  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2004f908  0809a358  000af908  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  000ab100  2**0
                  CONTENTS, READONLY
 15 .debug_info   000bc599  00000000  00000000  000ab136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015363  00000000  00000000  001676cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f60  00000000  00000000  0017ca38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003858  00000000  00000000  00180998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00049e61  00000000  00000000  001841f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000539dd  00000000  00000000  001ce051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00197795  00000000  00000000  00221a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  003b91c3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000109a8  00000000  00000000  003b9294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2004b100 	.word	0x2004b100
 8000250:	00000000 	.word	0x00000000
 8000254:	08027304 	.word	0x08027304

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2004b104 	.word	0x2004b104
 8000270:	08027304 	.word	0x08027304

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	2004cd40 	.word	0x2004cd40
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	2004cddc 	.word	0x2004cddc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	2004cd44 	.word	0x2004cd44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	2004cd48 	.word	0x2004cd48
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2004d348 	.word	0x2004d348

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00c f8f0 	bl	800c634 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00b ffcd 	bl	800c3f8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2004cde8 	.word	0x2004cde8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2004d348 	.word	0x2004d348
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	2004cdec 	.word	0x2004cdec
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2004ce78 	.word	0x2004ce78
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	2004ce7c 	.word	0x2004ce7c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	2004ce74 	.word	0x2004ce74
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2004ce70 	.word	0x2004ce70
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	2004cddc 	.word	0x2004cddc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	2004cd44 	.word	0x2004cd44
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	2004cd48 	.word	0x2004cd48
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_uldivmod>:
 80004b0:	b953      	cbnz	r3, 80004c8 <__aeabi_uldivmod+0x18>
 80004b2:	b94a      	cbnz	r2, 80004c8 <__aeabi_uldivmod+0x18>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	bf08      	it	eq
 80004b8:	2800      	cmpeq	r0, #0
 80004ba:	bf1c      	itt	ne
 80004bc:	f04f 31ff 	movne.w	r1, #4294967295
 80004c0:	f04f 30ff 	movne.w	r0, #4294967295
 80004c4:	f000 b982 	b.w	80007cc <__aeabi_idiv0>
 80004c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004dc:	b004      	add	sp, #16
 80004de:	4770      	bx	lr

080004e0 <__udivmoddi4>:
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004e6:	4604      	mov	r4, r0
 80004e8:	460f      	mov	r7, r1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d148      	bne.n	8000580 <__udivmoddi4+0xa0>
 80004ee:	428a      	cmp	r2, r1
 80004f0:	4694      	mov	ip, r2
 80004f2:	d961      	bls.n	80005b8 <__udivmoddi4+0xd8>
 80004f4:	fab2 f382 	clz	r3, r2
 80004f8:	b143      	cbz	r3, 800050c <__udivmoddi4+0x2c>
 80004fa:	f1c3 0120 	rsb	r1, r3, #32
 80004fe:	409f      	lsls	r7, r3
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	409c      	lsls	r4, r3
 8000506:	fa20 f101 	lsr.w	r1, r0, r1
 800050a:	430f      	orrs	r7, r1
 800050c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	fbb7 f6f1 	udiv	r6, r7, r1
 800051a:	fb01 7716 	mls	r7, r1, r6, r7
 800051e:	fb06 f00e 	mul.w	r0, r6, lr
 8000522:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000526:	4290      	cmp	r0, r2
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x5c>
 800052a:	eb1c 0202 	adds.w	r2, ip, r2
 800052e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x5a>
 8000534:	4290      	cmp	r0, r2
 8000536:	f200 8137 	bhi.w	80007a8 <__udivmoddi4+0x2c8>
 800053a:	463e      	mov	r6, r7
 800053c:	1a12      	subs	r2, r2, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb2 f0f1 	udiv	r0, r2, r1
 8000544:	fb01 2210 	mls	r2, r1, r0, r2
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x86>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 32ff 	add.w	r2, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x84>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 811c 	bhi.w	800079c <__udivmoddi4+0x2bc>
 8000564:	4610      	mov	r0, r2
 8000566:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056a:	eba4 040e 	sub.w	r4, r4, lr
 800056e:	2600      	movs	r6, #0
 8000570:	b11d      	cbz	r5, 800057a <__udivmoddi4+0x9a>
 8000572:	40dc      	lsrs	r4, r3
 8000574:	2300      	movs	r3, #0
 8000576:	e9c5 4300 	strd	r4, r3, [r5]
 800057a:	4631      	mov	r1, r6
 800057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	428b      	cmp	r3, r1
 8000582:	d909      	bls.n	8000598 <__udivmoddi4+0xb8>
 8000584:	2d00      	cmp	r5, #0
 8000586:	f000 80fd 	beq.w	8000784 <__udivmoddi4+0x2a4>
 800058a:	2600      	movs	r6, #0
 800058c:	e9c5 0100 	strd	r0, r1, [r5]
 8000590:	4630      	mov	r0, r6
 8000592:	4631      	mov	r1, r6
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000598:	fab3 f683 	clz	r6, r3
 800059c:	2e00      	cmp	r6, #0
 800059e:	d14b      	bne.n	8000638 <__udivmoddi4+0x158>
 80005a0:	428b      	cmp	r3, r1
 80005a2:	f0c0 80f2 	bcc.w	800078a <__udivmoddi4+0x2aa>
 80005a6:	4282      	cmp	r2, r0
 80005a8:	f240 80ef 	bls.w	800078a <__udivmoddi4+0x2aa>
 80005ac:	4630      	mov	r0, r6
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d0e3      	beq.n	800057a <__udivmoddi4+0x9a>
 80005b2:	e9c5 4700 	strd	r4, r7, [r5]
 80005b6:	e7e0      	b.n	800057a <__udivmoddi4+0x9a>
 80005b8:	b902      	cbnz	r2, 80005bc <__udivmoddi4+0xdc>
 80005ba:	deff      	udf	#255	; 0xff
 80005bc:	fab2 f382 	clz	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 809d 	bne.w	8000700 <__udivmoddi4+0x220>
 80005c6:	1a89      	subs	r1, r1, r2
 80005c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005cc:	b297      	uxth	r7, r2
 80005ce:	2601      	movs	r6, #1
 80005d0:	0c20      	lsrs	r0, r4, #16
 80005d2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005d6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005de:	fb07 f002 	mul.w	r0, r7, r2
 80005e2:	4288      	cmp	r0, r1
 80005e4:	d90f      	bls.n	8000606 <__udivmoddi4+0x126>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f102 38ff 	add.w	r8, r2, #4294967295
 80005ee:	bf2c      	ite	cs
 80005f0:	f04f 0901 	movcs.w	r9, #1
 80005f4:	f04f 0900 	movcc.w	r9, #0
 80005f8:	4288      	cmp	r0, r1
 80005fa:	d903      	bls.n	8000604 <__udivmoddi4+0x124>
 80005fc:	f1b9 0f00 	cmp.w	r9, #0
 8000600:	f000 80cf 	beq.w	80007a2 <__udivmoddi4+0x2c2>
 8000604:	4642      	mov	r2, r8
 8000606:	1a09      	subs	r1, r1, r0
 8000608:	b2a4      	uxth	r4, r4
 800060a:	fbb1 f0fe 	udiv	r0, r1, lr
 800060e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000612:	fb00 f707 	mul.w	r7, r0, r7
 8000616:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800061a:	42a7      	cmp	r7, r4
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x150>
 800061e:	eb1c 0404 	adds.w	r4, ip, r4
 8000622:	f100 31ff 	add.w	r1, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x14e>
 8000628:	42a7      	cmp	r7, r4
 800062a:	f200 80b4 	bhi.w	8000796 <__udivmoddi4+0x2b6>
 800062e:	4608      	mov	r0, r1
 8000630:	1be4      	subs	r4, r4, r7
 8000632:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000636:	e79b      	b.n	8000570 <__udivmoddi4+0x90>
 8000638:	f1c6 0720 	rsb	r7, r6, #32
 800063c:	40b3      	lsls	r3, r6
 800063e:	fa01 f406 	lsl.w	r4, r1, r6
 8000642:	fa22 fc07 	lsr.w	ip, r2, r7
 8000646:	40f9      	lsrs	r1, r7
 8000648:	40b2      	lsls	r2, r6
 800064a:	ea4c 0c03 	orr.w	ip, ip, r3
 800064e:	fa20 f307 	lsr.w	r3, r0, r7
 8000652:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000656:	431c      	orrs	r4, r3
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fa00 f306 	lsl.w	r3, r0, r6
 8000660:	0c20      	lsrs	r0, r4, #16
 8000662:	fbb1 f8f9 	udiv	r8, r1, r9
 8000666:	fb09 1118 	mls	r1, r9, r8, r1
 800066a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800066e:	fb08 f00e 	mul.w	r0, r8, lr
 8000672:	4288      	cmp	r0, r1
 8000674:	d90f      	bls.n	8000696 <__udivmoddi4+0x1b6>
 8000676:	eb1c 0101 	adds.w	r1, ip, r1
 800067a:	f108 3aff 	add.w	sl, r8, #4294967295
 800067e:	bf2c      	ite	cs
 8000680:	f04f 0b01 	movcs.w	fp, #1
 8000684:	f04f 0b00 	movcc.w	fp, #0
 8000688:	4288      	cmp	r0, r1
 800068a:	d903      	bls.n	8000694 <__udivmoddi4+0x1b4>
 800068c:	f1bb 0f00 	cmp.w	fp, #0
 8000690:	f000 808d 	beq.w	80007ae <__udivmoddi4+0x2ce>
 8000694:	46d0      	mov	r8, sl
 8000696:	1a09      	subs	r1, r1, r0
 8000698:	b2a4      	uxth	r4, r4
 800069a:	fbb1 f0f9 	udiv	r0, r1, r9
 800069e:	fb09 1110 	mls	r1, r9, r0, r1
 80006a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006aa:	458e      	cmp	lr, r1
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x1de>
 80006ae:	eb1c 0101 	adds.w	r1, ip, r1
 80006b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006b6:	d201      	bcs.n	80006bc <__udivmoddi4+0x1dc>
 80006b8:	458e      	cmp	lr, r1
 80006ba:	d87f      	bhi.n	80007bc <__udivmoddi4+0x2dc>
 80006bc:	4620      	mov	r0, r4
 80006be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006c2:	eba1 010e 	sub.w	r1, r1, lr
 80006c6:	fba0 9802 	umull	r9, r8, r0, r2
 80006ca:	4541      	cmp	r1, r8
 80006cc:	464c      	mov	r4, r9
 80006ce:	46c6      	mov	lr, r8
 80006d0:	d302      	bcc.n	80006d8 <__udivmoddi4+0x1f8>
 80006d2:	d106      	bne.n	80006e2 <__udivmoddi4+0x202>
 80006d4:	454b      	cmp	r3, r9
 80006d6:	d204      	bcs.n	80006e2 <__udivmoddi4+0x202>
 80006d8:	3801      	subs	r0, #1
 80006da:	ebb9 0402 	subs.w	r4, r9, r2
 80006de:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d070      	beq.n	80007c8 <__udivmoddi4+0x2e8>
 80006e6:	1b1a      	subs	r2, r3, r4
 80006e8:	eb61 010e 	sbc.w	r1, r1, lr
 80006ec:	fa22 f306 	lsr.w	r3, r2, r6
 80006f0:	fa01 f707 	lsl.w	r7, r1, r7
 80006f4:	40f1      	lsrs	r1, r6
 80006f6:	2600      	movs	r6, #0
 80006f8:	431f      	orrs	r7, r3
 80006fa:	e9c5 7100 	strd	r7, r1, [r5]
 80006fe:	e73c      	b.n	800057a <__udivmoddi4+0x9a>
 8000700:	fa02 fc03 	lsl.w	ip, r2, r3
 8000704:	f1c3 0020 	rsb	r0, r3, #32
 8000708:	fa01 f203 	lsl.w	r2, r1, r3
 800070c:	fa21 f600 	lsr.w	r6, r1, r0
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fa24 f100 	lsr.w	r1, r4, r0
 8000718:	fa1f f78c 	uxth.w	r7, ip
 800071c:	409c      	lsls	r4, r3
 800071e:	4311      	orrs	r1, r2
 8000720:	fbb6 f0fe 	udiv	r0, r6, lr
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	fb0e 6610 	mls	r6, lr, r0, r6
 800072a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800072e:	fb00 f607 	mul.w	r6, r0, r7
 8000732:	4296      	cmp	r6, r2
 8000734:	d90e      	bls.n	8000754 <__udivmoddi4+0x274>
 8000736:	eb1c 0202 	adds.w	r2, ip, r2
 800073a:	f100 38ff 	add.w	r8, r0, #4294967295
 800073e:	bf2c      	ite	cs
 8000740:	f04f 0901 	movcs.w	r9, #1
 8000744:	f04f 0900 	movcc.w	r9, #0
 8000748:	4296      	cmp	r6, r2
 800074a:	d902      	bls.n	8000752 <__udivmoddi4+0x272>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	d031      	beq.n	80007b6 <__udivmoddi4+0x2d6>
 8000752:	4640      	mov	r0, r8
 8000754:	1b92      	subs	r2, r2, r6
 8000756:	b289      	uxth	r1, r1
 8000758:	fbb2 f6fe 	udiv	r6, r2, lr
 800075c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000764:	fb06 f207 	mul.w	r2, r6, r7
 8000768:	428a      	cmp	r2, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x29c>
 800076c:	eb1c 0101 	adds.w	r1, ip, r1
 8000770:	f106 38ff 	add.w	r8, r6, #4294967295
 8000774:	d201      	bcs.n	800077a <__udivmoddi4+0x29a>
 8000776:	428a      	cmp	r2, r1
 8000778:	d823      	bhi.n	80007c2 <__udivmoddi4+0x2e2>
 800077a:	4646      	mov	r6, r8
 800077c:	1a89      	subs	r1, r1, r2
 800077e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000782:	e725      	b.n	80005d0 <__udivmoddi4+0xf0>
 8000784:	462e      	mov	r6, r5
 8000786:	4628      	mov	r0, r5
 8000788:	e6f7      	b.n	800057a <__udivmoddi4+0x9a>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb61 0303 	sbc.w	r3, r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	461f      	mov	r7, r3
 8000794:	e70b      	b.n	80005ae <__udivmoddi4+0xce>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e749      	b.n	8000630 <__udivmoddi4+0x150>
 800079c:	4464      	add	r4, ip
 800079e:	3802      	subs	r0, #2
 80007a0:	e6e1      	b.n	8000566 <__udivmoddi4+0x86>
 80007a2:	3a02      	subs	r2, #2
 80007a4:	4461      	add	r1, ip
 80007a6:	e72e      	b.n	8000606 <__udivmoddi4+0x126>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	4462      	add	r2, ip
 80007ac:	e6c6      	b.n	800053c <__udivmoddi4+0x5c>
 80007ae:	f1a8 0802 	sub.w	r8, r8, #2
 80007b2:	4461      	add	r1, ip
 80007b4:	e76f      	b.n	8000696 <__udivmoddi4+0x1b6>
 80007b6:	3802      	subs	r0, #2
 80007b8:	4462      	add	r2, ip
 80007ba:	e7cb      	b.n	8000754 <__udivmoddi4+0x274>
 80007bc:	3802      	subs	r0, #2
 80007be:	4461      	add	r1, ip
 80007c0:	e77d      	b.n	80006be <__udivmoddi4+0x1de>
 80007c2:	3e02      	subs	r6, #2
 80007c4:	4461      	add	r1, ip
 80007c6:	e7d9      	b.n	800077c <__udivmoddi4+0x29c>
 80007c8:	462e      	mov	r6, r5
 80007ca:	e6d6      	b.n	800057a <__udivmoddi4+0x9a>

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007dc:	2334      	movs	r3, #52	; 0x34
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <tx_application_define+0x8c>)
 80007e6:	491e      	ldr	r1, [pc, #120]	; (8000860 <tx_application_define+0x90>)
 80007e8:	481e      	ldr	r0, [pc, #120]	; (8000864 <tx_application_define+0x94>)
 80007ea:	f00c f9cd 	bl	800cb88 <_txe_byte_pool_create>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <tx_application_define+0x94>)
 80007f6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f000 fbb8 	bl	8000f6e <App_ThreadX_Init>
 80007fe:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000806:	e7fe      	b.n	8000806 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <tx_application_define+0x98>)
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <tx_application_define+0x9c>)
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <tx_application_define+0xa0>)
 8000816:	f00c f9b7 	bl	800cb88 <_txe_byte_pool_create>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d119      	bne.n	8000854 <tx_application_define+0x84>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <tx_application_define+0xa0>)
 8000822:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f00c fe4d 	bl	800d4c4 <MX_TouchGFX_Init>
      /* USER CODE BEGIN  MX_X-CUBE-TOUCHGFX_Init_Error */

      /* USER CODE END  MX_X-CUBE-TOUCHGFX_Init_Error */
    }
    /* USER CODE BEGIN  MX_X-CUBE-TOUCHGFX_Init_Success */
    if(!tx_timer_create(&lcd_timer, "my_lcd_timer", signalVSync_caller, 0x1234, 2, 2, TX_AUTO_ACTIVATE))
 800082a:	232c      	movs	r3, #44	; 0x2c
 800082c:	9303      	str	r3, [sp, #12]
 800082e:	2301      	movs	r3, #1
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2302      	movs	r3, #2
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	f241 2334 	movw	r3, #4660	; 0x1234
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <tx_application_define+0xa4>)
 8000840:	490d      	ldr	r1, [pc, #52]	; (8000878 <tx_application_define+0xa8>)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <tx_application_define+0xac>)
 8000844:	f00c fd8a 	bl	800d35c <_txe_timer_create>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <tx_application_define+0x84>
    {
    	tx_timer_activate(&lcd_timer);
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <tx_application_define+0xac>)
 8000850:	f00c fd66 	bl	800d320 <_txe_timer_activate>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2004b148 	.word	0x2004b148
 8000860:	0802731c 	.word	0x0802731c
 8000864:	2004b548 	.word	0x2004b548
 8000868:	2004b57c 	.word	0x2004b57c
 800086c:	08027330 	.word	0x08027330
 8000870:	2004c57c 	.word	0x2004c57c
 8000874:	0800197d 	.word	0x0800197d
 8000878:	0802734c 	.word	0x0802734c
 800087c:	2004b11c 	.word	0x2004b11c

08000880 <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 800088a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	8013      	strh	r3, [r2, #0]

}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <ST7789V_SEND_DATA+0x1c>)
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	8013      	strh	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	60080000 	.word	0x60080000

080008c0 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffd5 	bl	8000880 <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffdf 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffd9 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffd3 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffce 	bl	80008a0 <ST7789V_SEND_DATA>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4604      	mov	r4, r0
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4623      	mov	r3, r4
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	4603      	mov	r3, r0
 8000920:	80bb      	strh	r3, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	807b      	strh	r3, [r7, #2]
 8000926:	4613      	mov	r3, r2
 8000928:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	041a      	lsls	r2, r3, #16
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff ffa3 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	202a      	movs	r0, #42	; 0x2a
 800093e:	f7ff ffbf 	bl	80008c0 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	041a      	lsls	r2, r3, #16
 8000946:	883b      	ldrh	r3, [r7, #0]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 800094c:	202c      	movs	r0, #44	; 0x2c
 800094e:	f7ff ff97 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	202b      	movs	r0, #43	; 0x2b
 8000956:	f7ff ffb3 	bl	80008c0 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 800095a:	202c      	movs	r0, #44	; 0x2c
 800095c:	f7ff ff90 	bl	8000880 <ST7789V_SEND_COMMAND>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	f8c3 2003 	str.w	r2, [r3, #3]
 8000978:	2310      	movs	r3, #16
 800097a:	703b      	strb	r3, [r7, #0]
 800097c:	2332      	movs	r3, #50	; 0x32
 800097e:	713b      	strb	r3, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000984:	463b      	mov	r3, r7
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fb05 	bl	8000f98 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2104      	movs	r1, #4
 8000992:	4877      	ldr	r0, [pc, #476]	; (8000b70 <ST7789V_init+0x208>)
 8000994:	f002 fcf0 	bl	8003378 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fc51 	bl	8002240 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2104      	movs	r1, #4
 80009a2:	4873      	ldr	r0, [pc, #460]	; (8000b70 <ST7789V_init+0x208>)
 80009a4:	f002 fce8 	bl	8003378 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 fc49 	bl	8002240 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2104      	movs	r1, #4
 80009b2:	486f      	ldr	r0, [pc, #444]	; (8000b70 <ST7789V_init+0x208>)
 80009b4:	f002 fce0 	bl	8003378 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f001 fc41 	bl	8002240 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 80009be:	2011      	movs	r0, #17
 80009c0:	f7ff ff5e 	bl	8000880 <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 80009c4:	2078      	movs	r0, #120	; 0x78
 80009c6:	f001 fc3b 	bl	8002240 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f7ff ff58 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff65 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80009d6:	20b2      	movs	r0, #178	; 0xb2
 80009d8:	f7ff ff52 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 80009dc:	200c      	movs	r0, #12
 80009de:	f7ff ff5f 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 80009e2:	200c      	movs	r0, #12
 80009e4:	f7ff ff5c 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff59 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009ee:	2033      	movs	r0, #51	; 0x33
 80009f0:	f7ff ff56 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009f4:	2033      	movs	r0, #51	; 0x33
 80009f6:	f7ff ff53 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80009fa:	20b7      	movs	r0, #183	; 0xb7
 80009fc:	f7ff ff40 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000a00:	2070      	movs	r0, #112	; 0x70
 8000a02:	f7ff ff4d 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 8000a06:	20bb      	movs	r0, #187	; 0xbb
 8000a08:	f7ff ff3a 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 8000a0c:	203a      	movs	r0, #58	; 0x3a
 8000a0e:	f7ff ff47 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000a12:	20c0      	movs	r0, #192	; 0xc0
 8000a14:	f7ff ff34 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 8000a18:	202c      	movs	r0, #44	; 0x2c
 8000a1a:	f7ff ff41 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000a1e:	20c2      	movs	r0, #194	; 0xc2
 8000a20:	f7ff ff2e 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff ff3b 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 8000a2a:	20c3      	movs	r0, #195	; 0xc3
 8000a2c:	f7ff ff28 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 8000a30:	2014      	movs	r0, #20
 8000a32:	f7ff ff35 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a36:	20c4      	movs	r0, #196	; 0xc4
 8000a38:	f7ff ff22 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ff2f 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a42:	20c6      	movs	r0, #198	; 0xc6
 8000a44:	f7ff ff1c 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000a48:	200f      	movs	r0, #15
 8000a4a:	f7ff ff29 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000a4e:	20d0      	movs	r0, #208	; 0xd0
 8000a50:	f7ff ff16 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000a54:	20a4      	movs	r0, #164	; 0xa4
 8000a56:	f7ff ff23 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000a5a:	20a1      	movs	r0, #161	; 0xa1
 8000a5c:	f7ff ff20 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000a60:	20e0      	movs	r0, #224	; 0xe0
 8000a62:	f7ff ff0d 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a66:	20d0      	movs	r0, #208	; 0xd0
 8000a68:	f7ff ff1a 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	f7ff ff17 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a72:	200d      	movs	r0, #13
 8000a74:	f7ff ff14 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a78:	2009      	movs	r0, #9
 8000a7a:	f7ff ff11 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f7ff ff0e 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000a84:	2025      	movs	r0, #37	; 0x25
 8000a86:	f7ff ff0b 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f7ff ff08 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000a90:	2053      	movs	r0, #83	; 0x53
 8000a92:	f7ff ff05 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a96:	2039      	movs	r0, #57	; 0x39
 8000a98:	f7ff ff02 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000a9c:	2012      	movs	r0, #18
 8000a9e:	f7ff feff 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f7ff fefc 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000aa8:	200a      	movs	r0, #10
 8000aaa:	f7ff fef9 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000aae:	2017      	movs	r0, #23
 8000ab0:	f7ff fef6 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000ab4:	2034      	movs	r0, #52	; 0x34
 8000ab6:	f7ff fef3 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000aba:	20e1      	movs	r0, #225	; 0xe1
 8000abc:	f7ff fee0 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000ac0:	20d0      	movs	r0, #208	; 0xd0
 8000ac2:	f7ff feed 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f7ff feea 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000acc:	200d      	movs	r0, #13
 8000ace:	f7ff fee7 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000ad2:	2009      	movs	r0, #9
 8000ad4:	f7ff fee4 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000ad8:	2009      	movs	r0, #9
 8000ada:	f7ff fee1 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000ade:	2025      	movs	r0, #37	; 0x25
 8000ae0:	f7ff fede 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000ae4:	2029      	movs	r0, #41	; 0x29
 8000ae6:	f7ff fedb 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000aea:	2035      	movs	r0, #53	; 0x35
 8000aec:	f7ff fed8 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000af0:	2039      	movs	r0, #57	; 0x39
 8000af2:	f7ff fed5 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000af6:	2013      	movs	r0, #19
 8000af8:	f7ff fed2 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000afc:	200a      	movs	r0, #10
 8000afe:	f7ff fecf 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f7ff fecc 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000b08:	2016      	movs	r0, #22
 8000b0a:	f7ff fec9 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000b0e:	2034      	movs	r0, #52	; 0x34
 8000b10:	f7ff fec6 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000b14:	2021      	movs	r0, #33	; 0x21
 8000b16:	f7ff feb3 	bl	8000880 <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000b1a:	203a      	movs	r0, #58	; 0x3a
 8000b1c:	f7ff feb0 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000b20:	2055      	movs	r0, #85	; 0x55
 8000b22:	f7ff febd 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000b26:	202a      	movs	r0, #42	; 0x2a
 8000b28:	f7ff feaa 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff feb7 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff feb4 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff feb1 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000b3e:	20ef      	movs	r0, #239	; 0xef
 8000b40:	f7ff feae 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000b44:	202b      	movs	r0, #43	; 0x2b
 8000b46:	f7ff fe9b 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fea8 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fea5 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fea2 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000b5c:	203f      	movs	r0, #63	; 0x3f
 8000b5e:	f7ff fe9f 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000b62:	2029      	movs	r0, #41	; 0x29
 8000b64:	f7ff fe8c 	bl	8000880 <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	42021000 	.word	0x42021000

08000b74 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	88b9      	ldrh	r1, [r7, #4]
 8000b8c:	88f8      	ldrh	r0, [r7, #6]
 8000b8e:	f7ff febd 	bl	800090c <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe83 	bl	80008a0 <ST7789V_SEND_DATA>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 8000bae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000bb2:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d003      	beq.n	8000bc4 <ST7789V_fill+0x20>
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d107      	bne.n	8000bd4 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8000bc4:	f240 133f 	movw	r3, #319	; 0x13f
 8000bc8:	22ef      	movs	r2, #239	; 0xef
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fe9d 	bl	800090c <ST7789V_setCursorPosition>
 8000bd2:	e00e      	b.n	8000bf2 <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d003      	beq.n	8000be4 <ST7789V_fill+0x40>
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d106      	bne.n	8000bf2 <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8000be4:	23ef      	movs	r3, #239	; 0xef
 8000be6:	f240 123f 	movw	r2, #319	; 0x13f
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe8d 	bl	800090c <ST7789V_setCursorPosition>
	}

	while (n) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d007      	beq.n	8000c08 <ST7789V_fill+0x64>
	   n--;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe4d 	bl	80008a0 <ST7789V_SEND_DATA>
	while (n) {
 8000c06:	e7f4      	b.n	8000bf2 <ST7789V_fill+0x4e>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000004 	.word	0x20000004

08000c14 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	f1c3 0301 	rsb	r3, r3, #1
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	461a      	mov	r2, r3
 8000c44:	03d2      	lsls	r2, r2, #15
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b299      	uxth	r1, r3
 8000c5e:	883a      	ldrh	r2, [r7, #0]
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff86 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8000c68:	88ba      	ldrh	r2, [r7, #4]
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	883a      	ldrh	r2, [r7, #0]
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff7d 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8000c7a:	88fa      	ldrh	r2, [r7, #6]
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	883a      	ldrh	r2, [r7, #0]
 8000c84:	88b9      	ldrh	r1, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff74 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	883a      	ldrh	r2, [r7, #0]
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff6b 	bl	8000b74 <ST7789V_drawPixel>

  while (x<y) {
 8000c9e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	f280 8083 	bge.w	8000db2 <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8000cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0e      	blt.n	8000cd2 <ST7789V_drawCircle+0xbe>
      y--;
 8000cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000cc0:	8a7b      	ldrh	r3, [r7, #18]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000cc8:	8afa      	ldrh	r2, [r7, #22]
 8000cca:	8a7b      	ldrh	r3, [r7, #18]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000cd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000cde:	8abb      	ldrh	r3, [r7, #20]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000ce6:	8afa      	ldrh	r2, [r7, #22]
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	4413      	add	r3, r2
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000cf0:	8a3a      	ldrh	r2, [r7, #16]
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b298      	uxth	r0, r3
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	883a      	ldrh	r2, [r7, #0]
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff ff36 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000d08:	8a3b      	ldrh	r3, [r7, #16]
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b298      	uxth	r0, r3
 8000d10:	89fa      	ldrh	r2, [r7, #14]
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	883a      	ldrh	r2, [r7, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff ff2a 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000d20:	8a3a      	ldrh	r2, [r7, #16]
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b298      	uxth	r0, r3
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	88ba      	ldrh	r2, [r7, #4]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	883a      	ldrh	r2, [r7, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff ff1e 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000d38:	8a3b      	ldrh	r3, [r7, #16]
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	883a      	ldrh	r2, [r7, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff ff12 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4413      	add	r3, r2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	8a3a      	ldrh	r2, [r7, #16]
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	883a      	ldrh	r2, [r7, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff ff06 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b298      	uxth	r0, r3
 8000d70:	8a3a      	ldrh	r2, [r7, #16]
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	883a      	ldrh	r2, [r7, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fefa 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000d80:	89fa      	ldrh	r2, [r7, #14]
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	4413      	add	r3, r2
 8000d86:	b298      	uxth	r0, r3
 8000d88:	8a3b      	ldrh	r3, [r7, #16]
 8000d8a:	88ba      	ldrh	r2, [r7, #4]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	883a      	ldrh	r2, [r7, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff feee 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	8a3b      	ldrh	r3, [r7, #16]
 8000da2:	88ba      	ldrh	r2, [r7, #4]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	883a      	ldrh	r2, [r7, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fee2 	bl	8000b74 <ST7789V_drawPixel>
  while (x<y) {
 8000db0:	e775      	b.n	8000c9e <ST7789V_drawCircle+0x8a>
  }
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}

08000dba <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000dba:	b590      	push	{r4, r7, lr}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4623      	mov	r3, r4
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80bb      	strh	r3, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000de4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4619      	mov	r1, r3
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bfb8      	it	lt
 8000df4:	425b      	neglt	r3, r3
 8000df6:	429a      	cmp	r2, r3
 8000df8:	bfcc      	ite	gt
 8000dfa:	2301      	movgt	r3, #1
 8000dfc:	2300      	movle	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000e0a:	1d3a      	adds	r2, r7, #4
 8000e0c:	1dbb      	adds	r3, r7, #6
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f88d 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000e16:	463a      	mov	r2, r7
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f887 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d90b      	bls.n	8000e42 <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000e2a:	1cba      	adds	r2, r7, #2
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f87d 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000e36:	463a      	mov	r2, r7
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f877 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bfb8      	it	lt
 8000e56:	425b      	neglt	r3, r3
 8000e58:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000e5a:	8a3b      	ldrh	r3, [r7, #16]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d202      	bcs.n	8000e70 <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	82bb      	strh	r3, [r7, #20]
 8000e6e:	e002      	b.n	8000e76 <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e74:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d828      	bhi.n	8000ed0 <ST7789V_drawLine+0x116>
    if (steep) {
 8000e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	88f9      	ldrh	r1, [r7, #6]
 8000e8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe71 	bl	8000b74 <ST7789V_drawPixel>
 8000e92:	e005      	b.n	8000ea0 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	88b9      	ldrh	r1, [r7, #4]
 8000e98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe6a 	bl	8000b74 <ST7789V_drawPixel>
    }
    err -= dy;
 8000ea0:	8afa      	ldrh	r2, [r7, #22]
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da09      	bge.n	8000ec6 <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	8abb      	ldrh	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	8a3b      	ldrh	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	e7d2      	b.n	8000e76 <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000ef6:	88ba      	ldrh	r2, [r7, #4]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3b01      	subs	r3, #1
 8000f00:	b29c      	uxth	r4, r3
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	88b9      	ldrh	r1, [r7, #4]
 8000f06:	88f8      	ldrh	r0, [r7, #6]
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	f7ff ff54 	bl	8000dba <ST7789V_drawLine>
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}

08000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffed 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f40:	4603      	mov	r3, r0
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f7ff ffe7 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f54:	f107 030e 	add.w	r3, r7, #14
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffde 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	801a      	strh	r2, [r3, #0]
    }
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000f90:	f00a f894 	bl	800b0bc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a0      	sub	sp, #128	; 0x80
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f025 f975 	bl	802629c <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <FMCSRAMInit+0xc4>)
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <FMCSRAMInit+0xc8>)
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc4:	e005      	b.n	8000fd2 <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d102      	bne.n	8000fe0 <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fde:	e008      	b.n	8000ff2 <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b10      	cmp	r3, #16
 8000fe6:	d102      	bne.n	8000fee <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fec:	e001      	b.n	8000ff2 <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001002:	2300      	movs	r3, #0
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800101c:	2300      	movs	r3, #0
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001024:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8001032:	2306      	movs	r3, #6
 8001034:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8001036:	2306      	movs	r3, #6
 8001038:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	2200      	movs	r2, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fb29 	bl	800869c <HAL_SRAM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 8001050:	f000 f808 	bl	8001064 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8001054:	bf00      	nop
 8001056:	3780      	adds	r7, #128	; 0x80
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	420d0400 	.word	0x420d0400
 8001060:	420d0504 	.word	0x420d0504

08001064 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800107e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001082:	4909      	ldr	r1, [pc, #36]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800108e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	46020c00 	.word	0x46020c00

080010ac <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80010ba:	4909      	ldr	r1, [pc, #36]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	46020c00 	.word	0x46020c00

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f001 f85b 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f881 	bl	80011f4 <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 80010f2:	f000 f8f2 	bl	80012da <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 fb27 	bl	8001748 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80010fa:	f000 f901 	bl	8001300 <_ZL12MX_ADC1_Initv>
  MX_UCPD1_Init();
 80010fe:	f000 f9ed 	bl	80014dc <_ZL13MX_UCPD1_Initv>
  MX_USART1_UART_Init();
 8001102:	f000 fa21 	bl	8001548 <_ZL19MX_USART1_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001106:	f000 fa7f 	bl	8001608 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_FMC_Init();
 800110a:	f000 faad 	bl	8001668 <_ZL11MX_FMC_Initv>
  MX_CRC_Init();
 800110e:	f000 f941 	bl	8001394 <_ZL11MX_CRC_Initv>
  MX_ICACHE_Init();
 8001112:	f000 f9af 	bl	8001474 <_ZL14MX_ICACHE_Initv>
  MX_DMA2D_Init();
 8001116:	f000 f965 	bl	80013e4 <_ZL13MX_DMA2D_Initv>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800111a:	f00c f9cb 	bl	800d4b4 <MX_TouchGFX_PreOSInit>
  	      {
  	      	Error_Handler();
  	      }
*/

  ST7789V_init();
 800111e:	f7ff fc23 	bl	8000968 <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8001122:	202c      	movs	r0, #44	; 0x2c
 8001124:	f7ff fbac 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_fill(COLOR_BLUE);
 8001128:	201f      	movs	r0, #31
 800112a:	f7ff fd3b 	bl	8000ba4 <ST7789V_fill>
  HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f001 f886 	bl	8002240 <HAL_Delay>



  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001134:	f7ff ff2a 	bl	8000f8c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	482a      	ldr	r0, [pc, #168]	; (80011e8 <main+0x104>)
 8001140:	f002 f932 	bl	80033a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f001 f87a 	bl	8002240 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4826      	ldr	r0, [pc, #152]	; (80011e8 <main+0x104>)
 8001150:	f002 f92a 	bl	80033a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8001154:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001158:	f001 f872 	bl	8002240 <HAL_Delay>


	  if(round_num == 0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10b      	bne.n	800117a <main+0x96>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 8001162:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001166:	f7ff fd1d 	bl	8000ba4 <ST7789V_fill>
		  round_num++;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f001 f864 	bl	8002240 <HAL_Delay>
 8001178:	e013      	b.n	80011a2 <main+0xbe>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	2232      	movs	r2, #50	; 0x32
 8001180:	2164      	movs	r1, #100	; 0x64
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f7ff fd46 	bl	8000c14 <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 8001188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118c:	2264      	movs	r2, #100	; 0x64
 800118e:	2150      	movs	r1, #80	; 0x50
 8001190:	2096      	movs	r0, #150	; 0x96
 8001192:	f7ff fea1 	bl	8000ed8 <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  HAL_Delay(500);
 8001196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119a:	f001 f851 	bl	8002240 <HAL_Delay>
		  round_num = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
	   	  round_num = 0;
	  }
/*
	  else if(round_num == 1)
	  {
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80011ac:	da0a      	bge.n	80011c4 <main+0xe0>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <main+0x108>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb72 	bl	80008a0 <ST7789V_SEND_DATA>
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	e7f0      	b.n	80011a6 <main+0xc2>
	   	  }
	  	  HAL_Delay(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f001 f83a 	bl	8002240 <HAL_Delay>
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011cc:	2104      	movs	r1, #4
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <main+0x10c>)
 80011d0:	f002 f8ea 	bl	80033a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80011d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d8:	f001 f832 	bl	8002240 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011dc:	2104      	movs	r1, #4
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <main+0x10c>)
 80011e0:	f002 f8e2 	bl	80033a8 <HAL_GPIO_TogglePin>

  }
 80011e4:	e7aa      	b.n	800113c <main+0x58>
 80011e6:	bf00      	nop
 80011e8:	42020400 	.word	0x42020400
 80011ec:	20000008 	.word	0x20000008
 80011f0:	42021800 	.word	0x42021800

080011f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09e      	sub	sp, #120	; 0x78
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2260      	movs	r2, #96	; 0x60
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f025 f84a 	bl	802629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001218:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800121c:	f003 fa1e 	bl	800465c <HAL_PWREx_ControlVoltageScaling>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8001230:	f000 fbc2 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001234:	2332      	movs	r3, #50	; 0x32
 8001236:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001248:	2301      	movs	r3, #1
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800124c:	2310      	movs	r3, #16
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800125a:	2301      	movs	r3, #1
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001266:	2350      	movs	r3, #80	; 0x50
 8001268:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001276:	2300      	movs	r3, #0
 8001278:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fadc 	bl	8004840 <HAL_RCC_OscConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001298:	f000 fb8e 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	231f      	movs	r3, #31
 800129e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2303      	movs	r3, #3
 80012a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	2104      	movs	r1, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 f997 	bl	80055ec <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80012ce:	f000 fb73 	bl	80019b8 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3778      	adds	r7, #120	; 0x78
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012de:	f003 fa9f 	bl	8004820 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012e2:	2002      	movs	r0, #2
 80012e4:	f003 fa3c 	bl	8004760 <HAL_PWREx_ConfigSupply>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 80012f8:	f000 fb5e 	bl	80019b8 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <_ZL12MX_ADC1_Initv+0x90>)
 8001308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001324:	2204      	movs	r2, #4
 8001326:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800132a:	2200      	movs	r2, #0
 800132c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001338:	2201      	movs	r2, #1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800134e:	2200      	movs	r2, #0
 8001350:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800135a:	2200      	movs	r2, #0
 800135c:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <_ZL12MX_ADC1_Initv+0x8c>)
 800136e:	f001 f867 	bl	8002440 <HAL_ADC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <_ZL12MX_ADC1_Initv+0x86>
  {
    Error_Handler();
 8001382:	f000 fb19 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2004c5b0 	.word	0x2004c5b0
 8001390:	42028000 	.word	0x42028000

08001394 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <_ZL11MX_CRC_Initv+0x4c>)
 800139c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <_ZL11MX_CRC_Initv+0x48>)
 80013be:	f001 fc19 	bl	8002bf4 <HAL_CRC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80013d2:	f000 faf1 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2004c63c 	.word	0x2004c63c
 80013e0:	40023000 	.word	0x40023000

080013e4 <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <_ZL13MX_DMA2D_Initv+0x8c>)
 80013ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001414:	2202      	movs	r2, #2
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 800141a:	2200      	movs	r2, #0
 800141c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001420:	2200      	movs	r2, #0
 8001422:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001426:	2200      	movs	r2, #0
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 800142c:	2200      	movs	r2, #0
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001430:	480e      	ldr	r0, [pc, #56]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 8001432:	f001 fcc9 	bl	8002dc8 <HAL_DMA2D_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_ZL13MX_DMA2D_Initv+0x66>
  {
    Error_Handler();
 8001446:	f000 fab7 	bl	80019b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800144a:	2101      	movs	r1, #1
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <_ZL13MX_DMA2D_Initv+0x88>)
 800144e:	f001 fd1d 	bl	8002e8c <HAL_DMA2D_ConfigLayer>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_ZL13MX_DMA2D_Initv+0x82>
  {
    Error_Handler();
 8001462:	f000 faa9 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2004c660 	.word	0x2004c660
 8001470:	4002b000 	.word	0x4002b000

08001474 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001488:	f001 ffe4 	bl	8003454 <HAL_ICACHE_Disable>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_ZL14MX_ICACHE_Initv+0x2c>
  {
    Error_Handler();
 800149c:	f000 fa8c 	bl	80019b8 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80014a8:	2301      	movs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	2000      	movs	r0, #0
 80014ba:	f001 fffb 	bl	80034b4 <HAL_ICACHE_EnableRemapRegion>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <_ZL14MX_ICACHE_Initv+0x5e>
  {
    Error_Handler();
 80014ce:	f000 fa73 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80014f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014f6:	f7ff fdd9 	bl	80010ac <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fdba 	bl	8001074 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fdb7 	bl	8001074 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800150a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800150c:	2303      	movs	r3, #3
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <_ZL13MX_UCPD1_Initv+0x64>)
 800151a:	f008 fc4a 	bl	8009db2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800151e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001522:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <_ZL13MX_UCPD1_Initv+0x68>)
 8001532:	f008 fc3e 	bl	8009db2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	42020400 	.word	0x42020400
 8001544:	42020000 	.word	0x42020000

08001548 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b27      	ldr	r3, [pc, #156]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001590:	481b      	ldr	r0, [pc, #108]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001592:	f007 fcbd 	bl	8008f10 <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80015a6:	f000 fa07 	bl	80019b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80015ae:	f008 f88f 	bl	80096d0 <HAL_UARTEx_SetTxFifoThreshold>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80015c2:	f000 f9f9 	bl	80019b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80015ca:	f008 f8bf 	bl	800974c <HAL_UARTEx_SetRxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80015de:	f000 f9eb 	bl	80019b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80015e4:	f008 f83b 	bl	800965e <HAL_UARTEx_DisableFifoMode>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80015f8:	f000 f9de 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2004c6c0 	.word	0x2004c6c0
 8001604:	40013800 	.word	0x40013800

08001608 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001614:	2206      	movs	r2, #6
 8001616:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800161a:	2202      	movs	r2, #2
 800161c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001644:	f001 ff88 	bl	8003558 <HAL_PCD_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x54>
  {
    Error_Handler();
 8001658:	f000 f9ae 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2004c750 	.word	0x2004c750
 8001664:	42040000 	.word	0x42040000

08001668 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f024 fe11 	bl	802629c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <_ZL11MX_FMC_Initv+0xd8>)
 800167e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 8001682:	4a30      	ldr	r2, [pc, #192]	; (8001744 <_ZL11MX_FMC_Initv+0xdc>)
 8001684:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 800169a:	2210      	movs	r2, #16
 800169c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 80016f2:	2307      	movs	r3, #7
 80016f4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80016f6:	230f      	movs	r3, #15
 80016f8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 80016fa:	2303      	movs	r3, #3
 80016fc:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 80016fe:	2303      	movs	r3, #3
 8001700:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001702:	230f      	movs	r3, #15
 8001704:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001706:	2310      	movs	r3, #16
 8001708:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800170a:	2311      	movs	r3, #17
 800170c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <_ZL11MX_FMC_Initv+0xd4>)
 800171a:	f006 ffbf 	bl	800869c <HAL_SRAM_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL11MX_FMC_Initv+0xca>
  {
    Error_Handler( );
 800172e:	f000 f943 	bl	80019b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2004cc5c 	.word	0x2004cc5c
 8001740:	420d0400 	.word	0x420d0400
 8001744:	420d0504 	.word	0x420d0504

08001748 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001764:	4a7d      	ldr	r2, [pc, #500]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800176e:	4b7b      	ldr	r3, [pc, #492]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	4b77      	ldr	r3, [pc, #476]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 800177e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001782:	4a76      	ldr	r2, [pc, #472]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 800178e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	4b70      	ldr	r3, [pc, #448]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 800179c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a0:	4a6e      	ldr	r2, [pc, #440]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017be:	4a67      	ldr	r2, [pc, #412]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017c8:	4b64      	ldr	r3, [pc, #400]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017dc:	4a5f      	ldr	r2, [pc, #380]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017fa:	4a58      	ldr	r2, [pc, #352]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001804:	4b55      	ldr	r3, [pc, #340]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	4a50      	ldr	r2, [pc, #320]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <_ZL12MX_GPIO_Initv+0x214>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2104      	movs	r1, #4
 8001834:	484a      	ldr	r0, [pc, #296]	; (8001960 <_ZL12MX_GPIO_Initv+0x218>)
 8001836:	f001 fd9f 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2104      	movs	r1, #4
 800183e:	4849      	ldr	r0, [pc, #292]	; (8001964 <_ZL12MX_GPIO_Initv+0x21c>)
 8001840:	f001 fd9a 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	4847      	ldr	r0, [pc, #284]	; (8001968 <_ZL12MX_GPIO_Initv+0x220>)
 800184a:	f001 fd95 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	21a0      	movs	r1, #160	; 0xa0
 8001852:	4846      	ldr	r0, [pc, #280]	; (800196c <_ZL12MX_GPIO_Initv+0x224>)
 8001854:	f001 fd90 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8001858:	2304      	movs	r3, #4
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	483c      	ldr	r0, [pc, #240]	; (8001960 <_ZL12MX_GPIO_Initv+0x218>)
 8001870:	f001 fbaa 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <_ZL12MX_GPIO_Initv+0x228>)
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4837      	ldr	r0, [pc, #220]	; (8001968 <_ZL12MX_GPIO_Initv+0x220>)
 800188a:	f001 fb9d 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 800188e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <_ZL12MX_GPIO_Initv+0x22c>)
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4835      	ldr	r0, [pc, #212]	; (8001978 <_ZL12MX_GPIO_Initv+0x230>)
 80018a4:	f001 fb90 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80018a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <_ZL12MX_GPIO_Initv+0x224>)
 80018be:	f001 fb83 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80018c2:	2304      	movs	r3, #4
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4822      	ldr	r0, [pc, #136]	; (8001964 <_ZL12MX_GPIO_Initv+0x21c>)
 80018da:	f001 fb75 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <_ZL12MX_GPIO_Initv+0x220>)
 80018f6:	f001 fb67 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 80018fa:	2320      	movs	r3, #32
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4816      	ldr	r0, [pc, #88]	; (800196c <_ZL12MX_GPIO_Initv+0x224>)
 8001912:	f001 fb59 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <_ZL12MX_GPIO_Initv+0x224>)
 800192e:	f001 fb4b 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2013      	movs	r0, #19
 8001938:	f001 f934 	bl	8002ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800193c:	2013      	movs	r0, #19
 800193e:	f001 f94b 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2018      	movs	r0, #24
 8001948:	f001 f92c 	bl	8002ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800194c:	2018      	movs	r0, #24
 800194e:	f001 f943 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	; 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	46020c00 	.word	0x46020c00
 8001960:	42021000 	.word	0x42021000
 8001964:	42021800 	.word	0x42021800
 8001968:	42020800 	.word	0x42020800
 800196c:	42020400 	.word	0x42020400
 8001970:	10210000 	.word	0x10210000
 8001974:	10110000 	.word	0x10110000
 8001978:	42021400 	.word	0x42021400

0800197c <signalVSync_caller>:

/* USER CODE BEGIN 4 */

void signalVSync_caller(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001980:	2104      	movs	r1, #4
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <signalVSync_caller+0x14>)
 8001984:	f001 fd10 	bl	80033a8 <HAL_GPIO_TogglePin>
	touchgfx::OSWrappers::signalVSync();
 8001988:	f010 fb26 	bl	8011fd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	42021800 	.word	0x42021800

08001994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a6:	f000 fc2b 	bl	8002200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40012c00 	.word	0x40012c00

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>
	...

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_MspInit+0x34>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_MspInit+0x34>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_MspInit+0x34>)
 80019dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80019e8:	2004      	movs	r0, #4
 80019ea:	f001 f8d0 	bl	8002b8e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	46020c00 	.word	0x46020c00

080019fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0bc      	sub	sp, #240	; 0xf0
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	22c8      	movs	r2, #200	; 0xc8
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f024 fc3d 	bl	802629c <memset>
  if(hadc->Instance==ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <HAL_ADC_MspInit+0xbc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d140      	bne.n	8001aae <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001a38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f9df 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001a50:	f7ff ffb2 	bl	80019b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a78:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_ADC_MspInit+0xc0>)
 8001a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001a90:	2304      	movs	r3, #4
 8001a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_ADC_MspInit+0xc4>)
 8001aaa:	f001 fa8d 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aae:	bf00      	nop
 8001ab0:	37f0      	adds	r7, #240	; 0xf0
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	42028000 	.word	0x42028000
 8001abc:	46020c00 	.word	0x46020c00
 8001ac0:	42020800 	.word	0x42020800

08001ac4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <HAL_CRC_MspInit+0x3c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10e      	bne.n	8001af4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_CRC_MspInit+0x40>)
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_CRC_MspInit+0x40>)
 8001ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_CRC_MspInit+0x40>)
 8001ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023000 	.word	0x40023000
 8001b04:	46020c00 	.word	0x46020c00

08001b08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_DMA2D_MspInit+0x3c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_DMA2D_MspInit+0x40>)
 8001b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_DMA2D_MspInit+0x40>)
 8001b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_DMA2D_MspInit+0x40>)
 8001b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	4002b000 	.word	0x4002b000
 8001b48:	46020c00 	.word	0x46020c00

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0bc      	sub	sp, #240	; 0xf0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	22c8      	movs	r2, #200	; 0xc8
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f024 fb95 	bl	802629c <memset>
  if(huart->Instance==USART1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_UART_MspInit+0xc4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d145      	bne.n	8001c08 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b7c:	f04f 0201 	mov.w	r2, #1
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 f939 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001b9c:	f7ff ff0c 	bl	80019b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001ba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0xc8>)
 8001bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001bdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001be0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0xcc>)
 8001c04:	f001 f9e0 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	37f0      	adds	r7, #240	; 0xf0
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40013800 	.word	0x40013800
 8001c14:	46020c00 	.word	0x46020c00
 8001c18:	42020000 	.word	0x42020000

08001c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0be      	sub	sp, #248	; 0xf8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	f107 0318 	add.w	r3, r7, #24
 8001c38:	22c8      	movs	r2, #200	; 0xc8
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f024 fb2d 	bl	802629c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_PCD_MspInit+0x11c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d171      	bne.n	8001d30 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f8d0 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001c6e:	f7ff fea3 	bl	80019b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	4a30      	ldr	r2, [pc, #192]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001caa:	230a      	movs	r3, #10
 8001cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4822      	ldr	r0, [pc, #136]	; (8001d40 <HAL_PCD_MspInit+0x124>)
 8001cb8:	f001 f986 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d119      	bne.n	8001d1c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001d06:	f002 fd7b 	bl	8004800 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_PCD_MspInit+0x120>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d1a:	e001      	b.n	8001d20 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001d1c:	f002 fd70 	bl	8004800 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2049      	movs	r0, #73	; 0x49
 8001d26:	f000 ff3d 	bl	8002ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001d2a:	2049      	movs	r0, #73	; 0x49
 8001d2c:	f000 ff54 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d30:	bf00      	nop
 8001d32:	37f8      	adds	r7, #248	; 0xf8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	42040000 	.word	0x42040000
 8001d3c:	46020c00 	.word	0x46020c00
 8001d40:	42020000 	.word	0x42020000

08001d44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_FMC_MspInit+0x8c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d132      	bne.n	8001dc6 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_FMC_MspInit+0x8c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_FMC_MspInit+0x90>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <HAL_FMC_MspInit+0x90>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_FMC_MspInit+0x90>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d84:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001d88:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d96:	230c      	movs	r3, #12
 8001d98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <HAL_FMC_MspInit+0x94>)
 8001da0:	f001 f912 	bl	8002fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001da4:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001da8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001db6:	230c      	movs	r3, #12
 8001db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4807      	ldr	r0, [pc, #28]	; (8001ddc <HAL_FMC_MspInit+0x98>)
 8001dc0:	f001 f902 	bl	8002fc8 <HAL_GPIO_Init>
 8001dc4:	e000      	b.n	8001dc8 <HAL_FMC_MspInit+0x84>
    return;
 8001dc6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2004ccb4 	.word	0x2004ccb4
 8001dd4:	46020c00 	.word	0x46020c00
 8001dd8:	42021000 	.word	0x42021000
 8001ddc:	42020c00 	.word	0x42020c00

08001de0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001de8:	f7ff ffac 	bl	8001d44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_InitTick+0xcc>)
 8001e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ec0 <HAL_InitTick+0xcc>)
 8001e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_InitTick+0xcc>)
 8001e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e22:	f107 0210 	add.w	r2, r7, #16
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 ff2d 	bl	8005c8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e32:	f003 ff03 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8001e36:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_InitTick+0xd0>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9b      	lsrs	r3, r3, #18
 8001e42:	3b01      	subs	r3, #1
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_InitTick+0xd8>)
 8001e4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e52:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001e66:	4818      	ldr	r0, [pc, #96]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e68:	f006 fc68 	bl	800873c <HAL_TIM_Base_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e7a:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <HAL_InitTick+0xd4>)
 8001e7c:	f006 fcc0 	bl	8008800 <HAL_TIM_Base_Start_IT>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001e86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d808      	bhi.n	8001ea6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	202a      	movs	r0, #42	; 0x2a
 8001e9a:	f000 fe83 	bl	8002ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_InitTick+0xdc>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e002      	b.n	8001eac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001eac:	202a      	movs	r0, #42	; 0x2a
 8001eae:	f000 fe93 	bl	8002bd8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3738      	adds	r7, #56	; 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	46020c00 	.word	0x46020c00
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	2004ccb8 	.word	0x2004ccb8
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	2002580c 	.word	0x2002580c

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RIGHT_Pin);
 8001f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f08:	f001 fa68 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */
HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	4802      	ldr	r0, [pc, #8]	; (8001f18 <EXTI8_IRQHandler+0x18>)
 8001f10:	f001 fa4a 	bl	80033a8 <HAL_GPIO_TogglePin>
//signalVSync_caller();
  /* USER CODE END EXTI8_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	42020400 	.word	0x42020400

08001f1c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001f20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f24:	f001 fa5a 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM1_UP_IRQHandler+0x10>)
 8001f32:	f006 fd05 	bl	8008940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2004ccb8 	.word	0x2004ccb8

08001f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <OTG_FS_IRQHandler+0x10>)
 8001f46:	f001 fc2b 	bl	80037a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2004c750 	.word	0x2004c750

08001f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	return 1;
 8001f58:	2301      	movs	r3, #1
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_kill>:

int _kill(int pid, int sig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f6e:	f024 f949 	bl	8026204 <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2216      	movs	r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
	return -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ffe7 	bl	8001f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f96:	e7fe      	b.n	8001f96 <_exit+0x12>

08001f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e00a      	b.n	8001fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001faa:	e000      	b.n	8001fae <_read+0x16>
 8001fac:	bf00      	nop
 8001fae:	4601      	mov	r1, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	b2ca      	uxtb	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbf0      	blt.n	8001faa <_read+0x12>
	}

return len;
 8001fc8:	687b      	ldr	r3, [r7, #4]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e009      	b.n	8001ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60ba      	str	r2, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	e000      	b.n	8001ff2 <_write+0x20>
 8001ff0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dbf1      	blt.n	8001fe4 <_write+0x12>
	}
	return len;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_close>:

int _close(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
	return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002032:	605a      	str	r2, [r3, #4]
	return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_isatty>:

int _isatty(int file)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
	return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f024 f8ae 	bl	8026204 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200c0000 	.word	0x200c0000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	2004cd04 	.word	0x2004cd04
 80020dc:	2004f908 	.word	0x2004f908

080020e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <SystemInit+0x68>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <SystemInit+0x68>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <SystemInit+0x6c>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <SystemInit+0x6c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <SystemInit+0x6c>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <SystemInit+0x6c>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <SystemInit+0x6c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <SystemInit+0x6c>)
 8002112:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002116:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800211a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <SystemInit+0x6c>)
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <SystemInit+0x6c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <SystemInit+0x6c>)
 8002128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <SystemInit+0x6c>)
 8002130:	2200      	movs	r2, #0
 8002132:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SystemInit+0x68>)
 8002136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800213a:	609a      	str	r2, [r3, #8]
  #endif
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	46020c00 	.word	0x46020c00

08002150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002154:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002156:	e003      	b.n	8002160 <LoopCopyDataInit>

08002158 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800215a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800215c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800215e:	3104      	adds	r1, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002164:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002166:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002168:	d3f6      	bcc.n	8002158 <CopyDataInit>
	ldr	r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopForever+0x12>)
	b	LoopFillZerobss
 800216c:	e002      	b.n	8002174 <LoopFillZerobss>

0800216e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800216e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002170:	f842 3b04 	str.w	r3, [r2], #4

08002174 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <LoopForever+0x16>)
	cmp	r2, r3
 8002176:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002178:	d3f9      	bcc.n	800216e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800217a:	f7ff ffb1 	bl	80020e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f024 f859 	bl	8026234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002182:	f7fe ffaf 	bl	80010e4 <main>

08002186 <LoopForever>:

LoopForever:
    b LoopForever
 8002186:	e7fe      	b.n	8002186 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002188:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800218c:	0804f258 	.word	0x0804f258
	ldr	r0, =_sdata
 8002190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002194:	20025900 	.word	0x20025900
	ldr	r2, =_sbss
 8002198:	2004b100 	.word	0x2004b100
	ldr	r3, = _ebss
 800219c:	2004f908 	.word	0x2004f908

080021a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_Init+0x4c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_Init+0x4c>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 fcea 	bl	8002b8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021ba:	f003 fc09 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_Init+0x50>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	490b      	ldr	r1, [pc, #44]	; (80021f8 <HAL_Init+0x54>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_Init+0x58>)
 80021d2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d4:	2007      	movs	r0, #7
 80021d6:	f7ff fe0d 	bl	8001df4 <HAL_InitTick>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e002      	b.n	80021ea <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fbee 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	46020c00 	.word	0x46020c00
 80021f8:	080282bc 	.word	0x080282bc
 80021fc:	20025808 	.word	0x20025808

08002200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20025810 	.word	0x20025810
 8002224:	2004cd08 	.word	0x2004cd08

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2004cd08 	.word	0x2004cd08

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20025810 	.word	0x20025810

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d002      	beq.n	80022e0 <LL_ADC_SetGainCompensation+0x32>
 80022da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022de:	e000      	b.n	80022e2 <LL_ADC_SetGainCompensation+0x34>
 80022e0:	2200      	movs	r2, #0
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2107      	movs	r1, #7
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6093      	str	r3, [r2, #8]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236a:	d101      	bne.n	8002370 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800238e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002392:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ba:	d101      	bne.n	80023c0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_IsEnabled+0x18>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_IsEnabled+0x1a>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d101      	bne.n	800240c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d101      	bne.n	8002432 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e2e3      	b.n	8002a28 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a92      	ldr	r2, [pc, #584]	; (80026b8 <HAL_ADC_Init+0x278>)
 800246e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fabf 	bl	80019fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff60 	bl	8002356 <LL_ADC_IsDeepPowerDownEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff46 	bl	8002332 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff7b 	bl	80023a6 <LL_ADC_IsInternalRegulatorEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff5f 	bl	800237e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c0:	4b7e      	ldr	r3, [pc, #504]	; (80026bc <HAL_ADC_Init+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	4a7e      	ldr	r2, [pc, #504]	; (80026c0 <HAL_ADC_Init+0x280>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff5d 	bl	80023a6 <LL_ADC_IsInternalRegulatorEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff6d 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 800251a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8274 	bne.w	8002a12 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 8270 	bne.w	8002a12 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002536:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff41 	bl	80023ce <LL_ADC_IsEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14e      	bne.n	80025f0 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_ADC_Init+0x278>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d028      	beq.n	80025ae <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_ADC_Init+0x284>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d109      	bne.n	800257a <HAL_ADC_Init+0x13a>
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <HAL_ADC_Init+0x284>)
 8002568:	f7ff ff31 	bl	80023ce <LL_ADC_IsEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e008      	b.n	800258c <HAL_ADC_Init+0x14c>
 800257a:	484f      	ldr	r0, [pc, #316]	; (80026b8 <HAL_ADC_Init+0x278>)
 800257c:	f7ff ff27 	bl	80023ce <LL_ADC_IsEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02f      	beq.n	80025f0 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_ADC_Init+0x284>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_ADC_Init+0x15e>
 800259a:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_ADC_Init+0x288>)
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Init+0x160>
 800259e:	4a4b      	ldr	r2, [pc, #300]	; (80026cc <HAL_ADC_Init+0x28c>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7ff fe6e 	bl	8002288 <LL_ADC_SetCommonClock>
 80025ac:	e020      	b.n	80025f0 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f023 010c 	bic.w	r1, r3, #12
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d005      	beq.n	80025d0 <HAL_ADC_Init+0x190>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_Init+0x192>
 80025d0:	230c      	movs	r3, #12
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <HAL_ADC_Init+0x28c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025ea:	4938      	ldr	r1, [pc, #224]	; (80026cc <HAL_ADC_Init+0x28c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <HAL_ADC_Init+0x278>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d010      	beq.n	800261c <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002600:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002606:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800260c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002614:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002616:	4313      	orrs	r3, r2
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	e030      	b.n	800267e <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002628:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800262a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002630:	2a00      	cmp	r2, #0
 8002632:	d002      	beq.n	800263a <HAL_ADC_Init+0x1fa>
 8002634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002638:	e000      	b.n	800263c <HAL_ADC_Init+0x1fc>
 800263a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800263c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002642:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da04      	bge.n	8002656 <HAL_ADC_Init+0x216>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002654:	e001      	b.n	800265a <HAL_ADC_Init+0x21a>
 8002656:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800265a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4918      	ldr	r1, [pc, #96]	; (80026c4 <HAL_ADC_Init+0x284>)
 8002662:	428b      	cmp	r3, r1
 8002664:	d103      	bne.n	800266e <HAL_ADC_Init+0x22e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266c:	e003      	b.n	8002676 <HAL_ADC_Init+0x236>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002674:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002676:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	4313      	orrs	r3, r2
 800267c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d12f      	bne.n	80026e8 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_ADC_Init+0x278>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	3b01      	subs	r3, #1
 8002698:	045b      	lsls	r3, r3, #17
 800269a:	6a3a      	ldr	r2, [r7, #32]
 800269c:	4313      	orrs	r3, r2
 800269e:	623b      	str	r3, [r7, #32]
 80026a0:	e022      	b.n	80026e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e018      	b.n	80026e8 <HAL_ADC_Init+0x2a8>
 80026b6:	bf00      	nop
 80026b8:	46021000 	.word	0x46021000
 80026bc:	20025808 	.word	0x20025808
 80026c0:	053e2d63 	.word	0x053e2d63
 80026c4:	42028000 	.word	0x42028000
 80026c8:	42028308 	.word	0x42028308
 80026cc:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a93      	ldr	r2, [pc, #588]	; (800293c <HAL_ADC_Init+0x4fc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	4313      	orrs	r3, r2
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	4313      	orrs	r3, r2
 800270c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b8a      	ldr	r3, [pc, #552]	; (8002940 <HAL_ADC_Init+0x500>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]
 8002722:	e033      	b.n	800278c <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	4313      	orrs	r3, r2
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	4313      	orrs	r3, r2
 800273e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 800274a:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	6a39      	ldr	r1, [r7, #32]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6a      	ldr	r2, [pc, #424]	; (800293c <HAL_ADC_Init+0x4fc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f000 8093 	beq.w	80028be <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe29 	bl	80023f4 <LL_ADC_REG_IsConversionOngoing>
 80027a2:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe36 	bl	800241a <LL_ADC_INJ_IsConversionOngoing>
 80027ae:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d161      	bne.n	800287a <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d15e      	bne.n	800287a <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7f1b      	ldrb	r3, [r3, #28]
 80027c0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	495f      	ldr	r1, [pc, #380]	; (8002944 <HAL_ADC_Init+0x504>)
 80027c8:	428b      	cmp	r3, r1
 80027ca:	d102      	bne.n	80027d2 <HAL_ADC_Init+0x392>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Init+0x398>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027d8:	4313      	orrs	r3, r2
 80027da:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f7ff fd51 	bl	80022ae <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002812:	2b01      	cmp	r3, #1
 8002814:	d11e      	bne.n	8002854 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_ADC_Init+0x508>)
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800282a:	0411      	lsls	r1, r2, #16
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002842:	0892      	lsrs	r2, r2, #2
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10c      	bne.n	800289c <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f023 010f 	bic.w	r1, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028bc:	e0b2      	b.n	8002a24 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028c6:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80028cc:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80028d2:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d103      	bne.n	80028ec <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_ADC_Init+0x50c>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	69f9      	ldr	r1, [r7, #28]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f7ff fcf2 	bl	80022f4 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	461a      	mov	r2, r3
 800291a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800291e:	f7ff fce9 	bl	80022f4 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d112      	bne.n	8002950 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f062 020f 	orn	r2, r2, #15
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
 800293a:	e044      	b.n	80029c6 <HAL_ADC_Init+0x586>
 800293c:	46021000 	.word	0x46021000
 8002940:	fff0c013 	.word	0xfff0c013
 8002944:	42028000 	.word	0x42028000
 8002948:	fc00f81e 	.word	0xfc00f81e
 800294c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d135      	bne.n	80029c6 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e00d      	b.n	800297c <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d006      	beq.n	8002984 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3301      	adds	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b07      	cmp	r3, #7
 8002980:	d9ee      	bls.n	8002960 <HAL_ADC_Init+0x520>
 8002982:	e000      	b.n	8002986 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002984:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d108      	bne.n	800299e <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f062 020f 	orn	r2, r2, #15
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
 800299c:	e013      	b.n	80029c6 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f003 031c 	and.w	r3, r3, #28
 80029b0:	f06f 020f 	mvn.w	r2, #15
 80029b4:	fa02 f103 	lsl.w	r1, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_ADC_Init+0x5f0>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10b      	bne.n	80029ee <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e0:	f023 0303 	bic.w	r3, r3, #3
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029ec:	e01a      	b.n	8002a24 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	f023 0312 	bic.w	r3, r3, #18
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a10:	e008      	b.n	8002a24 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	833ffff3 	.word	0x833ffff3

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff4c 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb2:	f7ff ff63 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7ff ffb3 	bl	8002b28 <NVIC_EncodePriority>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff82 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff56 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e054      	b.n	8002cb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7f5b      	ldrb	r3, [r3, #29]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe ff54 	bl	8001ac4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_CRC_Init+0xc4>)
 8002c30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0218 	bic.w	r2, r2, #24
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	e00c      	b.n	8002c5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f834 	bl	8002cbc <HAL_CRCEx_Polynomial_Set>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e028      	b.n	8002cb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	795b      	ldrb	r3, [r3, #5]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	e004      	b.n	8002c7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	04c11db7 	.word	0x04c11db7

08002cbc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ccc:	231f      	movs	r3, #31
 8002cce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002cd0:	bf00      	nop
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	613a      	str	r2, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	d846      	bhi.n	8002d84 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <HAL_CRCEx_Polynomial_Set+0x40>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d8b 	.word	0x08002d8b
 8002d00:	08002d85 	.word	0x08002d85
 8002d04:	08002d85 	.word	0x08002d85
 8002d08:	08002d85 	.word	0x08002d85
 8002d0c:	08002d85 	.word	0x08002d85
 8002d10:	08002d85 	.word	0x08002d85
 8002d14:	08002d85 	.word	0x08002d85
 8002d18:	08002d85 	.word	0x08002d85
 8002d1c:	08002d79 	.word	0x08002d79
 8002d20:	08002d85 	.word	0x08002d85
 8002d24:	08002d85 	.word	0x08002d85
 8002d28:	08002d85 	.word	0x08002d85
 8002d2c:	08002d85 	.word	0x08002d85
 8002d30:	08002d85 	.word	0x08002d85
 8002d34:	08002d85 	.word	0x08002d85
 8002d38:	08002d85 	.word	0x08002d85
 8002d3c:	08002d6d 	.word	0x08002d6d
 8002d40:	08002d85 	.word	0x08002d85
 8002d44:	08002d85 	.word	0x08002d85
 8002d48:	08002d85 	.word	0x08002d85
 8002d4c:	08002d85 	.word	0x08002d85
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002d85 	.word	0x08002d85
 8002d58:	08002d85 	.word	0x08002d85
 8002d5c:	08002d61 	.word	0x08002d61
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d913      	bls.n	8002d8e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d6a:	e010      	b.n	8002d8e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b07      	cmp	r3, #7
 8002d70:	d90f      	bls.n	8002d92 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d76:	e00c      	b.n	8002d92 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	d90b      	bls.n	8002d96 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d82:	e008      	b.n	8002d96 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	e006      	b.n	8002d98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e004      	b.n	8002d98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d96:	bf00      	nop
  }
  if (status == HAL_OK)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 0118 	bic.w	r1, r3, #24
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e053      	b.n	8002e82 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fe8a 	bl	8001b08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6851      	ldr	r1, [r2, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	69d2      	ldr	r2, [r2, #28]
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6891      	ldr	r1, [r2, #8]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6992      	ldr	r2, [r2, #24]
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68d1      	ldr	r1, [r2, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	051a      	lsls	r2, r3, #20
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA2D_ConfigLayer+0x20>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e084      	b.n	8002fb6 <HAL_DMA2D_ConfigLayer+0x12a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	3328      	adds	r3, #40	; 0x28
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ee0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_DMA2D_ConfigLayer+0x138>)
 8002eee:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b0a      	cmp	r3, #10
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA2D_ConfigLayer+0x74>
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d107      	bne.n	8002f10 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e005      	b.n	8002f1c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d120      	bne.n	8002f64 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	ea02 0103 	and.w	r1, r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b0a      	cmp	r3, #10
 8002f4a:	d003      	beq.n	8002f54 <HAL_DMA2D_ConfigLayer+0xc8>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d127      	bne.n	8002fa4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
 8002f62:	e01f      	b.n	8002fa4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	ea02 0103 	and.w	r1, r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b0a      	cmp	r3, #10
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA2D_ConfigLayer+0x10a>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d106      	bne.n	8002fa4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fa2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	ff33000f 	.word	0xff33000f

08002fc8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fda:	e1ba      	b.n	8003352 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 81aa 	beq.w	800334c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a55      	ldr	r2, [pc, #340]	; (8003150 <HAL_GPIO_Init+0x188>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d15d      	bne.n	80030bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003006:	2201      	movs	r2, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	4013      	ands	r3, r2
 8003014:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	4313      	orrs	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003030:	4a48      	ldr	r2, [pc, #288]	; (8003154 <HAL_GPIO_Init+0x18c>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003038:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800303a:	4a46      	ldr	r2, [pc, #280]	; (8003154 <HAL_GPIO_Init+0x18c>)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3208      	adds	r2, #8
 800304e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003052:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	4013      	ands	r3, r2
 8003068:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220b      	movs	r2, #11
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	4313      	orrs	r3, r2
 800307c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3208      	adds	r2, #8
 8003086:	69f9      	ldr	r1, [r7, #28]
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2202      	movs	r2, #2
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e067      	b.n	800318c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x104>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b12      	cmp	r3, #18
 80030ca:	d145      	bne.n	8003158 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	4313      	orrs	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4013      	ands	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	4313      	orrs	r3, r2
 8003144:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e01e      	b.n	800318c <HAL_GPIO_Init+0x1c4>
 800314e:	bf00      	nop
 8003150:	46020000 	.word	0x46020000
 8003154:	08028314 	.word	0x08028314
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4013      	ands	r3, r2
 800316e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d00b      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a0:	2b11      	cmp	r3, #17
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b12      	cmp	r3, #18
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80031e2:	2201      	movs	r2, #1
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0201 	and.w	r2, r3, #1
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d017      	beq.n	8003246 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	4013      	ands	r3, r2
 800322c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	4313      	orrs	r3, r2
 800323e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d07c      	beq.n	800334c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3318      	adds	r3, #24
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	4013      	ands	r3, r2
 8003274:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0a9a      	lsrs	r2, r3, #10
 800327a:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <HAL_GPIO_Init+0x3ac>)
 800327c:	4013      	ands	r3, r2
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	00d2      	lsls	r2, r2, #3
 8003286:	4093      	lsls	r3, r2
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	4313      	orrs	r3, r2
 800328c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800328e:	4938      	ldr	r1, [pc, #224]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3318      	adds	r3, #24
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80032f0:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	4013      	ands	r3, r2
 8003300:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 8003320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003324:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	4013      	ands	r3, r2
 800332e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_GPIO_Init+0x3a8>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f ae3d 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3724      	adds	r7, #36	; 0x24
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	46022000 	.word	0x46022000
 8003374:	002f7f7f 	.word	0x002f7f7f

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003394:	e002      	b.n	800339c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43d9      	mvns	r1, r3
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	400b      	ands	r3, r1
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	619a      	str	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033f2:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f814 	bl	8003428 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800340c:	4a05      	ldr	r2, [pc, #20]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f812 	bl	800343e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	46022000 	.word	0x46022000

08003428 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_ICACHE_Disable+0x5c>)
 8003460:	2202      	movs	r2, #2
 8003462:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_ICACHE_Disable+0x5c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ICACHE_Disable+0x5c>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003470:	f7fe feda 	bl	8002228 <HAL_GetTick>
 8003474:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003476:	e00f      	b.n	8003498 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003478:	f7fe fed6 	bl	8002228 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d908      	bls.n	8003498 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_ICACHE_Disable+0x5c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	71fb      	strb	r3, [r7, #7]
        break;
 8003496:	e005      	b.n	80034a4 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_ICACHE_Disable+0x5c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40030400 	.word	0x40030400

080034b4 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_ICACHE_EnableRemapRegion+0x98>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
 80034d2:	e034      	b.n	800353e <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 80034da:	4413      	add	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
 80034ee:	e026      	b.n	800353e <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80034fc:	4013      	ands	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	425b      	negs	r3, r3
 800350e:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003510:	401a      	ands	r2, r3
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8003514:	4013      	ands	r3, r2
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	025a      	lsls	r2, r3, #9
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 800352c:	4313      	orrs	r3, r2
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40030400 	.word	0x40030400
 8003550:	40030420 	.word	0x40030420
 8003554:	07ff0000 	.word	0x07ff0000

08003558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	b08f      	sub	sp, #60	; 0x3c
 800355c:	af0a      	add	r7, sp, #40	; 0x28
 800355e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e116      	b.n	8003798 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe fb49 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f006 fd57 	bl	800a05c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	687e      	ldr	r6, [r7, #4]
 80035b6:	466d      	mov	r5, sp
 80035b8:	f106 0410 	add.w	r4, r6, #16
 80035bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80035cc:	1d33      	adds	r3, r6, #4
 80035ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d0:	6838      	ldr	r0, [r7, #0]
 80035d2:	f006 fc74 	bl	8009ebe <USB_CoreInit>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0d7      	b.n	8003798 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f006 fd45 	bl	800a07e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	e04a      	b.n	8003690 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	333d      	adds	r3, #61	; 0x3d
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	333c      	adds	r3, #60	; 0x3c
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	b298      	uxth	r0, r3
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3344      	adds	r3, #68	; 0x44
 8003636:	4602      	mov	r2, r0
 8003638:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3340      	adds	r3, #64	; 0x40
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3348      	adds	r3, #72	; 0x48
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334c      	adds	r3, #76	; 0x4c
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	3354      	adds	r3, #84	; 0x54
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3301      	adds	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3af      	bcc.n	80035fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e044      	b.n	800372a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	3301      	adds	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d3b5      	bcc.n	80036a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	687e      	ldr	r6, [r7, #4]
 800373c:	466d      	mov	r5, sp
 800373e:	f106 0410 	add.w	r4, r6, #16
 8003742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800374e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003752:	1d33      	adds	r3, r6, #4
 8003754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	f006 fcde 	bl	800a118 <USB_DevInit>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e014      	b.n	8003798 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 ff38 	bl	80045fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f006 fff1 	bl	800a778 <USB_DevDisconnect>

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b08d      	sub	sp, #52	; 0x34
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f007 f892 	bl	800a8e0 <USB_GetMode>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 84b7 	bne.w	8004132 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f006 fff6 	bl	800a7ba <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 84ad 	beq.w	8004130 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f006 ffe3 	bl	800a7ba <USB_ReadInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d107      	bne.n	800380e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 0202 	and.w	r2, r2, #2
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f006 ffd1 	bl	800a7ba <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b10      	cmp	r3, #16
 8003820:	d161      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0210 	bic.w	r2, r2, #16
 8003830:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	3304      	adds	r3, #4
 8003850:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	0c5b      	lsrs	r3, r3, #17
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	2b02      	cmp	r3, #2
 800385c:	d124      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d035      	beq.n	80038d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f006 ff23 	bl	800a6c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a0:	441a      	add	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	621a      	str	r2, [r3, #32]
 80038a6:	e016      	b.n	80038d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	0c5b      	lsrs	r3, r3, #17
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d110      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038ba:	2208      	movs	r2, #8
 80038bc:	4619      	mov	r1, r3
 80038be:	6a38      	ldr	r0, [r7, #32]
 80038c0:	f006 ff02 	bl	800a6c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d0:	441a      	add	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0210 	orr.w	r2, r2, #16
 80038e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 ff65 	bl	800a7ba <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038fa:	f040 80a7 	bne.w	8003a4c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f006 ff6a 	bl	800a7e0 <USB_ReadDevAllOutEpInterrupt>
 800390c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800390e:	e099      	b.n	8003a44 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 808e 	beq.w	8003a38 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f006 ff8e 	bl	800a848 <USB_ReadDevOutEPInterrupt>
 800392c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	2301      	movs	r3, #1
 8003948:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800394a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fd27 	bl	80043a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	2308      	movs	r3, #8
 800396c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800396e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fdfd 	bl	8004570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	461a      	mov	r2, r3
 800398e:	2310      	movs	r3, #16
 8003990:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d030      	beq.n	80039fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d109      	bne.n	80039bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	78db      	ldrb	r3, [r3, #3]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d108      	bne.n	80039ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fbf0 	bl	80041cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	2302      	movs	r3, #2
 80039fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	2320      	movs	r3, #32
 8003a18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a36:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f47f af62 	bne.w	8003910 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f006 feb2 	bl	800a7ba <USB_ReadInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a60:	f040 80db 	bne.w	8003c1a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f006 fed3 	bl	800a814 <USB_ReadDevAllInEpInterrupt>
 8003a6e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a74:	e0cd      	b.n	8003c12 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80c2 	beq.w	8003c06 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f006 fef9 	bl	800a884 <USB_ReadDevInEPInterrupt>
 8003a92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d057      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003abe:	4013      	ands	r3, r2
 8003ac0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d132      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334c      	adds	r3, #76	; 0x4c
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4403      	add	r3, r0
 8003afc:	3348      	adds	r3, #72	; 0x48
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4419      	add	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4403      	add	r3, r0
 8003b10:	334c      	adds	r3, #76	; 0x4c
 8003b12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x3a2>
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	3354      	adds	r3, #84	; 0x54
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	f006 ff01 	bl	800a944 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fb01 	bl	8004150 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2308      	movs	r3, #8
 8003b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	2310      	movs	r3, #16
 8003b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d023      	beq.n	8003bf4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bae:	6a38      	ldr	r0, [r7, #32]
 8003bb0:	f006 fc00 	bl	800a3b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	3338      	adds	r3, #56	; 0x38
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	78db      	ldrb	r3, [r3, #3]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d108      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fb01 	bl	80041e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fb40 	bl	8004286 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	3301      	adds	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f af2e 	bne.w	8003a76 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f006 fdcb 	bl	800a7ba <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2e:	d122      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c56:	2100      	movs	r1, #0
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fcf3 	bl	8004644 <HAL_PCDEx_LPM_Callback>
 8003c5e:	e002      	b.n	8003c66 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 faa9 	bl	80041b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f006 fd9d 	bl	800a7ba <USB_ReadInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8a:	d112      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fa81 	bl	80041a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f006 fd7f 	bl	800a7ba <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc6:	d121      	bne.n	8003d0c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003cd6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d111      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fca0 	bl	8004644 <HAL_PCDEx_LPM_Callback>
 8003d04:	e002      	b.n	8003d0c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa4c 	bl	80041a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f006 fd52 	bl	800a7ba <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	f040 80b7 	bne.w	8003e92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2110      	movs	r1, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f006 fb38 	bl	800a3b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d48:	e046      	b.n	8003dd8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	461a      	mov	r2, r3
 8003d58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003db0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3b3      	bcc.n	8003d4a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003df4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0e:	f043 030b 	orr.w	r3, r3, #11
 8003e12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e24:	f043 030b 	orr.w	r3, r3, #11
 8003e28:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2a:	e015      	b.n	8003e58 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e52:	f043 030b 	orr.w	r3, r3, #11
 8003e56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f006 fd61 	bl	800a944 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f006 fc8f 	bl	800a7ba <USB_ReadInterrupts>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea6:	d124      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f006 fd25 	bl	800a8fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f006 faf9 	bl	800a4ae <USB_GetDevSpeed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	f001 fe8a 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f006 f81e 	bl	8009f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f957 	bl	8004190 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f006 fc5f 	bl	800a7ba <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d10a      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f938 	bl	800417c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f002 0208 	and.w	r2, r2, #8
 8003f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f006 fc4a 	bl	800a7ba <USB_ReadInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d122      	bne.n	8003f76 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e014      	b.n	8003f6c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f95f 	bl	8004224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	3301      	adds	r3, #1
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3e5      	bcc.n	8003f42 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f006 fc1d 	bl	800a7ba <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8a:	d13b      	bne.n	8004004 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	e02b      	b.n	8003fea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3340      	adds	r3, #64	; 0x40
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d115      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da12      	bge.n	8003fe4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	333f      	adds	r3, #63	; 0x3f
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f920 	bl	8004224 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3ce      	bcc.n	8003f92 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f006 fbd6 	bl	800a7ba <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004018:	d155      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
 800401e:	e045      	b.n	80040ac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d12e      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004048:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	da2b      	bge.n	80040a6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800405a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800405e:	429a      	cmp	r2, r3
 8004060:	d121      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a2:	6053      	str	r3, [r2, #4]
            break;
 80040a4:	e007      	b.n	80040b6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	3301      	adds	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3b4      	bcc.n	8004020 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f006 fb75 	bl	800a7ba <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d10a      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f88d 	bl	80041fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f006 fb5f 	bl	800a7ba <USB_ReadInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d115      	bne.n	8004132 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f879 	bl	8004210 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e000      	b.n	8004132 <HAL_PCD_IRQHandler+0x992>
      return;
 8004130:	bf00      	nop
    }
  }
}
 8004132:	3734      	adds	r7, #52	; 0x34
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da0c      	bge.n	8004252 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 020f 	and.w	r2, r3, #15
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e00c      	b.n	800426c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	4618      	mov	r0, r3
 8004274:	f006 f940 	bl	800a4f8 <USB_EPStopXfer>
 8004278:	4603      	mov	r3, r0
 800427a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800427c:	7afb      	ldrb	r3, [r7, #11]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b08a      	sub	sp, #40	; 0x28
 800428a:	af02      	add	r7, sp, #8
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	3338      	adds	r3, #56	; 0x38
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d901      	bls.n	80042be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06c      	b.n	8004398 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d902      	bls.n	80042da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3303      	adds	r3, #3
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e2:	e02b      	b.n	800433c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d902      	bls.n	8004300 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3303      	adds	r3, #3
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004318:	b2db      	uxtb	r3, r3
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4603      	mov	r3, r0
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f006 f994 	bl	800a64c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	441a      	add	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	b29b      	uxth	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	429a      	cmp	r2, r3
 8004350:	d809      	bhi.n	8004366 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800435a:	429a      	cmp	r2, r3
 800435c:	d203      	bcs.n	8004366 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1be      	bne.n	80042e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	429a      	cmp	r2, r3
 8004370:	d811      	bhi.n	8004396 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	43db      	mvns	r3, r3
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004392:	4013      	ands	r3, r2
 8004394:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	333c      	adds	r3, #60	; 0x3c
 80043b8:	3304      	adds	r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d17b      	bne.n	80044ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d015      	beq.n	800440c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4a61      	ldr	r2, [pc, #388]	; (8004568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	f240 80b9 	bls.w	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80b3 	beq.w	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004408:	6093      	str	r3, [r2, #8]
 800440a:	e0a7      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2320      	movs	r3, #32
 8004426:	6093      	str	r3, [r2, #8]
 8004428:	e098      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 8093 	bne.w	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4a4b      	ldr	r2, [pc, #300]	; (8004568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d90f      	bls.n	800445e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	461a      	mov	r2, r3
 8004456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445a:	6093      	str	r3, [r2, #8]
 800445c:	e07e      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	0159      	lsls	r1, r3, #5
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	440b      	add	r3, r1
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d114      	bne.n	80044c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044a8:	461a      	mov	r2, r3
 80044aa:	2101      	movs	r1, #1
 80044ac:	f006 fa4a 	bl	800a944 <USB_EP0_OutStart>
 80044b0:	e006      	b.n	80044c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	441a      	add	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fe36 	bl	8004138 <HAL_PCD_DataOutStageCallback>
 80044cc:	e046      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d124      	bne.n	8004520 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	6093      	str	r3, [r2, #8]
 80044f4:	e032      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	2320      	movs	r3, #32
 8004510:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fe0d 	bl	8004138 <HAL_PCD_DataOutStageCallback>
 800451e:	e01d      	b.n	800455c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d114      	bne.n	8004550 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004548:	461a      	mov	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	f006 f9fa 	bl	800a944 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fdee 	bl	8004138 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	4f54300a 	.word	0x4f54300a
 800456c:	4f54310a 	.word	0x4f54310a

08004570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	333c      	adds	r3, #60	; 0x3c
 8004588:	3304      	adds	r3, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d90e      	bls.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fdcf 	bl	8004168 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d90c      	bls.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045e4:	461a      	mov	r2, r3
 80045e6:	2101      	movs	r1, #1
 80045e8:	f006 f9ac 	bl	800a944 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	4f54300a 	.word	0x4f54300a

080045fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	f043 0303 	orr.w	r3, r3, #3
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800466c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	d101      	bne.n	800467a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e057      	b.n	800472a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d90a      	bls.n	8004698 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4313      	orrs	r3, r2
 800468e:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004694:	60d3      	str	r3, [r2, #12]
 8004696:	e007      	b.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046a0:	4925      	ldr	r1, [pc, #148]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046a8:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a24      	ldr	r2, [pc, #144]	; (8004740 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2232      	movs	r2, #50	; 0x32
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80046c6:	e002      	b.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80046ce:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f3      	bne.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01b      	beq.n	800471e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	099b      	lsrs	r3, r3, #6
 80046f2:	2232      	movs	r2, #50	; 0x32
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	4a11      	ldr	r2, [pc, #68]	; (8004740 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	099b      	lsrs	r3, r3, #6
 8004700:	3301      	adds	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004704:	e002      	b.n	800470c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3b01      	subs	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f3      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e000      	b.n	800472a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	46020800 	.word	0x46020800
 800473c:	20025808 	.word	0x20025808
 8004740:	10624dd3 	.word	0x10624dd3

08004744 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <HAL_PWREx_GetVoltageRange+0x18>)
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	46020800 	.word	0x46020800

08004760 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <HAL_PWREx_ConfigSupply+0x94>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <HAL_PWREx_ConfigSupply+0x98>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	2232      	movs	r2, #50	; 0x32
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_PWREx_ConfigSupply+0x98>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d113      	bne.n	80047b4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 8004792:	f023 0302 	bic.w	r3, r3, #2
 8004796:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004798:	e002      	b.n	80047a0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b01      	subs	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d116      	bne.n	80047da <HAL_PWREx_ConfigSupply+0x7a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f3      	bne.n	800479a <HAL_PWREx_ConfigSupply+0x3a>
 80047b2:	e012      	b.n	80047da <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a10      	ldr	r2, [pc, #64]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80047c0:	e002      	b.n	80047c8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_PWREx_ConfigSupply+0x9c>)
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <HAL_PWREx_ConfigSupply+0x7a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f3      	bne.n	80047c2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e000      	b.n	80047e6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20025808 	.word	0x20025808
 80047f8:	10624dd3 	.word	0x10624dd3
 80047fc:	46020800 	.word	0x46020800

08004800 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_PWREx_EnableVddUSB+0x1c>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	6113      	str	r3, [r2, #16]
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	46020800 	.word	0x46020800

08004820 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <HAL_PWREx_EnableVddIO2+0x1c>)
 800482a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800482e:	6113      	str	r3, [r2, #16]
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	46020800 	.word	0x46020800

08004840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08e      	sub	sp, #56	; 0x38
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f000 bec3 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485a:	4b9c      	ldr	r3, [pc, #624]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004864:	4b99      	ldr	r3, [pc, #612]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8172 	beq.w	8004b60 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_RCC_OscConfig+0x52>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	2b0c      	cmp	r3, #12
 8004886:	f040 80e4 	bne.w	8004a52 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 80e0 	bne.w	8004a52 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004892:	4b8e      	ldr	r3, [pc, #568]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <HAL_RCC_OscConfig+0x6c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f000 be9a 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b0:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_RCC_OscConfig+0x86>
 80048bc:	4b83      	ldr	r3, [pc, #524]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048c4:	e005      	b.n	80048d2 <HAL_RCC_OscConfig+0x92>
 80048c6:	4b81      	ldr	r3, [pc, #516]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80048c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d255      	bcs.n	8004982 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10a      	bne.n	80048f2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fa0b 	bl	8005cfc <RCC_SetFlashLatencyFromMSIRange>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f000 be77 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048f2:	4b76      	ldr	r3, [pc, #472]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4a75      	ldr	r2, [pc, #468]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80048f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048fc:	6093      	str	r3, [r2, #8]
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	4970      	ldr	r1, [pc, #448]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004918:	d309      	bcc.n	800492e <HAL_RCC_OscConfig+0xee>
 800491a:	4b6c      	ldr	r3, [pc, #432]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 021f 	bic.w	r2, r3, #31
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4969      	ldr	r1, [pc, #420]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e07e      	b.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	da0a      	bge.n	800494c <HAL_RCC_OscConfig+0x10c>
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	015b      	lsls	r3, r3, #5
 8004944:	4961      	ldr	r1, [pc, #388]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	60cb      	str	r3, [r1, #12]
 800494a:	e06f      	b.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d30a      	bcc.n	800496c <HAL_RCC_OscConfig+0x12c>
 8004956:	4b5d      	ldr	r3, [pc, #372]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	029b      	lsls	r3, r3, #10
 8004964:	4959      	ldr	r1, [pc, #356]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	60cb      	str	r3, [r1, #12]
 800496a:	e05f      	b.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	03db      	lsls	r3, r3, #15
 800497a:	4954      	ldr	r1, [pc, #336]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	60cb      	str	r3, [r1, #12]
 8004980:	e054      	b.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004982:	4b52      	ldr	r3, [pc, #328]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4a51      	ldr	r2, [pc, #324]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800498c:	6093      	str	r3, [r2, #8]
 800498e:	4b4f      	ldr	r3, [pc, #316]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	494c      	ldr	r1, [pc, #304]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80049a8:	d309      	bcc.n	80049be <HAL_RCC_OscConfig+0x17e>
 80049aa:	4b48      	ldr	r3, [pc, #288]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f023 021f 	bic.w	r2, r3, #31
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	4945      	ldr	r1, [pc, #276]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60cb      	str	r3, [r1, #12]
 80049bc:	e028      	b.n	8004a10 <HAL_RCC_OscConfig+0x1d0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da0a      	bge.n	80049dc <HAL_RCC_OscConfig+0x19c>
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	015b      	lsls	r3, r3, #5
 80049d4:	493d      	ldr	r1, [pc, #244]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]
 80049da:	e019      	b.n	8004a10 <HAL_RCC_OscConfig+0x1d0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d30a      	bcc.n	80049fc <HAL_RCC_OscConfig+0x1bc>
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	4935      	ldr	r1, [pc, #212]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60cb      	str	r3, [r1, #12]
 80049fa:	e009      	b.n	8004a10 <HAL_RCC_OscConfig+0x1d0>
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	03db      	lsls	r3, r3, #15
 8004a0a:	4930      	ldr	r1, [pc, #192]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 f96e 	bl	8005cfc <RCC_SetFlashLatencyFromMSIRange>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f000 bdda 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004a2c:	f001 f8d8 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <HAL_RCC_OscConfig+0x290>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd f9dd 	bl	8001df4 <HAL_InitTick>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 808a 	beq.w	8004b5e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a4e:	f000 bdc7 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d066      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a66:	f7fd fbdf 	bl	8002228 <HAL_GetTick>
 8004a6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a6c:	e009      	b.n	8004a82 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a6e:	f7fd fbdb 	bl	8002228 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	f000 bdaf 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a82:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ef      	beq.n	8004a6e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	4909      	ldr	r1, [pc, #36]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ab4:	d30e      	bcc.n	8004ad4 <HAL_RCC_OscConfig+0x294>
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 021f 	bic.w	r2, r3, #31
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4902      	ldr	r1, [pc, #8]	; (8004acc <HAL_RCC_OscConfig+0x28c>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60cb      	str	r3, [r1, #12]
 8004ac8:	e04a      	b.n	8004b60 <HAL_RCC_OscConfig+0x320>
 8004aca:	bf00      	nop
 8004acc:	46020c00 	.word	0x46020c00
 8004ad0:	2002580c 	.word	0x2002580c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da0a      	bge.n	8004af2 <HAL_RCC_OscConfig+0x2b2>
 8004adc:	4b9b      	ldr	r3, [pc, #620]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	015b      	lsls	r3, r3, #5
 8004aea:	4998      	ldr	r1, [pc, #608]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60cb      	str	r3, [r1, #12]
 8004af0:	e036      	b.n	8004b60 <HAL_RCC_OscConfig+0x320>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d30a      	bcc.n	8004b12 <HAL_RCC_OscConfig+0x2d2>
 8004afc:	4b93      	ldr	r3, [pc, #588]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	4990      	ldr	r1, [pc, #576]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60cb      	str	r3, [r1, #12]
 8004b10:	e026      	b.n	8004b60 <HAL_RCC_OscConfig+0x320>
 8004b12:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	03db      	lsls	r3, r3, #15
 8004b20:	498a      	ldr	r1, [pc, #552]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]
 8004b26:	e01b      	b.n	8004b60 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004b28:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a87      	ldr	r2, [pc, #540]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b34:	f7fd fb78 	bl	8002228 <HAL_GetTick>
 8004b38:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b3a:	e009      	b.n	8004b50 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b3c:	f7fd fb74 	bl	8002228 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d902      	bls.n	8004b50 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	f000 bd48 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004b50:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1ef      	bne.n	8004b3c <HAL_RCC_OscConfig+0x2fc>
 8004b5c:	e000      	b.n	8004b60 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8094 	beq.w	8004c96 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x340>
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d110      	bne.n	8004b9c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	4b72      	ldr	r3, [pc, #456]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8083 	beq.w	8004c94 <HAL_RCC_OscConfig+0x454>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d17e      	bne.n	8004c94 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f000 bd22 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x374>
 8004ba6:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a68      	ldr	r2, [pc, #416]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e041      	b.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bbc:	d112      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3a4>
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a62      	ldr	r2, [pc, #392]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b60      	ldr	r3, [pc, #384]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a5f      	ldr	r2, [pc, #380]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b5d      	ldr	r3, [pc, #372]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5c      	ldr	r2, [pc, #368]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e029      	b.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004bec:	d112      	bne.n	8004c14 <HAL_RCC_OscConfig+0x3d4>
 8004bee:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a56      	ldr	r2, [pc, #344]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a53      	ldr	r2, [pc, #332]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a50      	ldr	r2, [pc, #320]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e011      	b.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
 8004c14:	4b4d      	ldr	r3, [pc, #308]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a4c      	ldr	r2, [pc, #304]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a49      	ldr	r2, [pc, #292]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a46      	ldr	r2, [pc, #280]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004c40:	f7fd faf2 	bl	8002228 <HAL_GetTick>
 8004c44:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c46:	e009      	b.n	8004c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd faee 	bl	8002228 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d902      	bls.n	8004c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	f000 bcc2 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5c:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ef      	beq.n	8004c48 <HAL_RCC_OscConfig+0x408>
 8004c68:	e015      	b.n	8004c96 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fadd 	bl	8002228 <HAL_GetTick>
 8004c6e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c70:	e009      	b.n	8004c86 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c72:	f7fd fad9 	bl	8002228 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d902      	bls.n	8004c86 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	f000 bcad 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1ef      	bne.n	8004c72 <HAL_RCC_OscConfig+0x432>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d066      	beq.n	8004d70 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x474>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d11a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d117      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <HAL_RCC_OscConfig+0x48e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f000 bc89 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004cce:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	491b      	ldr	r1, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce2:	e045      	b.n	8004d70 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d024      	beq.n	8004d36 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004cf8:	f7fd fa96 	bl	8002228 <HAL_GetTick>
 8004cfc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfe:	e009      	b.n	8004d14 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fd fa92 	bl	8002228 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d902      	bls.n	8004d14 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	f000 bc66 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ef      	beq.n	8004d00 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	4907      	ldr	r1, [pc, #28]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <HAL_RCC_OscConfig+0x50c>)
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d42:	f7fd fa71 	bl	8002228 <HAL_GetTick>
 8004d46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	e00c      	b.n	8004d64 <HAL_RCC_OscConfig+0x524>
 8004d4a:	bf00      	nop
 8004d4c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fd fa6a 	bl	8002228 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d902      	bls.n	8004d64 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	f000 bc3e 	b.w	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d64:	4baf      	ldr	r3, [pc, #700]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ef      	bne.n	8004d50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80c7 	beq.w	8004f0c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d84:	4ba7      	ldr	r3, [pc, #668]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d111      	bne.n	8004db6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	4ba4      	ldr	r3, [pc, #656]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d98:	4aa2      	ldr	r2, [pc, #648]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004da2:	4ba0      	ldr	r3, [pc, #640]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004db6:	4b9c      	ldr	r3, [pc, #624]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d118      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004dc2:	4b99      	ldr	r3, [pc, #612]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	4a98      	ldr	r2, [pc, #608]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dce:	f7fd fa2b 	bl	8002228 <HAL_GetTick>
 8004dd2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd6:	f7fd fa27 	bl	8002228 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e3fb      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004de8:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05f      	beq.n	8004ebc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004dfc:	4b89      	ldr	r3, [pc, #548]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e02:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d037      	beq.n	8004e82 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d006      	beq.n	8004e2a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e3da      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004e34:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e3a:	4a7a      	ldr	r2, [pc, #488]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e3c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004e40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004e44:	f7fd f9f0 	bl	8002228 <HAL_GetTick>
 8004e48:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4c:	f7fd f9ec 	bl	8002228 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e3c0      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e5e:	4b71      	ldr	r3, [pc, #452]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ef      	bne.n	8004e4c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004e6c:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004e82:	4b68      	ldr	r3, [pc, #416]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e88:	4a66      	ldr	r2, [pc, #408]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004e92:	f7fd f9c9 	bl	8002228 <HAL_GetTick>
 8004e96:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fd f9c5 	bl	8002228 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e399      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004eac:	4b5d      	ldr	r3, [pc, #372]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ef      	beq.n	8004e9a <HAL_RCC_OscConfig+0x65a>
 8004eba:	e01b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004ebc:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec2:	4a58      	ldr	r2, [pc, #352]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004ec4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004ecc:	f7fd f9ac 	bl	8002228 <HAL_GetTick>
 8004ed0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed4:	f7fd f9a8 	bl	8002228 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e37c      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ee6:	4b4f      	ldr	r3, [pc, #316]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ef      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ef4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efc:	4b49      	ldr	r3, [pc, #292]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f02:	4a48      	ldr	r2, [pc, #288]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004f04:	f023 0304 	bic.w	r3, r3, #4
 8004f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8112 	beq.w	800513e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b40      	ldr	r3, [pc, #256]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d111      	bne.n	8004f52 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f34:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f52:	4b35      	ldr	r3, [pc, #212]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f5e:	4b32      	ldr	r3, [pc, #200]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	4a31      	ldr	r2, [pc, #196]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd f95d 	bl	8002228 <HAL_GetTick>
 8004f6e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fd f959 	bl	8002228 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e32d      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f84:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_RCC_OscConfig+0x7e8>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01f      	beq.n	8004fdc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fbe:	4a19      	ldr	r2, [pc, #100]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fc8:	e018      	b.n	8004ffc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fca:	4b16      	ldr	r3, [pc, #88]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fda:	e00f      	b.n	8004ffc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <HAL_RCC_OscConfig+0x7e4>)
 8004ff4:	f023 0304 	bic.w	r3, r3, #4
 8004ff8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d058      	beq.n	80050b6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8005004:	f7fd f910 	bl	8002228 <HAL_GetTick>
 8005008:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500a:	e00f      	b.n	800502c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fd f90c 	bl	8002228 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d906      	bls.n	800502c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e2de      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
 8005022:	bf00      	nop
 8005024:	46020c00 	.word	0x46020c00
 8005028:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502c:	4b9c      	ldr	r3, [pc, #624]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0e8      	beq.n	800500c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005046:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800504c:	4a94      	ldr	r2, [pc, #592]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800504e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005052:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005056:	e00a      	b.n	800506e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fd f8e6 	bl	8002228 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	f241 3288 	movw	r2, #5000	; 0x1388
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e2b8      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800506e:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ed      	beq.n	8005058 <HAL_RCC_OscConfig+0x818>
 800507c:	e053      	b.n	8005126 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800507e:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005084:	4a86      	ldr	r2, [pc, #536]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fd f8ca 	bl	8002228 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e29c      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050a6:	4b7e      	ldr	r3, [pc, #504]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80050a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ed      	bne.n	8005090 <HAL_RCC_OscConfig+0x850>
 80050b4:	e037      	b.n	8005126 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80050b6:	f7fd f8b7 	bl	8002228 <HAL_GetTick>
 80050ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fd f8b3 	bl	8002228 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e285      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b72      	ldr	r3, [pc, #456]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80050d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80050e2:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80050e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80050f0:	4b6b      	ldr	r3, [pc, #428]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80050f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050f6:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80050f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd f891 	bl	8002228 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e263      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005118:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800511e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ed      	bne.n	8005102 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005126:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005134:	4a5a      	ldr	r2, [pc, #360]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005136:	f023 0304 	bic.w	r3, r3, #4
 800513a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d036      	beq.n	80051b8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800515c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800515e:	f7fd f863 	bl	8002228 <HAL_GetTick>
 8005162:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005166:	f7fd f85f 	bl	8002228 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e233      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005178:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x926>
 8005184:	e018      	b.n	80051b8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005186:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a45      	ldr	r2, [pc, #276]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800518c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005190:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005192:	f7fd f849 	bl	8002228 <HAL_GetTick>
 8005196:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800519a:	f7fd f845 	bl	8002228 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e219      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80051ac:	4b3c      	ldr	r3, [pc, #240]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d036      	beq.n	8005232 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80051cc:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a33      	ldr	r2, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80051d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051d8:	f7fd f826 	bl	8002228 <HAL_GetTick>
 80051dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80051e0:	f7fd f822 	bl	8002228 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e1f6      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80051f2:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x9a0>
 80051fe:	e018      	b.n	8005232 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005200:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800520c:	f7fd f80c 	bl	8002228 <HAL_GetTick>
 8005210:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005214:	f7fd f808 	bl	8002228 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1dc      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d07f      	beq.n	800533e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d062      	beq.n	800530c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800524c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	4910      	ldr	r1, [pc, #64]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800526c:	d309      	bcc.n	8005282 <HAL_RCC_OscConfig+0xa42>
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 021f 	bic.w	r2, r3, #31
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4909      	ldr	r1, [pc, #36]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800527c:	4313      	orrs	r3, r2
 800527e:	60cb      	str	r3, [r1, #12]
 8005280:	e02a      	b.n	80052d8 <HAL_RCC_OscConfig+0xa98>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	da0c      	bge.n	80052a4 <HAL_RCC_OscConfig+0xa64>
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	4901      	ldr	r1, [pc, #4]	; (80052a0 <HAL_RCC_OscConfig+0xa60>)
 800529a:	4313      	orrs	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
 800529e:	e01b      	b.n	80052d8 <HAL_RCC_OscConfig+0xa98>
 80052a0:	46020c00 	.word	0x46020c00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d30a      	bcc.n	80052c4 <HAL_RCC_OscConfig+0xa84>
 80052ae:	4ba5      	ldr	r3, [pc, #660]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	49a1      	ldr	r1, [pc, #644]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]
 80052c2:	e009      	b.n	80052d8 <HAL_RCC_OscConfig+0xa98>
 80052c4:	4b9f      	ldr	r3, [pc, #636]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	03db      	lsls	r3, r3, #15
 80052d2:	499c      	ldr	r1, [pc, #624]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80052d8:	4b9a      	ldr	r3, [pc, #616]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a99      	ldr	r2, [pc, #612]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80052de:	f043 0310 	orr.w	r3, r3, #16
 80052e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052e4:	f7fc ffa0 	bl	8002228 <HAL_GetTick>
 80052e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80052ec:	f7fc ff9c 	bl	8002228 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e170      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80052fe:	4b91      	ldr	r3, [pc, #580]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0xaac>
 800530a:	e018      	b.n	800533e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800530c:	4b8d      	ldr	r3, [pc, #564]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a8c      	ldr	r2, [pc, #560]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005318:	f7fc ff86 	bl	8002228 <HAL_GetTick>
 800531c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005320:	f7fc ff82 	bl	8002228 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e156      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005332:	4b84      	ldr	r3, [pc, #528]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 814b 	beq.w	80055de <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005348:	2300      	movs	r3, #0
 800534a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534e:	4b7d      	ldr	r3, [pc, #500]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b0c      	cmp	r3, #12
 8005358:	f000 80fa 	beq.w	8005550 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2b02      	cmp	r3, #2
 8005362:	f040 80cc 	bne.w	80054fe <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005366:	4b77      	ldr	r3, [pc, #476]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a76      	ldr	r2, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800536c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005370:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005372:	f7fc ff59 	bl	8002228 <HAL_GetTick>
 8005376:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fc ff55 	bl	8002228 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e129      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800538c:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d111      	bne.n	80053ca <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4b67      	ldr	r3, [pc, #412]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80053a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ac:	4a65      	ldr	r2, [pc, #404]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053b6:	4b63      	ldr	r3, [pc, #396]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80053b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80053ca:	4b5f      	ldr	r3, [pc, #380]	; (8005548 <HAL_RCC_OscConfig+0xd08>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d6:	d102      	bne.n	80053de <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80053de:	4b5a      	ldr	r3, [pc, #360]	; (8005548 <HAL_RCC_OscConfig+0xd08>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a59      	ldr	r2, [pc, #356]	; (8005548 <HAL_RCC_OscConfig+0xd08>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053fe:	3a01      	subs	r2, #1
 8005400:	0212      	lsls	r2, r2, #8
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005408:	430a      	orrs	r2, r1
 800540a:	494e      	ldr	r1, [pc, #312]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800540c:	4313      	orrs	r3, r2
 800540e:	628b      	str	r3, [r1, #40]	; 0x28
 8005410:	4b4c      	ldr	r3, [pc, #304]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005414:	4b4d      	ldr	r3, [pc, #308]	; (800554c <HAL_RCC_OscConfig+0xd0c>)
 8005416:	4013      	ands	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800541c:	3a01      	subs	r2, #1
 800541e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005426:	3a01      	subs	r2, #1
 8005428:	0252      	lsls	r2, r2, #9
 800542a:	b292      	uxth	r2, r2
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005432:	3a01      	subs	r2, #1
 8005434:	0412      	lsls	r2, r2, #16
 8005436:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005440:	3a01      	subs	r2, #1
 8005442:	0612      	lsls	r2, r2, #24
 8005444:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005448:	430a      	orrs	r2, r1
 800544a:	493e      	ldr	r1, [pc, #248]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800544c:	4313      	orrs	r3, r2
 800544e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	4a3b      	ldr	r2, [pc, #236]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005456:	f023 0310 	bic.w	r3, r3, #16
 800545a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800545c:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005464:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800546c:	00d2      	lsls	r2, r2, #3
 800546e:	4935      	ldr	r1, [pc, #212]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005470:	4313      	orrs	r3, r2
 8005472:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005474:	4b33      	ldr	r3, [pc, #204]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	4a32      	ldr	r2, [pc, #200]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800547a:	f043 0310 	orr.w	r3, r3, #16
 800547e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005480:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f023 020c 	bic.w	r2, r3, #12
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	492d      	ldr	r1, [pc, #180]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 800548e:	4313      	orrs	r3, r2
 8005490:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005496:	2b01      	cmp	r3, #1
 8005498:	d105      	bne.n	80054a6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800549a:	4b2b      	ldr	r3, [pc, #172]	; (8005548 <HAL_RCC_OscConfig+0xd08>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <HAL_RCC_OscConfig+0xd08>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80054a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80054ae:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054b6:	f023 0304 	bic.w	r3, r3, #4
 80054ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	4a20      	ldr	r2, [pc, #128]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054d6:	f7fc fea7 	bl	8002228 <HAL_GetTick>
 80054da:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054de:	f7fc fea3 	bl	8002228 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e077      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0xc9e>
 80054fc:	e06f      	b.n	80055de <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005508:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800550a:	f7fc fe8d 	bl	8002228 <HAL_GetTick>
 800550e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc fe89 	bl	8002228 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e05d      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_OscConfig+0xd04>)
 8005536:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	6293      	str	r3, [r2, #40]	; 0x28
 8005540:	e04d      	b.n	80055de <HAL_RCC_OscConfig+0xd9e>
 8005542:	bf00      	nop
 8005544:	46020c00 	.word	0x46020c00
 8005548:	46020800 	.word	0x46020800
 800554c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_OscConfig+0xda8>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_OscConfig+0xda8>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	2b01      	cmp	r3, #1
 8005562:	d03a      	beq.n	80055da <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0203 	and.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d133      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d12a      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	0b1b      	lsrs	r3, r3, #12
 8005588:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d122      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d11a      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	0a5b      	lsrs	r3, r3, #9
 80055a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d111      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d108      	bne.n	80055da <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	0e1b      	lsrs	r3, r3, #24
 80055cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3738      	adds	r7, #56	; 0x38
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	46020c00 	.word	0x46020c00

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e1d9      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b9b      	ldr	r3, [pc, #620]	; (8005870 <HAL_RCC_ClockConfig+0x284>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d910      	bls.n	8005630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b98      	ldr	r3, [pc, #608]	; (8005870 <HAL_RCC_ClockConfig+0x284>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 020f 	bic.w	r2, r3, #15
 8005616:	4996      	ldr	r1, [pc, #600]	; (8005870 <HAL_RCC_ClockConfig+0x284>)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b94      	ldr	r3, [pc, #592]	; (8005870 <HAL_RCC_ClockConfig+0x284>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e1c1      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	4b8c      	ldr	r3, [pc, #560]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800564c:	4b89      	ldr	r3, [pc, #548]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	4986      	ldr	r1, [pc, #536]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 800565a:	4313      	orrs	r3, r2
 800565c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d012      	beq.n	8005690 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	4b81      	ldr	r3, [pc, #516]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005678:	429a      	cmp	r2, r3
 800567a:	d909      	bls.n	8005690 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800567c:	4b7d      	ldr	r3, [pc, #500]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	497a      	ldr	r1, [pc, #488]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 800568c:	4313      	orrs	r3, r2
 800568e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	4b74      	ldr	r3, [pc, #464]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d908      	bls.n	80056be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b71      	ldr	r3, [pc, #452]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	496e      	ldr	r1, [pc, #440]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d010      	beq.n	80056ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	4b69      	ldr	r3, [pc, #420]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d908      	bls.n	80056ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80056da:	4b66      	ldr	r3, [pc, #408]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 020f 	bic.w	r2, r3, #15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4963      	ldr	r1, [pc, #396]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80d2 	beq.w	800589e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d143      	bne.n	800578e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005706:	4b5b      	ldr	r3, [pc, #364]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005714:	4b57      	ldr	r3, [pc, #348]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571a:	4a56      	ldr	r2, [pc, #344]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005736:	f7fc fd77 	bl	8002228 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800573c:	4b4e      	ldr	r3, [pc, #312]	; (8005878 <HAL_RCC_ClockConfig+0x28c>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00f      	beq.n	8005768 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800574a:	f7fc fd6d 	bl	8002228 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e12b      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800575c:	4b46      	ldr	r3, [pc, #280]	; (8005878 <HAL_RCC_ClockConfig+0x28c>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0f0      	beq.n	800574a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800576e:	4b41      	ldr	r3, [pc, #260]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005774:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800577e:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d121      	bne.n	80057ce <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e112      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d107      	bne.n	80057a6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005796:	4b37      	ldr	r3, [pc, #220]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d115      	bne.n	80057ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e106      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e0fa      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057be:	4b2d      	ldr	r3, [pc, #180]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0f2      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f023 0203 	bic.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4926      	ldr	r1, [pc, #152]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80057e0:	f7fc fd22 	bl	8002228 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d112      	bne.n	8005814 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f0:	f7fc fd1a 	bl	8002228 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e0d6      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d1ee      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x204>
 8005812:	e044      	b.n	800589e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d112      	bne.n	8005842 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800581c:	e00a      	b.n	8005834 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581e:	f7fc fd03 	bl	8002228 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0bf      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d1ee      	bne.n	800581e <HAL_RCC_ClockConfig+0x232>
 8005840:	e02d      	b.n	800589e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d123      	bne.n	8005892 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fc fcec 	bl	8002228 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0a8      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005862:	4b04      	ldr	r3, [pc, #16]	; (8005874 <HAL_RCC_ClockConfig+0x288>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_ClockConfig+0x260>
 800586e:	e016      	b.n	800589e <HAL_RCC_ClockConfig+0x2b2>
 8005870:	40022000 	.word	0x40022000
 8005874:	46020c00 	.word	0x46020c00
 8005878:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587c:	f7fc fcd4 	bl	8002228 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e090      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b04      	cmp	r3, #4
 800589c:	d1ee      	bne.n	800587c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d208      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80058ba:	4b40      	ldr	r3, [pc, #256]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 020f 	bic.w	r2, r3, #15
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	493d      	ldr	r1, [pc, #244]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b3c      	ldr	r3, [pc, #240]	; (80059c0 <HAL_RCC_ClockConfig+0x3d4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d210      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <HAL_RCC_ClockConfig+0x3d4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 020f 	bic.w	r2, r3, #15
 80058e2:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_RCC_ClockConfig+0x3d4>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <HAL_RCC_ClockConfig+0x3d4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e05b      	b.n	80059b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d010      	beq.n	800592a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005914:	429a      	cmp	r2, r3
 8005916:	d208      	bcs.n	800592a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4925      	ldr	r1, [pc, #148]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d012      	beq.n	800595c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005944:	429a      	cmp	r2, r3
 8005946:	d209      	bcs.n	800595c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	4919      	ldr	r1, [pc, #100]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 8005958:	4313      	orrs	r3, r2
 800595a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d010      	beq.n	800598a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005974:	429a      	cmp	r2, r3
 8005976:	d208      	bcs.n	800598a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005978:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	490d      	ldr	r1, [pc, #52]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800598a:	f000 f821 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCC_ClockConfig+0x3d0>)
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	490a      	ldr	r1, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x3d8>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x3dc>)
 80059a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_ClockConfig+0x3e0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fa23 	bl	8001df4 <HAL_InitTick>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	46020c00 	.word	0x46020c00
 80059c0:	40022000 	.word	0x40022000
 80059c4:	080282bc 	.word	0x080282bc
 80059c8:	20025808 	.word	0x20025808
 80059cc:	2002580c 	.word	0x2002580c

080059d0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b08b      	sub	sp, #44	; 0x2c
 80059d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059de:	4b7b      	ldr	r3, [pc, #492]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e8:	4b78      	ldr	r3, [pc, #480]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_GetSysClockFreq+0x34>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d121      	bne.n	8005a42 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d11e      	bne.n	8005a42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005a04:	4b71      	ldr	r3, [pc, #452]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005a10:	4b6e      	ldr	r3, [pc, #440]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a16:	0b1b      	lsrs	r3, r3, #12
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e005      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005a20:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0f1b      	lsrs	r3, r3, #28
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a2c:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d110      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a40:	e00d      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a42:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a4e:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	e004      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a5a:	4b5e      	ldr	r3, [pc, #376]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	f040 80ac 	bne.w	8005bbe <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a66:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005a70:	4b56      	ldr	r3, [pc, #344]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a8a:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	08db      	lsrs	r3, r3, #3
 8005a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8086 	beq.w	8005bba <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d003      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d022      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x130>
 8005aba:	e043      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x208>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ade:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ae2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005bdc <HAL_RCC_GetSysClockFreq+0x20c>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005afe:	e046      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005bd8 <HAL_RCC_GetSysClockFreq+0x208>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b22:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b26:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005bdc <HAL_RCC_GetSysClockFreq+0x20c>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005b42:	e024      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b6c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b70:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005bdc <HAL_RCC_GetSysClockFreq+0x20c>
 8005b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b88:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005b8c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	0e1b      	lsrs	r3, r3, #24
 8005b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b98:	3301      	adds	r3, #1
 8005b9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb2:	ee17 3a90 	vmov	r3, s15
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e001      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	372c      	adds	r7, #44	; 0x2c
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	46020c00 	.word	0x46020c00
 8005bd0:	080282d4 	.word	0x080282d4
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	4b742400 	.word	0x4b742400
 8005bdc:	46000000 	.word	0x46000000

08005be0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005be4:	f7ff fef4 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_RCC_GetHCLKFreq+0x28>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	4906      	ldr	r1, [pc, #24]	; (8005c0c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005bf4:	5ccb      	ldrb	r3, [r1, r3]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x30>)
 8005bfc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <HAL_RCC_GetHCLKFreq+0x30>)
 8005c00:	681b      	ldr	r3, [r3, #0]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	46020c00 	.word	0x46020c00
 8005c0c:	080282bc 	.word	0x080282bc
 8005c10:	20025808 	.word	0x20025808

08005c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005c18:	f7ff ffe2 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	46020c00 	.word	0x46020c00
 8005c38:	080282cc 	.word	0x080282cc

08005c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005c40:	f7ff ffce 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	; (8005c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	46020c00 	.word	0x46020c00
 8005c60:	080282cc 	.word	0x080282cc

08005c64 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005c68:	f7ff ffba 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	46020c00 	.word	0x46020c00
 8005c88:	080282cc 	.word	0x080282cc

08005c8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	221f      	movs	r2, #31
 8005c9a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_RCC_GetClockConfig+0x68>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 0203 	and.w	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_RCC_GetClockConfig+0x68>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <HAL_RCC_GetClockConfig+0x68>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <HAL_RCC_GetClockConfig+0x68>)
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_GetClockConfig+0x68>)
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <HAL_RCC_GetClockConfig+0x6c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	46020c00 	.word	0x46020c00
 8005cf8:	40022000 	.word	0x40022000

08005cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d04:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d12:	f7fe fd17 	bl	8004744 <HAL_PWREx_GetVoltageRange>
 8005d16:	6178      	str	r0, [r7, #20]
 8005d18:	e019      	b.n	8005d4e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	4b39      	ldr	r3, [pc, #228]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	4a37      	ldr	r2, [pc, #220]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d38:	f7fe fd04 	bl	8004744 <HAL_PWREx_GetVoltageRange>
 8005d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d44:	4a2e      	ldr	r2, [pc, #184]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005d46:	f023 0304 	bic.w	r3, r3, #4
 8005d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d54:	d003      	beq.n	8005d5e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5c:	d109      	bne.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d64:	d202      	bcs.n	8005d6c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005d66:	2301      	movs	r3, #1
 8005d68:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005d6a:	e033      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005d70:	e030      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d78:	d208      	bcs.n	8005d8c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d102      	bne.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005d82:	2303      	movs	r3, #3
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	e025      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e035      	b.n	8005df8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d92:	d90f      	bls.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da0:	d902      	bls.n	8005da8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e015      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005da8:	2301      	movs	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	e012      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e00f      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dba:	d109      	bne.n	8005dd0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc2:	d102      	bne.n	8005dca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e004      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005dca:	2302      	movs	r3, #2
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	e001      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 020f 	bic.w	r2, r3, #15
 8005ddc:	4909      	ldr	r1, [pc, #36]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	46020c00 	.word	0x46020c00
 8005e04:	40022000 	.word	0x40022000

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e0c:	b0ba      	sub	sp, #232	; 0xe8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 0401 	and.w	r4, r2, #1
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e32:	d00b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005e34:	4bcb      	ldr	r3, [pc, #812]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e3a:	f023 0103 	bic.w	r1, r3, #3
 8005e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	4ac7      	ldr	r2, [pc, #796]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f002 0802 	and.w	r8, r2, #2
 8005e58:	f04f 0900 	mov.w	r9, #0
 8005e5c:	ea58 0309 	orrs.w	r3, r8, r9
 8005e60:	d00b      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005e62:	4bc0      	ldr	r3, [pc, #768]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e68:	f023 010c 	bic.w	r1, r3, #12
 8005e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	4abc      	ldr	r2, [pc, #752]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f002 0a04 	and.w	sl, r2, #4
 8005e86:	f04f 0b00 	mov.w	fp, #0
 8005e8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005e90:	4bb4      	ldr	r3, [pc, #720]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e96:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea0:	4ab0      	ldr	r2, [pc, #704]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f002 0308 	and.w	r3, r2, #8
 8005eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ebe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005ec8:	4ba6      	ldr	r3, [pc, #664]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	4aa2      	ldr	r2, [pc, #648]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f002 0310 	and.w	r3, r2, #16
 8005eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ef6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005f00:	4b98      	ldr	r3, [pc, #608]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	4a94      	ldr	r2, [pc, #592]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	430b      	orrs	r3, r1
 8005f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 0320 	and.w	r3, r2, #32
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005f38:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f3e:	f023 0107 	bic.w	r1, r3, #7
 8005f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f48:	4a86      	ldr	r2, [pc, #536]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f70:	4b7c      	ldr	r3, [pc, #496]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f76:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f80:	4a78      	ldr	r2, [pc, #480]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f82:	430b      	orrs	r3, r1
 8005f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005fa8:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb8:	4a6a      	ldr	r2, [pc, #424]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fd6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005fe0:	4b60      	ldr	r3, [pc, #384]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800600e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d00b      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006018:	4b52      	ldr	r3, [pc, #328]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800601a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800601e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006028:	4a4e      	ldr	r2, [pc, #312]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800602a:	430b      	orrs	r3, r1
 800602c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800603c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006046:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d00b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006050:	4b44      	ldr	r3, [pc, #272]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006056:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800605a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006060:	4a40      	ldr	r2, [pc, #256]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006062:	430b      	orrs	r3, r1
 8006064:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800607e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d00b      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800608e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006098:	4a32      	ldr	r2, [pc, #200]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800609a:	430b      	orrs	r3, r1
 800609c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80060a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80060ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d00c      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060d2:	4a24      	ldr	r2, [pc, #144]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80060e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e8:	2300      	movs	r3, #0
 80060ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d04f      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d02d      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d827      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006106:	2b60      	cmp	r3, #96	; 0x60
 8006108:	d02e      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800610a:	2b60      	cmp	r3, #96	; 0x60
 800610c:	d823      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d006      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d81f      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800611a:	2b20      	cmp	r3, #32
 800611c:	d011      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800611e:	e01a      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	4a0f      	ldr	r2, [pc, #60]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800612c:	e01d      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800612e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006132:	3308      	adds	r3, #8
 8006134:	4618      	mov	r0, r3
 8006136:	f002 f981 	bl	800843c <RCCEx_PLL2_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006140:	e013      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006146:	332c      	adds	r3, #44	; 0x2c
 8006148:	4618      	mov	r0, r3
 800614a:	f002 fa0f 	bl	800856c <RCCEx_PLL3_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006154:	e009      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800615c:	e005      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800615e:	bf00      	nop
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006162:	bf00      	nop
 8006164:	46020c00 	.word	0x46020c00
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10d      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006172:	4bb6      	ldr	r3, [pc, #728]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006174:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006178:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800617c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	4ab1      	ldr	r2, [pc, #708]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006186:	430b      	orrs	r3, r1
 8006188:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006192:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80061a2:	673b      	str	r3, [r7, #112]	; 0x70
 80061a4:	2300      	movs	r3, #0
 80061a6:	677b      	str	r3, [r7, #116]	; 0x74
 80061a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80061ac:	460b      	mov	r3, r1
 80061ae:	4313      	orrs	r3, r2
 80061b0:	d053      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80061b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061be:	d033      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80061c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c4:	d82c      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80061c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ca:	d02f      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80061cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d0:	d826      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80061d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d6:	d008      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d820      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e6:	d011      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80061e8:	e01a      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061ea:	4b98      	ldr	r3, [pc, #608]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	4a97      	ldr	r2, [pc, #604]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80061f6:	e01a      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fc:	3308      	adds	r3, #8
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 f91c 	bl	800843c <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800620a:	e010      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800620c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006210:	332c      	adds	r3, #44	; 0x2c
 8006212:	4618      	mov	r0, r3
 8006214:	f002 f9aa 	bl	800856c <RCCEx_PLL3_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800621e:	e006      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006226:	e002      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800622c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10d      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006236:	4b85      	ldr	r3, [pc, #532]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006238:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800623c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006248:	4a80      	ldr	r2, [pc, #512]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800624a:	430b      	orrs	r3, r1
 800624c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006250:	e003      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006252:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006256:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800625a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006266:	66bb      	str	r3, [r7, #104]	; 0x68
 8006268:	2300      	movs	r3, #0
 800626a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800626c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d046      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800627e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006282:	d028      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006284:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006288:	d821      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800628a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628e:	d022      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	d81b      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629a:	d01c      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800629c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a0:	d815      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	d008      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d80f      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d011      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d00e      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80062b8:	e009      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062be:	3308      	adds	r3, #8
 80062c0:	4618      	mov	r0, r3
 80062c2:	f002 f8bb 	bl	800843c <RCCEx_PLL2_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062cc:	e004      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062d4:	e000      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80062d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80062e0:	4b5a      	ldr	r3, [pc, #360]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062e6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80062ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f2:	4a56      	ldr	r2, [pc, #344]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006300:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
 8006312:	2300      	movs	r3, #0
 8006314:	667b      	str	r3, [r7, #100]	; 0x64
 8006316:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800631a:	460b      	mov	r3, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	d03f      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	2b04      	cmp	r3, #4
 800632a:	d81e      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006373 	.word	0x08006373
 8006338:	08006349 	.word	0x08006349
 800633c:	08006357 	.word	0x08006357
 8006340:	08006373 	.word	0x08006373
 8006344:	08006373 	.word	0x08006373
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006348:	4b40      	ldr	r3, [pc, #256]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634c:	4a3f      	ldr	r2, [pc, #252]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800634e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006352:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006354:	e00e      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800635a:	332c      	adds	r3, #44	; 0x2c
 800635c:	4618      	mov	r0, r3
 800635e:	f002 f905 	bl	800856c <RCCEx_PLL3_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006368:	e004      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006370:	e000      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006372:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006374:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800637e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006382:	f023 0107 	bic.w	r1, r3, #7
 8006386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	4a2f      	ldr	r2, [pc, #188]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006390:	430b      	orrs	r3, r1
 8006392:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800639c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80063a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ae:	2300      	movs	r3, #0
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80063b6:	460b      	mov	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	d04d      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80063bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c8:	d028      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80063ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063ce:	d821      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80063d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063d4:	d024      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80063d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063da:	d81b      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80063dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e0:	d00e      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80063e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e6:	d815      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01b      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d110      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063f2:	4b16      	ldr	r3, [pc, #88]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	4a15      	ldr	r2, [pc, #84]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80063fe:	e012      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006404:	332c      	adds	r3, #44	; 0x2c
 8006406:	4618      	mov	r0, r3
 8006408:	f002 f8b0 	bl	800856c <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006412:	e008      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800641a:	e004      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006424:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006426:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d110      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006434:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006440:	4a02      	ldr	r2, [pc, #8]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006442:	430b      	orrs	r3, r1
 8006444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800644a:	bf00      	nop
 800644c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006454:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006464:	653b      	str	r3, [r7, #80]	; 0x50
 8006466:	2300      	movs	r3, #0
 8006468:	657b      	str	r3, [r7, #84]	; 0x54
 800646a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	f000 80b5 	beq.w	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006476:	2300      	movs	r3, #0
 8006478:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800647c:	4b9d      	ldr	r3, [pc, #628]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d113      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800648a:	4b9a      	ldr	r3, [pc, #616]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006490:	4a98      	ldr	r2, [pc, #608]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006492:	f043 0304 	orr.w	r3, r3, #4
 8006496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800649a:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800649c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064b2:	4b91      	ldr	r3, [pc, #580]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	4a90      	ldr	r2, [pc, #576]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064be:	f7fb feb3 	bl	8002228 <HAL_GetTick>
 80064c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064c6:	e00b      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fb feae 	bl	8002228 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d903      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064de:	e005      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064e0:	4b85      	ldr	r3, [pc, #532]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ed      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80064ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d165      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064f4:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d023      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800650a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	4293      	cmp	r3, r2
 8006518:	d01b      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800651a:	4b76      	ldr	r3, [pc, #472]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800651c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006524:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006528:	4b72      	ldr	r3, [pc, #456]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800652a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800652e:	4a71      	ldr	r2, [pc, #452]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006534:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006538:	4b6e      	ldr	r3, [pc, #440]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800653a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800653e:	4a6d      	ldr	r2, [pc, #436]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006544:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006548:	4a6a      	ldr	r2, [pc, #424]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d019      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655e:	f7fb fe63 	bl	8002228 <HAL_GetTick>
 8006562:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006566:	e00d      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fb fe5e 	bl	8002228 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006572:	1ad2      	subs	r2, r2, r3
 8006574:	f241 3388 	movw	r3, #5000	; 0x1388
 8006578:	429a      	cmp	r2, r3
 800657a:	d903      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006582:	e006      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006584:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0ea      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006592:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10d      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800659a:	4b56      	ldr	r3, [pc, #344]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800659c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065ac:	4a51      	ldr	r2, [pc, #324]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80065b4:	e008      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80065be:	e003      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065c8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d0:	4b48      	ldr	r3, [pc, #288]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065d6:	4a47      	ldr	r2, [pc, #284]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80065ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ee:	2300      	movs	r3, #0
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80065f6:	460b      	mov	r3, r1
 80065f8:	4313      	orrs	r3, r2
 80065fa:	d042      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80065fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006604:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006608:	d022      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800660a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800660e:	d81b      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006614:	d011      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800661a:	d815      	bhi.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d019      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006624:	d110      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662a:	3308      	adds	r3, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f001 ff05 	bl	800843c <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006638:	e00d      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663a:	4b2e      	ldr	r3, [pc, #184]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006644:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006654:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006656:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800665e:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006664:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006670:	4a20      	ldr	r2, [pc, #128]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006672:	430b      	orrs	r3, r1
 8006674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800667e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800668e:	643b      	str	r3, [r7, #64]	; 0x40
 8006690:	2300      	movs	r3, #0
 8006692:	647b      	str	r3, [r7, #68]	; 0x44
 8006694:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d032      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800669e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d00b      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b0:	d804      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	d007      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066c2:	e004      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80066cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d112      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066e8:	4a02      	ldr	r2, [pc, #8]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80066f0:	e008      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80066f2:	bf00      	nop
 80066f4:	46020c00 	.word	0x46020c00
 80066f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006700:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
 8006712:	2300      	movs	r3, #0
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d00c      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006720:	4b98      	ldr	r3, [pc, #608]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006726:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006732:	4a94      	ldr	r2, [pc, #592]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006734:	430b      	orrs	r3, r1
 8006736:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800673a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
 8006748:	2300      	movs	r3, #0
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
 800674c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d019      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800675a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800675e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006762:	d105      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006764:	4b87      	ldr	r3, [pc, #540]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	4a86      	ldr	r2, [pc, #536]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800676a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006770:	4b84      	ldr	r3, [pc, #528]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006776:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006782:	4a80      	ldr	r2, [pc, #512]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006784:	430b      	orrs	r3, r1
 8006786:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800678a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
 8006798:	2300      	movs	r3, #0
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80067a0:	460b      	mov	r3, r1
 80067a2:	4313      	orrs	r3, r2
 80067a4:	d00c      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067a6:	4b77      	ldr	r3, [pc, #476]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067b8:	4972      	ldr	r1, [pc, #456]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80067c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	2300      	movs	r3, #0
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
 80067d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d00c      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80067dc:	4b69      	ldr	r3, [pc, #420]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067ee:	4965      	ldr	r1, [pc, #404]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80067f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d00c      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006812:	4b5c      	ldr	r3, [pc, #368]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006818:	f023 0218 	bic.w	r2, r3, #24
 800681c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006820:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006824:	4957      	ldr	r1, [pc, #348]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800682c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006842:	460b      	mov	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	d032      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006854:	d105      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006856:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800685c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006860:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800686a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800686e:	d108      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006874:	3308      	adds	r3, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fde0 	bl	800843c <RCCEx_PLL2_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006882:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800688a:	4b3e      	ldr	r3, [pc, #248]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800688c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006890:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689c:	4939      	ldr	r1, [pc, #228]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d03a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80068ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d6:	d00e      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80068d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068dc:	d815      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80068e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e6:	d110      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e8:	4b26      	ldr	r3, [pc, #152]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	4a25      	ldr	r2, [pc, #148]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80068f4:	e00e      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068fa:	3308      	adds	r3, #8
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 fd9d 	bl	800843c <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006908:	e004      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006912:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006914:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10d      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800691c:	4b19      	ldr	r3, [pc, #100]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800691e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800692a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692e:	4915      	ldr	r1, [pc, #84]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006936:	e003      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800693c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d00c      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800695e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006962:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800696e:	4905      	ldr	r1, [pc, #20]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006976:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800697a:	4618      	mov	r0, r3
 800697c:	37e8      	adds	r7, #232	; 0xe8
 800697e:	46bd      	mov	sp, r7
 8006980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006984:	46020c00 	.word	0x46020c00

08006988 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006990:	4bac      	ldr	r3, [pc, #688]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006998:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800699a:	4baa      	ldr	r3, [pc, #680]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80069a4:	4ba7      	ldr	r3, [pc, #668]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	3301      	adds	r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80069b2:	4ba4      	ldr	r3, [pc, #656]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	08db      	lsrs	r3, r3, #3
 80069c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	fb02 f303 	mul.w	r3, r2, r3
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8123 	beq.w	8006c26 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d062      	beq.n	8006aac <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	f200 8081 	bhi.w	8006af0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d024      	beq.n	8006a3e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d17a      	bne.n	8006af0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a04:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0c:	4b8d      	ldr	r3, [pc, #564]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a14:	ee07 3a90 	vmov	s15, r3
 8006a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a20:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3c:	e08f      	b.n	8006b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a3e:	4b81      	ldr	r3, [pc, #516]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006a4a:	4b7e      	ldr	r3, [pc, #504]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	0f1b      	lsrs	r3, r3, #28
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	e006      	b.n	8006a64 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006a56:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	4a7a      	ldr	r2, [pc, #488]	; (8006c50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a8e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aaa:	e058      	b.n	8006b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b61      	ldr	r3, [pc, #388]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aee:	e036      	b.n	8006b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006af0:	4b54      	ldr	r3, [pc, #336]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006afc:	4b51      	ldr	r3, [pc, #324]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	0f1b      	lsrs	r3, r3, #28
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	e006      	b.n	8006b16 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006b08:	4b4e      	ldr	r3, [pc, #312]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	0f1b      	lsrs	r3, r3, #28
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	4a4e      	ldr	r2, [pc, #312]	; (8006c50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	ee07 3a90 	vmov	s15, r3
 8006b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b40:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006c4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006b5e:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b6a:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	0a5b      	lsrs	r3, r3, #9
 8006b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b80:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b90:	ee17 2a90 	vmov	r2, s15
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d017      	beq.n	8006c1e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bee:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	0e1b      	lsrs	r3, r3, #24
 8006bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c04:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c14:	ee17 2a90 	vmov	r2, s15
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c1c:	e00c      	b.n	8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	e008      	b.n	8006c38 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3724      	adds	r7, #36	; 0x24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	46020c00 	.word	0x46020c00
 8006c48:	4b742400 	.word	0x4b742400
 8006c4c:	46000000 	.word	0x46000000
 8006c50:	080282d4 	.word	0x080282d4

08006c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b089      	sub	sp, #36	; 0x24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006c5c:	4bac      	ldr	r3, [pc, #688]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c64:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006c66:	4baa      	ldr	r3, [pc, #680]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006c70:	4ba7      	ldr	r3, [pc, #668]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	0a1b      	lsrs	r3, r3, #8
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006c7e:	4ba4      	ldr	r3, [pc, #656]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006c88:	4ba1      	ldr	r3, [pc, #644]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8123 	beq.w	8006ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d062      	beq.n	8006d78 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	f200 8081 	bhi.w	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d024      	beq.n	8006d0a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d17a      	bne.n	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd8:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	ee07 3a90 	vmov	s15, r3
 8006ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cec:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d08:	e08f      	b.n	8006e2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006d0a:	4b81      	ldr	r3, [pc, #516]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006d16:	4b7e      	ldr	r3, [pc, #504]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0f1b      	lsrs	r3, r3, #28
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	e006      	b.n	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006d22:	4b7b      	ldr	r3, [pc, #492]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	0f1b      	lsrs	r3, r3, #28
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	4a7a      	ldr	r2, [pc, #488]	; (8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d5a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d76:	e058      	b.n	8006e2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d82:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8a:	4b61      	ldr	r3, [pc, #388]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dba:	e036      	b.n	8006e2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006dbc:	4b54      	ldr	r3, [pc, #336]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006dc8:	4b51      	ldr	r3, [pc, #324]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	0f1b      	lsrs	r3, r3, #28
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	e006      	b.n	8006de2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006dd4:	4b4e      	ldr	r3, [pc, #312]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dda:	041b      	lsls	r3, r3, #16
 8006ddc:	0f1b      	lsrs	r3, r3, #28
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	4a4e      	ldr	r2, [pc, #312]	; (8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e08:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e28:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006e2a:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d017      	beq.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e36:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e5c:	ee17 2a90 	vmov	r2, s15
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d017      	beq.n	8006ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9e:	ee17 2a90 	vmov	r2, s15
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	e002      	b.n	8006eae <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006eae:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006eba:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	0e1b      	lsrs	r3, r3, #24
 8006ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee0:	ee17 2a90 	vmov	r2, s15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ee8:	e00c      	b.n	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	609a      	str	r2, [r3, #8]
}
 8006ef0:	e008      	b.n	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]
}
 8006f04:	bf00      	nop
 8006f06:	3724      	adds	r7, #36	; 0x24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	46020c00 	.word	0x46020c00
 8006f14:	4b742400 	.word	0x4b742400
 8006f18:	46000000 	.word	0x46000000
 8006f1c:	080282d4 	.word	0x080282d4

08006f20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006f28:	4bac      	ldr	r3, [pc, #688]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f30:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006f32:	4baa      	ldr	r3, [pc, #680]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006f3c:	4ba7      	ldr	r3, [pc, #668]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	3301      	adds	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006f4a:	4ba4      	ldr	r3, [pc, #656]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006f54:	4ba1      	ldr	r3, [pc, #644]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	fb02 f303 	mul.w	r3, r2, r3
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8123 	beq.w	80071be <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d062      	beq.n	8007044 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	f200 8081 	bhi.w	8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d024      	beq.n	8006fd6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d17a      	bne.n	8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa4:	4b8d      	ldr	r3, [pc, #564]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fb8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006fd4:	e08f      	b.n	80070f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006fd6:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006fe2:	4b7e      	ldr	r3, [pc, #504]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	0f1b      	lsrs	r3, r3, #28
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006fee:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	0f1b      	lsrs	r3, r3, #28
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	4a7a      	ldr	r2, [pc, #488]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007022:	ed97 6a02 	vldr	s12, [r7, #8]
 8007026:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800702a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007036:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800703a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007042:	e058      	b.n	80070f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007056:	4b61      	ldr	r3, [pc, #388]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007066:	ed97 6a02 	vldr	s12, [r7, #8]
 800706a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800706e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007072:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800707a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800707e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007086:	e036      	b.n	80070f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007088:	4b54      	ldr	r3, [pc, #336]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007094:	4b51      	ldr	r3, [pc, #324]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	0f1b      	lsrs	r3, r3, #28
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	e006      	b.n	80070ae <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80070a0:	4b4e      	ldr	r3, [pc, #312]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	0f1b      	lsrs	r3, r3, #28
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	4a4e      	ldr	r2, [pc, #312]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80070b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	ee07 3a90 	vmov	s15, r3
 80070d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80070dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	0a5b      	lsrs	r3, r3, #9
 8007108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007118:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800711c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007128:	ee17 2a90 	vmov	r2, s15
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d017      	beq.n	8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007144:	4b25      	ldr	r3, [pc, #148]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800715a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800715e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716a:	ee17 2a90 	vmov	r2, s15
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	e002      	b.n	800717a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d017      	beq.n	80071b6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	0e1b      	lsrs	r3, r3, #24
 800718c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800719c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 2a90 	vmov	r2, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80071b4:	e00c      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	e008      	b.n	80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	609a      	str	r2, [r3, #8]
}
 80071d0:	bf00      	nop
 80071d2:	3724      	adds	r7, #36	; 0x24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	46020c00 	.word	0x46020c00
 80071e0:	4b742400 	.word	0x4b742400
 80071e4:	46000000 	.word	0x46000000
 80071e8:	080282d4 	.word	0x080282d4

080071ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	; 0x38
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80071f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80071fe:	430b      	orrs	r3, r1
 8007200:	d145      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007202:	4ba7      	ldr	r3, [pc, #668]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800720e:	4ba4      	ldr	r3, [pc, #656]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b02      	cmp	r3, #2
 800721a:	d108      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007222:	d104      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
 800722a:	f001 b8fc 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800722e:	4b9c      	ldr	r3, [pc, #624]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723c:	d114      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007244:	d110      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007246:	4b96      	ldr	r3, [pc, #600]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800724c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007254:	d103      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007256:	23fa      	movs	r3, #250	; 0xfa
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800725a:	f001 b8e4 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800725e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007264:	f001 b8df 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007268:	4b8d      	ldr	r3, [pc, #564]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007274:	d107      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727c:	d103      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800727e:	4b89      	ldr	r3, [pc, #548]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	f001 b8d0 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	f001 b8cc 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800728e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007292:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007296:	430b      	orrs	r3, r1
 8007298:	d151      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800729a:	4b81      	ldr	r3, [pc, #516]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800729c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80072a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80072a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d035      	beq.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	2b80      	cmp	r3, #128	; 0x80
 80072b0:	d841      	bhi.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2b60      	cmp	r3, #96	; 0x60
 80072b6:	d02a      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2b60      	cmp	r3, #96	; 0x60
 80072bc:	d83b      	bhi.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d009      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d835      	bhi.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00c      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d012      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80072d6:	e02e      	b.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fb53 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e6:	f001 b89e 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ea:	f107 0318 	add.w	r3, r7, #24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fcb0 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f8:	f001 b895 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072fc:	f107 030c 	add.w	r3, r7, #12
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff fe0d 	bl	8006f20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730a:	f001 b88c 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800730e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007314:	f001 b887 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007318:	4b61      	ldr	r3, [pc, #388]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d103      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007326:	4b60      	ldr	r3, [pc, #384]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800732a:	f001 b87c 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007332:	f001 b878 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800733a:	f001 b874 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800733e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007342:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007346:	430b      	orrs	r3, r1
 8007348:	d158      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800734a:	4b55      	ldr	r3, [pc, #340]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800734c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007354:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735c:	d03b      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d846      	bhi.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736c:	d02e      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007374:	d83e      	bhi.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800737c:	d00b      	beq.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007384:	d836      	bhi.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00d      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007392:	d012      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007394:	e02e      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff faf4 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a4:	f001 b83f 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a8:	f107 0318 	add.w	r3, r7, #24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fc51 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b6:	f001 b836 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ba:	f107 030c 	add.w	r3, r7, #12
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fdae 	bl	8006f20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073c8:	f001 b82d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d2:	f001 b828 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d6:	4b32      	ldr	r3, [pc, #200]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e2:	d103      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073e8:	f001 b81d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f0:	f001 b819 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f8:	f001 b815 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80073fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007400:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007404:	430b      	orrs	r3, r1
 8007406:	d126      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800740a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800740e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007412:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007414:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007420:	d106      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007428:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
 800742c:	f000 bffb 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743c:	d107      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007444:	d103      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007446:	4b19      	ldr	r3, [pc, #100]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	f000 bfec 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
 8007452:	f000 bfe8 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800745a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800745e:	430b      	orrs	r3, r1
 8007460:	d164      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007468:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800746c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007474:	d03d      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800747c:	d852      	bhi.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007484:	d014      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800748c:	d84a      	bhi.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01f      	beq.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800749a:	d012      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800749c:	e042      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800749e:	bf00      	nop
 80074a0:	46020c00 	.word	0x46020c00
 80074a4:	0007a120 	.word	0x0007a120
 80074a8:	00f42400 	.word	0x00f42400
 80074ac:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa67 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074be:	f000 bfb2 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0318 	add.w	r3, r7, #24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fbc4 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074d0:	f000 bfa9 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80074d4:	4bab      	ldr	r3, [pc, #684]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d103      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80074e2:	4ba9      	ldr	r3, [pc, #676]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074e6:	f000 bf9e 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ee:	f000 bf9a 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074f2:	4ba4      	ldr	r3, [pc, #656]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80074fe:	4ba1      	ldr	r3, [pc, #644]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	0e1b      	lsrs	r3, r3, #24
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	e006      	b.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800750a:	4b9e      	ldr	r3, [pc, #632]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800750c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	4a9c      	ldr	r2, [pc, #624]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800751a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007520:	f000 bf81 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007528:	f000 bf7d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800752c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007530:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007534:	430b      	orrs	r3, r1
 8007536:	d175      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007538:	4b92      	ldr	r3, [pc, #584]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800753a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2b00      	cmp	r3, #0
 8007548:	d15b      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800754a:	4b8e      	ldr	r3, [pc, #568]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800754c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007550:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007554:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800755c:	d034      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007564:	d849      	bhi.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800756c:	d00b      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007574:	d841      	bhi.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	2b00      	cmp	r3, #0
 800757a:	d016      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007582:	d009      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007584:	e039      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f9fc 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007594:	f000 bf47 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007598:	f107 0318 	add.w	r3, r7, #24
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fb59 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80075a6:	f000 bf3e 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80075aa:	4b76      	ldr	r3, [pc, #472]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b6:	d103      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80075b8:	4b73      	ldr	r3, [pc, #460]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80075bc:	f000 bf33 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80075c4:	f000 bf2f 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075c8:	4b6e      	ldr	r3, [pc, #440]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80075d4:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	e006      	b.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80075e0:	4b68      	ldr	r3, [pc, #416]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075e6:	041b      	lsls	r3, r3, #16
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	4a67      	ldr	r2, [pc, #412]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80075f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80075f6:	f000 bf16 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80075fe:	f000 bf12 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007608:	d108      	bne.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800760a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff f9ba 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	f000 bf05 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	637b      	str	r3, [r7, #52]	; 0x34
 8007620:	f000 bf01 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007628:	1e51      	subs	r1, r2, #1
 800762a:	430b      	orrs	r3, r1
 800762c:	d136      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800762e:	4b55      	ldr	r3, [pc, #340]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007640:	f7fe fafc 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8007644:	6378      	str	r0, [r7, #52]	; 0x34
 8007646:	f000 beee 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2b01      	cmp	r3, #1
 800764e:	d104      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007650:	f7fe f9be 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007654:	6378      	str	r0, [r7, #52]	; 0x34
 8007656:	f000 bee6 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800765a:	4b4a      	ldr	r3, [pc, #296]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d106      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b02      	cmp	r3, #2
 800766c:	d103      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800766e:	4b48      	ldr	r3, [pc, #288]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
 8007672:	f000 bed8 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007676:	4b43      	ldr	r3, [pc, #268]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d107      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2b03      	cmp	r3, #3
 8007688:	d104      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	f000 bec9 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
 8007698:	f000 bec5 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800769c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a0:	1e91      	subs	r1, r2, #2
 80076a2:	430b      	orrs	r3, r1
 80076a4:	d136      	bne.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80076a6:	4b37      	ldr	r3, [pc, #220]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076ac:	f003 030c 	and.w	r3, r3, #12
 80076b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fe faac 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 80076bc:	6378      	str	r0, [r7, #52]	; 0x34
 80076be:	f000 beb2 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d104      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076c8:	f7fe f982 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80076cc:	6378      	str	r0, [r7, #52]	; 0x34
 80076ce:	f000 beaa 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80076d2:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076de:	d106      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	2b08      	cmp	r3, #8
 80076e4:	d103      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ea:	f000 be9c 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80076ee:	4b25      	ldr	r3, [pc, #148]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d107      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	2b0c      	cmp	r3, #12
 8007700:	d104      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
 8007708:	f000 be8d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	f000 be89 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007718:	1f11      	subs	r1, r2, #4
 800771a:	430b      	orrs	r3, r1
 800771c:	d13e      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007728:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fe fa70 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007734:	6378      	str	r0, [r7, #52]	; 0x34
 8007736:	f000 be76 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2b10      	cmp	r3, #16
 800773e:	d104      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007740:	f7fe f946 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007744:	6378      	str	r0, [r7, #52]	; 0x34
 8007746:	f000 be6e 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d106      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	2b20      	cmp	r3, #32
 800775c:	d103      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
 8007762:	f000 be60 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007766:	4b07      	ldr	r3, [pc, #28]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b02      	cmp	r3, #2
 8007772:	d10f      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b30      	cmp	r3, #48	; 0x30
 8007778:	d10c      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	f000 be51 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007784:	46020c00 	.word	0x46020c00
 8007788:	02dc6c00 	.word	0x02dc6c00
 800778c:	080282d4 	.word	0x080282d4
 8007790:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
 8007798:	f000 be45 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800779c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a0:	f1a2 0108 	sub.w	r1, r2, #8
 80077a4:	430b      	orrs	r3, r1
 80077a6:	d136      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80077a8:	4b9f      	ldr	r3, [pc, #636]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077ba:	f7fe fa2b 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 80077be:	6378      	str	r0, [r7, #52]	; 0x34
 80077c0:	f000 be31 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d104      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077ca:	f7fe f901 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80077ce:	6378      	str	r0, [r7, #52]	; 0x34
 80077d0:	f000 be29 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80077d4:	4b94      	ldr	r3, [pc, #592]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e0:	d106      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	2b80      	cmp	r3, #128	; 0x80
 80077e6:	d103      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	f000 be1b 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80077f0:	4b8d      	ldr	r3, [pc, #564]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d107      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2bc0      	cmp	r3, #192	; 0xc0
 8007802:	d104      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
 800780a:	f000 be0c 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
 8007812:	f000 be08 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007816:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781a:	f1a2 0110 	sub.w	r1, r2, #16
 800781e:	430b      	orrs	r3, r1
 8007820:	d139      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007822:	4b81      	ldr	r3, [pc, #516]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fe f9ee 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007838:	6378      	str	r0, [r7, #52]	; 0x34
 800783a:	f000 bdf4 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007844:	d104      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007846:	f7fe f8c3 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800784a:	6378      	str	r0, [r7, #52]	; 0x34
 800784c:	f000 bdeb 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007850:	4b75      	ldr	r3, [pc, #468]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785c:	d107      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007864:	d103      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007866:	4b71      	ldr	r3, [pc, #452]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	f000 bddc 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800786e:	4b6e      	ldr	r3, [pc, #440]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b02      	cmp	r3, #2
 800787a:	d108      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007882:	d104      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
 800788a:	f000 bdcc 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
 8007892:	f000 bdc8 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789a:	f1a2 0120 	sub.w	r1, r2, #32
 800789e:	430b      	orrs	r3, r1
 80078a0:	d158      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80078a2:	4b61      	ldr	r3, [pc, #388]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80078b4:	f7fe f9d6 	bl	8005c64 <HAL_RCC_GetPCLK3Freq>
 80078b8:	6378      	str	r0, [r7, #52]	; 0x34
 80078ba:	f000 bdb4 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d104      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078c4:	f7fe f884 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80078c8:	6378      	str	r0, [r7, #52]	; 0x34
 80078ca:	f000 bdac 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80078ce:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078da:	d106      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d103      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80078e2:	4b52      	ldr	r3, [pc, #328]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	f000 bd9e 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80078ea:	4b4f      	ldr	r3, [pc, #316]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d107      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d104      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80078fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
 8007904:	f000 bd8f 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007908:	4b47      	ldr	r3, [pc, #284]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b20      	cmp	r3, #32
 8007912:	d11b      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	2b04      	cmp	r3, #4
 8007918:	d118      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800791a:	4b43      	ldr	r3, [pc, #268]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007926:	4b40      	ldr	r3, [pc, #256]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	0e1b      	lsrs	r3, r3, #24
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	e006      	b.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007932:	4b3d      	ldr	r3, [pc, #244]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	0e1b      	lsrs	r3, r3, #24
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	4a3b      	ldr	r2, [pc, #236]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
 8007948:	f000 bd6d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	f000 bd69 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007958:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800795c:	430b      	orrs	r3, r1
 800795e:	d169      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007960:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007966:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800796a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007972:	d104      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007974:	f7fe f82c 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007978:	6378      	str	r0, [r7, #52]	; 0x34
 800797a:	f000 bd54 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007984:	d108      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007986:	f107 0318 	add.w	r3, r7, #24
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff f962 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
 8007994:	f000 bd47 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800799e:	f7fe f91f 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 80079a2:	6378      	str	r0, [r7, #52]	; 0x34
 80079a4:	f000 bd3f 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80079ae:	d118      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80079b0:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80079bc:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	0f1b      	lsrs	r3, r3, #28
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	e006      	b.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80079c8:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	0f1b      	lsrs	r3, r3, #28
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
 80079de:	f000 bd22 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ee:	d107      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079f6:	d103      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
 80079fc:	f000 bd13 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a14:	d103      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	f000 bd04 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	f000 bd00 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007a26:	bf00      	nop
 8007a28:	46020c00 	.word	0x46020c00
 8007a2c:	00f42400 	.word	0x00f42400
 8007a30:	080282d4 	.word	0x080282d4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a38:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	d14e      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007a40:	4ba8      	ldr	r3, [pc, #672]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d841      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007a7f 	.word	0x08007a7f
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007aa5 	.word	0x08007aa5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe ff89 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7a:	f000 bcd4 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fa4c 	bl	8006f20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a8c:	f000 bccb 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007a90:	f7fe f8a6 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8007a94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a96:	f000 bcc6 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa0:	f000 bcc1 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007aa4:	4b8f      	ldr	r3, [pc, #572]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007ab0:	4b8c      	ldr	r3, [pc, #560]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	0e1b      	lsrs	r3, r3, #24
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	e006      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007abc:	4b89      	ldr	r3, [pc, #548]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	0e1b      	lsrs	r3, r3, #24
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	4a87      	ldr	r2, [pc, #540]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ad2:	f000 bca8 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ada:	f000 bca4 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	d15d      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007aea:	4b7e      	ldr	r3, [pc, #504]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007af0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007afc:	d036      	beq.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b04:	d84b      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b0c:	d029      	beq.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b14:	d843      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b1c:	d013      	beq.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b24:	d83b      	bhi.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d015      	beq.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b32:	d134      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe ff25 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b42:	f000 bc70 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b46:	f107 030c 	add.w	r3, r7, #12
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff f9e8 	bl	8006f20 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b54:	f000 bc67 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b58:	f7fe f842 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8007b5c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b5e:	f000 bc62 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b68:	f000 bc5d 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b6c:	4b5d      	ldr	r3, [pc, #372]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007b78:	4b5a      	ldr	r3, [pc, #360]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	0e1b      	lsrs	r3, r3, #24
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	e006      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007b84:	4b57      	ldr	r3, [pc, #348]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	4a55      	ldr	r2, [pc, #340]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b9a:	f000 bc44 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba2:	f000 bc40 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007baa:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	d14a      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007bb2:	4b4c      	ldr	r3, [pc, #304]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bbc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bc4:	f7fe f826 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007bc8:	6378      	str	r0, [r7, #52]	; 0x34
 8007bca:	f000 bc2c 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd4:	d104      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bd6:	f7fd fefb 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007bda:	6378      	str	r0, [r7, #52]	; 0x34
 8007bdc:	f000 bc23 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007be0:	4b40      	ldr	r3, [pc, #256]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bec:	d107      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf4:	d103      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	f000 bc14 	b.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007bfe:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d11b      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c10:	d117      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c12:	4b34      	ldr	r3, [pc, #208]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007c1e:	4b31      	ldr	r3, [pc, #196]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	0e1b      	lsrs	r3, r3, #24
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	e006      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007c2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	0e1b      	lsrs	r3, r3, #24
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	4a2b      	ldr	r2, [pc, #172]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	e3f1      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	e3ee      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c4c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007c50:	430b      	orrs	r3, r1
 8007c52:	d14d      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007c54:	4b23      	ldr	r3, [pc, #140]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c5e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d103      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c66:	f7fd ffd5 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007c6a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c6c:	e3db      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c74:	d103      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c76:	f7fd feab 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007c7a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c7c:	e3d3      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007c7e:	4b19      	ldr	r3, [pc, #100]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8a:	d106      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c92:	d102      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
 8007c98:	e3c5      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007c9a:	4b12      	ldr	r3, [pc, #72]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d11b      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cac:	d117      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	e006      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ccc:	041b      	lsls	r3, r3, #16
 8007cce:	0e1b      	lsrs	r3, r3, #24
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	e3a3      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce2:	e3a0      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007ce4:	46020c00 	.word	0x46020c00
 8007ce8:	080282d4 	.word	0x080282d4
 8007cec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	d148      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007cfc:	4b9d      	ldr	r3, [pc, #628]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d0c:	d024      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2bc0      	cmp	r3, #192	; 0xc0
 8007d12:	d839      	bhi.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d00d      	beq.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	2b80      	cmp	r3, #128	; 0x80
 8007d1e:	d833      	bhi.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d011      	beq.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007d2c:	e02c      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007d2e:	f7fd ff99 	bl	8005c64 <HAL_RCC_GetPCLK3Freq>
 8007d32:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007d34:	e377      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d36:	4b8f      	ldr	r3, [pc, #572]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d42:	d102      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007d44:	4b8c      	ldr	r3, [pc, #560]	; (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d48:	e36d      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d4e:	e36a      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007d50:	f7fd fe3e 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007d54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007d56:	e366      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007d58:	4b86      	ldr	r3, [pc, #536]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007d64:	4b83      	ldr	r3, [pc, #524]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	0f1b      	lsrs	r3, r3, #28
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	e006      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007d70:	4b80      	ldr	r3, [pc, #512]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	0f1b      	lsrs	r3, r3, #28
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	4a7f      	ldr	r2, [pc, #508]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d86:	e34e      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d8c:	e34b      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d92:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007d96:	430b      	orrs	r3, r1
 8007d98:	d147      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007d9a:	4b76      	ldr	r3, [pc, #472]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007da4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d103      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fd ff32 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007db0:	6378      	str	r0, [r7, #52]	; 0x34
 8007db2:	e338      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dba:	d103      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dbc:	f7fd fe08 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007dc0:	6378      	str	r0, [r7, #52]	; 0x34
 8007dc2:	e330      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007dc4:	4b6b      	ldr	r3, [pc, #428]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd0:	d106      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd8:	d102      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007dda:	4b67      	ldr	r3, [pc, #412]	; (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dde:	e322      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007de0:	4b64      	ldr	r3, [pc, #400]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d11b      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007df2:	d117      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007df4:	4b5f      	ldr	r3, [pc, #380]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007e00:	4b5c      	ldr	r3, [pc, #368]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	0e1b      	lsrs	r3, r3, #24
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	e006      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007e0c:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	0e1b      	lsrs	r3, r3, #24
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	4a58      	ldr	r2, [pc, #352]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
 8007e22:	e300      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	637b      	str	r3, [r7, #52]	; 0x34
 8007e28:	e2fd      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007e32:	430b      	orrs	r3, r1
 8007e34:	d15b      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007e36:	4b4f      	ldr	r3, [pc, #316]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d117      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e48:	4b4a      	ldr	r3, [pc, #296]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007e54:	4b47      	ldr	r3, [pc, #284]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	0e1b      	lsrs	r3, r3, #24
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	e006      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007e60:	4b44      	ldr	r3, [pc, #272]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e66:	041b      	lsls	r3, r3, #16
 8007e68:	0e1b      	lsrs	r3, r3, #24
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	4a43      	ldr	r2, [pc, #268]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
 8007e76:	e2d6      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e86:	d112      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8e:	d10e      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e90:	4b38      	ldr	r3, [pc, #224]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9e:	d102      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007ea0:	23fa      	movs	r3, #250	; 0xfa
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ea4:	e2bf      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ea6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eac:	e2bb      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007eae:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eba:	d106      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007ec4:	4b2c      	ldr	r3, [pc, #176]	; (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec8:	e2ad      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d107      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ede:	d103      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	e29e      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
 8007eec:	e29b      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	d162      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007efa:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d117      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f0c:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007f18:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	e006      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007f24:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	0e1b      	lsrs	r3, r3, #24
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	4a12      	ldr	r2, [pc, #72]	; (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	e274      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4a:	d119      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f52:	d115      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f62:	d102      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007f64:	23fa      	movs	r3, #250	; 0xfa
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f68:	e25d      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f6a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f6e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f70:	e259      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007f72:	bf00      	nop
 8007f74:	46020c00 	.word	0x46020c00
 8007f78:	00f42400 	.word	0x00f42400
 8007f7c:	080282d4 	.word	0x080282d4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007f80:	4b9d      	ldr	r3, [pc, #628]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8c:	d106      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f94:	d102      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8007f96:	4b99      	ldr	r3, [pc, #612]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9a:	e244      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007f9c:	4b96      	ldr	r3, [pc, #600]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d107      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb0:	d103      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb8:	e235      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	e232      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	d147      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007fcc:	4b8a      	ldr	r3, [pc, #552]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fd2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007fd6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007fde:	f7fd fe19 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8007fe2:	6378      	str	r0, [r7, #52]	; 0x34
 8007fe4:	e21f      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007fe6:	4b84      	ldr	r3, [pc, #528]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ff4:	d112      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ffc:	d10e      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ffe:	4b7e      	ldr	r3, [pc, #504]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800c:	d102      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800800e:	23fa      	movs	r3, #250	; 0xfa
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008012:	e208      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008014:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800801a:	e204      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800801c:	4b76      	ldr	r3, [pc, #472]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008028:	d106      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008030:	d102      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8008032:	4b72      	ldr	r3, [pc, #456]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008034:	637b      	str	r3, [r7, #52]	; 0x34
 8008036:	e1f6      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008038:	4b6f      	ldr	r3, [pc, #444]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800803a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d107      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800804c:	d103      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800804e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008052:	637b      	str	r3, [r7, #52]	; 0x34
 8008054:	e1e7      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
 800805a:	e1e4      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008064:	430b      	orrs	r3, r1
 8008066:	d12d      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008068:	4b63      	ldr	r3, [pc, #396]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800806a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800806e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008072:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008074:	4b60      	ldr	r3, [pc, #384]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008080:	d105      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008088:	4b5c      	ldr	r3, [pc, #368]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
 800808c:	e1cb      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008094:	d107      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fc74 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
 80080a4:	e1bf      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ac:	d107      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ae:	f107 0318 	add.w	r3, r7, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fdce 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
 80080bc:	e1b3      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
 80080c2:	e1b0      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80080cc:	430b      	orrs	r3, r1
 80080ce:	d14d      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80080d0:	4b49      	ldr	r3, [pc, #292]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080e2:	d028      	beq.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080ea:	d83c      	bhi.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080f2:	d013      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080fa:	d834      	bhi.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008108:	d004      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800810a:	e02c      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800810c:	f7fd fd96 	bl	8005c3c <HAL_RCC_GetPCLK2Freq>
 8008110:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008112:	e188      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008114:	f7fd fc5c 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8008118:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800811a:	e184      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800811c:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008128:	d102      	bne.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800812a:	4b34      	ldr	r3, [pc, #208]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800812e:	e17a      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008134:	e177      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8008142:	4b2d      	ldr	r3, [pc, #180]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	0e1b      	lsrs	r3, r3, #24
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	e006      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800814e:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	0e1b      	lsrs	r3, r3, #24
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	4a28      	ldr	r2, [pc, #160]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800815e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008164:	e15f      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800816a:	e15c      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800816c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008170:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008174:	430b      	orrs	r3, r1
 8008176:	d154      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008178:	4b1f      	ldr	r3, [pc, #124]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800817a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800817e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008182:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800818a:	d028      	beq.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008192:	d843      	bhi.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800819a:	d013      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a2:	d83b      	bhi.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b0:	d004      	beq.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80081b2:	e033      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80081b4:	f7fd fd2e 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 80081b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081ba:	e134      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081bc:	f7fd fc08 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80081c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081c2:	e130      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d0:	d102      	bne.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081d6:	e126      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081dc:	e123      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00c      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0e1b      	lsrs	r3, r3, #24
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	e00d      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80081f6:	bf00      	nop
 80081f8:	46020c00 	.word	0x46020c00
 80081fc:	00f42400 	.word	0x00f42400
 8008200:	080282d4 	.word	0x080282d4
 8008204:	4b8a      	ldr	r3, [pc, #552]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	4a88      	ldr	r2, [pc, #544]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800821a:	e104      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008220:	e101      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008226:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800822a:	430b      	orrs	r3, r1
 800822c:	d16e      	bne.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800822e:	4b80      	ldr	r3, [pc, #512]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008234:	f003 0318 	and.w	r3, r3, #24
 8008238:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	2b18      	cmp	r3, #24
 800823e:	d862      	bhi.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	080082ad 	.word	0x080082ad
 800824c:	08008307 	.word	0x08008307
 8008250:	08008307 	.word	0x08008307
 8008254:	08008307 	.word	0x08008307
 8008258:	08008307 	.word	0x08008307
 800825c:	08008307 	.word	0x08008307
 8008260:	08008307 	.word	0x08008307
 8008264:	08008307 	.word	0x08008307
 8008268:	080082b5 	.word	0x080082b5
 800826c:	08008307 	.word	0x08008307
 8008270:	08008307 	.word	0x08008307
 8008274:	08008307 	.word	0x08008307
 8008278:	08008307 	.word	0x08008307
 800827c:	08008307 	.word	0x08008307
 8008280:	08008307 	.word	0x08008307
 8008284:	08008307 	.word	0x08008307
 8008288:	080082bd 	.word	0x080082bd
 800828c:	08008307 	.word	0x08008307
 8008290:	08008307 	.word	0x08008307
 8008294:	08008307 	.word	0x08008307
 8008298:	08008307 	.word	0x08008307
 800829c:	08008307 	.word	0x08008307
 80082a0:	08008307 	.word	0x08008307
 80082a4:	08008307 	.word	0x08008307
 80082a8:	080082d7 	.word	0x080082d7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80082ac:	f7fd fcda 	bl	8005c64 <HAL_RCC_GetPCLK3Freq>
 80082b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082b2:	e0b8      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082b4:	f7fd fb8c 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80082b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082ba:	e0b4      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082bc:	4b5c      	ldr	r3, [pc, #368]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c8:	d102      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80082ca:	4b5b      	ldr	r3, [pc, #364]	; (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082ce:	e0aa      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d4:	e0a7      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082d6:	4b56      	ldr	r3, [pc, #344]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80082e2:	4b53      	ldr	r3, [pc, #332]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	0e1b      	lsrs	r3, r3, #24
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	e006      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80082ee:	4b50      	ldr	r3, [pc, #320]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	0e1b      	lsrs	r3, r3, #24
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	4a4d      	ldr	r2, [pc, #308]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80082fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008304:	e08f      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800830a:	e08c      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800830c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008310:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008314:	430b      	orrs	r3, r1
 8008316:	d14c      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008318:	4b45      	ldr	r3, [pc, #276]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800831a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800831e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008322:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800832a:	d013      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008332:	d83b      	bhi.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800833a:	d013      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008342:	d833      	bhi.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	2b00      	cmp	r3, #0
 8008348:	d014      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008350:	d014      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008352:	e02b      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008354:	f107 0318 	add.w	r3, r7, #24
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fc7b 	bl	8006c54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008362:	e060      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fb0d 	bl	8006988 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008372:	e058      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008374:	f7fd fb2c 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8008378:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800837a:	e054      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800837c:	4b2c      	ldr	r3, [pc, #176]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008388:	4b29      	ldr	r3, [pc, #164]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	0e1b      	lsrs	r3, r3, #24
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	e006      	b.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008394:	4b26      	ldr	r3, [pc, #152]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800839a:	041b      	lsls	r3, r3, #16
 800839c:	0e1b      	lsrs	r3, r3, #24
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	4a24      	ldr	r2, [pc, #144]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80083a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083aa:	e03c      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083b0:	e039      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80083b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80083ba:	430b      	orrs	r3, r1
 80083bc:	d131      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083c8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80083ca:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d106      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80083de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34
 80083e4:	e01f      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80083e6:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f4:	d112      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083fc:	d10e      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800840c:	d102      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800840e:	23fa      	movs	r3, #250	; 0xfa
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008412:	e008      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008414:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800841a:	e004      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	e001      	b.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008428:	4618      	mov	r0, r3
 800842a:	3738      	adds	r7, #56	; 0x38
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	46020c00 	.word	0x46020c00
 8008434:	080282d4 	.word	0x080282d4
 8008438:	00f42400 	.word	0x00f42400

0800843c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008444:	4b47      	ldr	r3, [pc, #284]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a46      	ldr	r2, [pc, #280]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 800844a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800844e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008450:	f7f9 feea 	bl	8002228 <HAL_GetTick>
 8008454:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008456:	e008      	b.n	800846a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008458:	f7f9 fee6 	bl	8002228 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e077      	b.n	800855a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800846a:	4b3e      	ldr	r3, [pc, #248]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f0      	bne.n	8008458 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008476:	4b3b      	ldr	r3, [pc, #236]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6852      	ldr	r2, [r2, #4]
 800848a:	3a01      	subs	r2, #1
 800848c:	0212      	lsls	r2, r2, #8
 800848e:	430a      	orrs	r2, r1
 8008490:	4934      	ldr	r1, [pc, #208]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008492:	4313      	orrs	r3, r2
 8008494:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008496:	4b33      	ldr	r3, [pc, #204]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800849a:	4b33      	ldr	r3, [pc, #204]	; (8008568 <RCCEx_PLL2_Config+0x12c>)
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6892      	ldr	r2, [r2, #8]
 80084a2:	3a01      	subs	r2, #1
 80084a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	68d2      	ldr	r2, [r2, #12]
 80084ac:	3a01      	subs	r2, #1
 80084ae:	0252      	lsls	r2, r2, #9
 80084b0:	b292      	uxth	r2, r2
 80084b2:	4311      	orrs	r1, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6912      	ldr	r2, [r2, #16]
 80084b8:	3a01      	subs	r2, #1
 80084ba:	0412      	lsls	r2, r2, #16
 80084bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80084c0:	4311      	orrs	r1, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6952      	ldr	r2, [r2, #20]
 80084c6:	3a01      	subs	r2, #1
 80084c8:	0612      	lsls	r2, r2, #24
 80084ca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80084ce:	430a      	orrs	r2, r1
 80084d0:	4924      	ldr	r1, [pc, #144]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80084d6:	4b23      	ldr	r3, [pc, #140]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f023 020c 	bic.w	r2, r3, #12
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	4920      	ldr	r1, [pc, #128]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	491c      	ldr	r1, [pc, #112]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80084f6:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	4a1a      	ldr	r2, [pc, #104]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 80084fc:	f023 0310 	bic.w	r3, r3, #16
 8008500:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008502:	4b18      	ldr	r3, [pc, #96]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	69d2      	ldr	r2, [r2, #28]
 8008512:	00d2      	lsls	r2, r2, #3
 8008514:	4913      	ldr	r1, [pc, #76]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008516:	4313      	orrs	r3, r2
 8008518:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800851a:	4b12      	ldr	r3, [pc, #72]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4a11      	ldr	r2, [pc, #68]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008520:	f043 0310 	orr.w	r3, r3, #16
 8008524:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a0e      	ldr	r2, [pc, #56]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 800852c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008530:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008532:	f7f9 fe79 	bl	8002228 <HAL_GetTick>
 8008536:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008538:	e008      	b.n	800854c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800853a:	f7f9 fe75 	bl	8002228 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e006      	b.n	800855a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <RCCEx_PLL2_Config+0x128>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0f0      	beq.n	800853a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008558:	2300      	movs	r3, #0

}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	46020c00 	.word	0x46020c00
 8008568:	80800000 	.word	0x80800000

0800856c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008574:	4b47      	ldr	r3, [pc, #284]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a46      	ldr	r2, [pc, #280]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800857a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800857e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008580:	f7f9 fe52 	bl	8002228 <HAL_GetTick>
 8008584:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008586:	e008      	b.n	800859a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008588:	f7f9 fe4e 	bl	8002228 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e077      	b.n	800868a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800859a:	4b3e      	ldr	r3, [pc, #248]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80085a6:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6811      	ldr	r1, [r2, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	3a01      	subs	r2, #1
 80085bc:	0212      	lsls	r2, r2, #8
 80085be:	430a      	orrs	r2, r1
 80085c0:	4934      	ldr	r1, [pc, #208]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	630b      	str	r3, [r1, #48]	; 0x30
 80085c6:	4b33      	ldr	r3, [pc, #204]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 80085c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ca:	4b33      	ldr	r3, [pc, #204]	; (8008698 <RCCEx_PLL3_Config+0x12c>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6892      	ldr	r2, [r2, #8]
 80085d2:	3a01      	subs	r2, #1
 80085d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	68d2      	ldr	r2, [r2, #12]
 80085dc:	3a01      	subs	r2, #1
 80085de:	0252      	lsls	r2, r2, #9
 80085e0:	b292      	uxth	r2, r2
 80085e2:	4311      	orrs	r1, r2
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	6912      	ldr	r2, [r2, #16]
 80085e8:	3a01      	subs	r2, #1
 80085ea:	0412      	lsls	r2, r2, #16
 80085ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80085f0:	4311      	orrs	r1, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6952      	ldr	r2, [r2, #20]
 80085f6:	3a01      	subs	r2, #1
 80085f8:	0612      	lsls	r2, r2, #24
 80085fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80085fe:	430a      	orrs	r2, r1
 8008600:	4924      	ldr	r1, [pc, #144]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008602:	4313      	orrs	r3, r2
 8008604:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	f023 020c 	bic.w	r2, r3, #12
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	4920      	ldr	r1, [pc, #128]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008614:	4313      	orrs	r3, r2
 8008616:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800861a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	491c      	ldr	r1, [pc, #112]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008622:	4313      	orrs	r3, r2
 8008624:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008626:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800862c:	f023 0310 	bic.w	r3, r3, #16
 8008630:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800863a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	69d2      	ldr	r2, [r2, #28]
 8008642:	00d2      	lsls	r2, r2, #3
 8008644:	4913      	ldr	r1, [pc, #76]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008646:	4313      	orrs	r3, r2
 8008648:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800864a:	4b12      	ldr	r3, [pc, #72]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a11      	ldr	r2, [pc, #68]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008650:	f043 0310 	orr.w	r3, r3, #16
 8008654:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a0e      	ldr	r2, [pc, #56]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800865c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008660:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008662:	f7f9 fde1 	bl	8002228 <HAL_GetTick>
 8008666:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008668:	e008      	b.n	800867c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800866a:	f7f9 fddd 	bl	8002228 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e006      	b.n	800868a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <RCCEx_PLL3_Config+0x128>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0f0      	beq.n	800866a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	46020c00 	.word	0x46020c00
 8008698:	80800000 	.word	0x80800000

0800869c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e03e      	b.n	8008730 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7f9 fb8a 	bl	8001de0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3308      	adds	r3, #8
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f001 f8c4 	bl	8009864 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	461a      	mov	r2, r3
 80086e6:	68b9      	ldr	r1, [r7, #8]
 80086e8:	f001 f98c 	bl	8009a04 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6858      	ldr	r0, [r3, #4]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	f001 f9d5 	bl	8009aa8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	6892      	ldr	r2, [r2, #8]
 8008706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	6892      	ldr	r2, [r2, #8]
 8008712:	f041 0101 	orr.w	r1, r1, #1
 8008716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <HAL_SRAM_Init+0x9c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a06      	ldr	r2, [pc, #24]	; (8008738 <HAL_SRAM_Init+0x9c>)
 8008720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008724:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	420d0400 	.word	0x420d0400

0800873c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e049      	b.n	80087e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f841 	bl	80087ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f000 fa88 	bl	8008c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	d001      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e072      	b.n	80088fe <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0201 	orr.w	r2, r2, #1
 800882e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a35      	ldr	r2, [pc, #212]	; (800890c <HAL_TIM_Base_Start_IT+0x10c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d040      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a34      	ldr	r2, [pc, #208]	; (8008910 <HAL_TIM_Base_Start_IT+0x110>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d03b      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884c:	d036      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008856:	d031      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a2d      	ldr	r2, [pc, #180]	; (8008914 <HAL_TIM_Base_Start_IT+0x114>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d02c      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a2c      	ldr	r2, [pc, #176]	; (8008918 <HAL_TIM_Base_Start_IT+0x118>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d027      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a2a      	ldr	r2, [pc, #168]	; (800891c <HAL_TIM_Base_Start_IT+0x11c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a29      	ldr	r2, [pc, #164]	; (8008920 <HAL_TIM_Base_Start_IT+0x120>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d01d      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a27      	ldr	r2, [pc, #156]	; (8008924 <HAL_TIM_Base_Start_IT+0x124>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a26      	ldr	r2, [pc, #152]	; (8008928 <HAL_TIM_Base_Start_IT+0x128>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a24      	ldr	r2, [pc, #144]	; (800892c <HAL_TIM_Base_Start_IT+0x12c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a23      	ldr	r2, [pc, #140]	; (8008930 <HAL_TIM_Base_Start_IT+0x130>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_TIM_Base_Start_IT+0x134>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIM_Base_Start_IT+0xbc>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a20      	ldr	r2, [pc, #128]	; (8008938 <HAL_TIM_Base_Start_IT+0x138>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d115      	bne.n	80088e8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	4b1e      	ldr	r3, [pc, #120]	; (800893c <HAL_TIM_Base_Start_IT+0x13c>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b06      	cmp	r3, #6
 80088cc:	d015      	beq.n	80088fa <HAL_TIM_Base_Start_IT+0xfa>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d4:	d011      	beq.n	80088fa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0201 	orr.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e6:	e008      	b.n	80088fa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0201 	orr.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e000      	b.n	80088fc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40012c00 	.word	0x40012c00
 8008910:	50012c00 	.word	0x50012c00
 8008914:	40000400 	.word	0x40000400
 8008918:	50000400 	.word	0x50000400
 800891c:	40000800 	.word	0x40000800
 8008920:	50000800 	.word	0x50000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	50000c00 	.word	0x50000c00
 800892c:	40013400 	.word	0x40013400
 8008930:	50013400 	.word	0x50013400
 8008934:	40014000 	.word	0x40014000
 8008938:	50014000 	.word	0x50014000
 800893c:	00010007 	.word	0x00010007

08008940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d122      	bne.n	800899c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b02      	cmp	r3, #2
 8008962:	d11b      	bne.n	800899c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0202 	mvn.w	r2, #2
 800896c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f965 	bl	8008c52 <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f957 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f968 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0304 	and.w	r3, r3, #4
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d122      	bne.n	80089f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d11b      	bne.n	80089f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f06f 0204 	mvn.w	r2, #4
 80089c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f93b 	bl	8008c52 <HAL_TIM_IC_CaptureCallback>
 80089dc:	e005      	b.n	80089ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f92d 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f93e 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	d122      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d11b      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0208 	mvn.w	r2, #8
 8008a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f911 	bl	8008c52 <HAL_TIM_IC_CaptureCallback>
 8008a30:	e005      	b.n	8008a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f903 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f914 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0310 	and.w	r3, r3, #16
 8008a4e:	2b10      	cmp	r3, #16
 8008a50:	d122      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b10      	cmp	r3, #16
 8008a5e:	d11b      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0210 	mvn.w	r2, #16
 8008a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8e7 	bl	8008c52 <HAL_TIM_IC_CaptureCallback>
 8008a84:	e005      	b.n	8008a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8d9 	bl	8008c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f8ea 	bl	8008c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10e      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d107      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0201 	mvn.w	r2, #1
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7f8 ff68 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ace:	2b80      	cmp	r3, #128	; 0x80
 8008ad0:	d10e      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008adc:	2b80      	cmp	r3, #128	; 0x80
 8008ade:	d107      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f9d4 	bl	8008e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afe:	d10e      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d107      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9c7 	bl	8008eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b28:	2b40      	cmp	r3, #64	; 0x40
 8008b2a:	d10e      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d107      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f898 	bl	8008c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f003 0320 	and.w	r3, r3, #32
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d10e      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d107      	bne.n	8008b76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f06f 0220 	mvn.w	r2, #32
 8008b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f987 	bl	8008e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b84:	d10f      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b94:	d107      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f98d 	bl	8008ec0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb4:	d10f      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f97f 	bl	8008ed4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be4:	d10f      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf4:	d107      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f971 	bl	8008ee8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c14:	d10f      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c24:	d107      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f963 	bl	8008efc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <TIM_Base_SetConfig+0x1b4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d02b      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a67      	ldr	r2, [pc, #412]	; (8008e48 <TIM_Base_SetConfig+0x1b8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d027      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb6:	d023      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cbe:	d01f      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a62      	ldr	r2, [pc, #392]	; (8008e4c <TIM_Base_SetConfig+0x1bc>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d01b      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a61      	ldr	r2, [pc, #388]	; (8008e50 <TIM_Base_SetConfig+0x1c0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d017      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a60      	ldr	r2, [pc, #384]	; (8008e54 <TIM_Base_SetConfig+0x1c4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a5f      	ldr	r2, [pc, #380]	; (8008e58 <TIM_Base_SetConfig+0x1c8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a5e      	ldr	r2, [pc, #376]	; (8008e5c <TIM_Base_SetConfig+0x1cc>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a5d      	ldr	r2, [pc, #372]	; (8008e60 <TIM_Base_SetConfig+0x1d0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a5c      	ldr	r2, [pc, #368]	; (8008e64 <TIM_Base_SetConfig+0x1d4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0x70>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a5b      	ldr	r2, [pc, #364]	; (8008e68 <TIM_Base_SetConfig+0x1d8>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d108      	bne.n	8008d12 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a4b      	ldr	r2, [pc, #300]	; (8008e44 <TIM_Base_SetConfig+0x1b4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d043      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a4a      	ldr	r2, [pc, #296]	; (8008e48 <TIM_Base_SetConfig+0x1b8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d03f      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d28:	d03b      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d30:	d037      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a45      	ldr	r2, [pc, #276]	; (8008e4c <TIM_Base_SetConfig+0x1bc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d033      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a44      	ldr	r2, [pc, #272]	; (8008e50 <TIM_Base_SetConfig+0x1c0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d02f      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a43      	ldr	r2, [pc, #268]	; (8008e54 <TIM_Base_SetConfig+0x1c4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d02b      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a42      	ldr	r2, [pc, #264]	; (8008e58 <TIM_Base_SetConfig+0x1c8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d027      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a41      	ldr	r2, [pc, #260]	; (8008e5c <TIM_Base_SetConfig+0x1cc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d023      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a40      	ldr	r2, [pc, #256]	; (8008e60 <TIM_Base_SetConfig+0x1d0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01f      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a3f      	ldr	r2, [pc, #252]	; (8008e64 <TIM_Base_SetConfig+0x1d4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01b      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a3e      	ldr	r2, [pc, #248]	; (8008e68 <TIM_Base_SetConfig+0x1d8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d017      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a3d      	ldr	r2, [pc, #244]	; (8008e6c <TIM_Base_SetConfig+0x1dc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a3c      	ldr	r2, [pc, #240]	; (8008e70 <TIM_Base_SetConfig+0x1e0>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00f      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a3b      	ldr	r2, [pc, #236]	; (8008e74 <TIM_Base_SetConfig+0x1e4>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00b      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a3a      	ldr	r2, [pc, #232]	; (8008e78 <TIM_Base_SetConfig+0x1e8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d007      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a39      	ldr	r2, [pc, #228]	; (8008e7c <TIM_Base_SetConfig+0x1ec>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_Base_SetConfig+0x112>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <TIM_Base_SetConfig+0x1f0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d108      	bne.n	8008db4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <TIM_Base_SetConfig+0x1b4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d023      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <TIM_Base_SetConfig+0x1b8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d01f      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <TIM_Base_SetConfig+0x1d4>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d01b      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1d      	ldr	r2, [pc, #116]	; (8008e68 <TIM_Base_SetConfig+0x1d8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d017      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1c      	ldr	r2, [pc, #112]	; (8008e6c <TIM_Base_SetConfig+0x1dc>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d013      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <TIM_Base_SetConfig+0x1e0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00f      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <TIM_Base_SetConfig+0x1e4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00b      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a19      	ldr	r2, [pc, #100]	; (8008e78 <TIM_Base_SetConfig+0x1e8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d007      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <TIM_Base_SetConfig+0x1ec>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_Base_SetConfig+0x198>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a17      	ldr	r2, [pc, #92]	; (8008e80 <TIM_Base_SetConfig+0x1f0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d103      	bne.n	8008e30 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	615a      	str	r2, [r3, #20]
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	50012c00 	.word	0x50012c00
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	50000400 	.word	0x50000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	50000800 	.word	0x50000800
 8008e5c:	40000c00 	.word	0x40000c00
 8008e60:	50000c00 	.word	0x50000c00
 8008e64:	40013400 	.word	0x40013400
 8008e68:	50013400 	.word	0x50013400
 8008e6c:	40014000 	.word	0x40014000
 8008e70:	50014000 	.word	0x50014000
 8008e74:	40014400 	.word	0x40014400
 8008e78:	50014400 	.word	0x50014400
 8008e7c:	40014800 	.word	0x40014800
 8008e80:	50014800 	.word	0x50014800

08008e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e042      	b.n	8008fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7f8 fe09 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2224      	movs	r2, #36	; 0x24
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f82c 	bl	8008fb0 <UART_SetConfig>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e022      	b.n	8008fa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f9c2 	bl	80092f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fa49 	bl	8009438 <UART_CheckIdleState>
 8008fa6:	4603      	mov	r3, r0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb4:	b094      	sub	sp, #80	; 0x50
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	4b7e      	ldr	r3, [pc, #504]	; (80091c0 <UART_SetConfig+0x210>)
 8008fc6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4977      	ldr	r1, [pc, #476]	; (80091c4 <UART_SetConfig+0x214>)
 8008fe8:	4019      	ands	r1, r3
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	68d9      	ldr	r1, [r3, #12]
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	ea40 0301 	orr.w	r3, r0, r1
 800900a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b6a      	ldr	r3, [pc, #424]	; (80091c0 <UART_SetConfig+0x210>)
 8009018:	429a      	cmp	r2, r3
 800901a:	d009      	beq.n	8009030 <UART_SetConfig+0x80>
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	4b69      	ldr	r3, [pc, #420]	; (80091c8 <UART_SetConfig+0x218>)
 8009022:	429a      	cmp	r2, r3
 8009024:	d004      	beq.n	8009030 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	6a1a      	ldr	r2, [r3, #32]
 800902a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902c:	4313      	orrs	r3, r2
 800902e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800903a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009044:	430b      	orrs	r3, r1
 8009046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	f023 000f 	bic.w	r0, r3, #15
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	ea40 0301 	orr.w	r3, r0, r1
 800905e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	4b59      	ldr	r3, [pc, #356]	; (80091cc <UART_SetConfig+0x21c>)
 8009066:	429a      	cmp	r2, r3
 8009068:	d102      	bne.n	8009070 <UART_SetConfig+0xc0>
 800906a:	2301      	movs	r3, #1
 800906c:	64bb      	str	r3, [r7, #72]	; 0x48
 800906e:	e029      	b.n	80090c4 <UART_SetConfig+0x114>
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b56      	ldr	r3, [pc, #344]	; (80091d0 <UART_SetConfig+0x220>)
 8009076:	429a      	cmp	r2, r3
 8009078:	d102      	bne.n	8009080 <UART_SetConfig+0xd0>
 800907a:	2302      	movs	r3, #2
 800907c:	64bb      	str	r3, [r7, #72]	; 0x48
 800907e:	e021      	b.n	80090c4 <UART_SetConfig+0x114>
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b53      	ldr	r3, [pc, #332]	; (80091d4 <UART_SetConfig+0x224>)
 8009086:	429a      	cmp	r2, r3
 8009088:	d102      	bne.n	8009090 <UART_SetConfig+0xe0>
 800908a:	2304      	movs	r3, #4
 800908c:	64bb      	str	r3, [r7, #72]	; 0x48
 800908e:	e019      	b.n	80090c4 <UART_SetConfig+0x114>
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	4b50      	ldr	r3, [pc, #320]	; (80091d8 <UART_SetConfig+0x228>)
 8009096:	429a      	cmp	r2, r3
 8009098:	d102      	bne.n	80090a0 <UART_SetConfig+0xf0>
 800909a:	2308      	movs	r3, #8
 800909c:	64bb      	str	r3, [r7, #72]	; 0x48
 800909e:	e011      	b.n	80090c4 <UART_SetConfig+0x114>
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	4b4d      	ldr	r3, [pc, #308]	; (80091dc <UART_SetConfig+0x22c>)
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d102      	bne.n	80090b0 <UART_SetConfig+0x100>
 80090aa:	2310      	movs	r3, #16
 80090ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ae:	e009      	b.n	80090c4 <UART_SetConfig+0x114>
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b42      	ldr	r3, [pc, #264]	; (80091c0 <UART_SetConfig+0x210>)
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d102      	bne.n	80090c0 <UART_SetConfig+0x110>
 80090ba:	2320      	movs	r3, #32
 80090bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80090be:	e001      	b.n	80090c4 <UART_SetConfig+0x114>
 80090c0:	2300      	movs	r3, #0
 80090c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	4b3d      	ldr	r3, [pc, #244]	; (80091c0 <UART_SetConfig+0x210>)
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d005      	beq.n	80090da <UART_SetConfig+0x12a>
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b3d      	ldr	r3, [pc, #244]	; (80091c8 <UART_SetConfig+0x218>)
 80090d4:	429a      	cmp	r2, r3
 80090d6:	f040 8085 	bne.w	80091e4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090dc:	2200      	movs	r2, #0
 80090de:	623b      	str	r3, [r7, #32]
 80090e0:	627a      	str	r2, [r7, #36]	; 0x24
 80090e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80090e6:	f7fe f881 	bl	80071ec <HAL_RCCEx_GetPeriphCLKFreq>
 80090ea:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80090ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80e8 	beq.w	80092c4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	4a39      	ldr	r2, [pc, #228]	; (80091e0 <UART_SetConfig+0x230>)
 80090fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fe:	461a      	mov	r2, r3
 8009100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009102:	fbb3 f3f2 	udiv	r3, r3, r2
 8009106:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	4413      	add	r3, r2
 8009112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009114:	429a      	cmp	r2, r3
 8009116:	d305      	bcc.n	8009124 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800911e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800912a:	e048      	b.n	80091be <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800912c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912e:	2200      	movs	r2, #0
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	61fa      	str	r2, [r7, #28]
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	4a29      	ldr	r2, [pc, #164]	; (80091e0 <UART_SetConfig+0x230>)
 800913a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800913e:	b29b      	uxth	r3, r3
 8009140:	2200      	movs	r2, #0
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	617a      	str	r2, [r7, #20]
 8009146:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800914a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800914e:	f7f7 f9af 	bl	80004b0 <__aeabi_uldivmod>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4610      	mov	r0, r2
 8009158:	4619      	mov	r1, r3
 800915a:	f04f 0200 	mov.w	r2, #0
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	020b      	lsls	r3, r1, #8
 8009164:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009168:	0202      	lsls	r2, r0, #8
 800916a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800916c:	6849      	ldr	r1, [r1, #4]
 800916e:	0849      	lsrs	r1, r1, #1
 8009170:	2000      	movs	r0, #0
 8009172:	460c      	mov	r4, r1
 8009174:	4605      	mov	r5, r0
 8009176:	eb12 0804 	adds.w	r8, r2, r4
 800917a:	eb43 0905 	adc.w	r9, r3, r5
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	60fa      	str	r2, [r7, #12]
 8009188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800918c:	4640      	mov	r0, r8
 800918e:	4649      	mov	r1, r9
 8009190:	f7f7 f98e 	bl	80004b0 <__aeabi_uldivmod>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4613      	mov	r3, r2
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a2:	d308      	bcc.n	80091b6 <UART_SetConfig+0x206>
 80091a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091aa:	d204      	bcs.n	80091b6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091b2:	60da      	str	r2, [r3, #12]
 80091b4:	e003      	b.n	80091be <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80091bc:	e082      	b.n	80092c4 <UART_SetConfig+0x314>
 80091be:	e081      	b.n	80092c4 <UART_SetConfig+0x314>
 80091c0:	46002400 	.word	0x46002400
 80091c4:	cfff69f3 	.word	0xcfff69f3
 80091c8:	56002400 	.word	0x56002400
 80091cc:	40013800 	.word	0x40013800
 80091d0:	40004400 	.word	0x40004400
 80091d4:	40004800 	.word	0x40004800
 80091d8:	40004c00 	.word	0x40004c00
 80091dc:	40005000 	.word	0x40005000
 80091e0:	08028394 	.word	0x08028394
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ec:	d13c      	bne.n	8009268 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f0:	2200      	movs	r2, #0
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091fa:	f7fd fff7 	bl	80071ec <HAL_RCCEx_GetPeriphCLKFreq>
 80091fe:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d05e      	beq.n	80092c4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	4a39      	ldr	r2, [pc, #228]	; (80092f0 <UART_SetConfig+0x340>)
 800920c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009210:	461a      	mov	r2, r3
 8009212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009214:	fbb3 f3f2 	udiv	r3, r3, r2
 8009218:	005a      	lsls	r2, r3, #1
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	441a      	add	r2, r3
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	fbb2 f3f3 	udiv	r3, r2, r3
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800922c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922e:	2b0f      	cmp	r3, #15
 8009230:	d916      	bls.n	8009260 <UART_SetConfig+0x2b0>
 8009232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009238:	d212      	bcs.n	8009260 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800923a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923c:	b29b      	uxth	r3, r3
 800923e:	f023 030f 	bic.w	r3, r3, #15
 8009242:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	085b      	lsrs	r3, r3, #1
 8009248:	b29b      	uxth	r3, r3
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	b29a      	uxth	r2, r3
 8009250:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009252:	4313      	orrs	r3, r2
 8009254:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e031      	b.n	80092c4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009266:	e02d      	b.n	80092c4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926a:	2200      	movs	r2, #0
 800926c:	469a      	mov	sl, r3
 800926e:	4693      	mov	fp, r2
 8009270:	4650      	mov	r0, sl
 8009272:	4659      	mov	r1, fp
 8009274:	f7fd ffba 	bl	80071ec <HAL_RCCEx_GetPeriphCLKFreq>
 8009278:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800927a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d021      	beq.n	80092c4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	4a1a      	ldr	r2, [pc, #104]	; (80092f0 <UART_SetConfig+0x340>)
 8009286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928a:	461a      	mov	r2, r3
 800928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	441a      	add	r2, r3
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d909      	bls.n	80092be <UART_SetConfig+0x30e>
 80092aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b0:	d205      	bcs.n	80092be <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	e002      	b.n	80092c4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	2200      	movs	r2, #0
 80092d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	2200      	movs	r2, #0
 80092de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80092e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3750      	adds	r7, #80	; 0x50
 80092e8:	46bd      	mov	sp, r7
 80092ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ee:	bf00      	nop
 80092f0:	08028394 	.word	0x08028394

080092f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	430a      	orrs	r2, r1
 8009382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f003 0310 	and.w	r3, r3, #16
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01a      	beq.n	800940a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093f2:	d10a      	bne.n	800940a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	605a      	str	r2, [r3, #4]
  }
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af02      	add	r7, sp, #8
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009448:	f7f8 feee 	bl	8002228 <HAL_GetTick>
 800944c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0308 	and.w	r3, r3, #8
 8009458:	2b08      	cmp	r3, #8
 800945a:	d10e      	bne.n	800947a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800945c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f82f 	bl	80094ce <UART_WaitOnFlagUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e025      	b.n	80094c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d10e      	bne.n	80094a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f819 	bl	80094ce <UART_WaitOnFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e00f      	b.n	80094c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b09c      	sub	sp, #112	; 0x70
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	4613      	mov	r3, r2
 80094dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094de:	e0a9      	b.n	8009634 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	f000 80a5 	beq.w	8009634 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ea:	f7f8 fe9d 	bl	8002228 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d302      	bcc.n	8009500 <UART_WaitOnFlagUntilTimeout+0x32>
 80094fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d140      	bne.n	8009582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800950e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009514:	667b      	str	r3, [r7, #100]	; 0x64
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009520:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800952c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	663b      	str	r3, [r7, #96]	; 0x60
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009552:	64ba      	str	r2, [r7, #72]	; 0x48
 8009554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e5      	bne.n	8009532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e069      	b.n	8009656 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d051      	beq.n	8009634 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800959a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800959e:	d149      	bne.n	8009634 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c8:	637b      	str	r3, [r7, #52]	; 0x34
 80095ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e6      	bne.n	80095aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3308      	adds	r3, #8
 80095e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	613b      	str	r3, [r7, #16]
   return(result);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3308      	adds	r3, #8
 80095fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095fc:	623a      	str	r2, [r7, #32]
 80095fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	69f9      	ldr	r1, [r7, #28]
 8009602:	6a3a      	ldr	r2, [r7, #32]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	61bb      	str	r3, [r7, #24]
   return(result);
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e5      	bne.n	80095dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e010      	b.n	8009656 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69da      	ldr	r2, [r3, #28]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4013      	ands	r3, r2
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	bf0c      	ite	eq
 8009644:	2301      	moveq	r3, #1
 8009646:	2300      	movne	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	429a      	cmp	r2, r3
 8009650:	f43f af46 	beq.w	80094e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3770      	adds	r7, #112	; 0x70
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <HAL_UARTEx_DisableFifoMode+0x16>
 8009670:	2302      	movs	r3, #2
 8009672:	e027      	b.n	80096c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2224      	movs	r2, #36	; 0x24
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0201 	bic.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e02d      	b.n	8009744 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2224      	movs	r2, #36	; 0x24
 80096f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f022 0201 	bic.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f84f 	bl	80097c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009760:	2302      	movs	r3, #2
 8009762:	e02d      	b.n	80097c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2224      	movs	r2, #36	; 0x24
 8009770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0201 	bic.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f811 	bl	80097c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d108      	bne.n	80097ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097e8:	e031      	b.n	800984e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097ea:	2308      	movs	r3, #8
 80097ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097ee:	2308      	movs	r3, #8
 80097f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	0e5b      	lsrs	r3, r3, #25
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	0f5b      	lsrs	r3, r3, #29
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	7b3a      	ldrb	r2, [r7, #12]
 8009816:	4911      	ldr	r1, [pc, #68]	; (800985c <UARTEx_SetNbDataToProcess+0x94>)
 8009818:	5c8a      	ldrb	r2, [r1, r2]
 800981a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800981e:	7b3a      	ldrb	r2, [r7, #12]
 8009820:	490f      	ldr	r1, [pc, #60]	; (8009860 <UARTEx_SetNbDataToProcess+0x98>)
 8009822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009824:	fb93 f3f2 	sdiv	r3, r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	7b7a      	ldrb	r2, [r7, #13]
 8009834:	4909      	ldr	r1, [pc, #36]	; (800985c <UARTEx_SetNbDataToProcess+0x94>)
 8009836:	5c8a      	ldrb	r2, [r1, r2]
 8009838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800983c:	7b7a      	ldrb	r2, [r7, #13]
 800983e:	4908      	ldr	r1, [pc, #32]	; (8009860 <UARTEx_SetNbDataToProcess+0x98>)
 8009840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009842:	fb93 f3f2 	sdiv	r3, r3, r2
 8009846:	b29a      	uxth	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	080283ac 	.word	0x080283ac
 8009860:	080283b4 	.word	0x080283b4

08009864 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	6812      	ldr	r2, [r2, #0]
 800987c:	f023 0101 	bic.w	r1, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	2b08      	cmp	r3, #8
 800988c:	d102      	bne.n	8009894 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	617b      	str	r3, [r7, #20]
 8009892:	e001      	b.n	8009898 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80098a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80098aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80098b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80098b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80098bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80098c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80098c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80098ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80098d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	4313      	orrs	r3, r2
 8009904:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009906:	4b3e      	ldr	r3, [pc, #248]	; (8009a00 <FMC_NORSRAM_Init+0x19c>)
 8009908:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009910:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009918:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009920:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009928:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	43db      	mvns	r3, r3
 8009938:	ea02 0103 	and.w	r1, r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	4319      	orrs	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009952:	d10c      	bne.n	800996e <FMC_NORSRAM_Init+0x10a>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d008      	beq.n	800996e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	431a      	orrs	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d006      	beq.n	8009984 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800998a:	2b01      	cmp	r3, #1
 800998c:	d12f      	bne.n	80099ee <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800999a:	431a      	orrs	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d014      	beq.n	80099d2 <FMC_NORSRAM_Init+0x16e>
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d819      	bhi.n	80099e0 <FMC_NORSRAM_Init+0x17c>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <FMC_NORSRAM_Init+0x152>
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d007      	beq.n	80099c4 <FMC_NORSRAM_Init+0x160>
 80099b4:	e014      	b.n	80099e0 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	621a      	str	r2, [r3, #32]
        break;
 80099c2:	e015      	b.n	80099f0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	621a      	str	r2, [r3, #32]
        break;
 80099d0:	e00e      	b.n	80099f0 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	621a      	str	r2, [r3, #32]
        break;
 80099de:	e007      	b.n	80099f0 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	621a      	str	r2, [r3, #32]
        break;
 80099ec:	e000      	b.n	80099f0 <FMC_NORSRAM_Init+0x18c>
    }
  }
 80099ee:	bf00      	nop

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	0008fb7f 	.word	0x0008fb7f

08009a04 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	431a      	orrs	r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	021b      	lsls	r3, r3, #8
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	079b      	lsls	r3, r3, #30
 8009a34:	431a      	orrs	r2, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	051b      	lsls	r3, r3, #20
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	3b02      	subs	r3, #2
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	ea42 0103 	orr.w	r1, r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	4319      	orrs	r1, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a70:	d113      	bne.n	8009a9a <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a7a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	051b      	lsls	r3, r3, #20
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	431a      	orrs	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009abc:	d121      	bne.n	8009b02 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac6:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6819      	ldr	r1, [r3, #0]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	4319      	orrs	r1, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	4319      	orrs	r1, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	079b      	lsls	r3, r3, #30
 8009ae4:	4319      	orrs	r1, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	4319      	orrs	r1, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	430b      	orrs	r3, r1
 8009af4:	ea42 0103 	orr.w	r1, r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009b00:	e005      	b.n	8009b0e <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b08b      	sub	sp, #44	; 0x2c
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	fa93 f3a3 	rbit	r3, r3
 8009b36:	613b      	str	r3, [r7, #16]
  return result;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009b42:	2320      	movs	r3, #32
 8009b44:	e003      	b.n	8009b4e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	fab3 f383 	clz	r3, r3
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	2103      	movs	r1, #3
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	43db      	mvns	r3, r3
 8009b58:	401a      	ands	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	fa93 f3a3 	rbit	r3, r3
 8009b64:	61fb      	str	r3, [r7, #28]
  return result;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009b70:	2320      	movs	r3, #32
 8009b72:	e003      	b.n	8009b7c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	fab3 f383 	clz	r3, r3
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	fa01 f303 	lsl.w	r3, r1, r3
 8009b84:	431a      	orrs	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	372c      	adds	r7, #44	; 0x2c
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	401a      	ands	r2, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	fb01 f303 	mul.w	r3, r1, r3
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	605a      	str	r2, [r3, #4]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b08b      	sub	sp, #44	; 0x2c
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	fa93 f3a3 	rbit	r3, r3
 8009be0:	613b      	str	r3, [r7, #16]
  return result;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009bec:	2320      	movs	r3, #32
 8009bee:	e003      	b.n	8009bf8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	fab3 f383 	clz	r3, r3
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	2103      	movs	r1, #3
 8009bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009c00:	43db      	mvns	r3, r3
 8009c02:	401a      	ands	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	fa93 f3a3 	rbit	r3, r3
 8009c0e:	61fb      	str	r3, [r7, #28]
  return result;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009c1a:	2320      	movs	r3, #32
 8009c1c:	e003      	b.n	8009c26 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	fab3 f383 	clz	r3, r3
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009c34:	bf00      	nop
 8009c36:	372c      	adds	r7, #44	; 0x2c
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	fa93 f3a3 	rbit	r3, r3
 8009c5a:	613b      	str	r3, [r7, #16]
  return result;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009c66:	2320      	movs	r3, #32
 8009c68:	e003      	b.n	8009c72 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	fab3 f383 	clz	r3, r3
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	2103      	movs	r1, #3
 8009c76:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7a:	43db      	mvns	r3, r3
 8009c7c:	401a      	ands	r2, r3
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	fa93 f3a3 	rbit	r3, r3
 8009c88:	61fb      	str	r3, [r7, #28]
  return result;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009c94:	2320      	movs	r3, #32
 8009c96:	e003      	b.n	8009ca0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	fab3 f383 	clz	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	60da      	str	r2, [r3, #12]
}
 8009cae:	bf00      	nop
 8009cb0:	372c      	adds	r7, #44	; 0x2c
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b08b      	sub	sp, #44	; 0x2c
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1a      	ldr	r2, [r3, #32]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	fa93 f3a3 	rbit	r3, r3
 8009cd4:	613b      	str	r3, [r7, #16]
  return result;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	e003      	b.n	8009cec <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	fab3 f383 	clz	r3, r3
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	210f      	movs	r1, #15
 8009cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf4:	43db      	mvns	r3, r3
 8009cf6:	401a      	ands	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	fa93 f3a3 	rbit	r3, r3
 8009d02:	61fb      	str	r3, [r7, #28]
  return result;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009d0e:	2320      	movs	r3, #32
 8009d10:	e003      	b.n	8009d1a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	fab3 f383 	clz	r3, r3
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d22:	431a      	orrs	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009d28:	bf00      	nop
 8009d2a:	372c      	adds	r7, #44	; 0x2c
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b08b      	sub	sp, #44	; 0x2c
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	fa93 f3a3 	rbit	r3, r3
 8009d50:	613b      	str	r3, [r7, #16]
  return result;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	e003      	b.n	8009d68 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	fab3 f383 	clz	r3, r3
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	210f      	movs	r1, #15
 8009d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d70:	43db      	mvns	r3, r3
 8009d72:	401a      	ands	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	0a1b      	lsrs	r3, r3, #8
 8009d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	fa93 f3a3 	rbit	r3, r3
 8009d80:	61fb      	str	r3, [r7, #28]
  return result;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009d8c:	2320      	movs	r3, #32
 8009d8e:	e003      	b.n	8009d98 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	fab3 f383 	clz	r3, r3
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	431a      	orrs	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009da6:	bf00      	nop
 8009da8:	372c      	adds	r7, #44	; 0x2c
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b08a      	sub	sp, #40	; 0x28
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	fa93 f3a3 	rbit	r3, r3
 8009dc8:	617b      	str	r3, [r7, #20]
  return result;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <LL_GPIO_Init+0x26>
    return 32U;
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	e003      	b.n	8009de0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	fab3 f383 	clz	r3, r3
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009de2:	e050      	b.n	8009e86 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	2101      	movs	r1, #1
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	fa01 f303 	lsl.w	r3, r1, r3
 8009df0:	4013      	ands	r3, r2
 8009df2:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d042      	beq.n	8009e80 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	6a39      	ldr	r1, [r7, #32]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fe8a 	bl	8009b1c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d003      	beq.n	8009e18 <LL_GPIO_Init+0x66>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d106      	bne.n	8009e26 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	6a39      	ldr	r1, [r7, #32]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fed0 	bl	8009bc6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	6a39      	ldr	r1, [r7, #32]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff ff06 	bl	8009c40 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d121      	bne.n	8009e80 <LL_GPIO_Init+0xce>
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	fa93 f3a3 	rbit	r3, r3
 8009e46:	60bb      	str	r3, [r7, #8]
  return result;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <LL_GPIO_Init+0xa4>
    return 32U;
 8009e52:	2320      	movs	r3, #32
 8009e54:	e003      	b.n	8009e5e <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	fab3 f383 	clz	r3, r3
 8009e5c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009e5e:	2b07      	cmp	r3, #7
 8009e60:	d807      	bhi.n	8009e72 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	461a      	mov	r2, r3
 8009e68:	6a39      	ldr	r1, [r7, #32]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ff25 	bl	8009cba <LL_GPIO_SetAFPin_0_7>
 8009e70:	e006      	b.n	8009e80 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	461a      	mov	r2, r3
 8009e78:	6a39      	ldr	r1, [r7, #32]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff5a 	bl	8009d34 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	3301      	adds	r3, #1
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1a7      	bne.n	8009de4 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d003      	beq.n	8009ea4 <LL_GPIO_Init+0xf2>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d107      	bne.n	8009eb4 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	6819      	ldr	r1, [r3, #0]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff fe71 	bl	8009b96 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3728      	adds	r7, #40	; 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	f107 001c 	add.w	r0, r7, #28
 8009ecc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fd8f 	bl	800aa00 <USB_CoreReset>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8009ef8:	e005      	b.n	8009f06 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f12:	b004      	add	sp, #16
 8009f14:	4770      	bx	lr
	...

08009f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d165      	bne.n	8009ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4a41      	ldr	r2, [pc, #260]	; (800a034 <USB_SetTurnaroundTime+0x11c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d906      	bls.n	8009f42 <USB_SetTurnaroundTime+0x2a>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	4a40      	ldr	r2, [pc, #256]	; (800a038 <USB_SetTurnaroundTime+0x120>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d202      	bcs.n	8009f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009f3c:	230f      	movs	r3, #15
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e062      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	4a3c      	ldr	r2, [pc, #240]	; (800a038 <USB_SetTurnaroundTime+0x120>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d306      	bcc.n	8009f58 <USB_SetTurnaroundTime+0x40>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	4a3b      	ldr	r2, [pc, #236]	; (800a03c <USB_SetTurnaroundTime+0x124>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d202      	bcs.n	8009f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009f52:	230e      	movs	r3, #14
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	e057      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4a38      	ldr	r2, [pc, #224]	; (800a03c <USB_SetTurnaroundTime+0x124>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d306      	bcc.n	8009f6e <USB_SetTurnaroundTime+0x56>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4a37      	ldr	r2, [pc, #220]	; (800a040 <USB_SetTurnaroundTime+0x128>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d202      	bcs.n	8009f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009f68:	230d      	movs	r3, #13
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	e04c      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4a33      	ldr	r2, [pc, #204]	; (800a040 <USB_SetTurnaroundTime+0x128>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d306      	bcc.n	8009f84 <USB_SetTurnaroundTime+0x6c>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	4a32      	ldr	r2, [pc, #200]	; (800a044 <USB_SetTurnaroundTime+0x12c>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d802      	bhi.n	8009f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009f7e:	230c      	movs	r3, #12
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	e041      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4a2f      	ldr	r2, [pc, #188]	; (800a044 <USB_SetTurnaroundTime+0x12c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d906      	bls.n	8009f9a <USB_SetTurnaroundTime+0x82>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4a2e      	ldr	r2, [pc, #184]	; (800a048 <USB_SetTurnaroundTime+0x130>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d802      	bhi.n	8009f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009f94:	230b      	movs	r3, #11
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e036      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	4a2a      	ldr	r2, [pc, #168]	; (800a048 <USB_SetTurnaroundTime+0x130>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d906      	bls.n	8009fb0 <USB_SetTurnaroundTime+0x98>
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	4a29      	ldr	r2, [pc, #164]	; (800a04c <USB_SetTurnaroundTime+0x134>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d802      	bhi.n	8009fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009faa:	230a      	movs	r3, #10
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	e02b      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4a26      	ldr	r2, [pc, #152]	; (800a04c <USB_SetTurnaroundTime+0x134>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d906      	bls.n	8009fc6 <USB_SetTurnaroundTime+0xae>
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	4a25      	ldr	r2, [pc, #148]	; (800a050 <USB_SetTurnaroundTime+0x138>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d202      	bcs.n	8009fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009fc0:	2309      	movs	r3, #9
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	e020      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4a21      	ldr	r2, [pc, #132]	; (800a050 <USB_SetTurnaroundTime+0x138>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d306      	bcc.n	8009fdc <USB_SetTurnaroundTime+0xc4>
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <USB_SetTurnaroundTime+0x13c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d802      	bhi.n	8009fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009fd6:	2308      	movs	r3, #8
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	e015      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <USB_SetTurnaroundTime+0x13c>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d906      	bls.n	8009ff2 <USB_SetTurnaroundTime+0xda>
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	4a1c      	ldr	r2, [pc, #112]	; (800a058 <USB_SetTurnaroundTime+0x140>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d202      	bcs.n	8009ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009fec:	2307      	movs	r3, #7
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e00a      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009ff2:	2306      	movs	r3, #6
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	e007      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009ffe:	2309      	movs	r3, #9
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	e001      	b.n	800a008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a004:	2309      	movs	r3, #9
 800a006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	029b      	lsls	r3, r3, #10
 800a01c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a020:	431a      	orrs	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	00d8acbf 	.word	0x00d8acbf
 800a038:	00e4e1c0 	.word	0x00e4e1c0
 800a03c:	00f42400 	.word	0x00f42400
 800a040:	01067380 	.word	0x01067380
 800a044:	011a499f 	.word	0x011a499f
 800a048:	01312cff 	.word	0x01312cff
 800a04c:	014ca43f 	.word	0x014ca43f
 800a050:	016e3600 	.word	0x016e3600
 800a054:	01a6ab1f 	.word	0x01a6ab1f
 800a058:	01e84800 	.word	0x01e84800

0800a05c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f023 0201 	bic.w	r2, r3, #1
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d115      	bne.n	800a0cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f7f8 f8c7 	bl	8002240 <HAL_Delay>
      ms++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fc11 	bl	800a8e0 <USB_GetMode>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d01e      	beq.n	800a102 <USB_SetCurrentMode+0x84>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b31      	cmp	r3, #49	; 0x31
 800a0c8:	d9f0      	bls.n	800a0ac <USB_SetCurrentMode+0x2e>
 800a0ca:	e01a      	b.n	800a102 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d115      	bne.n	800a0fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0de:	2001      	movs	r0, #1
 800a0e0:	f7f8 f8ae 	bl	8002240 <HAL_Delay>
      ms++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fbf8 	bl	800a8e0 <USB_GetMode>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <USB_SetCurrentMode+0x84>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b31      	cmp	r3, #49	; 0x31
 800a0fa:	d9f0      	bls.n	800a0de <USB_SetCurrentMode+0x60>
 800a0fc:	e001      	b.n	800a102 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e005      	b.n	800a10e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b32      	cmp	r3, #50	; 0x32
 800a106:	d101      	bne.n	800a10c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a118:	b084      	sub	sp, #16
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	613b      	str	r3, [r7, #16]
 800a136:	e009      	b.n	800a14c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3340      	adds	r3, #64	; 0x40
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	2200      	movs	r2, #0
 800a144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	3301      	adds	r3, #1
 800a14a:	613b      	str	r3, [r7, #16]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2b0e      	cmp	r3, #14
 800a150:	d9f2      	bls.n	800a138 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11c      	bne.n	800a192 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a166:	f043 0302 	orr.w	r3, r3, #2
 800a16a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	e005      	b.n	800a19e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	680b      	ldr	r3, [r1, #0]
 800a1bc:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1be:	2103      	movs	r1, #3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f95b 	bl	800a47c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1c6:	2110      	movs	r1, #16
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8f3 	bl	800a3b4 <USB_FlushTxFifo>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f91f 	bl	800a41c <USB_FlushRxFifo>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a206:	461a      	mov	r2, r3
 800a208:	2300      	movs	r3, #0
 800a20a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	e043      	b.n	800a29a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a228:	d118      	bne.n	800a25c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	461a      	mov	r2, r3
 800a23e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e013      	b.n	800a26e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a252:	461a      	mov	r2, r3
 800a254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	e008      	b.n	800a26e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a268:	461a      	mov	r2, r3
 800a26a:	2300      	movs	r3, #0
 800a26c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27a:	461a      	mov	r2, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28c:	461a      	mov	r2, r3
 800a28e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3301      	adds	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d3b7      	bcc.n	800a212 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	e043      	b.n	800a330 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2be:	d118      	bne.n	800a2f2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10a      	bne.n	800a2dc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	e013      	b.n	800a304 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e008      	b.n	800a304 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	461a      	mov	r2, r3
 800a300:	2300      	movs	r3, #0
 800a302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a310:	461a      	mov	r2, r3
 800a312:	2300      	movs	r3, #0
 800a314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	461a      	mov	r2, r3
 800a324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	3301      	adds	r3, #1
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	429a      	cmp	r2, r3
 800a336:	d3b7      	bcc.n	800a2a8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a34a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	f043 0210 	orr.w	r2, r3, #16
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699a      	ldr	r2, [r3, #24]
 800a370:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <USB_DevInit+0x298>)
 800a372:	4313      	orrs	r3, r2
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f043 0208 	orr.w	r2, r3, #8
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d107      	bne.n	800a3a0 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a398:	f043 0304 	orr.w	r3, r3, #4
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ac:	b004      	add	sp, #16
 800a3ae:	4770      	bx	lr
 800a3b0:	803c3800 	.word	0x803c3800

0800a3b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4a13      	ldr	r2, [pc, #76]	; (800a418 <USB_FlushTxFifo+0x64>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e01b      	b.n	800a40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	daf2      	bge.n	800a3c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	019b      	lsls	r3, r3, #6
 800a3e4:	f043 0220 	orr.w	r2, r3, #32
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a08      	ldr	r2, [pc, #32]	; (800a418 <USB_FlushTxFifo+0x64>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d901      	bls.n	800a3fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e006      	b.n	800a40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b20      	cmp	r3, #32
 800a408:	d0f0      	beq.n	800a3ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	00030d40 	.word	0x00030d40

0800a41c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a11      	ldr	r2, [pc, #68]	; (800a478 <USB_FlushRxFifo+0x5c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d901      	bls.n	800a43a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e018      	b.n	800a46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	daf2      	bge.n	800a428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2210      	movs	r2, #16
 800a44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <USB_FlushRxFifo+0x5c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d901      	bls.n	800a45e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e006      	b.n	800a46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b10      	cmp	r3, #16
 800a468:	d0f0      	beq.n	800a44c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	00030d40 	.word	0x00030d40

0800a47c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a49c:	4313      	orrs	r3, r2
 800a49e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b087      	sub	sp, #28
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f003 0306 	and.w	r3, r3, #6
 800a4c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	75fb      	strb	r3, [r7, #23]
 800a4d2:	e00a      	b.n	800a4ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d002      	beq.n	800a4e0 <USB_GetDevSpeed+0x32>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b06      	cmp	r3, #6
 800a4de:	d102      	bne.n	800a4e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	75fb      	strb	r3, [r7, #23]
 800a4e4:	e001      	b.n	800a4ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a4e6:	230f      	movs	r3, #15
 800a4e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d14a      	bne.n	800a5ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a52a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a52e:	f040 8086 	bne.w	800a63e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	0151      	lsls	r1, r2, #5
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	440a      	add	r2, r1
 800a54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a554:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	7812      	ldrb	r2, [r2, #0]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f242 7210 	movw	r2, #10000	; 0x2710
 800a586:	4293      	cmp	r3, r2
 800a588:	d902      	bls.n	800a590 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
          break;
 800a58e:	e056      	b.n	800a63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a8:	d0e7      	beq.n	800a57a <USB_EPStopXfer+0x82>
 800a5aa:	e048      	b.n	800a63e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5c4:	d13b      	bne.n	800a63e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	7812      	ldrb	r2, [r2, #0]
 800a5da:	0151      	lsls	r1, r2, #5
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	440a      	add	r2, r1
 800a5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	7812      	ldrb	r2, [r2, #0]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a60c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3301      	adds	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f242 7210 	movw	r2, #10000	; 0x2710
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d902      	bls.n	800a624 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	75fb      	strb	r3, [r7, #23]
          break;
 800a622:	e00c      	b.n	800a63e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63c:	d0e7      	beq.n	800a60e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a640:	4618      	mov	r0, r3
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b089      	sub	sp, #36	; 0x24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	4611      	mov	r1, r2
 800a658:	461a      	mov	r2, r3
 800a65a:	460b      	mov	r3, r1
 800a65c:	71fb      	strb	r3, [r7, #7]
 800a65e:	4613      	mov	r3, r2
 800a660:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a66a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d123      	bne.n	800a6ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a672:	88bb      	ldrh	r3, [r7, #4]
 800a674:	3303      	adds	r3, #3
 800a676:	089b      	lsrs	r3, r3, #2
 800a678:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a67a:	2300      	movs	r3, #0
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	e018      	b.n	800a6b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	031a      	lsls	r2, r3, #12
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	4413      	add	r3, r2
 800a688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68c:	461a      	mov	r2, r3
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	3301      	adds	r3, #1
 800a698:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	3301      	adds	r3, #1
 800a69e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	61bb      	str	r3, [r7, #24]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d3e2      	bcc.n	800a680 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3724      	adds	r7, #36	; 0x24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b08b      	sub	sp, #44	; 0x2c
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	089b      	lsrs	r3, r3, #2
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a6e6:	88fb      	ldrh	r3, [r7, #6]
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	623b      	str	r3, [r7, #32]
 800a6f2:	e014      	b.n	800a71e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	3301      	adds	r3, #1
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	3301      	adds	r3, #1
 800a70a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	3301      	adds	r3, #1
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	3301      	adds	r3, #1
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	3301      	adds	r3, #1
 800a71c:	623b      	str	r3, [r7, #32]
 800a71e:	6a3a      	ldr	r2, [r7, #32]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	429a      	cmp	r2, r3
 800a724:	d3e6      	bcc.n	800a6f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a726:	8bfb      	ldrh	r3, [r7, #30]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01e      	beq.n	800a76a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a736:	461a      	mov	r2, r3
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	6812      	ldr	r2, [r2, #0]
 800a73e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	fa22 f303 	lsr.w	r3, r2, r3
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	701a      	strb	r2, [r3, #0]
      i++;
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	3301      	adds	r3, #1
 800a756:	623b      	str	r3, [r7, #32]
      pDest++;
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	3301      	adds	r3, #1
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a75e:	8bfb      	ldrh	r3, [r7, #30]
 800a760:	3b01      	subs	r3, #1
 800a762:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a764:	8bfb      	ldrh	r3, [r7, #30]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1ea      	bne.n	800a740 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	372c      	adds	r7, #44	; 0x2c
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7a6:	f043 0302 	orr.w	r3, r3, #2
 800a7aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	4013      	ands	r3, r2
 800a802:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	0c1b      	lsrs	r3, r3, #16
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	4013      	ands	r3, r2
 800a836:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	b29b      	uxth	r3, r3
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	4013      	ands	r3, r2
 800a874:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a876:	68bb      	ldr	r3, [r7, #8]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	f003 030f 	and.w	r3, r3, #15
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b4:	01db      	lsls	r3, r3, #7
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a916:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a91a:	f023 0307 	bic.w	r3, r3, #7
 800a91e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a92e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	460b      	mov	r3, r1
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	333c      	adds	r3, #60	; 0x3c
 800a95a:	3304      	adds	r3, #4
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4a26      	ldr	r2, [pc, #152]	; (800a9fc <USB_EP0_OutStart+0xb8>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d90a      	bls.n	800a97e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a978:	d101      	bne.n	800a97e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e037      	b.n	800a9ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a984:	461a      	mov	r2, r3
 800a986:	2300      	movs	r3, #0
 800a988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a99c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ac:	f043 0318 	orr.w	r3, r3, #24
 800a9b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a9c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9c6:	7afb      	ldrb	r3, [r7, #11]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d10f      	bne.n	800a9ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a9ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	4f54300a 	.word	0x4f54300a

0800aa00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4a13      	ldr	r2, [pc, #76]	; (800aa64 <USB_CoreReset+0x64>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e01b      	b.n	800aa56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	daf2      	bge.n	800aa0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	f043 0201 	orr.w	r2, r3, #1
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <USB_CoreReset+0x64>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d901      	bls.n	800aa48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e006      	b.n	800aa56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d0f0      	beq.n	800aa36 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	00030d40 	.word	0x00030d40

0800aa68 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b096      	sub	sp, #88	; 0x58
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3303      	adds	r3, #3
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa80:	f3ef 8310 	mrs	r3, PRIMASK
 800aa84:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800aa88:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa8a:	b672      	cpsid	i
#endif
    return(int_posture);
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800aa8e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800aa90:	4b55      	ldr	r3, [pc, #340]	; (800abe8 <_tx_byte_allocate+0x180>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa9e:	621a      	str	r2, [r3, #32]
 800aaa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	f383 8810 	msr	PRIMASK, r3
}
 800aaaa:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f9b2 	bl	800ae18 <_tx_byte_pool_search>
 800aab4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aab6:	f3ef 8310 	mrs	r3, PRIMASK
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800aac0:	b672      	cpsid	i
    return(int_posture);
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800aac4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800aac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800aacc:	2301      	movs	r3, #1
 800aace:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aad0:	e006      	b.n	800aae0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad8:	429a      	cmp	r2, r3
 800aada:	d101      	bne.n	800aae0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800aadc:	2301      	movs	r3, #1
 800aade:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800aae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0d9      	beq.n	800aa9a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaea:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800aaec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d008      	beq.n	800ab04 <_tx_byte_allocate+0x9c>
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaf6:	6a3b      	ldr	r3, [r7, #32]
 800aaf8:	f383 8810 	msr	PRIMASK, r3
}
 800aafc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800aafe:	2300      	movs	r3, #0
 800ab00:	653b      	str	r3, [r7, #80]	; 0x50
 800ab02:	e06c      	b.n	800abde <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d061      	beq.n	800abce <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ab0a:	4b38      	ldr	r3, [pc, #224]	; (800abec <_tx_byte_allocate+0x184>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800ab12:	2310      	movs	r3, #16
 800ab14:	653b      	str	r3, [r7, #80]	; 0x50
 800ab16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab18:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	f383 8810 	msr	PRIMASK, r3
}
 800ab20:	e05d      	b.n	800abde <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ab22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab24:	4a32      	ldr	r2, [pc, #200]	; (800abf0 <_tx_byte_allocate+0x188>)
 800ab26:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ab28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ab2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ab34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ab3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ab58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab62:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ab64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab68:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ab6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab6e:	675a      	str	r2, [r3, #116]	; 0x74
 800ab70:	e011      	b.n	800ab96 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ab78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab7c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab82:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ab84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab88:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab8e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab94:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ab96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab98:	2209      	movs	r2, #9
 800ab9a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ab9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9e:	2201      	movs	r2, #1
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800aba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800aba8:	4b10      	ldr	r3, [pc, #64]	; (800abec <_tx_byte_allocate+0x184>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a0f      	ldr	r2, [pc, #60]	; (800abec <_tx_byte_allocate+0x184>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	f383 8810 	msr	PRIMASK, r3
}
 800abbc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800abbe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800abc0:	f001 fb02 	bl	800c1c8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800abc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abca:	653b      	str	r3, [r7, #80]	; 0x50
 800abcc:	e007      	b.n	800abde <_tx_byte_allocate+0x176>
 800abce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f383 8810 	msr	PRIMASK, r3
}
 800abd8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800abda:	2310      	movs	r3, #16
 800abdc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800abde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3758      	adds	r7, #88	; 0x58
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	2004cd44 	.word	0x2004cd44
 800abec:	2004cddc 	.word	0x2004cddc
 800abf0:	0800abf5 	.word	0x0800abf5

0800abf4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08e      	sub	sp, #56	; 0x38
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abfe:	f3ef 8310 	mrs	r3, PRIMASK
 800ac02:	623b      	str	r3, [r7, #32]
    return(posture);
 800ac04:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ac06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ac08:	b672      	cpsid	i
    return(int_posture);
 800ac0a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800ac0c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac12:	4a33      	ldr	r2, [pc, #204]	; (800ace0 <_tx_byte_pool_cleanup+0xec>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d158      	bne.n	800acca <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d152      	bne.n	800acca <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac28:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d04c      	beq.n	800acca <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a2b      	ldr	r2, [pc, #172]	; (800ace4 <_tx_byte_pool_cleanup+0xf0>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d147      	bne.n	800acca <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d043      	beq.n	800acca <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	1e5a      	subs	r2, r3, #1
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac56:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	2200      	movs	r2, #0
 800ac62:	625a      	str	r2, [r3, #36]	; 0x24
 800ac64:	e013      	b.n	800ac8e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac7c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d102      	bne.n	800ac8e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac8c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac92:	2b09      	cmp	r3, #9
 800ac94:	d119      	bne.n	800acca <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2210      	movs	r2, #16
 800ac9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ac9e:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <_tx_byte_pool_cleanup+0xf4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3301      	adds	r3, #1
 800aca4:	4a10      	ldr	r2, [pc, #64]	; (800ace8 <_tx_byte_pool_cleanup+0xf4>)
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f383 8810 	msr	PRIMASK, r3
}
 800acb2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f001 f987 	bl	800bfc8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acba:	f3ef 8310 	mrs	r3, PRIMASK
 800acbe:	61bb      	str	r3, [r7, #24]
    return(posture);
 800acc0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800acc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800acc4:	b672      	cpsid	i
    return(int_posture);
 800acc6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800acc8:	637b      	str	r3, [r7, #52]	; 0x34
 800acca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800accc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f383 8810 	msr	PRIMASK, r3
}
 800acd4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800acd6:	bf00      	nop
 800acd8:	3738      	adds	r7, #56	; 0x38
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	0800abf5 	.word	0x0800abf5
 800ace4:	42595445 	.word	0x42595445
 800ace8:	2004cddc 	.word	0x2004cddc

0800acec <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	; 0x38
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800acfa:	2234      	movs	r2, #52	; 0x34
 800acfc:	2100      	movs	r1, #0
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f01b facc 	bl	802629c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	f1a3 0208 	sub.w	r2, r3, #8
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2202      	movs	r2, #2
 800ad38:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ad3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	3b04      	subs	r3, #4
 800ad4a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ad50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad58:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	3b04      	subs	r3, #4
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad76:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	3304      	adds	r3, #4
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ad82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <_tx_byte_pool_create+0x11c>)
 800ad8a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad92:	f3ef 8310 	mrs	r3, PRIMASK
 800ad96:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ad98:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ad9a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad9c:	b672      	cpsid	i
    return(int_posture);
 800ad9e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <_tx_byte_pool_create+0x120>)
 800ada6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ada8:	4b19      	ldr	r3, [pc, #100]	; (800ae10 <_tx_byte_pool_create+0x124>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800adb0:	4a18      	ldr	r2, [pc, #96]	; (800ae14 <_tx_byte_pool_create+0x128>)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	631a      	str	r2, [r3, #48]	; 0x30
 800adc2:	e011      	b.n	800ade8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800adc4:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <_tx_byte_pool_create+0x128>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	69fa      	ldr	r2, [r7, #28]
 800ade0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6a3a      	ldr	r2, [r7, #32]
 800ade6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ade8:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <_tx_byte_pool_create+0x124>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	4a08      	ldr	r2, [pc, #32]	; (800ae10 <_tx_byte_pool_create+0x124>)
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f383 8810 	msr	PRIMASK, r3
}
 800adfc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3738      	adds	r7, #56	; 0x38
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	ffffeeee 	.word	0xffffeeee
 800ae0c:	42595445 	.word	0x42595445
 800ae10:	2004cd38 	.word	0x2004cd38
 800ae14:	2004cd34 	.word	0x2004cd34

0800ae18 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b097      	sub	sp, #92	; 0x5c
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae26:	f3ef 8310 	mrs	r3, PRIMASK
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ae2e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae30:	b672      	cpsid	i
    return(int_posture);
 800ae32:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ae34:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689a      	ldr	r2, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	3b02      	subs	r3, #2
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	4413      	add	r3, r2
 800ae44:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d308      	bcc.n	800ae60 <_tx_byte_pool_search+0x48>
 800ae4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae50:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	f383 8810 	msr	PRIMASK, r3
}
 800ae58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae5e:	e0dd      	b.n	800b01c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ae60:	4b72      	ldr	r3, [pc, #456]	; (800b02c <_tx_byte_pool_search+0x214>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae6a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ae7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae80:	3304      	adds	r3, #4
 800ae82:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a68      	ldr	r2, [pc, #416]	; (800b030 <_tx_byte_pool_search+0x218>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d143      	bne.n	800af1a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ae92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae9c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea4:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800aeac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800aeb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb6:	3b08      	subs	r3, #8
 800aeb8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800aeba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d257      	bcs.n	800af72 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800aec2:	2300      	movs	r3, #0
 800aec4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec8:	3304      	adds	r3, #4
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800aed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a56      	ldr	r2, [pc, #344]	; (800b030 <_tx_byte_pool_search+0x218>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d113      	bne.n	800af02 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	1e5a      	subs	r2, r3, #1
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d114      	bne.n	800af24 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aefe:	615a      	str	r2, [r3, #20]
 800af00:	e010      	b.n	800af24 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800af0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d008      	beq.n	800af24 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800af12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af14:	3b01      	subs	r3, #1
 800af16:	64bb      	str	r3, [r7, #72]	; 0x48
 800af18:	e004      	b.n	800af24 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800af1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800af24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af26:	2b00      	cmp	r3, #0
 800af28:	d002      	beq.n	800af30 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800af2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af2c:	3b01      	subs	r3, #1
 800af2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800af30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f383 8810 	msr	PRIMASK, r3
}
 800af3a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af3c:	f3ef 8310 	mrs	r3, PRIMASK
 800af40:	61bb      	str	r3, [r7, #24]
    return(posture);
 800af42:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800af44:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800af46:	b672      	cpsid	i
    return(int_posture);
 800af48:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800af4a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af52:	429a      	cmp	r2, r3
 800af54:	d009      	beq.n	800af6a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	3301      	adds	r3, #1
 800af62:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af68:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800af6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d186      	bne.n	800ae7e <_tx_byte_pool_search+0x66>
 800af70:	e000      	b.n	800af74 <_tx_byte_pool_search+0x15c>
                    break;
 800af72:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800af74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d048      	beq.n	800b00c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800af7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	2b13      	cmp	r3, #19
 800af82:	d91e      	bls.n	800afc2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af8a:	4413      	add	r3, r2
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800af92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af94:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	3304      	adds	r3, #4
 800afa2:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800afa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afaa:	4a21      	ldr	r2, [pc, #132]	; (800b030 <_tx_byte_pool_search+0x218>)
 800afac:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afbc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800afc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afc4:	3304      	adds	r3, #4
 800afc6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	f1a3 0208 	sub.w	r2, r3, #8
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afe8:	429a      	cmp	r2, r3
 800afea:	d105      	bne.n	800aff8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800afec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afee:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	615a      	str	r2, [r3, #20]
 800aff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800affa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f383 8810 	msr	PRIMASK, r3
}
 800b002:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b006:	3308      	adds	r3, #8
 800b008:	653b      	str	r3, [r7, #80]	; 0x50
 800b00a:	e007      	b.n	800b01c <_tx_byte_pool_search+0x204>
 800b00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b00e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f383 8810 	msr	PRIMASK, r3
}
 800b016:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b01e:	4618      	mov	r0, r3
 800b020:	375c      	adds	r7, #92	; 0x5c
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	2004cd44 	.word	0x2004cd44
 800b030:	ffffeeee 	.word	0xffffeeee

0800b034 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b038:	f000 ff04 	bl	800be44 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b03c:	f001 fb1c 	bl	800c678 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b040:	4b12      	ldr	r3, [pc, #72]	; (800b08c <_tx_initialize_high_level+0x58>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	4b12      	ldr	r3, [pc, #72]	; (800b090 <_tx_initialize_high_level+0x5c>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b04c:	4b11      	ldr	r3, [pc, #68]	; (800b094 <_tx_initialize_high_level+0x60>)
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	4b11      	ldr	r3, [pc, #68]	; (800b098 <_tx_initialize_high_level+0x64>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b058:	4b10      	ldr	r3, [pc, #64]	; (800b09c <_tx_initialize_high_level+0x68>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <_tx_initialize_high_level+0x6c>)
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b064:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <_tx_initialize_high_level+0x70>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <_tx_initialize_high_level+0x74>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b070:	4b0e      	ldr	r3, [pc, #56]	; (800b0ac <_tx_initialize_high_level+0x78>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <_tx_initialize_high_level+0x7c>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b07c:	4b0d      	ldr	r3, [pc, #52]	; (800b0b4 <_tx_initialize_high_level+0x80>)
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <_tx_initialize_high_level+0x84>)
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
#endif
}
 800b088:	bf00      	nop
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	2004cd0c 	.word	0x2004cd0c
 800b090:	2004cd10 	.word	0x2004cd10
 800b094:	2004cd14 	.word	0x2004cd14
 800b098:	2004cd18 	.word	0x2004cd18
 800b09c:	2004cd1c 	.word	0x2004cd1c
 800b0a0:	2004cd20 	.word	0x2004cd20
 800b0a4:	2004cd2c 	.word	0x2004cd2c
 800b0a8:	2004cd30 	.word	0x2004cd30
 800b0ac:	2004cd34 	.word	0x2004cd34
 800b0b0:	2004cd38 	.word	0x2004cd38
 800b0b4:	2004cd24 	.word	0x2004cd24
 800b0b8:	2004cd28 	.word	0x2004cd28

0800b0bc <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b0c0:	4b10      	ldr	r3, [pc, #64]	; (800b104 <_tx_initialize_kernel_enter+0x48>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b0c8:	d00c      	beq.n	800b0e4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b0ca:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <_tx_initialize_kernel_enter+0x48>)
 800b0cc:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b0d0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b0d2:	f7f5 f8cf 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b0d6:	f7ff ffad 	bl	800b034 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b0da:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <_tx_initialize_kernel_enter+0x4c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	4a09      	ldr	r2, [pc, #36]	; (800b108 <_tx_initialize_kernel_enter+0x4c>)
 800b0e2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <_tx_initialize_kernel_enter+0x48>)
 800b0e6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b0ea:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b0ec:	4b07      	ldr	r3, [pc, #28]	; (800b10c <_tx_initialize_kernel_enter+0x50>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f5 fb6d 	bl	80007d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b0f6:	4b03      	ldr	r3, [pc, #12]	; (800b104 <_tx_initialize_kernel_enter+0x48>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b0fc:	f7f5 f8f6 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b100:	bf00      	nop
 800b102:	bd80      	pop	{r7, pc}
 800b104:	20025814 	.word	0x20025814
 800b108:	2004cddc 	.word	0x2004cddc
 800b10c:	2004cd3c 	.word	0x2004cd3c

0800b110 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b08e      	sub	sp, #56	; 0x38
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b11a:	f3ef 8310 	mrs	r3, PRIMASK
 800b11e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b120:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b122:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b124:	b672      	cpsid	i
    return(int_posture);
 800b126:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b128:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b12e:	4a37      	ldr	r2, [pc, #220]	; (800b20c <_tx_queue_cleanup+0xfc>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d161      	bne.n	800b1f8 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d15b      	bne.n	800b1f8 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b144:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d055      	beq.n	800b1f8 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a2f      	ldr	r2, [pc, #188]	; (800b210 <_tx_queue_cleanup+0x100>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d150      	bne.n	800b1f8 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d04c      	beq.n	800b1f8 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b168:	1e5a      	subs	r2, r3, #1
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	2200      	movs	r2, #0
 800b17e:	629a      	str	r2, [r3, #40]	; 0x28
 800b180:	e013      	b.n	800b1aa <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b186:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b18c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b192:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b198:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d102      	bne.n	800b1aa <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a8:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d122      	bne.n	800b1f8 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	220b      	movs	r2, #11
 800b1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b1c2:	e003      	b.n	800b1cc <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	220a      	movs	r2, #10
 800b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b1cc:	4b11      	ldr	r3, [pc, #68]	; (800b214 <_tx_queue_cleanup+0x104>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	4a10      	ldr	r2, [pc, #64]	; (800b214 <_tx_queue_cleanup+0x104>)
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f383 8810 	msr	PRIMASK, r3
}
 800b1e0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fef0 	bl	800bfc8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ec:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b1ee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b1f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1f2:	b672      	cpsid	i
    return(int_posture);
 800b1f4:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b1f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f383 8810 	msr	PRIMASK, r3
}
 800b202:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b204:	bf00      	nop
 800b206:	3738      	adds	r7, #56	; 0x38
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	0800b111 	.word	0x0800b111
 800b210:	51554555 	.word	0x51554555
 800b214:	2004cddc 	.word	0x2004cddc

0800b218 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08c      	sub	sp, #48	; 0x30
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b226:	2238      	movs	r2, #56	; 0x38
 800b228:	2100      	movs	r1, #0
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f01b f836 	bl	802629c <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b242:	fbb2 f3f3 	udiv	r3, r2, r3
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	fb02 f303 	mul.w	r3, r2, r3
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	699a      	ldr	r2, [r3, #24]
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	441a      	add	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b276:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b27c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b27e:	f3ef 8310 	mrs	r3, PRIMASK
 800b282:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b284:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b286:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b288:	b672      	cpsid	i
    return(int_posture);
 800b28a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <_tx_queue_create+0xdc>)
 800b292:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b294:	4b18      	ldr	r3, [pc, #96]	; (800b2f8 <_tx_queue_create+0xe0>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b29c:	4a17      	ldr	r2, [pc, #92]	; (800b2fc <_tx_queue_create+0xe4>)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	635a      	str	r2, [r3, #52]	; 0x34
 800b2ae:	e011      	b.n	800b2d4 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b2b0:	4b12      	ldr	r3, [pc, #72]	; (800b2fc <_tx_queue_create+0xe4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ba:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	69fa      	ldr	r2, [r7, #28]
 800b2cc:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a3a      	ldr	r2, [r7, #32]
 800b2d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b2d4:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <_tx_queue_create+0xe0>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	4a07      	ldr	r2, [pc, #28]	; (800b2f8 <_tx_queue_create+0xe0>)
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f383 8810 	msr	PRIMASK, r3
}
 800b2e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3730      	adds	r7, #48	; 0x30
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	51554555 	.word	0x51554555
 800b2f8:	2004cd18 	.word	0x2004cd18
 800b2fc:	2004cd14 	.word	0x2004cd14

0800b300 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b096      	sub	sp, #88	; 0x58
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b30c:	2300      	movs	r3, #0
 800b30e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b310:	f3ef 8310 	mrs	r3, PRIMASK
 800b314:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b318:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b31a:	b672      	cpsid	i
    return(int_posture);
 800b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b31e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 8136 	beq.w	800b59c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d13c      	bne.n	800b3b0 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b348:	1d13      	adds	r3, r2, #4
 800b34a:	657b      	str	r3, [r7, #84]	; 0x54
 800b34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b34e:	1d19      	adds	r1, r3, #4
 800b350:	6539      	str	r1, [r7, #80]	; 0x50
 800b352:	6812      	ldr	r2, [r2, #0]
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d90e      	bls.n	800b37a <_tx_queue_receive+0x7a>
 800b35c:	e007      	b.n	800b36e <_tx_queue_receive+0x6e>
 800b35e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b360:	1d13      	adds	r3, r2, #4
 800b362:	657b      	str	r3, [r7, #84]	; 0x54
 800b364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b366:	1d19      	adds	r1, r3, #4
 800b368:	6539      	str	r1, [r7, #80]	; 0x50
 800b36a:	6812      	ldr	r2, [r2, #0]
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b370:	3b01      	subs	r3, #1
 800b372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1f1      	bne.n	800b35e <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b380:	429a      	cmp	r2, r3
 800b382:	d102      	bne.n	800b38a <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b38e:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	1e5a      	subs	r2, r3, #1
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	611a      	str	r2, [r3, #16]
 800b3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	f383 8810 	msr	PRIMASK, r3
}
 800b3ae:	e163      	b.n	800b678 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d153      	bne.n	800b468 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c4:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b3d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3d2:	1d13      	adds	r3, r2, #4
 800b3d4:	657b      	str	r3, [r7, #84]	; 0x54
 800b3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	6539      	str	r1, [r7, #80]	; 0x50
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d90e      	bls.n	800b404 <_tx_queue_receive+0x104>
 800b3e6:	e007      	b.n	800b3f8 <_tx_queue_receive+0xf8>
 800b3e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3ea:	1d13      	adds	r3, r2, #4
 800b3ec:	657b      	str	r3, [r7, #84]	; 0x54
 800b3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f0:	1d19      	adds	r1, r3, #4
 800b3f2:	6539      	str	r1, [r7, #80]	; 0x50
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	601a      	str	r2, [r3, #0]
 800b3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1f1      	bne.n	800b3e8 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b406:	3b01      	subs	r3, #1
 800b408:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d103      	bne.n	800b418 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	629a      	str	r2, [r3, #40]	; 0x28
 800b416:	e00e      	b.n	800b436 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b422:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b42e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b434:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b43a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43e:	2200      	movs	r2, #0
 800b440:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b44a:	4b8e      	ldr	r3, [pc, #568]	; (800b684 <_tx_queue_receive+0x384>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	4a8c      	ldr	r2, [pc, #560]	; (800b684 <_tx_queue_receive+0x384>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	f383 8810 	msr	PRIMASK, r3
}
 800b45e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b462:	f000 fdb1 	bl	800bfc8 <_tx_thread_system_resume>
 800b466:	e107      	b.n	800b678 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b47a:	1d13      	adds	r3, r2, #4
 800b47c:	657b      	str	r3, [r7, #84]	; 0x54
 800b47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b480:	1d19      	adds	r1, r3, #4
 800b482:	6539      	str	r1, [r7, #80]	; 0x50
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d90e      	bls.n	800b4ac <_tx_queue_receive+0x1ac>
 800b48e:	e007      	b.n	800b4a0 <_tx_queue_receive+0x1a0>
 800b490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b492:	1d13      	adds	r3, r2, #4
 800b494:	657b      	str	r3, [r7, #84]	; 0x54
 800b496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b498:	1d19      	adds	r1, r3, #4
 800b49a:	6539      	str	r1, [r7, #80]	; 0x50
 800b49c:	6812      	ldr	r2, [r2, #0]
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f1      	bne.n	800b490 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d102      	bne.n	800b4bc <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4c0:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4c2:	4b70      	ldr	r3, [pc, #448]	; (800b684 <_tx_queue_receive+0x384>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	4a6e      	ldr	r2, [pc, #440]	; (800b684 <_tx_queue_receive+0x384>)
 800b4ca:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800b4cc:	4b6d      	ldr	r3, [pc, #436]	; (800b684 <_tx_queue_receive+0x384>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	4a6c      	ldr	r2, [pc, #432]	; (800b684 <_tx_queue_receive+0x384>)
 800b4d4:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4da:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b4e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4ea:	1d13      	adds	r3, r2, #4
 800b4ec:	657b      	str	r3, [r7, #84]	; 0x54
 800b4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f0:	1d19      	adds	r1, r3, #4
 800b4f2:	6539      	str	r1, [r7, #80]	; 0x50
 800b4f4:	6812      	ldr	r2, [r2, #0]
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d90e      	bls.n	800b51c <_tx_queue_receive+0x21c>
 800b4fe:	e007      	b.n	800b510 <_tx_queue_receive+0x210>
 800b500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b502:	1d13      	adds	r3, r2, #4
 800b504:	657b      	str	r3, [r7, #84]	; 0x54
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	1d19      	adds	r1, r3, #4
 800b50a:	6539      	str	r1, [r7, #80]	; 0x50
 800b50c:	6812      	ldr	r2, [r2, #0]
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b512:	3b01      	subs	r3, #1
 800b514:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1f1      	bne.n	800b500 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b522:	429a      	cmp	r2, r3
 800b524:	d102      	bne.n	800b52c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b530:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800b538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53a:	3b01      	subs	r3, #1
 800b53c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	629a      	str	r2, [r3, #40]	; 0x28
 800b54a:	e00e      	b.n	800b56a <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b550:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b556:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b562:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b568:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b56e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	2200      	movs	r2, #0
 800b574:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b578:	2200      	movs	r2, #0
 800b57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b57e:	4b41      	ldr	r3, [pc, #260]	; (800b684 <_tx_queue_receive+0x384>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	4a3f      	ldr	r2, [pc, #252]	; (800b684 <_tx_queue_receive+0x384>)
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b58a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	f383 8810 	msr	PRIMASK, r3
}
 800b592:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800b594:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b596:	f000 fd17 	bl	800bfc8 <_tx_thread_system_resume>
 800b59a:	e06d      	b.n	800b678 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d062      	beq.n	800b668 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b5a2:	4b38      	ldr	r3, [pc, #224]	; (800b684 <_tx_queue_receive+0x384>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d008      	beq.n	800b5bc <_tx_queue_receive+0x2bc>
 800b5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	f383 8810 	msr	PRIMASK, r3
}
 800b5b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800b5b6:	230a      	movs	r3, #10
 800b5b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ba:	e05d      	b.n	800b678 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b5bc:	4b32      	ldr	r3, [pc, #200]	; (800b688 <_tx_queue_receive+0x388>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800b5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c4:	4a31      	ldr	r2, [pc, #196]	; (800b68c <_tx_queue_receive+0x38c>)
 800b5c6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800b5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800b5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d109      	bne.n	800b604 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5f4:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5fa:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b600:	675a      	str	r2, [r3, #116]	; 0x74
 800b602:	e011      	b.n	800b628 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b608:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b60e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b614:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b61a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b620:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b626:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800b628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800b630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b632:	2205      	movs	r2, #5
 800b634:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b638:	2201      	movs	r2, #1
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b642:	4b10      	ldr	r3, [pc, #64]	; (800b684 <_tx_queue_receive+0x384>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3301      	adds	r3, #1
 800b648:	4a0e      	ldr	r2, [pc, #56]	; (800b684 <_tx_queue_receive+0x384>)
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b64e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	f383 8810 	msr	PRIMASK, r3
}
 800b656:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b658:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b65a:	f000 fdb5 	bl	800c1c8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b664:	64bb      	str	r3, [r7, #72]	; 0x48
 800b666:	e007      	b.n	800b678 <_tx_queue_receive+0x378>
 800b668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f383 8810 	msr	PRIMASK, r3
}
 800b672:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800b674:	230a      	movs	r3, #10
 800b676:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 800b678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3758      	adds	r7, #88	; 0x58
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	2004cddc 	.word	0x2004cddc
 800b688:	2004cd44 	.word	0x2004cd44
 800b68c:	0800b111 	.word	0x0800b111

0800b690 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b094      	sub	sp, #80	; 0x50
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b69c:	2300      	movs	r3, #0
 800b69e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6aa:	b672      	cpsid	i
    return(int_posture);
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 809b 	beq.w	800b7f6 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d13c      	bne.n	800b740 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	1e5a      	subs	r2, r3, #1
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b6ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6ec:	1d13      	adds	r3, r2, #4
 800b6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f2:	1d19      	adds	r1, r3, #4
 800b6f4:	64b9      	str	r1, [r7, #72]	; 0x48
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d90e      	bls.n	800b71e <_tx_queue_send+0x8e>
 800b700:	e007      	b.n	800b712 <_tx_queue_send+0x82>
 800b702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b704:	1d13      	adds	r3, r2, #4
 800b706:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70a:	1d19      	adds	r1, r3, #4
 800b70c:	64b9      	str	r1, [r7, #72]	; 0x48
 800b70e:	6812      	ldr	r2, [r2, #0]
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b714:	3b01      	subs	r3, #1
 800b716:	647b      	str	r3, [r7, #68]	; 0x44
 800b718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1f1      	bne.n	800b702 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b724:	429a      	cmp	r2, r3
 800b726:	d102      	bne.n	800b72e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b732:	625a      	str	r2, [r3, #36]	; 0x24
 800b734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b736:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	f383 8810 	msr	PRIMASK, r3
}
 800b73e:	e0c8      	b.n	800b8d2 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	3b01      	subs	r3, #1
 800b74a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d103      	bne.n	800b75a <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	629a      	str	r2, [r3, #40]	; 0x28
 800b758:	e012      	b.n	800b780 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800b75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800b762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b766:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b772:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b778:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b784:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b788:	2200      	movs	r2, #0
 800b78a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b794:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b79c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b79e:	1d13      	adds	r3, r2, #4
 800b7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a4:	1d19      	adds	r1, r3, #4
 800b7a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d90e      	bls.n	800b7d0 <_tx_queue_send+0x140>
 800b7b2:	e007      	b.n	800b7c4 <_tx_queue_send+0x134>
 800b7b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7b6:	1d13      	adds	r3, r2, #4
 800b7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7bc:	1d19      	adds	r1, r3, #4
 800b7be:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7c0:	6812      	ldr	r2, [r2, #0]
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f1      	bne.n	800b7b4 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b7d8:	4b40      	ldr	r3, [pc, #256]	; (800b8dc <_tx_queue_send+0x24c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	4a3f      	ldr	r2, [pc, #252]	; (800b8dc <_tx_queue_send+0x24c>)
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	f383 8810 	msr	PRIMASK, r3
}
 800b7ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800b7ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7f0:	f000 fbea 	bl	800bfc8 <_tx_thread_system_resume>
 800b7f4:	e06d      	b.n	800b8d2 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d062      	beq.n	800b8c2 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b7fc:	4b37      	ldr	r3, [pc, #220]	; (800b8dc <_tx_queue_send+0x24c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d008      	beq.n	800b816 <_tx_queue_send+0x186>
 800b804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b806:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	f383 8810 	msr	PRIMASK, r3
}
 800b80e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800b810:	230b      	movs	r3, #11
 800b812:	643b      	str	r3, [r7, #64]	; 0x40
 800b814:	e05d      	b.n	800b8d2 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b816:	4b32      	ldr	r3, [pc, #200]	; (800b8e0 <_tx_queue_send+0x250>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	4a31      	ldr	r2, [pc, #196]	; (800b8e4 <_tx_queue_send+0x254>)
 800b820:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800b828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800b82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b830:	2200      	movs	r2, #0
 800b832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	d109      	bne.n	800b85e <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84e:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b854:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85a:	675a      	str	r2, [r3, #116]	; 0x74
 800b85c:	e011      	b.n	800b882 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b862:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b868:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86e:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b874:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b87a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b880:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	2205      	movs	r2, #5
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b892:	2201      	movs	r2, #1
 800b894:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b89c:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <_tx_queue_send+0x24c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	4a0e      	ldr	r2, [pc, #56]	; (800b8dc <_tx_queue_send+0x24c>)
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f383 8810 	msr	PRIMASK, r3
}
 800b8b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b8b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8b4:	f000 fc88 	bl	800c1c8 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8be:	643b      	str	r3, [r7, #64]	; 0x40
 800b8c0:	e007      	b.n	800b8d2 <_tx_queue_send+0x242>
 800b8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f383 8810 	msr	PRIMASK, r3
}
 800b8cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800b8ce:	230b      	movs	r3, #11
 800b8d0:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800b8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3750      	adds	r7, #80	; 0x50
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	2004cddc 	.word	0x2004cddc
 800b8e0:	2004cd44 	.word	0x2004cd44
 800b8e4:	0800b111 	.word	0x0800b111

0800b8e8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08e      	sub	sp, #56	; 0x38
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f6:	623b      	str	r3, [r7, #32]
    return(posture);
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b8fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b8fc:	b672      	cpsid	i
    return(int_posture);
 800b8fe:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b900:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b906:	4a33      	ldr	r2, [pc, #204]	; (800b9d4 <_tx_semaphore_cleanup+0xec>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d158      	bne.n	800b9be <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d152      	bne.n	800b9be <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	2b00      	cmp	r3, #0
 800b922:	d04c      	beq.n	800b9be <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a2b      	ldr	r2, [pc, #172]	; (800b9d8 <_tx_semaphore_cleanup+0xf0>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d147      	bne.n	800b9be <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d043      	beq.n	800b9be <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	1e5a      	subs	r2, r3, #1
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d103      	bne.n	800b95a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	2200      	movs	r2, #0
 800b956:	60da      	str	r2, [r3, #12]
 800b958:	e013      	b.n	800b982 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b970:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d102      	bne.n	800b982 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b980:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b986:	2b06      	cmp	r3, #6
 800b988:	d119      	bne.n	800b9be <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	220d      	movs	r2, #13
 800b98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b992:	4b12      	ldr	r3, [pc, #72]	; (800b9dc <_tx_semaphore_cleanup+0xf4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	4a10      	ldr	r2, [pc, #64]	; (800b9dc <_tx_semaphore_cleanup+0xf4>)
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f383 8810 	msr	PRIMASK, r3
}
 800b9a6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fb0d 	bl	800bfc8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b9b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b9b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9b8:	b672      	cpsid	i
    return(int_posture);
 800b9ba:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b9bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f383 8810 	msr	PRIMASK, r3
}
 800b9c8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b9ca:	bf00      	nop
 800b9cc:	3738      	adds	r7, #56	; 0x38
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	0800b8e9 	.word	0x0800b8e9
 800b9d8:	53454d41 	.word	0x53454d41
 800b9dc:	2004cddc 	.word	0x2004cddc

0800b9e0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b9ec:	221c      	movs	r2, #28
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f01a fc53 	bl	802629c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba02:	f3ef 8310 	mrs	r3, PRIMASK
 800ba06:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba08:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba0c:	b672      	cpsid	i
    return(int_posture);
 800ba0e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800ba10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4a18      	ldr	r2, [pc, #96]	; (800ba78 <_tx_semaphore_create+0x98>)
 800ba16:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800ba18:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <_tx_semaphore_create+0x9c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800ba20:	4a17      	ldr	r2, [pc, #92]	; (800ba80 <_tx_semaphore_create+0xa0>)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	619a      	str	r2, [r3, #24]
 800ba32:	e011      	b.n	800ba58 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800ba34:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <_tx_semaphore_create+0xa0>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a3a      	ldr	r2, [r7, #32]
 800ba56:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ba58:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <_tx_semaphore_create+0x9c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	4a07      	ldr	r2, [pc, #28]	; (800ba7c <_tx_semaphore_create+0x9c>)
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	f383 8810 	msr	PRIMASK, r3
}
 800ba6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3728      	adds	r7, #40	; 0x28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	53454d41 	.word	0x53454d41
 800ba7c:	2004cd10 	.word	0x2004cd10
 800ba80:	2004cd0c 	.word	0x2004cd0c

0800ba84 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08e      	sub	sp, #56	; 0x38
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba92:	f3ef 8310 	mrs	r3, PRIMASK
 800ba96:	623b      	str	r3, [r7, #32]
    return(posture);
 800ba98:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ba9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba9c:	b672      	cpsid	i
    return(int_posture);
 800ba9e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800baa0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	1e5a      	subs	r2, r3, #1
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	f383 8810 	msr	PRIMASK, r3
}
 800babe:	e068      	b.n	800bb92 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d05d      	beq.n	800bb82 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bac6:	4b35      	ldr	r3, [pc, #212]	; (800bb9c <_tx_semaphore_get+0x118>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d008      	beq.n	800bae0 <_tx_semaphore_get+0x5c>
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f383 8810 	msr	PRIMASK, r3
}
 800bad8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800bada:	230d      	movs	r3, #13
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	e058      	b.n	800bb92 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bae0:	4b2f      	ldr	r3, [pc, #188]	; (800bba0 <_tx_semaphore_get+0x11c>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	4a2e      	ldr	r2, [pc, #184]	; (800bba4 <_tx_semaphore_get+0x120>)
 800baea:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb0c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb12:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb18:	675a      	str	r2, [r3, #116]	; 0x74
 800bb1a:	e011      	b.n	800bb40 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb26:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb32:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb38:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb3e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	2206      	movs	r2, #6
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	2201      	movs	r2, #1
 800bb54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <_tx_semaphore_get+0x118>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a0e      	ldr	r2, [pc, #56]	; (800bb9c <_tx_semaphore_get+0x118>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f383 8810 	msr	PRIMASK, r3
}
 800bb70:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bb72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb74:	f000 fb28 	bl	800c1c8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb80:	e007      	b.n	800bb92 <_tx_semaphore_get+0x10e>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f383 8810 	msr	PRIMASK, r3
}
 800bb8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800bb8e:	230d      	movs	r3, #13
 800bb90:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3738      	adds	r7, #56	; 0x38
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	2004cddc 	.word	0x2004cddc
 800bba0:	2004cd44 	.word	0x2004cd44
 800bba4:	0800b8e9 	.word	0x0800b8e9

0800bba8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08c      	sub	sp, #48	; 0x30
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbb4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bbb6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bbb8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbba:	b672      	cpsid	i
    return(int_posture);
 800bbbc:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10a      	bne.n	800bbe2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	609a      	str	r2, [r3, #8]
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f383 8810 	msr	PRIMASK, r3
}
 800bbe0:	e033      	b.n	800bc4a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	3b01      	subs	r3, #1
 800bbec:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	60da      	str	r2, [r3, #12]
 800bbfa:	e00e      	b.n	800bc1a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc00:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a3a      	ldr	r2, [r7, #32]
 800bc06:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc0c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	69fa      	ldr	r2, [r7, #28]
 800bc12:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	6a3a      	ldr	r2, [r7, #32]
 800bc18:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc1e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	2200      	movs	r2, #0
 800bc24:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800bc2e:	4b09      	ldr	r3, [pc, #36]	; (800bc54 <_tx_semaphore_put+0xac>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	4a07      	ldr	r2, [pc, #28]	; (800bc54 <_tx_semaphore_put+0xac>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f383 8810 	msr	PRIMASK, r3
}
 800bc42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bc44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc46:	f000 f9bf 	bl	800bfc8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	; 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	2004cddc 	.word	0x2004cddc

0800bc58 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b092      	sub	sp, #72	; 0x48
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800bc66:	2300      	movs	r3, #0
 800bc68:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800bc6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc6c:	21ef      	movs	r1, #239	; 0xef
 800bc6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bc70:	f01a fb14 	bl	802629c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800bc74:	22b0      	movs	r2, #176	; 0xb0
 800bc76:	2100      	movs	r1, #0
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f01a fb0f 	bl	802629c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc94:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc9a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bca0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bca6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcae:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcb4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2220      	movs	r2, #32
 800bcba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bcbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800bcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcc8:	4413      	add	r3, r2
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcd0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800bcd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d007      	beq.n	800bcea <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800bce8:	e006      	b.n	800bcf8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcee:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcf4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4a48      	ldr	r2, [pc, #288]	; (800be24 <_tx_thread_create+0x1cc>)
 800bd02:	655a      	str	r2, [r3, #84]	; 0x54
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800bd0a:	4947      	ldr	r1, [pc, #284]	; (800be28 <_tx_thread_create+0x1d0>)
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7f4 fb53 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd12:	f3ef 8310 	mrs	r3, PRIMASK
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd1c:	b672      	cpsid	i
    return(int_posture);
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800bd20:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	4a41      	ldr	r2, [pc, #260]	; (800be2c <_tx_thread_create+0x1d4>)
 800bd26:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800bd28:	4b41      	ldr	r3, [pc, #260]	; (800be30 <_tx_thread_create+0x1d8>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10b      	bne.n	800bd48 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800bd30:	4a40      	ldr	r2, [pc, #256]	; (800be34 <_tx_thread_create+0x1dc>)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bd46:	e016      	b.n	800bd76 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800bd48:	4b3a      	ldr	r3, [pc, #232]	; (800be34 <_tx_thread_create+0x1dc>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800bd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800bd76:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <_tx_thread_create+0x1d8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	4a2c      	ldr	r2, [pc, #176]	; (800be30 <_tx_thread_create+0x1d8>)
 800bd7e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bd80:	4b2d      	ldr	r3, [pc, #180]	; (800be38 <_tx_thread_create+0x1e0>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3301      	adds	r3, #1
 800bd86:	4a2c      	ldr	r2, [pc, #176]	; (800be38 <_tx_thread_create+0x1e0>)
 800bd88:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800bd8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d129      	bne.n	800bde4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd90:	f3ef 8305 	mrs	r3, IPSR
 800bd94:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800bd96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bd98:	4b28      	ldr	r3, [pc, #160]	; (800be3c <_tx_thread_create+0x1e4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bda2:	d30d      	bcc.n	800bdc0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800bda4:	4b26      	ldr	r3, [pc, #152]	; (800be40 <_tx_thread_create+0x1e8>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800bdaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdbc:	63da      	str	r2, [r3, #60]	; 0x3c
 800bdbe:	e001      	b.n	800bdc4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	f383 8810 	msr	PRIMASK, r3
}
 800bdce:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f000 f8f9 	bl	800bfc8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01e      	beq.n	800be1a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bde0:	63da      	str	r2, [r3, #60]	; 0x3c
 800bde2:	e01a      	b.n	800be1a <_tx_thread_create+0x1c2>
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f383 8810 	msr	PRIMASK, r3
}
 800bdee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdf0:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bdf6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bdf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdfa:	b672      	cpsid	i
    return(int_posture);
 800bdfc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800bdfe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <_tx_thread_create+0x1e0>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3b01      	subs	r3, #1
 800be06:	4a0c      	ldr	r2, [pc, #48]	; (800be38 <_tx_thread_create+0x1e0>)
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	f383 8810 	msr	PRIMASK, r3
}
 800be14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be16:	f000 f89d 	bl	800bf54 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3748      	adds	r7, #72	; 0x48
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	0800c49d 	.word	0x0800c49d
 800be28:	0800bebd 	.word	0x0800bebd
 800be2c:	54485244 	.word	0x54485244
 800be30:	2004cd50 	.word	0x2004cd50
 800be34:	2004cd4c 	.word	0x2004cd4c
 800be38:	2004cddc 	.word	0x2004cddc
 800be3c:	20025814 	.word	0x20025814
 800be40:	2004cd48 	.word	0x2004cd48

0800be44 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800be48:	4b12      	ldr	r3, [pc, #72]	; (800be94 <_tx_thread_initialize+0x50>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800be4e:	4b12      	ldr	r3, [pc, #72]	; (800be98 <_tx_thread_initialize+0x54>)
 800be50:	2200      	movs	r2, #0
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	4b11      	ldr	r3, [pc, #68]	; (800be9c <_tx_thread_initialize+0x58>)
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800be5a:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <_tx_thread_initialize+0x5c>)
 800be5c:	2220      	movs	r2, #32
 800be5e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800be60:	2280      	movs	r2, #128	; 0x80
 800be62:	2100      	movs	r1, #0
 800be64:	480f      	ldr	r0, [pc, #60]	; (800bea4 <_tx_thread_initialize+0x60>)
 800be66:	f01a fa19 	bl	802629c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800be6a:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <_tx_thread_initialize+0x64>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800be70:	4b0e      	ldr	r3, [pc, #56]	; (800beac <_tx_thread_initialize+0x68>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800be76:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <_tx_thread_initialize+0x6c>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <_tx_thread_initialize+0x70>)
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <_tx_thread_initialize+0x74>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800be8a:	4a0b      	ldr	r2, [pc, #44]	; (800beb8 <_tx_thread_initialize+0x74>)
 800be8c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800be8e:	bf00      	nop
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	2004cd44 	.word	0x2004cd44
 800be98:	2004cd48 	.word	0x2004cd48
 800be9c:	2004cd54 	.word	0x2004cd54
 800bea0:	2004cd58 	.word	0x2004cd58
 800bea4:	2004cd5c 	.word	0x2004cd5c
 800bea8:	2004cd4c 	.word	0x2004cd4c
 800beac:	2004cd50 	.word	0x2004cd50
 800beb0:	2004cddc 	.word	0x2004cddc
 800beb4:	2004cde0 	.word	0x2004cde0
 800beb8:	2004cde4 	.word	0x2004cde4

0800bebc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bec2:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <_tx_thread_shell_entry+0x8c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bed4:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <_tx_thread_shell_entry+0x90>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800bedc:	4b1b      	ldr	r3, [pc, #108]	; (800bf4c <_tx_thread_shell_entry+0x90>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69f8      	ldr	r0, [r7, #28]
 800bee2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bee4:	f3ef 8310 	mrs	r3, PRIMASK
 800bee8:	607b      	str	r3, [r7, #4]
    return(posture);
 800beea:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800beec:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800beee:	b672      	cpsid	i
    return(int_posture);
 800bef0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800bef2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2201      	movs	r2, #1
 800bef8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	2201      	movs	r2, #1
 800befe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	2200      	movs	r2, #0
 800bf04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bf06:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <_tx_thread_shell_entry+0x94>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	4a10      	ldr	r2, [pc, #64]	; (800bf50 <_tx_thread_shell_entry+0x94>)
 800bf0e:	6013      	str	r3, [r2, #0]
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f383 8810 	msr	PRIMASK, r3
}
 800bf1a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800bf1c:	f3ef 8314 	mrs	r3, CONTROL
 800bf20:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800bf22:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f023 0304 	bic.w	r3, r3, #4
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f383 8814 	msr	CONTROL, r3
}
 800bf38:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bf3a:	69f8      	ldr	r0, [r7, #28]
 800bf3c:	f000 f944 	bl	800c1c8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bf40:	bf00      	nop
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	2004cd44 	.word	0x2004cd44
 800bf4c:	2004cde0 	.word	0x2004cde0
 800bf50:	2004cddc 	.word	0x2004cddc

0800bf54 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bf5a:	4b17      	ldr	r3, [pc, #92]	; (800bfb8 <_tx_thread_system_preempt_check+0x64>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d121      	bne.n	800bfaa <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800bf66:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <_tx_thread_system_preempt_check+0x68>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800bf6c:	4b14      	ldr	r3, [pc, #80]	; (800bfc0 <_tx_thread_system_preempt_check+0x6c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d017      	beq.n	800bfaa <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bf7a:	4b12      	ldr	r3, [pc, #72]	; (800bfc4 <_tx_thread_system_preempt_check+0x70>)
 800bf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf82:	f3ef 8305 	mrs	r3, IPSR
 800bf86:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bf88:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf8e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf92:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bf94:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800bf96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bf98:	b662      	cpsie	i
}
 800bf9a:	bf00      	nop
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f383 8810 	msr	PRIMASK, r3
}
 800bfa6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800bfa8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800bfaa:	bf00      	nop
 800bfac:	3724      	adds	r7, #36	; 0x24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	2004cddc 	.word	0x2004cddc
 800bfbc:	2004cd44 	.word	0x2004cd44
 800bfc0:	2004cd48 	.word	0x2004cd48
 800bfc4:	e000ed04 	.word	0xe000ed04

0800bfc8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b096      	sub	sp, #88	; 0x58
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfd0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfd4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800bfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800bfd8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfda:	b672      	cpsid	i
    return(int_posture);
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bfde:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	334c      	adds	r3, #76	; 0x4c
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fc21 	bl	800c834 <_tx_timer_system_deactivate>
 800bff2:	e002      	b.n	800bffa <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bffa:	4b6c      	ldr	r3, [pc, #432]	; (800c1ac <_tx_thread_system_resume+0x1e4>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3b01      	subs	r3, #1
 800c000:	4a6a      	ldr	r2, [pc, #424]	; (800c1ac <_tx_thread_system_resume+0x1e4>)
 800c002:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f040 8083 	bne.w	800c114 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c012:	2b00      	cmp	r3, #0
 800c014:	f000 8097 	beq.w	800c146 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d172      	bne.n	800c106 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800c02c:	4a60      	ldr	r2, [pc, #384]	; (800c1b0 <_tx_thread_system_resume+0x1e8>)
 800c02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c034:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800c036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d154      	bne.n	800c0e6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800c03c:	495c      	ldr	r1, [pc, #368]	; (800c1b0 <_tx_thread_system_resume+0x1e8>)
 800c03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800c052:	2201      	movs	r2, #1
 800c054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c056:	fa02 f303 	lsl.w	r3, r2, r3
 800c05a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800c05c:	4b55      	ldr	r3, [pc, #340]	; (800c1b4 <_tx_thread_system_resume+0x1ec>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c062:	4313      	orrs	r3, r2
 800c064:	4a53      	ldr	r2, [pc, #332]	; (800c1b4 <_tx_thread_system_resume+0x1ec>)
 800c066:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800c068:	4b53      	ldr	r3, [pc, #332]	; (800c1b8 <_tx_thread_system_resume+0x1f0>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c06e:	429a      	cmp	r2, r3
 800c070:	d269      	bcs.n	800c146 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800c072:	4a51      	ldr	r2, [pc, #324]	; (800c1b8 <_tx_thread_system_resume+0x1f0>)
 800c074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c076:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c078:	4b50      	ldr	r3, [pc, #320]	; (800c1bc <_tx_thread_system_resume+0x1f4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c084:	4a4d      	ldr	r2, [pc, #308]	; (800c1bc <_tx_thread_system_resume+0x1f4>)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	e05c      	b.n	800c146 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c092:	429a      	cmp	r2, r3
 800c094:	d257      	bcs.n	800c146 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c096:	4a49      	ldr	r2, [pc, #292]	; (800c1bc <_tx_thread_system_resume+0x1f4>)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a2:	f383 8810 	msr	PRIMASK, r3
}
 800c0a6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c0a8:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <_tx_thread_system_resume+0x1e4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d174      	bne.n	800c19e <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c0b4:	4b42      	ldr	r3, [pc, #264]	; (800c1c0 <_tx_thread_system_resume+0x1f8>)
 800c0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ba:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0bc:	f3ef 8305 	mrs	r3, IPSR
 800c0c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10c      	bne.n	800c0e2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800c0d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c0d2:	b662      	cpsie	i
}
 800c0d4:	bf00      	nop
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	f383 8810 	msr	PRIMASK, r3
}
 800c0e0:	bf00      	nop
}
 800c0e2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c0e4:	e05b      	b.n	800c19e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ea:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0fc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c102:	621a      	str	r2, [r3, #32]
 800c104:	e01f      	b.n	800c146 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2203      	movs	r2, #3
 800c110:	631a      	str	r2, [r3, #48]	; 0x30
 800c112:	e018      	b.n	800c146 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d014      	beq.n	800c146 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c120:	2b02      	cmp	r3, #2
 800c122:	d010      	beq.n	800c146 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	631a      	str	r2, [r3, #48]	; 0x30
 800c138:	e005      	b.n	800c146 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2203      	movs	r2, #3
 800c144:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c146:	4b1f      	ldr	r3, [pc, #124]	; (800c1c4 <_tx_thread_system_resume+0x1fc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c14e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	f383 8810 	msr	PRIMASK, r3
}
 800c156:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c158:	4b18      	ldr	r3, [pc, #96]	; (800c1bc <_tx_thread_system_resume+0x1f4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c15e:	429a      	cmp	r2, r3
 800c160:	d020      	beq.n	800c1a4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c162:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <_tx_thread_system_resume+0x1e4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800c168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d11a      	bne.n	800c1a4 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c16e:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <_tx_thread_system_resume+0x1f8>)
 800c170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c174:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c176:	f3ef 8305 	mrs	r3, IPSR
 800c17a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c17c:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10f      	bne.n	800c1a2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c182:	f3ef 8310 	mrs	r3, PRIMASK
 800c186:	613b      	str	r3, [r7, #16]
    return(posture);
 800c188:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c18a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c18c:	b662      	cpsie	i
}
 800c18e:	bf00      	nop
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f383 8810 	msr	PRIMASK, r3
}
 800c19a:	bf00      	nop
}
 800c19c:	e001      	b.n	800c1a2 <_tx_thread_system_resume+0x1da>
                                return;
 800c19e:	bf00      	nop
 800c1a0:	e000      	b.n	800c1a4 <_tx_thread_system_resume+0x1dc>
 800c1a2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c1a4:	3758      	adds	r7, #88	; 0x58
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2004cddc 	.word	0x2004cddc
 800c1b0:	2004cd5c 	.word	0x2004cd5c
 800c1b4:	2004cd54 	.word	0x2004cd54
 800c1b8:	2004cd58 	.word	0x2004cd58
 800c1bc:	2004cd48 	.word	0x2004cd48
 800c1c0:	e000ed04 	.word	0xe000ed04
 800c1c4:	2004cd44 	.word	0x2004cd44

0800c1c8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b09e      	sub	sp, #120	; 0x78
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c1d0:	4b81      	ldr	r3, [pc, #516]	; (800c3d8 <_tx_thread_system_suspend+0x210>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c1da:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c1de:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1e0:	b672      	cpsid	i
    return(int_posture);
 800c1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c1e4:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d112      	bne.n	800c214 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1f2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d008      	beq.n	800c20c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c200:	d004      	beq.n	800c20c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	334c      	adds	r3, #76	; 0x4c
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fab2 	bl	800c770 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	69db      	ldr	r3, [r3, #28]
 800c210:	4a72      	ldr	r2, [pc, #456]	; (800c3dc <_tx_thread_system_suspend+0x214>)
 800c212:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c214:	4b72      	ldr	r3, [pc, #456]	; (800c3e0 <_tx_thread_system_suspend+0x218>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3b01      	subs	r3, #1
 800c21a:	4a71      	ldr	r2, [pc, #452]	; (800c3e0 <_tx_thread_system_suspend+0x218>)
 800c21c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c222:	2b01      	cmp	r3, #1
 800c224:	f040 80a6 	bne.w	800c374 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c23a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d015      	beq.n	800c26e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c24a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c24c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c250:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c252:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c254:	4a63      	ldr	r2, [pc, #396]	; (800c3e4 <_tx_thread_system_suspend+0x21c>)
 800c256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d157      	bne.n	800c312 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c262:	4960      	ldr	r1, [pc, #384]	; (800c3e4 <_tx_thread_system_suspend+0x21c>)
 800c264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c266:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c26c:	e051      	b.n	800c312 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c26e:	4a5d      	ldr	r2, [pc, #372]	; (800c3e4 <_tx_thread_system_suspend+0x21c>)
 800c270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c272:	2100      	movs	r1, #0
 800c274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c278:	2201      	movs	r2, #1
 800c27a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c27c:	fa02 f303 	lsl.w	r3, r2, r3
 800c280:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c282:	4b59      	ldr	r3, [pc, #356]	; (800c3e8 <_tx_thread_system_suspend+0x220>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c288:	43db      	mvns	r3, r3
 800c28a:	4013      	ands	r3, r2
 800c28c:	4a56      	ldr	r2, [pc, #344]	; (800c3e8 <_tx_thread_system_suspend+0x220>)
 800c28e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c290:	2300      	movs	r3, #0
 800c292:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c294:	4b54      	ldr	r3, [pc, #336]	; (800c3e8 <_tx_thread_system_suspend+0x220>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c29a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d12b      	bne.n	800c2f8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c2a0:	4b52      	ldr	r3, [pc, #328]	; (800c3ec <_tx_thread_system_suspend+0x224>)
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c2a6:	4b52      	ldr	r3, [pc, #328]	; (800c3f0 <_tx_thread_system_suspend+0x228>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2ae:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b2:	f383 8810 	msr	PRIMASK, r3
}
 800c2b6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c2b8:	4b49      	ldr	r3, [pc, #292]	; (800c3e0 <_tx_thread_system_suspend+0x218>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800c2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8081 	bne.w	800c3c8 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c2c6:	4b4b      	ldr	r3, [pc, #300]	; (800c3f4 <_tx_thread_system_suspend+0x22c>)
 800c2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2ce:	f3ef 8305 	mrs	r3, IPSR
 800c2d2:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800c2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10c      	bne.n	800c2f4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2da:	f3ef 8310 	mrs	r3, PRIMASK
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800c2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800c2e2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c2e4:	b662      	cpsie	i
}
 800c2e6:	bf00      	nop
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	f383 8810 	msr	PRIMASK, r3
}
 800c2f2:	bf00      	nop
}
 800c2f4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c2f6:	e067      	b.n	800c3c8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c2f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2fa:	fa93 f3a3 	rbit	r3, r3
 800c2fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800c300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c302:	fab3 f383 	clz	r3, r3
 800c306:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c30a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c30c:	4413      	add	r3, r2
 800c30e:	4a37      	ldr	r2, [pc, #220]	; (800c3ec <_tx_thread_system_suspend+0x224>)
 800c310:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c312:	4b37      	ldr	r3, [pc, #220]	; (800c3f0 <_tx_thread_system_suspend+0x228>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d12b      	bne.n	800c374 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c31c:	4b33      	ldr	r3, [pc, #204]	; (800c3ec <_tx_thread_system_suspend+0x224>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a30      	ldr	r2, [pc, #192]	; (800c3e4 <_tx_thread_system_suspend+0x21c>)
 800c322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c326:	4a32      	ldr	r2, [pc, #200]	; (800c3f0 <_tx_thread_system_suspend+0x228>)
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c32c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	f383 8810 	msr	PRIMASK, r3
}
 800c334:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c336:	4b2a      	ldr	r3, [pc, #168]	; (800c3e0 <_tx_thread_system_suspend+0x218>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d144      	bne.n	800c3cc <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c342:	4b2c      	ldr	r3, [pc, #176]	; (800c3f4 <_tx_thread_system_suspend+0x22c>)
 800c344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c348:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c34a:	f3ef 8305 	mrs	r3, IPSR
 800c34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10c      	bne.n	800c370 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c356:	f3ef 8310 	mrs	r3, PRIMASK
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c360:	b662      	cpsie	i
}
 800c362:	bf00      	nop
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c368:	6a3b      	ldr	r3, [r7, #32]
 800c36a:	f383 8810 	msr	PRIMASK, r3
}
 800c36e:	bf00      	nop
}
 800c370:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c372:	e02b      	b.n	800c3cc <_tx_thread_system_suspend+0x204>
 800c374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c376:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	f383 8810 	msr	PRIMASK, r3
}
 800c37e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c380:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <_tx_thread_system_suspend+0x228>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c386:	429a      	cmp	r2, r3
 800c388:	d022      	beq.n	800c3d0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c38a:	4b15      	ldr	r3, [pc, #84]	; (800c3e0 <_tx_thread_system_suspend+0x218>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800c390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c392:	2b00      	cmp	r3, #0
 800c394:	d11c      	bne.n	800c3d0 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c396:	4b17      	ldr	r3, [pc, #92]	; (800c3f4 <_tx_thread_system_suspend+0x22c>)
 800c398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c39c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c3a4:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10c      	bne.n	800c3c4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ae:	617b      	str	r3, [r7, #20]
    return(posture);
 800c3b0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c3b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c3b4:	b662      	cpsie	i
}
 800c3b6:	bf00      	nop
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f383 8810 	msr	PRIMASK, r3
}
 800c3c2:	bf00      	nop
}
 800c3c4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c3c6:	e003      	b.n	800c3d0 <_tx_thread_system_suspend+0x208>
                return;
 800c3c8:	bf00      	nop
 800c3ca:	e002      	b.n	800c3d2 <_tx_thread_system_suspend+0x20a>
            return;
 800c3cc:	bf00      	nop
 800c3ce:	e000      	b.n	800c3d2 <_tx_thread_system_suspend+0x20a>
    return;
 800c3d0:	bf00      	nop
}
 800c3d2:	3778      	adds	r7, #120	; 0x78
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	2004cd44 	.word	0x2004cd44
 800c3dc:	2004d348 	.word	0x2004d348
 800c3e0:	2004cddc 	.word	0x2004cddc
 800c3e4:	2004cd5c 	.word	0x2004cd5c
 800c3e8:	2004cd54 	.word	0x2004cd54
 800c3ec:	2004cd58 	.word	0x2004cd58
 800c3f0:	2004cd48 	.word	0x2004cd48
 800c3f4:	e000ed04 	.word	0xe000ed04

0800c3f8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c3fe:	4b21      	ldr	r3, [pc, #132]	; (800c484 <_tx_thread_time_slice+0x8c>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c404:	f3ef 8310 	mrs	r3, PRIMASK
 800c408:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c40a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c40c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c40e:	b672      	cpsid	i
    return(int_posture);
 800c410:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c412:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c414:	4b1c      	ldr	r3, [pc, #112]	; (800c488 <_tx_thread_time_slice+0x90>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d024      	beq.n	800c46a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c424:	2b00      	cmp	r3, #0
 800c426:	d120      	bne.n	800c46a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	69da      	ldr	r2, [r3, #28]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	4a15      	ldr	r2, [pc, #84]	; (800c48c <_tx_thread_time_slice+0x94>)
 800c436:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6a1b      	ldr	r3, [r3, #32]
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d013      	beq.n	800c46a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d10d      	bne.n	800c46a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	6a12      	ldr	r2, [r2, #32]
 800c456:	490e      	ldr	r1, [pc, #56]	; (800c490 <_tx_thread_time_slice+0x98>)
 800c458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <_tx_thread_time_slice+0x9c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a0b      	ldr	r2, [pc, #44]	; (800c490 <_tx_thread_time_slice+0x98>)
 800c462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c466:	4a0c      	ldr	r2, [pc, #48]	; (800c498 <_tx_thread_time_slice+0xa0>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f383 8810 	msr	PRIMASK, r3
}
 800c474:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	2004cd44 	.word	0x2004cd44
 800c488:	2004cdec 	.word	0x2004cdec
 800c48c:	2004d348 	.word	0x2004d348
 800c490:	2004cd5c 	.word	0x2004cd5c
 800c494:	2004cd58 	.word	0x2004cd58
 800c498:	2004cd48 	.word	0x2004cd48

0800c49c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ac:	617b      	str	r3, [r7, #20]
    return(posture);
 800c4ae:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c4b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4b2:	b672      	cpsid	i
    return(int_posture);
 800c4b4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c4b6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d10e      	bne.n	800c4de <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c4c0:	4b13      	ldr	r3, [pc, #76]	; (800c510 <_tx_thread_timeout+0x74>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	4a12      	ldr	r2, [pc, #72]	; (800c510 <_tx_thread_timeout+0x74>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f383 8810 	msr	PRIMASK, r3
}
 800c4d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4d8:	f7ff fd76 	bl	800bfc8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c4dc:	e013      	b.n	800c506 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4e2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f383 8810 	msr	PRIMASK, r3
}
 800c4f6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	69b9      	ldr	r1, [r7, #24]
 800c502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c504:	4798      	blx	r3
}
 800c506:	bf00      	nop
 800c508:	3728      	adds	r7, #40	; 0x28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	2004cddc 	.word	0x2004cddc

0800c514 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c51c:	f3ef 8310 	mrs	r3, PRIMASK
 800c520:	617b      	str	r3, [r7, #20]
    return(posture);
 800c522:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c524:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c526:	b672      	cpsid	i
    return(int_posture);
 800c528:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c52a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800c534:	2317      	movs	r3, #23
 800c536:	61fb      	str	r3, [r7, #28]
 800c538:	e00d      	b.n	800c556 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d102      	bne.n	800c548 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800c542:	2317      	movs	r3, #23
 800c544:	61fb      	str	r3, [r7, #28]
 800c546:	e006      	b.n	800c556 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3308      	adds	r3, #8
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 f90f 	bl	800c770 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800c552:	2300      	movs	r3, #0
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f383 8810 	msr	PRIMASK, r3
}
 800c560:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800c562:	69fb      	ldr	r3, [r7, #28]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800c57a:	222c      	movs	r2, #44	; 0x2c
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f019 fe8c 	bl	802629c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c594:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c5a8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c5aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5ac:	b672      	cpsid	i
    return(int_posture);
 800c5ae:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	4a1c      	ldr	r2, [pc, #112]	; (800c628 <_tx_timer_create+0xbc>)
 800c5b6:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800c5b8:	4b1c      	ldr	r3, [pc, #112]	; (800c62c <_tx_timer_create+0xc0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800c5c0:	4a1b      	ldr	r2, [pc, #108]	; (800c630 <_tx_timer_create+0xc4>)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	629a      	str	r2, [r3, #40]	; 0x28
 800c5d2:	e011      	b.n	800c5f8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800c5d4:	4b16      	ldr	r3, [pc, #88]	; (800c630 <_tx_timer_create+0xc4>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5de:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a3a      	ldr	r2, [r7, #32]
 800c5f6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800c5f8:	4b0c      	ldr	r3, [pc, #48]	; (800c62c <_tx_timer_create+0xc0>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	4a0b      	ldr	r2, [pc, #44]	; (800c62c <_tx_timer_create+0xc0>)
 800c600:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	2b01      	cmp	r3, #1
 800c606:	d104      	bne.n	800c612 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3308      	adds	r3, #8
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 f8af 	bl	800c770 <_tx_timer_system_activate>
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f383 8810 	msr	PRIMASK, r3
}
 800c61c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3728      	adds	r7, #40	; 0x28
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	4154494d 	.word	0x4154494d
 800c62c:	2004ce84 	.word	0x2004ce84
 800c630:	2004ce80 	.word	0x2004ce80

0800c634 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c63a:	f3ef 8310 	mrs	r3, PRIMASK
 800c63e:	607b      	str	r3, [r7, #4]
    return(posture);
 800c640:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c642:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c644:	b672      	cpsid	i
    return(int_posture);
 800c646:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c648:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <_tx_timer_expiration_process+0x3c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3301      	adds	r3, #1
 800c650:	4a07      	ldr	r2, [pc, #28]	; (800c670 <_tx_timer_expiration_process+0x3c>)
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f383 8810 	msr	PRIMASK, r3
}
 800c65e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c660:	4804      	ldr	r0, [pc, #16]	; (800c674 <_tx_timer_expiration_process+0x40>)
 800c662:	f7ff fcb1 	bl	800bfc8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c666:	bf00      	nop
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	2004cddc 	.word	0x2004cddc
 800c674:	2004ce8c 	.word	0x2004ce8c

0800c678 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c678:	b590      	push	{r4, r7, lr}
 800c67a:	b089      	sub	sp, #36	; 0x24
 800c67c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c67e:	4b28      	ldr	r3, [pc, #160]	; (800c720 <_tx_timer_initialize+0xa8>)
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c684:	4b27      	ldr	r3, [pc, #156]	; (800c724 <_tx_timer_initialize+0xac>)
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c68a:	4b27      	ldr	r3, [pc, #156]	; (800c728 <_tx_timer_initialize+0xb0>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c690:	4b26      	ldr	r3, [pc, #152]	; (800c72c <_tx_timer_initialize+0xb4>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c696:	4b26      	ldr	r3, [pc, #152]	; (800c730 <_tx_timer_initialize+0xb8>)
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c69c:	2280      	movs	r2, #128	; 0x80
 800c69e:	2100      	movs	r1, #0
 800c6a0:	4824      	ldr	r0, [pc, #144]	; (800c734 <_tx_timer_initialize+0xbc>)
 800c6a2:	f019 fdfb 	bl	802629c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c6a6:	4b24      	ldr	r3, [pc, #144]	; (800c738 <_tx_timer_initialize+0xc0>)
 800c6a8:	4a22      	ldr	r2, [pc, #136]	; (800c734 <_tx_timer_initialize+0xbc>)
 800c6aa:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c6ac:	4b23      	ldr	r3, [pc, #140]	; (800c73c <_tx_timer_initialize+0xc4>)
 800c6ae:	4a21      	ldr	r2, [pc, #132]	; (800c734 <_tx_timer_initialize+0xbc>)
 800c6b0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c6b2:	4b23      	ldr	r3, [pc, #140]	; (800c740 <_tx_timer_initialize+0xc8>)
 800c6b4:	4a23      	ldr	r2, [pc, #140]	; (800c744 <_tx_timer_initialize+0xcc>)
 800c6b6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c6b8:	4b21      	ldr	r3, [pc, #132]	; (800c740 <_tx_timer_initialize+0xc8>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4a20      	ldr	r2, [pc, #128]	; (800c740 <_tx_timer_initialize+0xc8>)
 800c6c0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c6c2:	4b21      	ldr	r3, [pc, #132]	; (800c748 <_tx_timer_initialize+0xd0>)
 800c6c4:	4a21      	ldr	r2, [pc, #132]	; (800c74c <_tx_timer_initialize+0xd4>)
 800c6c6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c6c8:	4b21      	ldr	r3, [pc, #132]	; (800c750 <_tx_timer_initialize+0xd8>)
 800c6ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6ce:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c6d0:	4b20      	ldr	r3, [pc, #128]	; (800c754 <_tx_timer_initialize+0xdc>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c6d6:	4b1c      	ldr	r3, [pc, #112]	; (800c748 <_tx_timer_initialize+0xd0>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a1d      	ldr	r2, [pc, #116]	; (800c750 <_tx_timer_initialize+0xd8>)
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	491d      	ldr	r1, [pc, #116]	; (800c754 <_tx_timer_initialize+0xdc>)
 800c6e0:	6809      	ldr	r1, [r1, #0]
 800c6e2:	481c      	ldr	r0, [pc, #112]	; (800c754 <_tx_timer_initialize+0xdc>)
 800c6e4:	6800      	ldr	r0, [r0, #0]
 800c6e6:	2400      	movs	r4, #0
 800c6e8:	9405      	str	r4, [sp, #20]
 800c6ea:	2400      	movs	r4, #0
 800c6ec:	9404      	str	r4, [sp, #16]
 800c6ee:	9003      	str	r0, [sp, #12]
 800c6f0:	9102      	str	r1, [sp, #8]
 800c6f2:	9201      	str	r2, [sp, #4]
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	4b18      	ldr	r3, [pc, #96]	; (800c758 <_tx_timer_initialize+0xe0>)
 800c6f8:	4a18      	ldr	r2, [pc, #96]	; (800c75c <_tx_timer_initialize+0xe4>)
 800c6fa:	4919      	ldr	r1, [pc, #100]	; (800c760 <_tx_timer_initialize+0xe8>)
 800c6fc:	4819      	ldr	r0, [pc, #100]	; (800c764 <_tx_timer_initialize+0xec>)
 800c6fe:	f7ff faab 	bl	800bc58 <_tx_thread_create>
 800c702:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e5      	bne.n	800c6d6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c70a:	4b17      	ldr	r3, [pc, #92]	; (800c768 <_tx_timer_initialize+0xf0>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c710:	4b16      	ldr	r3, [pc, #88]	; (800c76c <_tx_timer_initialize+0xf4>)
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c716:	bf00      	nop
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}
 800c71e:	bf00      	nop
 800c720:	2004cde8 	.word	0x2004cde8
 800c724:	2004d348 	.word	0x2004d348
 800c728:	2004cdec 	.word	0x2004cdec
 800c72c:	2004ce7c 	.word	0x2004ce7c
 800c730:	2004ce88 	.word	0x2004ce88
 800c734:	2004cdf0 	.word	0x2004cdf0
 800c738:	2004ce70 	.word	0x2004ce70
 800c73c:	2004ce78 	.word	0x2004ce78
 800c740:	2004ce74 	.word	0x2004ce74
 800c744:	2004ce6c 	.word	0x2004ce6c
 800c748:	2004cf3c 	.word	0x2004cf3c
 800c74c:	2004cf48 	.word	0x2004cf48
 800c750:	2004cf40 	.word	0x2004cf40
 800c754:	2004cf44 	.word	0x2004cf44
 800c758:	4154494d 	.word	0x4154494d
 800c75c:	0800c8a5 	.word	0x0800c8a5
 800c760:	0802735c 	.word	0x0802735c
 800c764:	2004ce8c 	.word	0x2004ce8c
 800c768:	2004ce80 	.word	0x2004ce80
 800c76c:	2004ce84 	.word	0x2004ce84

0800c770 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c770:	b480      	push	{r7}
 800c772:	b089      	sub	sp, #36	; 0x24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d04a      	beq.n	800c81a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78a:	d046      	beq.n	800c81a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d142      	bne.n	800c81a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2b20      	cmp	r3, #32
 800c798:	d902      	bls.n	800c7a0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c79a:	231f      	movs	r3, #31
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	e002      	b.n	800c7a6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <_tx_timer_system_activate+0xb8>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4413      	add	r3, r2
 800c7b0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c7b2:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <_tx_timer_system_activate+0xbc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d30b      	bcc.n	800c7d4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c7bc:	4b1b      	ldr	r3, [pc, #108]	; (800c82c <_tx_timer_system_activate+0xbc>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	109b      	asrs	r3, r3, #2
 800c7c6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c7c8:	4b19      	ldr	r3, [pc, #100]	; (800c830 <_tx_timer_system_activate+0xc0>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d109      	bne.n	800c7f0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e011      	b.n	800c814 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c81a:	bf00      	nop
 800c81c:	3724      	adds	r7, #36	; 0x24
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	2004ce78 	.word	0x2004ce78
 800c82c:	2004ce74 	.word	0x2004ce74
 800c830:	2004ce70 	.word	0x2004ce70

0800c834 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c834:	b480      	push	{r7}
 800c836:	b087      	sub	sp, #28
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	699b      	ldr	r3, [r3, #24]
 800c840:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d026      	beq.n	800c896 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	429a      	cmp	r2, r3
 800c854:	d108      	bne.n	800c868 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d117      	bne.n	800c890 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	e013      	b.n	800c890 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	d105      	bne.n	800c890 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	619a      	str	r2, [r3, #24]
    }
}
 800c896:	bf00      	nop
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b098      	sub	sp, #96	; 0x60
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a73      	ldr	r2, [pc, #460]	; (800ca80 <_tx_timer_thread_entry+0x1dc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	f040 80de 	bne.w	800ca76 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c8be:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8c4:	b672      	cpsid	i
    return(int_posture);
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c8c8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c8ca:	4b6e      	ldr	r3, [pc, #440]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f107 020c 	add.w	r2, r7, #12
 800c8de:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c8e0:	4b68      	ldr	r3, [pc, #416]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c8e8:	4b66      	ldr	r3, [pc, #408]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	4a65      	ldr	r2, [pc, #404]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c8f0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c8f2:	4b64      	ldr	r3, [pc, #400]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	4b64      	ldr	r3, [pc, #400]	; (800ca88 <_tx_timer_thread_entry+0x1e4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d103      	bne.n	800c906 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c8fe:	4b63      	ldr	r3, [pc, #396]	; (800ca8c <_tx_timer_thread_entry+0x1e8>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a60      	ldr	r2, [pc, #384]	; (800ca84 <_tx_timer_thread_entry+0x1e0>)
 800c904:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c906:	4b62      	ldr	r3, [pc, #392]	; (800ca90 <_tx_timer_thread_entry+0x1ec>)
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c90e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	f383 8810 	msr	PRIMASK, r3
}
 800c916:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c918:	f3ef 8310 	mrs	r3, PRIMASK
 800c91c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c920:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c922:	b672      	cpsid	i
    return(int_posture);
 800c924:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c926:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c928:	e07f      	b.n	800ca2a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d102      	bne.n	800c946 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e00e      	b.n	800c964 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c94e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c950:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c956:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c95a:	f107 020c 	add.w	r2, r7, #12
 800c95e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c962:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b20      	cmp	r3, #32
 800c96a:	d911      	bls.n	800c990 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97e:	f107 0208 	add.w	r2, r7, #8
 800c982:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c988:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c98c:	60bb      	str	r3, [r7, #8]
 800c98e:	e01a      	b.n	800c9c6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ae:	f107 0208 	add.w	r2, r7, #8
 800c9b2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9b8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9bc:	60bb      	str	r3, [r7, #8]
 800c9be:	e002      	b.n	800c9c6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c9c6:	4a33      	ldr	r2, [pc, #204]	; (800ca94 <_tx_timer_thread_entry+0x1f0>)
 800c9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	f383 8810 	msr	PRIMASK, r3
}
 800c9d6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c9d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9e2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c9ec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9ee:	b672      	cpsid	i
    return(int_posture);
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c9f2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c9f4:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <_tx_timer_thread_entry+0x1f0>)
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d105      	bne.n	800ca0e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800ca02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca04:	2200      	movs	r2, #0
 800ca06:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800ca08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ca0a:	f7ff feb1 	bl	800c770 <_tx_timer_system_activate>
 800ca0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	f383 8810 	msr	PRIMASK, r3
}
 800ca18:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca1e:	623b      	str	r3, [r7, #32]
    return(posture);
 800ca20:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ca22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca24:	b672      	cpsid	i
    return(int_posture);
 800ca26:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ca28:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f47f af7c 	bne.w	800c92a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800ca32:	4b17      	ldr	r3, [pc, #92]	; (800ca90 <_tx_timer_thread_entry+0x1ec>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d116      	bne.n	800ca68 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800ca3a:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <_tx_timer_thread_entry+0x1f4>)
 800ca3c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	2203      	movs	r2, #3
 800ca42:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ca44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca46:	2201      	movs	r2, #1
 800ca48:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800ca4a:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <_tx_timer_thread_entry+0x1f8>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	4a12      	ldr	r2, [pc, #72]	; (800ca9c <_tx_timer_thread_entry+0x1f8>)
 800ca52:	6013      	str	r3, [r2, #0]
 800ca54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	f383 8810 	msr	PRIMASK, r3
}
 800ca5e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ca60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ca62:	f7ff fbb1 	bl	800c1c8 <_tx_thread_system_suspend>
 800ca66:	e728      	b.n	800c8ba <_tx_timer_thread_entry+0x16>
 800ca68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	f383 8810 	msr	PRIMASK, r3
}
 800ca72:	bf00      	nop
            TX_DISABLE
 800ca74:	e721      	b.n	800c8ba <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800ca76:	bf00      	nop
 800ca78:	3760      	adds	r7, #96	; 0x60
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	4154494d 	.word	0x4154494d
 800ca84:	2004ce78 	.word	0x2004ce78
 800ca88:	2004ce74 	.word	0x2004ce74
 800ca8c:	2004ce70 	.word	0x2004ce70
 800ca90:	2004ce7c 	.word	0x2004ce7c
 800ca94:	2004ce88 	.word	0x2004ce88
 800ca98:	2004ce8c 	.word	0x2004ce8c
 800ca9c:	2004cddc 	.word	0x2004cddc

0800caa0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	; 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800caae:	2300      	movs	r3, #0
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d102      	bne.n	800cabe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cab8:	2302      	movs	r3, #2
 800caba:	627b      	str	r3, [r7, #36]	; 0x24
 800cabc:	e029      	b.n	800cb12 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a2d      	ldr	r2, [pc, #180]	; (800cb78 <_txe_byte_allocate+0xd8>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d002      	beq.n	800cace <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cac8:	2302      	movs	r3, #2
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
 800cacc:	e021      	b.n	800cb12 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cad4:	2303      	movs	r3, #3
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24
 800cad8:	e01b      	b.n	800cb12 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cae0:	2305      	movs	r3, #5
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24
 800cae4:	e015      	b.n	800cb12 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	429a      	cmp	r2, r3
 800caee:	d902      	bls.n	800caf6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800caf0:	2305      	movs	r3, #5
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
 800caf4:	e00d      	b.n	800cb12 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00a      	beq.n	800cb12 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cafc:	f3ef 8305 	mrs	r3, IPSR
 800cb00:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cb02:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cb04:	4b1d      	ldr	r3, [pc, #116]	; (800cb7c <_txe_byte_allocate+0xdc>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cb0e:	2304      	movs	r3, #4
 800cb10:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d108      	bne.n	800cb2a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cb18:	4b19      	ldr	r3, [pc, #100]	; (800cb80 <_txe_byte_allocate+0xe0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	4a18      	ldr	r2, [pc, #96]	; (800cb84 <_txe_byte_allocate+0xe4>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d101      	bne.n	800cb2a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cb26:	2313      	movs	r3, #19
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d114      	bne.n	800cb5a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb30:	f3ef 8305 	mrs	r3, IPSR
 800cb34:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cb36:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cb38:	4b10      	ldr	r3, [pc, #64]	; (800cb7c <_txe_byte_allocate+0xdc>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00b      	beq.n	800cb5a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb42:	f3ef 8305 	mrs	r3, IPSR
 800cb46:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cb48:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <_txe_byte_allocate+0xdc>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cb54:	d201      	bcs.n	800cb5a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cb56:	2313      	movs	r3, #19
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d106      	bne.n	800cb6e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7fd ff7e 	bl	800aa68 <_tx_byte_allocate>
 800cb6c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3728      	adds	r7, #40	; 0x28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	42595445 	.word	0x42595445
 800cb7c:	20025814 	.word	0x20025814
 800cb80:	2004cd44 	.word	0x2004cd44
 800cb84:	2004ce8c 	.word	0x2004ce8c

0800cb88 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b092      	sub	sp, #72	; 0x48
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cb96:	2300      	movs	r3, #0
 800cb98:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d102      	bne.n	800cba6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cba0:	2302      	movs	r3, #2
 800cba2:	647b      	str	r3, [r7, #68]	; 0x44
 800cba4:	e075      	b.n	800cc92 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800cba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba8:	2b34      	cmp	r3, #52	; 0x34
 800cbaa:	d002      	beq.n	800cbb2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cbac:	2302      	movs	r3, #2
 800cbae:	647b      	str	r3, [r7, #68]	; 0x44
 800cbb0:	e06f      	b.n	800cc92 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cbba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbbc:	b672      	cpsid	i
    return(int_posture);
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cbc0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cbc2:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <_txe_byte_pool_create+0x128>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	4a39      	ldr	r2, [pc, #228]	; (800ccb0 <_txe_byte_pool_create+0x128>)
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	f383 8810 	msr	PRIMASK, r3
}
 800cbd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800cbd8:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <_txe_byte_pool_create+0x12c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cbde:	2300      	movs	r3, #0
 800cbe0:	643b      	str	r3, [r7, #64]	; 0x40
 800cbe2:	e009      	b.n	800cbf8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d00b      	beq.n	800cc04 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800cbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cbf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbf8:	4b2f      	ldr	r3, [pc, #188]	; (800ccb8 <_txe_byte_pool_create+0x130>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d3f0      	bcc.n	800cbe4 <_txe_byte_pool_create+0x5c>
 800cc02:	e000      	b.n	800cc06 <_txe_byte_pool_create+0x7e>
                break;
 800cc04:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc06:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0a:	623b      	str	r3, [r7, #32]
    return(posture);
 800cc0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cc0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc10:	b672      	cpsid	i
    return(int_posture);
 800cc12:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cc14:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cc16:	4b26      	ldr	r3, [pc, #152]	; (800ccb0 <_txe_byte_pool_create+0x128>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	4a24      	ldr	r2, [pc, #144]	; (800ccb0 <_txe_byte_pool_create+0x128>)
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	f383 8810 	msr	PRIMASK, r3
}
 800cc2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cc2c:	f7ff f992 	bl	800bf54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d102      	bne.n	800cc3e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc3c:	e029      	b.n	800cc92 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800cc44:	2303      	movs	r3, #3
 800cc46:	647b      	str	r3, [r7, #68]	; 0x44
 800cc48:	e023      	b.n	800cc92 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2b63      	cmp	r3, #99	; 0x63
 800cc4e:	d802      	bhi.n	800cc56 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800cc50:	2305      	movs	r3, #5
 800cc52:	647b      	str	r3, [r7, #68]	; 0x44
 800cc54:	e01d      	b.n	800cc92 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cc56:	4b19      	ldr	r3, [pc, #100]	; (800ccbc <_txe_byte_pool_create+0x134>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc5e:	4a18      	ldr	r2, [pc, #96]	; (800ccc0 <_txe_byte_pool_create+0x138>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d101      	bne.n	800cc68 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cc64:	2313      	movs	r3, #19
 800cc66:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc68:	f3ef 8305 	mrs	r3, IPSR
 800cc6c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cc6e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc70:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <_txe_byte_pool_create+0x13c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00b      	beq.n	800cc92 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc7a:	f3ef 8305 	mrs	r3, IPSR
 800cc7e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cc80:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <_txe_byte_pool_create+0x13c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc8c:	d201      	bcs.n	800cc92 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cc8e:	2313      	movs	r3, #19
 800cc90:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cc92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	68b9      	ldr	r1, [r7, #8]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7fe f824 	bl	800acec <_tx_byte_pool_create>
 800cca4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3748      	adds	r7, #72	; 0x48
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	2004cddc 	.word	0x2004cddc
 800ccb4:	2004cd34 	.word	0x2004cd34
 800ccb8:	2004cd38 	.word	0x2004cd38
 800ccbc:	2004cd44 	.word	0x2004cd44
 800ccc0:	2004ce8c 	.word	0x2004ce8c
 800ccc4:	20025814 	.word	0x20025814

0800ccc8 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b094      	sub	sp, #80	; 0x50
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d102      	bne.n	800cce6 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cce0:	2309      	movs	r3, #9
 800cce2:	647b      	str	r3, [r7, #68]	; 0x44
 800cce4:	e083      	b.n	800cdee <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800cce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cce8:	2b38      	cmp	r3, #56	; 0x38
 800ccea:	d002      	beq.n	800ccf2 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ccec:	2309      	movs	r3, #9
 800ccee:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf0:	e07d      	b.n	800cdee <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccfc:	b672      	cpsid	i
    return(int_posture);
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cd00:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cd02:	4b43      	ldr	r3, [pc, #268]	; (800ce10 <_txe_queue_create+0x148>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3301      	adds	r3, #1
 800cd08:	4a41      	ldr	r2, [pc, #260]	; (800ce10 <_txe_queue_create+0x148>)
 800cd0a:	6013      	str	r3, [r2, #0]
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	f383 8810 	msr	PRIMASK, r3
}
 800cd16:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800cd18:	4b3e      	ldr	r3, [pc, #248]	; (800ce14 <_txe_queue_create+0x14c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800cd1e:	2300      	movs	r3, #0
 800cd20:	643b      	str	r3, [r7, #64]	; 0x40
 800cd22:	e009      	b.n	800cd38 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d00b      	beq.n	800cd44 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800cd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd34:	3301      	adds	r3, #1
 800cd36:	643b      	str	r3, [r7, #64]	; 0x40
 800cd38:	4b37      	ldr	r3, [pc, #220]	; (800ce18 <_txe_queue_create+0x150>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d3f0      	bcc.n	800cd24 <_txe_queue_create+0x5c>
 800cd42:	e000      	b.n	800cd46 <_txe_queue_create+0x7e>
                break;
 800cd44:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd46:	f3ef 8310 	mrs	r3, PRIMASK
 800cd4a:	623b      	str	r3, [r7, #32]
    return(posture);
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cd4e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd50:	b672      	cpsid	i
    return(int_posture);
 800cd52:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cd54:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cd56:	4b2e      	ldr	r3, [pc, #184]	; (800ce10 <_txe_queue_create+0x148>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	4a2c      	ldr	r2, [pc, #176]	; (800ce10 <_txe_queue_create+0x148>)
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	f383 8810 	msr	PRIMASK, r3
}
 800cd6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cd6c:	f7ff f8f2 	bl	800bf54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d102      	bne.n	800cd7e <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800cd78:	2309      	movs	r3, #9
 800cd7a:	647b      	str	r3, [r7, #68]	; 0x44
 800cd7c:	e037      	b.n	800cdee <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800cd84:	2303      	movs	r3, #3
 800cd86:	647b      	str	r3, [r7, #68]	; 0x44
 800cd88:	e031      	b.n	800cdee <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800cd90:	2305      	movs	r3, #5
 800cd92:	647b      	str	r3, [r7, #68]	; 0x44
 800cd94:	e02b      	b.n	800cdee <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b10      	cmp	r3, #16
 800cd9a:	d902      	bls.n	800cda2 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800cd9c:	2305      	movs	r3, #5
 800cd9e:	647b      	str	r3, [r7, #68]	; 0x44
 800cda0:	e025      	b.n	800cdee <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800cda2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cda4:	089b      	lsrs	r3, r3, #2
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d902      	bls.n	800cdb2 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800cdac:	2305      	movs	r3, #5
 800cdae:	647b      	str	r3, [r7, #68]	; 0x44
 800cdb0:	e01d      	b.n	800cdee <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cdb2:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <_txe_queue_create+0x154>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdba:	4a19      	ldr	r2, [pc, #100]	; (800ce20 <_txe_queue_create+0x158>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d101      	bne.n	800cdc4 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cdc0:	2313      	movs	r3, #19
 800cdc2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdc4:	f3ef 8305 	mrs	r3, IPSR
 800cdc8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cdca:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cdcc:	4b15      	ldr	r3, [pc, #84]	; (800ce24 <_txe_queue_create+0x15c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00b      	beq.n	800cdee <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdd6:	f3ef 8305 	mrs	r3, IPSR
 800cdda:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cddc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cdde:	4b11      	ldr	r3, [pc, #68]	; (800ce24 <_txe_queue_create+0x15c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cde8:	d201      	bcs.n	800cdee <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cdea:	2313      	movs	r3, #19
 800cdec:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cdee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d108      	bne.n	800ce06 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800cdf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7fe fa0a 	bl	800b218 <_tx_queue_create>
 800ce04:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800ce06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3748      	adds	r7, #72	; 0x48
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	2004cddc 	.word	0x2004cddc
 800ce14:	2004cd14 	.word	0x2004cd14
 800ce18:	2004cd18 	.word	0x2004cd18
 800ce1c:	2004cd44 	.word	0x2004cd44
 800ce20:	2004ce8c 	.word	0x2004ce8c
 800ce24:	20025814 	.word	0x20025814

0800ce28 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ce34:	2300      	movs	r3, #0
 800ce36:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ce3e:	2309      	movs	r3, #9
 800ce40:	61fb      	str	r3, [r7, #28]
 800ce42:	e025      	b.n	800ce90 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a18      	ldr	r2, [pc, #96]	; (800ceac <_txe_queue_receive+0x84>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d002      	beq.n	800ce54 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ce4e:	2309      	movs	r3, #9
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	e01d      	b.n	800ce90 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d102      	bne.n	800ce60 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	61fb      	str	r3, [r7, #28]
 800ce5e:	e017      	b.n	800ce90 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d014      	beq.n	800ce90 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce66:	f3ef 8305 	mrs	r3, IPSR
 800ce6a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ce6c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce6e:	4b10      	ldr	r3, [pc, #64]	; (800ceb0 <_txe_queue_receive+0x88>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ce78:	2304      	movs	r3, #4
 800ce7a:	61fb      	str	r3, [r7, #28]
 800ce7c:	e008      	b.n	800ce90 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <_txe_queue_receive+0x8c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	4a0c      	ldr	r2, [pc, #48]	; (800ceb8 <_txe_queue_receive+0x90>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d101      	bne.n	800ce90 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d105      	bne.n	800cea2 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7fe fa30 	bl	800b300 <_tx_queue_receive>
 800cea0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800cea2:	69fb      	ldr	r3, [r7, #28]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	51554555 	.word	0x51554555
 800ceb0:	20025814 	.word	0x20025814
 800ceb4:	2004cd44 	.word	0x2004cd44
 800ceb8:	2004ce8c 	.word	0x2004ce8c

0800cebc <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cec8:	2300      	movs	r3, #0
 800ceca:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ced2:	2309      	movs	r3, #9
 800ced4:	61fb      	str	r3, [r7, #28]
 800ced6:	e025      	b.n	800cf24 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a18      	ldr	r2, [pc, #96]	; (800cf40 <_txe_queue_send+0x84>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d002      	beq.n	800cee8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cee2:	2309      	movs	r3, #9
 800cee4:	61fb      	str	r3, [r7, #28]
 800cee6:	e01d      	b.n	800cf24 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d102      	bne.n	800cef4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ceee:	2303      	movs	r3, #3
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	e017      	b.n	800cf24 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d014      	beq.n	800cf24 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cefa:	f3ef 8305 	mrs	r3, IPSR
 800cefe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cf00:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf02:	4b10      	ldr	r3, [pc, #64]	; (800cf44 <_txe_queue_send+0x88>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	e008      	b.n	800cf24 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cf12:	4b0d      	ldr	r3, [pc, #52]	; (800cf48 <_txe_queue_send+0x8c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	4a0c      	ldr	r2, [pc, #48]	; (800cf4c <_txe_queue_send+0x90>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d101      	bne.n	800cf24 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cf20:	2304      	movs	r3, #4
 800cf22:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7fe fbae 	bl	800b690 <_tx_queue_send>
 800cf34:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800cf36:	69fb      	ldr	r3, [r7, #28]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3720      	adds	r7, #32
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	51554555 	.word	0x51554555
 800cf44:	20025814 	.word	0x20025814
 800cf48:	2004cd44 	.word	0x2004cd44
 800cf4c:	2004ce8c 	.word	0x2004ce8c

0800cf50 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b092      	sub	sp, #72	; 0x48
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
 800cf5c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf68:	230c      	movs	r3, #12
 800cf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf6c:	e054      	b.n	800d018 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b1c      	cmp	r3, #28
 800cf72:	d002      	beq.n	800cf7a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf74:	230c      	movs	r3, #12
 800cf76:	647b      	str	r3, [r7, #68]	; 0x44
 800cf78:	e04e      	b.n	800d018 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf7a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cf82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf84:	b672      	cpsid	i
    return(int_posture);
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cf88:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cf8a:	4b36      	ldr	r3, [pc, #216]	; (800d064 <_txe_semaphore_create+0x114>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	4a34      	ldr	r2, [pc, #208]	; (800d064 <_txe_semaphore_create+0x114>)
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	f383 8810 	msr	PRIMASK, r3
}
 800cf9e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800cfa0:	4b31      	ldr	r3, [pc, #196]	; (800d068 <_txe_semaphore_create+0x118>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	643b      	str	r3, [r7, #64]	; 0x40
 800cfaa:	e009      	b.n	800cfc0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d00b      	beq.n	800cfcc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800cfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	643b      	str	r3, [r7, #64]	; 0x40
 800cfc0:	4b2a      	ldr	r3, [pc, #168]	; (800d06c <_txe_semaphore_create+0x11c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d3f0      	bcc.n	800cfac <_txe_semaphore_create+0x5c>
 800cfca:	e000      	b.n	800cfce <_txe_semaphore_create+0x7e>
                break;
 800cfcc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfce:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd2:	623b      	str	r3, [r7, #32]
    return(posture);
 800cfd4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cfd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfd8:	b672      	cpsid	i
    return(int_posture);
 800cfda:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cfdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cfde:	4b21      	ldr	r3, [pc, #132]	; (800d064 <_txe_semaphore_create+0x114>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	4a1f      	ldr	r2, [pc, #124]	; (800d064 <_txe_semaphore_create+0x114>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	f383 8810 	msr	PRIMASK, r3
}
 800cff2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cff4:	f7fe ffae 	bl	800bf54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d102      	bne.n	800d006 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800d000:	230c      	movs	r3, #12
 800d002:	647b      	str	r3, [r7, #68]	; 0x44
 800d004:	e008      	b.n	800d018 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d006:	4b1a      	ldr	r3, [pc, #104]	; (800d070 <_txe_semaphore_create+0x120>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d00e:	4a19      	ldr	r2, [pc, #100]	; (800d074 <_txe_semaphore_create+0x124>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d101      	bne.n	800d018 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d014:	2313      	movs	r3, #19
 800d016:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d114      	bne.n	800d048 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d01e:	f3ef 8305 	mrs	r3, IPSR
 800d022:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d024:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <_txe_semaphore_create+0x128>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d030:	f3ef 8305 	mrs	r3, IPSR
 800d034:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d036:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d038:	4b0f      	ldr	r3, [pc, #60]	; (800d078 <_txe_semaphore_create+0x128>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d042:	d201      	bcs.n	800d048 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d044:	2313      	movs	r3, #19
 800d046:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	68b9      	ldr	r1, [r7, #8]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f7fe fcc4 	bl	800b9e0 <_tx_semaphore_create>
 800d058:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3748      	adds	r7, #72	; 0x48
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	2004cddc 	.word	0x2004cddc
 800d068:	2004cd0c 	.word	0x2004cd0c
 800d06c:	2004cd10 	.word	0x2004cd10
 800d070:	2004cd44 	.word	0x2004cd44
 800d074:	2004ce8c 	.word	0x2004ce8c
 800d078:	20025814 	.word	0x20025814

0800d07c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d086:	2300      	movs	r3, #0
 800d088:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d102      	bne.n	800d096 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d090:	230c      	movs	r3, #12
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	e01f      	b.n	800d0d6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <_txe_semaphore_get+0x74>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d002      	beq.n	800d0a6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d0a0:	230c      	movs	r3, #12
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e017      	b.n	800d0d6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d014      	beq.n	800d0d6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0ac:	f3ef 8305 	mrs	r3, IPSR
 800d0b0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d0b2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <_txe_semaphore_get+0x78>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d0be:	2304      	movs	r3, #4
 800d0c0:	617b      	str	r3, [r7, #20]
 800d0c2:	e008      	b.n	800d0d6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <_txe_semaphore_get+0x7c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	4a0b      	ldr	r2, [pc, #44]	; (800d0fc <_txe_semaphore_get+0x80>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d101      	bne.n	800d0d6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d0d2:	2304      	movs	r3, #4
 800d0d4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d104      	bne.n	800d0e6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fe fcd0 	bl	800ba84 <_tx_semaphore_get>
 800d0e4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d0e6:	697b      	ldr	r3, [r7, #20]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	53454d41 	.word	0x53454d41
 800d0f4:	20025814 	.word	0x20025814
 800d0f8:	2004cd44 	.word	0x2004cd44
 800d0fc:	2004ce8c 	.word	0x2004ce8c

0800d100 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d102      	bne.n	800d114 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d10e:	230c      	movs	r3, #12
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	e00b      	b.n	800d12c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a07      	ldr	r2, [pc, #28]	; (800d138 <_txe_semaphore_put+0x38>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d002      	beq.n	800d124 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d11e:	230c      	movs	r3, #12
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	e003      	b.n	800d12c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7fe fd3f 	bl	800bba8 <_tx_semaphore_put>
 800d12a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d12c:	68fb      	ldr	r3, [r7, #12]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	53454d41 	.word	0x53454d41

0800d13c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b09a      	sub	sp, #104	; 0x68
 800d140:	af06      	add	r7, sp, #24
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d14a:	2300      	movs	r3, #0
 800d14c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d154:	230e      	movs	r3, #14
 800d156:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d158:	e0bb      	b.n	800d2d2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d15a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d15c:	2bb0      	cmp	r3, #176	; 0xb0
 800d15e:	d002      	beq.n	800d166 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d160:	230e      	movs	r3, #14
 800d162:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d164:	e0b5      	b.n	800d2d2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d166:	f3ef 8310 	mrs	r3, PRIMASK
 800d16a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d16e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d170:	b672      	cpsid	i
    return(int_posture);
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d174:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d176:	4b64      	ldr	r3, [pc, #400]	; (800d308 <_txe_thread_create+0x1cc>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3301      	adds	r3, #1
 800d17c:	4a62      	ldr	r2, [pc, #392]	; (800d308 <_txe_thread_create+0x1cc>)
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	f383 8810 	msr	PRIMASK, r3
}
 800d18a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d18c:	2300      	movs	r3, #0
 800d18e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800d190:	4b5e      	ldr	r3, [pc, #376]	; (800d30c <_txe_thread_create+0x1d0>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d198:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d19c:	3b01      	subs	r3, #1
 800d19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1a0:	4413      	add	r3, r2
 800d1a2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d1ac:	e02b      	b.n	800d206 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d101      	bne.n	800d1ba <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d028      	beq.n	800d212 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d308      	bcc.n	800d1dc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d203      	bcs.n	800d1dc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d308      	bcc.n	800d1f8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d203      	bcs.n	800d1f8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d202:	3301      	adds	r3, #1
 800d204:	647b      	str	r3, [r7, #68]	; 0x44
 800d206:	4b42      	ldr	r3, [pc, #264]	; (800d310 <_txe_thread_create+0x1d4>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d3ce      	bcc.n	800d1ae <_txe_thread_create+0x72>
 800d210:	e000      	b.n	800d214 <_txe_thread_create+0xd8>
                break;
 800d212:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d214:	f3ef 8310 	mrs	r3, PRIMASK
 800d218:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d21a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d21c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d21e:	b672      	cpsid	i
    return(int_posture);
 800d220:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d222:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d224:	4b38      	ldr	r3, [pc, #224]	; (800d308 <_txe_thread_create+0x1cc>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3b01      	subs	r3, #1
 800d22a:	4a37      	ldr	r2, [pc, #220]	; (800d308 <_txe_thread_create+0x1cc>)
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d230:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d232:	6a3b      	ldr	r3, [r7, #32]
 800d234:	f383 8810 	msr	PRIMASK, r3
}
 800d238:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d23a:	f7fe fe8b 	bl	800bf54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d242:	429a      	cmp	r2, r3
 800d244:	d102      	bne.n	800d24c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d246:	230e      	movs	r3, #14
 800d248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d24a:	e042      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d24c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d102      	bne.n	800d258 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d252:	2303      	movs	r3, #3
 800d254:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d256:	e03c      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d102      	bne.n	800d264 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d25e:	2303      	movs	r3, #3
 800d260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d262:	e036      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d266:	2bc7      	cmp	r3, #199	; 0xc7
 800d268:	d802      	bhi.n	800d270 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d26a:	2305      	movs	r3, #5
 800d26c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d26e:	e030      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d272:	2b1f      	cmp	r3, #31
 800d274:	d902      	bls.n	800d27c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d276:	230f      	movs	r3, #15
 800d278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d27a:	e02a      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d27c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d27e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d280:	429a      	cmp	r2, r3
 800d282:	d902      	bls.n	800d28a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d284:	2318      	movs	r3, #24
 800d286:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d288:	e023      	b.n	800d2d2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d902      	bls.n	800d296 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d290:	2310      	movs	r3, #16
 800d292:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d294:	e01d      	b.n	800d2d2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d296:	4b1f      	ldr	r3, [pc, #124]	; (800d314 <_txe_thread_create+0x1d8>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	4a1e      	ldr	r2, [pc, #120]	; (800d318 <_txe_thread_create+0x1dc>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d101      	bne.n	800d2a8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d2a4:	2313      	movs	r3, #19
 800d2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2a8:	f3ef 8305 	mrs	r3, IPSR
 800d2ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d2ae:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2b0:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <_txe_thread_create+0x1e0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00b      	beq.n	800d2d2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2ba:	f3ef 8305 	mrs	r3, IPSR
 800d2be:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d2c0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d2c2:	4b16      	ldr	r3, [pc, #88]	; (800d31c <_txe_thread_create+0x1e0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d2cc:	d201      	bcs.n	800d2d2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d2ce:	2313      	movs	r3, #19
 800d2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d112      	bne.n	800d2fe <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2da:	9305      	str	r3, [sp, #20]
 800d2dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2e2:	9303      	str	r3, [sp, #12]
 800d2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2e6:	9302      	str	r3, [sp, #8]
 800d2e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	68b9      	ldr	r1, [r7, #8]
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7fe fcae 	bl	800bc58 <_tx_thread_create>
 800d2fc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800d300:	4618      	mov	r0, r3
 800d302:	3750      	adds	r7, #80	; 0x50
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	2004cddc 	.word	0x2004cddc
 800d30c:	2004cd4c 	.word	0x2004cd4c
 800d310:	2004cd50 	.word	0x2004cd50
 800d314:	2004cd44 	.word	0x2004cd44
 800d318:	2004ce8c 	.word	0x2004ce8c
 800d31c:	20025814 	.word	0x20025814

0800d320 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d32e:	2315      	movs	r3, #21
 800d330:	60fb      	str	r3, [r7, #12]
 800d332:	e00b      	b.n	800d34c <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a07      	ldr	r2, [pc, #28]	; (800d358 <_txe_timer_activate+0x38>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d002      	beq.n	800d344 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d33e:	2315      	movs	r3, #21
 800d340:	60fb      	str	r3, [r7, #12]
 800d342:	e003      	b.n	800d34c <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff f8e5 	bl	800c514 <_tx_timer_activate>
 800d34a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d34c:	68fb      	ldr	r3, [r7, #12]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	4154494d 	.word	0x4154494d

0800d35c <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b096      	sub	sp, #88	; 0x58
 800d360:	af04      	add	r7, sp, #16
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d36a:	2300      	movs	r3, #0
 800d36c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d374:	2315      	movs	r3, #21
 800d376:	647b      	str	r3, [r7, #68]	; 0x44
 800d378:	e059      	b.n	800d42e <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800d37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d37c:	2b2c      	cmp	r3, #44	; 0x2c
 800d37e:	d002      	beq.n	800d386 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d380:	2315      	movs	r3, #21
 800d382:	647b      	str	r3, [r7, #68]	; 0x44
 800d384:	e053      	b.n	800d42e <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d386:	f3ef 8310 	mrs	r3, PRIMASK
 800d38a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d38e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d390:	b672      	cpsid	i
    return(int_posture);
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d394:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d396:	4b41      	ldr	r3, [pc, #260]	; (800d49c <_txe_timer_create+0x140>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3301      	adds	r3, #1
 800d39c:	4a3f      	ldr	r2, [pc, #252]	; (800d49c <_txe_timer_create+0x140>)
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	f383 8810 	msr	PRIMASK, r3
}
 800d3aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800d3ac:	4b3c      	ldr	r3, [pc, #240]	; (800d4a0 <_txe_timer_create+0x144>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800d3b6:	e009      	b.n	800d3cc <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800d3b8:	68fa      	ldr	r2, [r7, #12]
 800d3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d00b      	beq.n	800d3d8 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800d3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800d3cc:	4b35      	ldr	r3, [pc, #212]	; (800d4a4 <_txe_timer_create+0x148>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d3f0      	bcc.n	800d3b8 <_txe_timer_create+0x5c>
 800d3d6:	e000      	b.n	800d3da <_txe_timer_create+0x7e>
                break;
 800d3d8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3da:	f3ef 8310 	mrs	r3, PRIMASK
 800d3de:	623b      	str	r3, [r7, #32]
    return(posture);
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d3e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3e4:	b672      	cpsid	i
    return(int_posture);
 800d3e6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d3e8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d3ea:	4b2c      	ldr	r3, [pc, #176]	; (800d49c <_txe_timer_create+0x140>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	4a2a      	ldr	r2, [pc, #168]	; (800d49c <_txe_timer_create+0x140>)
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	f383 8810 	msr	PRIMASK, r3
}
 800d3fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d400:	f7fe fda8 	bl	800bf54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d408:	429a      	cmp	r2, r3
 800d40a:	d102      	bne.n	800d412 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800d40c:	2315      	movs	r3, #21
 800d40e:	647b      	str	r3, [r7, #68]	; 0x44
 800d410:	e00d      	b.n	800d42e <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800d412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d414:	2b00      	cmp	r3, #0
 800d416:	d102      	bne.n	800d41e <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800d418:	2316      	movs	r3, #22
 800d41a:	647b      	str	r3, [r7, #68]	; 0x44
 800d41c:	e007      	b.n	800d42e <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800d41e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d420:	2b01      	cmp	r3, #1
 800d422:	d004      	beq.n	800d42e <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800d424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800d42a:	2317      	movs	r3, #23
 800d42c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d430:	2b00      	cmp	r3, #0
 800d432:	d11d      	bne.n	800d470 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d434:	4b1c      	ldr	r3, [pc, #112]	; (800d4a8 <_txe_timer_create+0x14c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ac <_txe_timer_create+0x150>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d101      	bne.n	800d446 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d442:	2313      	movs	r3, #19
 800d444:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d446:	f3ef 8305 	mrs	r3, IPSR
 800d44a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d44c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d44e:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <_txe_timer_create+0x154>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4313      	orrs	r3, r2
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00b      	beq.n	800d470 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d458:	f3ef 8305 	mrs	r3, IPSR
 800d45c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d45e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d460:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <_txe_timer_create+0x154>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4313      	orrs	r3, r2
 800d466:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d46a:	d201      	bcs.n	800d470 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d46c:	2313      	movs	r3, #19
 800d46e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10c      	bne.n	800d490 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800d476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d478:	9302      	str	r3, [sp, #8]
 800d47a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f7ff f86f 	bl	800c56c <_tx_timer_create>
 800d48e:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800d490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d492:	4618      	mov	r0, r3
 800d494:	3748      	adds	r7, #72	; 0x48
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	2004cddc 	.word	0x2004cddc
 800d4a0:	2004ce80 	.word	0x2004ce80
 800d4a4:	2004ce84 	.word	0x2004ce84
 800d4a8:	2004cd44 	.word	0x2004cd44
 800d4ac:	2004ce8c 	.word	0x2004ce8c
 800d4b0:	20025814 	.word	0x20025814

0800d4b4 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d4b8:	f005 fd4c 	bl	8012f54 <touchgfx_components_init>
  touchgfx_init();
 800d4bc:	f005 fd20 	bl	8012f00 <touchgfx_init>
}
 800d4c0:	bf00      	nop
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08c      	sub	sp, #48	; 0x30
 800d4c8:	af08      	add	r7, sp, #32
 800d4ca:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 800d4d4:	f107 0108 	add.w	r1, r7, #8
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff fade 	bl	800caa0 <_txe_byte_allocate>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	60fb      	str	r3, [r7, #12]
 800d4ee:	e019      	b.n	800d524 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	22b0      	movs	r2, #176	; 0xb0
 800d4f4:	9206      	str	r2, [sp, #24]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	9205      	str	r2, [sp, #20]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	9204      	str	r2, [sp, #16]
 800d4fe:	2205      	movs	r2, #5
 800d500:	9203      	str	r2, [sp, #12]
 800d502:	2205      	movs	r2, #5
 800d504:	9202      	str	r2, [sp, #8]
 800d506:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800d50a:	9201      	str	r2, [sp, #4]
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	2300      	movs	r3, #0
 800d510:	4a07      	ldr	r2, [pc, #28]	; (800d530 <MX_TouchGFX_Init+0x6c>)
 800d512:	4908      	ldr	r1, [pc, #32]	; (800d534 <MX_TouchGFX_Init+0x70>)
 800d514:	4808      	ldr	r0, [pc, #32]	; (800d538 <MX_TouchGFX_Init+0x74>)
 800d516:	f7ff fe11 	bl	800d13c <_txe_thread_create>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800d520:	230e      	movs	r3, #14
 800d522:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d524:	68fb      	ldr	r3, [r7, #12]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	0800d53d 	.word	0x0800d53d
 800d534:	08027370 	.word	0x08027370
 800d538:	2004d34c 	.word	0x2004d34c

0800d53c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800d544:	f005 fd0e 	bl	8012f64 <touchgfx_taskEntry>
}
 800d548:	bf00      	nop
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
    {
 800d558:	4a04      	ldr	r2, [pc, #16]	; (800d56c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	601a      	str	r2, [r3, #0]
    }
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	080283d8 	.word	0x080283d8

0800d570 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
    }
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff ffe9 	bl	800d550 <_ZN8touchgfx12FontProviderD1Ev>
 800d57e:	2104      	movs	r1, #4
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f018 fde1 	bl	8026148 <_ZdlPvj>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d59c:	887b      	ldrh	r3, [r7, #2]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	d010      	beq.n	800d5c4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	dc13      	bgt.n	800d5ce <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d005      	beq.n	800d5ba <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d5ae:	e00e      	b.n	800d5ce <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d5b0:	f003 fdce 	bl	8011150 <_ZN17TypedTextDatabase8getFontsEv>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	e00a      	b.n	800d5d0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d5ba:	f003 fdc9 	bl	8011150 <_ZN17TypedTextDatabase8getFontsEv>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	e005      	b.n	800d5d0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d5c4:	f003 fdc4 	bl	8011150 <_ZN17TypedTextDatabase8getFontsEv>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	e000      	b.n	800d5d0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d5ce:	2300      	movs	r3, #0
    }
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	4a05      	ldr	r2, [pc, #20]	; (800d5f8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff ffb1 	bl	800d550 <_ZN8touchgfx12FontProviderD1Ev>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	080283c4 	.word	0x080283c4

0800d5fc <_ZN23ApplicationFontProviderD0Ev>:
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ffe7 	bl	800d5d8 <_ZN23ApplicationFontProviderD1Ev>
 800d60a:	2104      	movs	r1, #4
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f018 fd9b 	bl	8026148 <_ZdlPvj>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
    {
 800d624:	4a04      	ldr	r2, [pc, #16]	; (800d638 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	601a      	str	r2, [r3, #0]
    }
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	08028898 	.word	0x08028898

0800d63c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
    }
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ffe9 	bl	800d61c <_ZN8touchgfx4FontD1Ev>
 800d64a:	2110      	movs	r1, #16
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f018 fd7b 	bl	8026148 <_ZdlPvj>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d65c:	b590      	push	{r4, r7, lr}
 800d65e:	b087      	sub	sp, #28
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	460b      	mov	r3, r1
 800d666:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d668:	887b      	ldrh	r3, [r7, #2]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	e010      	b.n	800d694 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3308      	adds	r3, #8
 800d680:	681c      	ldr	r4, [r3, #0]
 800d682:	f107 030f 	add.w	r3, r7, #15
 800d686:	f107 0210 	add.w	r2, r7, #16
 800d68a:	8879      	ldrh	r1, [r7, #2]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	47a0      	blx	r4
 800d690:	6178      	str	r0, [r7, #20]
        return glyph;
 800d692:	697b      	ldr	r3, [r7, #20]
    }
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd90      	pop	{r4, r7, pc}

0800d69c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	895b      	ldrh	r3, [r3, #10]
    }
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	899b      	ldrh	r3, [r3, #12]
    }
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	889b      	ldrh	r3, [r3, #4]
    }
 800d6d8:	4618      	mov	r0, r3
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	889a      	ldrh	r2, [r3, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	799b      	ldrb	r3, [r3, #6]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4413      	add	r3, r2
 800d6f8:	b29b      	uxth	r3, r3
    }
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	79db      	ldrb	r3, [r3, #7]
 800d712:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d716:	b2db      	uxtb	r3, r3
    }
 800d718:	4618      	mov	r0, r3
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	79db      	ldrb	r3, [r3, #7]
 800d730:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d734:	b2db      	uxtb	r3, r3
    }
 800d736:	4618      	mov	r0, r3
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
	...

0800d744 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	4a05      	ldr	r2, [pc, #20]	; (800d764 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff ff61 	bl	800d61c <_ZN8touchgfx4FontD1Ev>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	08029444 	.word	0x08029444

0800d768 <_ZN8touchgfx9ConstFontD0Ev>:
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff ffe7 	bl	800d744 <_ZN8touchgfx9ConstFontD1Ev>
 800d776:	2118      	movs	r1, #24
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f018 fce5 	bl	8026148 <_ZdlPvj>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	4a05      	ldr	r2, [pc, #20]	; (800d7a8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff ffd3 	bl	800d744 <_ZN8touchgfx9ConstFontD1Ev>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	080283ec 	.word	0x080283ec

0800d7ac <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff ffe7 	bl	800d788 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d7ba:	2128      	movs	r1, #40	; 0x28
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f018 fcc3 	bl	8026148 <_ZdlPvj>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
    }
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	; 0x30
 800d800:	af08      	add	r7, sp, #32
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4611      	mov	r1, r2
 800d808:	461a      	mov	r2, r3
 800d80a:	460b      	mov	r3, r1
 800d80c:	80fb      	strh	r3, [r7, #6]
 800d80e:	4613      	mov	r3, r2
 800d810:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	88b9      	ldrh	r1, [r7, #4]
 800d816:	88fa      	ldrh	r2, [r7, #6]
 800d818:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d81a:	9306      	str	r3, [sp, #24]
 800d81c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d81e:	9305      	str	r3, [sp, #20]
 800d820:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d824:	9304      	str	r3, [sp, #16]
 800d826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d82a:	9303      	str	r3, [sp, #12]
 800d82c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d830:	9302      	str	r3, [sp, #8]
 800d832:	7f3b      	ldrb	r3, [r7, #28]
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	7e3b      	ldrb	r3, [r7, #24]
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	460b      	mov	r3, r1
 800d83c:	68b9      	ldr	r1, [r7, #8]
 800d83e:	f00a ffbf 	bl	80187c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800d842:	4a0a      	ldr	r2, [pc, #40]	; (800d86c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	601a      	str	r2, [r3, #0]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d84c:	619a      	str	r2, [r3, #24]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d852:	61da      	str	r2, [r3, #28]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d858:	621a      	str	r2, [r3, #32]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d85e:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	080283ec 	.word	0x080283ec

0800d870 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	889b      	ldrh	r3, [r3, #4]
 800d884:	0adb      	lsrs	r3, r3, #11
 800d886:	b29b      	uxth	r3, r3
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4413      	add	r3, r2
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4413      	add	r3, r2
}
 800d896:	4618      	mov	r0, r3
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b089      	sub	sp, #36	; 0x24
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	60f8      	str	r0, [r7, #12]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	607a      	str	r2, [r7, #4]
 800d8ae:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d003      	beq.n	800d8be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	7b1b      	ldrb	r3, [r3, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e030      	b.n	800d924 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	69da      	ldr	r2, [r3, #28]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	7b5b      	ldrb	r3, [r3, #13]
 800d8ce:	021b      	lsls	r3, r3, #8
 800d8d0:	b21b      	sxth	r3, r3
 800d8d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8d6:	b219      	sxth	r1, r3
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	7adb      	ldrb	r3, [r3, #11]
 800d8dc:	b21b      	sxth	r3, r3
 800d8de:	430b      	orrs	r3, r1
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7b1b      	ldrb	r3, [r3, #12]
 800d8ee:	837b      	strh	r3, [r7, #26]
 800d8f0:	8b7b      	ldrh	r3, [r7, #26]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d015      	beq.n	800d922 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	881b      	ldrh	r3, [r3, #0]
 800d8fa:	897a      	ldrh	r2, [r7, #10]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d103      	bne.n	800d908 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d906:	e00d      	b.n	800d924 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	897a      	ldrh	r2, [r7, #10]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d306      	bcc.n	800d920 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d912:	8b7b      	ldrh	r3, [r7, #26]
 800d914:	3b01      	subs	r3, #1
 800d916:	837b      	strh	r3, [r7, #26]
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	3304      	adds	r3, #4
 800d91c:	61fb      	str	r3, [r7, #28]
 800d91e:	e7e7      	b.n	800d8f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d920:	bf00      	nop
        }
    }
    return 0;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3724      	adds	r7, #36	; 0x24
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__tcf_0+0xc>)
 800d936:	f7ff ff27 	bl	800d788 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	2004d3fc 	.word	0x2004d3fc

0800d940 <_Z23getFont_verdana_10_4bppv>:
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08c      	sub	sp, #48	; 0x30
 800d944:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d946:	4b1f      	ldr	r3, [pc, #124]	; (800d9c4 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d948:	e8d3 3f8f 	ldab	r3, [r3]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	bf0c      	ite	eq
 800d956:	2301      	moveq	r3, #1
 800d958:	2300      	movne	r3, #0
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d02c      	beq.n	800d9ba <_Z23getFont_verdana_10_4bppv+0x7a>
 800d960:	4818      	ldr	r0, [pc, #96]	; (800d9c4 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d962:	f018 fbf3 	bl	802614c <__cxa_guard_acquire>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bf14      	ite	ne
 800d96c:	2301      	movne	r3, #1
 800d96e:	2300      	moveq	r3, #0
 800d970:	b2db      	uxtb	r3, r3
 800d972:	2b00      	cmp	r3, #0
 800d974:	d021      	beq.n	800d9ba <_Z23getFont_verdana_10_4bppv+0x7a>
 800d976:	2300      	movs	r3, #0
 800d978:	930a      	str	r3, [sp, #40]	; 0x28
 800d97a:	2300      	movs	r3, #0
 800d97c:	9309      	str	r3, [sp, #36]	; 0x24
 800d97e:	2300      	movs	r3, #0
 800d980:	9308      	str	r3, [sp, #32]
 800d982:	233f      	movs	r3, #63	; 0x3f
 800d984:	9307      	str	r3, [sp, #28]
 800d986:	4b10      	ldr	r3, [pc, #64]	; (800d9c8 <_Z23getFont_verdana_10_4bppv+0x88>)
 800d988:	9306      	str	r3, [sp, #24]
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d98c:	9305      	str	r3, [sp, #20]
 800d98e:	2300      	movs	r3, #0
 800d990:	9304      	str	r3, [sp, #16]
 800d992:	2300      	movs	r3, #0
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	2301      	movs	r3, #1
 800d998:	9302      	str	r3, [sp, #8]
 800d99a:	2304      	movs	r3, #4
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	230a      	movs	r3, #10
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	490a      	ldr	r1, [pc, #40]	; (800d9d0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d9a8:	480a      	ldr	r0, [pc, #40]	; (800d9d4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d9aa:	f7ff ff27 	bl	800d7fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d9ae:	480a      	ldr	r0, [pc, #40]	; (800d9d8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800d9b0:	f018 fc14 	bl	80261dc <atexit>
 800d9b4:	4803      	ldr	r0, [pc, #12]	; (800d9c4 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d9b6:	f018 fbd5 	bl	8026164 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d9ba:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	2004d424 	.word	0x2004d424
 800d9c8:	08029a0c 	.word	0x08029a0c
 800d9cc:	08029a18 	.word	0x08029a18
 800d9d0:	080299dc 	.word	0x080299dc
 800d9d4:	2004d3fc 	.word	0x2004d3fc
 800d9d8:	0800d931 	.word	0x0800d931

0800d9dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__tcf_0+0xc>)
 800d9e2:	f7ff fed1 	bl	800d788 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	2004d428 	.word	0x2004d428

0800d9ec <_Z23getFont_verdana_20_4bppv>:
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b08c      	sub	sp, #48	; 0x30
 800d9f0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d9f2:	4b1f      	ldr	r3, [pc, #124]	; (800da70 <_Z23getFont_verdana_20_4bppv+0x84>)
 800d9f4:	e8d3 3f8f 	ldab	r3, [r3]
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	bf0c      	ite	eq
 800da02:	2301      	moveq	r3, #1
 800da04:	2300      	movne	r3, #0
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d02c      	beq.n	800da66 <_Z23getFont_verdana_20_4bppv+0x7a>
 800da0c:	4818      	ldr	r0, [pc, #96]	; (800da70 <_Z23getFont_verdana_20_4bppv+0x84>)
 800da0e:	f018 fb9d 	bl	802614c <__cxa_guard_acquire>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	bf14      	ite	ne
 800da18:	2301      	movne	r3, #1
 800da1a:	2300      	moveq	r3, #0
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d021      	beq.n	800da66 <_Z23getFont_verdana_20_4bppv+0x7a>
 800da22:	2300      	movs	r3, #0
 800da24:	930a      	str	r3, [sp, #40]	; 0x28
 800da26:	2300      	movs	r3, #0
 800da28:	9309      	str	r3, [sp, #36]	; 0x24
 800da2a:	2300      	movs	r3, #0
 800da2c:	9308      	str	r3, [sp, #32]
 800da2e:	233f      	movs	r3, #63	; 0x3f
 800da30:	9307      	str	r3, [sp, #28]
 800da32:	4b10      	ldr	r3, [pc, #64]	; (800da74 <_Z23getFont_verdana_20_4bppv+0x88>)
 800da34:	9306      	str	r3, [sp, #24]
 800da36:	4b10      	ldr	r3, [pc, #64]	; (800da78 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800da38:	9305      	str	r3, [sp, #20]
 800da3a:	2300      	movs	r3, #0
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	2300      	movs	r3, #0
 800da40:	9303      	str	r3, [sp, #12]
 800da42:	2301      	movs	r3, #1
 800da44:	9302      	str	r3, [sp, #8]
 800da46:	2304      	movs	r3, #4
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	2300      	movs	r3, #0
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	2314      	movs	r3, #20
 800da50:	2201      	movs	r2, #1
 800da52:	490a      	ldr	r1, [pc, #40]	; (800da7c <_Z23getFont_verdana_20_4bppv+0x90>)
 800da54:	480a      	ldr	r0, [pc, #40]	; (800da80 <_Z23getFont_verdana_20_4bppv+0x94>)
 800da56:	f7ff fed1 	bl	800d7fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800da5a:	480a      	ldr	r0, [pc, #40]	; (800da84 <_Z23getFont_verdana_20_4bppv+0x98>)
 800da5c:	f018 fbbe 	bl	80261dc <atexit>
 800da60:	4803      	ldr	r0, [pc, #12]	; (800da70 <_Z23getFont_verdana_20_4bppv+0x84>)
 800da62:	f018 fb7f 	bl	8026164 <__cxa_guard_release>
    return verdana_20_4bpp;
 800da66:	4b06      	ldr	r3, [pc, #24]	; (800da80 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800da68:	4618      	mov	r0, r3
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	2004d450 	.word	0x2004d450
 800da74:	08029a10 	.word	0x08029a10
 800da78:	08029a1c 	.word	0x08029a1c
 800da7c:	080299ec 	.word	0x080299ec
 800da80:	2004d428 	.word	0x2004d428
 800da84:	0800d9dd 	.word	0x0800d9dd

0800da88 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	4801      	ldr	r0, [pc, #4]	; (800da94 <__tcf_0+0xc>)
 800da8e:	f7ff fe7b 	bl	800d788 <_ZN8touchgfx13GeneratedFontD1Ev>
 800da92:	bd80      	pop	{r7, pc}
 800da94:	2004d454 	.word	0x2004d454

0800da98 <_Z23getFont_verdana_40_4bppv>:
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08c      	sub	sp, #48	; 0x30
 800da9c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800da9e:	4b1f      	ldr	r3, [pc, #124]	; (800db1c <_Z23getFont_verdana_40_4bppv+0x84>)
 800daa0:	e8d3 3f8f 	ldab	r3, [r3]
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	2b00      	cmp	r3, #0
 800daac:	bf0c      	ite	eq
 800daae:	2301      	moveq	r3, #1
 800dab0:	2300      	movne	r3, #0
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d02c      	beq.n	800db12 <_Z23getFont_verdana_40_4bppv+0x7a>
 800dab8:	4818      	ldr	r0, [pc, #96]	; (800db1c <_Z23getFont_verdana_40_4bppv+0x84>)
 800daba:	f018 fb47 	bl	802614c <__cxa_guard_acquire>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	bf14      	ite	ne
 800dac4:	2301      	movne	r3, #1
 800dac6:	2300      	moveq	r3, #0
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d021      	beq.n	800db12 <_Z23getFont_verdana_40_4bppv+0x7a>
 800dace:	2300      	movs	r3, #0
 800dad0:	930a      	str	r3, [sp, #40]	; 0x28
 800dad2:	2300      	movs	r3, #0
 800dad4:	9309      	str	r3, [sp, #36]	; 0x24
 800dad6:	2300      	movs	r3, #0
 800dad8:	9308      	str	r3, [sp, #32]
 800dada:	233f      	movs	r3, #63	; 0x3f
 800dadc:	9307      	str	r3, [sp, #28]
 800dade:	4b10      	ldr	r3, [pc, #64]	; (800db20 <_Z23getFont_verdana_40_4bppv+0x88>)
 800dae0:	9306      	str	r3, [sp, #24]
 800dae2:	4b10      	ldr	r3, [pc, #64]	; (800db24 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dae4:	9305      	str	r3, [sp, #20]
 800dae6:	2300      	movs	r3, #0
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	2300      	movs	r3, #0
 800daec:	9303      	str	r3, [sp, #12]
 800daee:	2301      	movs	r3, #1
 800daf0:	9302      	str	r3, [sp, #8]
 800daf2:	2304      	movs	r3, #4
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	2300      	movs	r3, #0
 800daf8:	9300      	str	r3, [sp, #0]
 800dafa:	2328      	movs	r3, #40	; 0x28
 800dafc:	2201      	movs	r2, #1
 800dafe:	490a      	ldr	r1, [pc, #40]	; (800db28 <_Z23getFont_verdana_40_4bppv+0x90>)
 800db00:	480a      	ldr	r0, [pc, #40]	; (800db2c <_Z23getFont_verdana_40_4bppv+0x94>)
 800db02:	f7ff fe7b 	bl	800d7fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800db06:	480a      	ldr	r0, [pc, #40]	; (800db30 <_Z23getFont_verdana_40_4bppv+0x98>)
 800db08:	f018 fb68 	bl	80261dc <atexit>
 800db0c:	4803      	ldr	r0, [pc, #12]	; (800db1c <_Z23getFont_verdana_40_4bppv+0x84>)
 800db0e:	f018 fb29 	bl	8026164 <__cxa_guard_release>
    return verdana_40_4bpp;
 800db12:	4b06      	ldr	r3, [pc, #24]	; (800db2c <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800db14:	4618      	mov	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	2004d47c 	.word	0x2004d47c
 800db20:	08029a14 	.word	0x08029a14
 800db24:	08029a20 	.word	0x08029a20
 800db28:	080299fc 	.word	0x080299fc
 800db2c:	2004d454 	.word	0x2004d454
 800db30:	0800da89 	.word	0x0800da89

0800db34 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	801a      	strh	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	805a      	strh	r2, [r3, #2]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	809a      	strh	r2, [r3, #4]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	80da      	strh	r2, [r3, #6]
    {
    }
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800db7a:	b480      	push	{r7}
 800db7c:	b085      	sub	sp, #20
 800db7e:	af00      	add	r7, sp, #0
 800db80:	60f8      	str	r0, [r7, #12]
 800db82:	4608      	mov	r0, r1
 800db84:	4611      	mov	r1, r2
 800db86:	461a      	mov	r2, r3
 800db88:	4603      	mov	r3, r0
 800db8a:	817b      	strh	r3, [r7, #10]
 800db8c:	460b      	mov	r3, r1
 800db8e:	813b      	strh	r3, [r7, #8]
 800db90:	4613      	mov	r3, r2
 800db92:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	897a      	ldrh	r2, [r7, #10]
 800db98:	801a      	strh	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	893a      	ldrh	r2, [r7, #8]
 800db9e:	805a      	strh	r2, [r3, #2]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	88fa      	ldrh	r2, [r7, #6]
 800dba4:	809a      	strh	r2, [r3, #4]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	8b3a      	ldrh	r2, [r7, #24]
 800dbaa:	80da      	strh	r2, [r3, #6]
    {
    }
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dbda:	bf00      	nop
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dbe6:	b480      	push	{r7}
 800dbe8:	b083      	sub	sp, #12
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
    {
    }
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
    {
    }
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
    {
 800dc44:	4a04      	ldr	r2, [pc, #16]	; (800dc58 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	601a      	str	r2, [r3, #0]
    }
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	080286a4 	.word	0x080286a4

0800dc5c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
    }
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff ffe9 	bl	800dc3c <_ZN8touchgfx15UIEventListenerD1Ev>
 800dc6a:	2104      	movs	r1, #4
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f018 fa6b 	bl	8026148 <_ZdlPvj>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
    {
    }
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dcba:	6810      	ldr	r0, [r2, #0]
 800dcbc:	6851      	ldr	r1, [r2, #4]
 800dcbe:	c303      	stmia	r3!, {r0, r1}
    }
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    {
 800dcd4:	4a04      	ldr	r2, [pc, #16]	; (800dce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	601a      	str	r2, [r3, #0]
    }
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	0802868c 	.word	0x0802868c

0800dcec <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
    }
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffe9 	bl	800dccc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f018 fa23 	bl	8026148 <_ZdlPvj>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800dd14:	4a14      	ldr	r2, [pc, #80]	; (800dd68 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff ff14 	bl	800db4c <_ZN8touchgfx4RectC1Ev>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	330c      	adds	r3, #12
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff ff0f 	bl	800db4c <_ZN8touchgfx4RectC1Ev>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	615a      	str	r2, [r3, #20]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	619a      	str	r2, [r3, #24]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	61da      	str	r2, [r3, #28]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	841a      	strh	r2, [r3, #32]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	845a      	strh	r2, [r3, #34]	; 0x22
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	080293dc 	.word	0x080293dc

0800dd6c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
    {
 800dd74:	4a04      	ldr	r2, [pc, #16]	; (800dd88 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	601a      	str	r2, [r3, #0]
    }
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	080293dc 	.word	0x080293dc

0800dd8c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
    }
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ffe9 	bl	800dd6c <_ZN8touchgfx8DrawableD1Ev>
 800dd9a:	2128      	movs	r1, #40	; 0x28
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f018 f9d3 	bl	8026148 <_ZdlPvj>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3314      	adds	r3, #20
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
        }
    }
 800ddca:	bf00      	nop
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ddda:	2300      	movs	r3, #0
    }
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3304      	adds	r3, #4
    }
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	4608      	mov	r0, r1
 800de0a:	4611      	mov	r1, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4603      	mov	r3, r0
 800de10:	817b      	strh	r3, [r7, #10]
 800de12:	460b      	mov	r3, r1
 800de14:	813b      	strh	r3, [r7, #8]
 800de16:	4613      	mov	r3, r2
 800de18:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800de1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de22:	4619      	mov	r1, r3
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f000 f844 	bl	800deb2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800de2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800de2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de32:	4619      	mov	r1, r3
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f000 f898 	bl	800df6a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800de42:	b480      	push	{r7}
 800de44:	b083      	sub	sp, #12
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800de50:	4618      	mov	r0, r3
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr

0800de5c <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800de76:	b480      	push	{r7}
 800de78:	b083      	sub	sp, #12
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	887a      	ldrh	r2, [r7, #2]
 800de86:	809a      	strh	r2, [r3, #4]
    }
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	887a      	ldrh	r2, [r7, #2]
 800dea4:	80da      	strh	r2, [r3, #6]
    }
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	460b      	mov	r3, r1
 800debc:	807b      	strh	r3, [r7, #2]
 800debe:	4613      	mov	r3, r2
 800dec0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	3330      	adds	r3, #48	; 0x30
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dece:	4611      	mov	r1, r2
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	4798      	blx	r3
        setY(y);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3334      	adds	r3, #52	; 0x34
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dee0:	4611      	mov	r1, r2
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	4798      	blx	r3
    }
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800deee:	b480      	push	{r7}
 800def0:	b083      	sub	sp, #12
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	460b      	mov	r3, r1
 800def8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	887a      	ldrh	r2, [r7, #2]
 800defe:	811a      	strh	r2, [r3, #8]
    }
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	887a      	ldrh	r2, [r7, #2]
 800df1c:	815a      	strh	r2, [r3, #10]
    }
 800df1e:	bf00      	nop
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800df2a:	b480      	push	{r7}
 800df2c:	b083      	sub	sp, #12
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
    {
    }
 800df32:	bf00      	nop
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800df3e:	b480      	push	{r7}
 800df40:	b083      	sub	sp, #12
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df48:	bf00      	nop
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df5e:	bf00      	nop
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b082      	sub	sp, #8
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	460b      	mov	r3, r1
 800df74:	807b      	strh	r3, [r7, #2]
 800df76:	4613      	mov	r3, r2
 800df78:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3338      	adds	r3, #56	; 0x38
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800df86:	4611      	mov	r1, r2
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	4798      	blx	r3
        setHeight(height);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	333c      	adds	r3, #60	; 0x3c
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f9b7 2000 	ldrsh.w	r2, [r7]
 800df98:	4611      	mov	r1, r2
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	4798      	blx	r3
    }
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dfa6:	b480      	push	{r7}
 800dfa8:	b083      	sub	sp, #12
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dfb0:	bf00      	nop
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
    {
    }
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800dfde:	4618      	mov	r0, r3
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800dff8:	4618      	mov	r0, r3
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	460b      	mov	r3, r1
 800e00e:	807b      	strh	r3, [r7, #2]
 800e010:	4613      	mov	r3, r2
 800e012:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	3354      	adds	r3, #84	; 0x54
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	8879      	ldrh	r1, [r7, #2]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e024:	b292      	uxth	r2, r2
 800e026:	1a8a      	subs	r2, r1, r2
 800e028:	b292      	uxth	r2, r2
 800e02a:	b210      	sxth	r0, r2
 800e02c:	8839      	ldrh	r1, [r7, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e034:	b292      	uxth	r2, r2
 800e036:	1a8a      	subs	r2, r1, r2
 800e038:	b292      	uxth	r2, r2
 800e03a:	b212      	sxth	r2, r2
 800e03c:	4601      	mov	r1, r0
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	4798      	blx	r3
    }
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e058:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e060:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e068:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e06a:	bf00      	nop
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e076:	b580      	push	{r7, lr}
 800e078:	b084      	sub	sp, #16
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	60f8      	str	r0, [r7, #12]
 800e07e:	60b9      	str	r1, [r7, #8]
 800e080:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f7ff ffe1 	bl	800e04a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	601a      	str	r2, [r3, #0]
    }
 800e096:	bf00      	nop
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e0a0:	b480      	push	{r7}
 800e0a2:	af00      	add	r7, sp, #0
    {
        return instance;
 800e0a4:	4b03      	ldr	r3, [pc, #12]	; (800e0b4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
    }
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	2004f65c 	.word	0x2004f65c

0800e0b8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e0b8:	b480      	push	{r7}
 800e0ba:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e0bc:	4b0b      	ldr	r3, [pc, #44]	; (800e0ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d008      	beq.n	800e0da <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e0c8:	4b08      	ldr	r3, [pc, #32]	; (800e0ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e0d2:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0d8:	e002      	b.n	800e0e0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e0da:	4b04      	ldr	r3, [pc, #16]	; (800e0ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	689b      	ldr	r3, [r3, #8]
    }
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	2004f65c 	.word	0x2004f65c

0800e0f0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e0f8:	4a07      	ldr	r2, [pc, #28]	; (800e118 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	601a      	str	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	605a      	str	r2, [r3, #4]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	721a      	strb	r2, [r3, #8]
    {
    }
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	4618      	mov	r0, r3
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	08028668 	.word	0x08028668

0800e11c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
    {
 800e124:	4a04      	ldr	r2, [pc, #16]	; (800e138 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	601a      	str	r2, [r3, #0]
    }
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4618      	mov	r0, r3
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	08028668 	.word	0x08028668

0800e13c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
    }
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7ff ffe9 	bl	800e11c <_ZN8touchgfx10TransitionD1Ev>
 800e14a:	210c      	movs	r1, #12
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f017 fffb 	bl	8026148 <_ZdlPvj>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
    {
    }
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
    {
    }
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
    {
    }
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e1a0:	f009 faca 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f009 fe6a 	bl	8017e80 <_ZN8touchgfx11Application10invalidateEv>
    }
 800e1ac:	bf00      	nop
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	605a      	str	r2, [r3, #4]
    }
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	4a05      	ldr	r2, [pc, #20]	; (800e1f0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff fd2b 	bl	800dc3c <_ZN8touchgfx15UIEventListenerD1Ev>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	08029390 	.word	0x08029390

0800e1f4 <_ZN8touchgfx11ApplicationD0Ev>:
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ffe7 	bl	800e1d0 <_ZN8touchgfx11ApplicationD1Ev>
 800e202:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f017 ff9e 	bl	8026148 <_ZdlPvj>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4618      	mov	r0, r3
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	f009 faa8 	bl	8017778 <_ZN8touchgfx11ApplicationC1Ev>
 800e228:	4a09      	ldr	r2, [pc, #36]	; (800e250 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a04      	ldr	r2, [pc, #16]	; (800e254 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e242:	6013      	str	r3, [r2, #0]
    }
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	0802861c 	.word	0x0802861c
 800e254:	2004f6b0 	.word	0x2004f6b0

0800e258 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f804 	bl	800e26e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e266:	bf00      	nop
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e26e:	b580      	push	{r7, lr}
 800e270:	b082      	sub	sp, #8
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00f      	beq.n	800e2a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	330c      	adds	r3, #12
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4610      	mov	r0, r2
 800e294:	4798      	blx	r3
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e29c:	2301      	movs	r3, #1
 800e29e:	e000      	b.n	800e2a2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00e      	beq.n	800e2c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3308      	adds	r3, #8
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800e2c4:	bf00      	nop
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	601a      	str	r2, [r3, #0]
    }
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	4a05      	ldr	r2, [pc, #20]	; (800e308 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7ff ff69 	bl	800e1d0 <_ZN8touchgfx11ApplicationD1Ev>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	0802861c 	.word	0x0802861c

0800e30c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff ffe7 	bl	800e2e8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e31a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f017 ff12 	bl	8026148 <_ZdlPvj>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	4a08      	ldr	r2, [pc, #32]	; (800e35c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e344:	4618      	mov	r0, r3
 800e346:	f001 f81d 	bl	800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ffcb 	bl	800e2e8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	080285b8 	.word	0x080285b8

0800e360 <_ZN23FrontendApplicationBaseD0Ev>:
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ffe1 	bl	800e330 <_ZN23FrontendApplicationBaseD1Ev>
 800e36e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f017 fee8 	bl	8026148 <_ZdlPvj>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e382:	b580      	push	{r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f8d0 	bl	800e530 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	721a      	strb	r2, [r3, #8]
    }
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr

0800e3b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	607b      	str	r3, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	817b      	strh	r3, [r7, #10]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fe02 	bl	800dfd0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d008      	beq.n	800e3e4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff fe08 	bl	800dfea <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e000      	b.n	800e3e6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	601a      	str	r2, [r3, #0]
        }
    }
 800e3f0:	bf00      	nop
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	605a      	str	r2, [r3, #4]
    }
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff fc74 	bl	800dd0c <_ZN8touchgfx8DrawableC1Ev>
 800e424:	4a03      	ldr	r2, [pc, #12]	; (800e434 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	0802852c 	.word	0x0802852c

0800e438 <_ZN8touchgfx6WidgetD1Ev>:
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	4a05      	ldr	r2, [pc, #20]	; (800e458 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	601a      	str	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	f7ff fc8f 	bl	800dd6c <_ZN8touchgfx8DrawableD1Ev>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	0802852c 	.word	0x0802852c

0800e45c <_ZN8touchgfx6WidgetD0Ev>:
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7ff ffe7 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 800e46a:	2128      	movs	r1, #40	; 0x28
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f017 fe6b 	bl	8026148 <_ZdlPvj>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4618      	mov	r0, r3
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fec4 	bl	800e218 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e490:	4a12      	ldr	r2, [pc, #72]	; (800e4dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	601a      	str	r2, [r3, #0]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e49c:	4618      	mov	r0, r3
 800e49e:	f000 f929 	bl	800e6f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800e4b2:	f7ff fdf5 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	3208      	adds	r2, #8
 800e4bc:	6812      	ldr	r2, [r2, #0]
 800e4be:	2101      	movs	r1, #1
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e4c4:	f7ff fdf8 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f010 fc31 	bl	801ed32 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	080285b8 	.word	0x080285b8

0800e4e0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	4611      	mov	r1, r2
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff ffe9 	bl	800e4e0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	605a      	str	r2, [r3, #4]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	3308      	adds	r3, #8
 800e51c:	3208      	adds	r2, #8
 800e51e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e522:	e883 0003 	stmia.w	r3, {r0, r1}
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e530:	b590      	push	{r4, r7, lr}
 800e532:	b089      	sub	sp, #36	; 0x24
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800e53e:	4b10      	ldr	r3, [pc, #64]	; (800e580 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800e540:	61bb      	str	r3, [r7, #24]
 800e542:	2300      	movs	r3, #0
 800e544:	61fb      	str	r3, [r7, #28]
 800e546:	f107 0008 	add.w	r0, r7, #8
 800e54a:	f107 0318 	add.w	r3, r7, #24
 800e54e:	cb0c      	ldmia	r3, {r2, r3}
 800e550:	6879      	ldr	r1, [r7, #4]
 800e552:	f000 f8eb 	bl	800e72c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e556:	f107 0308 	add.w	r3, r7, #8
 800e55a:	4619      	mov	r1, r3
 800e55c:	4620      	mov	r0, r4
 800e55e:	f7ff ffcb 	bl	800e4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e562:	f107 0308 	add.w	r3, r7, #8
 800e566:	4618      	mov	r0, r3
 800e568:	f000 ff0c 	bl	800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800e578:	bf00      	nop
 800e57a:	3724      	adds	r7, #36	; 0x24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd90      	pop	{r4, r7, pc}
 800e580:	0800e585 	.word	0x0800e585

0800e584 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af02      	add	r7, sp, #8
 800e58a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e598:	461a      	mov	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800e5a4:	4804      	ldr	r0, [pc, #16]	; (800e5b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800e5a6:	f000 f8f3 	bl	800e790 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e5aa:	bf00      	nop
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	2004f6a4 	.word	0x2004f6a4
 800e5b8:	2004f6a0 	.word	0x2004f6a0

0800e5bc <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouth()
{
 800e5bc:	b590      	push	{r4, r7, lr}
 800e5be:	b089      	sub	sp, #36	; 0x24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionSouthImpl);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800e5ca:	4b10      	ldr	r3, [pc, #64]	; (800e60c <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv+0x50>)
 800e5cc:	61bb      	str	r3, [r7, #24]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	61fb      	str	r3, [r7, #28]
 800e5d2:	f107 0008 	add.w	r0, r7, #8
 800e5d6:	f107 0318 	add.w	r3, r7, #24
 800e5da:	cb0c      	ldmia	r3, {r2, r3}
 800e5dc:	6879      	ldr	r1, [r7, #4]
 800e5de:	f000 f8a5 	bl	800e72c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e5e2:	f107 0308 	add.w	r3, r7, #8
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f7ff ff85 	bl	800e4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e5ee:	f107 0308 	add.w	r3, r7, #8
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fec6 	bl	800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800e604:	bf00      	nop
 800e606:	3724      	adds	r7, #36	; 0x24
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd90      	pop	{r4, r7, pc}
 800e60c:	0800e611 	.word	0x0800e611

0800e610 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouthImpl()
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af02      	add	r7, sp, #8
 800e616:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e624:	461a      	mov	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	4b04      	ldr	r3, [pc, #16]	; (800e640 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x30>)
 800e630:	4804      	ldr	r0, [pc, #16]	; (800e644 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x34>)
 800e632:	f000 f9cb 	bl	800e9cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e636:	bf00      	nop
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	2004f6a4 	.word	0x2004f6a4
 800e644:	2004f6a0 	.word	0x2004f6a0

0800e648 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEast()
{
 800e648:	b590      	push	{r4, r7, lr}
 800e64a:	b089      	sub	sp, #36	; 0x24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenWipeTransitionEastImpl);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800e656:	4b10      	ldr	r3, [pc, #64]	; (800e698 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv+0x50>)
 800e658:	61bb      	str	r3, [r7, #24]
 800e65a:	2300      	movs	r3, #0
 800e65c:	61fb      	str	r3, [r7, #28]
 800e65e:	f107 0008 	add.w	r0, r7, #8
 800e662:	f107 0318 	add.w	r3, r7, #24
 800e666:	cb0c      	ldmia	r3, {r2, r3}
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	f000 f85f 	bl	800e72c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e66e:	f107 0308 	add.w	r3, r7, #8
 800e672:	4619      	mov	r1, r3
 800e674:	4620      	mov	r0, r4
 800e676:	f7ff ff3f 	bl	800e4f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e67a:	f107 0308 	add.w	r3, r7, #8
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 fe80 	bl	800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800e690:	bf00      	nop
 800e692:	3724      	adds	r7, #36	; 0x24
 800e694:	46bd      	mov	sp, r7
 800e696:	bd90      	pop	{r4, r7, pc}
 800e698:	0800e69d 	.word	0x0800e69d

0800e69c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEastImpl()
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	4b04      	ldr	r3, [pc, #16]	; (800e6cc <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x30>)
 800e6bc:	4804      	ldr	r0, [pc, #16]	; (800e6d0 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x34>)
 800e6be:	f000 faa3 	bl	800ec08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e6c2:	bf00      	nop
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	2004f6a4 	.word	0x2004f6a4
 800e6d0:	2004f6a0 	.word	0x2004f6a0

0800e6d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	4a04      	ldr	r2, [pc, #16]	; (800e6f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	0802868c 	.word	0x0802868c

0800e6f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff ffe8 	bl	800e6d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e704:	4a08      	ldr	r2, [pc, #32]	; (800e728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	605a      	str	r2, [r3, #4]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	609a      	str	r2, [r3, #8]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	60da      	str	r2, [r3, #12]
    {
    }
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	08028604 	.word	0x08028604

0800e72c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4639      	mov	r1, r7
 800e738:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff ffc8 	bl	800e6d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e744:	4a08      	ldr	r2, [pc, #32]	; (800e768 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	605a      	str	r2, [r3, #4]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	3308      	adds	r3, #8
 800e754:	463a      	mov	r2, r7
 800e756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e75a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	08028604 	.word	0x08028604

0800e76c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	f7ff fcba 	bl	800e0f0 <_ZN8touchgfx10TransitionC1Ev>
 800e77c:	4a03      	ldr	r2, [pc, #12]	; (800e78c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	601a      	str	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4618      	mov	r0, r3
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	08028594 	.word	0x08028594

0800e790 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e790:	b590      	push	{r4, r7, lr}
 800e792:	b08f      	sub	sp, #60	; 0x3c
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	689a      	ldr	r2, [r3, #8]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	3320      	adds	r3, #32
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	4798      	blx	r3
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	f241 023b 	movw	r2, #4155	; 0x103b
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d805      	bhi.n	800e7c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e7ba:	4b7f      	ldr	r3, [pc, #508]	; (800e9b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e7bc:	4a7f      	ldr	r2, [pc, #508]	; (800e9bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e7be:	21a2      	movs	r1, #162	; 0xa2
 800e7c0:	487f      	ldr	r0, [pc, #508]	; (800e9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e7c2:	f017 fced 	bl	80261a0 <__assert_func>
 800e7c6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3320      	adds	r3, #32
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	4798      	blx	r3
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b0f      	cmp	r3, #15
 800e7de:	d805      	bhi.n	800e7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e7e0:	4b78      	ldr	r3, [pc, #480]	; (800e9c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e7e2:	4a76      	ldr	r2, [pc, #472]	; (800e9bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e7e4:	21a3      	movs	r1, #163	; 0xa3
 800e7e6:	4876      	ldr	r0, [pc, #472]	; (800e9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e7e8:	f017 fcda 	bl	80261a0 <__assert_func>
 800e7ec:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3320      	adds	r3, #32
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4798      	blx	r3
 800e800:	4603      	mov	r3, r0
 800e802:	2b0b      	cmp	r3, #11
 800e804:	d805      	bhi.n	800e812 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e806:	4b70      	ldr	r3, [pc, #448]	; (800e9c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e808:	4a6c      	ldr	r2, [pc, #432]	; (800e9bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e80a:	21a4      	movs	r1, #164	; 0xa4
 800e80c:	486c      	ldr	r0, [pc, #432]	; (800e9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e80e:	f017 fcc7 	bl	80261a0 <__assert_func>
 800e812:	bf00      	nop
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	627b      	str	r3, [r7, #36]	; 0x24
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e820:	f008 ff8a 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 800e824:	4603      	mov	r3, r0
 800e826:	4618      	mov	r0, r3
 800e828:	f008 ff8c 	bl	8017744 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d008      	beq.n	800e846 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	330c      	adds	r3, #12
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4610      	mov	r0, r2
 800e844:	4798      	blx	r3
    if (*currentTrans)
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d007      	beq.n	800e85e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4610      	mov	r0, r2
 800e85c:	4798      	blx	r3
    if (*currentScreen)
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d008      	beq.n	800e878 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3314      	adds	r3, #20
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
    if (*currentPresenter)
 800e878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3304      	adds	r3, #4
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4610      	mov	r0, r2
 800e890:	4798      	blx	r3
    if (*currentScreen)
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	4798      	blx	r3
    if (*currentPresenter)
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d008      	beq.n	800e8c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	4798      	blx	r3
}
 800e8c4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 fab9 	bl	800ee44 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	200c      	movs	r0, #12
 800e8d8:	f7ff f92c 	bl	800db34 <_ZnwjPv>
 800e8dc:	4604      	mov	r4, r0
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff ff44 	bl	800e76c <_ZN8touchgfx12NoTransitionC1Ev>
 800e8e4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f000 fabc 	bl	800ee6a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f241 003c 	movw	r0, #4156	; 0x103c
 800e8fa:	f7ff f91b 	bl	800db34 <_ZnwjPv>
 800e8fe:	4604      	mov	r4, r0
 800e900:	4620      	mov	r0, r4
 800e902:	f002 fdc1 	bl	8011488 <_ZN11Screen1ViewC1Ev>
 800e906:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	2100      	movs	r1, #0
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 fabe 	bl	800ee90 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e914:	4603      	mov	r3, r0
 800e916:	4619      	mov	r1, r3
 800e918:	2010      	movs	r0, #16
 800e91a:	f7ff f90b 	bl	800db34 <_ZnwjPv>
 800e91e:	4604      	mov	r4, r0
 800e920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e922:	4620      	mov	r0, r4
 800e924:	f002 fd58 	bl	80113d8 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e928:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e92e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e934:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	3304      	adds	r3, #4
 800e946:	e000      	b.n	800e94a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e948:	2300      	movs	r3, #0
 800e94a:	4619      	mov	r1, r3
 800e94c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e94e:	f7ff fcbd 	bl	800e2cc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	3304      	adds	r3, #4
 800e956:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fd4d 	bl	800e3f8 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e962:	4618      	mov	r0, r3
 800e964:	f000 faa7 	bl	800eeb6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96a:	61fb      	str	r3, [r7, #28]
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	61bb      	str	r3, [r7, #24]
 800e970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e972:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	330c      	adds	r3, #12
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	69f8      	ldr	r0, [r7, #28]
 800e97e:	4798      	blx	r3
    newPresenter->activate();
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69b8      	ldr	r0, [r7, #24]
 800e988:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e98a:	6979      	ldr	r1, [r7, #20]
 800e98c:	69f8      	ldr	r0, [r7, #28]
 800e98e:	f00a fb37 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	3310      	adds	r3, #16
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	6978      	ldr	r0, [r7, #20]
 800e99c:	4798      	blx	r3
    newTransition->invalidate();
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3314      	adds	r3, #20
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	6978      	ldr	r0, [r7, #20]
 800e9a8:	4798      	blx	r3
}
 800e9aa:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	373c      	adds	r7, #60	; 0x3c
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd90      	pop	{r4, r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	0802737c 	.word	0x0802737c
 800e9bc:	0802740c 	.word	0x0802740c
 800e9c0:	08027510 	.word	0x08027510
 800e9c4:	08027554 	.word	0x08027554
 800e9c8:	080275f8 	.word	0x080275f8

0800e9cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e9cc:	b590      	push	{r4, r7, lr}
 800e9ce:	b08f      	sub	sp, #60	; 0x3c
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	689a      	ldr	r2, [r3, #8]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3320      	adds	r3, #32
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	4798      	blx	r3
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	f241 023b 	movw	r2, #4155	; 0x103b
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d805      	bhi.n	800ea02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e9f6:	4b7f      	ldr	r3, [pc, #508]	; (800ebf4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e9f8:	4a7f      	ldr	r2, [pc, #508]	; (800ebf8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e9fa:	21a2      	movs	r1, #162	; 0xa2
 800e9fc:	487f      	ldr	r0, [pc, #508]	; (800ebfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e9fe:	f017 fbcf 	bl	80261a0 <__assert_func>
 800ea02:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3320      	adds	r3, #32
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4610      	mov	r0, r2
 800ea14:	4798      	blx	r3
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b0f      	cmp	r3, #15
 800ea1a:	d805      	bhi.n	800ea28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ea1c:	4b78      	ldr	r3, [pc, #480]	; (800ec00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ea1e:	4a76      	ldr	r2, [pc, #472]	; (800ebf8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ea20:	21a3      	movs	r1, #163	; 0xa3
 800ea22:	4876      	ldr	r0, [pc, #472]	; (800ebfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ea24:	f017 fbbc 	bl	80261a0 <__assert_func>
 800ea28:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68da      	ldr	r2, [r3, #12]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3320      	adds	r3, #32
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4610      	mov	r0, r2
 800ea3a:	4798      	blx	r3
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b53      	cmp	r3, #83	; 0x53
 800ea40:	d805      	bhi.n	800ea4e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ea42:	4b70      	ldr	r3, [pc, #448]	; (800ec04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ea44:	4a6c      	ldr	r2, [pc, #432]	; (800ebf8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ea46:	21a4      	movs	r1, #164	; 0xa4
 800ea48:	486c      	ldr	r0, [pc, #432]	; (800ebfc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ea4a:	f017 fba9 	bl	80261a0 <__assert_func>
 800ea4e:	bf00      	nop
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ea5c:	f008 fe6c 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 800ea60:	4603      	mov	r3, r0
 800ea62:	4618      	mov	r0, r3
 800ea64:	f008 fe6e 	bl	8017744 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d008      	beq.n	800ea82 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4798      	blx	r3
    if (*currentTrans)
 800ea82:	6a3b      	ldr	r3, [r7, #32]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d007      	beq.n	800ea9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4610      	mov	r0, r2
 800ea98:	4798      	blx	r3
    if (*currentScreen)
 800ea9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d008      	beq.n	800eab4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3314      	adds	r3, #20
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4610      	mov	r0, r2
 800eab2:	4798      	blx	r3
    if (*currentPresenter)
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d008      	beq.n	800eace <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800eabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3304      	adds	r3, #4
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4610      	mov	r0, r2
 800eacc:	4798      	blx	r3
    if (*currentScreen)
 800eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d007      	beq.n	800eae6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4610      	mov	r0, r2
 800eae4:	4798      	blx	r3
    if (*currentPresenter)
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d008      	beq.n	800eb00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4610      	mov	r0, r2
 800eafe:	4798      	blx	r3
}
 800eb00:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	2100      	movs	r1, #0
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f000 f9e2 	bl	800eed2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	4619      	mov	r1, r3
 800eb12:	2054      	movs	r0, #84	; 0x54
 800eb14:	f7ff f80e 	bl	800db34 <_ZnwjPv>
 800eb18:	4604      	mov	r4, r0
 800eb1a:	2114      	movs	r1, #20
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fa2f 	bl	800ef80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
 800eb22:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 f99d 	bl	800ee6a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800eb30:	4603      	mov	r3, r0
 800eb32:	4619      	mov	r1, r3
 800eb34:	f241 003c 	movw	r0, #4156	; 0x103c
 800eb38:	f7fe fffc 	bl	800db34 <_ZnwjPv>
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f002 fca2 	bl	8011488 <_ZN11Screen1ViewC1Ev>
 800eb44:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f000 f99f 	bl	800ee90 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800eb52:	4603      	mov	r3, r0
 800eb54:	4619      	mov	r1, r3
 800eb56:	2010      	movs	r0, #16
 800eb58:	f7fe ffec 	bl	800db34 <_ZnwjPv>
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb60:	4620      	mov	r0, r4
 800eb62:	f002 fc39 	bl	80113d8 <_ZN16Screen1PresenterC1ER11Screen1View>
 800eb66:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb6c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb72:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb78:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800eb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb82:	3304      	adds	r3, #4
 800eb84:	e000      	b.n	800eb88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800eb86:	2300      	movs	r3, #0
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eb8c:	f7ff fb9e 	bl	800e2cc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	3304      	adds	r3, #4
 800eb94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fc2e 	bl	800e3f8 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 f988 	bl	800eeb6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800eba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba8:	61fb      	str	r3, [r7, #28]
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	61bb      	str	r3, [r7, #24]
 800ebae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	330c      	adds	r3, #12
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	69f8      	ldr	r0, [r7, #28]
 800ebbc:	4798      	blx	r3
    newPresenter->activate();
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	69b8      	ldr	r0, [r7, #24]
 800ebc6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ebc8:	6979      	ldr	r1, [r7, #20]
 800ebca:	69f8      	ldr	r0, [r7, #28]
 800ebcc:	f00a fa18 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	3310      	adds	r3, #16
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6978      	ldr	r0, [r7, #20]
 800ebda:	4798      	blx	r3
    newTransition->invalidate();
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	3314      	adds	r3, #20
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6978      	ldr	r0, [r7, #20]
 800ebe6:	4798      	blx	r3
}
 800ebe8:	bf00      	nop
    return newPresenter;
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	373c      	adds	r7, #60	; 0x3c
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd90      	pop	{r4, r7, pc}
 800ebf4:	0802737c 	.word	0x0802737c
 800ebf8:	0802769c 	.word	0x0802769c
 800ebfc:	08027510 	.word	0x08027510
 800ec00:	08027554 	.word	0x08027554
 800ec04:	080275f8 	.word	0x080275f8

0800ec08 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ec08:	b590      	push	{r4, r7, lr}
 800ec0a:	b08f      	sub	sp, #60	; 0x3c
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	689a      	ldr	r2, [r3, #8]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3320      	adds	r3, #32
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4610      	mov	r0, r2
 800ec26:	4798      	blx	r3
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f640 62a7 	movw	r2, #3751	; 0xea7
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d805      	bhi.n	800ec3e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ec32:	4b7f      	ldr	r3, [pc, #508]	; (800ee30 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ec34:	4a7f      	ldr	r2, [pc, #508]	; (800ee34 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ec36:	21a2      	movs	r1, #162	; 0xa2
 800ec38:	487f      	ldr	r0, [pc, #508]	; (800ee38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ec3a:	f017 fab1 	bl	80261a0 <__assert_func>
 800ec3e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3320      	adds	r3, #32
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b0f      	cmp	r3, #15
 800ec56:	d805      	bhi.n	800ec64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ec58:	4b78      	ldr	r3, [pc, #480]	; (800ee3c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ec5a:	4a76      	ldr	r2, [pc, #472]	; (800ee34 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ec5c:	21a3      	movs	r1, #163	; 0xa3
 800ec5e:	4876      	ldr	r0, [pc, #472]	; (800ee38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ec60:	f017 fa9e 	bl	80261a0 <__assert_func>
 800ec64:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	68da      	ldr	r2, [r3, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3320      	adds	r3, #32
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4610      	mov	r0, r2
 800ec76:	4798      	blx	r3
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b37      	cmp	r3, #55	; 0x37
 800ec7c:	d805      	bhi.n	800ec8a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ec7e:	4b70      	ldr	r3, [pc, #448]	; (800ee40 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ec80:	4a6c      	ldr	r2, [pc, #432]	; (800ee34 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ec82:	21a4      	movs	r1, #164	; 0xa4
 800ec84:	486c      	ldr	r0, [pc, #432]	; (800ee38 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ec86:	f017 fa8b 	bl	80261a0 <__assert_func>
 800ec8a:	bf00      	nop
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ec98:	f008 fd4e 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f008 fd50 	bl	8017744 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d008      	beq.n	800ecbe <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	330c      	adds	r3, #12
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4610      	mov	r0, r2
 800ecbc:	4798      	blx	r3
    if (*currentTrans)
 800ecbe:	6a3b      	ldr	r3, [r7, #32]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800ecc6:	6a3b      	ldr	r3, [r7, #32]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	4798      	blx	r3
    if (*currentScreen)
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d008      	beq.n	800ecf0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800ecde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	3314      	adds	r3, #20
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4610      	mov	r0, r2
 800ecee:	4798      	blx	r3
    if (*currentPresenter)
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d008      	beq.n	800ed0a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3304      	adds	r3, #4
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4610      	mov	r0, r2
 800ed08:	4798      	blx	r3
    if (*currentScreen)
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d007      	beq.n	800ed22 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	4610      	mov	r0, r2
 800ed20:	4798      	blx	r3
    if (*currentPresenter)
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d008      	beq.n	800ed3c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3308      	adds	r3, #8
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4610      	mov	r0, r2
 800ed3a:	4798      	blx	r3
}
 800ed3c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	2100      	movs	r1, #0
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 f97f 	bl	800f048 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	2038      	movs	r0, #56	; 0x38
 800ed50:	f7fe fef0 	bl	800db34 <_ZnwjPv>
 800ed54:	4604      	mov	r4, r0
 800ed56:	2114      	movs	r1, #20
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 f9bd 	bl	800f0d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>
 800ed5e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	2100      	movs	r1, #0
 800ed66:	4618      	mov	r0, r3
 800ed68:	f000 f9f8 	bl	800f15c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	4619      	mov	r1, r3
 800ed70:	f640 60a8 	movw	r0, #3752	; 0xea8
 800ed74:	f7fe fede 	bl	800db34 <_ZnwjPv>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f002 fc3a 	bl	80115f4 <_ZN11Screen2ViewC1Ev>
 800ed80:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	2100      	movs	r1, #0
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 f9fa 	bl	800f182 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4619      	mov	r1, r3
 800ed92:	2010      	movs	r0, #16
 800ed94:	f7fe fece 	bl	800db34 <_ZnwjPv>
 800ed98:	4604      	mov	r4, r0
 800ed9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f002 fbd1 	bl	8011544 <_ZN16Screen2PresenterC1ER11Screen2View>
 800eda2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eda8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edae:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	3304      	adds	r3, #4
 800edc0:	e000      	b.n	800edc4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800edc2:	2300      	movs	r3, #0
 800edc4:	4619      	mov	r1, r3
 800edc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800edc8:	f7ff fa80 	bl	800e2cc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800edcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edce:	3304      	adds	r3, #4
 800edd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff fb10 	bl	800e3f8 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f9e3 	bl	800f1a8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	61fb      	str	r3, [r7, #28]
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edec:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	330c      	adds	r3, #12
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	69f8      	ldr	r0, [r7, #28]
 800edf8:	4798      	blx	r3
    newPresenter->activate();
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	69b8      	ldr	r0, [r7, #24]
 800ee02:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ee04:	6979      	ldr	r1, [r7, #20]
 800ee06:	69f8      	ldr	r0, [r7, #28]
 800ee08:	f00a f8fa 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3310      	adds	r3, #16
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6978      	ldr	r0, [r7, #20]
 800ee16:	4798      	blx	r3
    newTransition->invalidate();
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3314      	adds	r3, #20
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6978      	ldr	r0, [r7, #20]
 800ee22:	4798      	blx	r3
}
 800ee24:	bf00      	nop
    return newPresenter;
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	373c      	adds	r7, #60	; 0x3c
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd90      	pop	{r4, r7, pc}
 800ee30:	0802737c 	.word	0x0802737c
 800ee34:	080277b4 	.word	0x080277b4
 800ee38:	08027510 	.word	0x08027510
 800ee3c:	08027554 	.word	0x08027554
 800ee40:	080275f8 	.word	0x080275f8

0800ee44 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3324      	adds	r3, #36	; 0x24
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	887a      	ldrh	r2, [r7, #2]
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	4798      	blx	r3
 800ee60:	4603      	mov	r3, r0
    }
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	460b      	mov	r3, r1
 800ee74:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3324      	adds	r3, #36	; 0x24
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	887a      	ldrh	r2, [r7, #2]
 800ee80:	4611      	mov	r1, r2
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	4798      	blx	r3
 800ee86:	4603      	mov	r3, r0
    }
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3324      	adds	r3, #36	; 0x24
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	887a      	ldrh	r2, [r7, #2]
 800eea6:	4611      	mov	r1, r2
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	4798      	blx	r3
 800eeac:	4603      	mov	r3, r0
    }
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800eeb6:	b480      	push	{r7}
 800eeb8:	b083      	sub	sp, #12
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	460b      	mov	r3, r1
 800eedc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3324      	adds	r3, #36	; 0x24
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	887a      	ldrh	r2, [r7, #2]
 800eee8:	4611      	mov	r1, r2
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	4798      	blx	r3
 800eeee:	4603      	mov	r3, r0
    }
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	4a05      	ldr	r2, [pc, #20]	; (800ef18 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7ff fa95 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	080291e4 	.word	0x080291e4

0800ef1c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7ff ffe7 	bl	800eef8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800ef2a:	212c      	movs	r1, #44	; 0x2c
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f017 f90b 	bl	8026148 <_ZdlPvj>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4618      	mov	r0, r3
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	4a05      	ldr	r2, [pc, #20]	; (800ef5c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	601a      	str	r2, [r3, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 f983 	bl	800f258 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	08028470 	.word	0x08028470

0800ef60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ffe7 	bl	800ef3c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800ef6e:	2110      	movs	r1, #16
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f017 f8e9 	bl	8026148 <_ZdlPvj>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800ef80:	b590      	push	{r4, r7, lr}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff f8ae 	bl	800e0f0 <_ZN8touchgfx10TransitionC1Ev>
 800ef94:	4a27      	ldr	r2, [pc, #156]	; (800f034 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb4>)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	330c      	adds	r3, #12
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f006 fbc8 	bl	8015734 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	639a      	str	r2, [r3, #56]	; 0x38
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800efb4:	4a20      	ldr	r2, [pc, #128]	; (800f038 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb8>)
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efbe:	e883 0003 	stmia.w	r3, {r0, r1}
 800efc2:	f107 0308 	add.w	r3, r7, #8
 800efc6:	cb0c      	ldmia	r3, {r2, r3}
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 f924 	bl	800f218 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	78fa      	ldrb	r2, [r7, #3]
 800efd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800efe8:	4b14      	ldr	r3, [pc, #80]	; (800f03c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xbc>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01c      	beq.n	800f02a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f103 000c 	add.w	r0, r3, #12
 800eff6:	4b12      	ldr	r3, [pc, #72]	; (800f040 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc0>)
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	b21a      	sxth	r2, r3
 800effc:	4b11      	ldr	r3, [pc, #68]	; (800f044 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	b21b      	sxth	r3, r3
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	4613      	mov	r3, r2
 800f006:	2200      	movs	r2, #0
 800f008:	2100      	movs	r1, #0
 800f00a:	f7fe fef9 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	330c      	adds	r3, #12
 800f012:	4618      	mov	r0, r3
 800f014:	f006 fb11 	bl	801563a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                break;
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
                break;
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800f018:	4b0a      	ldr	r3, [pc, #40]	; (800f044 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	425b      	negs	r3, r3
 800f01e:	b29b      	uxth	r3, r3
 800f020:	b21a      	sxth	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800f028:	bf00      	nop
            }
        }
    }
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	bd90      	pop	{r4, r7, pc}
 800f034:	08028444 	.word	0x08028444
 800f038:	080278cc 	.word	0x080278cc
 800f03c:	2004f65b 	.word	0x2004f65b
 800f040:	2004f650 	.word	0x2004f650
 800f044:	2004f652 	.word	0x2004f652

0800f048 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	460b      	mov	r3, r1
 800f052:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	3324      	adds	r3, #36	; 0x24
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	887a      	ldrh	r2, [r7, #2]
 800f05e:	4611      	mov	r1, r2
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	4798      	blx	r3
 800f064:	4603      	mov	r3, r0
    }
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
	...

0800f070 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7ff f9ca 	bl	800e414 <_ZN8touchgfx6WidgetC1Ev>
 800f080:	4a03      	ldr	r2, [pc, #12]	; (800f090 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	080284c4 	.word	0x080284c4

0800f094 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	4a05      	ldr	r2, [pc, #20]	; (800f0b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	601a      	str	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff f9c7 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	080284c4 	.word	0x080284c4

0800f0b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7ff ffe7 	bl	800f094 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f0c6:	2128      	movs	r1, #40	; 0x28
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f017 f83d 	bl	8026148 <_ZdlPvj>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff f802 	bl	800e0f0 <_ZN8touchgfx10TransitionC1Ev>
 800f0ec:	4a18      	ldr	r2, [pc, #96]	; (800f150 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	78fa      	ldrb	r2, [r7, #3]
 800f0f6:	725a      	strb	r2, [r3, #9]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	729a      	strb	r2, [r3, #10]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	81da      	strh	r2, [r3, #14]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3310      	adds	r3, #16
 800f108:	2228      	movs	r2, #40	; 0x28
 800f10a:	2100      	movs	r1, #0
 800f10c:	4618      	mov	r0, r3
 800f10e:	f017 f8c5 	bl	802629c <memset>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	3310      	adds	r3, #16
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff ffaa 	bl	800f070 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800f11c:	4b0d      	ldr	r3, [pc, #52]	; (800f154 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	b21a      	sxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	819a      	strh	r2, [r3, #12]
            break;
 800f126:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f103 0010 	add.w	r0, r3, #16
 800f12e:	4b09      	ldr	r3, [pc, #36]	; (800f154 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	b21a      	sxth	r2, r3
 800f134:	4b08      	ldr	r3, [pc, #32]	; (800f158 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	b21b      	sxth	r3, r3
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	4613      	mov	r3, r2
 800f13e:	2200      	movs	r2, #0
 800f140:	2100      	movs	r1, #0
 800f142:	f7fe fe5d 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4618      	mov	r0, r3
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	080284a0 	.word	0x080284a0
 800f154:	2004f650 	.word	0x2004f650
 800f158:	2004f652 	.word	0x2004f652

0800f15c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	460b      	mov	r3, r1
 800f166:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3324      	adds	r3, #36	; 0x24
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	887a      	ldrh	r2, [r7, #2]
 800f172:	4611      	mov	r1, r2
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	4798      	blx	r3
 800f178:	4603      	mov	r3, r0
    }
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	460b      	mov	r3, r1
 800f18c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3324      	adds	r3, #36	; 0x24
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	887a      	ldrh	r2, [r7, #2]
 800f198:	4611      	mov	r1, r2
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	4798      	blx	r3
 800f19e:	4603      	mov	r3, r0
    }
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d00a      	beq.n	800f1ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2a>
        case WEST:
            d.moveRelative(calculatedValue, 0);
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3354      	adds	r3, #84	; 0x54
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	6838      	ldr	r0, [r7, #0]
 800f1ea:	4798      	blx	r3
            break;
 800f1ec:	e000      	b.n	800f1f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800f1ee:	bf00      	nop
        }
    }
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	4a04      	ldr	r2, [pc, #16]	; (800f214 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	08028488 	.word	0x08028488

0800f218 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4639      	mov	r1, r7
 800f224:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff ffe4 	bl	800f1f8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800f230:	4a08      	ldr	r2, [pc, #32]	; (800f254 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	605a      	str	r2, [r3, #4]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3308      	adds	r3, #8
 800f240:	463a      	mov	r2, r7
 800f242:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f246:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08028470 	.word	0x08028470

0800f258 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
    }
 800f260:	4a04      	ldr	r2, [pc, #16]	; (800f274 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	08028488 	.word	0x08028488

0800f278 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
    }
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7ff ffe9 	bl	800f258 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f286:	2104      	movs	r1, #4
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f016 ff5d 	bl	8026148 <_ZdlPvj>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4618      	mov	r0, r3
 800f292:	3708      	adds	r7, #8
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
class SlideTransition : public Transition
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	4a0a      	ldr	r2, [pc, #40]	; (800f2cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x34>)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	333c      	adds	r3, #60	; 0x3c
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff fe46 	bl	800ef3c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	330c      	adds	r3, #12
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fe1f 	bl	800eef8 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fe ff2d 	bl	800e11c <_ZN8touchgfx10TransitionD1Ev>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	08028444 	.word	0x08028444

0800f2d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7ff ffdd 	bl	800f298 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 800f2de:	2154      	movs	r1, #84	; 0x54
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f016 ff31 	bl	8026148 <_ZdlPvj>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
class WipeTransition : public Transition
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	4a08      	ldr	r2, [pc, #32]	; (800f31c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3310      	adds	r3, #16
 800f302:	4618      	mov	r0, r3
 800f304:	f7ff fec6 	bl	800f094 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe ff06 	bl	800e11c <_ZN8touchgfx10TransitionD1Ev>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	080284a0 	.word	0x080284a0

0800f320 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff ffe1 	bl	800f2f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>
 800f32e:	2138      	movs	r1, #56	; 0x38
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f016 ff09 	bl	8026148 <_ZdlPvj>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <_ZN8touchgfx12NoTransitionD1Ev>:
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	4a05      	ldr	r2, [pc, #20]	; (800f360 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	f7fe fee3 	bl	800e11c <_ZN8touchgfx10TransitionD1Ev>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4618      	mov	r0, r3
 800f35a:	3708      	adds	r7, #8
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	08028594 	.word	0x08028594

0800f364 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff ffe7 	bl	800f340 <_ZN8touchgfx12NoTransitionD1Ev>
 800f372:	210c      	movs	r1, #12
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f016 fee7 	bl	8026148 <_ZdlPvj>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	4a05      	ldr	r2, [pc, #20]	; (800f3a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe fc99 	bl	800dccc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	08028604 	.word	0x08028604

0800f3a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff ffe7 	bl	800f384 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f3b6:	2110      	movs	r1, #16
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f016 fec5 	bl	8026148 <_ZdlPvj>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800f3d0:	4b40      	ldr	r3, [pc, #256]	; (800f4d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10c>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	f083 0301 	eor.w	r3, r3, #1
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1e>
            done = true;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	721a      	strb	r2, [r3, #8]
            return;
 800f3e4:	e073      	b.n	800f4ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fe feb7 	bl	800e15c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d82f      	bhi.n	800f46e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f414:	b298      	uxth	r0, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f422:	b29b      	uxth	r3, r3
 800f424:	2100      	movs	r1, #0
 800f426:	f009 fdf1 	bl	801900c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800f42a:	4603      	mov	r3, r0
 800f42c:	461a      	mov	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	f003 0301 	and.w	r3, r3, #1
 800f440:	b29b      	uxth	r3, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	d01b      	beq.n	800f47e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800f454:	2a00      	cmp	r2, #0
 800f456:	dd01      	ble.n	800f45c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x94>
 800f458:	2201      	movs	r2, #1
 800f45a:	e001      	b.n	800f460 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>
 800f45c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f460:	4413      	add	r3, r2
 800f462:	b29b      	uxth	r3, r3
 800f464:	b21a      	sxth	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800f46c:	e007      	b.n	800f47e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
            done = true;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2201      	movs	r2, #1
 800f472:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 800f47c:	e027      	b.n	800f4ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getY();
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	330c      	adds	r3, #12
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fcdd 	bl	800de42 <_ZNK8touchgfx8Drawable4getYEv>
 800f488:	4603      	mov	r3, r0
 800f48a:	4619      	mov	r1, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f492:	b29a      	uxth	r2, r3
 800f494:	b28b      	uxth	r3, r1
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	b29b      	uxth	r3, r3
 800f49a:	b21a      	sxth	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(0, calculatedValue);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f103 000c 	add.w	r0, r3, #12
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	f009 f959 	bl	8018768 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800f4b6:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6858      	ldr	r0, [r3, #4]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	337c      	adds	r3, #124	; 0x7c
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	323c      	adds	r2, #60	; 0x3c
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	4798      	blx	r3
    }
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	2004f65b 	.word	0x2004f65b

0800f4d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800f4e0:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x38>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00e      	beq.n	800f506 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00a      	beq.n	800f506 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6858      	ldr	r0, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3364      	adds	r3, #100	; 0x64
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	320c      	adds	r2, #12
 800f502:	4611      	mov	r1, r2
 800f504:	4798      	blx	r3
    }
 800f506:	bf00      	nop
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	2004f65b 	.word	0x2004f65b

0800f514 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800f51c:	4b1a      	ldr	r3, [pc, #104]	; (800f588 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x74>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d02d      	beq.n	800f580 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x6c>
            Transition::init();
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe fe2c 	bl	800e184 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800f52c:	4a17      	ldr	r2, [pc, #92]	; (800f58c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x78>)
 800f52e:	f107 0318 	add.w	r3, r7, #24
 800f532:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f536:	e883 0003 	stmia.w	r3, {r0, r1}
 800f53a:	f107 0008 	add.w	r0, r7, #8
 800f53e:	f107 0318 	add.w	r3, r7, #24
 800f542:	cb0c      	ldmia	r3, {r2, r3}
 800f544:	6879      	ldr	r1, [r7, #4]
 800f546:	f7ff fe67 	bl	800f218 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	337c      	adds	r3, #124	; 0x7c
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f107 0108 	add.w	r1, r7, #8
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
            screenContainer->add(snapshot);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6858      	ldr	r0, [r3, #4]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3360      	adds	r3, #96	; 0x60
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	320c      	adds	r2, #12
 800f572:	4611      	mov	r1, r2
 800f574:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800f576:	f107 0308 	add.w	r3, r7, #8
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7ff fcde 	bl	800ef3c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 800f580:	bf00      	nop
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	2004f65b 	.word	0x2004f65b
 800f58c:	080278d4 	.word	0x080278d4

0800f590 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3354      	adds	r3, #84	; 0x54
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4a05      	ldr	r2, [pc, #20]	; (800f5b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x28>)
 800f5a4:	8812      	ldrh	r2, [r2, #0]
 800f5a6:	b212      	sxth	r2, r2
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	6838      	ldr	r0, [r7, #0]
 800f5ac:	4798      	blx	r3
            break;
 800f5ae:	bf00      	nop
    }
 800f5b0:	bf00      	nop
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	2004f652 	.word	0x2004f652

0800f5bc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	68d2      	ldr	r2, [r2, #12]
 800f5ce:	1052      	asrs	r2, r2, #1
 800f5d0:	1898      	adds	r0, r3, r2
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	f003 0301 	and.w	r3, r3, #1
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d102      	bne.n	800f5e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	e00a      	b.n	800f5fa <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	68d2      	ldr	r2, [r2, #12]
 800f5ec:	1052      	asrs	r2, r2, #1
 800f5ee:	4413      	add	r3, r2
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	6892      	ldr	r2, [r2, #8]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6839      	ldr	r1, [r7, #0]
 800f5fc:	4798      	blx	r3
    }
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800f606:	b480      	push	{r7}
 800f608:	b083      	sub	sp, #12
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d010      	beq.n	800f638 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d107      	bne.n	800f62e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800f62a:	2301      	movs	r3, #1
 800f62c:	e000      	b.n	800f630 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800f62e:	2300      	movs	r3, #0
 800f630:	2b01      	cmp	r3, #1
 800f632:	d001      	beq.n	800f638 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 800f638:	2300      	movs	r3, #0
    }
 800f63a:	4618      	mov	r0, r3
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
	...

0800f648 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 800f648:	b590      	push	{r4, r7, lr}
 800f64a:	b093      	sub	sp, #76	; 0x4c
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe fd82 	bl	800e15c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7a9b      	ldrb	r3, [r3, #10]
 800f65c:	3301      	adds	r3, #1
 800f65e:	b2da      	uxtb	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	7a9a      	ldrb	r2, [r3, #10]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	7a5b      	ldrb	r3, [r3, #9]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d82b      	bhi.n	800f6c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	7a9b      	ldrb	r3, [r3, #10]
 800f674:	b298      	uxth	r0, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	7a5b      	ldrb	r3, [r3, #9]
 800f680:	b29b      	uxth	r3, r3
 800f682:	2100      	movs	r1, #0
 800f684:	f009 fcc2 	bl	801900c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800f688:	4603      	mov	r3, r0
 800f68a:	461a      	mov	r2, r3
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f696:	b29b      	uxth	r3, r3
 800f698:	f003 0301 	and.w	r3, r3, #1
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d019      	beq.n	800f6d6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800f6b0:	2a00      	cmp	r2, #0
 800f6b2:	dd01      	ble.n	800f6b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	e001      	b.n	800f6bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800f6b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6bc:	4413      	add	r3, r2
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	b21a      	sxth	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	81da      	strh	r2, [r3, #14]
 800f6c6:	e006      	b.n	800f6d6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	729a      	strb	r2, [r3, #10]
            return;
 800f6d4:	e07d      	b.n	800f7d2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        switch (templateDirection)
        {
        case EAST:
            {
                // Cover must have width of remaining part
                const uint16_t prevSolidWidth = solid.getWidth();
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	3310      	adds	r3, #16
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fe fbbe 	bl	800de5c <_ZNK8touchgfx8Drawable8getWidthEv>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f103 0010 	add.w	r0, r3, #16
 800f6ea:	4b3b      	ldr	r3, [pc, #236]	; (800f7d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800f6ec:	881a      	ldrh	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	1ad3      	subs	r3, r2, r3
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	b21b      	sxth	r3, r3
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	f7fe fbf6 	bl	800deee <_ZN8touchgfx8Drawable8setWidthEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3310      	adds	r3, #16
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fba8 	bl	800de5c <_ZNK8touchgfx8Drawable8getWidthEv>
 800f70c:	4603      	mov	r3, r0
 800f70e:	b29b      	uxth	r3, r3
 800f710:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	3310      	adds	r3, #16
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fe fb9e 	bl	800de5c <_ZNK8touchgfx8Drawable8getWidthEv>
 800f720:	4603      	mov	r3, r0
 800f722:	4619      	mov	r1, r3
 800f724:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800f728:	4b2c      	ldr	r3, [pc, #176]	; (800f7dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800f72a:	881b      	ldrh	r3, [r3, #0]
 800f72c:	b21b      	sxth	r3, r3
 800f72e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	4613      	mov	r3, r2
 800f736:	2200      	movs	r2, #0
 800f738:	f7fe fa1f 	bl	800db7a <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	3310      	adds	r3, #16
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f750:	4611      	mov	r1, r2
 800f752:	4798      	blx	r3
                break;
 800f754:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	7a9b      	ldrb	r3, [r3, #10]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d139      	bne.n	800f7d2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
 800f75e:	4b20      	ldr	r3, [pc, #128]	; (800f7e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x198>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d035      	beq.n	800f7d2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3310      	adds	r3, #16
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe fb3c 	bl	800dde8 <_ZNK8touchgfx8Drawable7getRectEv>
 800f770:	4602      	mov	r2, r0
 800f772:	f107 0310 	add.w	r3, r7, #16
 800f776:	6810      	ldr	r0, [r2, #0]
 800f778:	6851      	ldr	r1, [r2, #4]
 800f77a:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800f77c:	f7fe fc90 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800f780:	4603      	mov	r3, r0
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	3230      	adds	r2, #48	; 0x30
 800f786:	6812      	ldr	r2, [r2, #0]
 800f788:	4618      	mov	r0, r3
 800f78a:	4790      	blx	r2
 800f78c:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 800f78e:	f107 0308 	add.w	r3, r7, #8
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe f9da 	bl	800db4c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800f798:	2300      	movs	r3, #0
 800f79a:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 800f7a0:	4b0d      	ldr	r3, [pc, #52]	; (800f7d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800f7a2:	881b      	ldrh	r3, [r3, #0]
 800f7a4:	b21b      	sxth	r3, r3
 800f7a6:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 800f7a8:	4b0c      	ldr	r3, [pc, #48]	; (800f7dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	b21b      	sxth	r3, r3
 800f7ae:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800f7b0:	f7fe fc76 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800f7b4:	f7fe fc80 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 800f7b8:	6803      	ldr	r3, [r0, #0]
 800f7ba:	330c      	adds	r3, #12
 800f7bc:	681c      	ldr	r4, [r3, #0]
 800f7be:	f107 0310 	add.w	r3, r7, #16
 800f7c2:	f107 0208 	add.w	r2, r7, #8
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	9101      	str	r1, [sp, #4]
 800f7ca:	21ff      	movs	r1, #255	; 0xff
 800f7cc:	9100      	str	r1, [sp, #0]
 800f7ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7d0:	47a0      	blx	r4
        }
    }
 800f7d2:	3744      	adds	r7, #68	; 0x44
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd90      	pop	{r4, r7, pc}
 800f7d8:	2004f650 	.word	0x2004f650
 800f7dc:	2004f652 	.word	0x2004f652
 800f7e0:	2004f65a 	.word	0x2004f65a

0800f7e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6858      	ldr	r0, [r3, #4]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3364      	adds	r3, #100	; 0x64
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	3210      	adds	r2, #16
 800f7fe:	4611      	mov	r1, r2
 800f800:	4798      	blx	r3
    }
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b082      	sub	sp, #8
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe fcb5 	bl	800e184 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6858      	ldr	r0, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	3360      	adds	r3, #96	; 0x60
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	3210      	adds	r2, #16
 800f82c:	4611      	mov	r1, r2
 800f82e:	4798      	blx	r3
    }
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
    {
    }
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
        }
 800f856:	bf00      	nop
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800f862:	b580      	push	{r7, lr}
 800f864:	b084      	sub	sp, #16
 800f866:	af02      	add	r7, sp, #8
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	4613      	mov	r3, r2
 800f87c:	2200      	movs	r2, #0
 800f87e:	2100      	movs	r1, #0
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7fe f97a 	bl	800db7a <_ZN8touchgfx4RectC1Essss>
        }
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f88e:	b580      	push	{r7, lr}
 800f890:	b082      	sub	sp, #8
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	68d2      	ldr	r2, [r2, #12]
 800f89e:	1052      	asrs	r2, r2, #1
 800f8a0:	1899      	adds	r1, r3, r2
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d102      	bne.n	800f8b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	e00a      	b.n	800f8ca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	68d2      	ldr	r2, [r2, #12]
 800f8bc:	1052      	asrs	r2, r2, #1
 800f8be:	4413      	add	r3, r2
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	6892      	ldr	r2, [r2, #8]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4608      	mov	r0, r1
 800f8cc:	4798      	blx	r3
    }
 800f8ce:	bf00      	nop
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d010      	beq.n	800f908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d107      	bne.n	800f8fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e000      	b.n	800f900 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f8fe:	2300      	movs	r3, #0
 800f900:	2b01      	cmp	r3, #1
 800f902:	d001      	beq.n	800f908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f908:	2300      	movs	r3, #0
    }
 800f90a:	4618      	mov	r0, r3
 800f90c:	370c      	adds	r7, #12
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f916:	b480      	push	{r7}
 800f918:	b083      	sub	sp, #12
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
        : color(0)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	601a      	str	r2, [r3, #0]
    }
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr

0800f932 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f932:	b480      	push	{r7}
 800f934:	b083      	sub	sp, #12
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	6039      	str	r1, [r7, #0]
        : color(col)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	683a      	ldr	r2, [r7, #0]
 800f940:	601a      	str	r2, [r3, #0]
    }
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
        return color;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
    }
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
    {
 800f988:	4a06      	ldr	r2, [pc, #24]	; (800f9a4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3304      	adds	r3, #4
 800f992:	4618      	mov	r0, r3
 800f994:	f000 ff84 	bl	80108a0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	080294d8 	.word	0x080294d8

0800f9a8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    }
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7ff ffe5 	bl	800f980 <_ZN8touchgfx6ScreenD1Ev>
 800f9b6:	213c      	movs	r1, #60	; 0x3c
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f016 fbc5 	bl	8026148 <_ZdlPvj>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
    {
    }
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    {
    }
 800f9e4:	bf00      	nop
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    {
    }
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
    {
    }
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	460b      	mov	r3, r1
 800fa22:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	6839      	ldr	r1, [r7, #0]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f003 fdaf 	bl	80135a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	2326      	movs	r3, #38	; 0x26
 800fa5e:	461a      	mov	r2, r3
 800fa60:	2100      	movs	r1, #0
 800fa62:	f016 fc1b 	bl	802629c <memset>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe fcd3 	bl	800e414 <_ZN8touchgfx6WidgetC1Ev>
 800fa6e:	4a09      	ldr	r2, [pc, #36]	; (800fa94 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	22ff      	movs	r2, #255	; 0xff
 800fa78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	3328      	adds	r3, #40	; 0x28
 800fa80:	2100      	movs	r1, #0
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff ff55 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3708      	adds	r7, #8
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	08029254 	.word	0x08029254

0800fa98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	683a      	ldr	r2, [r7, #0]
 800faa6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800fab4:	b480      	push	{r7}
 800fab6:	b083      	sub	sp, #12
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800fabc:	4a06      	ldr	r2, [pc, #24]	; (800fad8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2200      	movs	r2, #0
 800fac6:	809a      	strh	r2, [r3, #4]
    {
    }
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4618      	mov	r0, r3
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	080287fc 	.word	0x080287fc

0800fadc <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    {
 800fae4:	4a04      	ldr	r2, [pc, #16]	; (800faf8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	601a      	str	r2, [r3, #0]
    }
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	080287fc 	.word	0x080287fc

0800fafc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
    }
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff ffe9 	bl	800fadc <_ZN8touchgfx15AbstractPainterD1Ev>
 800fb0a:	2108      	movs	r1, #8
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f016 fb1b 	bl	8026148 <_ZdlPvj>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800fb24:	2300      	movs	r3, #0
    }
 800fb26:	4618      	mov	r0, r3
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800fb32:	b480      	push	{r7}
 800fb34:	b083      	sub	sp, #12
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	809a      	strh	r2, [r3, #4]
        return true;
 800fb46:	2301      	movs	r3, #1
    }
 800fb48:	4618      	mov	r0, r3
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
    {
        return;
 800fb5c:	bf00      	nop
    }
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
            : v(0)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	601a      	str	r2, [r3, #0]
        {
        }
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr

0800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
            : v(i)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	683a      	ldr	r2, [r7, #0]
 800fb92:	601a      	str	r2, [r3, #0]
        {
        }
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4618      	mov	r0, r3
 800fb98:	370c      	adds	r7, #12
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800fba2:	b480      	push	{r7}
 800fba4:	b083      	sub	sp, #12
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
        {
            return v;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
        }
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
 800fbc2:	6039      	str	r1, [r7, #0]
            : v(i)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	601a      	str	r2, [r3, #0]
        {
        }
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	78fa      	ldrb	r2, [r7, #3]
 800fc04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800fc08:	bf00      	nop
 800fc0a:	370c      	adds	r7, #12
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800fc22:	4618      	mov	r0, r3
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7fd ff87 	bl	800db4c <_ZN8touchgfx4RectC1Ev>
    }
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
	...

0800fc48 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
    {
 800fc52:	4a08      	ldr	r2, [pc, #32]	; (800fc74 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3304      	adds	r3, #4
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fe5a 	bl	800f916 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800fc62:	6839      	ldr	r1, [r7, #0]
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f827 	bl	800fcb8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	080287e8 	.word	0x080287e8

0800fc78 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
    {
 800fc80:	4a04      	ldr	r2, [pc, #16]	; (800fc94 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
    }
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr
 800fc94:	080287e8 	.word	0x080287e8

0800fc98 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
    }
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ffe9 	bl	800fc78 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800fca6:	2108      	movs	r1, #8
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f016 fa4d 	bl	8026148 <_ZdlPvj>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	605a      	str	r2, [r3, #4]
    }
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff fee8 	bl	800fab4 <_ZN8touchgfx15AbstractPainterC1Ev>
 800fce4:	4a26      	ldr	r2, [pc, #152]	; (800fd80 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	601a      	str	r2, [r3, #0]
 800fcea:	2300      	movs	r3, #0
 800fcec:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800fcee:	f7fe f9e3 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	322c      	adds	r2, #44	; 0x2c
 800fcf8:	6812      	ldr	r2, [r2, #0]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	4790      	blx	r2
 800fcfe:	4603      	mov	r3, r0
 800fd00:	461a      	mov	r2, r3
 800fd02:	7bfb      	ldrb	r3, [r7, #15]
 800fd04:	4293      	cmp	r3, r2
 800fd06:	bf0c      	ite	eq
 800fd08:	2301      	moveq	r3, #1
 800fd0a:	2300      	movne	r3, #0
 800fd0c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800fd0e:	f7fe f9c7 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fd12:	4603      	mov	r3, r0
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fe27 	bl	800f968 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bf14      	ite	ne
 800fd20:	2301      	movne	r3, #1
 800fd22:	2300      	moveq	r3, #0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d01b      	beq.n	800fd62 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800fd2a:	f7fe f9b9 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7ff fe19 	bl	800f968 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800fd36:	4603      	mov	r3, r0
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	322c      	adds	r2, #44	; 0x2c
 800fd3c:	6812      	ldr	r2, [r2, #0]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	4790      	blx	r2
 800fd42:	4603      	mov	r3, r0
 800fd44:	461a      	mov	r2, r3
 800fd46:	7bfb      	ldrb	r3, [r7, #15]
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	bf0c      	ite	eq
 800fd4c:	2301      	moveq	r3, #1
 800fd4e:	2300      	movne	r3, #0
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	4313      	orrs	r3, r2
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	bf14      	ite	ne
 800fd5c:	2301      	movne	r3, #1
 800fd5e:	2300      	moveq	r3, #0
 800fd60:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800fd62:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d105      	bne.n	800fd74 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 800fd68:	4b06      	ldr	r3, [pc, #24]	; (800fd84 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 800fd6a:	4a07      	ldr	r2, [pc, #28]	; (800fd88 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 800fd6c:	212c      	movs	r1, #44	; 0x2c
 800fd6e:	4807      	ldr	r0, [pc, #28]	; (800fd8c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 800fd70:	f016 fa16 	bl	80261a0 <__assert_func>
 800fd74:	bf00      	nop
    }
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	080287c8 	.word	0x080287c8
 800fd84:	080278dc 	.word	0x080278dc
 800fd88:	0802793c 	.word	0x0802793c
 800fd8c:	08027978 	.word	0x08027978

0800fd90 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	4a05      	ldr	r2, [pc, #20]	; (800fdb0 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7ff fe9b 	bl	800fadc <_ZN8touchgfx15AbstractPainterD1Ev>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	080287c8 	.word	0x080287c8

0800fdb4 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff ffe7 	bl	800fd90 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 800fdc2:	2108      	movs	r1, #8
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f016 f9bf 	bl	8026148 <_ZdlPvj>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7ff ff77 	bl	800fcd4 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3308      	adds	r3, #8
 800fdea:	6839      	ldr	r1, [r7, #0]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7ff ff2b 	bl	800fc48 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800fdf2:	4a05      	ldr	r2, [pc, #20]	; (800fe08 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	601a      	str	r2, [r3, #0]
 800fdf8:	4a04      	ldr	r2, [pc, #16]	; (800fe0c <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	609a      	str	r2, [r3, #8]
    {
    }
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	08028f60 	.word	0x08028f60
 800fe0c:	08028f84 	.word	0x08028f84

0800fe10 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800fe10:	b590      	push	{r4, r7, lr}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff ff49 	bl	800fcb8 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 800fe2c:	f107 030c 	add.w	r3, r7, #12
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff fd8d 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 800fe36:	4603      	mov	r3, r0
 800fe38:	0a1b      	lsrs	r3, r3, #8
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fe40:	f023 0307 	bic.w	r3, r3, #7
 800fe44:	b29c      	uxth	r4, r3
 800fe46:	f107 030c 	add.w	r3, r7, #12
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7ff fd80 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 800fe50:	4603      	mov	r3, r0
 800fe52:	095b      	lsrs	r3, r3, #5
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	4323      	orrs	r3, r4
 800fe5e:	b29c      	uxth	r4, r3
 800fe60:	f107 030c 	add.w	r3, r7, #12
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7ff fd73 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	08db      	lsrs	r3, r3, #3
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	f003 031f 	and.w	r3, r3, #31
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	4323      	orrs	r3, r4
 800fe78:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	821a      	strh	r2, [r3, #16]
    }
 800fe7e:	bf00      	nop
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd90      	pop	{r4, r7, pc}

0800fe86 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800fe86:	f1a0 0008 	sub.w	r0, r0, #8
 800fe8a:	e7c1      	b.n	800fe10 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0800fe8c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	4a05      	ldr	r2, [pc, #20]	; (800feac <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7ff fd6f 	bl	800f980 <_ZN8touchgfx6ScreenD1Ev>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	08028794 	.word	0x08028794

0800feb0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f7ff ffe7 	bl	800fe8c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800febe:	2140      	movs	r1, #64	; 0x40
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f016 f941 	bl	8026148 <_ZdlPvj>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	4a1b      	ldr	r2, [pc, #108]	; (800ff48 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fee4:	4618      	mov	r0, r3
 800fee6:	f000 fd41 	bl	801096c <_ZN8touchgfx13PainterRGB565D1Ev>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 fcb3 	bl	801085c <_ZN8touchgfx5ShapeILt4EED1Ev>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fd35 	bl	801096c <_ZN8touchgfx13PainterRGB565D1Ev>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	33f4      	adds	r3, #244	; 0xf4
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 fca8 	bl	801085c <_ZN8touchgfx5ShapeILt4EED1Ev>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	33e0      	adds	r3, #224	; 0xe0
 800ff10:	4618      	mov	r0, r3
 800ff12:	f000 fd2b 	bl	801096c <_ZN8touchgfx13PainterRGB565D1Ev>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3398      	adds	r3, #152	; 0x98
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fd04 	bl	8010928 <_ZN8touchgfx6CircleD1Ev>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	336c      	adds	r3, #108	; 0x6c
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fcdd 	bl	80108e4 <_ZN8touchgfx3BoxD1Ev>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	3340      	adds	r3, #64	; 0x40
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 fcd8 	bl	80108e4 <_ZN8touchgfx3BoxD1Ev>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff ffa8 	bl	800fe8c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	080286cc 	.word	0x080286cc

0800ff4c <_ZN15Screen1ViewBaseD0Ev>:
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff ffbb 	bl	800fed0 <_ZN15Screen1ViewBaseD1Ev>
 800ff5a:	f241 013c 	movw	r1, #4156	; 0x103c
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f016 f8f2 	bl	8026148 <_ZdlPvj>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b082      	sub	sp, #8
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800ff76:	f007 fbdf 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 800ff7a:	4603      	mov	r3, r0
    }
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	4a05      	ldr	r2, [pc, #20]	; (800ffa4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	601a      	str	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fe fa4f 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	0802916c 	.word	0x0802916c

0800ffa8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ffe7 	bl	800ff84 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ffb6:	212c      	movs	r1, #44	; 0x2c
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f016 f8c5 	bl	8026148 <_ZdlPvj>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	4a05      	ldr	r2, [pc, #20]	; (800ffe8 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff ffd3 	bl	800ff84 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	08029060 	.word	0x08029060

0800ffec <_ZN8touchgfx13AbstractShapeD0Ev>:
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7ff ffe7 	bl	800ffc8 <_ZN8touchgfx13AbstractShapeD1Ev>
 800fffa:	2148      	movs	r1, #72	; 0x48
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f016 f8a3 	bl	8026148 <_ZdlPvj>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 801000c:	b5b0      	push	{r4, r5, r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4618      	mov	r0, r3
 8010018:	f004 fcc0 	bl	801499c <_ZN8touchgfx13AbstractShapeC1Ev>
 801001c:	4a1b      	ldr	r2, [pc, #108]	; (801008c <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3348      	adds	r3, #72	; 0x48
 8010026:	2403      	movs	r4, #3
 8010028:	461d      	mov	r5, r3
 801002a:	2c00      	cmp	r4, #0
 801002c:	db05      	blt.n	801003a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 801002e:	4628      	mov	r0, r5
 8010030:	f7ff fd9a 	bl	800fb68 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8010034:	3504      	adds	r5, #4
 8010036:	3c01      	subs	r4, #1
 8010038:	e7f7      	b.n	801002a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	3358      	adds	r3, #88	; 0x58
 801003e:	2403      	movs	r4, #3
 8010040:	461d      	mov	r5, r3
 8010042:	2c00      	cmp	r4, #0
 8010044:	db05      	blt.n	8010052 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 8010046:	4628      	mov	r0, r5
 8010048:	f7ff fd8e 	bl	800fb68 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 801004c:	3504      	adds	r5, #4
 801004e:	3c01      	subs	r4, #1
 8010050:	e7f7      	b.n	8010042 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3368      	adds	r3, #104	; 0x68
 8010056:	2403      	movs	r4, #3
 8010058:	461d      	mov	r5, r3
 801005a:	2c00      	cmp	r4, #0
 801005c:	db05      	blt.n	801006a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 801005e:	4628      	mov	r0, r5
 8010060:	f7ff fd82 	bl	800fb68 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8010064:	3504      	adds	r5, #4
 8010066:	3c01      	subs	r4, #1
 8010068:	e7f7      	b.n	801005a <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	3378      	adds	r3, #120	; 0x78
 801006e:	2403      	movs	r4, #3
 8010070:	461d      	mov	r5, r3
 8010072:	2c00      	cmp	r4, #0
 8010074:	db05      	blt.n	8010082 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 8010076:	4628      	mov	r0, r5
 8010078:	f7ff fd76 	bl	800fb68 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 801007c:	3504      	adds	r5, #4
 801007e:	3c01      	subs	r4, #1
 8010080:	e7f7      	b.n	8010072 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bdb0      	pop	{r4, r5, r7, pc}
 801008c:	08028700 	.word	0x08028700

08010090 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 8010090:	b5b0      	push	{r4, r5, r7, lr}
 8010092:	b0a0      	sub	sp, #128	; 0x80
 8010094:	af02      	add	r7, sp, #8
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f000 fa6a 	bl	8010574 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80100a0:	4ae1      	ldr	r2, [pc, #900]	; (8010428 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	601a      	str	r2, [r3, #0]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	3340      	adds	r3, #64	; 0x40
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff fcd0 	bl	800fa50 <_ZN8touchgfx3BoxC1Ev>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	336c      	adds	r3, #108	; 0x6c
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7ff fccb 	bl	800fa50 <_ZN8touchgfx3BoxC1Ev>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3398      	adds	r3, #152	; 0x98
 80100be:	4618      	mov	r0, r3
 80100c0:	f004 fd8a 	bl	8014bd8 <_ZN8touchgfx6CircleC1Ev>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80100ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100ce:	2100      	movs	r1, #0
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7ff fc2e 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 80100d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80100d8:	4620      	mov	r0, r4
 80100da:	f7ff fe7b 	bl	800fdd4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	33f4      	adds	r3, #244	; 0xf4
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff ff92 	bl	801000c <_ZN8touchgfx5ShapeILt4EEC1Ev>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80100ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80100f2:	2100      	movs	r1, #0
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff fc1c 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 80100fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80100fc:	4620      	mov	r0, r4
 80100fe:	f7ff fe69 	bl	800fdd4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010108:	4618      	mov	r0, r3
 801010a:	f7ff ff7f 	bl	801000c <_ZN8touchgfx5ShapeILt4EEC1Ev>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010114:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010118:	2100      	movs	r1, #0
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fc09 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 8010120:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff fe56 	bl	800fdd4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801012e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010132:	4618      	mov	r0, r3
 8010134:	f006 fa54 	bl	80165e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801013e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	23f0      	movs	r3, #240	; 0xf0
 8010146:	2200      	movs	r2, #0
 8010148:	2100      	movs	r1, #0
 801014a:	f7fd fe59 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010154:	2300      	movs	r3, #0
 8010156:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 801015a:	2300      	movs	r3, #0
 801015c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8010160:	2300      	movs	r3, #0
 8010162:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010166:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801016a:	041b      	lsls	r3, r3, #16
 801016c:	461a      	mov	r2, r3
 801016e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8010172:	021b      	lsls	r3, r3, #8
 8010174:	431a      	orrs	r2, r3
 8010176:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 801017a:	4313      	orrs	r3, r2
 801017c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010180:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010184:	4611      	mov	r1, r2
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff fbd3 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 801018c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801018e:	4619      	mov	r1, r3
 8010190:	4620      	mov	r0, r4
 8010192:	f7ff fc81 	bl	800fa98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 240, 320);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801019c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	23f0      	movs	r3, #240	; 0xf0
 80101a4:	2200      	movs	r2, #0
 80101a6:	2100      	movs	r1, #0
 80101a8:	f7fd fe2a 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80101b2:	23ff      	movs	r3, #255	; 0xff
 80101b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80101b8:	23ff      	movs	r3, #255	; 0xff
 80101ba:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80101be:	23ff      	movs	r3, #255	; 0xff
 80101c0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80101c4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80101c8:	041b      	lsls	r3, r3, #16
 80101ca:	461a      	mov	r2, r3
 80101cc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80101d0:	021b      	lsls	r3, r3, #8
 80101d2:	431a      	orrs	r2, r3
 80101d4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80101d8:	4313      	orrs	r3, r2
 80101da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80101de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80101e2:	4611      	mov	r1, r2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff fba4 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 80101ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101ec:	4619      	mov	r1, r3
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7ff fc52 	bl	800fa98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circle1.setPosition(80, 120, 80, 80);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80101fa:	2350      	movs	r3, #80	; 0x50
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	2350      	movs	r3, #80	; 0x50
 8010200:	2278      	movs	r2, #120	; 0x78
 8010202:	2150      	movs	r1, #80	; 0x50
 8010204:	f7fd fdfc 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	3398      	adds	r3, #152	; 0x98
 801020c:	2228      	movs	r2, #40	; 0x28
 801020e:	2128      	movs	r1, #40	; 0x28
 8010210:	4618      	mov	r0, r3
 8010212:	f000 f962 	bl	80104da <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	3398      	adds	r3, #152	; 0x98
 801021a:	2128      	movs	r1, #40	; 0x28
 801021c:	4618      	mov	r0, r3
 801021e:	f000 f9bf 	bl	80105a0 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	3398      	adds	r3, #152	; 0x98
 8010226:	2100      	movs	r1, #0
 8010228:	4618      	mov	r0, r3
 801022a:	f000 f9d0 	bl	80105ce <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3398      	adds	r3, #152	; 0x98
 8010232:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010236:	2100      	movs	r1, #0
 8010238:	4618      	mov	r0, r3
 801023a:	f000 f974 	bl	8010526 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8010244:	2300      	movs	r3, #0
 8010246:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 801024a:	23ff      	movs	r3, #255	; 0xff
 801024c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8010250:	2300      	movs	r3, #0
 8010252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8010256:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 801025a:	041b      	lsls	r3, r3, #16
 801025c:	461a      	mov	r2, r3
 801025e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8010262:	021b      	lsls	r3, r3, #8
 8010264:	431a      	orrs	r2, r3
 8010266:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801026a:	4313      	orrs	r3, r2
 801026c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010270:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010274:	4611      	mov	r1, r2
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff fb5b 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 801027c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801027e:	4619      	mov	r1, r3
 8010280:	4620      	mov	r0, r4
 8010282:	f7ff fdc5 	bl	800fe10 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f103 0298 	add.w	r2, r3, #152	; 0x98
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	33e0      	adds	r3, #224	; 0xe0
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7ff fca0 	bl	800fbd8 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    circle1.setAlpha(162);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3398      	adds	r3, #152	; 0x98
 801029c:	21a2      	movs	r1, #162	; 0xa2
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff fca8 	bl	800fbf4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>

    shape1.setPosition(80, 40, 80, 80);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80102aa:	2350      	movs	r3, #80	; 0x50
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	2350      	movs	r3, #80	; 0x50
 80102b0:	2228      	movs	r2, #40	; 0x28
 80102b2:	2150      	movs	r1, #80	; 0x50
 80102b4:	f7fd fda4 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setAlpha(95);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	33f4      	adds	r3, #244	; 0xf4
 80102bc:	215f      	movs	r1, #95	; 0x5f
 80102be:	4618      	mov	r0, r3
 80102c0:	f7ff fc98 	bl	800fbf4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    shape1.setOrigin(0.0f, 0.0f);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	33f4      	adds	r3, #244	; 0xf4
 80102c8:	eddf 0a58 	vldr	s1, [pc, #352]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80102cc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80102d0:	4618      	mov	r0, r3
 80102d2:	f000 f993 	bl	80105fc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.0f, 1.0f);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	33f4      	adds	r3, #244	; 0xf4
 80102da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80102de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80102e2:	4618      	mov	r0, r3
 80102e4:	f000 f9ea 	bl	80106bc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.0f);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	33f4      	adds	r3, #244	; 0xf4
 80102ec:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 fa27 	bl	8010744 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80102fc:	23ff      	movs	r3, #255	; 0xff
 80102fe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8010302:	2300      	movs	r3, #0
 8010304:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8010308:	2300      	movs	r3, #0
 801030a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801030e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8010312:	041b      	lsls	r3, r3, #16
 8010314:	461a      	mov	r2, r3
 8010316:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801031a:	021b      	lsls	r3, r3, #8
 801031c:	431a      	orrs	r2, r3
 801031e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8010322:	4313      	orrs	r3, r2
 8010324:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801032c:	4611      	mov	r1, r2
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff faff 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 8010334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010336:	4619      	mov	r1, r3
 8010338:	4620      	mov	r0, r4
 801033a:	f7ff fd69 	bl	800fe10 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801034a:	4619      	mov	r1, r3
 801034c:	4610      	mov	r0, r2
 801034e:	f7ff fc43 	bl	800fbd8 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 8010352:	4b37      	ldr	r3, [pc, #220]	; (8010430 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 8010354:	f107 0408 	add.w	r4, r7, #8
 8010358:	461d      	mov	r5, r3
 801035a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801035c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801035e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	33f4      	adds	r3, #244	; 0xf4
 801036a:	f107 0208 	add.w	r2, r7, #8
 801036e:	4611      	mov	r1, r2
 8010370:	4618      	mov	r0, r3
 8010372:	f000 fa1f 	bl	80107b4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    shape2.setPosition(80, 200, 80, 80);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 801037c:	2350      	movs	r3, #80	; 0x50
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	2350      	movs	r3, #80	; 0x50
 8010382:	22c8      	movs	r2, #200	; 0xc8
 8010384:	2150      	movs	r1, #80	; 0x50
 8010386:	f7fd fd3b 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape2.setOrigin(0.0f, 0.0f);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010390:	eddf 0a26 	vldr	s1, [pc, #152]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010394:	ed9f 0a25 	vldr	s0, [pc, #148]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010398:	4618      	mov	r0, r3
 801039a:	f000 f92f 	bl	80105fc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape2.setScale(1.0f, 1.0f);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80103a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80103ac:	4618      	mov	r0, r3
 80103ae:	f000 f985 	bl	80106bc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape2.setAngle(0.0f);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80103b8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801042c <_ZN15Screen1ViewBaseC1Ev+0x39c>
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 f9c1 	bl	8010744 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape2Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f503 7406 	add.w	r4, r3, #536	; 0x218
 80103c8:	2300      	movs	r3, #0
 80103ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80103ce:	2300      	movs	r3, #0
 80103d0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80103d4:	23ff      	movs	r3, #255	; 0xff
 80103d6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80103da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80103de:	041b      	lsls	r3, r3, #16
 80103e0:	461a      	mov	r2, r3
 80103e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80103e6:	021b      	lsls	r3, r3, #8
 80103e8:	431a      	orrs	r2, r3
 80103ea:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80103ee:	4313      	orrs	r3, r2
 80103f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80103f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80103f8:	4611      	mov	r1, r2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7ff fa99 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 8010400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010402:	4619      	mov	r1, r3
 8010404:	4620      	mov	r0, r4
 8010406:	f7ff fd03 	bl	800fe10 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape2.setPainter(shape2Painter);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010416:	4619      	mov	r1, r3
 8010418:	4610      	mov	r0, r2
 801041a:	f7ff fbdd 	bl	800fbd8 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape2Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 801041e:	4b04      	ldr	r3, [pc, #16]	; (8010430 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 8010420:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010424:	e006      	b.n	8010434 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8010426:	bf00      	nop
 8010428:	080286cc 	.word	0x080286cc
 801042c:	00000000 	.word	0x00000000
 8010430:	080279d8 	.word	0x080279d8
 8010434:	461d      	mov	r5, r3
 8010436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801043a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801043e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape2.setShape(shape2Points);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010448:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801044c:	4611      	mov	r1, r2
 801044e:	4618      	mov	r0, r3
 8010450:	f000 f9b0 	bl	80107b4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	3340      	adds	r3, #64	; 0x40
 801045a:	4619      	mov	r1, r3
 801045c:	4610      	mov	r0, r2
 801045e:	f7ff fae7 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	336c      	adds	r3, #108	; 0x6c
 8010468:	4619      	mov	r1, r3
 801046a:	4610      	mov	r0, r2
 801046c:	f7ff fae0 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3398      	adds	r3, #152	; 0x98
 8010476:	4619      	mov	r1, r3
 8010478:	4610      	mov	r0, r2
 801047a:	f7ff fad9 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	33f4      	adds	r3, #244	; 0xf4
 8010484:	4619      	mov	r1, r3
 8010486:	4610      	mov	r0, r2
 8010488:	f7ff fad2 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape2);
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010494:	4619      	mov	r1, r3
 8010496:	4610      	mov	r0, r2
 8010498:	f7ff faca 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4618      	mov	r0, r3
 80104a0:	3778      	adds	r7, #120	; 0x78
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bdb0      	pop	{r4, r5, r7, pc}
 80104a6:	bf00      	nop

080104a8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]

}
 80104b0:	bf00      	nop
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
    //Screen1to2
    //When screen transition ends change screen to Screen2
    //Go to Screen2 with screen transition towards East
    application().gotoScreen2ScreenWipeTransitionEast();
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7ff fd52 	bl	800ff6e <_ZN15Screen1ViewBase11applicationEv>
 80104ca:	4603      	mov	r3, r0
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fe f8bb 	bl	800e648 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>
}
 80104d2:	bf00      	nop
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}

080104da <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 80104da:	b580      	push	{r7, lr}
 80104dc:	b088      	sub	sp, #32
 80104de:	af00      	add	r7, sp, #0
 80104e0:	60f8      	str	r0, [r7, #12]
 80104e2:	60b9      	str	r1, [r7, #8]
 80104e4:	607a      	str	r2, [r7, #4]
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	015a      	lsls	r2, r3, #5
 80104ee:	f107 0314 	add.w	r3, r7, #20
 80104f2:	4611      	mov	r1, r2
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fb45 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	62da      	str	r2, [r3, #44]	; 0x2c
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	61fb      	str	r3, [r7, #28]
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	015a      	lsls	r2, r3, #5
 801050a:	f107 0310 	add.w	r3, r7, #16
 801050e:	4611      	mov	r1, r2
 8010510:	4618      	mov	r0, r3
 8010512:	f7ff fb37 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5(y);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801051e:	bf00      	nop
 8010520:	3720      	adds	r7, #32
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     *
     * @note    The area containing the Circle is not invalidated.
     * @note    Angles are given in degrees, so a full circle is 360.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8010526:	b580      	push	{r7, lr}
 8010528:	b088      	sub	sp, #32
 801052a:	af00      	add	r7, sp, #0
 801052c:	60f8      	str	r0, [r7, #12]
 801052e:	60b9      	str	r1, [r7, #8]
 8010530:	607a      	str	r2, [r7, #4]
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	61bb      	str	r3, [r7, #24]
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	015a      	lsls	r2, r3, #5
 801053a:	f107 0314 	add.w	r3, r7, #20
 801053e:	4611      	mov	r1, r2
 8010540:	4618      	mov	r0, r3
 8010542:	f7ff fb1f 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	639a      	str	r2, [r3, #56]	; 0x38
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	61fb      	str	r3, [r7, #28]
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	f107 0310 	add.w	r3, r7, #16
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fb11 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801056a:	bf00      	nop
 801056c:	3720      	adds	r7, #32
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4618      	mov	r0, r3
 8010580:	f008 fb92 	bl	8018ca8 <_ZN8touchgfx6ScreenC1Ev>
 8010584:	4a05      	ldr	r2, [pc, #20]	; (801059c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	08028794 	.word	0x08028794

080105a0 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	60fb      	str	r3, [r7, #12]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	015a      	lsls	r2, r3, #5
 80105b2:	f107 0308 	add.w	r3, r7, #8
 80105b6:	4611      	mov	r1, r2
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7ff fae3 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5(r);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80105c6:	bf00      	nop
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	015a      	lsls	r2, r3, #5
 80105e0:	f107 0308 	add.w	r3, r7, #8
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff facc 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80105f4:	bf00      	nop
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 80105fc:	b590      	push	{r4, r7, lr}
 80105fe:	b08b      	sub	sp, #44	; 0x2c
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	ed87 0a02 	vstr	s0, [r7, #8]
 8010608:	edc7 0a01 	vstr	s1, [r7, #4]
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	623b      	str	r3, [r7, #32]
 8010610:	edd7 7a08 	vldr	s15, [r7, #32]
 8010614:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80106b8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8010618:	ee67 7a87 	vmul.f32	s15, s15, s14
 801061c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010620:	f107 031c 	add.w	r3, r7, #28
 8010624:	ee17 1a90 	vmov	r1, s15
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff faab 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801062e:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 8010630:	617b      	str	r3, [r7, #20]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
 8010636:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801063a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80106b8 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 801063e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010646:	f107 0318 	add.w	r3, r7, #24
 801064a:	ee17 1a90 	vmov	r1, s15
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fa98 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010654:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8010656:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	332c      	adds	r3, #44	; 0x2c
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff faa0 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010662:	4604      	mov	r4, r0
 8010664:	f107 0314 	add.w	r3, r7, #20
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fa9a 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801066e:	4603      	mov	r3, r0
 8010670:	429c      	cmp	r4, r3
 8010672:	d10f      	bne.n	8010694 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	3330      	adds	r3, #48	; 0x30
 8010678:	4618      	mov	r0, r3
 801067a:	f7ff fa92 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801067e:	4604      	mov	r4, r0
 8010680:	f107 0310 	add.w	r3, r7, #16
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff fa8c 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801068a:	4603      	mov	r3, r0
 801068c:	429c      	cmp	r4, r3
 801068e:	d101      	bne.n	8010694 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8010690:	2301      	movs	r3, #1
 8010692:	e000      	b.n	8010696 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8010694:	2300      	movs	r3, #0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d109      	bne.n	80106ae <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	697a      	ldr	r2, [r7, #20]
 801069e:	62da      	str	r2, [r3, #44]	; 0x2c
        dy = dyNew;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	631a      	str	r2, [r3, #48]	; 0x30

        updateAbstractShapeCache();
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f004 f98e 	bl	80149c8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 80106ac:	e000      	b.n	80106b0 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 80106ae:	bf00      	nop
    }
 80106b0:	372c      	adds	r7, #44	; 0x2c
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd90      	pop	{r4, r7, pc}
 80106b6:	bf00      	nop
 80106b8:	42000000 	.word	0x42000000

080106bc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80106c8:	edc7 0a01 	vstr	s1, [r7, #4]
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10((int)(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 80106d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80106d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010740 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80106d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8010740 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80106e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106e8:	f107 0314 	add.w	r3, r7, #20
 80106ec:	ee17 1a90 	vmov	r1, s15
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fa62 	bl	800fbba <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	639a      	str	r2, [r3, #56]	; 0x38
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	61fb      	str	r3, [r7, #28]
 8010702:	edd7 7a07 	vldr	s15, [r7, #28]
 8010706:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010740 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 801070a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801070e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010740 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801071a:	f107 0310 	add.w	r3, r7, #16
 801071e:	ee17 1a90 	vmov	r1, s15
 8010722:	4618      	mov	r0, r3
 8010724:	f7ff fa49 	bl	800fbba <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	63da      	str	r2, [r3, #60]	; 0x3c
        updateAbstractShapeCache();
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f004 f949 	bl	80149c8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010736:	bf00      	nop
 8010738:	3720      	adds	r7, #32
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	42000000 	.word	0x42000000

08010744 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 8010744:	b590      	push	{r4, r7, lr}
 8010746:	b087      	sub	sp, #28
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	ed87 0a00 	vstr	s0, [r7]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	617b      	str	r3, [r7, #20]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010754:	edd7 7a05 	vldr	s15, [r7, #20]
 8010758:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80107b0 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 801075c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010764:	f107 0310 	add.w	r3, r7, #16
 8010768:	ee17 1a90 	vmov	r1, s15
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff fa09 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010772:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8010774:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	3334      	adds	r3, #52	; 0x34
 801077a:	4618      	mov	r0, r3
 801077c:	f7ff fa11 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010780:	4604      	mov	r4, r0
 8010782:	f107 030c 	add.w	r3, r7, #12
 8010786:	4618      	mov	r0, r3
 8010788:	f7ff fa0b 	bl	800fba2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801078c:	4603      	mov	r3, r0
 801078e:	429c      	cmp	r4, r3
 8010790:	bf14      	ite	ne
 8010792:	2301      	movne	r3, #1
 8010794:	2300      	moveq	r3, #0
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d005      	beq.n	80107a8 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	635a      	str	r2, [r3, #52]	; 0x34
            updateAbstractShapeCache();
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f004 f910 	bl	80149c8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80107a8:	bf00      	nop
 80107aa:	371c      	adds	r7, #28
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd90      	pop	{r4, r7, pc}
 80107b0:	42000000 	.word	0x42000000

080107b4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 80107b4:	b5b0      	push	{r4, r5, r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3370      	adds	r3, #112	; 0x70
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	4798      	blx	r3
 80107ca:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 80107cc:	2300      	movs	r3, #0
 80107ce:	61fb      	str	r3, [r7, #28]
 80107d0:	69fa      	ldr	r2, [r7, #28]
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	da38      	bge.n	801084a <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3374      	adds	r3, #116	; 0x74
 80107de:	681c      	ldr	r4, [r3, #0]
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	683a      	ldr	r2, [r7, #0]
 80107e6:	4413      	add	r3, r2
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	613b      	str	r3, [r7, #16]
 80107ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80107f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010858 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 80107f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80107f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107fc:	f107 030c 	add.w	r3, r7, #12
 8010800:	ee17 1a90 	vmov	r1, s15
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff f9bd 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	461d      	mov	r5, r3
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	00db      	lsls	r3, r3, #3
 8010812:	683a      	ldr	r2, [r7, #0]
 8010814:	4413      	add	r3, r2
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	617b      	str	r3, [r7, #20]
 801081a:	edd7 7a05 	vldr	s15, [r7, #20]
 801081e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010858 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8010822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801082a:	f107 0308 	add.w	r3, r7, #8
 801082e:	ee17 1a90 	vmov	r1, s15
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff f9a6 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	462a      	mov	r2, r5
 801083c:	69f9      	ldr	r1, [r7, #28]
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	3301      	adds	r3, #1
 8010846:	61fb      	str	r3, [r7, #28]
 8010848:	e7c2      	b.n	80107d0 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f004 f8bc 	bl	80149c8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010850:	bf00      	nop
 8010852:	3720      	adds	r7, #32
 8010854:	46bd      	mov	sp, r7
 8010856:	bdb0      	pop	{r4, r5, r7, pc}
 8010858:	42000000 	.word	0x42000000

0801085c <_ZN8touchgfx5ShapeILt4EED1Ev>:
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	4a05      	ldr	r2, [pc, #20]	; (801087c <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff fbab 	bl	800ffc8 <_ZN8touchgfx13AbstractShapeD1Ev>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	08028700 	.word	0x08028700

08010880 <_ZN8touchgfx5ShapeILt4EED0Ev>:
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff ffe7 	bl	801085c <_ZN8touchgfx5ShapeILt4EED1Ev>
 801088e:	2188      	movs	r1, #136	; 0x88
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f015 fc59 	bl	8026148 <_ZdlPvj>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	4a05      	ldr	r2, [pc, #20]	; (80108c0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fd fa5b 	bl	800dd6c <_ZN8touchgfx8DrawableD1Ev>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4618      	mov	r0, r3
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	08028d78 	.word	0x08028d78

080108c4 <_ZN8touchgfx9ContainerD0Ev>:
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f7ff ffe7 	bl	80108a0 <_ZN8touchgfx9ContainerD1Ev>
 80108d2:	212c      	movs	r1, #44	; 0x2c
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f015 fc37 	bl	8026148 <_ZdlPvj>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	4a05      	ldr	r2, [pc, #20]	; (8010904 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	601a      	str	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fd fd9f 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	08029254 	.word	0x08029254

08010908 <_ZN8touchgfx3BoxD0Ev>:
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ffe7 	bl	80108e4 <_ZN8touchgfx3BoxD1Ev>
 8010916:	212c      	movs	r1, #44	; 0x2c
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f015 fc15 	bl	8026148 <_ZdlPvj>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4618      	mov	r0, r3
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	4a05      	ldr	r2, [pc, #20]	; (8010948 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	f7ff fb23 	bl	800ff84 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	080290f4 	.word	0x080290f4

0801094c <_ZN8touchgfx6CircleD0Ev>:
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff ffe7 	bl	8010928 <_ZN8touchgfx6CircleD1Ev>
 801095a:	2148      	movs	r1, #72	; 0x48
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f015 fbf3 	bl	8026148 <_ZdlPvj>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	4a09      	ldr	r2, [pc, #36]	; (801099c <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	4a09      	ldr	r2, [pc, #36]	; (80109a0 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	609a      	str	r2, [r3, #8]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	3308      	adds	r3, #8
 8010984:	4618      	mov	r0, r3
 8010986:	f7ff f977 	bl	800fc78 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff f9ff 	bl	800fd90 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	08028f60 	.word	0x08028f60
 80109a0:	08028f84 	.word	0x08028f84

080109a4 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80109a4:	f1a0 0008 	sub.w	r0, r0, #8
 80109a8:	e7e0      	b.n	801096c <_ZN8touchgfx13PainterRGB565D1Ev>
 80109aa:	bf00      	nop

080109ac <_ZN8touchgfx13PainterRGB565D0Ev>:
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff ffd9 	bl	801096c <_ZN8touchgfx13PainterRGB565D1Ev>
 80109ba:	2114      	movs	r1, #20
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f015 fbc3 	bl	8026148 <_ZdlPvj>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 80109cc:	f1a0 0008 	sub.w	r0, r0, #8
 80109d0:	e7ec      	b.n	80109ac <_ZN8touchgfx13PainterRGB565D0Ev>

080109d2 <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 80109d2:	b480      	push	{r7}
 80109d4:	b083      	sub	sp, #12
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 80109da:	2304      	movs	r3, #4
    }
 80109dc:	4618      	mov	r0, r3
 80109de:	370c      	adds	r7, #12
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr

080109e8 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	db0e      	blt.n	8010a1a <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	2b03      	cmp	r3, #3
 8010a00:	dc0b      	bgt.n	8010a1a <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCorner[i] = x, yCorner[i] = y;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	68ba      	ldr	r2, [r7, #8]
 8010a06:	3212      	adds	r2, #18
 8010a08:	6879      	ldr	r1, [r7, #4]
 8010a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	68ba      	ldr	r2, [r7, #8]
 8010a12:	3216      	adds	r2, #22
 8010a14:	6839      	ldr	r1, [r7, #0]
 8010a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b084      	sub	sp, #16
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
 8010a2e:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	db08      	blt.n	8010a48 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b03      	cmp	r3, #3
 8010a3a:	dc05      	bgt.n	8010a48 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
        {
            return xCorner[i];
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	3212      	adds	r2, #18
 8010a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a46:	e00b      	b.n	8010a60 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3a>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	60fb      	str	r3, [r7, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	015a      	lsls	r2, r3, #5
 8010a50:	f107 0308 	add.w	r3, r7, #8
 8010a54:	4611      	mov	r1, r2
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff f894 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010a5c:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010a5e:	bf00      	nop
    }
 8010a60:	4618      	mov	r0, r3
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	db08      	blt.n	8010a8a <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2b03      	cmp	r3, #3
 8010a7c:	dc05      	bgt.n	8010a8a <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	3216      	adds	r2, #22
 8010a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a88:	e00b      	b.n	8010aa2 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3a>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	60fb      	str	r3, [r7, #12]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	015a      	lsls	r2, r3, #5
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7ff f873 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010a9e:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010aa0:	bf00      	nop
    }
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8010aaa:	b480      	push	{r7}
 8010aac:	b085      	sub	sp, #20
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	60f8      	str	r0, [r7, #12]
 8010ab2:	60b9      	str	r1, [r7, #8]
 8010ab4:	607a      	str	r2, [r7, #4]
 8010ab6:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	db0e      	blt.n	8010adc <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	2b03      	cmp	r3, #3
 8010ac2:	dc0b      	bgt.n	8010adc <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCache[i] = x, yCache[i] = y;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	321a      	adds	r2, #26
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	68ba      	ldr	r2, [r7, #8]
 8010ad4:	321e      	adds	r2, #30
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8010adc:	bf00      	nop
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	db08      	blt.n	8010b0a <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	dc05      	bgt.n	8010b0a <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
        {
            return xCache[i];
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	683a      	ldr	r2, [r7, #0]
 8010b02:	321a      	adds	r2, #26
 8010b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b08:	e00b      	b.n	8010b22 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3a>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	015a      	lsls	r2, r3, #5
 8010b12:	f107 0308 	add.w	r3, r7, #8
 8010b16:	4611      	mov	r1, r2
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff f833 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010b1e:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010b20:	bf00      	nop
    }
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	db08      	blt.n	8010b4c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	dc05      	bgt.n	8010b4c <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
        {
            return yCache[i];
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	321e      	adds	r2, #30
 8010b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b4a:	e00b      	b.n	8010b64 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3a>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	60fb      	str	r3, [r7, #12]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	015a      	lsls	r2, r3, #5
 8010b54:	f107 0308 	add.w	r3, r7, #8
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7ff f812 	bl	800fb84 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010b60:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8010b62:	bf00      	nop
    }
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	887a      	ldrh	r2, [r7, #2]
 8010b7c:	801a      	strh	r2, [r3, #0]
    {
    }
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr

08010b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	2326      	movs	r3, #38	; 0x26
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	2100      	movs	r1, #0
 8010ba0:	f015 fb7c 	bl	802629c <memset>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fc34 	bl	800e414 <_ZN8touchgfx6WidgetC1Ev>
 8010bac:	4a09      	ldr	r2, [pc, #36]	; (8010bd4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	601a      	str	r2, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	8812      	ldrh	r2, [r2, #0]
 8010bb8:	84da      	strh	r2, [r3, #38]	; 0x26
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	22ff      	movs	r2, #255	; 0xff
 8010bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8010bc2:	6839      	ldr	r1, [r7, #0]
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f004 fe09 	bl	80157dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	080292bc 	.word	0x080292bc

08010bd8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	4a05      	ldr	r2, [pc, #20]	; (8010bf8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fe fec9 	bl	800f980 <_ZN8touchgfx6ScreenD1Ev>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	08028850 	.word	0x08028850

08010bfc <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff ffe7 	bl	8010bd8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8010c0a:	2140      	movs	r1, #64	; 0x40
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f015 fa9b 	bl	8026148 <_ZdlPvj>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	4618      	mov	r0, r3
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	4a0a      	ldr	r2, [pc, #40]	; (8010c50 <_ZN15Screen2ViewBaseD1Ev+0x34>)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	601a      	str	r2, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	336c      	adds	r3, #108	; 0x6c
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 f8d8 	bl	8010de4 <_ZN8touchgfx5ImageD1Ev>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3340      	adds	r3, #64	; 0x40
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff fe53 	bl	80108e4 <_ZN8touchgfx3BoxD1Ev>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7ff ffc9 	bl	8010bd8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	0802881c 	.word	0x0802881c

08010c54 <_ZN15Screen2ViewBaseD0Ev>:
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ffdd 	bl	8010c1c <_ZN15Screen2ViewBaseD1Ev>
 8010c62:	f640 61a8 	movw	r1, #3752	; 0xea8
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f015 fa6e 	bl	8026148 <_ZdlPvj>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3708      	adds	r7, #8
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b082      	sub	sp, #8
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010c7e:	f006 fd5b 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 8010c82:	4603      	mov	r3, r0
    }
 8010c84:	4618      	mov	r0, r3
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <_ZN15Screen2ViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen2ViewBase::Screen2ViewBase()
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b089      	sub	sp, #36	; 0x24
 8010c90:	af02      	add	r7, sp, #8
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f000 f88e 	bl	8010db8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8010c9c:	4a38      	ldr	r2, [pc, #224]	; (8010d80 <_ZN15Screen2ViewBaseC1Ev+0xf4>)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	601a      	str	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	3340      	adds	r3, #64	; 0x40
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fe fed2 	bl	800fa50 <_ZN8touchgfx3BoxC1Ev>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010cb2:	f107 0308 	add.w	r3, r7, #8
 8010cb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ff ff56 	bl	8010b6c <_ZN8touchgfx6BitmapC1Et>
 8010cc0:	f107 0308 	add.w	r3, r7, #8
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f7ff ff60 	bl	8010b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	3398      	adds	r3, #152	; 0x98
 8010cd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f005 fc83 	bl	80165e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010ce0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	23f0      	movs	r3, #240	; 0xf0
 8010ce8:	2200      	movs	r2, #0
 8010cea:	2100      	movs	r1, #0
 8010cec:	f7fd f888 	bl	800de00 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	75fb      	strb	r3, [r7, #23]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	75bb      	strb	r3, [r7, #22]
 8010cfe:	2300      	movs	r3, #0
 8010d00:	757b      	strb	r3, [r7, #21]
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	041b      	lsls	r3, r3, #16
 8010d06:	461a      	mov	r2, r3
 8010d08:	7dbb      	ldrb	r3, [r7, #22]
 8010d0a:	021b      	lsls	r3, r3, #8
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	7d7b      	ldrb	r3, [r7, #21]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010d16:	f107 0310 	add.w	r3, r7, #16
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe fe08 	bl	800f932 <_ZN8touchgfx9colortypeC1Em>
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	4619      	mov	r1, r3
 8010d26:	4620      	mov	r0, r4
 8010d28:	f7fe feb6 	bl	800fa98 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	336c      	adds	r3, #108	; 0x6c
 8010d30:	2200      	movs	r2, #0
 8010d32:	2100      	movs	r1, #0
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fd f8bc 	bl	800deb2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KUHMUH_VERTICAL_ID));
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010d40:	f107 030c 	add.w	r3, r7, #12
 8010d44:	2100      	movs	r1, #0
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff ff10 	bl	8010b6c <_ZN8touchgfx6BitmapC1Et>
 8010d4c:	f107 030c 	add.w	r3, r7, #12
 8010d50:	4619      	mov	r1, r3
 8010d52:	4620      	mov	r0, r4
 8010d54:	f004 fd42 	bl	80157dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3340      	adds	r3, #64	; 0x40
 8010d5e:	4619      	mov	r1, r3
 8010d60:	4610      	mov	r0, r2
 8010d62:	f7fe fe65 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	336c      	adds	r3, #108	; 0x6c
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	4610      	mov	r0, r2
 8010d70:	f7fe fe5e 	bl	800fa30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd90      	pop	{r4, r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	0802881c 	.word	0x0802881c

08010d84 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]

}
 8010d8c:	bf00      	nop
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen2ViewBase::afterTransition()
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
    //Screen2to1
    //When screen transition ends change screen to Screen1
    //Go to Screen1 with screen transition towards South
    application().gotoScreen1ScreenSlideTransitionSouth();
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff ff68 	bl	8010c76 <_ZN15Screen2ViewBase11applicationEv>
 8010da6:	4603      	mov	r3, r0
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fc07 	bl	800e5bc <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>
}
 8010dae:	bf00      	nop
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
	...

08010db8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f007 ff70 	bl	8018ca8 <_ZN8touchgfx6ScreenC1Ev>
 8010dc8:	4a05      	ldr	r2, [pc, #20]	; (8010de0 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	601a      	str	r2, [r3, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	08028850 	.word	0x08028850

08010de4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fd fb1f 	bl	800e438 <_ZN8touchgfx6WidgetD1Ev>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	080292bc 	.word	0x080292bc

08010e08 <_ZN8touchgfx5ImageD0Ev>:
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff ffe7 	bl	8010de4 <_ZN8touchgfx5ImageD1Ev>
 8010e16:	212c      	movs	r1, #44	; 0x2c
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f015 f995 	bl	8026148 <_ZdlPvj>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010e28:	b480      	push	{r7}
 8010e2a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010e2c:	4b02      	ldr	r3, [pc, #8]	; (8010e38 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	0802887c 	.word	0x0802887c

08010e3c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010e40:	2301      	movs	r3, #1
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	460b      	mov	r3, r1
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8010e5a:	2300      	movs	r3, #0
    }
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010e70:	2300      	movs	r3, #0
    }
 8010e72:	4618      	mov	r0, r3
 8010e74:	370c      	adds	r7, #12
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr

08010e7e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010e7e:	b480      	push	{r7}
 8010e80:	b083      	sub	sp, #12
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010e86:	2300      	movs	r3, #0
    }
 8010e88:	4618      	mov	r0, r3
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	60b9      	str	r1, [r7, #8]
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010ea2:	4a07      	ldr	r2, [pc, #28]	; (8010ec0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010ea8:	4a06      	ldr	r2, [pc, #24]	; (8010ec4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010eae:	4a06      	ldr	r2, [pc, #24]	; (8010ec8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010eb0:	88fb      	ldrh	r3, [r7, #6]
 8010eb2:	8013      	strh	r3, [r2, #0]
    }
 8010eb4:	bf00      	nop
 8010eb6:	3714      	adds	r7, #20
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	2004f6b4 	.word	0x2004f6b4
 8010ec4:	2004f6bc 	.word	0x2004f6bc
 8010ec8:	2004f6b8 	.word	0x2004f6b8

08010ecc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010ecc:	b40e      	push	{r1, r2, r3}
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b085      	sub	sp, #20
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010ed6:	f107 0320 	add.w	r3, r7, #32
 8010eda:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	69fa      	ldr	r2, [r7, #28]
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f007 fa9e 	bl	8018424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010eec:	89fb      	ldrh	r3, [r7, #14]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ef8:	b003      	add	sp, #12
 8010efa:	4770      	bx	lr

08010efc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010efc:	b40c      	push	{r2, r3}
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
 8010f06:	460b      	mov	r3, r1
 8010f08:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010f0a:	f107 031c 	add.w	r3, r7, #28
 8010f0e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010f10:	78f9      	ldrb	r1, [r7, #3]
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	69ba      	ldr	r2, [r7, #24]
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f007 fa84 	bl	8018424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010f20:	89fb      	ldrh	r3, [r7, #14]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010f2c:	b002      	add	sp, #8
 8010f2e:	4770      	bx	lr

08010f30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08a      	sub	sp, #40	; 0x28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d016      	beq.n	8010f72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	3322      	adds	r3, #34	; 0x22
 8010f48:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4c:	8adb      	ldrh	r3, [r3, #22]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d105      	bne.n	8010f5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010f52:	4b43      	ldr	r3, [pc, #268]	; (8011060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010f54:	4a43      	ldr	r2, [pc, #268]	; (8011064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010f56:	21c0      	movs	r1, #192	; 0xc0
 8010f58:	4843      	ldr	r0, [pc, #268]	; (8011068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f5a:	f015 f921 	bl	80261a0 <__assert_func>
            return buffer[pos];
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f60:	8a9b      	ldrh	r3, [r3, #20]
 8010f62:	461a      	mov	r2, r3
 8010f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d001      	beq.n	8010f72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	e000      	b.n	8010f74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010f72:	2300      	movs	r3, #0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d06a      	beq.n	801104e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f008 fd3c 	bl	80199f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3322      	adds	r3, #34	; 0x22
 8010f82:	623b      	str	r3, [r7, #32]
 8010f84:	2301      	movs	r3, #1
 8010f86:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010f88:	6a3b      	ldr	r3, [r7, #32]
 8010f8a:	8adb      	ldrh	r3, [r3, #22]
 8010f8c:	8bfa      	ldrh	r2, [r7, #30]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d305      	bcc.n	8010f9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010f92:	4b36      	ldr	r3, [pc, #216]	; (801106c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010f94:	4a36      	ldr	r2, [pc, #216]	; (8011070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010f96:	21c5      	movs	r1, #197	; 0xc5
 8010f98:	4833      	ldr	r0, [pc, #204]	; (8011068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f9a:	f015 f901 	bl	80261a0 <__assert_func>
            const uint16_t index = pos + offset;
 8010f9e:	6a3b      	ldr	r3, [r7, #32]
 8010fa0:	8a9a      	ldrh	r2, [r3, #20]
 8010fa2:	8bfb      	ldrh	r3, [r7, #30]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010fa8:	8bbb      	ldrh	r3, [r7, #28]
 8010faa:	2b09      	cmp	r3, #9
 8010fac:	d801      	bhi.n	8010fb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010fae:	8bbb      	ldrh	r3, [r7, #28]
 8010fb0:	e001      	b.n	8010fb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010fb2:	8bbb      	ldrh	r3, [r7, #28]
 8010fb4:	3b0a      	subs	r3, #10
 8010fb6:	6a3a      	ldr	r2, [r7, #32]
 8010fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fbc:	f640 123f 	movw	r2, #2367	; 0x93f
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	bf0c      	ite	eq
 8010fc4:	2301      	moveq	r3, #1
 8010fc6:	2300      	movne	r3, #0
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d03f      	beq.n	801104e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	3322      	adds	r3, #34	; 0x22
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	3222      	adds	r2, #34	; 0x22
 8010fd6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	8ad2      	ldrh	r2, [r2, #22]
 8010fdc:	2a00      	cmp	r2, #0
 8010fde:	d105      	bne.n	8010fec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010fe0:	4b1f      	ldr	r3, [pc, #124]	; (8011060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010fe2:	4a20      	ldr	r2, [pc, #128]	; (8011064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010fe4:	21c0      	movs	r1, #192	; 0xc0
 8010fe6:	4820      	ldr	r0, [pc, #128]	; (8011068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010fe8:	f015 f8da 	bl	80261a0 <__assert_func>
            return buffer[pos];
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	8a92      	ldrh	r2, [r2, #20]
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	68ba      	ldr	r2, [r7, #8]
 8010ff4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010ff8:	613b      	str	r3, [r7, #16]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	8adb      	ldrh	r3, [r3, #22]
 8011002:	2b01      	cmp	r3, #1
 8011004:	d806      	bhi.n	8011014 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011006:	4b1b      	ldr	r3, [pc, #108]	; (8011074 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011008:	4a1b      	ldr	r2, [pc, #108]	; (8011078 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801100a:	f240 110d 	movw	r1, #269	; 0x10d
 801100e:	4816      	ldr	r0, [pc, #88]	; (8011068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011010:	f015 f8c6 	bl	80261a0 <__assert_func>
            const uint16_t index = pos + 1;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	8a9b      	ldrh	r3, [r3, #20]
 8011018:	3301      	adds	r3, #1
 801101a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 801101c:	89bb      	ldrh	r3, [r7, #12]
 801101e:	2b09      	cmp	r3, #9
 8011020:	d801      	bhi.n	8011026 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011022:	89bb      	ldrh	r3, [r7, #12]
 8011024:	e000      	b.n	8011028 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011026:	2300      	movs	r3, #0
 8011028:	693a      	ldr	r2, [r7, #16]
 801102a:	89f9      	ldrh	r1, [r7, #14]
 801102c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011030:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	3322      	adds	r3, #34	; 0x22
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	f640 133f 	movw	r3, #2367	; 0x93f
 801103c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	8a9b      	ldrh	r3, [r3, #20]
 8011042:	4619      	mov	r1, r3
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	8afa      	ldrh	r2, [r7, #22]
 8011048:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 801104c:	bf00      	nop
        }
    }
    return getNextChar();
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f008 fbd4 	bl	80197fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011054:	4603      	mov	r3, r0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3728      	adds	r7, #40	; 0x28
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	080279f8 	.word	0x080279f8
 8011064:	08027a04 	.word	0x08027a04
 8011068:	08027ab0 	.word	0x08027ab0
 801106c:	08027af8 	.word	0x08027af8
 8011070:	08027b08 	.word	0x08027b08
 8011074:	08027bdc 	.word	0x08027bdc
 8011078:	08027be8 	.word	0x08027be8

0801107c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f008 fb80 	bl	801978a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801108a:	bf00      	nop
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011094:	b590      	push	{r4, r7, lr}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	4603      	mov	r3, r0
 801109c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80110a2:	88fb      	ldrh	r3, [r7, #6]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d127      	bne.n	80110f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80110a8:	88fb      	ldrh	r3, [r7, #6]
 80110aa:	4a1e      	ldr	r2, [pc, #120]	; (8011124 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80110ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d016      	beq.n	80110e2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80110b4:	88fb      	ldrh	r3, [r7, #6]
 80110b6:	4a1b      	ldr	r2, [pc, #108]	; (8011124 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80110b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110bc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	4413      	add	r3, r2
 80110c6:	4a18      	ldr	r2, [pc, #96]	; (8011128 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80110c8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	4413      	add	r3, r2
 80110d2:	4a16      	ldr	r2, [pc, #88]	; (801112c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80110d4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	4413      	add	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]
 80110e0:	e00a      	b.n	80110f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80110e2:	4b11      	ldr	r3, [pc, #68]	; (8011128 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80110e4:	4a12      	ldr	r2, [pc, #72]	; (8011130 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80110e6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80110e8:	4a12      	ldr	r2, [pc, #72]	; (8011134 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80110ea:	4b10      	ldr	r3, [pc, #64]	; (801112c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80110ec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80110ee:	88fb      	ldrh	r3, [r7, #6]
 80110f0:	4a11      	ldr	r2, [pc, #68]	; (8011138 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80110f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110f6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d00d      	beq.n	801111a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80110fe:	4a0f      	ldr	r2, [pc, #60]	; (801113c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011100:	88fb      	ldrh	r3, [r7, #6]
 8011102:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011104:	f000 f824 	bl	8011150 <_ZN17TypedTextDatabase8getFontsEv>
 8011108:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801110a:	f000 f819 	bl	8011140 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801110e:	4603      	mov	r3, r0
 8011110:	461a      	mov	r2, r3
 8011112:	4621      	mov	r1, r4
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f7ff febd 	bl	8010e94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801111a:	bf00      	nop
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	bd90      	pop	{r4, r7, pc}
 8011122:	bf00      	nop
 8011124:	2004d480 	.word	0x2004d480
 8011128:	2004d488 	.word	0x2004d488
 801112c:	2004d48c 	.word	0x2004d48c
 8011130:	0804f228 	.word	0x0804f228
 8011134:	0804f224 	.word	0x0804f224
 8011138:	0804f230 	.word	0x0804f230
 801113c:	2004d484 	.word	0x2004d484

08011140 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011140:	b480      	push	{r7}
 8011142:	af00      	add	r7, sp, #0
    return 0;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr

08011150 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011150:	b480      	push	{r7}
 8011152:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011154:	4b02      	ldr	r3, [pc, #8]	; (8011160 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011156:	4618      	mov	r0, r3
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr
 8011160:	2004d490 	.word	0x2004d490

08011164 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d113      	bne.n	801119c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801117a:	4293      	cmp	r3, r2
 801117c:	d10e      	bne.n	801119c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801117e:	f7fc fc35 	bl	800d9ec <_Z23getFont_verdana_20_4bppv>
 8011182:	4603      	mov	r3, r0
};
 8011184:	4a07      	ldr	r2, [pc, #28]	; (80111a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011186:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011188:	f7fc fc86 	bl	800da98 <_Z23getFont_verdana_40_4bppv>
 801118c:	4603      	mov	r3, r0
};
 801118e:	4a05      	ldr	r2, [pc, #20]	; (80111a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011190:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011192:	f7fc fbd5 	bl	800d940 <_Z23getFont_verdana_10_4bppv>
 8011196:	4603      	mov	r3, r0
};
 8011198:	4a02      	ldr	r2, [pc, #8]	; (80111a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801119a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 801119c:	bf00      	nop
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	2004d490 	.word	0x2004d490

080111a8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80111a8:	b580      	push	{r7, lr}
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111b0:	2001      	movs	r0, #1
 80111b2:	f7ff ffd7 	bl	8011164 <_Z41__static_initialization_and_destruction_0ii>
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	4a05      	ldr	r2, [pc, #20]	; (80111d8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fd f8b1 	bl	800e330 <_ZN23FrontendApplicationBaseD1Ev>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	080288ec 	.word	0x080288ec

080111dc <_ZN19FrontendApplicationD0Ev>:
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7ff ffe7 	bl	80111b8 <_ZN19FrontendApplicationD1Ev>
 80111ea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f014 ffaa 	bl	8026148 <_ZdlPvj>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80111fe:	b580      	push	{r7, lr}
 8011200:	b082      	sub	sp, #8
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801120c:	4618      	mov	r0, r3
 801120e:	f000 f82d 	bl	801126c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	f006 f947 	bl	80174a8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801121a:	bf00      	nop
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
	...

08011224 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	68b9      	ldr	r1, [r7, #8]
 8011236:	4618      	mov	r0, r3
 8011238:	f7fd f920 	bl	800e47c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801123c:	4a03      	ldr	r2, [pc, #12]	; (801124c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	601a      	str	r2, [r3, #0]
{

}
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	4618      	mov	r0, r3
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	080288ec 	.word	0x080288ec

08011250 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]
{

}
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <_ZN5Model4tickEv>:

void Model::tick()
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]

}
 8011274:	bf00      	nop
 8011276:	370c      	adds	r7, #12
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
    {
    }
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
    {
    }
 801129c:	bf00      	nop
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
    {
 80112b0:	4a04      	ldr	r2, [pc, #16]	; (80112c4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	601a      	str	r2, [r3, #0]
    }
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	08028970 	.word	0x08028970

080112c8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
    }
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7ff ffe9 	bl	80112a8 <_ZN8touchgfx9PresenterD1Ev>
 80112d6:	2104      	movs	r1, #4
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f014 ff35 	bl	8026148 <_ZdlPvj>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
    {
 80112f0:	4a04      	ldr	r2, [pc, #16]	; (8011304 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	601a      	str	r2, [r3, #0]
    }
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	08028970 	.word	0x08028970

08011308 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	4a06      	ldr	r2, [pc, #24]	; (801132c <_ZN13ModelListenerC1Ev+0x24>)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2200      	movs	r2, #0
 801131a:	605a      	str	r2, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4618      	mov	r0, r3
 8011320:	370c      	adds	r7, #12
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	08028960 	.word	0x08028960

08011330 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	4a04      	ldr	r2, [pc, #16]	; (801134c <_ZN13ModelListenerD1Ev+0x1c>)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	601a      	str	r2, [r3, #0]
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4618      	mov	r0, r3
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr
 801134c:	08028960 	.word	0x08028960

08011350 <_ZN13ModelListenerD0Ev>:
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff ffe9 	bl	8011330 <_ZN13ModelListenerD1Ev>
 801135e:	2108      	movs	r1, #8
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f014 fef1 	bl	8026148 <_ZdlPvj>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	4a09      	ldr	r2, [pc, #36]	; (80113a0 <_ZN16Screen1PresenterD1Ev+0x30>)
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	601a      	str	r2, [r3, #0]
 801137e:	4a09      	ldr	r2, [pc, #36]	; (80113a4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	605a      	str	r2, [r3, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	3304      	adds	r3, #4
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff ffd1 	bl	8011330 <_ZN13ModelListenerD1Ev>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff ff89 	bl	80112a8 <_ZN8touchgfx9PresenterD1Ev>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	08028938 	.word	0x08028938
 80113a4:	08028950 	.word	0x08028950

080113a8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80113a8:	f1a0 0004 	sub.w	r0, r0, #4
 80113ac:	e7e0      	b.n	8011370 <_ZN16Screen1PresenterD1Ev>
 80113ae:	bf00      	nop

080113b0 <_ZN16Screen1PresenterD0Ev>:
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7ff ffd9 	bl	8011370 <_ZN16Screen1PresenterD1Ev>
 80113be:	2110      	movs	r1, #16
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f014 fec1 	bl	8026148 <_ZdlPvj>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	4618      	mov	r0, r3
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80113d0:	f1a0 0004 	sub.w	r0, r0, #4
 80113d4:	e7ec      	b.n	80113b0 <_ZN16Screen1PresenterD0Ev>
	...

080113d8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
    : view(v)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7ff ff7f 	bl	80112e8 <_ZN8touchgfx9PresenterC1Ev>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	3304      	adds	r3, #4
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff ff8a 	bl	8011308 <_ZN13ModelListenerC1Ev>
 80113f4:	4a06      	ldr	r2, [pc, #24]	; (8011410 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	601a      	str	r2, [r3, #0]
 80113fa:	4a06      	ldr	r2, [pc, #24]	; (8011414 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	605a      	str	r2, [r3, #4]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	60da      	str	r2, [r3, #12]
{

}
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	08028938 	.word	0x08028938
 8011414:	08028950 	.word	0x08028950

08011418 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011418:	b480      	push	{r7}
 801141a:	b083      	sub	sp, #12
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]

}
 8011420:	bf00      	nop
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr

0801142c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]

}
 8011434:	bf00      	nop
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	4a05      	ldr	r2, [pc, #20]	; (8011460 <_ZN11Screen1ViewD1Ev+0x20>)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	f7fe fd3d 	bl	800fed0 <_ZN15Screen1ViewBaseD1Ev>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4618      	mov	r0, r3
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	08028988 	.word	0x08028988

08011464 <_ZN11Screen1ViewD0Ev>:
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff ffe7 	bl	8011440 <_ZN11Screen1ViewD1Ev>
 8011472:	f241 013c 	movw	r1, #4156	; 0x103c
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f014 fe66 	bl	8026148 <_ZdlPvj>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4618      	mov	r0, r3
 8011480:	3708      	adds	r7, #8
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
	...

08011488 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe fdfc 	bl	8010090 <_ZN15Screen1ViewBaseC1Ev>
 8011498:	4a03      	ldr	r2, [pc, #12]	; (80114a8 <_ZN11Screen1ViewC1Ev+0x20>)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	601a      	str	r2, [r3, #0]
{

}
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	08028988 	.word	0x08028988

080114ac <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe fff6 	bl	80104a8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80114bc:	bf00      	nop
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe fa8e 	bl	800f9f0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80114d4:	bf00      	nop
 80114d6:	3708      	adds	r7, #8
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	4a09      	ldr	r2, [pc, #36]	; (801150c <_ZN16Screen2PresenterD1Ev+0x30>)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	4a09      	ldr	r2, [pc, #36]	; (8011510 <_ZN16Screen2PresenterD1Ev+0x34>)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	605a      	str	r2, [r3, #4]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	3304      	adds	r3, #4
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff ff1b 	bl	8011330 <_ZN13ModelListenerD1Ev>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7ff fed3 	bl	80112a8 <_ZN8touchgfx9PresenterD1Ev>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	080289bc 	.word	0x080289bc
 8011510:	080289d4 	.word	0x080289d4

08011514 <_ZThn4_N16Screen2PresenterD1Ev>:
 8011514:	f1a0 0004 	sub.w	r0, r0, #4
 8011518:	e7e0      	b.n	80114dc <_ZN16Screen2PresenterD1Ev>
 801151a:	bf00      	nop

0801151c <_ZN16Screen2PresenterD0Ev>:
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff ffd9 	bl	80114dc <_ZN16Screen2PresenterD1Ev>
 801152a:	2110      	movs	r1, #16
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f014 fe0b 	bl	8026148 <_ZdlPvj>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <_ZThn4_N16Screen2PresenterD0Ev>:
 801153c:	f1a0 0004 	sub.w	r0, r0, #4
 8011540:	e7ec      	b.n	801151c <_ZN16Screen2PresenterD0Ev>
	...

08011544 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
    : view(v)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff fec9 	bl	80112e8 <_ZN8touchgfx9PresenterC1Ev>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3304      	adds	r3, #4
 801155a:	4618      	mov	r0, r3
 801155c:	f7ff fed4 	bl	8011308 <_ZN13ModelListenerC1Ev>
 8011560:	4a06      	ldr	r2, [pc, #24]	; (801157c <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	4a06      	ldr	r2, [pc, #24]	; (8011580 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	605a      	str	r2, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	60da      	str	r2, [r3, #12]
{

}
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	080289bc 	.word	0x080289bc
 8011580:	080289d4 	.word	0x080289d4

08011584 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]

}
 801158c:	bf00      	nop
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]

}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	4a05      	ldr	r2, [pc, #20]	; (80115cc <_ZN11Screen2ViewD1Ev+0x20>)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	601a      	str	r2, [r3, #0]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff fb2d 	bl	8010c1c <_ZN15Screen2ViewBaseD1Ev>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	080289e4 	.word	0x080289e4

080115d0 <_ZN11Screen2ViewD0Ev>:
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7ff ffe7 	bl	80115ac <_ZN11Screen2ViewD1Ev>
 80115de:	f640 61a8 	movw	r1, #3752	; 0xea8
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f014 fdb0 	bl	8026148 <_ZdlPvj>
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	4618      	mov	r0, r3
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff fb44 	bl	8010c8c <_ZN15Screen2ViewBaseC1Ev>
 8011604:	4a03      	ldr	r2, [pc, #12]	; (8011614 <_ZN11Screen2ViewC1Ev+0x20>)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	601a      	str	r2, [r3, #0]
{

}
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	080289e4 	.word	0x080289e4

08011618 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff fbae 	bl	8010d84 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	f7fe f9d8 	bl	800f9f0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
    {
 8011650:	4a04      	ldr	r2, [pc, #16]	; (8011664 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	601a      	str	r2, [r3, #0]
    }
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	08028a30 	.word	0x08028a30

08011668 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
    }
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ffe9 	bl	8011648 <_ZN8touchgfx15TouchControllerD1Ev>
 8011676:	2104      	movs	r1, #4
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f014 fd65 	bl	8026148 <_ZdlPvj>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3714      	adds	r7, #20
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
	...

080116b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	4a05      	ldr	r2, [pc, #20]	; (80116d8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	601a      	str	r2, [r3, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff ffbd 	bl	8011648 <_ZN8touchgfx15TouchControllerD1Ev>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	08028a18 	.word	0x08028a18

080116dc <_ZN20STM32TouchControllerD0Ev>:
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff ffe7 	bl	80116b8 <_ZN20STM32TouchControllerD1Ev>
 80116ea:	2104      	movs	r1, #4
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f014 fd2b 	bl	8026148 <_ZdlPvj>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	3708      	adds	r7, #8
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	2b03      	cmp	r3, #3
 801170a:	d80c      	bhi.n	8011726 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 801170c:	a201      	add	r2, pc, #4	; (adr r2, 8011714 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011712:	bf00      	nop
 8011714:	08011725 	.word	0x08011725
 8011718:	08011725 	.word	0x08011725
 801171c:	08011725 	.word	0x08011725
 8011720:	08011725 	.word	0x08011725
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011724:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8011726:	bf00      	nop
 8011728:	370c      	adds	r7, #12
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop

08011734 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	4603      	mov	r3, r0
 801173c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	2b03      	cmp	r3, #3
 8011742:	d80c      	bhi.n	801175e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011744:	a201      	add	r2, pc, #4	; (adr r2, 801174c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8011746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174a:	bf00      	nop
 801174c:	0801175d 	.word	0x0801175d
 8011750:	0801175d 	.word	0x0801175d
 8011754:	0801175d 	.word	0x0801175d
 8011758:	0801175d 	.word	0x0801175d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 801175c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801175e:	bf00      	nop
 8011760:	370c      	adds	r7, #12
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop

0801176c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
 8011772:	4603      	mov	r3, r0
 8011774:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	2b03      	cmp	r3, #3
 801177a:	d80c      	bhi.n	8011796 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801177c:	a201      	add	r2, pc, #4	; (adr r2, 8011784 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011782:	bf00      	nop
 8011784:	08011795 	.word	0x08011795
 8011788:	08011795 	.word	0x08011795
 801178c:	08011795 	.word	0x08011795
 8011790:	08011795 	.word	0x08011795
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011794:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8011796:	bf00      	nop
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr
 80117a2:	bf00      	nop

080117a4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
    {
 80117ac:	4a04      	ldr	r2, [pc, #16]	; (80117c0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	601a      	str	r2, [r3, #0]
    }
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4618      	mov	r0, r3
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr
 80117c0:	08028e14 	.word	0x08028e14

080117c4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
    }
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff ffe9 	bl	80117a4 <_ZN8touchgfx3HALD1Ev>
 80117d2:	217c      	movs	r1, #124	; 0x7c
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f014 fcb7 	bl	8026148 <_ZdlPvj>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80117e4:	b480      	push	{r7}
 80117e6:	b083      	sub	sp, #12
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	460b      	mov	r3, r1
 80117ee:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	78fa      	ldrb	r2, [r7, #3]
 80117f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2201      	movs	r2, #1
 80117fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8011800:	bf00      	nop
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	460b      	mov	r3, r1
 8011816:	807b      	strh	r3, [r7, #2]
 8011818:	4613      	mov	r3, r2
 801181a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 801181c:	4b0c      	ldr	r3, [pc, #48]	; (8011850 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	887a      	ldrh	r2, [r7, #2]
 8011822:	429a      	cmp	r2, r3
 8011824:	d304      	bcc.n	8011830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8011826:	4b0b      	ldr	r3, [pc, #44]	; (8011854 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	883a      	ldrh	r2, [r7, #0]
 801182c:	429a      	cmp	r2, r3
 801182e:	d205      	bcs.n	801183c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011830:	4b09      	ldr	r3, [pc, #36]	; (8011858 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8011832:	4a0a      	ldr	r2, [pc, #40]	; (801185c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8011834:	219e      	movs	r1, #158	; 0x9e
 8011836:	480a      	ldr	r0, [pc, #40]	; (8011860 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8011838:	f014 fcb2 	bl	80261a0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 801183c:	4a09      	ldr	r2, [pc, #36]	; (8011864 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801183e:	887b      	ldrh	r3, [r7, #2]
 8011840:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8011842:	4a09      	ldr	r2, [pc, #36]	; (8011868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8011844:	883b      	ldrh	r3, [r7, #0]
 8011846:	8013      	strh	r3, [r2, #0]
    }
 8011848:	bf00      	nop
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	2004f650 	.word	0x2004f650
 8011854:	2004f652 	.word	0x2004f652
 8011858:	08027c9c 	.word	0x08027c9c
 801185c:	08027d00 	.word	0x08027d00
 8011860:	08027d44 	.word	0x08027d44
 8011864:	2004f656 	.word	0x2004f656
 8011868:	2004f658 	.word	0x2004f658

0801186c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801187a:	2b00      	cmp	r3, #0
 801187c:	d009      	beq.n	8011892 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4610      	mov	r0, r2
 801188c:	4798      	blx	r3
 801188e:	4603      	mov	r3, r0
 8011890:	e000      	b.n	8011894 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8011892:	2300      	movs	r3, #0
    }
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f002 fe99 	bl	80145dc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	33ac      	adds	r3, #172	; 0xac
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	4798      	blx	r3
    }
 80118b6:	bf00      	nop
 80118b8:	3708      	adds	r7, #8
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}

080118be <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
 80118c6:	6039      	str	r1, [r7, #0]
        return false;
 80118c8:	2300      	movs	r3, #0
    }
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
	...

080118d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d106      	bne.n	80118fa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80118ec:	4b0f      	ldr	r3, [pc, #60]	; (801192c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80118ee:	4a10      	ldr	r2, [pc, #64]	; (8011930 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80118f0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80118f4:	480f      	ldr	r0, [pc, #60]	; (8011934 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80118f6:	f014 fc53 	bl	80261a0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	68ba      	ldr	r2, [r7, #8]
 80118fe:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	bf14      	ite	ne
 801190c:	2301      	movne	r3, #1
 801190e:	2300      	moveq	r3, #0
 8011910:	b2da      	uxtb	r2, r3
 8011912:	4b09      	ldr	r3, [pc, #36]	; (8011938 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011914:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	338c      	adds	r3, #140	; 0x8c
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	4798      	blx	r3
    }
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	08027d88 	.word	0x08027d88
 8011930:	08027dc0 	.word	0x08027dc0
 8011934:	08027d44 	.word	0x08027d44
 8011938:	2004f65a 	.word	0x2004f65a

0801193c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	683a      	ldr	r2, [r7, #0]
 801194a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	bf14      	ite	ne
 8011952:	2301      	movne	r3, #1
 8011954:	2300      	moveq	r3, #0
 8011956:	b2da      	uxtb	r2, r3
 8011958:	4b03      	ldr	r3, [pc, #12]	; (8011968 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801195a:	701a      	strb	r2, [r3, #0]
    }
 801195c:	bf00      	nop
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr
 8011968:	2004f65b 	.word	0x2004f65b

0801196c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
        return 0;
 8011974:	2300      	movs	r3, #0
    }
 8011976:	4618      	mov	r0, r3
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr

08011982 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
 801198a:	460b      	mov	r3, r1
 801198c:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011992:	2b00      	cmp	r3, #0
 8011994:	d004      	beq.n	80119a0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199a:	887a      	ldrh	r2, [r7, #2]
 801199c:	4610      	mov	r0, r2
 801199e:	4798      	blx	r3
    }
 80119a0:	bf00      	nop
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 80119b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80119b4:	4618      	mov	r0, r3
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685a      	ldr	r2, [r3, #4]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	3318      	adds	r3, #24
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	4610      	mov	r0, r2
 80119d8:	4798      	blx	r3
 80119da:	4603      	mov	r3, r0
    }
 80119dc:	4618      	mov	r0, r3
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 80119ec:	4b0e      	ldr	r3, [pc, #56]	; (8011a28 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00c      	beq.n	8011a0e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3330      	adds	r3, #48	; 0x30
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	4798      	blx	r3
 8011a00:	4602      	mov	r2, r0
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d101      	bne.n	8011a0e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	e000      	b.n	8011a10 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a18:	e001      	b.n	8011a1e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop
 8011a28:	2004f65a 	.word	0x2004f65a

08011a2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011a2c:	b480      	push	{r7}
 8011a2e:	b085      	sub	sp, #20
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d011      	beq.n	8011a68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011a44:	4b14      	ldr	r3, [pc, #80]	; (8011a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d11e      	bne.n	8011a8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011a4c:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011a52:	4b13      	ldr	r3, [pc, #76]	; (8011aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a54:	881a      	ldrh	r2, [r3, #0]
 8011a56:	4b11      	ldr	r3, [pc, #68]	; (8011a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a58:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8011a5a:	4a11      	ldr	r2, [pc, #68]	; (8011aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a5c:	89bb      	ldrh	r3, [r7, #12]
 8011a5e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011a60:	4b0d      	ldr	r3, [pc, #52]	; (8011a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011a62:	2201      	movs	r2, #1
 8011a64:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8011a66:	e010      	b.n	8011a8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8011a68:	4b0b      	ldr	r3, [pc, #44]	; (8011a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00c      	beq.n	8011a8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011a70:	4b0a      	ldr	r3, [pc, #40]	; (8011a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a72:	881b      	ldrh	r3, [r3, #0]
 8011a74:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011a76:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a78:	881a      	ldrh	r2, [r3, #0]
 8011a7a:	4b08      	ldr	r3, [pc, #32]	; (8011a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011a7c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011a7e:	4a08      	ldr	r2, [pc, #32]	; (8011aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011a80:	89fb      	ldrh	r3, [r7, #14]
 8011a82:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011a84:	4b04      	ldr	r3, [pc, #16]	; (8011a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	701a      	strb	r2, [r3, #0]
    }
 8011a8a:	bf00      	nop
 8011a8c:	3714      	adds	r7, #20
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	2004f654 	.word	0x2004f654
 8011a9c:	2004f652 	.word	0x2004f652
 8011aa0:	2004f650 	.word	0x2004f650

08011aa4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
    {
    }
 8011aac:	bf00      	nop
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
    {
    }
 8011ac0:	bf00      	nop
 8011ac2:	370c      	adds	r7, #12
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr

08011acc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f001 fff8 	bl	8013acc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011adc:	bf00      	nop
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	4a05      	ldr	r2, [pc, #20]	; (8011b04 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	601a      	str	r2, [r3, #0]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7ff fe55 	bl	80117a4 <_ZN8touchgfx3HALD1Ev>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4618      	mov	r0, r3
 8011afe:	3708      	adds	r7, #8
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	08028c6c 	.word	0x08028c6c

08011b08 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7ff ffe7 	bl	8011ae4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011b16:	217c      	movs	r1, #124	; 0x7c
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f014 fb15 	bl	8026148 <_ZdlPvj>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7ff ffca 	bl	8011acc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011b38:	bf00      	nop
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 fc50 	bl	80133f0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f001 fcac 	bl	80134c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011b68:	4603      	mov	r3, r0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3708      	adds	r7, #8
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f001 fcab 	bl	80134dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011b86:	bf00      	nop
 8011b88:	3708      	adds	r7, #8
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011b8e:	b590      	push	{r4, r7, lr}
 8011b90:	b083      	sub	sp, #12
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b9e:	b298      	uxth	r0, r3
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ba6:	b299      	uxth	r1, r3
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	4413      	add	r3, r2
 8011bba:	b29c      	uxth	r4, r3
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	4413      	add	r3, r2
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	4622      	mov	r2, r4
 8011bd2:	f7ee fe9b 	bl	800090c <ST7789V_setCursorPosition>
	ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8011bd6:	202c      	movs	r0, #44	; 0x2c
 8011bd8:	f7ee fe52 	bl	8000880 <ST7789V_SEND_COMMAND>
	this -> copyFrameBufferBlockToLCD(rect);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	33d0      	adds	r3, #208	; 0xd0
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	6839      	ldr	r1, [r7, #0]
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	4798      	blx	r3
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f001 fc7f 	bl	80134f2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 }
 8011bf4:	bf00      	nop
 8011bf6:	370c      	adds	r7, #12
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd90      	pop	{r4, r7, pc}

08011bfc <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)
{
 8011bfc:	b590      	push	{r4, r7, lr}
 8011bfe:	b087      	sub	sp, #28
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
	__IO uint16_t* ptr;
	uint32_t height;

	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c0c:	b298      	uxth	r0, r3
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c14:	b299      	uxth	r1, r3
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	4413      	add	r3, r2
 8011c28:	b29c      	uxth	r4, r3
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	4413      	add	r3, r2
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4622      	mov	r2, r4
 8011c40:	f7ee fe64 	bl	800090c <ST7789V_setCursorPosition>

	for(height = 0; height < rect.height; height++)
 8011c44:	2300      	movs	r3, #0
 8011c46:	617b      	str	r3, [r7, #20]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d236      	bcs.n	8011cc4 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc8>
	{
		ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7ff fec3 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c66:	4618      	mov	r0, r3
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	440b      	add	r3, r1
 8011c74:	4915      	ldr	r1, [pc, #84]	; (8011ccc <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xd0>)
 8011c76:	8809      	ldrh	r1, [r1, #0]
 8011c78:	fb01 f303 	mul.w	r3, r1, r3
 8011c7c:	4403      	add	r3, r0
 8011c7e:	005b      	lsls	r3, r3, #1
 8011c80:	4413      	add	r3, r2
 8011c82:	60fb      	str	r3, [r7, #12]
		//LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
		//for (uint32_t i = 0; i < Size; i++)
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011c84:	2300      	movs	r3, #0
 8011c86:	613b      	str	r3, [r7, #16]
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c96:	fb02 f303 	mul.w	r3, r2, r3
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d20c      	bcs.n	8011cbc <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc0>
		        {
		            //FMC_BANK1_WriteData(ptr[i]);
					ST7789V_SEND_DATA(ptr[i]);
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	68fa      	ldr	r2, [r7, #12]
 8011ca8:	4413      	add	r3, r2
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ee fdf6 	bl	80008a0 <ST7789V_SEND_DATA>
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	613b      	str	r3, [r7, #16]
 8011cba:	e7e5      	b.n	8011c88 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x8c>
	for(height = 0; height < rect.height; height++)
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e7c1      	b.n	8011c48 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x4c>
		        }
	}
}
 8011cc4:	bf00      	nop
 8011cc6:	371c      	adds	r7, #28
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd90      	pop	{r4, r7, pc}
 8011ccc:	2004f650 	.word	0x2004f650

08011cd0 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
 8011cdc:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011cde:	68f8      	ldr	r0, [r7, #12]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	68b9      	ldr	r1, [r7, #8]
 8011ce6:	f001 fc12 	bl	801350e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011cea:	4603      	mov	r3, r0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f001 fb98 	bl	8013434 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011d04:	bf00      	nop
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f001 fb98 	bl	801344c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011d1c:	bf00      	nop
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f001 fb97 	bl	8013462 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011d34:	bf00      	nop
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	4618      	mov	r0, r3
 8011d48:	f001 fb96 	bl	8013478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f001 fb94 	bl	801348c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011d64:	4603      	mov	r3, r0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b082      	sub	sp, #8
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f001 fb94 	bl	80134a6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011d7e:	bf00      	nop
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	4a05      	ldr	r2, [pc, #20]	; (8011da8 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	601a      	str	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7ff fea3 	bl	8011ae4 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	4618      	mov	r0, r3
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	08028a48 	.word	0x08028a48

08011dac <_ZN11TouchGFXHALD0Ev>:
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7ff ffe7 	bl	8011d88 <_ZN11TouchGFXHALD1Ev>
 8011dba:	217c      	movs	r1, #124	; 0x7c
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f014 f9c3 	bl	8026148 <_ZdlPvj>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011dd2:	2334      	movs	r3, #52	; 0x34
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	2364      	movs	r3, #100	; 0x64
 8011dd8:	4a2b      	ldr	r2, [pc, #172]	; (8011e88 <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8011dda:	492c      	ldr	r1, [pc, #176]	; (8011e8c <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8011ddc:	482c      	ldr	r0, [pc, #176]	; (8011e90 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011dde:	f7fa fed3 	bl	800cb88 <_txe_byte_pool_create>
 8011de2:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	bf14      	ite	ne
 8011de8:	2301      	movne	r3, #1
 8011dea:	2300      	moveq	r3, #0
 8011dec:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d005      	beq.n	8011dfe <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 8011df2:	4b28      	ldr	r3, [pc, #160]	; (8011e94 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8011df4:	4a28      	ldr	r2, [pc, #160]	; (8011e98 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011df6:	2138      	movs	r1, #56	; 0x38
 8011df8:	4828      	ldr	r0, [pc, #160]	; (8011e9c <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011dfa:	f014 f9d1 	bl	80261a0 <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8011dfe:	1d39      	adds	r1, r7, #4
 8011e00:	2300      	movs	r3, #0
 8011e02:	2204      	movs	r2, #4
 8011e04:	4822      	ldr	r0, [pc, #136]	; (8011e90 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011e06:	f7fa fe4b 	bl	800caa0 <_txe_byte_allocate>
 8011e0a:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	bf14      	ite	ne
 8011e10:	2301      	movne	r3, #1
 8011e12:	2300      	moveq	r3, #0
 8011e14:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d005      	beq.n	8011e26 <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8011e1a:	4b21      	ldr	r3, [pc, #132]	; (8011ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 8011e1c:	4a1e      	ldr	r2, [pc, #120]	; (8011e98 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011e1e:	213f      	movs	r1, #63	; 0x3f
 8011e20:	481e      	ldr	r0, [pc, #120]	; (8011e9c <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011e22:	f014 f9bd 	bl	80261a0 <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2238      	movs	r2, #56	; 0x38
 8011e2a:	9201      	str	r2, [sp, #4]
 8011e2c:	2204      	movs	r2, #4
 8011e2e:	9200      	str	r2, [sp, #0]
 8011e30:	2201      	movs	r2, #1
 8011e32:	491c      	ldr	r1, [pc, #112]	; (8011ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 8011e34:	481c      	ldr	r0, [pc, #112]	; (8011ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 8011e36:	f7fa ff47 	bl	800ccc8 <_txe_queue_create>
 8011e3a:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	bf14      	ite	ne
 8011e40:	2301      	movne	r3, #1
 8011e42:	2300      	moveq	r3, #0
 8011e44:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d005      	beq.n	8011e56 <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 8011e4a:	4b18      	ldr	r3, [pc, #96]	; (8011eac <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 8011e4c:	4a12      	ldr	r2, [pc, #72]	; (8011e98 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011e4e:	2146      	movs	r1, #70	; 0x46
 8011e50:	4812      	ldr	r0, [pc, #72]	; (8011e9c <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011e52:	f014 f9a5 	bl	80261a0 <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 8011e56:	231c      	movs	r3, #28
 8011e58:	2201      	movs	r2, #1
 8011e5a:	4915      	ldr	r1, [pc, #84]	; (8011eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8011e5c:	4815      	ldr	r0, [pc, #84]	; (8011eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 8011e5e:	f7fb f877 	bl	800cf50 <_txe_semaphore_create>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bf14      	ite	ne
 8011e68:	2301      	movne	r3, #1
 8011e6a:	2300      	moveq	r3, #0
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d005      	beq.n	8011e7e <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 8011e72:	4b11      	ldr	r3, [pc, #68]	; (8011eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8011e74:	4a08      	ldr	r2, [pc, #32]	; (8011e98 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011e76:	214c      	movs	r1, #76	; 0x4c
 8011e78:	4808      	ldr	r0, [pc, #32]	; (8011e9c <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011e7a:	f014 f991 	bl	80261a0 <__assert_func>
    }
}
 8011e7e:	bf00      	nop
 8011e80:	3708      	adds	r7, #8
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	2004d49c 	.word	0x2004d49c
 8011e8c:	08027e10 	.word	0x08027e10
 8011e90:	2004d500 	.word	0x2004d500
 8011e94:	08027e24 	.word	0x08027e24
 8011e98:	08027e54 	.word	0x08027e54
 8011e9c:	08027e84 	.word	0x08027e84
 8011ea0:	08027eb0 	.word	0x08027eb0
 8011ea4:	08027ef0 	.word	0x08027ef0
 8011ea8:	2004d550 	.word	0x2004d550
 8011eac:	08027f04 	.word	0x08027f04
 8011eb0:	08027f34 	.word	0x08027f34
 8011eb4:	2004d534 	.word	0x2004d534
 8011eb8:	08027f4c 	.word	0x08027f4c

08011ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 8011ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ec4:	4809      	ldr	r0, [pc, #36]	; (8011eec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8011ec6:	f7fb f8d9 	bl	800d07c <_txe_semaphore_get>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	bf14      	ite	ne
 8011ed0:	2301      	movne	r3, #1
 8011ed2:	2300      	moveq	r3, #0
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d005      	beq.n	8011ee6 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8011eda:	4b05      	ldr	r3, [pc, #20]	; (8011ef0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8011edc:	4a05      	ldr	r2, [pc, #20]	; (8011ef4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8011ede:	2157      	movs	r1, #87	; 0x57
 8011ee0:	4805      	ldr	r0, [pc, #20]	; (8011ef8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 8011ee2:	f014 f95d 	bl	80261a0 <__assert_func>
    }
}
 8011ee6:	bf00      	nop
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	2004d534 	.word	0x2004d534
 8011ef0:	08027f7c 	.word	0x08027f7c
 8011ef4:	08027fa8 	.word	0x08027fa8
 8011ef8:	08027e84 	.word	0x08027e84

08011efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 8011f00:	4b0b      	ldr	r3, [pc, #44]	; (8011f30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d110      	bne.n	8011f2a <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8011f08:	4809      	ldr	r0, [pc, #36]	; (8011f30 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011f0a:	f7fb f8f9 	bl	800d100 <_txe_semaphore_put>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	bf14      	ite	ne
 8011f14:	2301      	movne	r3, #1
 8011f16:	2300      	moveq	r3, #0
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d005      	beq.n	8011f2a <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011f1e:	4b05      	ldr	r3, [pc, #20]	; (8011f34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 8011f20:	4a05      	ldr	r2, [pc, #20]	; (8011f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 8011f22:	2164      	movs	r1, #100	; 0x64
 8011f24:	4805      	ldr	r0, [pc, #20]	; (8011f3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 8011f26:	f014 f93b 	bl	80261a0 <__assert_func>
        }
    }
}
 8011f2a:	bf00      	nop
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	2004d534 	.word	0x2004d534
 8011f34:	08027fe8 	.word	0x08027fe8
 8011f38:	08028014 	.word	0x08028014
 8011f3c:	08027e84 	.word	0x08027e84

08011f40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8011f44:	2100      	movs	r1, #0
 8011f46:	4803      	ldr	r0, [pc, #12]	; (8011f54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011f48:	f7fb f898 	bl	800d07c <_txe_semaphore_get>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 8011f50:	bf00      	nop
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	2004d534 	.word	0x2004d534

08011f58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8011f62:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011f64:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011f66:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011f68:	b672      	cpsid	i
    return(int_posture);
 8011f6a:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 8011f6c:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 8011f6e:	4b15      	ldr	r3, [pc, #84]	; (8011fc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	3301      	adds	r3, #1
 8011f74:	4a13      	ldr	r2, [pc, #76]	; (8011fc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011f76:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8011f78:	4b13      	ldr	r3, [pc, #76]	; (8011fc8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d110      	bne.n	8011fa2 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8011f80:	4811      	ldr	r0, [pc, #68]	; (8011fc8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8011f82:	f7fb f8bd 	bl	800d100 <_txe_semaphore_put>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	bf14      	ite	ne
 8011f8c:	2301      	movne	r3, #1
 8011f8e:	2300      	moveq	r3, #0
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d005      	beq.n	8011fa2 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011f96:	4b0d      	ldr	r3, [pc, #52]	; (8011fcc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 8011f98:	4a0d      	ldr	r2, [pc, #52]	; (8011fd0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 8011f9a:	218a      	movs	r1, #138	; 0x8a
 8011f9c:	480d      	ldr	r0, [pc, #52]	; (8011fd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 8011f9e:	f014 f8ff 	bl	80261a0 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 8011fa2:	4b08      	ldr	r3, [pc, #32]	; (8011fc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	4a06      	ldr	r2, [pc, #24]	; (8011fc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011faa:	6013      	str	r3, [r2, #0]
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	f383 8810 	msr	PRIMASK, r3
}
 8011fb6:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 8011fb8:	f7f9 ffcc 	bl	800bf54 <_tx_thread_system_preempt_check>
}
 8011fbc:	bf00      	nop
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	2004cddc 	.word	0x2004cddc
 8011fc8:	2004d534 	.word	0x2004d534
 8011fcc:	08027fe8 	.word	0x08027fe8
 8011fd0:	08028054 	.word	0x08028054
 8011fd4:	08027e84 	.word	0x08027e84

08011fd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 8011fde:	4b0b      	ldr	r3, [pc, #44]	; (801200c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d10e      	bne.n	8012004 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	4909      	ldr	r1, [pc, #36]	; (8012010 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8011fea:	4808      	ldr	r0, [pc, #32]	; (801200c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8011fec:	f7fa ff66 	bl	800cebc <_txe_queue_send>
 8011ff0:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d005      	beq.n	8012004 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8011ff8:	4b06      	ldr	r3, [pc, #24]	; (8012014 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8011ffa:	4a07      	ldr	r2, [pc, #28]	; (8012018 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011ffc:	21a6      	movs	r1, #166	; 0xa6
 8011ffe:	4807      	ldr	r0, [pc, #28]	; (801201c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8012000:	f014 f8ce 	bl	80261a0 <__assert_func>
        }
    }
}
 8012004:	bf00      	nop
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	2004d550 	.word	0x2004d550
 8012010:	20025818 	.word	0x20025818
 8012014:	08028098 	.word	0x08028098
 8012018:	080280b8 	.word	0x080280b8
 801201c:	08027e84 	.word	0x08027e84

08012020 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012026:	2200      	movs	r2, #0
 8012028:	490f      	ldr	r1, [pc, #60]	; (8012068 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 801202a:	4810      	ldr	r0, [pc, #64]	; (801206c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 801202c:	f7fa fefc 	bl	800ce28 <_txe_queue_receive>
 8012030:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d002      	beq.n	801203e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b0a      	cmp	r3, #10
 801203c:	d106      	bne.n	801204c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 801203e:	f04f 32ff 	mov.w	r2, #4294967295
 8012042:	4909      	ldr	r1, [pc, #36]	; (8012068 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8012044:	4809      	ldr	r0, [pc, #36]	; (801206c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8012046:	f7fa feef 	bl	800ce28 <_txe_queue_receive>
 801204a:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d005      	beq.n	801205e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 8012052:	4b07      	ldr	r3, [pc, #28]	; (8012070 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 8012054:	4a07      	ldr	r2, [pc, #28]	; (8012074 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 8012056:	21c9      	movs	r1, #201	; 0xc9
 8012058:	4807      	ldr	r0, [pc, #28]	; (8012078 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 801205a:	f014 f8a1 	bl	80261a0 <__assert_func>
    }
}
 801205e:	bf00      	nop
 8012060:	3708      	adds	r7, #8
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	20025818 	.word	0x20025818
 801206c:	2004d550 	.word	0x2004d550
 8012070:	080280e8 	.word	0x080280e8
 8012074:	0802810c 	.word	0x0802810c
 8012078:	08027e84 	.word	0x08027e84

0801207c <__NVIC_DisableIRQ>:
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801208a:	2b00      	cmp	r3, #0
 801208c:	db12      	blt.n	80120b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801208e:	79fb      	ldrb	r3, [r7, #7]
 8012090:	f003 021f 	and.w	r2, r3, #31
 8012094:	490a      	ldr	r1, [pc, #40]	; (80120c0 <__NVIC_DisableIRQ+0x44>)
 8012096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801209a:	095b      	lsrs	r3, r3, #5
 801209c:	2001      	movs	r0, #1
 801209e:	fa00 f202 	lsl.w	r2, r0, r2
 80120a2:	3320      	adds	r3, #32
 80120a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80120a8:	f3bf 8f4f 	dsb	sy
}
 80120ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80120ae:	f3bf 8f6f 	isb	sy
}
 80120b2:	bf00      	nop
}
 80120b4:	bf00      	nop
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr
 80120c0:	e000e100 	.word	0xe000e100

080120c4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
    {
 80120cc:	4a04      	ldr	r2, [pc, #16]	; (80120e0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	601a      	str	r2, [r3, #0]
    }
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4618      	mov	r0, r3
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr
 80120e0:	08028b74 	.word	0x08028b74

080120e4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
    }
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7ff ffe9 	bl	80120c4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80120f2:	2104      	movs	r1, #4
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f014 f827 	bl	8026148 <_ZdlPvj>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	3344      	adds	r3, #68	; 0x44
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	4798      	blx	r3
    }
 8012118:	bf00      	nop
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
    {
 8012128:	4a04      	ldr	r2, [pc, #16]	; (801213c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	601a      	str	r2, [r3, #0]
    }
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr
 801213c:	08028eec 	.word	0x08028eec

08012140 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
    }
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff ffe9 	bl	8012120 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801214e:	210c      	movs	r1, #12
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f013 fff9 	bl	8026148 <_ZdlPvj>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801216a:	4a09      	ldr	r2, [pc, #36]	; (8012190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	601a      	str	r2, [r3, #0]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	605a      	str	r2, [r3, #4]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	721a      	strb	r2, [r3, #8]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	725a      	strb	r2, [r3, #9]
    {
    }
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	4618      	mov	r0, r3
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	08028eec 	.word	0x08028eec

08012194 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 801219c:	2301      	movs	r3, #1
    }
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a8:	4770      	bx	lr

080121aa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b082      	sub	sp, #8
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	3328      	adds	r3, #40	; 0x28
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	4610      	mov	r0, r2
 80121be:	4798      	blx	r3
    }
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	685a      	ldr	r2, [r3, #4]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3314      	adds	r3, #20
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4610      	mov	r0, r2
 80121e0:	4798      	blx	r3
    }
 80121e2:	bf00      	nop
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
	...

080121ec <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 80121f0:	4b13      	ldr	r3, [pc, #76]	; (8012240 <DMA2D_IRQHandler+0x54>)
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	f003 0302 	and.w	r3, r3, #2
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	bf14      	ite	ne
 80121fc:	2301      	movne	r3, #1
 80121fe:	2300      	moveq	r3, #0
 8012200:	b2db      	uxtb	r3, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	d019      	beq.n	801223a <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8012206:	4b0e      	ldr	r3, [pc, #56]	; (8012240 <DMA2D_IRQHandler+0x54>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801220e:	2b00      	cmp	r3, #0
 8012210:	bf14      	ite	ne
 8012212:	2301      	movne	r3, #1
 8012214:	2300      	moveq	r3, #0
 8012216:	b2db      	uxtb	r3, r3
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00e      	beq.n	801223a <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 801221c:	4b08      	ldr	r3, [pc, #32]	; (8012240 <DMA2D_IRQHandler+0x54>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4a07      	ldr	r2, [pc, #28]	; (8012240 <DMA2D_IRQHandler+0x54>)
 8012222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012226:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8012228:	4b05      	ldr	r3, [pc, #20]	; (8012240 <DMA2D_IRQHandler+0x54>)
 801222a:	2202      	movs	r2, #2
 801222c:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801222e:	f7fb ff37 	bl	800e0a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8012232:	4603      	mov	r3, r0
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff ffc7 	bl	80121c8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 801223a:	bf00      	nop
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	4002b000 	.word	0x4002b000

08012244 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	330c      	adds	r3, #12
 8012250:	4618      	mov	r0, r3
 8012252:	f7fd fb60 	bl	800f916 <_ZN8touchgfx9colortypeC1Ev>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8012260:	b5b0      	push	{r4, r5, r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	330c      	adds	r3, #12
 801226e:	4619      	mov	r1, r3
 8012270:	4610      	mov	r0, r2
 8012272:	f7ff ff75 	bl	8012160 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012276:	4a0e      	ldr	r2, [pc, #56]	; (80122b0 <_ZN8STM32DMAC1Ev+0x50>)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	601a      	str	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f103 000c 	add.w	r0, r3, #12
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	3320      	adds	r3, #32
 8012286:	2260      	movs	r2, #96	; 0x60
 8012288:	4619      	mov	r1, r3
 801228a:	f002 faf9 	bl	8014880 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	3320      	adds	r3, #32
 8012292:	245f      	movs	r4, #95	; 0x5f
 8012294:	461d      	mov	r5, r3
 8012296:	2c00      	cmp	r4, #0
 8012298:	db05      	blt.n	80122a6 <_ZN8STM32DMAC1Ev+0x46>
 801229a:	4628      	mov	r0, r5
 801229c:	f7ff ffd2 	bl	8012244 <_ZN8touchgfx6BlitOpC1Ev>
 80122a0:	3524      	adds	r5, #36	; 0x24
 80122a2:	3c01      	subs	r4, #1
 80122a4:	e7f7      	b.n	8012296 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4618      	mov	r0, r3
 80122aa:	3708      	adds	r7, #8
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bdb0      	pop	{r4, r5, r7, pc}
 80122b0:	08028b24 	.word	0x08028b24

080122b4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	4a09      	ldr	r2, [pc, #36]	; (80122e4 <_ZN8STM32DMAD1Ev+0x30>)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80122c2:	2076      	movs	r0, #118	; 0x76
 80122c4:	f7ff feda 	bl	801207c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	330c      	adds	r3, #12
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 fb31 	bl	8012934 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7ff ff23 	bl	8012120 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	08028b24 	.word	0x08028b24

080122e8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
}
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f7ff ffdf 	bl	80122b4 <_ZN8STM32DMAD1Ev>
 80122f6:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f013 ff24 	bl	8026148 <_ZdlPvj>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	4618      	mov	r0, r3
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
	...

0801230c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012314:	4b13      	ldr	r3, [pc, #76]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801231a:	4a12      	ldr	r2, [pc, #72]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 801231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8012324:	4b0f      	ldr	r3, [pc, #60]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801232a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801232e:	60fb      	str	r3, [r7, #12]
 8012330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012332:	4b0c      	ldr	r3, [pc, #48]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012336:	4a0b      	ldr	r2, [pc, #44]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801233c:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801233e:	4b09      	ldr	r3, [pc, #36]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012342:	4a08      	ldr	r2, [pc, #32]	; (8012364 <_ZN8STM32DMA10initializeEv+0x58>)
 8012344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012348:	6613      	str	r3, [r2, #96]	; 0x60

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801234a:	2200      	movs	r2, #0
 801234c:	2105      	movs	r1, #5
 801234e:	2076      	movs	r0, #118	; 0x76
 8012350:	f7f0 fc28 	bl	8002ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8012354:	2076      	movs	r0, #118	; 0x76
 8012356:	f7f0 fc3f 	bl	8002bd8 <HAL_NVIC_EnableIRQ>
}
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	46020c00 	.word	0x46020c00

08012368 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	460b      	mov	r3, r1
 8012372:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012374:	2300      	movs	r3, #0
 8012376:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012378:	78fb      	ldrb	r3, [r7, #3]
 801237a:	2b0b      	cmp	r3, #11
 801237c:	d826      	bhi.n	80123cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801237e:	a201      	add	r2, pc, #4	; (adr r2, 8012384 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012384:	080123c1 	.word	0x080123c1
 8012388:	080123bb 	.word	0x080123bb
 801238c:	080123b5 	.word	0x080123b5
 8012390:	080123cd 	.word	0x080123cd
 8012394:	080123cd 	.word	0x080123cd
 8012398:	080123cd 	.word	0x080123cd
 801239c:	080123cd 	.word	0x080123cd
 80123a0:	080123c7 	.word	0x080123c7
 80123a4:	080123c7 	.word	0x080123c7
 80123a8:	080123c7 	.word	0x080123c7
 80123ac:	080123c7 	.word	0x080123c7
 80123b0:	080123c7 	.word	0x080123c7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80123b4:	2300      	movs	r3, #0
 80123b6:	60fb      	str	r3, [r7, #12]
        break;
 80123b8:	e00e      	b.n	80123d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80123ba:	2301      	movs	r3, #1
 80123bc:	60fb      	str	r3, [r7, #12]
        break;
 80123be:	e00b      	b.n	80123d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80123c0:	2302      	movs	r3, #2
 80123c2:	60fb      	str	r3, [r7, #12]
        break;
 80123c4:	e008      	b.n	80123d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80123c6:	2305      	movs	r3, #5
 80123c8:	60fb      	str	r3, [r7, #12]
        break;
 80123ca:	e005      	b.n	80123d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80123cc:	4b05      	ldr	r3, [pc, #20]	; (80123e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80123ce:	4a06      	ldr	r2, [pc, #24]	; (80123e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80123d0:	216e      	movs	r1, #110	; 0x6e
 80123d2:	4806      	ldr	r0, [pc, #24]	; (80123ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80123d4:	f013 fee4 	bl	80261a0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80123d8:	68fb      	ldr	r3, [r7, #12]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	08028140 	.word	0x08028140
 80123e8:	0802815c 	.word	0x0802815c
 80123ec:	080281a8 	.word	0x080281a8

080123f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	460b      	mov	r3, r1
 80123fa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80123fc:	2300      	movs	r3, #0
 80123fe:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012400:	78fb      	ldrb	r3, [r7, #3]
 8012402:	2b0a      	cmp	r3, #10
 8012404:	d821      	bhi.n	801244a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012406:	a201      	add	r2, pc, #4	; (adr r2, 801240c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801240c:	08012445 	.word	0x08012445
 8012410:	0801243f 	.word	0x0801243f
 8012414:	08012439 	.word	0x08012439
 8012418:	0801244b 	.word	0x0801244b
 801241c:	0801244b 	.word	0x0801244b
 8012420:	0801244b 	.word	0x0801244b
 8012424:	0801244b 	.word	0x0801244b
 8012428:	0801243f 	.word	0x0801243f
 801242c:	0801243f 	.word	0x0801243f
 8012430:	0801243f 	.word	0x0801243f
 8012434:	0801243f 	.word	0x0801243f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012438:	2300      	movs	r3, #0
 801243a:	60fb      	str	r3, [r7, #12]
        break;
 801243c:	e00b      	b.n	8012456 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801243e:	2301      	movs	r3, #1
 8012440:	60fb      	str	r3, [r7, #12]
        break;
 8012442:	e008      	b.n	8012456 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012444:	2302      	movs	r3, #2
 8012446:	60fb      	str	r3, [r7, #12]
        break;
 8012448:	e005      	b.n	8012456 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801244a:	4b05      	ldr	r3, [pc, #20]	; (8012460 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 801244c:	4a05      	ldr	r2, [pc, #20]	; (8012464 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801244e:	218f      	movs	r1, #143	; 0x8f
 8012450:	4805      	ldr	r0, [pc, #20]	; (8012468 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012452:	f013 fea5 	bl	80261a0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012456:	68fb      	ldr	r3, [r7, #12]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	08028140 	.word	0x08028140
 8012464:	080281d4 	.word	0x080281d4
 8012468:	080281a8 	.word	0x080281a8

0801246c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012474:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012484:	b590      	push	{r4, r7, lr}
 8012486:	b089      	sub	sp, #36	; 0x24
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	7f5b      	ldrb	r3, [r3, #29]
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff ff67 	bl	8012368 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801249a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	7f9b      	ldrb	r3, [r3, #30]
 80124a0:	4619      	mov	r1, r3
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7ff ff60 	bl	8012368 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80124a8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	7f9b      	ldrb	r3, [r3, #30]
 80124ae:	4619      	mov	r1, r3
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff ff9d 	bl	80123f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80124b6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	8b5b      	ldrh	r3, [r3, #26]
 80124bc:	461a      	mov	r2, r3
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	8a9b      	ldrh	r3, [r3, #20]
 80124c2:	1ad2      	subs	r2, r2, r3
 80124c4:	4b95      	ldr	r3, [pc, #596]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80124c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	461a      	mov	r2, r3
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	8a9b      	ldrh	r3, [r3, #20]
 80124d2:	1ad2      	subs	r2, r2, r3
 80124d4:	4b91      	ldr	r3, [pc, #580]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80124d6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	8b1b      	ldrh	r3, [r3, #24]
 80124dc:	461a      	mov	r2, r3
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	8a9b      	ldrh	r3, [r3, #20]
 80124e2:	1ad2      	subs	r2, r2, r3
 80124e4:	4b8d      	ldr	r3, [pc, #564]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80124e6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80124e8:	4a8c      	ldr	r2, [pc, #560]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	8adb      	ldrh	r3, [r3, #22]
 80124f2:	461a      	mov	r2, r3
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	8a9b      	ldrh	r3, [r3, #20]
 80124f8:	041b      	lsls	r3, r3, #16
 80124fa:	431a      	orrs	r2, r3
 80124fc:	4b87      	ldr	r3, [pc, #540]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80124fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	691a      	ldr	r2, [r3, #16]
 8012504:	4b85      	ldr	r3, [pc, #532]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	4b83      	ldr	r3, [pc, #524]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801250e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012518:	d037      	beq.n	801258a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 801251a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801251e:	f200 80e8 	bhi.w	80126f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012526:	d014      	beq.n	8012552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801252c:	f200 80e1 	bhi.w	80126f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012530:	2b80      	cmp	r3, #128	; 0x80
 8012532:	d05b      	beq.n	80125ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8012534:	2b80      	cmp	r3, #128	; 0x80
 8012536:	f200 80dc 	bhi.w	80126f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801253a:	2b40      	cmp	r3, #64	; 0x40
 801253c:	f000 80c4 	beq.w	80126c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012540:	2b40      	cmp	r3, #64	; 0x40
 8012542:	f200 80d6 	bhi.w	80126f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012546:	2b04      	cmp	r3, #4
 8012548:	d03b      	beq.n	80125c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 801254a:	2b20      	cmp	r3, #32
 801254c:	f000 80bc 	beq.w	80126c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012550:	e0cf      	b.n	80126f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	7f1b      	ldrb	r3, [r3, #28]
 8012556:	061b      	lsls	r3, r3, #24
 8012558:	4a70      	ldr	r2, [pc, #448]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801255a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801255e:	f043 030a 	orr.w	r3, r3, #10
 8012562:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	330c      	adds	r3, #12
 8012568:	4c6c      	ldr	r4, [pc, #432]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801256a:	4618      	mov	r0, r3
 801256c:	f7fd f9f0 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 8012570:	4603      	mov	r3, r0
 8012572:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012574:	4a69      	ldr	r2, [pc, #420]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	691a      	ldr	r2, [r3, #16]
 801257e:	4b67      	ldr	r3, [pc, #412]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012580:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012582:	4b66      	ldr	r3, [pc, #408]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012584:	4a66      	ldr	r2, [pc, #408]	; (8012720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012586:	601a      	str	r2, [r3, #0]
        break;
 8012588:	e0d9      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	7f1b      	ldrb	r3, [r3, #28]
 801258e:	061b      	lsls	r3, r3, #24
 8012590:	4a62      	ldr	r2, [pc, #392]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012596:	f043 0309 	orr.w	r3, r3, #9
 801259a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	330c      	adds	r3, #12
 80125a0:	4c5e      	ldr	r4, [pc, #376]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fd f9d4 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 80125a8:	4603      	mov	r3, r0
 80125aa:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80125ac:	4a5b      	ldr	r2, [pc, #364]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	691a      	ldr	r2, [r3, #16]
 80125b6:	4b59      	ldr	r3, [pc, #356]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80125ba:	4b58      	ldr	r3, [pc, #352]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125bc:	4a58      	ldr	r2, [pc, #352]	; (8012720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80125be:	601a      	str	r2, [r3, #0]
        break;
 80125c0:	e0bd      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	7f1b      	ldrb	r3, [r3, #28]
 80125c6:	061b      	lsls	r3, r3, #24
 80125c8:	461a      	mov	r2, r3
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	4313      	orrs	r3, r2
 80125ce:	4a53      	ldr	r2, [pc, #332]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125d4:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80125d6:	4a51      	ldr	r2, [pc, #324]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	691a      	ldr	r2, [r3, #16]
 80125e0:	4b4e      	ldr	r3, [pc, #312]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125e2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80125e4:	4b4d      	ldr	r3, [pc, #308]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125e6:	4a4e      	ldr	r2, [pc, #312]	; (8012720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80125e8:	601a      	str	r2, [r3, #0]
        break;
 80125ea:	e0a8      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80125ec:	2301      	movs	r3, #1
 80125ee:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	689b      	ldr	r3, [r3, #8]
 80125f4:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	1d1a      	adds	r2, r3, #4
 80125fa:	4b48      	ldr	r3, [pc, #288]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80125fc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	7f1b      	ldrb	r3, [r3, #28]
 8012602:	061b      	lsls	r3, r3, #24
 8012604:	461a      	mov	r2, r3
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	4313      	orrs	r3, r2
 801260a:	4a44      	ldr	r2, [pc, #272]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012610:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012612:	4a42      	ldr	r2, [pc, #264]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	691a      	ldr	r2, [r3, #16]
 801261c:	4b3f      	ldr	r3, [pc, #252]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801261e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	881b      	ldrh	r3, [r3, #0]
 8012624:	b2db      	uxtb	r3, r3
 8012626:	2b00      	cmp	r3, #0
 8012628:	d002      	beq.n	8012630 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 801262a:	2b01      	cmp	r3, #1
 801262c:	d00f      	beq.n	801264e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 801262e:	e024      	b.n	801267a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012630:	4b3a      	ldr	r3, [pc, #232]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012638:	f023 0310 	bic.w	r3, r3, #16
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	8852      	ldrh	r2, [r2, #2]
 8012640:	3a01      	subs	r2, #1
 8012642:	0212      	lsls	r2, r2, #8
 8012644:	4611      	mov	r1, r2
 8012646:	4a35      	ldr	r2, [pc, #212]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012648:	430b      	orrs	r3, r1
 801264a:	61d3      	str	r3, [r2, #28]
                break;
 801264c:	e01c      	b.n	8012688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	7f1b      	ldrb	r3, [r3, #28]
 8012652:	2bff      	cmp	r3, #255	; 0xff
 8012654:	d101      	bne.n	801265a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8012656:	2300      	movs	r3, #0
 8012658:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 801265a:	4b30      	ldr	r3, [pc, #192]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801265c:	69db      	ldr	r3, [r3, #28]
 801265e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012662:	f023 0310 	bic.w	r3, r3, #16
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	8852      	ldrh	r2, [r2, #2]
 801266a:	3a01      	subs	r2, #1
 801266c:	0212      	lsls	r2, r2, #8
 801266e:	4313      	orrs	r3, r2
 8012670:	4a2a      	ldr	r2, [pc, #168]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012672:	f043 0310 	orr.w	r3, r3, #16
 8012676:	61d3      	str	r3, [r2, #28]
                break;
 8012678:	e006      	b.n	8012688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 801267a:	4b2a      	ldr	r3, [pc, #168]	; (8012724 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801267c:	4a2a      	ldr	r2, [pc, #168]	; (8012728 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801267e:	f240 1119 	movw	r1, #281	; 0x119
 8012682:	482a      	ldr	r0, [pc, #168]	; (801272c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012684:	f013 fd8c 	bl	80261a0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8012688:	4b24      	ldr	r3, [pc, #144]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	4a23      	ldr	r2, [pc, #140]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801268e:	f043 0320 	orr.w	r3, r3, #32
 8012692:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012694:	4b21      	ldr	r3, [pc, #132]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012696:	69db      	ldr	r3, [r3, #28]
 8012698:	f003 0320 	and.w	r3, r3, #32
 801269c:	2b00      	cmp	r3, #0
 801269e:	bf14      	ite	ne
 80126a0:	2301      	movne	r3, #1
 80126a2:	2300      	moveq	r3, #0
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d000      	beq.n	80126ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 80126aa:	e7f3      	b.n	8012694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80126ac:	4b1b      	ldr	r3, [pc, #108]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126ae:	2210      	movs	r2, #16
 80126b0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80126b2:	7ffb      	ldrb	r3, [r7, #31]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d003      	beq.n	80126c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80126b8:	4b18      	ldr	r3, [pc, #96]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126ba:	4a19      	ldr	r2, [pc, #100]	; (8012720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80126bc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80126be:	e03e      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80126c0:	4b16      	ldr	r3, [pc, #88]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126c2:	4a1b      	ldr	r2, [pc, #108]	; (8012730 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80126c4:	601a      	str	r2, [r3, #0]
        break;
 80126c6:	e03a      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	7f1b      	ldrb	r3, [r3, #28]
 80126cc:	061b      	lsls	r3, r3, #24
 80126ce:	461a      	mov	r2, r3
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	4313      	orrs	r3, r2
 80126d4:	4a11      	ldr	r2, [pc, #68]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80126da:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80126dc:	4a0f      	ldr	r2, [pc, #60]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	691a      	ldr	r2, [r3, #16]
 80126e6:	4b0d      	ldr	r3, [pc, #52]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126e8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80126ea:	4b0c      	ldr	r3, [pc, #48]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80126ec:	4a0c      	ldr	r2, [pc, #48]	; (8012720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80126ee:	601a      	str	r2, [r3, #0]
        break;
 80126f0:	e025      	b.n	801273e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	7f1b      	ldrb	r3, [r3, #28]
 80126f6:	061b      	lsls	r3, r3, #24
 80126f8:	461a      	mov	r2, r3
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	4313      	orrs	r3, r2
 80126fe:	4a07      	ldr	r2, [pc, #28]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012704:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	7f5a      	ldrb	r2, [r3, #29]
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	7f9b      	ldrb	r3, [r3, #30]
 801270e:	429a      	cmp	r2, r3
 8012710:	d010      	beq.n	8012734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012712:	4b02      	ldr	r3, [pc, #8]	; (801271c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012714:	4a06      	ldr	r2, [pc, #24]	; (8012730 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012716:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8012718:	e010      	b.n	801273c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 801271a:	bf00      	nop
 801271c:	4002b000 	.word	0x4002b000
 8012720:	00020201 	.word	0x00020201
 8012724:	08028220 	.word	0x08028220
 8012728:	0802823c 	.word	0x0802823c
 801272c:	080281a8 	.word	0x080281a8
 8012730:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8012734:	4b04      	ldr	r3, [pc, #16]	; (8012748 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8012736:	f240 2201 	movw	r2, #513	; 0x201
 801273a:	601a      	str	r2, [r3, #0]
        break;
 801273c:	bf00      	nop
    }
}
 801273e:	bf00      	nop
 8012740:	3724      	adds	r7, #36	; 0x24
 8012742:	46bd      	mov	sp, r7
 8012744:	bd90      	pop	{r4, r7, pc}
 8012746:	bf00      	nop
 8012748:	4002b000 	.word	0x4002b000

0801274c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 801274c:	b590      	push	{r4, r7, lr}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	7f9b      	ldrb	r3, [r3, #30]
 801275a:	4619      	mov	r1, r3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff fe47 	bl	80123f0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012762:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012764:	4a3b      	ldr	r2, [pc, #236]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	8adb      	ldrh	r3, [r3, #22]
 801276e:	461a      	mov	r2, r3
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	8a9b      	ldrh	r3, [r3, #20]
 8012774:	041b      	lsls	r3, r3, #16
 8012776:	431a      	orrs	r2, r3
 8012778:	4b36      	ldr	r3, [pc, #216]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801277a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	691a      	ldr	r2, [r3, #16]
 8012780:	4b34      	ldr	r3, [pc, #208]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012782:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	8b5b      	ldrh	r3, [r3, #26]
 8012788:	461a      	mov	r2, r3
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	8a9b      	ldrh	r3, [r3, #20]
 801278e:	1ad2      	subs	r2, r2, r3
 8012790:	4b30      	ldr	r3, [pc, #192]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012792:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b08      	cmp	r3, #8
 801279a:	d12f      	bne.n	80127fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	8b5b      	ldrh	r3, [r3, #26]
 80127a0:	461a      	mov	r2, r3
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	8a9b      	ldrh	r3, [r3, #20]
 80127a6:	1ad2      	subs	r2, r2, r3
 80127a8:	4b2a      	ldr	r3, [pc, #168]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127aa:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	8b5b      	ldrh	r3, [r3, #26]
 80127b0:	461a      	mov	r2, r3
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	8a9b      	ldrh	r3, [r3, #20]
 80127b6:	1ad2      	subs	r2, r2, r3
 80127b8:	4b26      	ldr	r3, [pc, #152]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127ba:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80127bc:	4a25      	ldr	r2, [pc, #148]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	7f1b      	ldrb	r3, [r3, #28]
 80127c6:	061b      	lsls	r3, r3, #24
 80127c8:	4a22      	ldr	r2, [pc, #136]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127ce:	f043 0309 	orr.w	r3, r3, #9
 80127d2:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	330c      	adds	r3, #12
 80127d8:	4c1e      	ldr	r4, [pc, #120]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fd f8b8 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 80127e0:	4603      	mov	r3, r0
 80127e2:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	691a      	ldr	r2, [r3, #16]
 80127e8:	4b1a      	ldr	r3, [pc, #104]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127ea:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	691a      	ldr	r2, [r3, #16]
 80127f0:	4b18      	ldr	r3, [pc, #96]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127f2:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80127f4:	4b17      	ldr	r3, [pc, #92]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127f6:	4a18      	ldr	r2, [pc, #96]	; (8012858 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80127f8:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80127fa:	e027      	b.n	801284c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80127fc:	4a15      	ldr	r2, [pc, #84]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012802:	4b14      	ldr	r3, [pc, #80]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012804:	2200      	movs	r2, #0
 8012806:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	330c      	adds	r3, #12
 801280c:	4618      	mov	r0, r3
 801280e:	f7fd f89f 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 8012812:	4603      	mov	r3, r0
 8012814:	0a1b      	lsrs	r3, r3, #8
 8012816:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	330c      	adds	r3, #12
 801281e:	4618      	mov	r0, r3
 8012820:	f7fd f896 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 8012824:	4603      	mov	r3, r0
 8012826:	095b      	lsrs	r3, r3, #5
 8012828:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801282c:	431c      	orrs	r4, r3
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	330c      	adds	r3, #12
 8012832:	4618      	mov	r0, r3
 8012834:	f7fd f88c 	bl	800f950 <_ZNK8touchgfx9colortypecvmEv>
 8012838:	4603      	mov	r3, r0
 801283a:	08db      	lsrs	r3, r3, #3
 801283c:	f003 031f 	and.w	r3, r3, #31
 8012840:	4a04      	ldr	r2, [pc, #16]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012842:	4323      	orrs	r3, r4
 8012844:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8012846:	4b03      	ldr	r3, [pc, #12]	; (8012854 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012848:	4a04      	ldr	r2, [pc, #16]	; (801285c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801284a:	601a      	str	r2, [r3, #0]
}
 801284c:	bf00      	nop
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	bd90      	pop	{r4, r7, pc}
 8012854:	4002b000 	.word	0x4002b000
 8012858:	00020201 	.word	0x00020201
 801285c:	00030201 	.word	0x00030201

08012860 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 8012860:	b480      	push	{r7}
 8012862:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012864:	4b09      	ldr	r3, [pc, #36]	; (801288c <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f003 0301 	and.w	r3, r3, #1
 801286c:	2b00      	cmp	r3, #0
 801286e:	bf14      	ite	ne
 8012870:	2301      	movne	r3, #1
 8012872:	2300      	moveq	r3, #0
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	d000      	beq.n	801287c <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 801287a:	e7f3      	b.n	8012864 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 801287c:	4b03      	ldr	r3, [pc, #12]	; (801288c <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 801287e:	2223      	movs	r2, #35	; 0x23
 8012880:	609a      	str	r2, [r3, #8]
    }
 8012882:	bf00      	nop
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr
 801288c:	4002b000 	.word	0x4002b000

08012890 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 8012890:	b480      	push	{r7}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
 801289c:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801289e:	4b22      	ldr	r3, [pc, #136]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f003 0301 	and.w	r3, r3, #1
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	bf14      	ite	ne
 80128aa:	2301      	movne	r3, #1
 80128ac:	2300      	moveq	r3, #0
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d000      	beq.n	80128b6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 80128b4:	e7f3      	b.n	801289e <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 80128b6:	4b1c      	ldr	r3, [pc, #112]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128b8:	2223      	movs	r2, #35	; 0x23
 80128ba:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80128bc:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128be:	2202      	movs	r2, #2
 80128c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	041b      	lsls	r3, r3, #16
 80128c6:	4a18      	ldr	r2, [pc, #96]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128c8:	f043 0301 	orr.w	r3, r3, #1
 80128cc:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80128ce:	4a16      	ldr	r2, [pc, #88]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 80128d4:	78fb      	ldrb	r3, [r7, #3]
 80128d6:	2bff      	cmp	r3, #255	; 0xff
 80128d8:	d017      	beq.n	801290a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80128da:	4b13      	ldr	r3, [pc, #76]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128dc:	2202      	movs	r2, #2
 80128de:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80128e0:	78fb      	ldrb	r3, [r7, #3]
 80128e2:	061b      	lsls	r3, r3, #24
 80128e4:	4a10      	ldr	r2, [pc, #64]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128ea:	f043 0309 	orr.w	r3, r3, #9
 80128ee:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 80128f0:	4a0d      	ldr	r2, [pc, #52]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80128f6:	4a0c      	ldr	r2, [pc, #48]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80128fc:	4a0a      	ldr	r2, [pc, #40]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012902:	4b09      	ldr	r3, [pc, #36]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012904:	4a09      	ldr	r2, [pc, #36]	; (801292c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8012906:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8012908:	e008      	b.n	801291c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801290a:	4b07      	ldr	r3, [pc, #28]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801290c:	2202      	movs	r2, #2
 801290e:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8012910:	4a05      	ldr	r2, [pc, #20]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8012916:	4b04      	ldr	r3, [pc, #16]	; (8012928 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012918:	4a05      	ldr	r2, [pc, #20]	; (8012930 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 801291a:	601a      	str	r2, [r3, #0]
    }
 801291c:	bf00      	nop
 801291e:	3714      	adds	r7, #20
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr
 8012928:	4002b000 	.word	0x4002b000
 801292c:	00020001 	.word	0x00020001
 8012930:	00030001 	.word	0x00030001

08012934 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	4a05      	ldr	r2, [pc, #20]	; (8012954 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	601a      	str	r2, [r3, #0]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4618      	mov	r0, r3
 8012946:	f7ff fbbd 	bl	80120c4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4618      	mov	r0, r3
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	08028f3c 	.word	0x08028f3c

08012958 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff ffe7 	bl	8012934 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012966:	2114      	movs	r1, #20
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f013 fbed 	bl	8026148 <_ZdlPvj>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012980:	4a04      	ldr	r2, [pc, #16]	; (8012994 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6013      	str	r3, [r2, #0]
    }
 8012986:	bf00      	nop
 8012988:	370c      	adds	r7, #12
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	2004f6c0 	.word	0x2004f6c0

08012998 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012998:	b480      	push	{r7}
 801299a:	b085      	sub	sp, #20
 801299c:	af00      	add	r7, sp, #0
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80129a6:	4a0b      	ldr	r2, [pc, #44]	; (80129d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	601a      	str	r2, [r3, #0]
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	605a      	str	r2, [r3, #4]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	609a      	str	r2, [r3, #8]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	683a      	ldr	r2, [r7, #0]
 80129bc:	60da      	str	r2, [r3, #12]
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	69ba      	ldr	r2, [r7, #24]
 80129c2:	611a      	str	r2, [r3, #16]
    {
    }
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	4618      	mov	r0, r3
 80129c8:	3714      	adds	r7, #20
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	08028c5c 	.word	0x08028c5c

080129d8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    {
 80129e0:	4a04      	ldr	r2, [pc, #16]	; (80129f4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
    }
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4618      	mov	r0, r3
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr
 80129f4:	08028c5c 	.word	0x08028c5c

080129f8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    }
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7ff ffe9 	bl	80129d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012a06:	2114      	movs	r1, #20
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f013 fb9d 	bl	8026148 <_ZdlPvj>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012a18:	b480      	push	{r7}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
    {
 8012a20:	4a04      	ldr	r2, [pc, #16]	; (8012a34 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	601a      	str	r2, [r3, #0]
    }
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	370c      	adds	r7, #12
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a32:	4770      	bx	lr
 8012a34:	08029338 	.word	0x08029338

08012a38 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
    }
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff ffe9 	bl	8012a18 <_ZN8touchgfx3LCDD1Ev>
 8012a46:	2108      	movs	r1, #8
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f013 fb7d 	bl	8026148 <_ZdlPvj>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4618      	mov	r0, r3
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	801a      	strh	r2, [r3, #0]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	805a      	strh	r2, [r3, #2]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	809a      	strh	r2, [r3, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2200      	movs	r2, #0
 8012a76:	80da      	strh	r2, [r3, #6]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	811a      	strh	r2, [r3, #8]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	815a      	strh	r2, [r3, #10]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	819a      	strh	r2, [r3, #12]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	739a      	strb	r2, [r3, #14]
        {
        }
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	4618      	mov	r0, r3
 8012a94:	370c      	adds	r7, #12
 8012a96:	46bd      	mov	sp, r7
 8012a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9c:	4770      	bx	lr

08012a9e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7ff ffd5 	bl	8012a58 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	611a      	str	r2, [r3, #16]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	829a      	strh	r2, [r3, #20]
    {
    }
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
 8012ad0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012ad2:	4a55      	ldr	r2, [pc, #340]	; (8012c28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	601a      	str	r2, [r3, #0]
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	605a      	str	r2, [r3, #4]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	609a      	str	r2, [r3, #8]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	60da      	str	r2, [r3, #12]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2200      	movs	r2, #0
 8012aee:	611a      	str	r2, [r3, #16]
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	615a      	str	r2, [r3, #20]
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2200      	movs	r2, #0
 8012afa:	619a      	str	r2, [r3, #24]
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	331c      	adds	r3, #28
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7ff ffcc 	bl	8012a9e <_ZN8touchgfx8GesturesC1Ev>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2200      	movs	r2, #0
 8012b12:	639a      	str	r2, [r3, #56]	; 0x38
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2200      	movs	r2, #0
 8012b24:	645a      	str	r2, [r3, #68]	; 0x44
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2201      	movs	r2, #1
 8012b32:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2200      	movs	r2, #0
 8012b42:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	3350      	adds	r3, #80	; 0x50
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7fa fffb 	bl	800db4c <_ZN8touchgfx4RectC1Ev>
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	65da      	str	r2, [r3, #92]	; 0x5c
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2200      	movs	r2, #0
 8012b66:	661a      	str	r2, [r3, #96]	; 0x60
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2201      	movs	r2, #1
 8012b6c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2200      	movs	r2, #0
 8012b74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2201      	movs	r2, #1
 8012b84:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2200      	movs	r2, #0
 8012b94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	671a      	str	r2, [r3, #112]	; 0x70
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8012bde:	4a13      	ldr	r2, [pc, #76]	; (8012c2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012be4:	4a12      	ldr	r2, [pc, #72]	; (8012c30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012be6:	8b3b      	ldrh	r3, [r7, #24]
 8012be8:	8013      	strh	r3, [r2, #0]
 8012bea:	4b11      	ldr	r3, [pc, #68]	; (8012c30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012bec:	881a      	ldrh	r2, [r3, #0]
 8012bee:	4b11      	ldr	r3, [pc, #68]	; (8012c34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8012bf0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012bf2:	4a11      	ldr	r2, [pc, #68]	; (8012c38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012bf4:	8bbb      	ldrh	r3, [r7, #28]
 8012bf6:	8013      	strh	r3, [r2, #0]
 8012bf8:	4b0f      	ldr	r3, [pc, #60]	; (8012c38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012bfa:	881a      	ldrh	r2, [r3, #0]
 8012bfc:	4b0f      	ldr	r3, [pc, #60]	; (8012c3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8012bfe:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012c00:	4b0f      	ldr	r3, [pc, #60]	; (8012c40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8012c02:	2200      	movs	r2, #0
 8012c04:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012c06:	8b3a      	ldrh	r2, [r7, #24]
 8012c08:	8bbb      	ldrh	r3, [r7, #28]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	bf34      	ite	cc
 8012c0e:	2301      	movcc	r3, #1
 8012c10:	2300      	movcs	r3, #0
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	461a      	mov	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	08028e14 	.word	0x08028e14
 8012c2c:	2004f65c 	.word	0x2004f65c
 8012c30:	2004f650 	.word	0x2004f650
 8012c34:	2004f656 	.word	0x2004f656
 8012c38:	2004f652 	.word	0x2004f652
 8012c3c:	2004f658 	.word	0x2004f658
 8012c40:	2004f654 	.word	0x2004f654

08012c44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fb fc6d 	bl	800e530 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8012c56:	bf00      	nop
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b086      	sub	sp, #24
 8012c64:	af02      	add	r7, sp, #8
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	607a      	str	r2, [r7, #4]
 8012c6c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	68b9      	ldr	r1, [r7, #8]
 8012c7a:	f7ff fe8d 	bl	8012998 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8012c7e:	4a04      	ldr	r2, [pc, #16]	; (8012c90 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	601a      	str	r2, [r3, #0]
    {

    }
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	08028c48 	.word	0x08028c48

08012c94 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012c94:	b580      	push	{r7, lr}
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	4801      	ldr	r0, [pc, #4]	; (8012ca0 <__tcf_0+0xc>)
 8012c9a:	f000 f96d 	bl	8012f78 <_ZN12FrontendHeapD1Ev>
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	2004d588 	.word	0x2004d588

08012ca4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012ca8:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012caa:	e8d3 3f8f 	ldab	r3, [r3]
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	f003 0301 	and.w	r3, r3, #1
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	bf0c      	ite	eq
 8012cb8:	2301      	moveq	r3, #1
 8012cba:	2300      	movne	r3, #0
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d013      	beq.n	8012cea <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012cc2:	480b      	ldr	r0, [pc, #44]	; (8012cf0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012cc4:	f013 fa42 	bl	802614c <__cxa_guard_acquire>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	bf14      	ite	ne
 8012cce:	2301      	movne	r3, #1
 8012cd0:	2300      	moveq	r3, #0
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d008      	beq.n	8012cea <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012cd8:	4806      	ldr	r0, [pc, #24]	; (8012cf4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8012cda:	f000 f867 	bl	8012dac <_ZN12FrontendHeapC1Ev>
 8012cde:	4806      	ldr	r0, [pc, #24]	; (8012cf8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012ce0:	f013 fa7c 	bl	80261dc <atexit>
 8012ce4:	4802      	ldr	r0, [pc, #8]	; (8012cf0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012ce6:	f013 fa3d 	bl	8026164 <__cxa_guard_release>
        return instance;
 8012cea:	4b02      	ldr	r3, [pc, #8]	; (8012cf4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8012cec:	4618      	mov	r0, r3
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	2004e7b0 	.word	0x2004e7b0
 8012cf4:	2004d588 	.word	0x2004d588
 8012cf8:	08012c95 	.word	0x08012c95

08012cfc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	4a05      	ldr	r2, [pc, #20]	; (8012d1c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	601a      	str	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff fe63 	bl	80129d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	08028c48 	.word	0x08028c48

08012d20 <_ZN16FrontendHeapBaseD0Ev>:
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ffe7 	bl	8012cfc <_ZN16FrontendHeapBaseD1Ev>
 8012d2e:	2114      	movs	r1, #20
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f013 fa09 	bl	8026148 <_ZdlPvj>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f000 fc16 	bl	801357c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d50:	4a03      	ldr	r2, [pc, #12]	; (8012d60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	08028c14 	.word	0x08028c14

08012d64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f000 fc04 	bl	801357c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d74:	4a03      	ldr	r2, [pc, #12]	; (8012d84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	08028be0 	.word	0x08028be0

08012d88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f000 fbf2 	bl	801357c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012d98:	4a03      	ldr	r2, [pc, #12]	; (8012da8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	601a      	str	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	08028bac 	.word	0x08028bac

08012dac <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012dac:	b590      	push	{r4, r7, lr}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f103 0114 	add.w	r1, r3, #20
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
 8012dc8:	3210      	adds	r2, #16
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012dd0:	3310      	adds	r3, #16
                     app(model, *this)
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	4613      	mov	r3, r2
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	f7ff ff42 	bl	8012c60 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012ddc:	4a1a      	ldr	r2, [pc, #104]	; (8012e48 <_ZN12FrontendHeapC1Ev+0x9c>)
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	3314      	adds	r3, #20
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff ffaa 	bl	8012d40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	332c      	adds	r3, #44	; 0x2c
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff ffb7 	bl	8012d64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8012dfc:	3310      	adds	r3, #16
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7ff ffc2 	bl	8012d88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012e0a:	330c      	adds	r3, #12
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fa1f 	bl	8011250 <_ZN5ModelC1Ev>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012e18:	3310      	adds	r3, #16
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 8012e20:	310c      	adds	r1, #12
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fe f9fd 	bl	8011224 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012e32:	3310      	adds	r3, #16
 8012e34:	4619      	mov	r1, r3
 8012e36:	4610      	mov	r0, r2
 8012e38:	f7ff ff04 	bl	8012c44 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd90      	pop	{r4, r7, pc}
 8012e46:	bf00      	nop
 8012e48:	08028b98 	.word	0x08028b98

08012e4c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b086      	sub	sp, #24
 8012e50:	af02      	add	r7, sp, #8
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
 8012e58:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	8bbb      	ldrh	r3, [r7, #28]
 8012e5e:	9301      	str	r3, [sp, #4]
 8012e60:	8b3b      	ldrh	r3, [r7, #24]
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	68b9      	ldr	r1, [r7, #8]
 8012e6a:	f7ff fe2b 	bl	8012ac4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012e6e:	4a04      	ldr	r2, [pc, #16]	; (8012e80 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	601a      	str	r2, [r3, #0]
    }
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4618      	mov	r0, r3
 8012e78:	3710      	adds	r7, #16
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	08028c6c 	.word	0x08028c6c

08012e84 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b086      	sub	sp, #24
 8012e88:	af02      	add	r7, sp, #8
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
 8012e90:	603b      	str	r3, [r7, #0]
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	8bbb      	ldrh	r3, [r7, #28]
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	8b3b      	ldrh	r3, [r7, #24]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	68b9      	ldr	r1, [r7, #8]
 8012ea2:	f7ff ffd3 	bl	8012e4c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012ea6:	4a04      	ldr	r2, [pc, #16]	; (8012eb8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	601a      	str	r2, [r3, #0]
    }
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	08028a48 	.word	0x08028a48

08012ebc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	4a04      	ldr	r2, [pc, #16]	; (8012ed8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	601a      	str	r2, [r3, #0]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr
 8012ed8:	08028a30 	.word	0x08028a30

08012edc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7ff ffe8 	bl	8012ebc <_ZN8touchgfx15TouchControllerC1Ev>
 8012eec:	4a03      	ldr	r2, [pc, #12]	; (8012efc <_ZN20STM32TouchControllerC1Ev+0x20>)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	601a      	str	r2, [r3, #0]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	08028a18 	.word	0x08028a18

08012f00 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8012f00:	b590      	push	{r4, r7, lr}
 8012f02:	b085      	sub	sp, #20
 8012f04:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012f06:	f7fd ff8f 	bl	8010e28 <_ZN14BitmapDatabase11getInstanceEv>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	f7fd ff96 	bl	8010e3c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012f10:	4603      	mov	r3, r0
 8012f12:	4619      	mov	r1, r3
 8012f14:	2300      	movs	r3, #0
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	2300      	movs	r3, #0
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	f007 f83f 	bl	8019fa0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012f22:	4809      	ldr	r0, [pc, #36]	; (8012f48 <touchgfx_init+0x48>)
 8012f24:	f7ff fd28 	bl	8012978 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012f28:	2000      	movs	r0, #0
 8012f2a:	f7fe f8b3 	bl	8011094 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8012f2e:	4807      	ldr	r0, [pc, #28]	; (8012f4c <touchgfx_init+0x4c>)
 8012f30:	f006 ff9e 	bl	8019e70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012f34:	f7ff feb6 	bl	8012ca4 <_ZN12FrontendHeap11getInstanceEv>
 8012f38:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012f3a:	4805      	ldr	r0, [pc, #20]	; (8012f50 <touchgfx_init+0x50>)
 8012f3c:	f7fe fe00 	bl	8011b40 <_ZN11TouchGFXHAL10initializeEv>
}
 8012f40:	bf00      	nop
 8012f42:	370c      	adds	r7, #12
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd90      	pop	{r4, r7, pc}
 8012f48:	2004f5d0 	.word	0x2004f5d0
 8012f4c:	2002581c 	.word	0x2002581c
 8012f50:	2004f5d4 	.word	0x2004f5d4

08012f54 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012f54:	b480      	push	{r7}
 8012f56:	af00      	add	r7, sp, #0
}
 8012f58:	bf00      	nop
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr
	...

08012f64 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8012f68:	4802      	ldr	r0, [pc, #8]	; (8012f74 <touchgfx_taskEntry+0x10>)
 8012f6a:	f000 fe16 	bl	8013b9a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012f6e:	bf00      	nop
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	2004f5d4 	.word	0x2004f5d4

08012f78 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	4a11      	ldr	r2, [pc, #68]	; (8012fc8 <_ZN12FrontendHeapD1Ev+0x50>)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8012f8c:	3310      	adds	r3, #16
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe f912 	bl	80111b8 <_ZN19FrontendApplicationD1Ev>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8012f9a:	3310      	adds	r3, #16
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f000 f827 	bl	8012ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	332c      	adds	r3, #44	; 0x2c
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 f844 	bl	8013034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	3314      	adds	r3, #20
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f000 f863 	bl	801307c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7ff fe9f 	bl	8012cfc <_ZN16FrontendHeapBaseD1Ev>
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3708      	adds	r7, #8
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	08028b98 	.word	0x08028b98

08012fcc <_ZN12FrontendHeapD0Ev>:
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f7ff ffcf 	bl	8012f78 <_ZN12FrontendHeapD1Ev>
 8012fda:	f241 2128 	movw	r1, #4648	; 0x1228
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f013 f8b2 	bl	8026148 <_ZdlPvj>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
	...

08012ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	4a05      	ldr	r2, [pc, #20]	; (8013010 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	601a      	str	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4618      	mov	r0, r3
 8013002:	f000 fab9 	bl	8013578 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	08028bac 	.word	0x08028bac

08013014 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7ff ffe7 	bl	8012ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8013022:	215c      	movs	r1, #92	; 0x5c
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f013 f88f 	bl	8026148 <_ZdlPvj>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	4a05      	ldr	r2, [pc, #20]	; (8013054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	601a      	str	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4618      	mov	r0, r3
 8013046:	f000 fa97 	bl	8013578 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4618      	mov	r0, r3
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	08028be0 	.word	0x08028be0

08013058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f7ff ffe7 	bl	8013034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013066:	f241 0144 	movw	r1, #4164	; 0x1044
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f013 f86c 	bl	8026148 <_ZdlPvj>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	4618      	mov	r0, r3
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
	...

0801307c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	4a05      	ldr	r2, [pc, #20]	; (801309c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	601a      	str	r2, [r3, #0]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4618      	mov	r0, r3
 801308e:	f000 fa73 	bl	8013578 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	08028c14 	.word	0x08028c14

080130a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f7ff ffe7 	bl	801307c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80130ae:	2118      	movs	r1, #24
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f013 f849 	bl	8026148 <_ZdlPvj>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	4a05      	ldr	r2, [pc, #20]	; (80130e0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	601a      	str	r2, [r3, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fca1 	bl	8012a18 <_ZN8touchgfx3LCDD1Ev>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	0802973c 	.word	0x0802973c

080130e4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f7ff ffe7 	bl	80130c0 <_ZN8touchgfx8LCD16bppD1Ev>
 80130f2:	2178      	movs	r1, #120	; 0x78
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f013 f827 	bl	8026148 <_ZdlPvj>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	3708      	adds	r7, #8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <_Z41__static_initialization_and_destruction_0ii>:
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af02      	add	r7, sp, #8
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2b01      	cmp	r3, #1
 8013112:	d118      	bne.n	8013146 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801311a:	4293      	cmp	r3, r2
 801311c:	d113      	bne.n	8013146 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801311e:	4817      	ldr	r0, [pc, #92]	; (801317c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8013120:	f7ff fedc 	bl	8012edc <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013124:	4816      	ldr	r0, [pc, #88]	; (8013180 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013126:	f7ff f89b 	bl	8012260 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801312a:	4816      	ldr	r0, [pc, #88]	; (8013184 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801312c:	f00a f838 	bl	801d1a0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8013130:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	23f0      	movs	r3, #240	; 0xf0
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	4b10      	ldr	r3, [pc, #64]	; (801317c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801313c:	4a11      	ldr	r2, [pc, #68]	; (8013184 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801313e:	4910      	ldr	r1, [pc, #64]	; (8013180 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013140:	4811      	ldr	r0, [pc, #68]	; (8013188 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013142:	f7ff fe9f 	bl	8012e84 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d113      	bne.n	8013174 <_Z41__static_initialization_and_destruction_0ii+0x70>
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013152:	4293      	cmp	r3, r2
 8013154:	d10e      	bne.n	8013174 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8013156:	480c      	ldr	r0, [pc, #48]	; (8013188 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013158:	f7fe fe16 	bl	8011d88 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801315c:	480b      	ldr	r0, [pc, #44]	; (801318c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801315e:	f7fa fa3b 	bl	800d5d8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8013162:	4808      	ldr	r0, [pc, #32]	; (8013184 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013164:	f7ff ffac 	bl	80130c0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8013168:	4805      	ldr	r0, [pc, #20]	; (8013180 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801316a:	f7ff f8a3 	bl	80122b4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801316e:	4803      	ldr	r0, [pc, #12]	; (801317c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8013170:	f7fe faa2 	bl	80116b8 <_ZN20STM32TouchControllerD1Ev>
}
 8013174:	bf00      	nop
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	2004e7b4 	.word	0x2004e7b4
 8013180:	2004e7b8 	.word	0x2004e7b8
 8013184:	2004f558 	.word	0x2004f558
 8013188:	2004f5d4 	.word	0x2004f5d4
 801318c:	2002581c 	.word	0x2002581c

08013190 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8013190:	b480      	push	{r7}
 8013192:	b083      	sub	sp, #12
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013198:	2301      	movs	r3, #1
    }
 801319a:	4618      	mov	r0, r3
 801319c:	370c      	adds	r7, #12
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr

080131a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80131a6:	b480      	push	{r7}
 80131a8:	b083      	sub	sp, #12
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80131ae:	2354      	movs	r3, #84	; 0x54
    }
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	460b      	mov	r3, r1
 80131c6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80131c8:	887b      	ldrh	r3, [r7, #2]
 80131ca:	2254      	movs	r2, #84	; 0x54
 80131cc:	fb02 f303 	mul.w	r3, r2, r3
 80131d0:	3308      	adds	r3, #8
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	4413      	add	r3, r2
    }
 80131d6:	4618      	mov	r0, r3
 80131d8:	370c      	adds	r7, #12
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr

080131e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80131e2:	b480      	push	{r7}
 80131e4:	b083      	sub	sp, #12
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
 80131ea:	460b      	mov	r3, r1
 80131ec:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80131ee:	887b      	ldrh	r3, [r7, #2]
 80131f0:	2254      	movs	r2, #84	; 0x54
 80131f2:	fb02 f303 	mul.w	r3, r2, r3
 80131f6:	3308      	adds	r3, #8
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	4413      	add	r3, r2
    }
 80131fc:	4618      	mov	r0, r3
 80131fe:	370c      	adds	r7, #12
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013210:	2301      	movs	r3, #1
    }
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801321e:	b480      	push	{r7}
 8013220:	b083      	sub	sp, #12
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013226:	f241 033c 	movw	r3, #4156	; 0x103c
    }
 801322a:	4618      	mov	r0, r3
 801322c:	370c      	adds	r7, #12
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
 801323e:	460b      	mov	r3, r1
 8013240:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013242:	887b      	ldrh	r3, [r7, #2]
 8013244:	f241 023c 	movw	r2, #4156	; 0x103c
 8013248:	fb02 f303 	mul.w	r3, r2, r3
 801324c:	3308      	adds	r3, #8
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	4413      	add	r3, r2
    }
 8013252:	4618      	mov	r0, r3
 8013254:	370c      	adds	r7, #12
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr

0801325e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801325e:	b480      	push	{r7}
 8013260:	b083      	sub	sp, #12
 8013262:	af00      	add	r7, sp, #0
 8013264:	6078      	str	r0, [r7, #4]
 8013266:	460b      	mov	r3, r1
 8013268:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801326a:	887b      	ldrh	r3, [r7, #2]
 801326c:	f241 023c 	movw	r2, #4156	; 0x103c
 8013270:	fb02 f303 	mul.w	r3, r2, r3
 8013274:	3308      	adds	r3, #8
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	4413      	add	r3, r2
    }
 801327a:	4618      	mov	r0, r3
 801327c:	370c      	adds	r7, #12
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013286:	b480      	push	{r7}
 8013288:	b083      	sub	sp, #12
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801328e:	2301      	movs	r3, #1
    }
 8013290:	4618      	mov	r0, r3
 8013292:	370c      	adds	r7, #12
 8013294:	46bd      	mov	sp, r7
 8013296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329a:	4770      	bx	lr

0801329c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80132a4:	2310      	movs	r3, #16
    }
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	460b      	mov	r3, r1
 80132bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80132be:	887b      	ldrh	r3, [r7, #2]
 80132c0:	011b      	lsls	r3, r3, #4
 80132c2:	3308      	adds	r3, #8
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	4413      	add	r3, r2
    }
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	460b      	mov	r3, r1
 80132de:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80132e0:	887b      	ldrh	r3, [r7, #2]
 80132e2:	011b      	lsls	r3, r3, #4
 80132e4:	3308      	adds	r3, #8
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	4413      	add	r3, r2
    }
 80132ea:	4618      	mov	r0, r3
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <_GLOBAL__sub_I_touchgfx_init>:
 80132f6:	b580      	push	{r7, lr}
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132fe:	2001      	movs	r0, #1
 8013300:	f7ff ff00 	bl	8013104 <_Z41__static_initialization_and_destruction_0ii>
 8013304:	bd80      	pop	{r7, pc}

08013306 <_GLOBAL__sub_D_touchgfx_init>:
 8013306:	b580      	push	{r7, lr}
 8013308:	af00      	add	r7, sp, #0
 801330a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801330e:	2000      	movs	r0, #0
 8013310:	f7ff fef8 	bl	8013104 <_Z41__static_initialization_and_destruction_0ii>
 8013314:	bd80      	pop	{r7, pc}
	...

08013318 <__NVIC_EnableIRQ>:
{
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	4603      	mov	r3, r0
 8013320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013326:	2b00      	cmp	r3, #0
 8013328:	db0b      	blt.n	8013342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	f003 021f 	and.w	r2, r3, #31
 8013330:	4907      	ldr	r1, [pc, #28]	; (8013350 <__NVIC_EnableIRQ+0x38>)
 8013332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013336:	095b      	lsrs	r3, r3, #5
 8013338:	2001      	movs	r0, #1
 801333a:	fa00 f202 	lsl.w	r2, r0, r2
 801333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013342:	bf00      	nop
 8013344:	370c      	adds	r7, #12
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	e000e100 	.word	0xe000e100

08013354 <__NVIC_DisableIRQ>:
{
 8013354:	b480      	push	{r7}
 8013356:	b083      	sub	sp, #12
 8013358:	af00      	add	r7, sp, #0
 801335a:	4603      	mov	r3, r0
 801335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013362:	2b00      	cmp	r3, #0
 8013364:	db12      	blt.n	801338c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013366:	79fb      	ldrb	r3, [r7, #7]
 8013368:	f003 021f 	and.w	r2, r3, #31
 801336c:	490a      	ldr	r1, [pc, #40]	; (8013398 <__NVIC_DisableIRQ+0x44>)
 801336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013372:	095b      	lsrs	r3, r3, #5
 8013374:	2001      	movs	r0, #1
 8013376:	fa00 f202 	lsl.w	r2, r0, r2
 801337a:	3320      	adds	r3, #32
 801337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013380:	f3bf 8f4f 	dsb	sy
}
 8013384:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013386:	f3bf 8f6f 	isb	sy
}
 801338a:	bf00      	nop
}
 801338c:	bf00      	nop
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr
 8013398:	e000e100 	.word	0xe000e100

0801339c <__NVIC_SetPriority>:
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	6039      	str	r1, [r7, #0]
 80133a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	db0a      	blt.n	80133c6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	b2da      	uxtb	r2, r3
 80133b4:	490c      	ldr	r1, [pc, #48]	; (80133e8 <__NVIC_SetPriority+0x4c>)
 80133b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133ba:	0112      	lsls	r2, r2, #4
 80133bc:	b2d2      	uxtb	r2, r2
 80133be:	440b      	add	r3, r1
 80133c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80133c4:	e00a      	b.n	80133dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	b2da      	uxtb	r2, r3
 80133ca:	4908      	ldr	r1, [pc, #32]	; (80133ec <__NVIC_SetPriority+0x50>)
 80133cc:	79fb      	ldrb	r3, [r7, #7]
 80133ce:	f003 030f 	and.w	r3, r3, #15
 80133d2:	3b04      	subs	r3, #4
 80133d4:	0112      	lsls	r2, r2, #4
 80133d6:	b2d2      	uxtb	r2, r2
 80133d8:	440b      	add	r3, r1
 80133da:	761a      	strb	r2, [r3, #24]
}
 80133dc:	bf00      	nop
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	e000e100 	.word	0xe000e100
 80133ec:	e000ed00 	.word	0xe000ed00

080133f0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 80133f0:	b5b0      	push	{r4, r5, r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f000 fbbb 	bl	8013b76 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013400:	687d      	ldr	r5, [r7, #4]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3364      	adds	r3, #100	; 0x64
 8013408:	681c      	ldr	r4, [r3, #0]
 801340a:	f004 f995 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 801340e:	4603      	mov	r3, r0
 8013410:	4619      	mov	r1, r3
 8013412:	4628      	mov	r0, r5
 8013414:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	3388      	adds	r3, #136	; 0x88
 801341e:	681c      	ldr	r4, [r3, #0]
 8013420:	2300      	movs	r3, #0
 8013422:	2200      	movs	r2, #0
 8013424:	4902      	ldr	r1, [pc, #8]	; (8013430 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013426:	47a0      	blx	r4
}
 8013428:	bf00      	nop
 801342a:	3708      	adds	r7, #8
 801342c:	46bd      	mov	sp, r7
 801342e:	bdb0      	pop	{r4, r5, r7, pc}
 8013430:	20025900 	.word	0x20025900

08013434 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801343c:	2109      	movs	r1, #9
 801343e:	2076      	movs	r0, #118	; 0x76
 8013440:	f7ff ffac 	bl	801339c <__NVIC_SetPriority>
}
 8013444:	bf00      	nop
 8013446:	3708      	adds	r7, #8
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013454:	2076      	movs	r0, #118	; 0x76
 8013456:	f7ff ff5f 	bl	8013318 <__NVIC_EnableIRQ>
}
 801345a:	bf00      	nop
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b082      	sub	sp, #8
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801346a:	2076      	movs	r0, #118	; 0x76
 801346c:	f7ff ff72 	bl	8013354 <__NVIC_DisableIRQ>
}
 8013470:	bf00      	nop
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
}
 8013480:	bf00      	nop
 8013482:	370c      	adds	r7, #12
 8013484:	46bd      	mov	sp, r7
 8013486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348a:	4770      	bx	lr

0801348c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	4618      	mov	r0, r3
 8013498:	f000 fb54 	bl	8013b44 <_ZN8touchgfx3HAL10beginFrameEv>
 801349c:	4603      	mov	r3, r0
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b082      	sub	sp, #8
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f000 fb53 	bl	8013b5c <_ZN8touchgfx3HAL8endFrameEv>
}
 80134b6:	bf00      	nop
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
	...

080134c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 80134c8:	4b03      	ldr	r3, [pc, #12]	; (80134d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	370c      	adds	r7, #12
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	20025900 	.word	0x20025900

080134dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 80134e6:	bf00      	nop
 80134e8:	370c      	adds	r7, #12
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr

080134f2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b082      	sub	sp, #8
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	4618      	mov	r0, r3
 8013502:	f000 fae9 	bl	8013ad8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013506:	bf00      	nop
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b084      	sub	sp, #16
 8013512:	af00      	add	r7, sp, #0
 8013514:	60f8      	str	r0, [r7, #12]
 8013516:	60b9      	str	r1, [r7, #8]
 8013518:	607a      	str	r2, [r7, #4]
 801351a:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	68b9      	ldr	r1, [r7, #8]
 8013524:	f000 fc41 	bl	8013daa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013528:	4603      	mov	r3, r0
}
 801352a:	4618      	mov	r0, r3
 801352c:	3710      	adds	r7, #16
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}

08013532 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013532:	8880      	ldrh	r0, [r0, #4]
 8013534:	4770      	bx	lr

08013536 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013536:	b570      	push	{r4, r5, r6, lr}
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	4605      	mov	r5, r0
 801353c:	460c      	mov	r4, r1
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	2100      	movs	r1, #0
 8013542:	4798      	blx	r3
 8013544:	682b      	ldr	r3, [r5, #0]
 8013546:	4606      	mov	r6, r0
 8013548:	6a1b      	ldr	r3, [r3, #32]
 801354a:	4628      	mov	r0, r5
 801354c:	4798      	blx	r3
 801354e:	1ba4      	subs	r4, r4, r6
 8013550:	b2a4      	uxth	r4, r4
 8013552:	fbb4 f0f0 	udiv	r0, r4, r0
 8013556:	bd70      	pop	{r4, r5, r6, pc}

08013558 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013558:	2300      	movs	r3, #0
 801355a:	8083      	strh	r3, [r0, #4]
 801355c:	4770      	bx	lr

0801355e <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801355e:	b510      	push	{r4, lr}
 8013560:	4604      	mov	r4, r0
 8013562:	6803      	ldr	r3, [r0, #0]
 8013564:	8881      	ldrh	r1, [r0, #4]
 8013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013568:	4798      	blx	r3
 801356a:	88a3      	ldrh	r3, [r4, #4]
 801356c:	3301      	adds	r3, #1
 801356e:	80a3      	strh	r3, [r4, #4]
 8013570:	bd10      	pop	{r4, pc}

08013572 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013572:	6803      	ldr	r3, [r0, #0]
 8013574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013576:	4718      	bx	r3

08013578 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013578:	4770      	bx	lr
	...

0801357c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801357c:	4a02      	ldr	r2, [pc, #8]	; (8013588 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801357e:	6002      	str	r2, [r0, #0]
 8013580:	2200      	movs	r2, #0
 8013582:	8082      	strh	r2, [r0, #4]
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	08028d44 	.word	0x08028d44

0801358c <_ZN8touchgfx9Container13getFirstChildEv>:
 801358c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801358e:	4770      	bx	lr

08013590 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013590:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013592:	2000      	movs	r0, #0
 8013594:	b12b      	cbz	r3, 80135a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013596:	b920      	cbnz	r0, 80135a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013598:	1a5a      	subs	r2, r3, r1
 801359a:	4250      	negs	r0, r2
 801359c:	4150      	adcs	r0, r2
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	e7f8      	b.n	8013594 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80135a2:	4770      	bx	lr

080135a4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80135a4:	2300      	movs	r3, #0
 80135a6:	6148      	str	r0, [r1, #20]
 80135a8:	618b      	str	r3, [r1, #24]
 80135aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80135ac:	b913      	cbnz	r3, 80135b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80135ae:	6281      	str	r1, [r0, #40]	; 0x28
 80135b0:	4770      	bx	lr
 80135b2:	4613      	mov	r3, r2
 80135b4:	699a      	ldr	r2, [r3, #24]
 80135b6:	2a00      	cmp	r2, #0
 80135b8:	d1fb      	bne.n	80135b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80135ba:	6199      	str	r1, [r3, #24]
 80135bc:	4770      	bx	lr

080135be <_ZN8touchgfx9Container9removeAllEv>:
 80135be:	2200      	movs	r2, #0
 80135c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80135c2:	b123      	cbz	r3, 80135ce <_ZN8touchgfx9Container9removeAllEv+0x10>
 80135c4:	6999      	ldr	r1, [r3, #24]
 80135c6:	6281      	str	r1, [r0, #40]	; 0x28
 80135c8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80135cc:	e7f8      	b.n	80135c0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80135ce:	4770      	bx	lr

080135d0 <_ZN8touchgfx9Container6unlinkEv>:
 80135d0:	2300      	movs	r3, #0
 80135d2:	6283      	str	r3, [r0, #40]	; 0x28
 80135d4:	4770      	bx	lr

080135d6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80135d6:	2200      	movs	r2, #0
 80135d8:	8002      	strh	r2, [r0, #0]
 80135da:	8042      	strh	r2, [r0, #2]
 80135dc:	8082      	strh	r2, [r0, #4]
 80135de:	80c2      	strh	r2, [r0, #6]
 80135e0:	4770      	bx	lr

080135e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80135e2:	b570      	push	{r4, r5, r6, lr}
 80135e4:	460d      	mov	r5, r1
 80135e6:	4616      	mov	r6, r2
 80135e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80135ea:	b13c      	cbz	r4, 80135fc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80135ec:	6823      	ldr	r3, [r4, #0]
 80135ee:	4620      	mov	r0, r4
 80135f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135f2:	4632      	mov	r2, r6
 80135f4:	4629      	mov	r1, r5
 80135f6:	4798      	blx	r3
 80135f8:	69a4      	ldr	r4, [r4, #24]
 80135fa:	e7f6      	b.n	80135ea <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80135fc:	bd70      	pop	{r4, r5, r6, pc}

080135fe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80135fe:	b538      	push	{r3, r4, r5, lr}
 8013600:	460d      	mov	r5, r1
 8013602:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013604:	b134      	cbz	r4, 8013614 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013606:	682b      	ldr	r3, [r5, #0]
 8013608:	4621      	mov	r1, r4
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	4628      	mov	r0, r5
 801360e:	4798      	blx	r3
 8013610:	69a4      	ldr	r4, [r4, #24]
 8013612:	e7f7      	b.n	8013604 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013614:	bd38      	pop	{r3, r4, r5, pc}

08013616 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8013616:	b510      	push	{r4, lr}
 8013618:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801361a:	b12c      	cbz	r4, 8013628 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 801361c:	6823      	ldr	r3, [r4, #0]
 801361e:	4620      	mov	r0, r4
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	4798      	blx	r3
 8013624:	69a4      	ldr	r4, [r4, #24]
 8013626:	e7f8      	b.n	801361a <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013628:	bd10      	pop	{r4, pc}

0801362a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801362a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801362c:	b19b      	cbz	r3, 8013656 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801362e:	428b      	cmp	r3, r1
 8013630:	d109      	bne.n	8013646 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013632:	2100      	movs	r1, #0
 8013634:	699a      	ldr	r2, [r3, #24]
 8013636:	6159      	str	r1, [r3, #20]
 8013638:	6282      	str	r2, [r0, #40]	; 0x28
 801363a:	b902      	cbnz	r2, 801363e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801363c:	4770      	bx	lr
 801363e:	6199      	str	r1, [r3, #24]
 8013640:	4770      	bx	lr
 8013642:	4613      	mov	r3, r2
 8013644:	b13a      	cbz	r2, 8013656 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013646:	699a      	ldr	r2, [r3, #24]
 8013648:	428a      	cmp	r2, r1
 801364a:	d1fa      	bne.n	8013642 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801364c:	698a      	ldr	r2, [r1, #24]
 801364e:	619a      	str	r2, [r3, #24]
 8013650:	2300      	movs	r3, #0
 8013652:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013656:	4770      	bx	lr

08013658 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013658:	b410      	push	{r4}
 801365a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801365c:	4604      	mov	r4, r0
 801365e:	b92b      	cbnz	r3, 801366c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013660:	6803      	ldr	r3, [r0, #0]
 8013662:	4611      	mov	r1, r2
 8013664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013666:	f85d 4b04 	ldr.w	r4, [sp], #4
 801366a:	4718      	bx	r3
 801366c:	b941      	cbnz	r1, 8013680 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801366e:	6193      	str	r3, [r2, #24]
 8013670:	6282      	str	r2, [r0, #40]	; 0x28
 8013672:	6154      	str	r4, [r2, #20]
 8013674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	4603      	mov	r3, r0
 801367c:	2800      	cmp	r0, #0
 801367e:	d0f9      	beq.n	8013674 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013680:	4299      	cmp	r1, r3
 8013682:	6998      	ldr	r0, [r3, #24]
 8013684:	d1f9      	bne.n	801367a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013686:	6190      	str	r0, [r2, #24]
 8013688:	618a      	str	r2, [r1, #24]
 801368a:	e7f2      	b.n	8013672 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801368c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013690:	461f      	mov	r7, r3
 8013692:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013696:	460d      	mov	r5, r1
 8013698:	4616      	mov	r6, r2
 801369a:	b103      	cbz	r3, 801369e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801369c:	6038      	str	r0, [r7, #0]
 801369e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80136a0:	b314      	cbz	r4, 80136e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80136a2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80136a6:	b1eb      	cbz	r3, 80136e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80136a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80136ac:	428d      	cmp	r5, r1
 80136ae:	db19      	blt.n	80136e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80136b0:	8923      	ldrh	r3, [r4, #8]
 80136b2:	b289      	uxth	r1, r1
 80136b4:	440b      	add	r3, r1
 80136b6:	b21b      	sxth	r3, r3
 80136b8:	429d      	cmp	r5, r3
 80136ba:	da13      	bge.n	80136e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80136bc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80136c0:	4296      	cmp	r6, r2
 80136c2:	db0f      	blt.n	80136e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80136c4:	8963      	ldrh	r3, [r4, #10]
 80136c6:	b292      	uxth	r2, r2
 80136c8:	4413      	add	r3, r2
 80136ca:	b21b      	sxth	r3, r3
 80136cc:	429e      	cmp	r6, r3
 80136ce:	da09      	bge.n	80136e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	1ab2      	subs	r2, r6, r2
 80136d4:	1a69      	subs	r1, r5, r1
 80136d6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80136da:	b212      	sxth	r2, r2
 80136dc:	463b      	mov	r3, r7
 80136de:	b209      	sxth	r1, r1
 80136e0:	4620      	mov	r0, r4
 80136e2:	47c0      	blx	r8
 80136e4:	69a4      	ldr	r4, [r4, #24]
 80136e6:	e7db      	b.n	80136a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80136e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	4c6c      	ldr	r4, [pc, #432]	; (80138a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80136f2:	b0a1      	sub	sp, #132	; 0x84
 80136f4:	6824      	ldr	r4, [r4, #0]
 80136f6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80136f8:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80136fc:	2400      	movs	r4, #0
 80136fe:	802c      	strh	r4, [r5, #0]
 8013700:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013702:	4606      	mov	r6, r0
 8013704:	802c      	strh	r4, [r5, #0]
 8013706:	601c      	str	r4, [r3, #0]
 8013708:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801370c:	9303      	str	r3, [sp, #12]
 801370e:	f7ff ffbd 	bl	801368c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013712:	f1b9 0f03 	cmp.w	r9, #3
 8013716:	f340 80bf 	ble.w	8013898 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801371a:	4631      	mov	r1, r6
 801371c:	a80c      	add	r0, sp, #48	; 0x30
 801371e:	f005 f83d 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013722:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013726:	9306      	str	r3, [sp, #24]
 8013728:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801372c:	9307      	str	r3, [sp, #28]
 801372e:	9b03      	ldr	r3, [sp, #12]
 8013730:	f8d3 a000 	ldr.w	sl, [r3]
 8013734:	f1ba 0f00 	cmp.w	sl, #0
 8013738:	f000 80b1 	beq.w	801389e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 801373c:	4651      	mov	r1, sl
 801373e:	a810      	add	r0, sp, #64	; 0x40
 8013740:	f005 f82c 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013744:	2002      	movs	r0, #2
 8013746:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801374a:	9b01      	ldr	r3, [sp, #4]
 801374c:	fb91 f1f0 	sdiv	r1, r1, r0
 8013750:	9a06      	ldr	r2, [sp, #24]
 8013752:	189d      	adds	r5, r3, r2
 8013754:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013758:	9a07      	ldr	r2, [sp, #28]
 801375a:	4419      	add	r1, r3
 801375c:	9b02      	ldr	r3, [sp, #8]
 801375e:	1a6d      	subs	r5, r5, r1
 8013760:	4413      	add	r3, r2
 8013762:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013766:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801376a:	fb92 f2f0 	sdiv	r2, r2, r0
 801376e:	440a      	add	r2, r1
 8013770:	1a9b      	subs	r3, r3, r2
 8013772:	435b      	muls	r3, r3
 8013774:	fb05 3505 	mla	r5, r5, r5, r3
 8013778:	4f4b      	ldr	r7, [pc, #300]	; (80138a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801377a:	ac10      	add	r4, sp, #64	; 0x40
 801377c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801377e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013780:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013788:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801378c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013790:	2303      	movs	r3, #3
 8013792:	f1b9 0f0c 	cmp.w	r9, #12
 8013796:	bfda      	itte	le
 8013798:	f109 32ff 	addle.w	r2, r9, #4294967295
 801379c:	fb92 f8f3 	sdivle	r8, r2, r3
 80137a0:	4698      	movgt	r8, r3
 80137a2:	2400      	movs	r4, #0
 80137a4:	f8cd 9000 	str.w	r9, [sp]
 80137a8:	1c63      	adds	r3, r4, #1
 80137aa:	9308      	str	r3, [sp, #32]
 80137ac:	9b00      	ldr	r3, [sp, #0]
 80137ae:	f04f 0b00 	mov.w	fp, #0
 80137b2:	fb93 f3f8 	sdiv	r3, r3, r8
 80137b6:	f004 0401 	and.w	r4, r4, #1
 80137ba:	aa10      	add	r2, sp, #64	; 0x40
 80137bc:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	3404      	adds	r4, #4
 80137c4:	9304      	str	r3, [sp, #16]
 80137c6:	9a04      	ldr	r2, [sp, #16]
 80137c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80137cc:	fb13 f302 	smulbb	r3, r3, r2
 80137d0:	9a01      	ldr	r2, [sp, #4]
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	1899      	adds	r1, r3, r2
 80137d6:	9305      	str	r3, [sp, #20]
 80137d8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80137dc:	b209      	sxth	r1, r1
 80137de:	4299      	cmp	r1, r3
 80137e0:	db4d      	blt.n	801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80137e2:	8932      	ldrh	r2, [r6, #8]
 80137e4:	4413      	add	r3, r2
 80137e6:	b21b      	sxth	r3, r3
 80137e8:	4299      	cmp	r1, r3
 80137ea:	da48      	bge.n	801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80137ec:	9b04      	ldr	r3, [sp, #16]
 80137ee:	6827      	ldr	r7, [r4, #0]
 80137f0:	fb17 f703 	smulbb	r7, r7, r3
 80137f4:	9b02      	ldr	r3, [sp, #8]
 80137f6:	b2bf      	uxth	r7, r7
 80137f8:	18fa      	adds	r2, r7, r3
 80137fa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80137fe:	b212      	sxth	r2, r2
 8013800:	429a      	cmp	r2, r3
 8013802:	db3c      	blt.n	801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013804:	8970      	ldrh	r0, [r6, #10]
 8013806:	4403      	add	r3, r0
 8013808:	b21b      	sxth	r3, r3
 801380a:	429a      	cmp	r2, r3
 801380c:	da37      	bge.n	801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801380e:	2300      	movs	r3, #0
 8013810:	4630      	mov	r0, r6
 8013812:	930b      	str	r3, [sp, #44]	; 0x2c
 8013814:	ab0b      	add	r3, sp, #44	; 0x2c
 8013816:	f7ff ff39 	bl	801368c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801381a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801381c:	b37a      	cbz	r2, 801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801381e:	4552      	cmp	r2, sl
 8013820:	d02d      	beq.n	801387e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013822:	4611      	mov	r1, r2
 8013824:	a80e      	add	r0, sp, #56	; 0x38
 8013826:	9209      	str	r2, [sp, #36]	; 0x24
 8013828:	f004 ffb8 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801382c:	f04f 0e02 	mov.w	lr, #2
 8013830:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013834:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013838:	fb91 f1fe 	sdiv	r1, r1, lr
 801383c:	fb9c fcfe 	sdiv	ip, ip, lr
 8013840:	9a06      	ldr	r2, [sp, #24]
 8013842:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	4401      	add	r1, r0
 801384a:	4413      	add	r3, r2
 801384c:	1a58      	subs	r0, r3, r1
 801384e:	9a07      	ldr	r2, [sp, #28]
 8013850:	9b02      	ldr	r3, [sp, #8]
 8013852:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013856:	4413      	add	r3, r2
 8013858:	448c      	add	ip, r1
 801385a:	eba3 030c 	sub.w	r3, r3, ip
 801385e:	435b      	muls	r3, r3
 8013860:	fb00 3300 	mla	r3, r0, r0, r3
 8013864:	42ab      	cmp	r3, r5
 8013866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013868:	d208      	bcs.n	801387c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 801386a:	461d      	mov	r5, r3
 801386c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801386e:	9803      	ldr	r0, [sp, #12]
 8013870:	6001      	str	r1, [r0, #0]
 8013872:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013874:	9805      	ldr	r0, [sp, #20]
 8013876:	8008      	strh	r0, [r1, #0]
 8013878:	992b      	ldr	r1, [sp, #172]	; 0xac
 801387a:	800f      	strh	r7, [r1, #0]
 801387c:	4692      	mov	sl, r2
 801387e:	f10b 0b01 	add.w	fp, fp, #1
 8013882:	f1bb 0f04 	cmp.w	fp, #4
 8013886:	f104 0408 	add.w	r4, r4, #8
 801388a:	d19c      	bne.n	80137c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 801388c:	9b00      	ldr	r3, [sp, #0]
 801388e:	9c08      	ldr	r4, [sp, #32]
 8013890:	444b      	add	r3, r9
 8013892:	4544      	cmp	r4, r8
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	d187      	bne.n	80137a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013898:	b021      	add	sp, #132	; 0x84
 801389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801389e:	f04f 35ff 	mov.w	r5, #4294967295
 80138a2:	e769      	b.n	8013778 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80138a4:	2004f65c 	.word	0x2004f65c
 80138a8:	0802827c 	.word	0x0802827c

080138ac <_ZN8touchgfx4RectaNERKS0_>:
 80138ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138b0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80138b4:	888c      	ldrh	r4, [r1, #4]
 80138b6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80138ba:	443c      	add	r4, r7
 80138bc:	b2a4      	uxth	r4, r4
 80138be:	fa0f f884 	sxth.w	r8, r4
 80138c2:	45c1      	cmp	r9, r8
 80138c4:	da2f      	bge.n	8013926 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80138c6:	8882      	ldrh	r2, [r0, #4]
 80138c8:	444a      	add	r2, r9
 80138ca:	b292      	uxth	r2, r2
 80138cc:	fa0f fe82 	sxth.w	lr, r2
 80138d0:	4577      	cmp	r7, lr
 80138d2:	da28      	bge.n	8013926 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80138d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80138d8:	88cb      	ldrh	r3, [r1, #6]
 80138da:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80138de:	442b      	add	r3, r5
 80138e0:	b21b      	sxth	r3, r3
 80138e2:	429e      	cmp	r6, r3
 80138e4:	da1f      	bge.n	8013926 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80138e6:	88c3      	ldrh	r3, [r0, #6]
 80138e8:	4433      	add	r3, r6
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	fa0f fc83 	sxth.w	ip, r3
 80138f0:	4565      	cmp	r5, ip
 80138f2:	da18      	bge.n	8013926 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80138f4:	454f      	cmp	r7, r9
 80138f6:	bfb8      	it	lt
 80138f8:	464f      	movlt	r7, r9
 80138fa:	42b5      	cmp	r5, r6
 80138fc:	bfb8      	it	lt
 80138fe:	4635      	movlt	r5, r6
 8013900:	45f0      	cmp	r8, lr
 8013902:	bfd8      	it	le
 8013904:	4622      	movle	r2, r4
 8013906:	1bd2      	subs	r2, r2, r7
 8013908:	8082      	strh	r2, [r0, #4]
 801390a:	884a      	ldrh	r2, [r1, #2]
 801390c:	88c9      	ldrh	r1, [r1, #6]
 801390e:	8007      	strh	r7, [r0, #0]
 8013910:	440a      	add	r2, r1
 8013912:	b292      	uxth	r2, r2
 8013914:	b211      	sxth	r1, r2
 8013916:	458c      	cmp	ip, r1
 8013918:	bfa8      	it	ge
 801391a:	4613      	movge	r3, r2
 801391c:	1b5b      	subs	r3, r3, r5
 801391e:	80c3      	strh	r3, [r0, #6]
 8013920:	8045      	strh	r5, [r0, #2]
 8013922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013926:	2300      	movs	r3, #0
 8013928:	8003      	strh	r3, [r0, #0]
 801392a:	8043      	strh	r3, [r0, #2]
 801392c:	8083      	strh	r3, [r0, #4]
 801392e:	80c3      	strh	r3, [r0, #6]
 8013930:	e7f7      	b.n	8013922 <_ZN8touchgfx4RectaNERKS0_+0x76>

08013932 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013932:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	dd06      	ble.n	8013948 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801393a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801393e:	2800      	cmp	r0, #0
 8013940:	bfcc      	ite	gt
 8013942:	2000      	movgt	r0, #0
 8013944:	2001      	movle	r0, #1
 8013946:	4770      	bx	lr
 8013948:	2001      	movs	r0, #1
 801394a:	4770      	bx	lr

0801394c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801394c:	2300      	movs	r3, #0
 801394e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013952:	4604      	mov	r4, r0
 8013954:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013956:	8003      	strh	r3, [r0, #0]
 8013958:	8043      	strh	r3, [r0, #2]
 801395a:	8083      	strh	r3, [r0, #4]
 801395c:	80c3      	strh	r3, [r0, #6]
 801395e:	2d00      	cmp	r5, #0
 8013960:	d040      	beq.n	80139e4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013962:	1d28      	adds	r0, r5, #4
 8013964:	f7ff ffe5 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013968:	b988      	cbnz	r0, 801398e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff ffe1 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013970:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013974:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013978:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801397c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013980:	b138      	cbz	r0, 8013992 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013982:	8022      	strh	r2, [r4, #0]
 8013984:	8063      	strh	r3, [r4, #2]
 8013986:	f8a4 e004 	strh.w	lr, [r4, #4]
 801398a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801398e:	69ad      	ldr	r5, [r5, #24]
 8013990:	e7e5      	b.n	801395e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013992:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013996:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801399a:	4290      	cmp	r0, r2
 801399c:	4607      	mov	r7, r0
 801399e:	bfa8      	it	ge
 80139a0:	4617      	movge	r7, r2
 80139a2:	4299      	cmp	r1, r3
 80139a4:	460e      	mov	r6, r1
 80139a6:	bfa8      	it	ge
 80139a8:	461e      	movge	r6, r3
 80139aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80139ae:	4472      	add	r2, lr
 80139b0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80139b4:	4440      	add	r0, r8
 80139b6:	4471      	add	r1, lr
 80139b8:	4463      	add	r3, ip
 80139ba:	b200      	sxth	r0, r0
 80139bc:	b212      	sxth	r2, r2
 80139be:	b209      	sxth	r1, r1
 80139c0:	b21b      	sxth	r3, r3
 80139c2:	4290      	cmp	r0, r2
 80139c4:	bfac      	ite	ge
 80139c6:	ebc7 0200 	rsbge	r2, r7, r0
 80139ca:	ebc7 0202 	rsblt	r2, r7, r2
 80139ce:	4299      	cmp	r1, r3
 80139d0:	bfac      	ite	ge
 80139d2:	ebc6 0301 	rsbge	r3, r6, r1
 80139d6:	ebc6 0303 	rsblt	r3, r6, r3
 80139da:	8027      	strh	r7, [r4, #0]
 80139dc:	8066      	strh	r6, [r4, #2]
 80139de:	80a2      	strh	r2, [r4, #4]
 80139e0:	80e3      	strh	r3, [r4, #6]
 80139e2:	e7d4      	b.n	801398e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80139e4:	4620      	mov	r0, r4
 80139e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080139ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80139ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80139ee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80139f2:	b383      	cbz	r3, 8013a56 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80139f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80139f6:	b374      	cbz	r4, 8013a56 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80139f8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80139fc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8013a00:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013a04:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013a08:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013a0c:	b303      	cbz	r3, 8013a50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013a0e:	4668      	mov	r0, sp
 8013a10:	1d21      	adds	r1, r4, #4
 8013a12:	f8ad 5000 	strh.w	r5, [sp]
 8013a16:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013a1a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013a1e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013a22:	f7ff ff43 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8013a26:	4668      	mov	r0, sp
 8013a28:	f7ff ff83 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a2c:	b980      	cbnz	r0, 8013a50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013a2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013a32:	88a2      	ldrh	r2, [r4, #4]
 8013a34:	4669      	mov	r1, sp
 8013a36:	1a9b      	subs	r3, r3, r2
 8013a38:	f8ad 3000 	strh.w	r3, [sp]
 8013a3c:	88e2      	ldrh	r2, [r4, #6]
 8013a3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013a42:	4620      	mov	r0, r4
 8013a44:	1a9b      	subs	r3, r3, r2
 8013a46:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	4798      	blx	r3
 8013a50:	69a4      	ldr	r4, [r4, #24]
 8013a52:	2c00      	cmp	r4, #0
 8013a54:	d1d8      	bne.n	8013a08 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013a56:	b002      	add	sp, #8
 8013a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a5c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a5e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013a62:	460d      	mov	r5, r1
 8013a64:	4616      	mov	r6, r2
 8013a66:	b323      	cbz	r3, 8013ab2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013a68:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013a6a:	b314      	cbz	r4, 8013ab2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013a6c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013a70:	b1eb      	cbz	r3, 8013aae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013a72:	466b      	mov	r3, sp
 8013a74:	6828      	ldr	r0, [r5, #0]
 8013a76:	6869      	ldr	r1, [r5, #4]
 8013a78:	c303      	stmia	r3!, {r0, r1}
 8013a7a:	4668      	mov	r0, sp
 8013a7c:	1d21      	adds	r1, r4, #4
 8013a7e:	f7ff ff15 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8013a82:	4668      	mov	r0, sp
 8013a84:	f7ff ff55 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a88:	b988      	cbnz	r0, 8013aae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013a8a:	f8bd 3000 	ldrh.w	r3, [sp]
 8013a8e:	88a2      	ldrh	r2, [r4, #4]
 8013a90:	4669      	mov	r1, sp
 8013a92:	1a9b      	subs	r3, r3, r2
 8013a94:	f8ad 3000 	strh.w	r3, [sp]
 8013a98:	88e2      	ldrh	r2, [r4, #6]
 8013a9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	1a9b      	subs	r3, r3, r2
 8013aa2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	4632      	mov	r2, r6
 8013aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013aac:	4798      	blx	r3
 8013aae:	69a4      	ldr	r4, [r4, #24]
 8013ab0:	e7db      	b.n	8013a6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013ab2:	b002      	add	sp, #8
 8013ab4:	bd70      	pop	{r4, r5, r6, pc}

08013ab6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013ab6:	b513      	push	{r0, r1, r4, lr}
 8013ab8:	6803      	ldr	r3, [r0, #0]
 8013aba:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013abe:	2300      	movs	r3, #0
 8013ac0:	e9cd 3300 	strd	r3, r3, [sp]
 8013ac4:	466b      	mov	r3, sp
 8013ac6:	47a0      	blx	r4
 8013ac8:	b002      	add	sp, #8
 8013aca:	bd10      	pop	{r4, pc}

08013acc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013acc:	2301      	movs	r3, #1
 8013ace:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013ad2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013ad6:	4770      	bx	lr

08013ad8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013ad8:	2301      	movs	r3, #1
 8013ada:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013ade:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013ae2:	4770      	bx	lr

08013ae4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	6843      	ldr	r3, [r0, #4]
 8013ae8:	725a      	strb	r2, [r3, #9]
 8013aea:	6840      	ldr	r0, [r0, #4]
 8013aec:	6803      	ldr	r3, [r0, #0]
 8013aee:	691b      	ldr	r3, [r3, #16]
 8013af0:	4718      	bx	r3

08013af2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013af2:	6840      	ldr	r0, [r0, #4]
 8013af4:	6803      	ldr	r3, [r0, #0]
 8013af6:	689b      	ldr	r3, [r3, #8]
 8013af8:	4718      	bx	r3

08013afa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8013afa:	b530      	push	{r4, r5, lr}
 8013afc:	b08b      	sub	sp, #44	; 0x2c
 8013afe:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8013b02:	6804      	ldr	r4, [r0, #0]
 8013b04:	9509      	str	r5, [sp, #36]	; 0x24
 8013b06:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8013b0a:	9508      	str	r5, [sp, #32]
 8013b0c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8013b10:	9507      	str	r5, [sp, #28]
 8013b12:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8013b16:	9506      	str	r5, [sp, #24]
 8013b18:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013b1c:	9505      	str	r5, [sp, #20]
 8013b1e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8013b22:	9504      	str	r5, [sp, #16]
 8013b24:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8013b28:	9503      	str	r5, [sp, #12]
 8013b2a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013b2e:	9502      	str	r5, [sp, #8]
 8013b30:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013b34:	e9cd 3500 	strd	r3, r5, [sp]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	47a0      	blx	r4
 8013b40:	b00b      	add	sp, #44	; 0x2c
 8013b42:	bd30      	pop	{r4, r5, pc}

08013b44 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013b44:	4b04      	ldr	r3, [pc, #16]	; (8013b58 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	b123      	cbz	r3, 8013b54 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013b4a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013b4e:	f080 0001 	eor.w	r0, r0, #1
 8013b52:	4770      	bx	lr
 8013b54:	2001      	movs	r0, #1
 8013b56:	4770      	bx	lr
 8013b58:	2004f65a 	.word	0x2004f65a

08013b5c <_ZN8touchgfx3HAL8endFrameEv>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6840      	ldr	r0, [r0, #4]
 8013b62:	6803      	ldr	r3, [r0, #0]
 8013b64:	689b      	ldr	r3, [r3, #8]
 8013b66:	4798      	blx	r3
 8013b68:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013b6c:	b113      	cbz	r3, 8013b74 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013b74:	bd10      	pop	{r4, pc}

08013b76 <_ZN8touchgfx3HAL10initializeEv>:
 8013b76:	b510      	push	{r4, lr}
 8013b78:	4604      	mov	r4, r0
 8013b7a:	f7fe f927 	bl	8011dcc <_ZN8touchgfx10OSWrappers10initializeEv>
 8013b7e:	6860      	ldr	r0, [r4, #4]
 8013b80:	6803      	ldr	r3, [r0, #0]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	4798      	blx	r3
 8013b86:	68e0      	ldr	r0, [r4, #12]
 8013b88:	6803      	ldr	r3, [r0, #0]
 8013b8a:	689b      	ldr	r3, [r3, #8]
 8013b8c:	4798      	blx	r3
 8013b8e:	6823      	ldr	r3, [r4, #0]
 8013b90:	4620      	mov	r0, r4
 8013b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b98:	4718      	bx	r3

08013b9a <_ZN8touchgfx3HAL9taskEntryEv>:
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	b508      	push	{r3, lr}
 8013b9e:	6803      	ldr	r3, [r0, #0]
 8013ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ba4:	4798      	blx	r3
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013baa:	4620      	mov	r0, r4
 8013bac:	4798      	blx	r3
 8013bae:	f7fe fa37 	bl	8012020 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bb6:	e7f8      	b.n	8013baa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013bb8 <_ZN8touchgfx3HAL4tickEv>:
 8013bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013bba:	6803      	ldr	r3, [r0, #0]
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013bc2:	4798      	blx	r3
 8013bc4:	4d59      	ldr	r5, [pc, #356]	; (8013d2c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	f000 8095 	beq.w	8013cf6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013bcc:	2600      	movs	r6, #0
 8013bce:	2001      	movs	r0, #1
 8013bd0:	f7fd fd94 	bl	80116fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013bd4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8013bd8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013bdc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013be0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013be4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013be8:	b133      	cbz	r3, 8013bf8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	4620      	mov	r0, r4
 8013bee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013bf2:	4798      	blx	r3
 8013bf4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8013bf8:	2601      	movs	r6, #1
 8013bfa:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013bfe:	6862      	ldr	r2, [r4, #4]
 8013c00:	f083 0301 	eor.w	r3, r3, #1
 8013c04:	7253      	strb	r3, [r2, #9]
 8013c06:	702e      	strb	r6, [r5, #0]
 8013c08:	f003 fd96 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 8013c0c:	6803      	ldr	r3, [r0, #0]
 8013c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c10:	4798      	blx	r3
 8013c12:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013c16:	b90b      	cbnz	r3, 8013c1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8013c18:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013c1c:	f003 fd8c 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 8013c20:	6803      	ldr	r3, [r0, #0]
 8013c22:	695b      	ldr	r3, [r3, #20]
 8013c24:	4798      	blx	r3
 8013c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c28:	6803      	ldr	r3, [r0, #0]
 8013c2a:	691b      	ldr	r3, [r3, #16]
 8013c2c:	4798      	blx	r3
 8013c2e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013c32:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8013c36:	3b01      	subs	r3, #1
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013c3e:	b10a      	cbz	r2, 8013c44 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1eb      	bne.n	8013c1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8013c44:	4a3a      	ldr	r2, [pc, #232]	; (8013d30 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013c46:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013c4a:	7813      	ldrb	r3, [r2, #0]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	b25b      	sxtb	r3, r3
 8013c50:	4299      	cmp	r1, r3
 8013c52:	7013      	strb	r3, [r2, #0]
 8013c54:	dc10      	bgt.n	8013c78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013c56:	2300      	movs	r3, #0
 8013c58:	68e0      	ldr	r0, [r4, #12]
 8013c5a:	7013      	strb	r3, [r2, #0]
 8013c5c:	6803      	ldr	r3, [r0, #0]
 8013c5e:	aa03      	add	r2, sp, #12
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	a902      	add	r1, sp, #8
 8013c64:	4798      	blx	r3
 8013c66:	6823      	ldr	r3, [r4, #0]
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d050      	beq.n	8013d0e <_ZN8touchgfx3HAL4tickEv+0x156>
 8013c6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013c70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013c74:	4620      	mov	r0, r4
 8013c76:	4798      	blx	r3
 8013c78:	2300      	movs	r3, #0
 8013c7a:	6960      	ldr	r0, [r4, #20]
 8013c7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013c80:	b158      	cbz	r0, 8013c9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013c82:	6803      	ldr	r3, [r0, #0]
 8013c84:	f10d 0107 	add.w	r1, sp, #7
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	4798      	blx	r3
 8013c8c:	b128      	cbz	r0, 8013c9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013c94:	6803      	ldr	r3, [r0, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	4798      	blx	r3
 8013c9a:	f104 001c 	add.w	r0, r4, #28
 8013c9e:	f011 fe8f 	bl	80259c0 <_ZN8touchgfx8Gestures4tickEv>
 8013ca2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8013ca6:	b30b      	cbz	r3, 8013cec <_ZN8touchgfx3HAL4tickEv+0x134>
 8013ca8:	6920      	ldr	r0, [r4, #16]
 8013caa:	6803      	ldr	r3, [r0, #0]
 8013cac:	691b      	ldr	r3, [r3, #16]
 8013cae:	4798      	blx	r3
 8013cb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	b903      	cbnz	r3, 8013cb8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8013cb6:	6720      	str	r0, [r4, #112]	; 0x70
 8013cb8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013cba:	4a1e      	ldr	r2, [pc, #120]	; (8013d34 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013cbc:	1af3      	subs	r3, r6, r3
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d914      	bls.n	8013cec <_ZN8touchgfx3HAL4tickEv+0x134>
 8013cc2:	6920      	ldr	r0, [r4, #16]
 8013cc4:	6803      	ldr	r3, [r0, #0]
 8013cc6:	699b      	ldr	r3, [r3, #24]
 8013cc8:	4798      	blx	r3
 8013cca:	2264      	movs	r2, #100	; 0x64
 8013ccc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013cce:	1af3      	subs	r3, r6, r3
 8013cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	dc1d      	bgt.n	8013d18 <_ZN8touchgfx3HAL4tickEv+0x160>
 8013cdc:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013ce0:	6920      	ldr	r0, [r4, #16]
 8013ce2:	2100      	movs	r1, #0
 8013ce4:	6803      	ldr	r3, [r0, #0]
 8013ce6:	69db      	ldr	r3, [r3, #28]
 8013ce8:	4798      	blx	r3
 8013cea:	6726      	str	r6, [r4, #112]	; 0x70
 8013cec:	f003 fd24 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 8013cf0:	6803      	ldr	r3, [r0, #0]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf4:	4798      	blx	r3
 8013cf6:	6823      	ldr	r3, [r4, #0]
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013cfe:	4798      	blx	r3
 8013d00:	2001      	movs	r0, #1
 8013d02:	f7fd fd17 	bl	8011734 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013d06:	2300      	movs	r3, #0
 8013d08:	702b      	strb	r3, [r5, #0]
 8013d0a:	b004      	add	sp, #16
 8013d0c:	bd70      	pop	{r4, r5, r6, pc}
 8013d0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013d12:	4620      	mov	r0, r4
 8013d14:	4798      	blx	r3
 8013d16:	e7af      	b.n	8013c78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013d18:	2863      	cmp	r0, #99	; 0x63
 8013d1a:	bfcb      	itete	gt
 8013d1c:	2300      	movgt	r3, #0
 8013d1e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013d22:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8013d26:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8013d2a:	e7d9      	b.n	8013ce0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013d2c:	2004f660 	.word	0x2004f660
 8013d30:	2004f661 	.word	0x2004f661
 8013d34:	05f5e100 	.word	0x05f5e100

08013d38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013d38:	f7fe b8e0 	b.w	8011efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013d3c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013d3c:	6581      	str	r1, [r0, #88]	; 0x58
 8013d3e:	301c      	adds	r0, #28
 8013d40:	f011 be3c 	b.w	80259bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013d44 <_ZN8touchgfx3HAL5touchEll>:
 8013d44:	b530      	push	{r4, r5, lr}
 8013d46:	4604      	mov	r4, r0
 8013d48:	b087      	sub	sp, #28
 8013d4a:	a804      	add	r0, sp, #16
 8013d4c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013d50:	f003 fa78 	bl	8017244 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013d54:	9b04      	ldr	r3, [sp, #16]
 8013d56:	a906      	add	r1, sp, #24
 8013d58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013d5c:	9b05      	ldr	r3, [sp, #20]
 8013d5e:	a803      	add	r0, sp, #12
 8013d60:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013d64:	f003 fac0 	bl	80172e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013d68:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013d6c:	f104 001c 	add.w	r0, r4, #28
 8013d70:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013d74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013d78:	b189      	cbz	r1, 8013d9e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013d7a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013d84:	4613      	mov	r3, r2
 8013d86:	462a      	mov	r2, r5
 8013d88:	f011 fe28 	bl	80259dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013d8c:	b128      	cbz	r0, 8013d9a <_ZN8touchgfx3HAL5touchEll+0x56>
 8013d8e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013d92:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013d94:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013d98:	6623      	str	r3, [r4, #96]	; 0x60
 8013d9a:	b007      	add	sp, #28
 8013d9c:	bd30      	pop	{r4, r5, pc}
 8013d9e:	f011 fe5d 	bl	8025a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013da2:	2301      	movs	r3, #1
 8013da4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013da8:	e7f1      	b.n	8013d8e <_ZN8touchgfx3HAL5touchEll+0x4a>

08013daa <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013daa:	b510      	push	{r4, lr}
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d046      	beq.n	8013e3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013db0:	ea81 0002 	eor.w	r0, r1, r2
 8013db4:	07c4      	lsls	r4, r0, #31
 8013db6:	d508      	bpl.n	8013dca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013db8:	440b      	add	r3, r1
 8013dba:	3a01      	subs	r2, #1
 8013dbc:	428b      	cmp	r3, r1
 8013dbe:	d93e      	bls.n	8013e3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013dc0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013dc4:	f801 0b01 	strb.w	r0, [r1], #1
 8013dc8:	e7f8      	b.n	8013dbc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013dca:	07d0      	lsls	r0, r2, #31
 8013dcc:	bf42      	ittt	mi
 8013dce:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013dd2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013dd6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	d911      	bls.n	8013e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013dde:	ea81 0402 	eor.w	r4, r1, r2
 8013de2:	07a4      	lsls	r4, r4, #30
 8013de4:	4610      	mov	r0, r2
 8013de6:	d022      	beq.n	8013e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013de8:	f023 0401 	bic.w	r4, r3, #1
 8013dec:	440c      	add	r4, r1
 8013dee:	428c      	cmp	r4, r1
 8013df0:	4602      	mov	r2, r0
 8013df2:	d904      	bls.n	8013dfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013df4:	8812      	ldrh	r2, [r2, #0]
 8013df6:	3002      	adds	r0, #2
 8013df8:	f821 2b02 	strh.w	r2, [r1], #2
 8013dfc:	e7f7      	b.n	8013dee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013dfe:	f003 0301 	and.w	r3, r3, #1
 8013e02:	f023 0003 	bic.w	r0, r3, #3
 8013e06:	4408      	add	r0, r1
 8013e08:	4288      	cmp	r0, r1
 8013e0a:	4614      	mov	r4, r2
 8013e0c:	d904      	bls.n	8013e18 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013e0e:	6824      	ldr	r4, [r4, #0]
 8013e10:	3204      	adds	r2, #4
 8013e12:	f841 4b04 	str.w	r4, [r1], #4
 8013e16:	e7f7      	b.n	8013e08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	440b      	add	r3, r1
 8013e1e:	3a01      	subs	r2, #1
 8013e20:	428b      	cmp	r3, r1
 8013e22:	d90c      	bls.n	8013e3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013e24:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013e28:	f801 0b01 	strb.w	r0, [r1], #1
 8013e2c:	e7f8      	b.n	8013e20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013e2e:	0790      	lsls	r0, r2, #30
 8013e30:	d0e7      	beq.n	8013e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013e32:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013e36:	3b02      	subs	r3, #2
 8013e38:	f821 0b02 	strh.w	r0, [r1], #2
 8013e3c:	e7e1      	b.n	8013e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013e3e:	2001      	movs	r0, #1
 8013e40:	bd10      	pop	{r4, pc}

08013e42 <_ZN8touchgfx3HAL7noTouchEv>:
 8013e42:	b510      	push	{r4, lr}
 8013e44:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8013e48:	4604      	mov	r4, r0
 8013e4a:	b153      	cbz	r3, 8013e62 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013e4c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8013e50:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8013e54:	2101      	movs	r1, #1
 8013e56:	301c      	adds	r0, #28
 8013e58:	f011 fe00 	bl	8025a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013e62:	bd10      	pop	{r4, pc}

08013e64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e68:	4604      	mov	r4, r0
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	b085      	sub	sp, #20
 8013e6e:	ad04      	add	r5, sp, #16
 8013e70:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013e74:	69a0      	ldr	r0, [r4, #24]
 8013e76:	4699      	mov	r9, r3
 8013e78:	6806      	ldr	r6, [r0, #0]
 8013e7a:	9501      	str	r5, [sp, #4]
 8013e7c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8013e80:	460f      	mov	r7, r1
 8013e82:	9500      	str	r5, [sp, #0]
 8013e84:	6835      	ldr	r5, [r6, #0]
 8013e86:	4690      	mov	r8, r2
 8013e88:	47a8      	blx	r5
 8013e8a:	4d10      	ldr	r5, [pc, #64]	; (8013ecc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013e8c:	4606      	mov	r6, r0
 8013e8e:	f8a5 9000 	strh.w	r9, [r5]
 8013e92:	f7fa f911 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8013e96:	6803      	ldr	r3, [r0, #0]
 8013e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e9a:	4798      	blx	r3
 8013e9c:	b128      	cbz	r0, 8013eaa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013e9e:	2801      	cmp	r0, #1
 8013ea0:	d00b      	beq.n	8013eba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	b005      	add	sp, #20
 8013ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eaa:	882b      	ldrh	r3, [r5, #0]
 8013eac:	fb08 7203 	mla	r2, r8, r3, r7
 8013eb0:	9b03      	ldr	r3, [sp, #12]
 8013eb2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013eb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013eb8:	e7f3      	b.n	8013ea2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013eba:	882a      	ldrh	r2, [r5, #0]
 8013ebc:	9b03      	ldr	r3, [sp, #12]
 8013ebe:	fb08 7202 	mla	r2, r8, r2, r7
 8013ec2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ec6:	1a9a      	subs	r2, r3, r2
 8013ec8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8013eca:	e7ea      	b.n	8013ea2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013ecc:	2004f656 	.word	0x2004f656

08013ed0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ed2:	b08b      	sub	sp, #44	; 0x2c
 8013ed4:	4617      	mov	r7, r2
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	460e      	mov	r6, r1
 8013eda:	461d      	mov	r5, r3
 8013edc:	f7fa f8ec 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8013ee0:	6803      	ldr	r3, [r0, #0]
 8013ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee4:	4798      	blx	r3
 8013ee6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013eea:	9007      	str	r0, [sp, #28]
 8013eec:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013ef0:	4b0d      	ldr	r3, [pc, #52]	; (8013f28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013ef2:	6822      	ldr	r2, [r4, #0]
 8013ef4:	881b      	ldrh	r3, [r3, #0]
 8013ef6:	4631      	mov	r1, r6
 8013ef8:	9306      	str	r3, [sp, #24]
 8013efa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013efe:	4620      	mov	r0, r4
 8013f00:	9305      	str	r3, [sp, #20]
 8013f02:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013f06:	9304      	str	r3, [sp, #16]
 8013f08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013f0c:	9303      	str	r3, [sp, #12]
 8013f0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013f12:	9302      	str	r3, [sp, #8]
 8013f14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013f18:	e9cd 5300 	strd	r5, r3, [sp]
 8013f1c:	463b      	mov	r3, r7
 8013f1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8013f20:	2200      	movs	r2, #0
 8013f22:	47a8      	blx	r5
 8013f24:	b00b      	add	sp, #44	; 0x2c
 8013f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f28:	2004f656 	.word	0x2004f656

08013f2c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f30:	4698      	mov	r8, r3
 8013f32:	6803      	ldr	r3, [r0, #0]
 8013f34:	b08b      	sub	sp, #44	; 0x2c
 8013f36:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8013f38:	4b14      	ldr	r3, [pc, #80]	; (8013f8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013f3a:	4617      	mov	r7, r2
 8013f3c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013f40:	460e      	mov	r6, r1
 8013f42:	4604      	mov	r4, r0
 8013f44:	f7fa f8b8 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8013f48:	6803      	ldr	r3, [r0, #0]
 8013f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f4c:	4798      	blx	r3
 8013f4e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013f52:	2200      	movs	r2, #0
 8013f54:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013f58:	2302      	movs	r3, #2
 8013f5a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013f5e:	2301      	movs	r3, #1
 8013f60:	9305      	str	r3, [sp, #20]
 8013f62:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013f66:	4631      	mov	r1, r6
 8013f68:	9304      	str	r3, [sp, #16]
 8013f6a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013f6e:	4620      	mov	r0, r4
 8013f70:	9303      	str	r3, [sp, #12]
 8013f72:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013f76:	9302      	str	r3, [sp, #8]
 8013f78:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013f7c:	e9cd 8300 	strd	r8, r3, [sp]
 8013f80:	463b      	mov	r3, r7
 8013f82:	47a8      	blx	r5
 8013f84:	b00b      	add	sp, #44	; 0x2c
 8013f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f8a:	bf00      	nop
 8013f8c:	2004f656 	.word	0x2004f656

08013f90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f94:	4698      	mov	r8, r3
 8013f96:	6803      	ldr	r3, [r0, #0]
 8013f98:	b087      	sub	sp, #28
 8013f9a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013f9c:	4b10      	ldr	r3, [pc, #64]	; (8013fe0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013f9e:	460e      	mov	r6, r1
 8013fa0:	f8b3 9000 	ldrh.w	r9, [r3]
 8013fa4:	4617      	mov	r7, r2
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	f7fa f886 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8013fac:	6803      	ldr	r3, [r0, #0]
 8013fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb0:	4798      	blx	r3
 8013fb2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8013fb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8013fba:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013fbe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013fc2:	463a      	mov	r2, r7
 8013fc4:	9302      	str	r3, [sp, #8]
 8013fc6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013fca:	4631      	mov	r1, r6
 8013fcc:	9301      	str	r3, [sp, #4]
 8013fce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	4643      	mov	r3, r8
 8013fd8:	47a8      	blx	r5
 8013fda:	b007      	add	sp, #28
 8013fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe0:	2004f656 	.word	0x2004f656

08013fe4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe8:	4604      	mov	r4, r0
 8013fea:	b08f      	sub	sp, #60	; 0x3c
 8013fec:	4610      	mov	r0, r2
 8013fee:	460d      	mov	r5, r1
 8013ff0:	4691      	mov	r9, r2
 8013ff2:	461e      	mov	r6, r3
 8013ff4:	f005 ff54 	bl	8019ea0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	f000 809d 	beq.w	8014138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013ffe:	6823      	ldr	r3, [r4, #0]
 8014000:	4620      	mov	r0, r4
 8014002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014004:	4798      	blx	r3
 8014006:	6823      	ldr	r3, [r4, #0]
 8014008:	f8df b190 	ldr.w	fp, [pc, #400]	; 801419c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400e:	4620      	mov	r0, r4
 8014010:	4798      	blx	r3
 8014012:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80141a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014016:	f8bb 3000 	ldrh.w	r3, [fp]
 801401a:	4f5d      	ldr	r7, [pc, #372]	; (8014190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801401c:	9301      	str	r3, [sp, #4]
 801401e:	f8ba 3000 	ldrh.w	r3, [sl]
 8014022:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014026:	9302      	str	r3, [sp, #8]
 8014028:	883b      	ldrh	r3, [r7, #0]
 801402a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801402e:	9303      	str	r3, [sp, #12]
 8014030:	4b58      	ldr	r3, [pc, #352]	; (8014194 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014032:	4640      	mov	r0, r8
 8014034:	881a      	ldrh	r2, [r3, #0]
 8014036:	9305      	str	r3, [sp, #20]
 8014038:	9204      	str	r2, [sp, #16]
 801403a:	f005 ffc5 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801403e:	8038      	strh	r0, [r7, #0]
 8014040:	4640      	mov	r0, r8
 8014042:	f005 fff5 	bl	801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014046:	9b05      	ldr	r3, [sp, #20]
 8014048:	b280      	uxth	r0, r0
 801404a:	8018      	strh	r0, [r3, #0]
 801404c:	4b52      	ldr	r3, [pc, #328]	; (8014198 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d174      	bne.n	801413e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014054:	883b      	ldrh	r3, [r7, #0]
 8014056:	f8aa 0000 	strh.w	r0, [sl]
 801405a:	f8ab 3000 	strh.w	r3, [fp]
 801405e:	4648      	mov	r0, r9
 8014060:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014064:	f005 ff1c 	bl	8019ea0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014068:	2200      	movs	r2, #0
 801406a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801406e:	4611      	mov	r1, r2
 8014070:	4628      	mov	r0, r5
 8014072:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014076:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801407a:	f7f9 ff1a 	bl	800deb2 <_ZN8touchgfx8Drawable5setXYEss>
 801407e:	2301      	movs	r3, #1
 8014080:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014084:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014088:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	dd5c      	ble.n	801414a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014090:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014094:	2b00      	cmp	r3, #0
 8014096:	dd58      	ble.n	801414a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014098:	462a      	mov	r2, r5
 801409a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801409e:	ab0a      	add	r3, sp, #40	; 0x28
 80140a0:	6851      	ldr	r1, [r2, #4]
 80140a2:	c303      	stmia	r3!, {r0, r1}
 80140a4:	4631      	mov	r1, r6
 80140a6:	a80a      	add	r0, sp, #40	; 0x28
 80140a8:	f7ff fc00 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 80140ac:	2100      	movs	r1, #0
 80140ae:	4b38      	ldr	r3, [pc, #224]	; (8014190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80140b0:	910c      	str	r1, [sp, #48]	; 0x30
 80140b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80140b6:	4b37      	ldr	r3, [pc, #220]	; (8014194 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80140b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80140bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140c0:	aa0a      	add	r2, sp, #40	; 0x28
 80140c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80140c6:	ab08      	add	r3, sp, #32
 80140c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80140d0:	4618      	mov	r0, r3
 80140d2:	a90c      	add	r1, sp, #48	; 0x30
 80140d4:	f7ff fbea 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 80140d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d13c      	bne.n	8014158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80140de:	2000      	movs	r0, #0
 80140e0:	2600      	movs	r6, #0
 80140e2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80140e6:	696b      	ldr	r3, [r5, #20]
 80140e8:	682a      	ldr	r2, [r5, #0]
 80140ea:	616e      	str	r6, [r5, #20]
 80140ec:	9305      	str	r3, [sp, #20]
 80140ee:	6892      	ldr	r2, [r2, #8]
 80140f0:	a908      	add	r1, sp, #32
 80140f2:	4628      	mov	r0, r5
 80140f4:	4790      	blx	r2
 80140f6:	9b05      	ldr	r3, [sp, #20]
 80140f8:	4652      	mov	r2, sl
 80140fa:	616b      	str	r3, [r5, #20]
 80140fc:	4649      	mov	r1, r9
 80140fe:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014102:	4628      	mov	r0, r5
 8014104:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014108:	f7f9 fed3 	bl	800deb2 <_ZN8touchgfx8Drawable5setXYEss>
 801410c:	9a01      	ldr	r2, [sp, #4]
 801410e:	4b23      	ldr	r3, [pc, #140]	; (801419c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014110:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014114:	801a      	strh	r2, [r3, #0]
 8014116:	9a02      	ldr	r2, [sp, #8]
 8014118:	4b21      	ldr	r3, [pc, #132]	; (80141a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801411a:	4620      	mov	r0, r4
 801411c:	801a      	strh	r2, [r3, #0]
 801411e:	9a03      	ldr	r2, [sp, #12]
 8014120:	4b1b      	ldr	r3, [pc, #108]	; (8014190 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014122:	801a      	strh	r2, [r3, #0]
 8014124:	4b1b      	ldr	r3, [pc, #108]	; (8014194 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014126:	9a04      	ldr	r2, [sp, #16]
 8014128:	801a      	strh	r2, [r3, #0]
 801412a:	6823      	ldr	r3, [r4, #0]
 801412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801412e:	4798      	blx	r3
 8014130:	6823      	ldr	r3, [r4, #0]
 8014132:	4620      	mov	r0, r4
 8014134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014136:	4798      	blx	r3
 8014138:	b00f      	add	sp, #60	; 0x3c
 801413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413e:	883b      	ldrh	r3, [r7, #0]
 8014140:	f8ab 0000 	strh.w	r0, [fp]
 8014144:	f8aa 3000 	strh.w	r3, [sl]
 8014148:	e789      	b.n	801405e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801414a:	462a      	mov	r2, r5
 801414c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014150:	ab0a      	add	r3, sp, #40	; 0x28
 8014152:	6851      	ldr	r1, [r2, #4]
 8014154:	c303      	stmia	r3!, {r0, r1}
 8014156:	e7a9      	b.n	80140ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014158:	a807      	add	r0, sp, #28
 801415a:	f006 f8a5 	bl	801a2a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801415e:	4606      	mov	r6, r0
 8014160:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014162:	6803      	ldr	r3, [r0, #0]
 8014164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014166:	4798      	blx	r3
 8014168:	4286      	cmp	r6, r0
 801416a:	d1b8      	bne.n	80140de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801416c:	f7f9 ffa4 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8014170:	6803      	ldr	r3, [r0, #0]
 8014172:	4606      	mov	r6, r0
 8014174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014176:	a807      	add	r0, sp, #28
 8014178:	9305      	str	r3, [sp, #20]
 801417a:	f006 f895 	bl	801a2a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801417e:	9b05      	ldr	r3, [sp, #20]
 8014180:	4601      	mov	r1, r0
 8014182:	4630      	mov	r0, r6
 8014184:	4798      	blx	r3
 8014186:	f080 0001 	eor.w	r0, r0, #1
 801418a:	b2c0      	uxtb	r0, r0
 801418c:	e7a8      	b.n	80140e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801418e:	bf00      	nop
 8014190:	2004f650 	.word	0x2004f650
 8014194:	2004f652 	.word	0x2004f652
 8014198:	2004f654 	.word	0x2004f654
 801419c:	2004f656 	.word	0x2004f656
 80141a0:	2004f658 	.word	0x2004f658

080141a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80141a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a8:	461d      	mov	r5, r3
 80141aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141ae:	2400      	movs	r4, #0
 80141b0:	b08a      	sub	sp, #40	; 0x28
 80141b2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141b6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80141ba:	4690      	mov	r8, r2
 80141bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80141c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80141c4:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80141c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80141cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80141d0:	4607      	mov	r7, r0
 80141d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80141d6:	9404      	str	r4, [sp, #16]
 80141d8:	f88d 4020 	strb.w	r4, [sp, #32]
 80141dc:	f7fd fc02 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80141e0:	fb06 8505 	mla	r5, r6, r5, r8
 80141e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	9505      	str	r5, [sp, #20]
 80141ec:	f8ad 601e 	strh.w	r6, [sp, #30]
 80141f0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80141f4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80141f8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80141fc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014200:	6803      	ldr	r3, [r0, #0]
 8014202:	a901      	add	r1, sp, #4
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	4798      	blx	r3
 8014208:	b00a      	add	sp, #40	; 0x28
 801420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801420e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801420e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014212:	2400      	movs	r4, #0
 8014214:	461d      	mov	r5, r3
 8014216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801421a:	4691      	mov	r9, r2
 801421c:	b08b      	sub	sp, #44	; 0x2c
 801421e:	4688      	mov	r8, r1
 8014220:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014224:	4607      	mov	r7, r0
 8014226:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801422a:	9404      	str	r4, [sp, #16]
 801422c:	f7fd fbda 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014230:	fb06 9505 	mla	r5, r6, r5, r9
 8014234:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014238:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801423c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014240:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	9505      	str	r5, [sp, #20]
 8014248:	f8ad 301a 	strh.w	r3, [sp, #26]
 801424c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014250:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014254:	f8cd 8010 	str.w	r8, [sp, #16]
 8014258:	f8ad 4020 	strh.w	r4, [sp, #32]
 801425c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014260:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014264:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014268:	6803      	ldr	r3, [r0, #0]
 801426a:	a901      	add	r1, sp, #4
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	4798      	blx	r3
 8014270:	b00b      	add	sp, #44	; 0x2c
 8014272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014278 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801427c:	4698      	mov	r8, r3
 801427e:	2300      	movs	r3, #0
 8014280:	b08a      	sub	sp, #40	; 0x28
 8014282:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8014286:	4606      	mov	r6, r0
 8014288:	2d0b      	cmp	r5, #11
 801428a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801428e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8014292:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8014296:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	d137      	bne.n	801430e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801429e:	2380      	movs	r3, #128	; 0x80
 80142a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80142a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80142a8:	f88d 0020 	strb.w	r0, [sp, #32]
 80142ac:	f8ad 3018 	strh.w	r3, [sp, #24]
 80142b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80142b4:	4630      	mov	r0, r6
 80142b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80142ba:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80142be:	9203      	str	r2, [sp, #12]
 80142c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80142c4:	f7fd fb8e 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80142c8:	2c0b      	cmp	r4, #11
 80142ca:	bf8c      	ite	hi
 80142cc:	2100      	movhi	r1, #0
 80142ce:	4b1b      	ldrls	r3, [pc, #108]	; (801433c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80142d0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80142d4:	bf98      	it	ls
 80142d6:	5d19      	ldrbls	r1, [r3, r4]
 80142d8:	fb02 8307 	mla	r3, r2, r7, r8
 80142dc:	10c9      	asrs	r1, r1, #3
 80142de:	fb01 0003 	mla	r0, r1, r3, r0
 80142e2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80142e6:	9005      	str	r0, [sp, #20]
 80142e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80142ec:	2300      	movs	r3, #0
 80142ee:	6870      	ldr	r0, [r6, #4]
 80142f0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80142f4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80142f8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80142fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014300:	6803      	ldr	r3, [r0, #0]
 8014302:	a901      	add	r1, sp, #4
 8014304:	685b      	ldr	r3, [r3, #4]
 8014306:	4798      	blx	r3
 8014308:	b00a      	add	sp, #40	; 0x28
 801430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430e:	2d02      	cmp	r5, #2
 8014310:	d109      	bne.n	8014326 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014312:	28ff      	cmp	r0, #255	; 0xff
 8014314:	d105      	bne.n	8014322 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014316:	f1bc 0f00 	cmp.w	ip, #0
 801431a:	bf14      	ite	ne
 801431c:	2340      	movne	r3, #64	; 0x40
 801431e:	2320      	moveq	r3, #32
 8014320:	e7be      	b.n	80142a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014322:	2340      	movs	r3, #64	; 0x40
 8014324:	e7bc      	b.n	80142a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014326:	28ff      	cmp	r0, #255	; 0xff
 8014328:	d105      	bne.n	8014336 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801432a:	f1bc 0f00 	cmp.w	ip, #0
 801432e:	bf14      	ite	ne
 8014330:	2304      	movne	r3, #4
 8014332:	2301      	moveq	r3, #1
 8014334:	e7b4      	b.n	80142a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014336:	2304      	movs	r3, #4
 8014338:	e7b2      	b.n	80142a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801433a:	bf00      	nop
 801433c:	08028e00 	.word	0x08028e00

08014340 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	b08b      	sub	sp, #44	; 0x2c
 8014346:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801434a:	461d      	mov	r5, r3
 801434c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014350:	bf14      	ite	ne
 8014352:	2308      	movne	r3, #8
 8014354:	2302      	moveq	r3, #2
 8014356:	2400      	movs	r4, #0
 8014358:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801435c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014360:	4688      	mov	r8, r1
 8014362:	4693      	mov	fp, r2
 8014364:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8014368:	9404      	str	r4, [sp, #16]
 801436a:	4607      	mov	r7, r0
 801436c:	f7fd fb3a 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014370:	2e0b      	cmp	r6, #11
 8014372:	bf98      	it	ls
 8014374:	4b15      	ldrls	r3, [pc, #84]	; (80143cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014376:	fb05 b50a 	mla	r5, r5, sl, fp
 801437a:	bf98      	it	ls
 801437c:	5d9c      	ldrbls	r4, [r3, r6]
 801437e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014382:	10e4      	asrs	r4, r4, #3
 8014384:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014388:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801438c:	fb04 0405 	mla	r4, r4, r5, r0
 8014390:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014394:	2300      	movs	r3, #0
 8014396:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	9405      	str	r4, [sp, #20]
 801439e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80143a2:	f8ad a01e 	strh.w	sl, [sp, #30]
 80143a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80143aa:	f88d 9020 	strb.w	r9, [sp, #32]
 80143ae:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80143b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80143b6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80143ba:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80143be:	6803      	ldr	r3, [r0, #0]
 80143c0:	a901      	add	r1, sp, #4
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	4798      	blx	r3
 80143c6:	b00b      	add	sp, #44	; 0x2c
 80143c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143cc:	08028e00 	.word	0x08028e00

080143d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80143d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143d4:	461e      	mov	r6, r3
 80143d6:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80143d8:	460f      	mov	r7, r1
 80143da:	881d      	ldrh	r5, [r3, #0]
 80143dc:	4690      	mov	r8, r2
 80143de:	f7f9 fe6b 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 80143e2:	6803      	ldr	r3, [r0, #0]
 80143e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e6:	4798      	blx	r3
 80143e8:	280b      	cmp	r0, #11
 80143ea:	bf8e      	itee	hi
 80143ec:	2400      	movhi	r4, #0
 80143ee:	4b05      	ldrls	r3, [pc, #20]	; (8014404 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80143f0:	5c1c      	ldrbls	r4, [r3, r0]
 80143f2:	fb08 7005 	mla	r0, r8, r5, r7
 80143f6:	10e4      	asrs	r4, r4, #3
 80143f8:	fb04 6000 	mla	r0, r4, r0, r6
 80143fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014400:	2004f656 	.word	0x2004f656
 8014404:	08028e00 	.word	0x08028e00

08014408 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801440a:	2500      	movs	r5, #0
 801440c:	b08b      	sub	sp, #44	; 0x2c
 801440e:	461f      	mov	r7, r3
 8014410:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014414:	4604      	mov	r4, r0
 8014416:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801441a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801441e:	4616      	mov	r6, r2
 8014420:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014424:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014428:	9504      	str	r5, [sp, #16]
 801442a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801442e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014432:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014436:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801443a:	f88d 3020 	strb.w	r3, [sp, #32]
 801443e:	f7fd fad1 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014442:	463a      	mov	r2, r7
 8014444:	4631      	mov	r1, r6
 8014446:	4603      	mov	r3, r0
 8014448:	4620      	mov	r0, r4
 801444a:	f7ff ffc1 	bl	80143d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801444e:	4b0e      	ldr	r3, [pc, #56]	; (8014488 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014450:	9005      	str	r0, [sp, #20]
 8014452:	881b      	ldrh	r3, [r3, #0]
 8014454:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014458:	f7f9 fe2e 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 801445c:	6803      	ldr	r3, [r0, #0]
 801445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014460:	4798      	blx	r3
 8014462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014464:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801446e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014472:	6860      	ldr	r0, [r4, #4]
 8014474:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014478:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801447c:	6803      	ldr	r3, [r0, #0]
 801447e:	a901      	add	r1, sp, #4
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	4798      	blx	r3
 8014484:	b00b      	add	sp, #44	; 0x2c
 8014486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014488:	2004f656 	.word	0x2004f656

0801448c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801448e:	b08d      	sub	sp, #52	; 0x34
 8014490:	466b      	mov	r3, sp
 8014492:	e883 0006 	stmia.w	r3, {r1, r2}
 8014496:	2300      	movs	r3, #0
 8014498:	2501      	movs	r5, #1
 801449a:	9306      	str	r3, [sp, #24]
 801449c:	6803      	ldr	r3, [r0, #0]
 801449e:	9503      	str	r5, [sp, #12]
 80144a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144a2:	4604      	mov	r4, r0
 80144a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80144a8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80144ac:	4798      	blx	r3
 80144ae:	463a      	mov	r2, r7
 80144b0:	4631      	mov	r1, r6
 80144b2:	4603      	mov	r3, r0
 80144b4:	4620      	mov	r0, r4
 80144b6:	f7ff ff8b 	bl	80143d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80144ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80144bc:	9004      	str	r0, [sp, #16]
 80144be:	9307      	str	r3, [sp, #28]
 80144c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80144c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80144c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80144cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80144d0:	4b0e      	ldr	r3, [pc, #56]	; (801450c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80144d2:	881b      	ldrh	r3, [r3, #0]
 80144d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80144d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80144dc:	f7f9 fdec 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 80144e0:	6803      	ldr	r3, [r0, #0]
 80144e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e4:	4798      	blx	r3
 80144e6:	23ff      	movs	r3, #255	; 0xff
 80144e8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80144ec:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80144f0:	6860      	ldr	r0, [r4, #4]
 80144f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80144f6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80144fa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80144fe:	6803      	ldr	r3, [r0, #0]
 8014500:	a903      	add	r1, sp, #12
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	4798      	blx	r3
 8014506:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014508:	b00d      	add	sp, #52	; 0x34
 801450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801450c:	2004f656 	.word	0x2004f656

08014510 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014514:	b08c      	sub	sp, #48	; 0x30
 8014516:	466d      	mov	r5, sp
 8014518:	461e      	mov	r6, r3
 801451a:	2300      	movs	r3, #0
 801451c:	e885 0006 	stmia.w	r5, {r1, r2}
 8014520:	2501      	movs	r5, #1
 8014522:	9306      	str	r3, [sp, #24]
 8014524:	6803      	ldr	r3, [r0, #0]
 8014526:	9503      	str	r5, [sp, #12]
 8014528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801452a:	4604      	mov	r4, r0
 801452c:	f8bd 7000 	ldrh.w	r7, [sp]
 8014530:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014534:	4798      	blx	r3
 8014536:	4642      	mov	r2, r8
 8014538:	4639      	mov	r1, r7
 801453a:	4603      	mov	r3, r0
 801453c:	4620      	mov	r0, r4
 801453e:	f7ff ff47 	bl	80143d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014542:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014546:	9004      	str	r0, [sp, #16]
 8014548:	f8ad 3020 	strh.w	r3, [sp, #32]
 801454c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014550:	9607      	str	r6, [sp, #28]
 8014552:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014556:	4b10      	ldr	r3, [pc, #64]	; (8014598 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014558:	881b      	ldrh	r3, [r3, #0]
 801455a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801455e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014560:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014564:	f7f9 fda8 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8014568:	6803      	ldr	r3, [r0, #0]
 801456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456c:	4798      	blx	r3
 801456e:	23ff      	movs	r3, #255	; 0xff
 8014570:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014574:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014578:	6860      	ldr	r0, [r4, #4]
 801457a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801457e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014582:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014586:	6803      	ldr	r3, [r0, #0]
 8014588:	a903      	add	r1, sp, #12
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	4798      	blx	r3
 801458e:	4630      	mov	r0, r6
 8014590:	b00c      	add	sp, #48	; 0x30
 8014592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014596:	bf00      	nop
 8014598:	2004f656 	.word	0x2004f656

0801459c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801459e:	b085      	sub	sp, #20
 80145a0:	ac02      	add	r4, sp, #8
 80145a2:	e884 0006 	stmia.w	r4, {r1, r2}
 80145a6:	4605      	mov	r5, r0
 80145a8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80145ac:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80145b0:	f7fd fa18 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80145b4:	463a      	mov	r2, r7
 80145b6:	4603      	mov	r3, r0
 80145b8:	4631      	mov	r1, r6
 80145ba:	4628      	mov	r0, r5
 80145bc:	f7ff ff08 	bl	80143d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80145c0:	4a05      	ldr	r2, [pc, #20]	; (80145d8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80145c2:	682b      	ldr	r3, [r5, #0]
 80145c4:	8812      	ldrh	r2, [r2, #0]
 80145c6:	9200      	str	r2, [sp, #0]
 80145c8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80145ca:	e894 0006 	ldmia.w	r4, {r1, r2}
 80145ce:	4603      	mov	r3, r0
 80145d0:	4628      	mov	r0, r5
 80145d2:	47b0      	blx	r6
 80145d4:	b005      	add	sp, #20
 80145d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145d8:	2004f656 	.word	0x2004f656

080145dc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80145e2:	4604      	mov	r4, r0
 80145e4:	b19b      	cbz	r3, 801460e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80145e6:	2002      	movs	r0, #2
 80145e8:	f7fd f8c0 	bl	801176c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80145ec:	2300      	movs	r3, #0
 80145ee:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80145f2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	4620      	mov	r0, r4
 80145fa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80145fe:	f7fd f9f1 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014602:	462b      	mov	r3, r5
 8014604:	4601      	mov	r1, r0
 8014606:	4620      	mov	r0, r4
 8014608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801460c:	4718      	bx	r3
 801460e:	bd70      	pop	{r4, r5, r6, pc}

08014610 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8014616:	4604      	mov	r4, r0
 8014618:	428b      	cmp	r3, r1
 801461a:	460d      	mov	r5, r1
 801461c:	d006      	beq.n	801462c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801461e:	6803      	ldr	r3, [r0, #0]
 8014620:	b929      	cbnz	r1, 801462e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014622:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014626:	4798      	blx	r3
 8014628:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801462c:	bd38      	pop	{r3, r4, r5, pc}
 801462e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014632:	e7f8      	b.n	8014626 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014634 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014634:	b510      	push	{r4, lr}
 8014636:	4b0d      	ldr	r3, [pc, #52]	; (801466c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014638:	4604      	mov	r4, r0
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	b95b      	cbnz	r3, 8014656 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801463e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014642:	2b02      	cmp	r3, #2
 8014644:	d007      	beq.n	8014656 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014646:	6840      	ldr	r0, [r0, #4]
 8014648:	f000 f926 	bl	8014898 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801464c:	b118      	cbz	r0, 8014656 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801464e:	6862      	ldr	r2, [r4, #4]
 8014650:	7a53      	ldrb	r3, [r2, #9]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d0fc      	beq.n	8014650 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014656:	f7fd fc31 	bl	8011ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801465a:	4620      	mov	r0, r4
 801465c:	2100      	movs	r1, #0
 801465e:	f7ff ffd7 	bl	8014610 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014662:	4620      	mov	r0, r4
 8014664:	f7fd f9be 	bl	80119e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014668:	bd10      	pop	{r4, pc}
 801466a:	bf00      	nop
 801466c:	2004f65a 	.word	0x2004f65a

08014670 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8014670:	b570      	push	{r4, r5, r6, lr}
 8014672:	4604      	mov	r4, r0
 8014674:	6803      	ldr	r3, [r0, #0]
 8014676:	b919      	cbnz	r1, 8014680 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8014678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801467e:	4718      	bx	r3
 8014680:	2200      	movs	r2, #0
 8014682:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8014686:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 801468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801468c:	4798      	blx	r3
 801468e:	4605      	mov	r5, r0
 8014690:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8014694:	4620      	mov	r0, r4
 8014696:	2101      	movs	r1, #1
 8014698:	f7ff ffba 	bl	8014610 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801469c:	4628      	mov	r0, r5
 801469e:	bd70      	pop	{r4, r5, r6, pc}

080146a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80146a0:	4770      	bx	lr

080146a2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80146a2:	2000      	movs	r0, #0
 80146a4:	4770      	bx	lr

080146a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80146a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80146aa:	1a13      	subs	r3, r2, r0
 80146ac:	4258      	negs	r0, r3
 80146ae:	4158      	adcs	r0, r3
 80146b0:	4770      	bx	lr

080146b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80146b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80146b6:	1a9b      	subs	r3, r3, r2
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	bfdc      	itt	le
 80146bc:	6882      	ldrle	r2, [r0, #8]
 80146be:	189b      	addle	r3, r3, r2
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	bfcc      	ite	gt
 80146c4:	2000      	movgt	r0, #0
 80146c6:	2001      	movle	r0, #1
 80146c8:	4770      	bx	lr

080146ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80146ca:	6902      	ldr	r2, [r0, #16]
 80146cc:	6843      	ldr	r3, [r0, #4]
 80146ce:	2024      	movs	r0, #36	; 0x24
 80146d0:	fb00 3002 	mla	r0, r0, r2, r3
 80146d4:	4770      	bx	lr

080146d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80146d6:	6803      	ldr	r3, [r0, #0]
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	4718      	bx	r3

080146dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80146dc:	2301      	movs	r3, #1
 80146de:	b570      	push	{r4, r5, r6, lr}
 80146e0:	7203      	strb	r3, [r0, #8]
 80146e2:	4604      	mov	r4, r0
 80146e4:	6840      	ldr	r0, [r0, #4]
 80146e6:	6803      	ldr	r3, [r0, #0]
 80146e8:	699b      	ldr	r3, [r3, #24]
 80146ea:	4798      	blx	r3
 80146ec:	6803      	ldr	r3, [r0, #0]
 80146ee:	4605      	mov	r5, r0
 80146f0:	2b40      	cmp	r3, #64	; 0x40
 80146f2:	d00c      	beq.n	801470e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80146f4:	d810      	bhi.n	8014718 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80146f6:	2b04      	cmp	r3, #4
 80146f8:	d01d      	beq.n	8014736 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80146fa:	d804      	bhi.n	8014706 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d006      	beq.n	801470e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014700:	2b02      	cmp	r3, #2
 8014702:	d02c      	beq.n	801475e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	2b08      	cmp	r3, #8
 8014708:	d01d      	beq.n	8014746 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801470a:	2b20      	cmp	r3, #32
 801470c:	d1fa      	bne.n	8014704 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	4620      	mov	r0, r4
 8014712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014714:	4798      	blx	r3
 8014716:	e013      	b.n	8014740 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801471c:	d0f7      	beq.n	801470e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801471e:	d804      	bhi.n	801472a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014720:	2b80      	cmp	r3, #128	; 0x80
 8014722:	d0f4      	beq.n	801470e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014728:	e7f0      	b.n	801470c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801472a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801472e:	d0ee      	beq.n	801470e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014734:	e7e5      	b.n	8014702 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	7f01      	ldrb	r1, [r0, #28]
 801473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801473c:	4620      	mov	r0, r4
 801473e:	4798      	blx	r3
 8014740:	6823      	ldr	r3, [r4, #0]
 8014742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014744:	e006      	b.n	8014754 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	7f01      	ldrb	r1, [r0, #28]
 801474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801474c:	4620      	mov	r0, r4
 801474e:	4798      	blx	r3
 8014750:	6823      	ldr	r3, [r4, #0]
 8014752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014754:	4629      	mov	r1, r5
 8014756:	4620      	mov	r0, r4
 8014758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801475c:	4718      	bx	r3
 801475e:	6823      	ldr	r3, [r4, #0]
 8014760:	4620      	mov	r0, r4
 8014762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014764:	4798      	blx	r3
 8014766:	e7f3      	b.n	8014750 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014768 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014768:	4770      	bx	lr

0801476a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801476a:	4770      	bx	lr

0801476c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801476c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014770:	1ad2      	subs	r2, r2, r3
 8014772:	2a00      	cmp	r2, #0
 8014774:	b510      	push	{r4, lr}
 8014776:	bfdc      	itt	le
 8014778:	6884      	ldrle	r4, [r0, #8]
 801477a:	1912      	addle	r2, r2, r4
 801477c:	2a01      	cmp	r2, #1
 801477e:	dd16      	ble.n	80147ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014780:	2424      	movs	r4, #36	; 0x24
 8014782:	6842      	ldr	r2, [r0, #4]
 8014784:	fb04 2303 	mla	r3, r4, r3, r2
 8014788:	f101 0220 	add.w	r2, r1, #32
 801478c:	f851 4b04 	ldr.w	r4, [r1], #4
 8014790:	4291      	cmp	r1, r2
 8014792:	f843 4b04 	str.w	r4, [r3], #4
 8014796:	d1f9      	bne.n	801478c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014798:	780a      	ldrb	r2, [r1, #0]
 801479a:	701a      	strb	r2, [r3, #0]
 801479c:	68c3      	ldr	r3, [r0, #12]
 801479e:	6882      	ldr	r2, [r0, #8]
 80147a0:	3301      	adds	r3, #1
 80147a2:	429a      	cmp	r2, r3
 80147a4:	bfd8      	it	le
 80147a6:	1a9b      	suble	r3, r3, r2
 80147a8:	f3bf 8f5b 	dmb	ish
 80147ac:	60c3      	str	r3, [r0, #12]
 80147ae:	bd10      	pop	{r4, pc}

080147b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80147b0:	6903      	ldr	r3, [r0, #16]
 80147b2:	6882      	ldr	r2, [r0, #8]
 80147b4:	3301      	adds	r3, #1
 80147b6:	429a      	cmp	r2, r3
 80147b8:	bfd8      	it	le
 80147ba:	1a9b      	suble	r3, r3, r2
 80147bc:	f3bf 8f5b 	dmb	ish
 80147c0:	6103      	str	r3, [r0, #16]
 80147c2:	4770      	bx	lr

080147c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	460e      	mov	r6, r1
 80147ca:	6860      	ldr	r0, [r4, #4]
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	4798      	blx	r3
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d1f9      	bne.n	80147ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80147d6:	4d0d      	ldr	r5, [pc, #52]	; (801480c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80147d8:	6828      	ldr	r0, [r5, #0]
 80147da:	6803      	ldr	r3, [r0, #0]
 80147dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80147de:	4798      	blx	r3
 80147e0:	f7fd fbae 	bl	8011f40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80147e4:	6828      	ldr	r0, [r5, #0]
 80147e6:	2101      	movs	r1, #1
 80147e8:	f7ff ff12 	bl	8014610 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80147ec:	6860      	ldr	r0, [r4, #4]
 80147ee:	4631      	mov	r1, r6
 80147f0:	6803      	ldr	r3, [r0, #0]
 80147f2:	689b      	ldr	r3, [r3, #8]
 80147f4:	4798      	blx	r3
 80147f6:	6823      	ldr	r3, [r4, #0]
 80147f8:	4620      	mov	r0, r4
 80147fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147fc:	4798      	blx	r3
 80147fe:	6828      	ldr	r0, [r5, #0]
 8014800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014808:	4718      	bx	r3
 801480a:	bf00      	nop
 801480c:	2004f65c 	.word	0x2004f65c

08014810 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014810:	b508      	push	{r3, lr}
 8014812:	f7fd fb53 	bl	8011ebc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801481a:	f7fd bb6f 	b.w	8011efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801481e <_ZN8touchgfx13DMA_Interface5startEv>:
 801481e:	b510      	push	{r4, lr}
 8014820:	4604      	mov	r4, r0
 8014822:	6840      	ldr	r0, [r0, #4]
 8014824:	6803      	ldr	r3, [r0, #0]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4798      	blx	r3
 801482a:	b948      	cbnz	r0, 8014840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801482c:	7a63      	ldrb	r3, [r4, #9]
 801482e:	b13b      	cbz	r3, 8014840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014830:	7a23      	ldrb	r3, [r4, #8]
 8014832:	b92b      	cbnz	r3, 8014840 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014834:	6823      	ldr	r3, [r4, #0]
 8014836:	4620      	mov	r0, r4
 8014838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483e:	4718      	bx	r3
 8014840:	bd10      	pop	{r4, pc}

08014842 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014842:	b570      	push	{r4, r5, r6, lr}
 8014844:	4604      	mov	r4, r0
 8014846:	6840      	ldr	r0, [r0, #4]
 8014848:	6803      	ldr	r3, [r0, #0]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	4798      	blx	r3
 801484e:	4605      	mov	r5, r0
 8014850:	b930      	cbnz	r0, 8014860 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014852:	7a23      	ldrb	r3, [r4, #8]
 8014854:	b123      	cbz	r3, 8014860 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014856:	6860      	ldr	r0, [r4, #4]
 8014858:	6803      	ldr	r3, [r0, #0]
 801485a:	695b      	ldr	r3, [r3, #20]
 801485c:	4798      	blx	r3
 801485e:	7225      	strb	r5, [r4, #8]
 8014860:	6860      	ldr	r0, [r4, #4]
 8014862:	6803      	ldr	r3, [r0, #0]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4798      	blx	r3
 8014868:	b928      	cbnz	r0, 8014876 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801486a:	6823      	ldr	r3, [r4, #0]
 801486c:	4620      	mov	r0, r4
 801486e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014874:	4718      	bx	r3
 8014876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801487a:	f7fd bb6d 	b.w	8011f58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014880 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014880:	6082      	str	r2, [r0, #8]
 8014882:	2200      	movs	r2, #0
 8014884:	b510      	push	{r4, lr}
 8014886:	4c03      	ldr	r4, [pc, #12]	; (8014894 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014888:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801488c:	e9c0 4100 	strd	r4, r1, [r0]
 8014890:	bd10      	pop	{r4, pc}
 8014892:	bf00      	nop
 8014894:	08028f3c 	.word	0x08028f3c

08014898 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014898:	6840      	ldr	r0, [r0, #4]
 801489a:	6803      	ldr	r3, [r0, #0]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4718      	bx	r3

080148a0 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80148a0:	b508      	push	{r3, lr}
 80148a2:	4b05      	ldr	r3, [pc, #20]	; (80148b8 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80148a4:	6818      	ldr	r0, [r3, #0]
 80148a6:	6803      	ldr	r3, [r0, #0]
 80148a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80148ac:	4798      	blx	r3
 80148ae:	1e43      	subs	r3, r0, #1
 80148b0:	4258      	negs	r0, r3
 80148b2:	4158      	adcs	r0, r3
 80148b4:	bd08      	pop	{r3, pc}
 80148b6:	bf00      	nop
 80148b8:	2004f65c 	.word	0x2004f65c

080148bc <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80148bc:	b430      	push	{r4, r5}
 80148be:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80148c2:	8a02      	ldrh	r2, [r0, #16]
 80148c4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80148c8:	9202      	str	r2, [sp, #8]
 80148ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80148ce:	68c2      	ldr	r2, [r0, #12]
 80148d0:	4629      	mov	r1, r5
 80148d2:	4620      	mov	r0, r4
 80148d4:	bc30      	pop	{r4, r5}
 80148d6:	f7fd bfdb 	b.w	8012890 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

080148da <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 80148da:	f7fd bfc1 	b.w	8012860 <_ZN8touchgfx5paint6rgb5658tearDownEv>

080148de <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 80148de:	4602      	mov	r2, r0
 80148e0:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80148e4:	cb03      	ldmia	r3!, {r0, r1}
 80148e6:	6010      	str	r0, [r2, #0]
 80148e8:	6051      	str	r1, [r2, #4]
 80148ea:	4610      	mov	r0, r2
 80148ec:	4770      	bx	lr

080148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80148ee:	b507      	push	{r0, r1, r2, lr}
 80148f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80148f4:	ab01      	add	r3, sp, #4
 80148f6:	6809      	ldr	r1, [r1, #0]
 80148f8:	6800      	ldr	r0, [r0, #0]
 80148fa:	f004 f856 	bl	80189aa <_ZN8touchgfx6muldivElllRl>
 80148fe:	b003      	add	sp, #12
 8014900:	f85d fb04 	ldr.w	pc, [sp], #4

08014904 <_ZN8touchgfx7CWRUtil4sineEi>:
 8014904:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014908:	fb90 f2f3 	sdiv	r2, r0, r3
 801490c:	fb02 0013 	mls	r0, r2, r3, r0
 8014910:	2800      	cmp	r0, #0
 8014912:	bfb8      	it	lt
 8014914:	18c0      	addlt	r0, r0, r3
 8014916:	285a      	cmp	r0, #90	; 0x5a
 8014918:	4b09      	ldr	r3, [pc, #36]	; (8014940 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 801491a:	dc02      	bgt.n	8014922 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801491c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014920:	4770      	bx	lr
 8014922:	28b4      	cmp	r0, #180	; 0xb4
 8014924:	dc02      	bgt.n	801492c <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8014926:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801492a:	e7f7      	b.n	801491c <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801492c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014930:	bfd4      	ite	le
 8014932:	38b4      	suble	r0, #180	; 0xb4
 8014934:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014938:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801493c:	4240      	negs	r0, r0
 801493e:	4770      	bx	lr
 8014940:	08028fa0 	.word	0x08028fa0

08014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8014944:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8014948:	fb90 f2f3 	sdiv	r2, r0, r3
 801494c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801494e:	fb02 0013 	mls	r0, r2, r3, r0
 8014952:	2800      	cmp	r0, #0
 8014954:	bfb8      	it	lt
 8014956:	18c0      	addlt	r0, r0, r3
 8014958:	1144      	asrs	r4, r0, #5
 801495a:	f000 061f 	and.w	r6, r0, #31
 801495e:	4620      	mov	r0, r4
 8014960:	f7ff ffd0 	bl	8014904 <_ZN8touchgfx7CWRUtil4sineEi>
 8014964:	4605      	mov	r5, r0
 8014966:	b90e      	cbnz	r6, 801496c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8014968:	b002      	add	sp, #8
 801496a:	bd70      	pop	{r4, r5, r6, pc}
 801496c:	1c60      	adds	r0, r4, #1
 801496e:	f7ff ffc9 	bl	8014904 <_ZN8touchgfx7CWRUtil4sineEi>
 8014972:	ab01      	add	r3, sp, #4
 8014974:	2220      	movs	r2, #32
 8014976:	4631      	mov	r1, r6
 8014978:	1b40      	subs	r0, r0, r5
 801497a:	f004 f816 	bl	80189aa <_ZN8touchgfx6muldivElllRl>
 801497e:	4428      	add	r0, r5
 8014980:	e7f2      	b.n	8014968 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08014982 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8014982:	b507      	push	{r0, r1, r2, lr}
 8014984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014988:	ab01      	add	r3, sp, #4
 801498a:	0140      	lsls	r0, r0, #5
 801498c:	f004 f80d 	bl	80189aa <_ZN8touchgfx6muldivElllRl>
 8014990:	2320      	movs	r3, #32
 8014992:	fb90 f0f3 	sdiv	r0, r0, r3
 8014996:	b003      	add	sp, #12
 8014998:	f85d fb04 	ldr.w	pc, [sp], #4

0801499c <_ZN8touchgfx13AbstractShapeC1Ev>:
 801499c:	b510      	push	{r4, lr}
 801499e:	4604      	mov	r4, r0
 80149a0:	f000 fe28 	bl	80155f4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80149a4:	4b07      	ldr	r3, [pc, #28]	; (80149c4 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 80149a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80149aa:	6023      	str	r3, [r4, #0]
 80149ac:	2300      	movs	r3, #0
 80149ae:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 80149b2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80149b6:	6363      	str	r3, [r4, #52]	; 0x34
 80149b8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 80149bc:	60a3      	str	r3, [r4, #8]
 80149be:	4620      	mov	r0, r4
 80149c0:	bd10      	pop	{r4, pc}
 80149c2:	bf00      	nop
 80149c4:	08029060 	.word	0x08029060

080149c8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 80149c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149cc:	2500      	movs	r5, #0
 80149ce:	6803      	ldr	r3, [r0, #0]
 80149d0:	b087      	sub	sp, #28
 80149d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149d4:	4604      	mov	r4, r0
 80149d6:	4798      	blx	r3
 80149d8:	462e      	mov	r6, r5
 80149da:	46a8      	mov	r8, r5
 80149dc:	462f      	mov	r7, r5
 80149de:	46a9      	mov	r9, r5
 80149e0:	9000      	str	r0, [sp, #0]
 80149e2:	9b00      	ldr	r3, [sp, #0]
 80149e4:	429d      	cmp	r5, r3
 80149e6:	da7d      	bge.n	8014ae4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x11c>
 80149e8:	6823      	ldr	r3, [r4, #0]
 80149ea:	4629      	mov	r1, r5
 80149ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149ee:	4620      	mov	r0, r4
 80149f0:	4798      	blx	r3
 80149f2:	6823      	ldr	r3, [r4, #0]
 80149f4:	4682      	mov	sl, r0
 80149f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80149f8:	4629      	mov	r1, r5
 80149fa:	4620      	mov	r0, r4
 80149fc:	4798      	blx	r3
 80149fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014a00:	4683      	mov	fp, r0
 8014a02:	4650      	mov	r0, sl
 8014a04:	f7ff ffbd 	bl	8014982 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014a08:	9002      	str	r0, [sp, #8]
 8014a0a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014a0c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014a10:	f7ff ff98 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a14:	a903      	add	r1, sp, #12
 8014a16:	9003      	str	r0, [sp, #12]
 8014a18:	a802      	add	r0, sp, #8
 8014a1a:	f7ff ff68 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014a20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014a22:	4402      	add	r2, r0
 8014a24:	4658      	mov	r0, fp
 8014a26:	9201      	str	r2, [sp, #4]
 8014a28:	f7ff ffab 	bl	8014982 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014a2c:	9004      	str	r0, [sp, #16]
 8014a2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014a30:	f7ff ff88 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a34:	a905      	add	r1, sp, #20
 8014a36:	9005      	str	r0, [sp, #20]
 8014a38:	a804      	add	r0, sp, #16
 8014a3a:	f7ff ff58 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a3e:	9a01      	ldr	r2, [sp, #4]
 8014a40:	1a12      	subs	r2, r2, r0
 8014a42:	b125      	cbz	r5, 8014a4e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x86>
 8014a44:	2320      	movs	r3, #32
 8014a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a4a:	429f      	cmp	r7, r3
 8014a4c:	da03      	bge.n	8014a56 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8e>
 8014a4e:	2720      	movs	r7, #32
 8014a50:	fb92 f7f7 	sdiv	r7, r2, r7
 8014a54:	b125      	cbz	r5, 8014a60 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x98>
 8014a56:	2320      	movs	r3, #32
 8014a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a5c:	4599      	cmp	r9, r3
 8014a5e:	dd03      	ble.n	8014a68 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa0>
 8014a60:	f04f 0920 	mov.w	r9, #32
 8014a64:	fb92 f9f9 	sdiv	r9, r2, r9
 8014a68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014a6a:	4658      	mov	r0, fp
 8014a6c:	9201      	str	r2, [sp, #4]
 8014a6e:	f7ff ff88 	bl	8014982 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014a72:	9002      	str	r0, [sp, #8]
 8014a74:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014a76:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014a7a:	f7ff ff63 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a7e:	a903      	add	r1, sp, #12
 8014a80:	9003      	str	r0, [sp, #12]
 8014a82:	a802      	add	r0, sp, #8
 8014a84:	f7ff ff33 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014a8c:	eb00 0b03 	add.w	fp, r0, r3
 8014a90:	4650      	mov	r0, sl
 8014a92:	f7ff ff76 	bl	8014982 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8014a96:	9004      	str	r0, [sp, #16]
 8014a98:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014a9a:	f7ff ff53 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014a9e:	a905      	add	r1, sp, #20
 8014aa0:	9005      	str	r0, [sp, #20]
 8014aa2:	a804      	add	r0, sp, #16
 8014aa4:	f7ff ff23 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014aa8:	9a01      	ldr	r2, [sp, #4]
 8014aaa:	eb00 030b 	add.w	r3, r0, fp
 8014aae:	b125      	cbz	r5, 8014aba <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>
 8014ab0:	2120      	movs	r1, #32
 8014ab2:	fb93 f1f1 	sdiv	r1, r3, r1
 8014ab6:	428e      	cmp	r6, r1
 8014ab8:	da03      	bge.n	8014ac2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 8014aba:	2620      	movs	r6, #32
 8014abc:	fb93 f6f6 	sdiv	r6, r3, r6
 8014ac0:	b125      	cbz	r5, 8014acc <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x104>
 8014ac2:	2120      	movs	r1, #32
 8014ac4:	fb93 f1f1 	sdiv	r1, r3, r1
 8014ac8:	4588      	cmp	r8, r1
 8014aca:	dd03      	ble.n	8014ad4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
 8014acc:	f04f 0820 	mov.w	r8, #32
 8014ad0:	fb93 f8f8 	sdiv	r8, r3, r8
 8014ad4:	6821      	ldr	r1, [r4, #0]
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 8014adc:	4629      	mov	r1, r5
 8014ade:	47d0      	blx	sl
 8014ae0:	3501      	adds	r5, #1
 8014ae2:	e77e      	b.n	80149e2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8014ae4:	3701      	adds	r7, #1
 8014ae6:	3601      	adds	r6, #1
 8014ae8:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 8014aec:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
 8014af0:	eba7 0909 	sub.w	r9, r7, r9
 8014af4:	eba6 0808 	sub.w	r8, r6, r8
 8014af8:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8014afc:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 8014b00:	b007      	add	sp, #28
 8014b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014b08 <_ZN8touchgfx6CanvasD1Ev>:
 8014b08:	b510      	push	{r4, lr}
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4b03      	ldr	r3, [pc, #12]	; (8014b1c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8014b0e:	f840 3b20 	str.w	r3, [r0], #32
 8014b12:	f000 fed9 	bl	80158c8 <_ZN8touchgfx7OutlineD1Ev>
 8014b16:	4620      	mov	r0, r4
 8014b18:	bd10      	pop	{r4, pc}
 8014b1a:	bf00      	nop
 8014b1c:	08028f98 	.word	0x08028f98

08014b20 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 8014b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b22:	4604      	mov	r4, r0
 8014b24:	b09d      	sub	sp, #116	; 0x74
 8014b26:	460a      	mov	r2, r1
 8014b28:	4601      	mov	r1, r0
 8014b2a:	4668      	mov	r0, sp
 8014b2c:	f011 f8e4 	bl	8025cf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014b30:	6823      	ldr	r3, [r4, #0]
 8014b32:	4620      	mov	r0, r4
 8014b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b36:	4798      	blx	r3
 8014b38:	4606      	mov	r6, r0
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	d037      	beq.n	8014bae <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8e>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	2100      	movs	r1, #0
 8014b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014b46:	4620      	mov	r0, r4
 8014b48:	4798      	blx	r3
 8014b4a:	6823      	ldr	r3, [r4, #0]
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b52:	2100      	movs	r1, #0
 8014b54:	4620      	mov	r0, r4
 8014b56:	4798      	blx	r3
 8014b58:	4629      	mov	r1, r5
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	4668      	mov	r0, sp
 8014b5e:	f011 faa1 	bl	80260a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014b62:	2501      	movs	r5, #1
 8014b64:	42b5      	cmp	r5, r6
 8014b66:	da17      	bge.n	8014b98 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x78>
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014b70:	4620      	mov	r0, r4
 8014b72:	4798      	blx	r3
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	4607      	mov	r7, r0
 8014b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b7c:	4629      	mov	r1, r5
 8014b7e:	4620      	mov	r0, r4
 8014b80:	4798      	blx	r3
 8014b82:	4639      	mov	r1, r7
 8014b84:	4602      	mov	r2, r0
 8014b86:	4668      	mov	r0, sp
 8014b88:	f011 f964 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014b8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d80e      	bhi.n	8014bb2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x92>
 8014b94:	3501      	adds	r5, #1
 8014b96:	e7e5      	b.n	8014b64 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 8014b98:	21ff      	movs	r1, #255	; 0xff
 8014b9a:	4668      	mov	r0, sp
 8014b9c:	f011 f9d6 	bl	8025f4c <_ZN8touchgfx6Canvas6renderEh>
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	4668      	mov	r0, sp
 8014ba4:	f7ff ffb0 	bl	8014b08 <_ZN8touchgfx6CanvasD1Ev>
 8014ba8:	4620      	mov	r0, r4
 8014baa:	b01d      	add	sp, #116	; 0x74
 8014bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bae:	2401      	movs	r4, #1
 8014bb0:	e7f7      	b.n	8014ba2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 8014bb2:	2400      	movs	r4, #0
 8014bb4:	e7f5      	b.n	8014ba2 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>

08014bb6 <_ZN8touchgfx6CanvasD0Ev>:
 8014bb6:	b510      	push	{r4, lr}
 8014bb8:	4604      	mov	r4, r0
 8014bba:	f7ff ffa5 	bl	8014b08 <_ZN8touchgfx6CanvasD1Ev>
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	2170      	movs	r1, #112	; 0x70
 8014bc2:	f011 fac1 	bl	8026148 <_ZdlPvj>
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	bd10      	pop	{r4, pc}

08014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8014bca:	b508      	push	{r3, lr}
 8014bcc:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014bd0:	f7ff feb8 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014bd4:	bd08      	pop	{r3, pc}
	...

08014bd8 <_ZN8touchgfx6CircleC1Ev>:
 8014bd8:	b510      	push	{r4, lr}
 8014bda:	4604      	mov	r4, r0
 8014bdc:	f000 fd0a 	bl	80155f4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014be0:	4b08      	ldr	r3, [pc, #32]	; (8014c04 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8014be2:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8014be6:	6023      	str	r3, [r4, #0]
 8014be8:	2300      	movs	r3, #0
 8014bea:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 8014bee:	f24b 4205 	movw	r2, #46085	; 0xb405
 8014bf2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8014bf6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014bfa:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 8014bfe:	60a3      	str	r3, [r4, #8]
 8014c00:	4620      	mov	r0, r4
 8014c02:	bd10      	pop	{r4, pc}
 8014c04:	080290f4 	.word	0x080290f4

08014c08 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0c:	4680      	mov	r8, r0
 8014c0e:	4610      	mov	r0, r2
 8014c10:	428a      	cmp	r2, r1
 8014c12:	bfa8      	it	ge
 8014c14:	460a      	movge	r2, r1
 8014c16:	4699      	mov	r9, r3
 8014c18:	bfac      	ite	ge
 8014c1a:	4603      	movge	r3, r0
 8014c1c:	460b      	movlt	r3, r1
 8014c1e:	1a99      	subs	r1, r3, r2
 8014c20:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 8014c24:	bfa4      	itt	ge
 8014c26:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014c2a:	2200      	movge	r2, #0
 8014c2c:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 8014c30:	b085      	sub	sp, #20
 8014c32:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 8014c36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014c38:	9300      	str	r3, [sp, #0]
 8014c3a:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8014c3e:	f102 0b01 	add.w	fp, r2, #1
 8014c42:	2c00      	cmp	r4, #0
 8014c44:	f040 80af 	bne.w	8014da6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19e>
 8014c48:	4610      	mov	r0, r2
 8014c4a:	9201      	str	r2, [sp, #4]
 8014c4c:	f7ff fe7a 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014c50:	a903      	add	r1, sp, #12
 8014c52:	9003      	str	r0, [sp, #12]
 8014c54:	4650      	mov	r0, sl
 8014c56:	f7ff fe4a 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c5a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014c5e:	9a01      	ldr	r2, [sp, #4]
 8014c60:	4408      	add	r0, r1
 8014c62:	f8d9 1000 	ldr.w	r1, [r9]
 8014c66:	4281      	cmp	r1, r0
 8014c68:	bfc8      	it	gt
 8014c6a:	f8c9 0000 	strgt.w	r0, [r9]
 8014c6e:	6839      	ldr	r1, [r7, #0]
 8014c70:	4288      	cmp	r0, r1
 8014c72:	bfc8      	it	gt
 8014c74:	6038      	strgt	r0, [r7, #0]
 8014c76:	4610      	mov	r0, r2
 8014c78:	f7ff ffa7 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014c7c:	a903      	add	r1, sp, #12
 8014c7e:	9003      	str	r0, [sp, #12]
 8014c80:	4650      	mov	r0, sl
 8014c82:	f7ff fe34 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014c86:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8014c8a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014c8e:	1a10      	subs	r0, r2, r0
 8014c90:	6832      	ldr	r2, [r6, #0]
 8014c92:	4282      	cmp	r2, r0
 8014c94:	bfc8      	it	gt
 8014c96:	6030      	strgt	r0, [r6, #0]
 8014c98:	682a      	ldr	r2, [r5, #0]
 8014c9a:	4290      	cmp	r0, r2
 8014c9c:	fb9b f2f1 	sdiv	r2, fp, r1
 8014ca0:	fb01 b212 	mls	r2, r1, r2, fp
 8014ca4:	eba1 0202 	sub.w	r2, r1, r2
 8014ca8:	bfc8      	it	gt
 8014caa:	6028      	strgt	r0, [r5, #0]
 8014cac:	fb92 f0f1 	sdiv	r0, r2, r1
 8014cb0:	fb01 2210 	mls	r2, r1, r0, r2
 8014cb4:	4493      	add	fp, r2
 8014cb6:	9b00      	ldr	r3, [sp, #0]
 8014cb8:	455b      	cmp	r3, fp
 8014cba:	db2a      	blt.n	8014d12 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10a>
 8014cbc:	4658      	mov	r0, fp
 8014cbe:	f7ff fe41 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014cc2:	a903      	add	r1, sp, #12
 8014cc4:	9003      	str	r0, [sp, #12]
 8014cc6:	4650      	mov	r0, sl
 8014cc8:	f7ff fe11 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ccc:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014cd0:	4410      	add	r0, r2
 8014cd2:	f8d9 2000 	ldr.w	r2, [r9]
 8014cd6:	4282      	cmp	r2, r0
 8014cd8:	bfc8      	it	gt
 8014cda:	f8c9 0000 	strgt.w	r0, [r9]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	4290      	cmp	r0, r2
 8014ce2:	bfc8      	it	gt
 8014ce4:	6038      	strgt	r0, [r7, #0]
 8014ce6:	4658      	mov	r0, fp
 8014ce8:	f7ff ff6f 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014cec:	a903      	add	r1, sp, #12
 8014cee:	9003      	str	r0, [sp, #12]
 8014cf0:	4650      	mov	r0, sl
 8014cf2:	f7ff fdfc 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014cf6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014cfa:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8014cfe:	1a10      	subs	r0, r2, r0
 8014d00:	6832      	ldr	r2, [r6, #0]
 8014d02:	4282      	cmp	r2, r0
 8014d04:	bfc8      	it	gt
 8014d06:	6030      	strgt	r0, [r6, #0]
 8014d08:	682a      	ldr	r2, [r5, #0]
 8014d0a:	4290      	cmp	r0, r2
 8014d0c:	bfc8      	it	gt
 8014d0e:	6028      	strgt	r0, [r5, #0]
 8014d10:	e7d1      	b.n	8014cb6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xae>
 8014d12:	9b00      	ldr	r3, [sp, #0]
 8014d14:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8014d18:	455b      	cmp	r3, fp
 8014d1a:	dd27      	ble.n	8014d6c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x164>
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7ff fe11 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014d22:	a903      	add	r1, sp, #12
 8014d24:	9003      	str	r0, [sp, #12]
 8014d26:	4650      	mov	r0, sl
 8014d28:	f7ff fde1 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014d2c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014d30:	4410      	add	r0, r2
 8014d32:	f8d9 2000 	ldr.w	r2, [r9]
 8014d36:	4282      	cmp	r2, r0
 8014d38:	bfc8      	it	gt
 8014d3a:	f8c9 0000 	strgt.w	r0, [r9]
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	4290      	cmp	r0, r2
 8014d42:	bfc8      	it	gt
 8014d44:	6038      	strgt	r0, [r7, #0]
 8014d46:	9800      	ldr	r0, [sp, #0]
 8014d48:	f7ff ff3f 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014d4c:	a903      	add	r1, sp, #12
 8014d4e:	9003      	str	r0, [sp, #12]
 8014d50:	4650      	mov	r0, sl
 8014d52:	f7ff fdcc 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014d56:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014d5a:	1a10      	subs	r0, r2, r0
 8014d5c:	6832      	ldr	r2, [r6, #0]
 8014d5e:	4282      	cmp	r2, r0
 8014d60:	bfc8      	it	gt
 8014d62:	6030      	strgt	r0, [r6, #0]
 8014d64:	682a      	ldr	r2, [r5, #0]
 8014d66:	4290      	cmp	r0, r2
 8014d68:	bfc8      	it	gt
 8014d6a:	6028      	strgt	r0, [r5, #0]
 8014d6c:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014d70:	f8d9 1000 	ldr.w	r1, [r9]
 8014d74:	4291      	cmp	r1, r2
 8014d76:	bfc8      	it	gt
 8014d78:	f8c9 2000 	strgt.w	r2, [r9]
 8014d7c:	683a      	ldr	r2, [r7, #0]
 8014d7e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8014d82:	429a      	cmp	r2, r3
 8014d84:	bfb8      	it	lt
 8014d86:	603b      	strlt	r3, [r7, #0]
 8014d88:	6832      	ldr	r2, [r6, #0]
 8014d8a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	bfc8      	it	gt
 8014d92:	6033      	strgt	r3, [r6, #0]
 8014d94:	682a      	ldr	r2, [r5, #0]
 8014d96:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	da00      	bge.n	8014da0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014d9e:	602b      	str	r3, [r5, #0]
 8014da0:	b005      	add	sp, #20
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	2002      	movs	r0, #2
 8014da8:	3401      	adds	r4, #1
 8014daa:	fb94 f4f0 	sdiv	r4, r4, r0
 8014dae:	4610      	mov	r0, r2
 8014db0:	9201      	str	r2, [sp, #4]
 8014db2:	f7ff fdc7 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014db6:	a903      	add	r1, sp, #12
 8014db8:	9003      	str	r0, [sp, #12]
 8014dba:	4650      	mov	r0, sl
 8014dbc:	f7ff fd97 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014dc0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8014dc4:	9a01      	ldr	r2, [sp, #4]
 8014dc6:	4408      	add	r0, r1
 8014dc8:	f8d9 1000 	ldr.w	r1, [r9]
 8014dcc:	1b03      	subs	r3, r0, r4
 8014dce:	4299      	cmp	r1, r3
 8014dd0:	bfc8      	it	gt
 8014dd2:	f8c9 3000 	strgt.w	r3, [r9]
 8014dd6:	6839      	ldr	r1, [r7, #0]
 8014dd8:	4420      	add	r0, r4
 8014dda:	428b      	cmp	r3, r1
 8014ddc:	bfc8      	it	gt
 8014dde:	603b      	strgt	r3, [r7, #0]
 8014de0:	f8d9 1000 	ldr.w	r1, [r9]
 8014de4:	4281      	cmp	r1, r0
 8014de6:	bfc8      	it	gt
 8014de8:	f8c9 0000 	strgt.w	r0, [r9]
 8014dec:	6839      	ldr	r1, [r7, #0]
 8014dee:	4288      	cmp	r0, r1
 8014df0:	bfc8      	it	gt
 8014df2:	6038      	strgt	r0, [r7, #0]
 8014df4:	4610      	mov	r0, r2
 8014df6:	f7ff fee8 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014dfa:	a903      	add	r1, sp, #12
 8014dfc:	9003      	str	r0, [sp, #12]
 8014dfe:	4650      	mov	r0, sl
 8014e00:	f7ff fd75 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014e04:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014e08:	1a10      	subs	r0, r2, r0
 8014e0a:	6832      	ldr	r2, [r6, #0]
 8014e0c:	1b01      	subs	r1, r0, r4
 8014e0e:	428a      	cmp	r2, r1
 8014e10:	bfc8      	it	gt
 8014e12:	6031      	strgt	r1, [r6, #0]
 8014e14:	682a      	ldr	r2, [r5, #0]
 8014e16:	4420      	add	r0, r4
 8014e18:	4291      	cmp	r1, r2
 8014e1a:	bfc8      	it	gt
 8014e1c:	6029      	strgt	r1, [r5, #0]
 8014e1e:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8014e22:	6832      	ldr	r2, [r6, #0]
 8014e24:	4282      	cmp	r2, r0
 8014e26:	bfc8      	it	gt
 8014e28:	6030      	strgt	r0, [r6, #0]
 8014e2a:	682a      	ldr	r2, [r5, #0]
 8014e2c:	4290      	cmp	r0, r2
 8014e2e:	fb9b f2f1 	sdiv	r2, fp, r1
 8014e32:	fb01 b212 	mls	r2, r1, r2, fp
 8014e36:	eba1 0202 	sub.w	r2, r1, r2
 8014e3a:	bfc8      	it	gt
 8014e3c:	6028      	strgt	r0, [r5, #0]
 8014e3e:	fb92 f0f1 	sdiv	r0, r2, r1
 8014e42:	fb01 2210 	mls	r2, r1, r0, r2
 8014e46:	4493      	add	fp, r2
 8014e48:	9b00      	ldr	r3, [sp, #0]
 8014e4a:	455b      	cmp	r3, fp
 8014e4c:	db40      	blt.n	8014ed0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c8>
 8014e4e:	4658      	mov	r0, fp
 8014e50:	f7ff fd78 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014e54:	a903      	add	r1, sp, #12
 8014e56:	9003      	str	r0, [sp, #12]
 8014e58:	4650      	mov	r0, sl
 8014e5a:	f7ff fd48 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014e5e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014e62:	4410      	add	r0, r2
 8014e64:	f8d9 2000 	ldr.w	r2, [r9]
 8014e68:	1b01      	subs	r1, r0, r4
 8014e6a:	428a      	cmp	r2, r1
 8014e6c:	bfc8      	it	gt
 8014e6e:	f8c9 1000 	strgt.w	r1, [r9]
 8014e72:	683a      	ldr	r2, [r7, #0]
 8014e74:	4420      	add	r0, r4
 8014e76:	4291      	cmp	r1, r2
 8014e78:	bfc8      	it	gt
 8014e7a:	6039      	strgt	r1, [r7, #0]
 8014e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8014e80:	4282      	cmp	r2, r0
 8014e82:	bfc8      	it	gt
 8014e84:	f8c9 0000 	strgt.w	r0, [r9]
 8014e88:	683a      	ldr	r2, [r7, #0]
 8014e8a:	4290      	cmp	r0, r2
 8014e8c:	bfc8      	it	gt
 8014e8e:	6038      	strgt	r0, [r7, #0]
 8014e90:	4658      	mov	r0, fp
 8014e92:	f7ff fe9a 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014e96:	a903      	add	r1, sp, #12
 8014e98:	9003      	str	r0, [sp, #12]
 8014e9a:	4650      	mov	r0, sl
 8014e9c:	f7ff fd27 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ea0:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8014ea4:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8014ea8:	1a10      	subs	r0, r2, r0
 8014eaa:	6832      	ldr	r2, [r6, #0]
 8014eac:	1b01      	subs	r1, r0, r4
 8014eae:	428a      	cmp	r2, r1
 8014eb0:	bfc8      	it	gt
 8014eb2:	6031      	strgt	r1, [r6, #0]
 8014eb4:	682a      	ldr	r2, [r5, #0]
 8014eb6:	4420      	add	r0, r4
 8014eb8:	4291      	cmp	r1, r2
 8014eba:	bfc8      	it	gt
 8014ebc:	6029      	strgt	r1, [r5, #0]
 8014ebe:	6832      	ldr	r2, [r6, #0]
 8014ec0:	4282      	cmp	r2, r0
 8014ec2:	bfc8      	it	gt
 8014ec4:	6030      	strgt	r0, [r6, #0]
 8014ec6:	682a      	ldr	r2, [r5, #0]
 8014ec8:	4290      	cmp	r0, r2
 8014eca:	bfc8      	it	gt
 8014ecc:	6028      	strgt	r0, [r5, #0]
 8014ece:	e7bb      	b.n	8014e48 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x240>
 8014ed0:	9b00      	ldr	r3, [sp, #0]
 8014ed2:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8014ed6:	455b      	cmp	r3, fp
 8014ed8:	f77f af62 	ble.w	8014da0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7ff fd31 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014ee2:	a903      	add	r1, sp, #12
 8014ee4:	9003      	str	r0, [sp, #12]
 8014ee6:	4650      	mov	r0, sl
 8014ee8:	f7ff fd01 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014eec:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8014ef0:	4410      	add	r0, r2
 8014ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8014ef6:	1b01      	subs	r1, r0, r4
 8014ef8:	428a      	cmp	r2, r1
 8014efa:	bfc8      	it	gt
 8014efc:	f8c9 1000 	strgt.w	r1, [r9]
 8014f00:	683a      	ldr	r2, [r7, #0]
 8014f02:	4420      	add	r0, r4
 8014f04:	4291      	cmp	r1, r2
 8014f06:	bfc8      	it	gt
 8014f08:	6039      	strgt	r1, [r7, #0]
 8014f0a:	f8d9 2000 	ldr.w	r2, [r9]
 8014f0e:	4282      	cmp	r2, r0
 8014f10:	bfc8      	it	gt
 8014f12:	f8c9 0000 	strgt.w	r0, [r9]
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	4298      	cmp	r0, r3
 8014f1a:	bfc8      	it	gt
 8014f1c:	6038      	strgt	r0, [r7, #0]
 8014f1e:	9800      	ldr	r0, [sp, #0]
 8014f20:	f7ff fe53 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014f24:	a903      	add	r1, sp, #12
 8014f26:	9003      	str	r0, [sp, #12]
 8014f28:	4650      	mov	r0, sl
 8014f2a:	f7ff fce0 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014f2e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8014f32:	6832      	ldr	r2, [r6, #0]
 8014f34:	1a18      	subs	r0, r3, r0
 8014f36:	1b03      	subs	r3, r0, r4
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	bfc8      	it	gt
 8014f3c:	6033      	strgt	r3, [r6, #0]
 8014f3e:	682a      	ldr	r2, [r5, #0]
 8014f40:	4404      	add	r4, r0
 8014f42:	4293      	cmp	r3, r2
 8014f44:	bfc8      	it	gt
 8014f46:	602b      	strgt	r3, [r5, #0]
 8014f48:	6833      	ldr	r3, [r6, #0]
 8014f4a:	42a3      	cmp	r3, r4
 8014f4c:	bfc8      	it	gt
 8014f4e:	6034      	strgt	r4, [r6, #0]
 8014f50:	682b      	ldr	r3, [r5, #0]
 8014f52:	429c      	cmp	r4, r3
 8014f54:	bfc8      	it	gt
 8014f56:	602c      	strgt	r4, [r5, #0]
 8014f58:	e722      	b.n	8014da0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>

08014f5a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8014f5a:	b530      	push	{r4, r5, lr}
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	4608      	mov	r0, r1
 8014f60:	2500      	movs	r5, #0
 8014f62:	4611      	mov	r1, r2
 8014f64:	461a      	mov	r2, r3
 8014f66:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014f6a:	b089      	sub	sp, #36	; 0x24
 8014f6c:	015b      	lsls	r3, r3, #5
 8014f6e:	9304      	str	r3, [sp, #16]
 8014f70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014f74:	9505      	str	r5, [sp, #20]
 8014f76:	015b      	lsls	r3, r3, #5
 8014f78:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8014f7c:	2520      	movs	r5, #32
 8014f7e:	ab07      	add	r3, sp, #28
 8014f80:	9302      	str	r3, [sp, #8]
 8014f82:	ab06      	add	r3, sp, #24
 8014f84:	9301      	str	r3, [sp, #4]
 8014f86:	ab05      	add	r3, sp, #20
 8014f88:	9300      	str	r3, [sp, #0]
 8014f8a:	ab04      	add	r3, sp, #16
 8014f8c:	f7ff fe3c 	bl	8014c08 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8014f90:	9a04      	ldr	r2, [sp, #16]
 8014f92:	9805      	ldr	r0, [sp, #20]
 8014f94:	fb92 f2f5 	sdiv	r2, r2, r5
 8014f98:	fb90 f0f5 	sdiv	r0, r0, r5
 8014f9c:	9b06      	ldr	r3, [sp, #24]
 8014f9e:	9907      	ldr	r1, [sp, #28]
 8014fa0:	b292      	uxth	r2, r2
 8014fa2:	fb93 f3f5 	sdiv	r3, r3, r5
 8014fa6:	fb91 f1f5 	sdiv	r1, r1, r5
 8014faa:	3002      	adds	r0, #2
 8014fac:	1a80      	subs	r0, r0, r2
 8014fae:	80a0      	strh	r0, [r4, #4]
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	3102      	adds	r1, #2
 8014fb6:	1ac9      	subs	r1, r1, r3
 8014fb8:	3a01      	subs	r2, #1
 8014fba:	3b01      	subs	r3, #1
 8014fbc:	8022      	strh	r2, [r4, #0]
 8014fbe:	8063      	strh	r3, [r4, #2]
 8014fc0:	80e1      	strh	r1, [r4, #6]
 8014fc2:	b009      	add	sp, #36	; 0x24
 8014fc4:	bd30      	pop	{r4, r5, pc}

08014fc6 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8014fc6:	b510      	push	{r4, lr}
 8014fc8:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8014fcc:	4604      	mov	r4, r0
 8014fce:	f7ff ffc4 	bl	8014f5a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	bd10      	pop	{r4, pc}

08014fd6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8014fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fda:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 8014fde:	42b5      	cmp	r5, r6
 8014fe0:	bfde      	ittt	le
 8014fe2:	4633      	movle	r3, r6
 8014fe4:	462e      	movle	r6, r5
 8014fe6:	461d      	movle	r5, r3
 8014fe8:	2220      	movs	r2, #32
 8014fea:	1bab      	subs	r3, r5, r6
 8014fec:	468b      	mov	fp, r1
 8014fee:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8014ff2:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 8014ff6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014ff8:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014ffc:	b0ab      	sub	sp, #172	; 0xac
 8014ffe:	4604      	mov	r4, r0
 8015000:	bfa4      	itt	ge
 8015002:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8015006:	2600      	movge	r6, #0
 8015008:	fb99 f9f2 	sdiv	r9, r9, r2
 801500c:	fb9a faf2 	sdiv	sl, sl, r2
 8015010:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015012:	2900      	cmp	r1, #0
 8015014:	f000 80f4 	beq.w	8015200 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8015018:	f9bb 0000 	ldrsh.w	r0, [fp]
 801501c:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8015020:	eba9 0700 	sub.w	r7, r9, r0
 8015024:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 8015028:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 801502c:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8015030:	ebaa 0802 	sub.w	r8, sl, r2
 8015034:	4407      	add	r7, r0
 8015036:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 801503a:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 801503e:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 8015042:	b23f      	sxth	r7, r7
 8015044:	4490      	add	r8, r2
 8015046:	2202      	movs	r2, #2
 8015048:	fb91 f1f2 	sdiv	r1, r1, r2
 801504c:	eba9 0707 	sub.w	r7, r9, r7
 8015050:	fa0f f888 	sxth.w	r8, r8
 8015054:	ebaa 0808 	sub.w	r8, sl, r8
 8015058:	2f00      	cmp	r7, #0
 801505a:	bfb8      	it	lt
 801505c:	427f      	neglt	r7, r7
 801505e:	f1b8 0f00 	cmp.w	r8, #0
 8015062:	bfb8      	it	lt
 8015064:	f1c8 0800 	rsblt	r8, r8, #0
 8015068:	45bc      	cmp	ip, r7
 801506a:	bfcc      	ite	gt
 801506c:	f10c 0701 	addgt.w	r7, ip, #1
 8015070:	3701      	addle	r7, #1
 8015072:	4540      	cmp	r0, r8
 8015074:	bfc8      	it	gt
 8015076:	f100 0801 	addgt.w	r8, r0, #1
 801507a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801507e:	eba3 0301 	sub.w	r3, r3, r1
 8015082:	f100 0001 	add.w	r0, r0, #1
 8015086:	ea4f 0060 	mov.w	r0, r0, asr #1
 801508a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801508e:	bfd8      	it	le
 8015090:	f108 0801 	addle.w	r8, r8, #1
 8015094:	9201      	str	r2, [sp, #4]
 8015096:	930d      	str	r3, [sp, #52]	; 0x34
 8015098:	f7ff fc34 	bl	8014904 <_ZN8touchgfx7CWRUtil4sineEi>
 801509c:	a92a      	add	r1, sp, #168	; 0xa8
 801509e:	f841 0d70 	str.w	r0, [r1, #-112]!
 80150a2:	a80d      	add	r0, sp, #52	; 0x34
 80150a4:	f7ff fc23 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150a8:	f04f 0c20 	mov.w	ip, #32
 80150ac:	fb90 f0fc 	sdiv	r0, r0, ip
 80150b0:	fb08 f808 	mul.w	r8, r8, r8
 80150b4:	4340      	muls	r0, r0
 80150b6:	fb07 8707 	mla	r7, r7, r7, r8
 80150ba:	4287      	cmp	r7, r0
 80150bc:	9a01      	ldr	r2, [sp, #4]
 80150be:	da04      	bge.n	80150ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf4>
 80150c0:	2401      	movs	r4, #1
 80150c2:	4620      	mov	r0, r4
 80150c4:	b02b      	add	sp, #172	; 0xac
 80150c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80150cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80150ce:	fb91 f3f2 	sdiv	r3, r1, r2
 80150d2:	4403      	add	r3, r0
 80150d4:	fb93 f3fc 	sdiv	r3, r3, ip
 80150d8:	f9bb 1000 	ldrsh.w	r1, [fp]
 80150dc:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 80150e0:	3301      	adds	r3, #1
 80150e2:	440a      	add	r2, r1
 80150e4:	b212      	sxth	r2, r2
 80150e6:	454a      	cmp	r2, r9
 80150e8:	bfa8      	it	ge
 80150ea:	464a      	movge	r2, r9
 80150ec:	428a      	cmp	r2, r1
 80150ee:	bfac      	ite	ge
 80150f0:	eba9 0902 	subge.w	r9, r9, r2
 80150f4:	eba9 0901 	sublt.w	r9, r9, r1
 80150f8:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 80150fc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015100:	435b      	muls	r3, r3
 8015102:	440a      	add	r2, r1
 8015104:	b212      	sxth	r2, r2
 8015106:	4552      	cmp	r2, sl
 8015108:	bfa8      	it	ge
 801510a:	4652      	movge	r2, sl
 801510c:	428a      	cmp	r2, r1
 801510e:	bfac      	ite	ge
 8015110:	ebaa 0a02 	subge.w	sl, sl, r2
 8015114:	ebaa 0a01 	sublt.w	sl, sl, r1
 8015118:	fb0a fa0a 	mul.w	sl, sl, sl
 801511c:	fb09 a909 	mla	r9, r9, r9, sl
 8015120:	4599      	cmp	r9, r3
 8015122:	dccd      	bgt.n	80150c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8015124:	465a      	mov	r2, fp
 8015126:	4621      	mov	r1, r4
 8015128:	a80e      	add	r0, sp, #56	; 0x38
 801512a:	f010 fde5 	bl	8025cf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801512e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015132:	9209      	str	r2, [sp, #36]	; 0x24
 8015134:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015138:	930a      	str	r3, [sp, #40]	; 0x28
 801513a:	dd07      	ble.n	801514c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 801513c:	2102      	movs	r1, #2
 801513e:	fb93 f3f1 	sdiv	r3, r3, r1
 8015142:	4413      	add	r3, r2
 8015144:	930a      	str	r3, [sp, #40]	; 0x28
 8015146:	fb93 f3f1 	sdiv	r3, r3, r1
 801514a:	9309      	str	r3, [sp, #36]	; 0x24
 801514c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015150:	4630      	mov	r0, r6
 8015152:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015156:	930b      	str	r3, [sp, #44]	; 0x2c
 8015158:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 801515c:	f7ff fbf2 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015160:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8015164:	f849 0d74 	str.w	r0, [r9, #-116]!
 8015168:	4649      	mov	r1, r9
 801516a:	a80b      	add	r0, sp, #44	; 0x2c
 801516c:	f7ff fbbf 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015170:	f04f 0a02 	mov.w	sl, #2
 8015174:	fb90 f0fa 	sdiv	r0, r0, sl
 8015178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801517a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801517e:	eb00 0b03 	add.w	fp, r0, r3
 8015182:	4630      	mov	r0, r6
 8015184:	f7ff fd21 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015188:	f848 0d78 	str.w	r0, [r8, #-120]!
 801518c:	4641      	mov	r1, r8
 801518e:	a80b      	add	r0, sp, #44	; 0x2c
 8015190:	f7ff fbad 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015194:	fb90 f0fa 	sdiv	r0, r0, sl
 8015198:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801519a:	4659      	mov	r1, fp
 801519c:	1a12      	subs	r2, r2, r0
 801519e:	017f      	lsls	r7, r7, #5
 80151a0:	a80e      	add	r0, sp, #56	; 0x38
 80151a2:	f010 ff7f 	bl	80260a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80151a6:	f106 0a20 	add.w	sl, r6, #32
 80151aa:	bb67      	cbnz	r7, 8015206 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 80151ac:	46b3      	mov	fp, r6
 80151ae:	45aa      	cmp	sl, r5
 80151b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151b2:	dc33      	bgt.n	801521c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x246>
 80151b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151b6:	4650      	mov	r0, sl
 80151b8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80151bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80151be:	f7ff fbc1 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80151c2:	4641      	mov	r1, r8
 80151c4:	900c      	str	r0, [sp, #48]	; 0x30
 80151c6:	a80b      	add	r0, sp, #44	; 0x2c
 80151c8:	f7ff fb91 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80151cc:	2302      	movs	r3, #2
 80151ce:	fb90 f0f3 	sdiv	r0, r0, r3
 80151d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80151d4:	eb00 0b02 	add.w	fp, r0, r2
 80151d8:	4650      	mov	r0, sl
 80151da:	f7ff fcf6 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80151de:	4649      	mov	r1, r9
 80151e0:	900d      	str	r0, [sp, #52]	; 0x34
 80151e2:	a80b      	add	r0, sp, #44	; 0x2c
 80151e4:	f7ff fb83 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80151e8:	2302      	movs	r3, #2
 80151ea:	fb90 f0f3 	sdiv	r0, r0, r3
 80151ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80151f0:	4659      	mov	r1, fp
 80151f2:	1a12      	subs	r2, r2, r0
 80151f4:	a80e      	add	r0, sp, #56	; 0x38
 80151f6:	46d3      	mov	fp, sl
 80151f8:	f010 fe2c 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80151fc:	44ba      	add	sl, r7
 80151fe:	e7d6      	b.n	80151ae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 8015200:	fb93 f3f2 	sdiv	r3, r3, r2
 8015204:	e768      	b.n	80150d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x102>
 8015206:	fb9a f2f7 	sdiv	r2, sl, r7
 801520a:	fb07 a212 	mls	r2, r7, r2, sl
 801520e:	1aba      	subs	r2, r7, r2
 8015210:	fb92 f1f7 	sdiv	r1, r2, r7
 8015214:	fb07 2211 	mls	r2, r7, r1, r2
 8015218:	4492      	add	sl, r2
 801521a:	e7c7      	b.n	80151ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d6>
 801521c:	455d      	cmp	r5, fp
 801521e:	dd23      	ble.n	8015268 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x292>
 8015220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015222:	4628      	mov	r0, r5
 8015224:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8015228:	920b      	str	r2, [sp, #44]	; 0x2c
 801522a:	f7ff fb8b 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801522e:	4641      	mov	r1, r8
 8015230:	900c      	str	r0, [sp, #48]	; 0x30
 8015232:	a80b      	add	r0, sp, #44	; 0x2c
 8015234:	f7ff fb5b 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015238:	f04f 0a02 	mov.w	sl, #2
 801523c:	fb90 f0fa 	sdiv	r0, r0, sl
 8015240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015242:	4403      	add	r3, r0
 8015244:	4628      	mov	r0, r5
 8015246:	9301      	str	r3, [sp, #4]
 8015248:	f7ff fcbf 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801524c:	4649      	mov	r1, r9
 801524e:	900d      	str	r0, [sp, #52]	; 0x34
 8015250:	a80b      	add	r0, sp, #44	; 0x2c
 8015252:	f7ff fb4c 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015256:	fb90 f0fa 	sdiv	r0, r0, sl
 801525a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801525c:	9b01      	ldr	r3, [sp, #4]
 801525e:	1a12      	subs	r2, r2, r0
 8015260:	4619      	mov	r1, r3
 8015262:	a80e      	add	r0, sp, #56	; 0x38
 8015264:	f010 fdf6 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801526a:	b98b      	cbnz	r3, 8015290 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 801526c:	1bad      	subs	r5, r5, r6
 801526e:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8015272:	da04      	bge.n	801527e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015274:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8015278:	a80e      	add	r0, sp, #56	; 0x38
 801527a:	f010 fdeb 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801527e:	21ff      	movs	r1, #255	; 0xff
 8015280:	a80e      	add	r0, sp, #56	; 0x38
 8015282:	f010 fe63 	bl	8025f4c <_ZN8touchgfx6Canvas6renderEh>
 8015286:	4604      	mov	r4, r0
 8015288:	a80e      	add	r0, sp, #56	; 0x38
 801528a:	f7ff fc3d 	bl	8014b08 <_ZN8touchgfx6CanvasD1Ev>
 801528e:	e718      	b.n	80150c2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xec>
 8015290:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8015294:	429a      	cmp	r2, r3
 8015296:	f200 8107 	bhi.w	80154a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 801529a:	1bab      	subs	r3, r5, r6
 801529c:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 80152a0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80152a4:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 80152a8:	9301      	str	r3, [sp, #4]
 80152aa:	da43      	bge.n	8015334 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 80152ac:	4628      	mov	r0, r5
 80152ae:	f7ff fb49 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80152b2:	4649      	mov	r1, r9
 80152b4:	900d      	str	r0, [sp, #52]	; 0x34
 80152b6:	a809      	add	r0, sp, #36	; 0x24
 80152b8:	f7ff fb19 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80152be:	18c3      	adds	r3, r0, r3
 80152c0:	4628      	mov	r0, r5
 80152c2:	9303      	str	r3, [sp, #12]
 80152c4:	f7ff fc81 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80152c8:	4649      	mov	r1, r9
 80152ca:	900d      	str	r0, [sp, #52]	; 0x34
 80152cc:	a809      	add	r0, sp, #36	; 0x24
 80152ce:	f7ff fb0e 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80152d4:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 80152d8:	1a1b      	subs	r3, r3, r0
 80152da:	9302      	str	r3, [sp, #8]
 80152dc:	9204      	str	r2, [sp, #16]
 80152de:	eb05 030a 	add.w	r3, r5, sl
 80152e2:	9a04      	ldr	r2, [sp, #16]
 80152e4:	4293      	cmp	r3, r2
 80152e6:	da25      	bge.n	8015334 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 80152e8:	4618      	mov	r0, r3
 80152ea:	9306      	str	r3, [sp, #24]
 80152ec:	f7ff fb2a 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80152f0:	4649      	mov	r1, r9
 80152f2:	900d      	str	r0, [sp, #52]	; 0x34
 80152f4:	a80a      	add	r0, sp, #40	; 0x28
 80152f6:	f7ff fafa 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152fa:	2202      	movs	r2, #2
 80152fc:	fb90 f0f2 	sdiv	r0, r0, r2
 8015300:	9b03      	ldr	r3, [sp, #12]
 8015302:	9207      	str	r2, [sp, #28]
 8015304:	18c3      	adds	r3, r0, r3
 8015306:	9305      	str	r3, [sp, #20]
 8015308:	9b06      	ldr	r3, [sp, #24]
 801530a:	4618      	mov	r0, r3
 801530c:	f7ff fc5d 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015310:	a92a      	add	r1, sp, #168	; 0xa8
 8015312:	f841 0d78 	str.w	r0, [r1, #-120]!
 8015316:	a80a      	add	r0, sp, #40	; 0x28
 8015318:	f7ff fae9 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801531c:	9a07      	ldr	r2, [sp, #28]
 801531e:	9b02      	ldr	r3, [sp, #8]
 8015320:	fb90 f2f2 	sdiv	r2, r0, r2
 8015324:	9905      	ldr	r1, [sp, #20]
 8015326:	1a9a      	subs	r2, r3, r2
 8015328:	a80e      	add	r0, sp, #56	; 0x38
 801532a:	f010 fd93 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801532e:	9b06      	ldr	r3, [sp, #24]
 8015330:	4453      	add	r3, sl
 8015332:	e7d6      	b.n	80152e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8015334:	455d      	cmp	r5, fp
 8015336:	dd25      	ble.n	8015384 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8015338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801533c:	4628      	mov	r0, r5
 801533e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015342:	930b      	str	r3, [sp, #44]	; 0x2c
 8015344:	f7ff fafe 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015348:	4641      	mov	r1, r8
 801534a:	900c      	str	r0, [sp, #48]	; 0x30
 801534c:	a80b      	add	r0, sp, #44	; 0x2c
 801534e:	f7ff face 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015352:	2202      	movs	r2, #2
 8015354:	fb90 f0f2 	sdiv	r0, r0, r2
 8015358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801535a:	9202      	str	r2, [sp, #8]
 801535c:	eb00 0903 	add.w	r9, r0, r3
 8015360:	4628      	mov	r0, r5
 8015362:	f7ff fc32 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015366:	a92a      	add	r1, sp, #168	; 0xa8
 8015368:	f841 0d74 	str.w	r0, [r1, #-116]!
 801536c:	a80b      	add	r0, sp, #44	; 0x2c
 801536e:	f7ff fabe 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015372:	9a02      	ldr	r2, [sp, #8]
 8015374:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015376:	fb90 f2f2 	sdiv	r2, r0, r2
 801537a:	4649      	mov	r1, r9
 801537c:	1a9a      	subs	r2, r3, r2
 801537e:	a80e      	add	r0, sp, #56	; 0x38
 8015380:	f010 fd68 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015384:	46d9      	mov	r9, fp
 8015386:	2502      	movs	r5, #2
 8015388:	45b1      	cmp	r9, r6
 801538a:	db25      	blt.n	80153d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 801538c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015390:	4648      	mov	r0, r9
 8015392:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015396:	930b      	str	r3, [sp, #44]	; 0x2c
 8015398:	f7ff fad4 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801539c:	4641      	mov	r1, r8
 801539e:	900c      	str	r0, [sp, #48]	; 0x30
 80153a0:	a80b      	add	r0, sp, #44	; 0x2c
 80153a2:	f7ff faa4 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153a6:	fb90 f0f5 	sdiv	r0, r0, r5
 80153aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80153ac:	eb00 0b03 	add.w	fp, r0, r3
 80153b0:	4648      	mov	r0, r9
 80153b2:	f7ff fc0a 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80153b6:	a90d      	add	r1, sp, #52	; 0x34
 80153b8:	900d      	str	r0, [sp, #52]	; 0x34
 80153ba:	a80b      	add	r0, sp, #44	; 0x2c
 80153bc:	f7ff fa97 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153c0:	fb90 f0f5 	sdiv	r0, r0, r5
 80153c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80153c6:	4659      	mov	r1, fp
 80153c8:	1a12      	subs	r2, r2, r0
 80153ca:	a80e      	add	r0, sp, #56	; 0x38
 80153cc:	46cb      	mov	fp, r9
 80153ce:	f010 fd41 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80153d2:	eba9 0907 	sub.w	r9, r9, r7
 80153d6:	e7d7      	b.n	8015388 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 80153d8:	455e      	cmp	r6, fp
 80153da:	da22      	bge.n	8015422 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 80153dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153e0:	4630      	mov	r0, r6
 80153e2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80153e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80153e8:	f7ff faac 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80153ec:	4641      	mov	r1, r8
 80153ee:	900c      	str	r0, [sp, #48]	; 0x30
 80153f0:	a80b      	add	r0, sp, #44	; 0x2c
 80153f2:	f7ff fa7c 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153f6:	2502      	movs	r5, #2
 80153f8:	fb90 f0f5 	sdiv	r0, r0, r5
 80153fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80153fe:	4407      	add	r7, r0
 8015400:	4630      	mov	r0, r6
 8015402:	f7ff fbe2 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015406:	a92a      	add	r1, sp, #168	; 0xa8
 8015408:	f841 0d74 	str.w	r0, [r1, #-116]!
 801540c:	a80b      	add	r0, sp, #44	; 0x2c
 801540e:	f7ff fa6e 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015412:	fb90 f0f5 	sdiv	r0, r0, r5
 8015416:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015418:	4639      	mov	r1, r7
 801541a:	1a12      	subs	r2, r2, r0
 801541c:	a80e      	add	r0, sp, #56	; 0x38
 801541e:	f010 fd19 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015422:	9b01      	ldr	r3, [sp, #4]
 8015424:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015428:	f6bf af29 	bge.w	801527e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 801542c:	4630      	mov	r0, r6
 801542e:	f7ff fa89 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015432:	ad2a      	add	r5, sp, #168	; 0xa8
 8015434:	f845 0d74 	str.w	r0, [r5, #-116]!
 8015438:	4629      	mov	r1, r5
 801543a:	a809      	add	r0, sp, #36	; 0x24
 801543c:	f7ff fa57 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015440:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015442:	f04f 0b02 	mov.w	fp, #2
 8015446:	eb00 0903 	add.w	r9, r0, r3
 801544a:	4630      	mov	r0, r6
 801544c:	f7ff fbbd 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015450:	4629      	mov	r1, r5
 8015452:	900d      	str	r0, [sp, #52]	; 0x34
 8015454:	a809      	add	r0, sp, #36	; 0x24
 8015456:	f7ff fa4a 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801545a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801545c:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8015460:	eba3 0800 	sub.w	r8, r3, r0
 8015464:	4454      	add	r4, sl
 8015466:	42b4      	cmp	r4, r6
 8015468:	f6bf af09 	bge.w	801527e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 801546c:	4620      	mov	r0, r4
 801546e:	f7ff fa69 	bl	8014944 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015472:	4629      	mov	r1, r5
 8015474:	900d      	str	r0, [sp, #52]	; 0x34
 8015476:	a80a      	add	r0, sp, #40	; 0x28
 8015478:	f7ff fa39 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801547c:	fb90 f0fb 	sdiv	r0, r0, fp
 8015480:	eb00 0709 	add.w	r7, r0, r9
 8015484:	4620      	mov	r0, r4
 8015486:	f7ff fba0 	bl	8014bca <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801548a:	a90c      	add	r1, sp, #48	; 0x30
 801548c:	900c      	str	r0, [sp, #48]	; 0x30
 801548e:	a80a      	add	r0, sp, #40	; 0x28
 8015490:	f7ff fa2d 	bl	80148ee <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015494:	fb90 f2fb 	sdiv	r2, r0, fp
 8015498:	4639      	mov	r1, r7
 801549a:	eba8 0202 	sub.w	r2, r8, r2
 801549e:	a80e      	add	r0, sp, #56	; 0x38
 80154a0:	f010 fcd8 	bl	8025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80154a4:	4454      	add	r4, sl
 80154a6:	e7de      	b.n	8015466 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 80154a8:	2400      	movs	r4, #0
 80154aa:	e6ed      	b.n	8015288 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

080154ac <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80154ac:	2200      	movs	r2, #0
 80154ae:	b510      	push	{r4, lr}
 80154b0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80154b4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80154b8:	8002      	strh	r2, [r0, #0]
 80154ba:	8042      	strh	r2, [r0, #2]
 80154bc:	8084      	strh	r4, [r0, #4]
 80154be:	80c1      	strh	r1, [r0, #6]
 80154c0:	bd10      	pop	{r4, pc}
	...

080154c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80154c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80154c6:	6803      	ldr	r3, [r0, #0]
 80154c8:	460d      	mov	r5, r1
 80154ca:	4604      	mov	r4, r0
 80154cc:	4601      	mov	r1, r0
 80154ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154d0:	a802      	add	r0, sp, #8
 80154d2:	4798      	blx	r3
 80154d4:	466b      	mov	r3, sp
 80154d6:	6828      	ldr	r0, [r5, #0]
 80154d8:	6869      	ldr	r1, [r5, #4]
 80154da:	c303      	stmia	r3!, {r0, r1}
 80154dc:	4668      	mov	r0, sp
 80154de:	4619      	mov	r1, r3
 80154e0:	f7fe f9e4 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 80154e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80154e6:	b1a8      	cbz	r0, 8015514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80154e8:	6803      	ldr	r3, [r0, #0]
 80154ea:	1d21      	adds	r1, r4, #4
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	4798      	blx	r3
 80154f0:	b180      	cbz	r0, 8015514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80154f2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	dd0c      	ble.n	8015514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80154fa:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80154fe:	2d00      	cmp	r5, #0
 8015500:	dd08      	ble.n	8015514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015502:	4a2d      	ldr	r2, [pc, #180]	; (80155b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8015504:	7812      	ldrb	r2, [r2, #0]
 8015506:	b13a      	cbz	r2, 8015518 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8015508:	2a01      	cmp	r2, #1
 801550a:	d02d      	beq.n	8015568 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 801550c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801550e:	6803      	ldr	r3, [r0, #0]
 8015510:	691b      	ldr	r3, [r3, #16]
 8015512:	4798      	blx	r3
 8015514:	b004      	add	sp, #16
 8015516:	bd70      	pop	{r4, r5, r6, pc}
 8015518:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801551c:	441d      	add	r5, r3
 801551e:	b2ad      	uxth	r5, r5
 8015520:	b22e      	sxth	r6, r5
 8015522:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015526:	42b3      	cmp	r3, r6
 8015528:	daf0      	bge.n	801550c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	4669      	mov	r1, sp
 801552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015530:	4620      	mov	r0, r4
 8015532:	4798      	blx	r3
 8015534:	b940      	cbnz	r0, 8015548 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8015536:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801553a:	2b01      	cmp	r3, #1
 801553c:	d004      	beq.n	8015548 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801553e:	3301      	adds	r3, #1
 8015540:	105b      	asrs	r3, r3, #1
 8015542:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015546:	e7f0      	b.n	801552a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8015548:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801554c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015550:	4413      	add	r3, r2
 8015552:	b29b      	uxth	r3, r3
 8015554:	441a      	add	r2, r3
 8015556:	b212      	sxth	r2, r2
 8015558:	4296      	cmp	r6, r2
 801555a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801555e:	dae0      	bge.n	8015522 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015560:	1aeb      	subs	r3, r5, r3
 8015562:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015566:	e7dc      	b.n	8015522 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015568:	f8bd 5000 	ldrh.w	r5, [sp]
 801556c:	441d      	add	r5, r3
 801556e:	b2ad      	uxth	r5, r5
 8015570:	b22e      	sxth	r6, r5
 8015572:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015576:	42b3      	cmp	r3, r6
 8015578:	dac8      	bge.n	801550c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801557a:	6823      	ldr	r3, [r4, #0]
 801557c:	4669      	mov	r1, sp
 801557e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015580:	4620      	mov	r0, r4
 8015582:	4798      	blx	r3
 8015584:	b940      	cbnz	r0, 8015598 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8015586:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801558a:	2b01      	cmp	r3, #1
 801558c:	d004      	beq.n	8015598 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801558e:	3301      	adds	r3, #1
 8015590:	105b      	asrs	r3, r3, #1
 8015592:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015596:	e7f0      	b.n	801557a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8015598:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801559c:	f8bd 3000 	ldrh.w	r3, [sp]
 80155a0:	4413      	add	r3, r2
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	441a      	add	r2, r3
 80155a6:	b212      	sxth	r2, r2
 80155a8:	4296      	cmp	r6, r2
 80155aa:	f8ad 3000 	strh.w	r3, [sp]
 80155ae:	dae0      	bge.n	8015572 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80155b0:	1aeb      	subs	r3, r5, r3
 80155b2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80155b6:	e7dc      	b.n	8015572 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80155b8:	2004f654 	.word	0x2004f654

080155bc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80155bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155be:	6803      	ldr	r3, [r0, #0]
 80155c0:	4604      	mov	r4, r0
 80155c2:	4601      	mov	r1, r0
 80155c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80155c6:	4668      	mov	r0, sp
 80155c8:	4798      	blx	r3
 80155ca:	2100      	movs	r1, #0
 80155cc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80155d0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80155d4:	9102      	str	r1, [sp, #8]
 80155d6:	4668      	mov	r0, sp
 80155d8:	a902      	add	r1, sp, #8
 80155da:	f8ad 200c 	strh.w	r2, [sp, #12]
 80155de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80155e2:	f7fe f963 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 80155e6:	6823      	ldr	r3, [r4, #0]
 80155e8:	4669      	mov	r1, sp
 80155ea:	691b      	ldr	r3, [r3, #16]
 80155ec:	4620      	mov	r0, r4
 80155ee:	4798      	blx	r3
 80155f0:	b004      	add	sp, #16
 80155f2:	bd10      	pop	{r4, pc}

080155f4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80155f4:	2101      	movs	r1, #1
 80155f6:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80155fa:	490b      	ldr	r1, [pc, #44]	; (8015628 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	6001      	str	r1, [r0, #0]
 8015600:	21ff      	movs	r1, #255	; 0xff
 8015602:	8082      	strh	r2, [r0, #4]
 8015604:	80c2      	strh	r2, [r0, #6]
 8015606:	8102      	strh	r2, [r0, #8]
 8015608:	8142      	strh	r2, [r0, #10]
 801560a:	8182      	strh	r2, [r0, #12]
 801560c:	81c2      	strh	r2, [r0, #14]
 801560e:	8202      	strh	r2, [r0, #16]
 8015610:	8242      	strh	r2, [r0, #18]
 8015612:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015616:	61c2      	str	r2, [r0, #28]
 8015618:	8402      	strh	r2, [r0, #32]
 801561a:	8442      	strh	r2, [r0, #34]	; 0x22
 801561c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015620:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8015624:	6282      	str	r2, [r0, #40]	; 0x28
 8015626:	4770      	bx	lr
 8015628:	0802916c 	.word	0x0802916c

0801562c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 801562c:	b508      	push	{r3, lr}
 801562e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8015632:	b10b      	cbz	r3, 8015638 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8015634:	f7f8 fbba 	bl	800ddac <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8015638:	bd08      	pop	{r3, pc}

0801563a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801563a:	6803      	ldr	r3, [r0, #0]
 801563c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8015640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015642:	4718      	bx	r3

08015644 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8015644:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015648:	b510      	push	{r4, lr}
 801564a:	2bff      	cmp	r3, #255	; 0xff
 801564c:	d104      	bne.n	8015658 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801564e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015652:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8015654:	429a      	cmp	r2, r3
 8015656:	d105      	bne.n	8015664 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8015658:	2300      	movs	r3, #0
 801565a:	8003      	strh	r3, [r0, #0]
 801565c:	8043      	strh	r3, [r0, #2]
 801565e:	8083      	strh	r3, [r0, #4]
 8015660:	80c3      	strh	r3, [r0, #6]
 8015662:	bd10      	pop	{r4, pc}
 8015664:	2300      	movs	r3, #0
 8015666:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801566a:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801566e:	8003      	strh	r3, [r0, #0]
 8015670:	8043      	strh	r3, [r0, #2]
 8015672:	8084      	strh	r4, [r0, #4]
 8015674:	80c2      	strh	r2, [r0, #6]
 8015676:	e7f4      	b.n	8015662 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08015678 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8015678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801567c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8015680:	b087      	sub	sp, #28
 8015682:	4604      	mov	r4, r0
 8015684:	4689      	mov	r9, r1
 8015686:	b363      	cbz	r3, 80156e2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8015688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801568c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801568e:	429a      	cmp	r2, r3
 8015690:	d027      	beq.n	80156e2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8015692:	ad06      	add	r5, sp, #24
 8015694:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8015698:	4628      	mov	r0, r5
 801569a:	f004 fc95 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801569e:	2700      	movs	r7, #0
 80156a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80156a4:	a904      	add	r1, sp, #16
 80156a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156aa:	6823      	ldr	r3, [r4, #0]
 80156ac:	f8ad 0014 	strh.w	r0, [sp, #20]
 80156b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b2:	4620      	mov	r0, r4
 80156b4:	9704      	str	r7, [sp, #16]
 80156b6:	4798      	blx	r3
 80156b8:	f7f8 fcfe 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 80156bc:	6803      	ldr	r3, [r0, #0]
 80156be:	4606      	mov	r6, r0
 80156c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80156c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80156c6:	4628      	mov	r0, r5
 80156c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80156cc:	f004 fd68 	bl	801a1a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80156d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80156d4:	4601      	mov	r1, r0
 80156d6:	9300      	str	r3, [sp, #0]
 80156d8:	9701      	str	r7, [sp, #4]
 80156da:	464b      	mov	r3, r9
 80156dc:	aa04      	add	r2, sp, #16
 80156de:	4630      	mov	r0, r6
 80156e0:	47c0      	blx	r8
 80156e2:	b007      	add	sp, #28
 80156e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080156e8 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80156e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80156ea:	460d      	mov	r5, r1
 80156ec:	2100      	movs	r1, #0
 80156ee:	4604      	mov	r4, r0
 80156f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80156f4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80156f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80156fc:	6803      	ldr	r3, [r0, #0]
 80156fe:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015704:	9100      	str	r1, [sp, #0]
 8015706:	4669      	mov	r1, sp
 8015708:	4798      	blx	r3
 801570a:	4621      	mov	r1, r4
 801570c:	a802      	add	r0, sp, #8
 801570e:	f003 f845 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015712:	f7f8 fcd1 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8015716:	6803      	ldr	r3, [r0, #0]
 8015718:	aa02      	add	r2, sp, #8
 801571a:	695e      	ldr	r6, [r3, #20]
 801571c:	4669      	mov	r1, sp
 801571e:	462b      	mov	r3, r5
 8015720:	47b0      	blx	r6
 8015722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015726:	2800      	cmp	r0, #0
 8015728:	bf08      	it	eq
 801572a:	461d      	moveq	r5, r3
 801572c:	84e5      	strh	r5, [r4, #38]	; 0x26
 801572e:	b004      	add	sp, #16
 8015730:	bd70      	pop	{r4, r5, r6, pc}
	...

08015734 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8015734:	2200      	movs	r2, #0
 8015736:	8082      	strh	r2, [r0, #4]
 8015738:	80c2      	strh	r2, [r0, #6]
 801573a:	8102      	strh	r2, [r0, #8]
 801573c:	8142      	strh	r2, [r0, #10]
 801573e:	8182      	strh	r2, [r0, #12]
 8015740:	81c2      	strh	r2, [r0, #14]
 8015742:	8202      	strh	r2, [r0, #16]
 8015744:	8242      	strh	r2, [r0, #18]
 8015746:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801574a:	61c2      	str	r2, [r0, #28]
 801574c:	8402      	strh	r2, [r0, #32]
 801574e:	8442      	strh	r2, [r0, #34]	; 0x22
 8015750:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015754:	2201      	movs	r2, #1
 8015756:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801575a:	4a04      	ldr	r2, [pc, #16]	; (801576c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 801575c:	6002      	str	r2, [r0, #0]
 801575e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015762:	84c2      	strh	r2, [r0, #38]	; 0x26
 8015764:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	080291e4 	.word	0x080291e4

08015770 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015770:	2300      	movs	r3, #0
 8015772:	8083      	strh	r3, [r0, #4]
 8015774:	80c3      	strh	r3, [r0, #6]
 8015776:	8003      	strh	r3, [r0, #0]
 8015778:	8043      	strh	r3, [r0, #2]
 801577a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801577e:	2bff      	cmp	r3, #255	; 0xff
 8015780:	bf01      	itttt	eq
 8015782:	890b      	ldrheq	r3, [r1, #8]
 8015784:	8083      	strheq	r3, [r0, #4]
 8015786:	894b      	ldrheq	r3, [r1, #10]
 8015788:	80c3      	strheq	r3, [r0, #6]
 801578a:	4770      	bx	lr

0801578c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801578c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801578e:	4604      	mov	r4, r0
 8015790:	466b      	mov	r3, sp
 8015792:	6808      	ldr	r0, [r1, #0]
 8015794:	6849      	ldr	r1, [r1, #4]
 8015796:	c303      	stmia	r3!, {r0, r1}
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	4669      	mov	r1, sp
 801579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801579e:	4620      	mov	r0, r4
 80157a0:	4798      	blx	r3
 80157a2:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80157aa:	b10a      	cbz	r2, 80157b0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80157ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80157ae:	b900      	cbnz	r0, 80157b2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80157b0:	6898      	ldr	r0, [r3, #8]
 80157b2:	6803      	ldr	r3, [r0, #0]
 80157b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80157b6:	6a1d      	ldr	r5, [r3, #32]
 80157b8:	4669      	mov	r1, sp
 80157ba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80157be:	47a8      	blx	r5
 80157c0:	b003      	add	sp, #12
 80157c2:	bd30      	pop	{r4, r5, pc}
 80157c4:	2004f65c 	.word	0x2004f65c

080157c8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80157c8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80157cc:	b12a      	cbz	r2, 80157da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80157ce:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80157d2:	b112      	cbz	r2, 80157da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80157d4:	6803      	ldr	r3, [r0, #0]
 80157d6:	695b      	ldr	r3, [r3, #20]
 80157d8:	4718      	bx	r3
 80157da:	4770      	bx	lr

080157dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80157dc:	b570      	push	{r4, r5, r6, lr}
 80157de:	880b      	ldrh	r3, [r1, #0]
 80157e0:	4604      	mov	r4, r0
 80157e2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80157e4:	4608      	mov	r0, r1
 80157e6:	460d      	mov	r5, r1
 80157e8:	f004 fbee 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80157ec:	4606      	mov	r6, r0
 80157ee:	4628      	mov	r0, r5
 80157f0:	f004 fc1e 	bl	801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80157f4:	4605      	mov	r5, r0
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	4631      	mov	r1, r6
 80157fa:	4620      	mov	r0, r4
 80157fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157fe:	4798      	blx	r3
 8015800:	6823      	ldr	r3, [r4, #0]
 8015802:	4629      	mov	r1, r5
 8015804:	4620      	mov	r0, r4
 8015806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801580c:	4718      	bx	r3

0801580e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801580e:	b510      	push	{r4, lr}
 8015810:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015814:	4604      	mov	r4, r0
 8015816:	2bff      	cmp	r3, #255	; 0xff
 8015818:	d006      	beq.n	8015828 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801581a:	2300      	movs	r3, #0
 801581c:	8003      	strh	r3, [r0, #0]
 801581e:	8043      	strh	r3, [r0, #2]
 8015820:	8083      	strh	r3, [r0, #4]
 8015822:	80c3      	strh	r3, [r0, #6]
 8015824:	4620      	mov	r0, r4
 8015826:	bd10      	pop	{r4, pc}
 8015828:	3126      	adds	r1, #38	; 0x26
 801582a:	f004 fc35 	bl	801a098 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801582e:	e7f9      	b.n	8015824 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015830 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015830:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015834:	b12a      	cbz	r2, 8015842 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015836:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801583a:	b112      	cbz	r2, 8015842 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801583c:	6803      	ldr	r3, [r0, #0]
 801583e:	695b      	ldr	r3, [r3, #20]
 8015840:	4718      	bx	r3
 8015842:	4770      	bx	lr

08015844 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015848:	4604      	mov	r4, r0
 801584a:	2500      	movs	r5, #0
 801584c:	f854 3b26 	ldr.w	r3, [r4], #38
 8015850:	b088      	sub	sp, #32
 8015852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015854:	460f      	mov	r7, r1
 8015856:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801585a:	a904      	add	r1, sp, #16
 801585c:	4606      	mov	r6, r0
 801585e:	4798      	blx	r3
 8015860:	4620      	mov	r0, r4
 8015862:	f004 fbb1 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015866:	4680      	mov	r8, r0
 8015868:	4620      	mov	r0, r4
 801586a:	f004 fbe1 	bl	801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801586e:	9506      	str	r5, [sp, #24]
 8015870:	ad06      	add	r5, sp, #24
 8015872:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015876:	4639      	mov	r1, r7
 8015878:	4628      	mov	r0, r5
 801587a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801587e:	f7fe f815 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8015882:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015886:	2b00      	cmp	r3, #0
 8015888:	dd19      	ble.n	80158be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801588a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801588e:	2b00      	cmp	r3, #0
 8015890:	dd15      	ble.n	80158be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015892:	4b0c      	ldr	r3, [pc, #48]	; (80158c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801589a:	b10a      	cbz	r2, 80158a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801589c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801589e:	b900      	cbnz	r0, 80158a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80158a0:	6898      	ldr	r0, [r3, #8]
 80158a2:	2701      	movs	r7, #1
 80158a4:	6801      	ldr	r1, [r0, #0]
 80158a6:	9702      	str	r7, [sp, #8]
 80158a8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80158ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80158b0:	e9cd 5600 	strd	r5, r6, [sp]
 80158b4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80158b8:	688d      	ldr	r5, [r1, #8]
 80158ba:	4621      	mov	r1, r4
 80158bc:	47a8      	blx	r5
 80158be:	b008      	add	sp, #32
 80158c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158c4:	2004f65c 	.word	0x2004f65c

080158c8 <_ZN8touchgfx7OutlineD1Ev>:
 80158c8:	4770      	bx	lr

080158ca <_ZN8touchgfx7OutlineD0Ev>:
 80158ca:	b510      	push	{r4, lr}
 80158cc:	4604      	mov	r4, r0
 80158ce:	2130      	movs	r1, #48	; 0x30
 80158d0:	f010 fc3a 	bl	8026148 <_ZdlPvj>
 80158d4:	4620      	mov	r0, r4
 80158d6:	bd10      	pop	{r4, pc}

080158d8 <_ZN8touchgfx7Outline5resetEv>:
 80158d8:	b510      	push	{r4, lr}
 80158da:	4604      	mov	r4, r0
 80158dc:	f000 fe8a 	bl	80165f4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80158e0:	60e0      	str	r0, [r4, #12]
 80158e2:	f000 fe8d 	bl	8016600 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80158e6:	2200      	movs	r2, #0
 80158e8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80158ec:	68e3      	ldr	r3, [r4, #12]
 80158ee:	08c0      	lsrs	r0, r0, #3
 80158f0:	3801      	subs	r0, #1
 80158f2:	6123      	str	r3, [r4, #16]
 80158f4:	6060      	str	r0, [r4, #4]
 80158f6:	60a2      	str	r2, [r4, #8]
 80158f8:	8019      	strh	r1, [r3, #0]
 80158fa:	8059      	strh	r1, [r3, #2]
 80158fc:	809a      	strh	r2, [r3, #4]
 80158fe:	80da      	strh	r2, [r3, #6]
 8015900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015902:	f023 0301 	bic.w	r3, r3, #1
 8015906:	f043 0302 	orr.w	r3, r3, #2
 801590a:	6263      	str	r3, [r4, #36]	; 0x24
 801590c:	bd10      	pop	{r4, pc}
	...

08015910 <_ZN8touchgfx7OutlineC1Ev>:
 8015910:	4b0a      	ldr	r3, [pc, #40]	; (801593c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015912:	b510      	push	{r4, lr}
 8015914:	6003      	str	r3, [r0, #0]
 8015916:	2300      	movs	r3, #0
 8015918:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801591c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015920:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015924:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015928:	6243      	str	r3, [r0, #36]	; 0x24
 801592a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801592e:	4604      	mov	r4, r0
 8015930:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015934:	f7ff ffd0 	bl	80158d8 <_ZN8touchgfx7Outline5resetEv>
 8015938:	4620      	mov	r0, r4
 801593a:	bd10      	pop	{r4, pc}
 801593c:	08029328 	.word	0x08029328

08015940 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015944:	b093      	sub	sp, #76	; 0x4c
 8015946:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015948:	9305      	str	r3, [sp, #20]
 801594a:	f004 051f 	and.w	r5, r4, #31
 801594e:	1153      	asrs	r3, r2, #5
 8015950:	9504      	str	r5, [sp, #16]
 8015952:	1156      	asrs	r6, r2, #5
 8015954:	1165      	asrs	r5, r4, #5
 8015956:	9303      	str	r3, [sp, #12]
 8015958:	42ae      	cmp	r6, r5
 801595a:	ea4f 1364 	mov.w	r3, r4, asr #5
 801595e:	9306      	str	r3, [sp, #24]
 8015960:	f002 031f 	and.w	r3, r2, #31
 8015964:	f040 80f8 	bne.w	8015b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8015968:	9c04      	ldr	r4, [sp, #16]
 801596a:	9a05      	ldr	r2, [sp, #20]
 801596c:	42a3      	cmp	r3, r4
 801596e:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015972:	6902      	ldr	r2, [r0, #16]
 8015974:	d125      	bne.n	80159c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8015976:	f9b2 3000 	ldrsh.w	r3, [r2]
 801597a:	459e      	cmp	lr, r3
 801597c:	d103      	bne.n	8015986 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801597e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015982:	429e      	cmp	r6, r3
 8015984:	d035      	beq.n	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015986:	88d1      	ldrh	r1, [r2, #6]
 8015988:	8893      	ldrh	r3, [r2, #4]
 801598a:	430b      	orrs	r3, r1
 801598c:	d010      	beq.n	80159b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801598e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015992:	2b00      	cmp	r3, #0
 8015994:	db0c      	blt.n	80159b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8015996:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015998:	428b      	cmp	r3, r1
 801599a:	da09      	bge.n	80159b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801599c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80159a0:	428b      	cmp	r3, r1
 80159a2:	bf38      	it	cc
 80159a4:	3208      	addcc	r2, #8
 80159a6:	f103 0301 	add.w	r3, r3, #1
 80159aa:	bf38      	it	cc
 80159ac:	6102      	strcc	r2, [r0, #16]
 80159ae:	6083      	str	r3, [r0, #8]
 80159b0:	6903      	ldr	r3, [r0, #16]
 80159b2:	9a03      	ldr	r2, [sp, #12]
 80159b4:	f8a3 e000 	strh.w	lr, [r3]
 80159b8:	805a      	strh	r2, [r3, #2]
 80159ba:	2200      	movs	r2, #0
 80159bc:	809a      	strh	r2, [r3, #4]
 80159be:	80da      	strh	r2, [r3, #6]
 80159c0:	e017      	b.n	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80159c2:	9c05      	ldr	r4, [sp, #20]
 80159c4:	114e      	asrs	r6, r1, #5
 80159c6:	f004 041f 	and.w	r4, r4, #31
 80159ca:	9402      	str	r4, [sp, #8]
 80159cc:	9c04      	ldr	r4, [sp, #16]
 80159ce:	4576      	cmp	r6, lr
 80159d0:	f001 0c1f 	and.w	ip, r1, #31
 80159d4:	eba4 0403 	sub.w	r4, r4, r3
 80159d8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80159dc:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80159e0:	d10a      	bne.n	80159f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80159e2:	9b02      	ldr	r3, [sp, #8]
 80159e4:	44a0      	add	r8, r4
 80159e6:	449c      	add	ip, r3
 80159e8:	fb04 a40c 	mla	r4, r4, ip, sl
 80159ec:	f8a2 8004 	strh.w	r8, [r2, #4]
 80159f0:	80d4      	strh	r4, [r2, #6]
 80159f2:	b013      	add	sp, #76	; 0x4c
 80159f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f8:	9d05      	ldr	r5, [sp, #20]
 80159fa:	1a69      	subs	r1, r5, r1
 80159fc:	bf5b      	ittet	pl
 80159fe:	f1cc 0520 	rsbpl	r5, ip, #32
 8015a02:	436c      	mulpl	r4, r5
 8015a04:	2500      	movmi	r5, #0
 8015a06:	2520      	movpl	r5, #32
 8015a08:	bf44      	itt	mi
 8015a0a:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015a0e:	4249      	negmi	r1, r1
 8015a10:	9501      	str	r5, [sp, #4]
 8015a12:	fb94 f5f1 	sdiv	r5, r4, r1
 8015a16:	bf54      	ite	pl
 8015a18:	f04f 0901 	movpl.w	r9, #1
 8015a1c:	f04f 39ff 	movmi.w	r9, #4294967295
 8015a20:	fb01 4415 	mls	r4, r1, r5, r4
 8015a24:	9f01      	ldr	r7, [sp, #4]
 8015a26:	2c00      	cmp	r4, #0
 8015a28:	bfb8      	it	lt
 8015a2a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015a2e:	44bc      	add	ip, r7
 8015a30:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015a34:	44a8      	add	r8, r5
 8015a36:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015a3a:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015a3e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015a42:	bfb8      	it	lt
 8015a44:	1864      	addlt	r4, r4, r1
 8015a46:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015a4a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015a4e:	444e      	add	r6, r9
 8015a50:	ea58 0202 	orrs.w	r2, r8, r2
 8015a54:	d011      	beq.n	8015a7a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015a56:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015a5a:	f1b8 0f00 	cmp.w	r8, #0
 8015a5e:	db0c      	blt.n	8015a7a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015a60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015a62:	4590      	cmp	r8, r2
 8015a64:	da09      	bge.n	8015a7a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8015a66:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015a6a:	4590      	cmp	r8, r2
 8015a6c:	bf3c      	itt	cc
 8015a6e:	f10c 0208 	addcc.w	r2, ip, #8
 8015a72:	6102      	strcc	r2, [r0, #16]
 8015a74:	f108 0201 	add.w	r2, r8, #1
 8015a78:	6082      	str	r2, [r0, #8]
 8015a7a:	2700      	movs	r7, #0
 8015a7c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015a80:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015a84:	45b6      	cmp	lr, r6
 8015a86:	f8ac 6000 	strh.w	r6, [ip]
 8015a8a:	f8ac 2002 	strh.w	r2, [ip, #2]
 8015a8e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015a92:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015a96:	442b      	add	r3, r5
 8015a98:	d04d      	beq.n	8015b36 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8015a9a:	9f04      	ldr	r7, [sp, #16]
 8015a9c:	f04f 0a00 	mov.w	sl, #0
 8015aa0:	1aff      	subs	r7, r7, r3
 8015aa2:	443d      	add	r5, r7
 8015aa4:	016d      	lsls	r5, r5, #5
 8015aa6:	fb95 f8f1 	sdiv	r8, r5, r1
 8015aaa:	fb01 5518 	mls	r5, r1, r8, r5
 8015aae:	2d00      	cmp	r5, #0
 8015ab0:	bfb8      	it	lt
 8015ab2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015ab6:	f108 0701 	add.w	r7, r8, #1
 8015aba:	bfb8      	it	lt
 8015abc:	186d      	addlt	r5, r5, r1
 8015abe:	1a64      	subs	r4, r4, r1
 8015ac0:	9703      	str	r7, [sp, #12]
 8015ac2:	1964      	adds	r4, r4, r5
 8015ac4:	bf48      	it	mi
 8015ac6:	4647      	movmi	r7, r8
 8015ac8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015acc:	bf58      	it	pl
 8015ace:	9f03      	ldrpl	r7, [sp, #12]
 8015ad0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015ad4:	443b      	add	r3, r7
 8015ad6:	44bb      	add	fp, r7
 8015ad8:	f8ac b004 	strh.w	fp, [ip, #4]
 8015adc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015ae0:	bf58      	it	pl
 8015ae2:	1a64      	subpl	r4, r4, r1
 8015ae4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015ae8:	f8ac b006 	strh.w	fp, [ip, #6]
 8015aec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015af0:	444e      	add	r6, r9
 8015af2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015af6:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015afa:	ea5b 0707 	orrs.w	r7, fp, r7
 8015afe:	d011      	beq.n	8015b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015b00:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015b04:	f1bb 0f00 	cmp.w	fp, #0
 8015b08:	db0c      	blt.n	8015b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015b0a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015b0c:	45bb      	cmp	fp, r7
 8015b0e:	da09      	bge.n	8015b24 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8015b10:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015b14:	45bb      	cmp	fp, r7
 8015b16:	bf3c      	itt	cc
 8015b18:	f10c 0708 	addcc.w	r7, ip, #8
 8015b1c:	6107      	strcc	r7, [r0, #16]
 8015b1e:	f10b 0701 	add.w	r7, fp, #1
 8015b22:	6087      	str	r7, [r0, #8]
 8015b24:	6907      	ldr	r7, [r0, #16]
 8015b26:	45b6      	cmp	lr, r6
 8015b28:	803e      	strh	r6, [r7, #0]
 8015b2a:	807a      	strh	r2, [r7, #2]
 8015b2c:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015b30:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015b34:	d1c5      	bne.n	8015ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8015b36:	9a04      	ldr	r2, [sp, #16]
 8015b38:	1ad3      	subs	r3, r2, r3
 8015b3a:	6902      	ldr	r2, [r0, #16]
 8015b3c:	8891      	ldrh	r1, [r2, #4]
 8015b3e:	88d6      	ldrh	r6, [r2, #6]
 8015b40:	4419      	add	r1, r3
 8015b42:	8091      	strh	r1, [r2, #4]
 8015b44:	9902      	ldr	r1, [sp, #8]
 8015b46:	f101 0c20 	add.w	ip, r1, #32
 8015b4a:	9901      	ldr	r1, [sp, #4]
 8015b4c:	ebac 0c01 	sub.w	ip, ip, r1
 8015b50:	fb03 630c 	mla	r3, r3, ip, r6
 8015b54:	80d3      	strh	r3, [r2, #6]
 8015b56:	e74c      	b.n	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015b58:	9d05      	ldr	r5, [sp, #20]
 8015b5a:	1aa2      	subs	r2, r4, r2
 8015b5c:	eba5 0501 	sub.w	r5, r5, r1
 8015b60:	9508      	str	r5, [sp, #32]
 8015b62:	9202      	str	r2, [sp, #8]
 8015b64:	f140 8128 	bpl.w	8015db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8015b68:	9a03      	ldr	r2, [sp, #12]
 8015b6a:	2a00      	cmp	r2, #0
 8015b6c:	f6ff af41 	blt.w	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015b70:	f04f 34ff 	mov.w	r4, #4294967295
 8015b74:	9a02      	ldr	r2, [sp, #8]
 8015b76:	940b      	str	r4, [sp, #44]	; 0x2c
 8015b78:	4252      	negs	r2, r2
 8015b7a:	9202      	str	r2, [sp, #8]
 8015b7c:	9a06      	ldr	r2, [sp, #24]
 8015b7e:	2400      	movs	r4, #0
 8015b80:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8015b84:	9206      	str	r2, [sp, #24]
 8015b86:	462a      	mov	r2, r5
 8015b88:	435a      	muls	r2, r3
 8015b8a:	9401      	str	r4, [sp, #4]
 8015b8c:	9c02      	ldr	r4, [sp, #8]
 8015b8e:	9d02      	ldr	r5, [sp, #8]
 8015b90:	fb92 f4f4 	sdiv	r4, r2, r4
 8015b94:	fb05 2214 	mls	r2, r5, r4, r2
 8015b98:	2a00      	cmp	r2, #0
 8015b9a:	9207      	str	r2, [sp, #28]
 8015b9c:	bfbc      	itt	lt
 8015b9e:	1952      	addlt	r2, r2, r5
 8015ba0:	9207      	strlt	r2, [sp, #28]
 8015ba2:	9a01      	ldr	r2, [sp, #4]
 8015ba4:	bfb8      	it	lt
 8015ba6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015baa:	eb04 0901 	add.w	r9, r4, r1
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015bb4:	6905      	ldr	r5, [r0, #16]
 8015bb6:	f040 8112 	bne.w	8015dde <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8015bba:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015bbe:	429e      	cmp	r6, r3
 8015bc0:	d104      	bne.n	8015bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8015bc2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015bc6:	9a03      	ldr	r2, [sp, #12]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d01b      	beq.n	8015c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015bcc:	88ea      	ldrh	r2, [r5, #6]
 8015bce:	88ab      	ldrh	r3, [r5, #4]
 8015bd0:	4313      	orrs	r3, r2
 8015bd2:	d010      	beq.n	8015bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015bd4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015bd8:	2a00      	cmp	r2, #0
 8015bda:	db0c      	blt.n	8015bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015bdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015bde:	429a      	cmp	r2, r3
 8015be0:	da09      	bge.n	8015bf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8015be2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	bf38      	it	cc
 8015bea:	3508      	addcc	r5, #8
 8015bec:	f102 0201 	add.w	r2, r2, #1
 8015bf0:	bf38      	it	cc
 8015bf2:	6105      	strcc	r5, [r0, #16]
 8015bf4:	6082      	str	r2, [r0, #8]
 8015bf6:	6903      	ldr	r3, [r0, #16]
 8015bf8:	9a03      	ldr	r2, [sp, #12]
 8015bfa:	801e      	strh	r6, [r3, #0]
 8015bfc:	805a      	strh	r2, [r3, #2]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	809a      	strh	r2, [r3, #4]
 8015c02:	80da      	strh	r2, [r3, #6]
 8015c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c06:	9a03      	ldr	r2, [sp, #12]
 8015c08:	6901      	ldr	r1, [r0, #16]
 8015c0a:	441a      	add	r2, r3
 8015c0c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015c10:	42b3      	cmp	r3, r6
 8015c12:	d103      	bne.n	8015c1c <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8015c14:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d01a      	beq.n	8015c52 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8015c1c:	88cc      	ldrh	r4, [r1, #6]
 8015c1e:	888b      	ldrh	r3, [r1, #4]
 8015c20:	4323      	orrs	r3, r4
 8015c22:	d010      	beq.n	8015c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015c24:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015c28:	2c00      	cmp	r4, #0
 8015c2a:	db0c      	blt.n	8015c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015c2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015c2e:	429c      	cmp	r4, r3
 8015c30:	da09      	bge.n	8015c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8015c32:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015c36:	429c      	cmp	r4, r3
 8015c38:	bf38      	it	cc
 8015c3a:	3108      	addcc	r1, #8
 8015c3c:	f104 0401 	add.w	r4, r4, #1
 8015c40:	bf38      	it	cc
 8015c42:	6101      	strcc	r1, [r0, #16]
 8015c44:	6084      	str	r4, [r0, #8]
 8015c46:	2100      	movs	r1, #0
 8015c48:	6903      	ldr	r3, [r0, #16]
 8015c4a:	801e      	strh	r6, [r3, #0]
 8015c4c:	805a      	strh	r2, [r3, #2]
 8015c4e:	8099      	strh	r1, [r3, #4]
 8015c50:	80d9      	strh	r1, [r3, #6]
 8015c52:	9b06      	ldr	r3, [sp, #24]
 8015c54:	4293      	cmp	r3, r2
 8015c56:	f000 8082 	beq.w	8015d5e <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 8015c5a:	9b08      	ldr	r3, [sp, #32]
 8015c5c:	9902      	ldr	r1, [sp, #8]
 8015c5e:	015b      	lsls	r3, r3, #5
 8015c60:	fb93 f1f1 	sdiv	r1, r3, r1
 8015c64:	9c02      	ldr	r4, [sp, #8]
 8015c66:	9103      	str	r1, [sp, #12]
 8015c68:	fb04 3311 	mls	r3, r4, r1, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	9308      	str	r3, [sp, #32]
 8015c70:	da04      	bge.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8015c72:	1e4b      	subs	r3, r1, #1
 8015c74:	9303      	str	r3, [sp, #12]
 8015c76:	9b08      	ldr	r3, [sp, #32]
 8015c78:	4423      	add	r3, r4
 8015c7a:	9308      	str	r3, [sp, #32]
 8015c7c:	464f      	mov	r7, r9
 8015c7e:	2600      	movs	r6, #0
 8015c80:	9b07      	ldr	r3, [sp, #28]
 8015c82:	9902      	ldr	r1, [sp, #8]
 8015c84:	1a5b      	subs	r3, r3, r1
 8015c86:	9307      	str	r3, [sp, #28]
 8015c88:	9b01      	ldr	r3, [sp, #4]
 8015c8a:	f1c3 0320 	rsb	r3, r3, #32
 8015c8e:	930e      	str	r3, [sp, #56]	; 0x38
 8015c90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c92:	9b01      	ldr	r3, [sp, #4]
 8015c94:	1a5b      	subs	r3, r3, r1
 8015c96:	930a      	str	r3, [sp, #40]	; 0x28
 8015c98:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015c9c:	185b      	adds	r3, r3, r1
 8015c9e:	bf58      	it	pl
 8015ca0:	9902      	ldrpl	r1, [sp, #8]
 8015ca2:	9307      	str	r3, [sp, #28]
 8015ca4:	bf5d      	ittte	pl
 8015ca6:	1a5b      	subpl	r3, r3, r1
 8015ca8:	9307      	strpl	r3, [sp, #28]
 8015caa:	9b03      	ldrpl	r3, [sp, #12]
 8015cac:	9903      	ldrmi	r1, [sp, #12]
 8015cae:	bf58      	it	pl
 8015cb0:	1c59      	addpl	r1, r3, #1
 8015cb2:	4489      	add	r9, r1
 8015cb4:	2a00      	cmp	r2, #0
 8015cb6:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015cba:	db2e      	blt.n	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015cbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	dd2b      	ble.n	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015cc2:	9c01      	ldr	r4, [sp, #4]
 8015cc4:	6905      	ldr	r5, [r0, #16]
 8015cc6:	46a0      	mov	r8, r4
 8015cc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015cca:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015cce:	45a0      	cmp	r8, r4
 8015cd0:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015cd4:	f040 8150 	bne.w	8015f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8015cd8:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015cdc:	4551      	cmp	r1, sl
 8015cde:	d103      	bne.n	8015ce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 8015ce0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015ce4:	4291      	cmp	r1, r2
 8015ce6:	d018      	beq.n	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015ce8:	ea5c 010e 	orrs.w	r1, ip, lr
 8015cec:	d00f      	beq.n	8015d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015cee:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015cf2:	2900      	cmp	r1, #0
 8015cf4:	db0b      	blt.n	8015d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015cf6:	428b      	cmp	r3, r1
 8015cf8:	dd09      	ble.n	8015d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8015cfa:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015cfe:	4299      	cmp	r1, r3
 8015d00:	bf38      	it	cc
 8015d02:	3508      	addcc	r5, #8
 8015d04:	f101 0101 	add.w	r1, r1, #1
 8015d08:	bf38      	it	cc
 8015d0a:	6105      	strcc	r5, [r0, #16]
 8015d0c:	6081      	str	r1, [r0, #8]
 8015d0e:	6903      	ldr	r3, [r0, #16]
 8015d10:	f8a3 a000 	strh.w	sl, [r3]
 8015d14:	805a      	strh	r2, [r3, #2]
 8015d16:	809e      	strh	r6, [r3, #4]
 8015d18:	80de      	strh	r6, [r3, #6]
 8015d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d1c:	6901      	ldr	r1, [r0, #16]
 8015d1e:	441a      	add	r2, r3
 8015d20:	88cc      	ldrh	r4, [r1, #6]
 8015d22:	888b      	ldrh	r3, [r1, #4]
 8015d24:	4323      	orrs	r3, r4
 8015d26:	d010      	beq.n	8015d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015d28:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015d2c:	2c00      	cmp	r4, #0
 8015d2e:	db0c      	blt.n	8015d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015d30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015d32:	429c      	cmp	r4, r3
 8015d34:	da09      	bge.n	8015d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8015d36:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015d3a:	429c      	cmp	r4, r3
 8015d3c:	bf38      	it	cc
 8015d3e:	3108      	addcc	r1, #8
 8015d40:	f104 0401 	add.w	r4, r4, #1
 8015d44:	bf38      	it	cc
 8015d46:	6101      	strcc	r1, [r0, #16]
 8015d48:	6084      	str	r4, [r0, #8]
 8015d4a:	6903      	ldr	r3, [r0, #16]
 8015d4c:	464f      	mov	r7, r9
 8015d4e:	f8a3 a000 	strh.w	sl, [r3]
 8015d52:	805a      	strh	r2, [r3, #2]
 8015d54:	809e      	strh	r6, [r3, #4]
 8015d56:	80de      	strh	r6, [r3, #6]
 8015d58:	9b06      	ldr	r3, [sp, #24]
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	d19c      	bne.n	8015c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 8015d5e:	9b01      	ldr	r3, [sp, #4]
 8015d60:	6907      	ldr	r7, [r0, #16]
 8015d62:	f1c3 0620 	rsb	r6, r3, #32
 8015d66:	9b05      	ldr	r3, [sp, #20]
 8015d68:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015d6c:	9b04      	ldr	r3, [sp, #16]
 8015d6e:	429e      	cmp	r6, r3
 8015d70:	f040 81cc 	bne.w	801610c <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8015d74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015d78:	459e      	cmp	lr, r3
 8015d7a:	d104      	bne.n	8015d86 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8015d7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	f43f ae36 	beq.w	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015d86:	88f9      	ldrh	r1, [r7, #6]
 8015d88:	88bb      	ldrh	r3, [r7, #4]
 8015d8a:	430b      	orrs	r3, r1
 8015d8c:	d010      	beq.n	8015db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015d8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	db0c      	blt.n	8015db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015d96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015d98:	428b      	cmp	r3, r1
 8015d9a:	da09      	bge.n	8015db0 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8015d9c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015da0:	428b      	cmp	r3, r1
 8015da2:	bf38      	it	cc
 8015da4:	3708      	addcc	r7, #8
 8015da6:	f103 0301 	add.w	r3, r3, #1
 8015daa:	bf38      	it	cc
 8015dac:	6107      	strcc	r7, [r0, #16]
 8015dae:	6083      	str	r3, [r0, #8]
 8015db0:	6903      	ldr	r3, [r0, #16]
 8015db2:	f8a3 e000 	strh.w	lr, [r3]
 8015db6:	e5ff      	b.n	80159b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8015db8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015dba:	9c03      	ldr	r4, [sp, #12]
 8015dbc:	42a2      	cmp	r2, r4
 8015dbe:	f6ff ae18 	blt.w	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8015dc2:	9c06      	ldr	r4, [sp, #24]
 8015dc4:	42a2      	cmp	r2, r4
 8015dc6:	bfb8      	it	lt
 8015dc8:	3201      	addlt	r2, #1
 8015dca:	9c08      	ldr	r4, [sp, #32]
 8015dcc:	bfb8      	it	lt
 8015dce:	9206      	strlt	r2, [sp, #24]
 8015dd0:	f1c3 0220 	rsb	r2, r3, #32
 8015dd4:	4362      	muls	r2, r4
 8015dd6:	2401      	movs	r4, #1
 8015dd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8015dda:	2420      	movs	r4, #32
 8015ddc:	e6d5      	b.n	8015b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 8015dde:	f009 021f 	and.w	r2, r9, #31
 8015de2:	ea4f 1861 	mov.w	r8, r1, asr #5
 8015de6:	920c      	str	r2, [sp, #48]	; 0x30
 8015de8:	9a01      	ldr	r2, [sp, #4]
 8015dea:	45b0      	cmp	r8, r6
 8015dec:	f001 011f 	and.w	r1, r1, #31
 8015df0:	eba2 0203 	sub.w	r2, r2, r3
 8015df4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8015df8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8015dfc:	d108      	bne.n	8015e10 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 8015dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e00:	4496      	add	lr, r2
 8015e02:	4419      	add	r1, r3
 8015e04:	fb02 a101 	mla	r1, r2, r1, sl
 8015e08:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015e0c:	80e9      	strh	r1, [r5, #6]
 8015e0e:	e6f9      	b.n	8015c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015e10:	2c00      	cmp	r4, #0
 8015e12:	f2c0 80aa 	blt.w	8015f6a <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8015e16:	2701      	movs	r7, #1
 8015e18:	970a      	str	r7, [sp, #40]	; 0x28
 8015e1a:	2720      	movs	r7, #32
 8015e1c:	f1c1 0c20 	rsb	ip, r1, #32
 8015e20:	fb02 f20c 	mul.w	r2, r2, ip
 8015e24:	fb92 fcf4 	sdiv	ip, r2, r4
 8015e28:	fb04 221c 	mls	r2, r4, ip, r2
 8015e2c:	9709      	str	r7, [sp, #36]	; 0x24
 8015e2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015e30:	2a00      	cmp	r2, #0
 8015e32:	bfb8      	it	lt
 8015e34:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8015e38:	4439      	add	r1, r7
 8015e3a:	fb0c a101 	mla	r1, ip, r1, sl
 8015e3e:	44e6      	add	lr, ip
 8015e40:	80e9      	strh	r1, [r5, #6]
 8015e42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015e44:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015e48:	eb08 0501 	add.w	r5, r8, r1
 8015e4c:	6901      	ldr	r1, [r0, #16]
 8015e4e:	bfb8      	it	lt
 8015e50:	1912      	addlt	r2, r2, r4
 8015e52:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8015e56:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8015e5a:	ea58 070e 	orrs.w	r7, r8, lr
 8015e5e:	d010      	beq.n	8015e82 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015e60:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8015e64:	f1be 0f00 	cmp.w	lr, #0
 8015e68:	db0b      	blt.n	8015e82 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015e6a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015e6c:	45be      	cmp	lr, r7
 8015e6e:	da08      	bge.n	8015e82 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8015e70:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015e74:	45be      	cmp	lr, r7
 8015e76:	bf3c      	itt	cc
 8015e78:	3108      	addcc	r1, #8
 8015e7a:	6101      	strcc	r1, [r0, #16]
 8015e7c:	f10e 0101 	add.w	r1, lr, #1
 8015e80:	6081      	str	r1, [r0, #8]
 8015e82:	f04f 0e00 	mov.w	lr, #0
 8015e86:	6901      	ldr	r1, [r0, #16]
 8015e88:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8015e8c:	42ae      	cmp	r6, r5
 8015e8e:	800d      	strh	r5, [r1, #0]
 8015e90:	f8a1 8002 	strh.w	r8, [r1, #2]
 8015e94:	f8a1 e004 	strh.w	lr, [r1, #4]
 8015e98:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015e9c:	4463      	add	r3, ip
 8015e9e:	d055      	beq.n	8015f4c <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 8015ea0:	9901      	ldr	r1, [sp, #4]
 8015ea2:	1b12      	subs	r2, r2, r4
 8015ea4:	1ac9      	subs	r1, r1, r3
 8015ea6:	4461      	add	r1, ip
 8015ea8:	0149      	lsls	r1, r1, #5
 8015eaa:	fb91 fef4 	sdiv	lr, r1, r4
 8015eae:	fb04 111e 	mls	r1, r4, lr, r1
 8015eb2:	2900      	cmp	r1, #0
 8015eb4:	bfb8      	it	lt
 8015eb6:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8015eba:	f10e 0701 	add.w	r7, lr, #1
 8015ebe:	bfb8      	it	lt
 8015ec0:	1909      	addlt	r1, r1, r4
 8015ec2:	970d      	str	r7, [sp, #52]	; 0x34
 8015ec4:	1852      	adds	r2, r2, r1
 8015ec6:	bf48      	it	mi
 8015ec8:	46f4      	movmi	ip, lr
 8015eca:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8015ece:	bf58      	it	pl
 8015ed0:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8015ed4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8015ed8:	4463      	add	r3, ip
 8015eda:	44e3      	add	fp, ip
 8015edc:	f8aa b004 	strh.w	fp, [sl, #4]
 8015ee0:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8015ee4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015ee6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8015eea:	f8aa b006 	strh.w	fp, [sl, #6]
 8015eee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015ef2:	bf58      	it	pl
 8015ef4:	1b12      	subpl	r2, r2, r4
 8015ef6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015efa:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8015efe:	443d      	add	r5, r7
 8015f00:	ea5b 070a 	orrs.w	r7, fp, sl
 8015f04:	d014      	beq.n	8015f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8015f06:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8015f0a:	f1ba 0f00 	cmp.w	sl, #0
 8015f0e:	db0f      	blt.n	8015f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8015f10:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015f12:	45ba      	cmp	sl, r7
 8015f14:	da0c      	bge.n	8015f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8015f16:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8015f1a:	45ba      	cmp	sl, r7
 8015f1c:	bf38      	it	cc
 8015f1e:	f10c 0c08 	addcc.w	ip, ip, #8
 8015f22:	f10a 0a01 	add.w	sl, sl, #1
 8015f26:	bf38      	it	cc
 8015f28:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015f2c:	f8c0 a008 	str.w	sl, [r0, #8]
 8015f30:	f04f 0700 	mov.w	r7, #0
 8015f34:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015f38:	42ae      	cmp	r6, r5
 8015f3a:	f8ac 5000 	strh.w	r5, [ip]
 8015f3e:	f8ac 8002 	strh.w	r8, [ip, #2]
 8015f42:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015f46:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015f4a:	d1bb      	bne.n	8015ec4 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8015f4c:	6904      	ldr	r4, [r0, #16]
 8015f4e:	9a01      	ldr	r2, [sp, #4]
 8015f50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015f52:	1ad3      	subs	r3, r2, r3
 8015f54:	88a2      	ldrh	r2, [r4, #4]
 8015f56:	3120      	adds	r1, #32
 8015f58:	441a      	add	r2, r3
 8015f5a:	80a2      	strh	r2, [r4, #4]
 8015f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f5e:	1a89      	subs	r1, r1, r2
 8015f60:	88e2      	ldrh	r2, [r4, #6]
 8015f62:	fb03 2301 	mla	r3, r3, r1, r2
 8015f66:	80e3      	strh	r3, [r4, #6]
 8015f68:	e64c      	b.n	8015c04 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8015f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8015f6e:	434a      	muls	r2, r1
 8015f70:	970a      	str	r7, [sp, #40]	; 0x28
 8015f72:	4264      	negs	r4, r4
 8015f74:	2700      	movs	r7, #0
 8015f76:	e755      	b.n	8015e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8015f78:	ea4f 1867 	mov.w	r8, r7, asr #5
 8015f7c:	f009 031f 	and.w	r3, r9, #31
 8015f80:	45d0      	cmp	r8, sl
 8015f82:	f007 071f 	and.w	r7, r7, #31
 8015f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f88:	fa1f fc8c 	uxth.w	ip, ip
 8015f8c:	fa1f fe8e 	uxth.w	lr, lr
 8015f90:	d10a      	bne.n	8015fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 8015f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f94:	449c      	add	ip, r3
 8015f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f98:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015f9c:	441f      	add	r7, r3
 8015f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fa0:	fb03 e707 	mla	r7, r3, r7, lr
 8015fa4:	80ef      	strh	r7, [r5, #6]
 8015fa6:	e6b8      	b.n	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8015fa8:	2900      	cmp	r1, #0
 8015faa:	f2c0 80a7 	blt.w	80160fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8015fae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015fb0:	f1c7 0320 	rsb	r3, r7, #32
 8015fb4:	4363      	muls	r3, r4
 8015fb6:	2401      	movs	r4, #1
 8015fb8:	940d      	str	r4, [sp, #52]	; 0x34
 8015fba:	2420      	movs	r4, #32
 8015fbc:	940c      	str	r4, [sp, #48]	; 0x30
 8015fbe:	fb93 f4f1 	sdiv	r4, r3, r1
 8015fc2:	fb01 3b14 	mls	fp, r1, r4, r3
 8015fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fc8:	f1bb 0f00 	cmp.w	fp, #0
 8015fcc:	bfb8      	it	lt
 8015fce:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015fd2:	441f      	add	r7, r3
 8015fd4:	fb04 e707 	mla	r7, r4, r7, lr
 8015fd8:	44a4      	add	ip, r4
 8015fda:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015fde:	80ef      	strh	r7, [r5, #6]
 8015fe0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fe6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8015fea:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015fee:	bfb8      	it	lt
 8015ff0:	448b      	addlt	fp, r1
 8015ff2:	eb08 0503 	add.w	r5, r8, r3
 8015ff6:	ea5e 0307 	orrs.w	r3, lr, r7
 8015ffa:	d011      	beq.n	8016020 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8015ffc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8016000:	f1be 0f00 	cmp.w	lr, #0
 8016004:	db0c      	blt.n	8016020 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016006:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016008:	45be      	cmp	lr, r7
 801600a:	da09      	bge.n	8016020 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 801600c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016010:	45be      	cmp	lr, r7
 8016012:	bf3c      	itt	cc
 8016014:	f10c 0708 	addcc.w	r7, ip, #8
 8016018:	6107      	strcc	r7, [r0, #16]
 801601a:	f10e 0701 	add.w	r7, lr, #1
 801601e:	6087      	str	r7, [r0, #8]
 8016020:	6907      	ldr	r7, [r0, #16]
 8016022:	b213      	sxth	r3, r2
 8016024:	9310      	str	r3, [sp, #64]	; 0x40
 8016026:	807b      	strh	r3, [r7, #2]
 8016028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801602a:	4555      	cmp	r5, sl
 801602c:	803d      	strh	r5, [r7, #0]
 801602e:	80be      	strh	r6, [r7, #4]
 8016030:	80fe      	strh	r6, [r7, #6]
 8016032:	eb04 0c03 	add.w	ip, r4, r3
 8016036:	d050      	beq.n	80160da <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8016038:	9b01      	ldr	r3, [sp, #4]
 801603a:	eba3 070c 	sub.w	r7, r3, ip
 801603e:	443c      	add	r4, r7
 8016040:	0164      	lsls	r4, r4, #5
 8016042:	fb94 f8f1 	sdiv	r8, r4, r1
 8016046:	fb01 4418 	mls	r4, r1, r8, r4
 801604a:	2c00      	cmp	r4, #0
 801604c:	bfb8      	it	lt
 801604e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016052:	ebab 0301 	sub.w	r3, fp, r1
 8016056:	f108 0701 	add.w	r7, r8, #1
 801605a:	bfb8      	it	lt
 801605c:	1864      	addlt	r4, r4, r1
 801605e:	9309      	str	r3, [sp, #36]	; 0x24
 8016060:	9711      	str	r7, [sp, #68]	; 0x44
 8016062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016064:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016068:	191b      	adds	r3, r3, r4
 801606a:	bf4c      	ite	mi
 801606c:	4647      	movmi	r7, r8
 801606e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8016070:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016074:	44bc      	add	ip, r7
 8016076:	44bb      	add	fp, r7
 8016078:	f8ae b004 	strh.w	fp, [lr, #4]
 801607c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016080:	9309      	str	r3, [sp, #36]	; 0x24
 8016082:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016086:	f8ae b006 	strh.w	fp, [lr, #6]
 801608a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801608c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016090:	443d      	add	r5, r7
 8016092:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016096:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801609a:	bf5c      	itt	pl
 801609c:	1a5b      	subpl	r3, r3, r1
 801609e:	9309      	strpl	r3, [sp, #36]	; 0x24
 80160a0:	ea5b 0307 	orrs.w	r3, fp, r7
 80160a4:	d011      	beq.n	80160ca <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80160a6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80160aa:	f1bb 0f00 	cmp.w	fp, #0
 80160ae:	db0c      	blt.n	80160ca <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80160b0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80160b2:	45bb      	cmp	fp, r7
 80160b4:	da09      	bge.n	80160ca <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80160b6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80160ba:	45bb      	cmp	fp, r7
 80160bc:	bf3c      	itt	cc
 80160be:	f10e 0708 	addcc.w	r7, lr, #8
 80160c2:	6107      	strcc	r7, [r0, #16]
 80160c4:	f10b 0701 	add.w	r7, fp, #1
 80160c8:	6087      	str	r7, [r0, #8]
 80160ca:	6907      	ldr	r7, [r0, #16]
 80160cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160ce:	4555      	cmp	r5, sl
 80160d0:	803d      	strh	r5, [r7, #0]
 80160d2:	807b      	strh	r3, [r7, #2]
 80160d4:	80be      	strh	r6, [r7, #4]
 80160d6:	80fe      	strh	r6, [r7, #6]
 80160d8:	d1c3      	bne.n	8016062 <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 80160da:	9b01      	ldr	r3, [sp, #4]
 80160dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80160de:	eba3 0c0c 	sub.w	ip, r3, ip
 80160e2:	6903      	ldr	r3, [r0, #16]
 80160e4:	3720      	adds	r7, #32
 80160e6:	8899      	ldrh	r1, [r3, #4]
 80160e8:	4461      	add	r1, ip
 80160ea:	8099      	strh	r1, [r3, #4]
 80160ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80160ee:	1a7f      	subs	r7, r7, r1
 80160f0:	88d9      	ldrh	r1, [r3, #6]
 80160f2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80160f6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80160fa:	e60e      	b.n	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80160fc:	f04f 34ff 	mov.w	r4, #4294967295
 8016100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016102:	940d      	str	r4, [sp, #52]	; 0x34
 8016104:	437b      	muls	r3, r7
 8016106:	4249      	negs	r1, r1
 8016108:	2400      	movs	r4, #0
 801610a:	e757      	b.n	8015fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801610c:	9905      	ldr	r1, [sp, #20]
 801610e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8016112:	f001 011f 	and.w	r1, r1, #31
 8016116:	9102      	str	r1, [sp, #8]
 8016118:	9904      	ldr	r1, [sp, #16]
 801611a:	45f3      	cmp	fp, lr
 801611c:	f009 0c1f 	and.w	ip, r9, #31
 8016120:	eba1 0406 	sub.w	r4, r1, r6
 8016124:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016128:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801612c:	d108      	bne.n	8016140 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801612e:	9b02      	ldr	r3, [sp, #8]
 8016130:	44a0      	add	r8, r4
 8016132:	449c      	add	ip, r3
 8016134:	fb04 a40c 	mla	r4, r4, ip, sl
 8016138:	f8a7 8004 	strh.w	r8, [r7, #4]
 801613c:	80fc      	strh	r4, [r7, #6]
 801613e:	e458      	b.n	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016140:	9905      	ldr	r1, [sp, #20]
 8016142:	ebb1 0109 	subs.w	r1, r1, r9
 8016146:	bf5b      	ittet	pl
 8016148:	f1cc 0520 	rsbpl	r5, ip, #32
 801614c:	436c      	mulpl	r4, r5
 801614e:	2500      	movmi	r5, #0
 8016150:	2520      	movpl	r5, #32
 8016152:	bf44      	itt	mi
 8016154:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016158:	4249      	negmi	r1, r1
 801615a:	9501      	str	r5, [sp, #4]
 801615c:	fb94 f5f1 	sdiv	r5, r4, r1
 8016160:	bf54      	ite	pl
 8016162:	f04f 0901 	movpl.w	r9, #1
 8016166:	f04f 39ff 	movmi.w	r9, #4294967295
 801616a:	fb01 4415 	mls	r4, r1, r5, r4
 801616e:	9b01      	ldr	r3, [sp, #4]
 8016170:	2c00      	cmp	r4, #0
 8016172:	bfb8      	it	lt
 8016174:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016178:	449c      	add	ip, r3
 801617a:	fb05 ac0c 	mla	ip, r5, ip, sl
 801617e:	44a8      	add	r8, r5
 8016180:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016184:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016188:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801618c:	bfb8      	it	lt
 801618e:	1864      	addlt	r4, r4, r1
 8016190:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016194:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016198:	eb0b 0309 	add.w	r3, fp, r9
 801619c:	ea58 0707 	orrs.w	r7, r8, r7
 80161a0:	d011      	beq.n	80161c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80161a2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80161a6:	f1b8 0f00 	cmp.w	r8, #0
 80161aa:	db0c      	blt.n	80161c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80161ac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80161ae:	45b8      	cmp	r8, r7
 80161b0:	da09      	bge.n	80161c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 80161b2:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80161b6:	45b8      	cmp	r8, r7
 80161b8:	bf3c      	itt	cc
 80161ba:	f10c 0708 	addcc.w	r7, ip, #8
 80161be:	6107      	strcc	r7, [r0, #16]
 80161c0:	f108 0701 	add.w	r7, r8, #1
 80161c4:	6087      	str	r7, [r0, #8]
 80161c6:	f04f 0c00 	mov.w	ip, #0
 80161ca:	6907      	ldr	r7, [r0, #16]
 80161cc:	b212      	sxth	r2, r2
 80161ce:	459e      	cmp	lr, r3
 80161d0:	803b      	strh	r3, [r7, #0]
 80161d2:	807a      	strh	r2, [r7, #2]
 80161d4:	f8a7 c004 	strh.w	ip, [r7, #4]
 80161d8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80161dc:	442e      	add	r6, r5
 80161de:	d04d      	beq.n	801627c <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 80161e0:	9f04      	ldr	r7, [sp, #16]
 80161e2:	f04f 0a00 	mov.w	sl, #0
 80161e6:	1bbf      	subs	r7, r7, r6
 80161e8:	443d      	add	r5, r7
 80161ea:	016d      	lsls	r5, r5, #5
 80161ec:	fb95 f8f1 	sdiv	r8, r5, r1
 80161f0:	fb01 5518 	mls	r5, r1, r8, r5
 80161f4:	4565      	cmp	r5, ip
 80161f6:	bfb8      	it	lt
 80161f8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80161fc:	f108 0701 	add.w	r7, r8, #1
 8016200:	bfb8      	it	lt
 8016202:	186d      	addlt	r5, r5, r1
 8016204:	1a64      	subs	r4, r4, r1
 8016206:	9703      	str	r7, [sp, #12]
 8016208:	1964      	adds	r4, r4, r5
 801620a:	bf48      	it	mi
 801620c:	4647      	movmi	r7, r8
 801620e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016212:	bf58      	it	pl
 8016214:	9f03      	ldrpl	r7, [sp, #12]
 8016216:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801621a:	443e      	add	r6, r7
 801621c:	44bb      	add	fp, r7
 801621e:	f8ac b004 	strh.w	fp, [ip, #4]
 8016222:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016226:	bf58      	it	pl
 8016228:	1a64      	subpl	r4, r4, r1
 801622a:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801622e:	f8ac b006 	strh.w	fp, [ip, #6]
 8016232:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016236:	444b      	add	r3, r9
 8016238:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801623c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016240:	ea5b 0707 	orrs.w	r7, fp, r7
 8016244:	d011      	beq.n	801626a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016246:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801624a:	f1bb 0f00 	cmp.w	fp, #0
 801624e:	db0c      	blt.n	801626a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016250:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016252:	45bb      	cmp	fp, r7
 8016254:	da09      	bge.n	801626a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016256:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801625a:	45bb      	cmp	fp, r7
 801625c:	bf3c      	itt	cc
 801625e:	f10c 0708 	addcc.w	r7, ip, #8
 8016262:	6107      	strcc	r7, [r0, #16]
 8016264:	f10b 0701 	add.w	r7, fp, #1
 8016268:	6087      	str	r7, [r0, #8]
 801626a:	6907      	ldr	r7, [r0, #16]
 801626c:	459e      	cmp	lr, r3
 801626e:	803b      	strh	r3, [r7, #0]
 8016270:	807a      	strh	r2, [r7, #2]
 8016272:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016276:	f8a7 a006 	strh.w	sl, [r7, #6]
 801627a:	d1c5      	bne.n	8016208 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 801627c:	9b04      	ldr	r3, [sp, #16]
 801627e:	1b9e      	subs	r6, r3, r6
 8016280:	6903      	ldr	r3, [r0, #16]
 8016282:	889a      	ldrh	r2, [r3, #4]
 8016284:	4432      	add	r2, r6
 8016286:	809a      	strh	r2, [r3, #4]
 8016288:	9a02      	ldr	r2, [sp, #8]
 801628a:	f102 0c20 	add.w	ip, r2, #32
 801628e:	9a01      	ldr	r2, [sp, #4]
 8016290:	ebac 0c02 	sub.w	ip, ip, r2
 8016294:	88da      	ldrh	r2, [r3, #6]
 8016296:	fb06 260c 	mla	r6, r6, ip, r2
 801629a:	80de      	strh	r6, [r3, #6]
 801629c:	f7ff bba9 	b.w	80159f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

080162a0 <_ZN8touchgfx7Outline6lineToEii>:
 80162a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80162a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162a4:	079b      	lsls	r3, r3, #30
 80162a6:	460e      	mov	r6, r1
 80162a8:	4615      	mov	r5, r2
 80162aa:	d511      	bpl.n	80162d0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80162ac:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80162b0:	ea86 0701 	eor.w	r7, r6, r1
 80162b4:	ea85 0302 	eor.w	r3, r5, r2
 80162b8:	433b      	orrs	r3, r7
 80162ba:	d009      	beq.n	80162d0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80162bc:	4633      	mov	r3, r6
 80162be:	9500      	str	r5, [sp, #0]
 80162c0:	f7ff fb3e 	bl	8015940 <_ZN8touchgfx7Outline10renderLineEiiii>
 80162c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80162c6:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80162ca:	f043 0301 	orr.w	r3, r3, #1
 80162ce:	6243      	str	r3, [r0, #36]	; 0x24
 80162d0:	b003      	add	sp, #12
 80162d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080162d4 <_ZN8touchgfx7Outline6moveToEii>:
 80162d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80162d8:	4615      	mov	r5, r2
 80162da:	079a      	lsls	r2, r3, #30
 80162dc:	4604      	mov	r4, r0
 80162de:	460e      	mov	r6, r1
 80162e0:	d401      	bmi.n	80162e6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80162e2:	f7ff faf9 	bl	80158d8 <_ZN8touchgfx7Outline5resetEv>
 80162e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162e8:	07db      	lsls	r3, r3, #31
 80162ea:	d504      	bpl.n	80162f6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80162ec:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80162f0:	4620      	mov	r0, r4
 80162f2:	f7ff ffd5 	bl	80162a0 <_ZN8touchgfx7Outline6lineToEii>
 80162f6:	6923      	ldr	r3, [r4, #16]
 80162f8:	1170      	asrs	r0, r6, #5
 80162fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80162fe:	1169      	asrs	r1, r5, #5
 8016300:	4290      	cmp	r0, r2
 8016302:	d103      	bne.n	801630c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8016304:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016308:	4291      	cmp	r1, r2
 801630a:	d01a      	beq.n	8016342 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801630c:	88df      	ldrh	r7, [r3, #6]
 801630e:	889a      	ldrh	r2, [r3, #4]
 8016310:	433a      	orrs	r2, r7
 8016312:	d010      	beq.n	8016336 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016314:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016318:	2a00      	cmp	r2, #0
 801631a:	db0c      	blt.n	8016336 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801631c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801631e:	42ba      	cmp	r2, r7
 8016320:	da09      	bge.n	8016336 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016322:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8016326:	42ba      	cmp	r2, r7
 8016328:	bf38      	it	cc
 801632a:	3308      	addcc	r3, #8
 801632c:	f102 0201 	add.w	r2, r2, #1
 8016330:	bf38      	it	cc
 8016332:	6123      	strcc	r3, [r4, #16]
 8016334:	60a2      	str	r2, [r4, #8]
 8016336:	2200      	movs	r2, #0
 8016338:	6923      	ldr	r3, [r4, #16]
 801633a:	8018      	strh	r0, [r3, #0]
 801633c:	8059      	strh	r1, [r3, #2]
 801633e:	809a      	strh	r2, [r3, #4]
 8016340:	80da      	strh	r2, [r3, #6]
 8016342:	6166      	str	r6, [r4, #20]
 8016344:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016348:	6225      	str	r5, [r4, #32]
 801634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801634c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016350:	b0d0      	sub	sp, #320	; 0x140
 8016352:	466c      	mov	r4, sp
 8016354:	4627      	mov	r7, r4
 8016356:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801635a:	1a0d      	subs	r5, r1, r0
 801635c:	2d48      	cmp	r5, #72	; 0x48
 801635e:	f100 0308 	add.w	r3, r0, #8
 8016362:	f340 80d5 	ble.w	8016510 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016366:	112d      	asrs	r5, r5, #4
 8016368:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801636c:	6816      	ldr	r6, [r2, #0]
 801636e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016372:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016376:	6006      	str	r6, [r0, #0]
 8016378:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801637c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016380:	6856      	ldr	r6, [r2, #4]
 8016382:	6046      	str	r6, [r0, #4]
 8016384:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016388:	f8a2 8002 	strh.w	r8, [r2, #2]
 801638c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016390:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016394:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016398:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801639c:	f1a1 0208 	sub.w	r2, r1, #8
 80163a0:	4565      	cmp	r5, ip
 80163a2:	db06      	blt.n	80163b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80163a4:	d119      	bne.n	80163da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80163a6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80163aa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80163ae:	42ae      	cmp	r6, r5
 80163b0:	dd13      	ble.n	80163da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80163b2:	460e      	mov	r6, r1
 80163b4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80163b8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80163bc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80163c0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80163c4:	601d      	str	r5, [r3, #0]
 80163c6:	6875      	ldr	r5, [r6, #4]
 80163c8:	605d      	str	r5, [r3, #4]
 80163ca:	f821 9c08 	strh.w	r9, [r1, #-8]
 80163ce:	f821 cc06 	strh.w	ip, [r1, #-6]
 80163d2:	f821 8c04 	strh.w	r8, [r1, #-4]
 80163d6:	f821 ec02 	strh.w	lr, [r1, #-2]
 80163da:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80163de:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80163e2:	42ae      	cmp	r6, r5
 80163e4:	db06      	blt.n	80163f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80163e6:	d116      	bne.n	8016416 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80163e8:	f9b0 c000 	ldrsh.w	ip, [r0]
 80163ec:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80163f0:	45ac      	cmp	ip, r5
 80163f2:	da10      	bge.n	8016416 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80163f4:	681d      	ldr	r5, [r3, #0]
 80163f6:	f9b0 8000 	ldrsh.w	r8, [r0]
 80163fa:	6005      	str	r5, [r0, #0]
 80163fc:	685d      	ldr	r5, [r3, #4]
 80163fe:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016402:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016406:	f8a0 8008 	strh.w	r8, [r0, #8]
 801640a:	6045      	str	r5, [r0, #4]
 801640c:	8146      	strh	r6, [r0, #10]
 801640e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8016412:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016416:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801641a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801641e:	4565      	cmp	r5, ip
 8016420:	db06      	blt.n	8016430 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016422:	d119      	bne.n	8016458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016424:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016428:	f9b0 5000 	ldrsh.w	r5, [r0]
 801642c:	42ae      	cmp	r6, r5
 801642e:	da13      	bge.n	8016458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016430:	460e      	mov	r6, r1
 8016432:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016436:	f9b0 9000 	ldrsh.w	r9, [r0]
 801643a:	6005      	str	r5, [r0, #0]
 801643c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016440:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016444:	6875      	ldr	r5, [r6, #4]
 8016446:	6045      	str	r5, [r0, #4]
 8016448:	f821 9c08 	strh.w	r9, [r1, #-8]
 801644c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016450:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016454:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016458:	3308      	adds	r3, #8
 801645a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801645e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016462:	45e6      	cmp	lr, ip
 8016464:	dbf8      	blt.n	8016458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016466:	d105      	bne.n	8016474 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016468:	f9b3 6000 	ldrsh.w	r6, [r3]
 801646c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016470:	42ae      	cmp	r6, r5
 8016472:	dbf1      	blt.n	8016458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016474:	4615      	mov	r5, r2
 8016476:	3a08      	subs	r2, #8
 8016478:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801647c:	45b4      	cmp	ip, r6
 801647e:	dbf9      	blt.n	8016474 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016480:	d105      	bne.n	801648e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8016482:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016486:	f9b2 6000 	ldrsh.w	r6, [r2]
 801648a:	45b0      	cmp	r8, r6
 801648c:	dbf2      	blt.n	8016474 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801648e:	4293      	cmp	r3, r2
 8016490:	f1a5 0608 	sub.w	r6, r5, #8
 8016494:	d816      	bhi.n	80164c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8016496:	f8d6 c000 	ldr.w	ip, [r6]
 801649a:	f9b3 a000 	ldrsh.w	sl, [r3]
 801649e:	f8c3 c000 	str.w	ip, [r3]
 80164a2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80164a6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80164aa:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80164ae:	f8c3 c004 	str.w	ip, [r3, #4]
 80164b2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80164b6:	f825 ec06 	strh.w	lr, [r5, #-6]
 80164ba:	f825 9c04 	strh.w	r9, [r5, #-4]
 80164be:	f825 8c02 	strh.w	r8, [r5, #-2]
 80164c2:	e7c9      	b.n	8016458 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80164c4:	f8d6 e000 	ldr.w	lr, [r6]
 80164c8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80164cc:	f8c0 e000 	str.w	lr, [r0]
 80164d0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80164d4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80164d8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80164dc:	1a16      	subs	r6, r2, r0
 80164de:	f8c0 e004 	str.w	lr, [r0, #4]
 80164e2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80164e6:	f825 cc06 	strh.w	ip, [r5, #-6]
 80164ea:	f825 9c04 	strh.w	r9, [r5, #-4]
 80164ee:	f825 8c02 	strh.w	r8, [r5, #-2]
 80164f2:	1acd      	subs	r5, r1, r3
 80164f4:	10ed      	asrs	r5, r5, #3
 80164f6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80164fa:	bfb5      	itete	lt
 80164fc:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016500:	e9c4 3100 	strdge	r3, r1, [r4]
 8016504:	460a      	movlt	r2, r1
 8016506:	4603      	movge	r3, r0
 8016508:	3408      	adds	r4, #8
 801650a:	4618      	mov	r0, r3
 801650c:	4611      	mov	r1, r2
 801650e:	e724      	b.n	801635a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016510:	4299      	cmp	r1, r3
 8016512:	d928      	bls.n	8016566 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8016514:	f1a3 0210 	sub.w	r2, r3, #16
 8016518:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801651c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016520:	45ac      	cmp	ip, r5
 8016522:	db06      	blt.n	8016532 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016524:	d11d      	bne.n	8016562 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016526:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801652a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801652e:	42ae      	cmp	r6, r5
 8016530:	da17      	bge.n	8016562 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016532:	4615      	mov	r5, r2
 8016534:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016538:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801653c:	6116      	str	r6, [r2, #16]
 801653e:	686e      	ldr	r6, [r5, #4]
 8016540:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016544:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8016548:	42a8      	cmp	r0, r5
 801654a:	6156      	str	r6, [r2, #20]
 801654c:	f8a2 9008 	strh.w	r9, [r2, #8]
 8016550:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8016554:	f8a2 800c 	strh.w	r8, [r2, #12]
 8016558:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801655c:	f1a2 0208 	sub.w	r2, r2, #8
 8016560:	d1da      	bne.n	8016518 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8016562:	3308      	adds	r3, #8
 8016564:	e7d4      	b.n	8016510 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016566:	42bc      	cmp	r4, r7
 8016568:	d903      	bls.n	8016572 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801656a:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801656e:	3c08      	subs	r4, #8
 8016570:	e6f3      	b.n	801635a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016572:	b050      	add	sp, #320	; 0x140
 8016574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016578 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8016578:	b510      	push	{r4, lr}
 801657a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801657c:	4604      	mov	r4, r0
 801657e:	07da      	lsls	r2, r3, #31
 8016580:	d507      	bpl.n	8016592 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8016582:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8016586:	f7ff fe8b 	bl	80162a0 <_ZN8touchgfx7Outline6lineToEii>
 801658a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801658c:	f023 0301 	bic.w	r3, r3, #1
 8016590:	6243      	str	r3, [r0, #36]	; 0x24
 8016592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016594:	079b      	lsls	r3, r3, #30
 8016596:	d521      	bpl.n	80165dc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8016598:	6923      	ldr	r3, [r4, #16]
 801659a:	88d9      	ldrh	r1, [r3, #6]
 801659c:	889a      	ldrh	r2, [r3, #4]
 801659e:	430a      	orrs	r2, r1
 80165a0:	d010      	beq.n	80165c4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80165a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80165a6:	2a00      	cmp	r2, #0
 80165a8:	db0c      	blt.n	80165c4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80165aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80165ac:	428a      	cmp	r2, r1
 80165ae:	da09      	bge.n	80165c4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80165b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80165b4:	4291      	cmp	r1, r2
 80165b6:	bf88      	it	hi
 80165b8:	3308      	addhi	r3, #8
 80165ba:	f102 0201 	add.w	r2, r2, #1
 80165be:	bf88      	it	hi
 80165c0:	6123      	strhi	r3, [r4, #16]
 80165c2:	60a2      	str	r2, [r4, #8]
 80165c4:	68a1      	ldr	r1, [r4, #8]
 80165c6:	b129      	cbz	r1, 80165d4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80165c8:	6863      	ldr	r3, [r4, #4]
 80165ca:	4299      	cmp	r1, r3
 80165cc:	d802      	bhi.n	80165d4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80165ce:	68e0      	ldr	r0, [r4, #12]
 80165d0:	f7ff febc 	bl	801634c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80165d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165d6:	f023 0302 	bic.w	r3, r3, #2
 80165da:	6263      	str	r3, [r4, #36]	; 0x24
 80165dc:	68e0      	ldr	r0, [r4, #12]
 80165de:	bd10      	pop	{r4, pc}

080165e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80165e0:	4b02      	ldr	r3, [pc, #8]	; (80165ec <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80165e2:	6018      	str	r0, [r3, #0]
 80165e4:	4b02      	ldr	r3, [pc, #8]	; (80165f0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80165e6:	6019      	str	r1, [r3, #0]
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	2004f664 	.word	0x2004f664
 80165f0:	2004f668 	.word	0x2004f668

080165f4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80165f4:	4b01      	ldr	r3, [pc, #4]	; (80165fc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80165f6:	6818      	ldr	r0, [r3, #0]
 80165f8:	4770      	bx	lr
 80165fa:	bf00      	nop
 80165fc:	2004f664 	.word	0x2004f664

08016600 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016600:	4b01      	ldr	r3, [pc, #4]	; (8016608 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016602:	6818      	ldr	r0, [r3, #0]
 8016604:	4770      	bx	lr
 8016606:	bf00      	nop
 8016608:	2004f668 	.word	0x2004f668

0801660c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801660c:	b510      	push	{r4, lr}
 801660e:	6803      	ldr	r3, [r0, #0]
 8016610:	460c      	mov	r4, r1
 8016612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016614:	4798      	blx	r3
 8016616:	1b03      	subs	r3, r0, r4
 8016618:	4258      	negs	r0, r3
 801661a:	4158      	adcs	r0, r3
 801661c:	bd10      	pop	{r4, pc}
	...

08016620 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016620:	4b01      	ldr	r3, [pc, #4]	; (8016628 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016622:	6019      	str	r1, [r3, #0]
 8016624:	4770      	bx	lr
 8016626:	bf00      	nop
 8016628:	2004f66c 	.word	0x2004f66c

0801662c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	4696      	mov	lr, r2
 8016632:	4614      	mov	r4, r2
 8016634:	4605      	mov	r5, r0
 8016636:	460e      	mov	r6, r1
 8016638:	461f      	mov	r7, r3
 801663a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801663e:	b097      	sub	sp, #92	; 0x5c
 8016640:	f10d 0c1c 	add.w	ip, sp, #28
 8016644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016648:	f8de 3000 	ldr.w	r3, [lr]
 801664c:	f104 0e14 	add.w	lr, r4, #20
 8016650:	f8cc 3000 	str.w	r3, [ip]
 8016654:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016658:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801665c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016660:	f8de 3000 	ldr.w	r3, [lr]
 8016664:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016668:	f8cc 3000 	str.w	r3, [ip]
 801666c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016678:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801667c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016680:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016684:	f8de 3000 	ldr.w	r3, [lr]
 8016688:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801668a:	f8cc 3000 	str.w	r3, [ip]
 801668e:	9201      	str	r2, [sp, #4]
 8016690:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016696:	682b      	ldr	r3, [r5, #0]
 8016698:	9200      	str	r2, [sp, #0]
 801669a:	f8cd 8008 	str.w	r8, [sp, #8]
 801669e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80166a2:	aa07      	add	r2, sp, #28
 80166a4:	463b      	mov	r3, r7
 80166a6:	4631      	mov	r1, r6
 80166a8:	4628      	mov	r0, r5
 80166aa:	47d8      	blx	fp
 80166ac:	46a6      	mov	lr, r4
 80166ae:	f10d 0c1c 	add.w	ip, sp, #28
 80166b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166ba:	f8de 3000 	ldr.w	r3, [lr]
 80166be:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80166c2:	f8cc 3000 	str.w	r3, [ip]
 80166c6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80166ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166d2:	f8de 3000 	ldr.w	r3, [lr]
 80166d6:	343c      	adds	r4, #60	; 0x3c
 80166d8:	f8cc 3000 	str.w	r3, [ip]
 80166dc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80166e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166e6:	6823      	ldr	r3, [r4, #0]
 80166e8:	4631      	mov	r1, r6
 80166ea:	f8cc 3000 	str.w	r3, [ip]
 80166ee:	682b      	ldr	r3, [r5, #0]
 80166f0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80166f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80166f6:	f8cd 8008 	str.w	r8, [sp, #8]
 80166fa:	9201      	str	r2, [sp, #4]
 80166fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166fe:	4628      	mov	r0, r5
 8016700:	9200      	str	r2, [sp, #0]
 8016702:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016704:	aa07      	add	r2, sp, #28
 8016706:	463b      	mov	r3, r7
 8016708:	47a0      	blx	r4
 801670a:	b017      	add	sp, #92	; 0x5c
 801670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016710 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016710:	2000      	movs	r0, #0
 8016712:	4770      	bx	lr

08016714 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016718:	b08d      	sub	sp, #52	; 0x34
 801671a:	4688      	mov	r8, r1
 801671c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801671e:	f8d3 c000 	ldr.w	ip, [r3]
 8016722:	680f      	ldr	r7, [r1, #0]
 8016724:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016728:	eba7 070c 	sub.w	r7, r7, ip
 801672c:	42bc      	cmp	r4, r7
 801672e:	bfa8      	it	ge
 8016730:	463c      	movge	r4, r7
 8016732:	ee07 4a90 	vmov	s15, r4
 8016736:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801673a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801673e:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016742:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016746:	edd3 6a07 	vldr	s13, [r3, #28]
 801674a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801674e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016752:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016756:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801675a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801675e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016762:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016766:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016768:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801676c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016770:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016774:	eb09 0e0c 	add.w	lr, r9, ip
 8016778:	4571      	cmp	r1, lr
 801677a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801677e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016782:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016786:	ee61 1a87 	vmul.f32	s3, s3, s14
 801678a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801678e:	f340 808c 	ble.w	80168aa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016792:	eba1 060e 	sub.w	r6, r1, lr
 8016796:	fb96 f5f4 	sdiv	r5, r6, r4
 801679a:	ee07 5a10 	vmov	s14, r5
 801679e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167a2:	2d00      	cmp	r5, #0
 80167a4:	fb04 6615 	mls	r6, r4, r5, r6
 80167a8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80167ac:	eee7 0a24 	vfma.f32	s1, s14, s9
 80167b0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80167b4:	dd12      	ble.n	80167dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80167b6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80167ba:	eef5 6a40 	vcmp.f32	s13, #0.0
 80167be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80167c6:	bf14      	ite	ne
 80167c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80167cc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80167d0:	ee31 2a45 	vsub.f32	s4, s2, s10
 80167d4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80167d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80167dc:	fb05 f204 	mul.w	r2, r5, r4
 80167e0:	1abf      	subs	r7, r7, r2
 80167e2:	4494      	add	ip, r2
 80167e4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80167e8:	4411      	add	r1, r2
 80167ea:	eb09 020c 	add.w	r2, r9, ip
 80167ee:	443a      	add	r2, r7
 80167f0:	b209      	sxth	r1, r1
 80167f2:	428a      	cmp	r2, r1
 80167f4:	bfc4      	itt	gt
 80167f6:	eba1 0209 	subgt.w	r2, r1, r9
 80167fa:	eba2 070c 	subgt.w	r7, r2, ip
 80167fe:	2f00      	cmp	r7, #0
 8016800:	dd50      	ble.n	80168a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016802:	fb97 f1f4 	sdiv	r1, r7, r4
 8016806:	fb04 7211 	mls	r2, r4, r1, r7
 801680a:	b90a      	cbnz	r2, 8016810 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801680c:	4622      	mov	r2, r4
 801680e:	3901      	subs	r1, #1
 8016810:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016814:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016818:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801681c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016820:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016824:	ee17 7a90 	vmov	r7, s15
 8016828:	ee73 7a42 	vsub.f32	s15, s6, s4
 801682c:	eef0 6a42 	vmov.f32	s13, s4
 8016830:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016834:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016838:	ee17 ca90 	vmov	ip, s15
 801683c:	eeb0 7a61 	vmov.f32	s14, s3
 8016840:	6840      	ldr	r0, [r0, #4]
 8016842:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016846:	f8d0 a000 	ldr.w	sl, [r0]
 801684a:	900b      	str	r0, [sp, #44]	; 0x2c
 801684c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801684e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016852:	9008      	str	r0, [sp, #32]
 8016854:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016856:	695b      	ldr	r3, [r3, #20]
 8016858:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801685c:	fb9c fcf4 	sdiv	ip, ip, r4
 8016860:	445b      	add	r3, fp
 8016862:	9307      	str	r3, [sp, #28]
 8016864:	ee16 3a90 	vmov	r3, s13
 8016868:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801686c:	fb0c 3306 	mla	r3, ip, r6, r3
 8016870:	fb97 f7f4 	sdiv	r7, r7, r4
 8016874:	9302      	str	r3, [sp, #8]
 8016876:	ee17 3a10 	vmov	r3, s14
 801687a:	2900      	cmp	r1, #0
 801687c:	bfcc      	ite	gt
 801687e:	46a1      	movgt	r9, r4
 8016880:	4691      	movle	r9, r2
 8016882:	44b6      	add	lr, r6
 8016884:	fb04 e505 	mla	r5, r4, r5, lr
 8016888:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801688c:	fb07 3706 	mla	r7, r7, r6, r3
 8016890:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016894:	e9cd 4700 	strd	r4, r7, [sp]
 8016898:	eba9 0306 	sub.w	r3, r9, r6
 801689c:	f8da 4008 	ldr.w	r4, [sl, #8]
 80168a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80168a2:	47a0      	blx	r4
 80168a4:	b00d      	add	sp, #52	; 0x34
 80168a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168aa:	2500      	movs	r5, #0
 80168ac:	462e      	mov	r6, r5
 80168ae:	e799      	b.n	80167e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080168b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80168b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b4:	461d      	mov	r5, r3
 80168b6:	b0db      	sub	sp, #364	; 0x16c
 80168b8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80168bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80168be:	930a      	str	r3, [sp, #40]	; 0x28
 80168c0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80168c4:	9009      	str	r0, [sp, #36]	; 0x24
 80168c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80168c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80168cc:	4614      	mov	r4, r2
 80168ce:	9310      	str	r3, [sp, #64]	; 0x40
 80168d0:	6803      	ldr	r3, [r0, #0]
 80168d2:	4629      	mov	r1, r5
 80168d4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80168d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80168da:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80168de:	47b8      	blx	r7
 80168e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168e2:	6058      	str	r0, [r3, #4]
 80168e4:	2800      	cmp	r0, #0
 80168e6:	f000 83a1 	beq.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168ea:	ed94 7a02 	vldr	s14, [r4, #8]
 80168ee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80168f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168f6:	682b      	ldr	r3, [r5, #0]
 80168f8:	9314      	str	r3, [sp, #80]	; 0x50
 80168fa:	686b      	ldr	r3, [r5, #4]
 80168fc:	9315      	str	r3, [sp, #84]	; 0x54
 80168fe:	4bc1      	ldr	r3, [pc, #772]	; (8016c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016900:	7819      	ldrb	r1, [r3, #0]
 8016902:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016906:	2900      	cmp	r1, #0
 8016908:	bf16      	itet	ne
 801690a:	4619      	movne	r1, r3
 801690c:	4611      	moveq	r1, r2
 801690e:	4613      	movne	r3, r2
 8016910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016914:	9116      	str	r1, [sp, #88]	; 0x58
 8016916:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801691a:	f240 8387 	bls.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801691e:	ed94 7a07 	vldr	s14, [r4, #28]
 8016922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801692a:	f240 837f 	bls.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801692e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693a:	f240 8377 	bls.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801693e:	6822      	ldr	r2, [r4, #0]
 8016940:	4bb1      	ldr	r3, [pc, #708]	; (8016c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016942:	429a      	cmp	r2, r3
 8016944:	f2c0 8372 	blt.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016948:	49b0      	ldr	r1, [pc, #704]	; (8016c0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801694a:	6963      	ldr	r3, [r4, #20]
 801694c:	428a      	cmp	r2, r1
 801694e:	f300 836d 	bgt.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016952:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016956:	48ae      	ldr	r0, [pc, #696]	; (8016c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016958:	33ff      	adds	r3, #255	; 0xff
 801695a:	4283      	cmp	r3, r0
 801695c:	f200 8366 	bhi.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016960:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016962:	4dac      	ldr	r5, [pc, #688]	; (8016c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016964:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016968:	33ff      	adds	r3, #255	; 0xff
 801696a:	42ab      	cmp	r3, r5
 801696c:	f200 835e 	bhi.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016970:	6862      	ldr	r2, [r4, #4]
 8016972:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016976:	33ff      	adds	r3, #255	; 0xff
 8016978:	4283      	cmp	r3, r0
 801697a:	f200 8357 	bhi.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801697e:	69a1      	ldr	r1, [r4, #24]
 8016980:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016984:	33ff      	adds	r3, #255	; 0xff
 8016986:	4283      	cmp	r3, r0
 8016988:	f200 8350 	bhi.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801698c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801698e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016992:	30ff      	adds	r0, #255	; 0xff
 8016994:	42a8      	cmp	r0, r5
 8016996:	f200 8349 	bhi.w	801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801699a:	428a      	cmp	r2, r1
 801699c:	f280 8110 	bge.w	8016bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80169a0:	429a      	cmp	r2, r3
 80169a2:	f300 8119 	bgt.w	8016bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80169a6:	4299      	cmp	r1, r3
 80169a8:	f280 811d 	bge.w	8016be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80169ac:	2502      	movs	r5, #2
 80169ae:	2701      	movs	r7, #1
 80169b0:	46a9      	mov	r9, r5
 80169b2:	46b8      	mov	r8, r7
 80169b4:	f04f 0a00 	mov.w	sl, #0
 80169b8:	4621      	mov	r1, r4
 80169ba:	a849      	add	r0, sp, #292	; 0x124
 80169bc:	f003 f83a 	bl	8019a34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80169c0:	4622      	mov	r2, r4
 80169c2:	4653      	mov	r3, sl
 80169c4:	a949      	add	r1, sp, #292	; 0x124
 80169c6:	f8cd 9000 	str.w	r9, [sp]
 80169ca:	a819      	add	r0, sp, #100	; 0x64
 80169cc:	f003 f964 	bl	8019c98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80169d0:	4622      	mov	r2, r4
 80169d2:	4653      	mov	r3, sl
 80169d4:	a949      	add	r1, sp, #292	; 0x124
 80169d6:	f8cd 8000 	str.w	r8, [sp]
 80169da:	a829      	add	r0, sp, #164	; 0xa4
 80169dc:	f003 f95c 	bl	8019c98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80169e0:	4643      	mov	r3, r8
 80169e2:	4622      	mov	r2, r4
 80169e4:	a949      	add	r1, sp, #292	; 0x124
 80169e6:	f8cd 9000 	str.w	r9, [sp]
 80169ea:	a839      	add	r0, sp, #228	; 0xe4
 80169ec:	f003 f954 	bl	8019c98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80169f0:	42af      	cmp	r7, r5
 80169f2:	bfb5      	itete	lt
 80169f4:	2300      	movlt	r3, #0
 80169f6:	2301      	movge	r3, #1
 80169f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80169fa:	930e      	strge	r3, [sp, #56]	; 0x38
 80169fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169fe:	af12      	add	r7, sp, #72	; 0x48
 8016a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a04:	bfb9      	ittee	lt
 8016a06:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016a08:	ac19      	addlt	r4, sp, #100	; 0x64
 8016a0a:	ad19      	addge	r5, sp, #100	; 0x64
 8016a0c:	ac29      	addge	r4, sp, #164	; 0xa4
 8016a0e:	e887 0003 	stmia.w	r7, {r0, r1}
 8016a12:	b928      	cbnz	r0, 8016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016a14:	4b80      	ldr	r3, [pc, #512]	; (8016c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016a16:	6818      	ldr	r0, [r3, #0]
 8016a18:	6803      	ldr	r3, [r0, #0]
 8016a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a1c:	4798      	blx	r3
 8016a1e:	6038      	str	r0, [r7, #0]
 8016a20:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016a22:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a2a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a30:	6963      	ldr	r3, [r4, #20]
 8016a32:	440b      	add	r3, r1
 8016a34:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016a38:	4408      	add	r0, r1
 8016a3a:	b200      	sxth	r0, r0
 8016a3c:	4283      	cmp	r3, r0
 8016a3e:	900d      	str	r0, [sp, #52]	; 0x34
 8016a40:	f280 80dd 	bge.w	8016bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016a44:	428b      	cmp	r3, r1
 8016a46:	da08      	bge.n	8016a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016a48:	2a00      	cmp	r2, #0
 8016a4a:	dd06      	ble.n	8016a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016a4c:	1acb      	subs	r3, r1, r3
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	f2c0 80e4 	blt.w	8016c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	f300 80e2 	bgt.w	8016c1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016a5a:	6967      	ldr	r7, [r4, #20]
 8016a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a5e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016a62:	443b      	add	r3, r7
 8016a64:	461f      	mov	r7, r3
 8016a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a68:	1bdf      	subs	r7, r3, r7
 8016a6a:	4297      	cmp	r7, r2
 8016a6c:	bfa8      	it	ge
 8016a6e:	4617      	movge	r7, r2
 8016a70:	2f00      	cmp	r7, #0
 8016a72:	f340 8166 	ble.w	8016d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016a76:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016a78:	6829      	ldr	r1, [r5, #0]
 8016a7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a7e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016a82:	4411      	add	r1, r2
 8016a84:	4299      	cmp	r1, r3
 8016a86:	6820      	ldr	r0, [r4, #0]
 8016a88:	dd1a      	ble.n	8016ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016a8a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016a8e:	4402      	add	r2, r0
 8016a90:	440b      	add	r3, r1
 8016a92:	b21b      	sxth	r3, r3
 8016a94:	429a      	cmp	r2, r3
 8016a96:	dc13      	bgt.n	8016ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016a98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a9c:	a912      	add	r1, sp, #72	; 0x48
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	9206      	str	r2, [sp, #24]
 8016aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016aa4:	9500      	str	r5, [sp, #0]
 8016aa6:	9205      	str	r2, [sp, #20]
 8016aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016aaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016aac:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ab0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016ab2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016ab6:	aa49      	add	r2, sp, #292	; 0x124
 8016ab8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016abc:	4623      	mov	r3, r4
 8016abe:	47c8      	blx	r9
 8016ac0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ac4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016ac8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016acc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ad4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016ad8:	ed94 6a08 	vldr	s12, [r4, #32]
 8016adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ae0:	edd4 6a07 	vldr	s13, [r4, #28]
 8016ae4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016ae8:	441a      	add	r2, r3
 8016aea:	6963      	ldr	r3, [r4, #20]
 8016aec:	68a1      	ldr	r1, [r4, #8]
 8016aee:	3301      	adds	r3, #1
 8016af0:	6163      	str	r3, [r4, #20]
 8016af2:	69a3      	ldr	r3, [r4, #24]
 8016af4:	6022      	str	r2, [r4, #0]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	61a3      	str	r3, [r4, #24]
 8016afa:	6923      	ldr	r3, [r4, #16]
 8016afc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016b00:	440b      	add	r3, r1
 8016b02:	68e1      	ldr	r1, [r4, #12]
 8016b04:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016b08:	428b      	cmp	r3, r1
 8016b0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016b0e:	6123      	str	r3, [r4, #16]
 8016b10:	db15      	blt.n	8016b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016b12:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016b16:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016b1a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016b1e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016b22:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b26:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016b2a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b32:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016b36:	3201      	adds	r2, #1
 8016b38:	1a5b      	subs	r3, r3, r1
 8016b3a:	6022      	str	r2, [r4, #0]
 8016b3c:	6123      	str	r3, [r4, #16]
 8016b3e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b46:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016b4a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b52:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016b56:	ed95 6a08 	vldr	s12, [r5, #32]
 8016b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b5e:	edd5 6a07 	vldr	s13, [r5, #28]
 8016b62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016b66:	441a      	add	r2, r3
 8016b68:	696b      	ldr	r3, [r5, #20]
 8016b6a:	68a9      	ldr	r1, [r5, #8]
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	616b      	str	r3, [r5, #20]
 8016b70:	69ab      	ldr	r3, [r5, #24]
 8016b72:	602a      	str	r2, [r5, #0]
 8016b74:	3b01      	subs	r3, #1
 8016b76:	61ab      	str	r3, [r5, #24]
 8016b78:	692b      	ldr	r3, [r5, #16]
 8016b7a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016b7e:	440b      	add	r3, r1
 8016b80:	68e9      	ldr	r1, [r5, #12]
 8016b82:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016b86:	428b      	cmp	r3, r1
 8016b88:	edc5 6a07 	vstr	s13, [r5, #28]
 8016b8c:	612b      	str	r3, [r5, #16]
 8016b8e:	db15      	blt.n	8016bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016b90:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016b94:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016b98:	edc5 6a07 	vstr	s13, [r5, #28]
 8016b9c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016ba0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ba4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016ba8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bb0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016bb4:	3201      	adds	r2, #1
 8016bb6:	1a5b      	subs	r3, r3, r1
 8016bb8:	602a      	str	r2, [r5, #0]
 8016bba:	612b      	str	r3, [r5, #16]
 8016bbc:	3f01      	subs	r7, #1
 8016bbe:	e757      	b.n	8016a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016bc0:	4299      	cmp	r1, r3
 8016bc2:	dc13      	bgt.n	8016bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	da14      	bge.n	8016bf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016bc8:	2502      	movs	r5, #2
 8016bca:	2703      	movs	r7, #3
 8016bcc:	46a9      	mov	r9, r5
 8016bce:	f04f 0800 	mov.w	r8, #0
 8016bd2:	f04f 0a01 	mov.w	sl, #1
 8016bd6:	e6ef      	b.n	80169b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016bd8:	2501      	movs	r5, #1
 8016bda:	2700      	movs	r7, #0
 8016bdc:	46a9      	mov	r9, r5
 8016bde:	46b8      	mov	r8, r7
 8016be0:	f04f 0a02 	mov.w	sl, #2
 8016be4:	e6e8      	b.n	80169b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016be6:	2501      	movs	r5, #1
 8016be8:	2702      	movs	r7, #2
 8016bea:	e6e1      	b.n	80169b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016bec:	2500      	movs	r5, #0
 8016bee:	2701      	movs	r7, #1
 8016bf0:	e7f4      	b.n	8016bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016bf2:	2702      	movs	r7, #2
 8016bf4:	2503      	movs	r5, #3
 8016bf6:	f04f 0900 	mov.w	r9, #0
 8016bfa:	46b8      	mov	r8, r7
 8016bfc:	e7e9      	b.n	8016bd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016bfe:	4613      	mov	r3, r2
 8016c00:	e728      	b.n	8016a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016c02:	bf00      	nop
 8016c04:	2004f654 	.word	0x2004f654
 8016c08:	fffd8f01 	.word	0xfffd8f01
 8016c0c:	00027100 	.word	0x00027100
 8016c10:	0004e1ff 	.word	0x0004e1ff
 8016c14:	0004e1fe 	.word	0x0004e1fe
 8016c18:	2004f65c 	.word	0x2004f65c
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016c22:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016c26:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016c2a:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016c2e:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016c32:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016c36:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016c3a:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016c3e:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016c42:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016c46:	469e      	mov	lr, r3
 8016c48:	469c      	mov	ip, r3
 8016c4a:	f04f 0900 	mov.w	r9, #0
 8016c4e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016c50:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016c52:	9111      	str	r1, [sp, #68]	; 0x44
 8016c54:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016c58:	f1bc 0f00 	cmp.w	ip, #0
 8016c5c:	d147      	bne.n	8016cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016c5e:	eb03 0c07 	add.w	ip, r3, r7
 8016c62:	1ad7      	subs	r7, r2, r3
 8016c64:	f1b9 0f00 	cmp.w	r9, #0
 8016c68:	d009      	beq.n	8016c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016c6a:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016c6e:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016c72:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016c76:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016c7a:	9029      	str	r0, [sp, #164]	; 0xa4
 8016c7c:	912d      	str	r1, [sp, #180]	; 0xb4
 8016c7e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016c82:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016c86:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016c8a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016c8e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016c92:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016c96:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016c9a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016c9e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016ca2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016ca6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016caa:	f04f 0800 	mov.w	r8, #0
 8016cae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016cb0:	9111      	str	r1, [sp, #68]	; 0x44
 8016cb2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016cb6:	f1be 0f00 	cmp.w	lr, #0
 8016cba:	d031      	beq.n	8016d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016cbc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016cbe:	4450      	add	r0, sl
 8016cc0:	4431      	add	r1, r6
 8016cc2:	4549      	cmp	r1, r9
 8016cc4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016cc8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016ccc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016cd0:	db08      	blt.n	8016ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016cd2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016cd6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016cda:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016cde:	3001      	adds	r0, #1
 8016ce0:	eba1 0109 	sub.w	r1, r1, r9
 8016ce4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016ce8:	f04f 0801 	mov.w	r8, #1
 8016cec:	e7e3      	b.n	8016cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016cee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016cf0:	4450      	add	r0, sl
 8016cf2:	4431      	add	r1, r6
 8016cf4:	4541      	cmp	r1, r8
 8016cf6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016cfa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016cfe:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016d02:	db08      	blt.n	8016d16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016d04:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016d08:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016d0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016d10:	3001      	adds	r0, #1
 8016d12:	eba1 0108 	sub.w	r1, r1, r8
 8016d16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d1a:	f04f 0901 	mov.w	r9, #1
 8016d1e:	e79b      	b.n	8016c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016d20:	449c      	add	ip, r3
 8016d22:	1aff      	subs	r7, r7, r3
 8016d24:	f1b8 0f00 	cmp.w	r8, #0
 8016d28:	d009      	beq.n	8016d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016d2a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016d2e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016d32:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016d36:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016d3a:	9019      	str	r0, [sp, #100]	; 0x64
 8016d3c:	911d      	str	r1, [sp, #116]	; 0x74
 8016d3e:	1ad2      	subs	r2, r2, r3
 8016d40:	e68b      	b.n	8016a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d44:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	f000 80d1 	beq.w	8016eee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016d4c:	ad19      	add	r5, sp, #100	; 0x64
 8016d4e:	ac39      	add	r4, sp, #228	; 0xe4
 8016d50:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016d52:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016d56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8016d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d5e:	6963      	ldr	r3, [r4, #20]
 8016d60:	440b      	add	r3, r1
 8016d62:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016d66:	4408      	add	r0, r1
 8016d68:	b200      	sxth	r0, r0
 8016d6a:	4283      	cmp	r3, r0
 8016d6c:	900d      	str	r0, [sp, #52]	; 0x34
 8016d6e:	f280 80c1 	bge.w	8016ef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016d72:	428b      	cmp	r3, r1
 8016d74:	da08      	bge.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016d76:	2a00      	cmp	r2, #0
 8016d78:	dd06      	ble.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016d7a:	1acb      	subs	r3, r1, r3
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	f2c0 80bb 	blt.w	8016ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f300 80b9 	bgt.w	8016efa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016d88:	6967      	ldr	r7, [r4, #20]
 8016d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d8c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016d90:	443b      	add	r3, r7
 8016d92:	461f      	mov	r7, r3
 8016d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d96:	1bdf      	subs	r7, r3, r7
 8016d98:	4297      	cmp	r7, r2
 8016d9a:	bfa8      	it	ge
 8016d9c:	4617      	movge	r7, r2
 8016d9e:	2f00      	cmp	r7, #0
 8016da0:	f340 813c 	ble.w	801701c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016da4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016da6:	6829      	ldr	r1, [r5, #0]
 8016da8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016dac:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016db0:	4411      	add	r1, r2
 8016db2:	4299      	cmp	r1, r3
 8016db4:	6820      	ldr	r0, [r4, #0]
 8016db6:	dd1a      	ble.n	8016dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016db8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016dbc:	4402      	add	r2, r0
 8016dbe:	440b      	add	r3, r1
 8016dc0:	b21b      	sxth	r3, r3
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	dc13      	bgt.n	8016dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016dc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dca:	a912      	add	r1, sp, #72	; 0x48
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	9206      	str	r2, [sp, #24]
 8016dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dd2:	9500      	str	r5, [sp, #0]
 8016dd4:	9205      	str	r2, [sp, #20]
 8016dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dda:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016dde:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016de0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016de4:	aa49      	add	r2, sp, #292	; 0x124
 8016de6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016dea:	4623      	mov	r3, r4
 8016dec:	47c8      	blx	r9
 8016dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016df2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016df6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016dfa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e02:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016e06:	ed94 6a08 	vldr	s12, [r4, #32]
 8016e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e0e:	edd4 6a07 	vldr	s13, [r4, #28]
 8016e12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e16:	441a      	add	r2, r3
 8016e18:	6963      	ldr	r3, [r4, #20]
 8016e1a:	68a1      	ldr	r1, [r4, #8]
 8016e1c:	3301      	adds	r3, #1
 8016e1e:	6163      	str	r3, [r4, #20]
 8016e20:	69a3      	ldr	r3, [r4, #24]
 8016e22:	6022      	str	r2, [r4, #0]
 8016e24:	3b01      	subs	r3, #1
 8016e26:	61a3      	str	r3, [r4, #24]
 8016e28:	6923      	ldr	r3, [r4, #16]
 8016e2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e2e:	440b      	add	r3, r1
 8016e30:	68e1      	ldr	r1, [r4, #12]
 8016e32:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e36:	428b      	cmp	r3, r1
 8016e38:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e3c:	6123      	str	r3, [r4, #16]
 8016e3e:	db15      	blt.n	8016e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016e40:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016e44:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e48:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e4c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016e50:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e58:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e60:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e64:	3201      	adds	r2, #1
 8016e66:	1a5b      	subs	r3, r3, r1
 8016e68:	6022      	str	r2, [r4, #0]
 8016e6a:	6123      	str	r3, [r4, #16]
 8016e6c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e74:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016e78:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e80:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016e84:	ed95 6a08 	vldr	s12, [r5, #32]
 8016e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e8c:	edd5 6a07 	vldr	s13, [r5, #28]
 8016e90:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e94:	441a      	add	r2, r3
 8016e96:	696b      	ldr	r3, [r5, #20]
 8016e98:	68a9      	ldr	r1, [r5, #8]
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	616b      	str	r3, [r5, #20]
 8016e9e:	69ab      	ldr	r3, [r5, #24]
 8016ea0:	602a      	str	r2, [r5, #0]
 8016ea2:	3b01      	subs	r3, #1
 8016ea4:	61ab      	str	r3, [r5, #24]
 8016ea6:	692b      	ldr	r3, [r5, #16]
 8016ea8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016eac:	440b      	add	r3, r1
 8016eae:	68e9      	ldr	r1, [r5, #12]
 8016eb0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016eb4:	428b      	cmp	r3, r1
 8016eb6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016eba:	612b      	str	r3, [r5, #16]
 8016ebc:	db15      	blt.n	8016eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016ebe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016ec2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016ec6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016eca:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016ece:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ed2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016ed6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ede:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	1a5b      	subs	r3, r3, r1
 8016ee6:	602a      	str	r2, [r5, #0]
 8016ee8:	612b      	str	r3, [r5, #16]
 8016eea:	3f01      	subs	r7, #1
 8016eec:	e757      	b.n	8016d9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016eee:	ad39      	add	r5, sp, #228	; 0xe4
 8016ef0:	ac19      	add	r4, sp, #100	; 0x64
 8016ef2:	e72d      	b.n	8016d50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	e744      	b.n	8016d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016ef8:	4613      	mov	r3, r2
 8016efa:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016efe:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016f02:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016f06:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016f0a:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016f0e:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016f12:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016f16:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016f1a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016f1e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016f22:	469e      	mov	lr, r3
 8016f24:	461f      	mov	r7, r3
 8016f26:	f04f 0900 	mov.w	r9, #0
 8016f2a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016f2c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016f30:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016f32:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016f36:	960e      	str	r6, [sp, #56]	; 0x38
 8016f38:	2f00      	cmp	r7, #0
 8016f3a:	d146      	bne.n	8016fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016f3c:	449c      	add	ip, r3
 8016f3e:	1ad7      	subs	r7, r2, r3
 8016f40:	f1b9 0f00 	cmp.w	r9, #0
 8016f44:	d009      	beq.n	8016f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016f46:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016f4a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016f4e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016f52:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016f56:	9039      	str	r0, [sp, #228]	; 0xe4
 8016f58:	913d      	str	r1, [sp, #244]	; 0xf4
 8016f5a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016f5e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016f62:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016f66:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016f6a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016f6e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016f72:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016f76:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016f7a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016f7e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016f82:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016f86:	f04f 0800 	mov.w	r8, #0
 8016f8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016f8c:	910e      	str	r1, [sp, #56]	; 0x38
 8016f8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016f92:	f1be 0f00 	cmp.w	lr, #0
 8016f96:	d030      	beq.n	8016ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016f98:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016f9a:	4450      	add	r0, sl
 8016f9c:	4431      	add	r1, r6
 8016f9e:	4549      	cmp	r1, r9
 8016fa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016fa4:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016fa8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016fac:	db08      	blt.n	8016fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016fae:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016fb2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016fb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016fba:	3001      	adds	r0, #1
 8016fbc:	eba1 0109 	sub.w	r1, r1, r9
 8016fc0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016fc4:	f04f 0801 	mov.w	r8, #1
 8016fc8:	e7e3      	b.n	8016f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016fca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016fcc:	4450      	add	r0, sl
 8016fce:	4431      	add	r1, r6
 8016fd0:	4541      	cmp	r1, r8
 8016fd2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016fd6:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016fda:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016fde:	db08      	blt.n	8016ff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016fe0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016fe4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016fe8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016fec:	3001      	adds	r0, #1
 8016fee:	eba1 0108 	sub.w	r1, r1, r8
 8016ff2:	3f01      	subs	r7, #1
 8016ff4:	f04f 0901 	mov.w	r9, #1
 8016ff8:	e79e      	b.n	8016f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016ffa:	449c      	add	ip, r3
 8016ffc:	1aff      	subs	r7, r7, r3
 8016ffe:	f1b8 0f00 	cmp.w	r8, #0
 8017002:	d009      	beq.n	8017018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017004:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017008:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801700c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017010:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017014:	9019      	str	r0, [sp, #100]	; 0x64
 8017016:	911d      	str	r1, [sp, #116]	; 0x74
 8017018:	1ad2      	subs	r2, r2, r3
 801701a:	e6b5      	b.n	8016d88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801701c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	b923      	cbnz	r3, 801702c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017022:	4b04      	ldr	r3, [pc, #16]	; (8017034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017024:	6818      	ldr	r0, [r3, #0]
 8017026:	6803      	ldr	r3, [r0, #0]
 8017028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801702a:	4798      	blx	r3
 801702c:	b05b      	add	sp, #364	; 0x16c
 801702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017032:	bf00      	nop
 8017034:	2004f65c 	.word	0x2004f65c

08017038 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017038:	2b03      	cmp	r3, #3
 801703a:	d818      	bhi.n	801706e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801703c:	e8df f003 	tbb	[pc, r3]
 8017040:	130d0602 	.word	0x130d0602
 8017044:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017048:	1850      	adds	r0, r2, r1
 801704a:	4770      	bx	lr
 801704c:	8803      	ldrh	r3, [r0, #0]
 801704e:	8880      	ldrh	r0, [r0, #4]
 8017050:	4418      	add	r0, r3
 8017052:	b200      	sxth	r0, r0
 8017054:	1a80      	subs	r0, r0, r2
 8017056:	3801      	subs	r0, #1
 8017058:	4770      	bx	lr
 801705a:	8803      	ldrh	r3, [r0, #0]
 801705c:	8880      	ldrh	r0, [r0, #4]
 801705e:	4418      	add	r0, r3
 8017060:	b200      	sxth	r0, r0
 8017062:	1a40      	subs	r0, r0, r1
 8017064:	e7f7      	b.n	8017056 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017066:	f9b0 0000 	ldrsh.w	r0, [r0]
 801706a:	4410      	add	r0, r2
 801706c:	4770      	bx	lr
 801706e:	2000      	movs	r0, #0
 8017070:	4770      	bx	lr

08017072 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017072:	2b03      	cmp	r3, #3
 8017074:	d817      	bhi.n	80170a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017076:	e8df f003 	tbb	[pc, r3]
 801707a:	0602      	.short	0x0602
 801707c:	1009      	.short	0x1009
 801707e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017082:	1850      	adds	r0, r2, r1
 8017084:	4770      	bx	lr
 8017086:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801708a:	e7fa      	b.n	8017082 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801708c:	8843      	ldrh	r3, [r0, #2]
 801708e:	88c0      	ldrh	r0, [r0, #6]
 8017090:	4418      	add	r0, r3
 8017092:	b200      	sxth	r0, r0
 8017094:	1a80      	subs	r0, r0, r2
 8017096:	3801      	subs	r0, #1
 8017098:	4770      	bx	lr
 801709a:	8843      	ldrh	r3, [r0, #2]
 801709c:	88c0      	ldrh	r0, [r0, #6]
 801709e:	4418      	add	r0, r3
 80170a0:	b200      	sxth	r0, r0
 80170a2:	1a40      	subs	r0, r0, r1
 80170a4:	e7f7      	b.n	8017096 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80170a6:	2000      	movs	r0, #0
 80170a8:	4770      	bx	lr
	...

080170ac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80170ac:	2200      	movs	r2, #0
 80170ae:	4b01      	ldr	r3, [pc, #4]	; (80170b4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80170b0:	601a      	str	r2, [r3, #0]
 80170b2:	4770      	bx	lr
 80170b4:	2004f66c 	.word	0x2004f66c

080170b8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80170b8:	4603      	mov	r3, r0
 80170ba:	b1c8      	cbz	r0, 80170f0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80170bc:	0c02      	lsrs	r2, r0, #16
 80170be:	0412      	lsls	r2, r2, #16
 80170c0:	b9a2      	cbnz	r2, 80170ec <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80170c2:	0403      	lsls	r3, r0, #16
 80170c4:	2010      	movs	r0, #16
 80170c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80170ca:	bf04      	itt	eq
 80170cc:	021b      	lsleq	r3, r3, #8
 80170ce:	3008      	addeq	r0, #8
 80170d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80170d4:	bf04      	itt	eq
 80170d6:	011b      	lsleq	r3, r3, #4
 80170d8:	3004      	addeq	r0, #4
 80170da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80170de:	bf04      	itt	eq
 80170e0:	009b      	lsleq	r3, r3, #2
 80170e2:	3002      	addeq	r0, #2
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	db04      	blt.n	80170f2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80170e8:	3001      	adds	r0, #1
 80170ea:	4770      	bx	lr
 80170ec:	2000      	movs	r0, #0
 80170ee:	e7ea      	b.n	80170c6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80170f0:	2020      	movs	r0, #32
 80170f2:	4770      	bx	lr

080170f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80170f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f8:	b087      	sub	sp, #28
 80170fa:	4681      	mov	r9, r0
 80170fc:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017100:	4610      	mov	r0, r2
 8017102:	4698      	mov	r8, r3
 8017104:	460d      	mov	r5, r1
 8017106:	b981      	cbnz	r1, 801712a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017108:	b14b      	cbz	r3, 801711e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801710a:	460b      	mov	r3, r1
 801710c:	e9cd 4700 	strd	r4, r7, [sp]
 8017110:	464a      	mov	r2, r9
 8017112:	4641      	mov	r1, r8
 8017114:	f7ff ffee 	bl	80170f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017118:	b007      	add	sp, #28
 801711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801711e:	f04f 33ff 	mov.w	r3, #4294967295
 8017122:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017126:	603b      	str	r3, [r7, #0]
 8017128:	e7f6      	b.n	8017118 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801712a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801712e:	d107      	bne.n	8017140 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017130:	fb09 f602 	mul.w	r6, r9, r2
 8017134:	fbb6 f0f4 	udiv	r0, r6, r4
 8017138:	fb04 6610 	mls	r6, r4, r0, r6
 801713c:	603e      	str	r6, [r7, #0]
 801713e:	e7eb      	b.n	8017118 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017140:	fa09 fb01 	lsl.w	fp, r9, r1
 8017144:	fbbb f3f4 	udiv	r3, fp, r4
 8017148:	2601      	movs	r6, #1
 801714a:	9302      	str	r3, [sp, #8]
 801714c:	408e      	lsls	r6, r1
 801714e:	fb0a f303 	mul.w	r3, sl, r3
 8017152:	3e01      	subs	r6, #1
 8017154:	4016      	ands	r6, r2
 8017156:	4630      	mov	r0, r6
 8017158:	9303      	str	r3, [sp, #12]
 801715a:	f7ff ffad 	bl	80170b8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801715e:	464a      	mov	r2, r9
 8017160:	460b      	mov	r3, r1
 8017162:	e9cd 4700 	strd	r4, r7, [sp]
 8017166:	4601      	mov	r1, r0
 8017168:	4630      	mov	r0, r6
 801716a:	f7ff ffc3 	bl	80170f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801716e:	9b02      	ldr	r3, [sp, #8]
 8017170:	4606      	mov	r6, r0
 8017172:	fb04 bb13 	mls	fp, r4, r3, fp
 8017176:	4658      	mov	r0, fp
 8017178:	eb05 0108 	add.w	r1, r5, r8
 801717c:	f7ff ff9c 	bl	80170b8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017180:	ab05      	add	r3, sp, #20
 8017182:	e9cd 4300 	strd	r4, r3, [sp]
 8017186:	465a      	mov	r2, fp
 8017188:	4603      	mov	r3, r0
 801718a:	4650      	mov	r0, sl
 801718c:	f7ff ffb2 	bl	80170f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017190:	6839      	ldr	r1, [r7, #0]
 8017192:	9a05      	ldr	r2, [sp, #20]
 8017194:	9b03      	ldr	r3, [sp, #12]
 8017196:	4411      	add	r1, r2
 8017198:	fbb1 f2f4 	udiv	r2, r1, r4
 801719c:	fb04 1412 	mls	r4, r4, r2, r1
 80171a0:	18d3      	adds	r3, r2, r3
 80171a2:	441e      	add	r6, r3
 80171a4:	4430      	add	r0, r6
 80171a6:	603c      	str	r4, [r7, #0]
 80171a8:	e7b6      	b.n	8017118 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080171aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80171aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171ae:	b085      	sub	sp, #20
 80171b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80171b2:	f1b0 0900 	subs.w	r9, r0, #0
 80171b6:	461d      	mov	r5, r3
 80171b8:	bfbf      	itttt	lt
 80171ba:	6823      	ldrlt	r3, [r4, #0]
 80171bc:	f1c9 0900 	rsblt	r9, r9, #0
 80171c0:	425b      	neglt	r3, r3
 80171c2:	6023      	strlt	r3, [r4, #0]
 80171c4:	bfb4      	ite	lt
 80171c6:	f04f 36ff 	movlt.w	r6, #4294967295
 80171ca:	2601      	movge	r6, #1
 80171cc:	2a00      	cmp	r2, #0
 80171ce:	4617      	mov	r7, r2
 80171d0:	da04      	bge.n	80171dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80171d2:	6823      	ldr	r3, [r4, #0]
 80171d4:	4257      	negs	r7, r2
 80171d6:	425b      	negs	r3, r3
 80171d8:	4276      	negs	r6, r6
 80171da:	6023      	str	r3, [r4, #0]
 80171dc:	2d00      	cmp	r5, #0
 80171de:	4638      	mov	r0, r7
 80171e0:	bfba      	itte	lt
 80171e2:	426d      	neglt	r5, r5
 80171e4:	f04f 38ff 	movlt.w	r8, #4294967295
 80171e8:	f04f 0801 	movge.w	r8, #1
 80171ec:	f7ff ff64 	bl	80170b8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80171f0:	ab03      	add	r3, sp, #12
 80171f2:	e9cd 5300 	strd	r5, r3, [sp]
 80171f6:	463a      	mov	r2, r7
 80171f8:	4603      	mov	r3, r0
 80171fa:	4648      	mov	r0, r9
 80171fc:	f7ff ff7a 	bl	80170f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017200:	6823      	ldr	r3, [r4, #0]
 8017202:	9a03      	ldr	r2, [sp, #12]
 8017204:	4546      	cmp	r6, r8
 8017206:	441a      	add	r2, r3
 8017208:	fb92 f3f5 	sdiv	r3, r2, r5
 801720c:	4418      	add	r0, r3
 801720e:	fb05 2313 	mls	r3, r5, r3, r2
 8017212:	bf18      	it	ne
 8017214:	4240      	negne	r0, r0
 8017216:	1c72      	adds	r2, r6, #1
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	d105      	bne.n	8017228 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801721c:	2b00      	cmp	r3, #0
 801721e:	f1c3 0200 	rsb	r2, r3, #0
 8017222:	db0b      	blt.n	801723c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017224:	6022      	str	r2, [r4, #0]
 8017226:	e006      	b.n	8017236 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017228:	2e01      	cmp	r6, #1
 801722a:	d104      	bne.n	8017236 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801722c:	2b00      	cmp	r3, #0
 801722e:	da02      	bge.n	8017236 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017230:	442b      	add	r3, r5
 8017232:	3801      	subs	r0, #1
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	b005      	add	sp, #20
 8017238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801723c:	3801      	subs	r0, #1
 801723e:	1b52      	subs	r2, r2, r5
 8017240:	e7f0      	b.n	8017224 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017244 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017248:	4c1c      	ldr	r4, [pc, #112]	; (80172bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801724a:	4605      	mov	r5, r0
 801724c:	69a3      	ldr	r3, [r4, #24]
 801724e:	6807      	ldr	r7, [r0, #0]
 8017250:	b92b      	cbnz	r3, 801725e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017252:	6840      	ldr	r0, [r0, #4]
 8017254:	e9c5 7000 	strd	r7, r0, [r5]
 8017258:	b004      	add	sp, #16
 801725a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801725e:	f04f 0802 	mov.w	r8, #2
 8017262:	fb93 f1f8 	sdiv	r1, r3, r8
 8017266:	68a2      	ldr	r2, [r4, #8]
 8017268:	ae04      	add	r6, sp, #16
 801726a:	440a      	add	r2, r1
 801726c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017270:	69e1      	ldr	r1, [r4, #28]
 8017272:	463a      	mov	r2, r7
 8017274:	9600      	str	r6, [sp, #0]
 8017276:	6820      	ldr	r0, [r4, #0]
 8017278:	f7ff ff97 	bl	80171aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801727c:	69a3      	ldr	r3, [r4, #24]
 801727e:	4607      	mov	r7, r0
 8017280:	686a      	ldr	r2, [r5, #4]
 8017282:	6a21      	ldr	r1, [r4, #32]
 8017284:	9600      	str	r6, [sp, #0]
 8017286:	6860      	ldr	r0, [r4, #4]
 8017288:	f7ff ff8f 	bl	80171aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801728c:	69a3      	ldr	r3, [r4, #24]
 801728e:	6962      	ldr	r2, [r4, #20]
 8017290:	fb93 f8f8 	sdiv	r8, r3, r8
 8017294:	4442      	add	r2, r8
 8017296:	9203      	str	r2, [sp, #12]
 8017298:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801729a:	682a      	ldr	r2, [r5, #0]
 801729c:	4407      	add	r7, r0
 801729e:	9600      	str	r6, [sp, #0]
 80172a0:	68e0      	ldr	r0, [r4, #12]
 80172a2:	f7ff ff82 	bl	80171aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80172a6:	9600      	str	r6, [sp, #0]
 80172a8:	4680      	mov	r8, r0
 80172aa:	69a3      	ldr	r3, [r4, #24]
 80172ac:	686a      	ldr	r2, [r5, #4]
 80172ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80172b0:	6920      	ldr	r0, [r4, #16]
 80172b2:	f7ff ff7a 	bl	80171aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80172b6:	4440      	add	r0, r8
 80172b8:	e7cc      	b.n	8017254 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80172ba:	bf00      	nop
 80172bc:	2004f670 	.word	0x2004f670

080172c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80172c0:	4b07      	ldr	r3, [pc, #28]	; (80172e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d109      	bne.n	80172dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80172c8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80172cc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80172d0:	8003      	strh	r3, [r0, #0]
 80172d2:	4b04      	ldr	r3, [pc, #16]	; (80172e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80172d4:	881b      	ldrh	r3, [r3, #0]
 80172d6:	3b01      	subs	r3, #1
 80172d8:	1a9b      	subs	r3, r3, r2
 80172da:	800b      	strh	r3, [r1, #0]
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop
 80172e0:	2004f654 	.word	0x2004f654
 80172e4:	2004f650 	.word	0x2004f650

080172e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80172e8:	b510      	push	{r4, lr}
 80172ea:	4b07      	ldr	r3, [pc, #28]	; (8017308 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	2b01      	cmp	r3, #1
 80172f0:	d108      	bne.n	8017304 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80172f2:	4b06      	ldr	r3, [pc, #24]	; (801730c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80172f4:	880c      	ldrh	r4, [r1, #0]
 80172f6:	881b      	ldrh	r3, [r3, #0]
 80172f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80172fc:	3b01      	subs	r3, #1
 80172fe:	1b1b      	subs	r3, r3, r4
 8017300:	8003      	strh	r3, [r0, #0]
 8017302:	800a      	strh	r2, [r1, #0]
 8017304:	bd10      	pop	{r4, pc}
 8017306:	bf00      	nop
 8017308:	2004f654 	.word	0x2004f654
 801730c:	2004f650 	.word	0x2004f650

08017310 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017310:	b510      	push	{r4, lr}
 8017312:	4b0a      	ldr	r3, [pc, #40]	; (801733c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	2b01      	cmp	r3, #1
 8017318:	d10e      	bne.n	8017338 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801731a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801731e:	8843      	ldrh	r3, [r0, #2]
 8017320:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017324:	18ca      	adds	r2, r1, r3
 8017326:	4b06      	ldr	r3, [pc, #24]	; (8017340 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017328:	8044      	strh	r4, [r0, #2]
 801732a:	881b      	ldrh	r3, [r3, #0]
 801732c:	1a9b      	subs	r3, r3, r2
 801732e:	8003      	strh	r3, [r0, #0]
 8017330:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017334:	8081      	strh	r1, [r0, #4]
 8017336:	80c3      	strh	r3, [r0, #6]
 8017338:	bd10      	pop	{r4, pc}
 801733a:	bf00      	nop
 801733c:	2004f654 	.word	0x2004f654
 8017340:	2004f650 	.word	0x2004f650

08017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017344:	4b08      	ldr	r3, [pc, #32]	; (8017368 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	2b01      	cmp	r3, #1
 801734a:	d10c      	bne.n	8017366 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801734c:	8803      	ldrh	r3, [r0, #0]
 801734e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017352:	8842      	ldrh	r2, [r0, #2]
 8017354:	8002      	strh	r2, [r0, #0]
 8017356:	185a      	adds	r2, r3, r1
 8017358:	4b04      	ldr	r3, [pc, #16]	; (801736c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801735a:	881b      	ldrh	r3, [r3, #0]
 801735c:	1a9b      	subs	r3, r3, r2
 801735e:	8043      	strh	r3, [r0, #2]
 8017360:	88c3      	ldrh	r3, [r0, #6]
 8017362:	80c1      	strh	r1, [r0, #6]
 8017364:	8083      	strh	r3, [r0, #4]
 8017366:	4770      	bx	lr
 8017368:	2004f654 	.word	0x2004f654
 801736c:	2004f650 	.word	0x2004f650

08017370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017370:	b510      	push	{r4, lr}
 8017372:	4b07      	ldr	r3, [pc, #28]	; (8017390 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	2b01      	cmp	r3, #1
 8017378:	d108      	bne.n	801738c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801737a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801737e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017382:	8003      	strh	r3, [r0, #0]
 8017384:	8893      	ldrh	r3, [r2, #4]
 8017386:	3b01      	subs	r3, #1
 8017388:	1b1b      	subs	r3, r3, r4
 801738a:	800b      	strh	r3, [r1, #0]
 801738c:	bd10      	pop	{r4, pc}
 801738e:	bf00      	nop
 8017390:	2004f654 	.word	0x2004f654

08017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017394:	b510      	push	{r4, lr}
 8017396:	4b0a      	ldr	r3, [pc, #40]	; (80173c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017398:	460a      	mov	r2, r1
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	2b01      	cmp	r3, #1
 801739e:	d10d      	bne.n	80173bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80173a0:	8881      	ldrh	r1, [r0, #4]
 80173a2:	8803      	ldrh	r3, [r0, #0]
 80173a4:	440b      	add	r3, r1
 80173a6:	4601      	mov	r1, r0
 80173a8:	3b01      	subs	r3, #1
 80173aa:	f821 3b02 	strh.w	r3, [r1], #2
 80173ae:	f7ff ffdf 	bl	8017370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80173b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80173b6:	88c2      	ldrh	r2, [r0, #6]
 80173b8:	80c3      	strh	r3, [r0, #6]
 80173ba:	8082      	strh	r2, [r0, #4]
 80173bc:	bd10      	pop	{r4, pc}
 80173be:	bf00      	nop
 80173c0:	2004f654 	.word	0x2004f654

080173c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80173c4:	2300      	movs	r3, #0
 80173c6:	b570      	push	{r4, r5, r6, lr}
 80173c8:	4c0a      	ldr	r4, [pc, #40]	; (80173f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80173ca:	4605      	mov	r5, r0
 80173cc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80173d0:	6820      	ldr	r0, [r4, #0]
 80173d2:	460e      	mov	r6, r1
 80173d4:	b110      	cbz	r0, 80173dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 80173d6:	6803      	ldr	r3, [r0, #0]
 80173d8:	695b      	ldr	r3, [r3, #20]
 80173da:	4798      	blx	r3
 80173dc:	6026      	str	r6, [r4, #0]
 80173de:	6833      	ldr	r3, [r6, #0]
 80173e0:	4630      	mov	r0, r6
 80173e2:	68db      	ldr	r3, [r3, #12]
 80173e4:	4798      	blx	r3
 80173e6:	682b      	ldr	r3, [r5, #0]
 80173e8:	4628      	mov	r0, r5
 80173ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173f0:	4718      	bx	r3
 80173f2:	bf00      	nop
 80173f4:	2004f6a0 	.word	0x2004f6a0

080173f8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80173f8:	2100      	movs	r1, #0
 80173fa:	4b06      	ldr	r3, [pc, #24]	; (8017414 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80173fc:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017400:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017404:	4b04      	ldr	r3, [pc, #16]	; (8017418 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017406:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801740a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801740e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017412:	4770      	bx	lr
 8017414:	2004f650 	.word	0x2004f650
 8017418:	2004f652 	.word	0x2004f652

0801741c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801741c:	4b03      	ldr	r3, [pc, #12]	; (801742c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801741e:	6818      	ldr	r0, [r3, #0]
 8017420:	b110      	cbz	r0, 8017428 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017422:	6803      	ldr	r3, [r0, #0]
 8017424:	699b      	ldr	r3, [r3, #24]
 8017426:	4718      	bx	r3
 8017428:	4770      	bx	lr
 801742a:	bf00      	nop
 801742c:	2004f6a0 	.word	0x2004f6a0

08017430 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017430:	4770      	bx	lr
	...

08017434 <_ZN8touchgfx11Application4drawEv>:
 8017434:	b507      	push	{r0, r1, r2, lr}
 8017436:	2100      	movs	r1, #0
 8017438:	4b08      	ldr	r3, [pc, #32]	; (801745c <_ZN8touchgfx11Application4drawEv+0x28>)
 801743a:	9100      	str	r1, [sp, #0]
 801743c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017440:	4b07      	ldr	r3, [pc, #28]	; (8017460 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017442:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017446:	f9b3 3000 	ldrsh.w	r3, [r3]
 801744a:	4669      	mov	r1, sp
 801744c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017450:	6803      	ldr	r3, [r0, #0]
 8017452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017454:	4798      	blx	r3
 8017456:	b003      	add	sp, #12
 8017458:	f85d fb04 	ldr.w	pc, [sp], #4
 801745c:	2004f650 	.word	0x2004f650
 8017460:	2004f652 	.word	0x2004f652

08017464 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017464:	4b03      	ldr	r3, [pc, #12]	; (8017474 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017466:	6818      	ldr	r0, [r3, #0]
 8017468:	b110      	cbz	r0, 8017470 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801746a:	6803      	ldr	r3, [r0, #0]
 801746c:	69db      	ldr	r3, [r3, #28]
 801746e:	4718      	bx	r3
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop
 8017474:	2004f6a0 	.word	0x2004f6a0

08017478 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017478:	4b03      	ldr	r3, [pc, #12]	; (8017488 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801747a:	6818      	ldr	r0, [r3, #0]
 801747c:	b110      	cbz	r0, 8017484 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801747e:	6803      	ldr	r3, [r0, #0]
 8017480:	6a1b      	ldr	r3, [r3, #32]
 8017482:	4718      	bx	r3
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	2004f6a0 	.word	0x2004f6a0

0801748c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801748c:	2300      	movs	r3, #0
 801748e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017492:	4770      	bx	lr

08017494 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017494:	4b03      	ldr	r3, [pc, #12]	; (80174a4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017496:	6818      	ldr	r0, [r3, #0]
 8017498:	b110      	cbz	r0, 80174a0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801749a:	6803      	ldr	r3, [r0, #0]
 801749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801749e:	4718      	bx	r3
 80174a0:	4770      	bx	lr
 80174a2:	bf00      	nop
 80174a4:	2004f6a0 	.word	0x2004f6a0

080174a8 <_ZN8touchgfx11Application15handleTickEventEv>:
 80174a8:	b570      	push	{r4, r5, r6, lr}
 80174aa:	4d32      	ldr	r5, [pc, #200]	; (8017574 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 80174ac:	4604      	mov	r4, r0
 80174ae:	6828      	ldr	r0, [r5, #0]
 80174b0:	b140      	cbz	r0, 80174c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80174b2:	7a03      	ldrb	r3, [r0, #8]
 80174b4:	b933      	cbnz	r3, 80174c4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80174b6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80174ba:	6803      	ldr	r3, [r0, #0]
 80174bc:	689b      	ldr	r3, [r3, #8]
 80174be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174c2:	4718      	bx	r3
 80174c4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80174c8:	b97b      	cbnz	r3, 80174ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80174ca:	b170      	cbz	r0, 80174ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80174cc:	7a03      	ldrb	r3, [r0, #8]
 80174ce:	b163      	cbz	r3, 80174ea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80174d0:	4b29      	ldr	r3, [pc, #164]	; (8017578 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80174d2:	6818      	ldr	r0, [r3, #0]
 80174d4:	b110      	cbz	r0, 80174dc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80174d6:	6803      	ldr	r3, [r0, #0]
 80174d8:	691b      	ldr	r3, [r3, #16]
 80174da:	4798      	blx	r3
 80174dc:	6828      	ldr	r0, [r5, #0]
 80174de:	6803      	ldr	r3, [r0, #0]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	4798      	blx	r3
 80174e4:	2301      	movs	r3, #1
 80174e6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80174ea:	2500      	movs	r5, #0
 80174ec:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80174f0:	42a8      	cmp	r0, r5
 80174f2:	dd0c      	ble.n	801750e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80174f4:	1963      	adds	r3, r4, r5
 80174f6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80174fa:	b132      	cbz	r2, 801750a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80174fc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017500:	4413      	add	r3, r2
 8017502:	6858      	ldr	r0, [r3, #4]
 8017504:	6803      	ldr	r3, [r0, #0]
 8017506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017508:	4798      	blx	r3
 801750a:	3501      	adds	r5, #1
 801750c:	e7ee      	b.n	80174ec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801750e:	2300      	movs	r3, #0
 8017510:	461a      	mov	r2, r3
 8017512:	4298      	cmp	r0, r3
 8017514:	d015      	beq.n	8017542 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017516:	18e1      	adds	r1, r4, r3
 8017518:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801751c:	b16d      	cbz	r5, 801753a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801751e:	429a      	cmp	r2, r3
 8017520:	d00a      	beq.n	8017538 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8017522:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017526:	4431      	add	r1, r6
 8017528:	684e      	ldr	r6, [r1, #4]
 801752a:	b291      	uxth	r1, r2
 801752c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017530:	604e      	str	r6, [r1, #4]
 8017532:	18a1      	adds	r1, r4, r2
 8017534:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017538:	3201      	adds	r2, #1
 801753a:	3301      	adds	r3, #1
 801753c:	e7e9      	b.n	8017512 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801753e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017542:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017546:	4295      	cmp	r5, r2
 8017548:	dd0d      	ble.n	8017566 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801754a:	1e6b      	subs	r3, r5, #1
 801754c:	b29b      	uxth	r3, r3
 801754e:	4618      	mov	r0, r3
 8017550:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8017554:	3104      	adds	r1, #4
 8017556:	4285      	cmp	r5, r0
 8017558:	ddf1      	ble.n	801753e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801755a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801755e:	3001      	adds	r0, #1
 8017560:	f841 6c04 	str.w	r6, [r1, #-4]
 8017564:	e7f7      	b.n	8017556 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017566:	4b04      	ldr	r3, [pc, #16]	; (8017578 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	b110      	cbz	r0, 8017572 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801756c:	6803      	ldr	r3, [r0, #0]
 801756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017570:	e7a5      	b.n	80174be <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	2004f6a4 	.word	0x2004f6a4
 8017578:	2004f6a0 	.word	0x2004f6a0

0801757c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801757c:	b510      	push	{r4, lr}
 801757e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017582:	888a      	ldrh	r2, [r1, #4]
 8017584:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017588:	4422      	add	r2, r4
 801758a:	b212      	sxth	r2, r2
 801758c:	4293      	cmp	r3, r2
 801758e:	da15      	bge.n	80175bc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017590:	8882      	ldrh	r2, [r0, #4]
 8017592:	4413      	add	r3, r2
 8017594:	b21b      	sxth	r3, r3
 8017596:	429c      	cmp	r4, r3
 8017598:	da10      	bge.n	80175bc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801759a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801759e:	88c9      	ldrh	r1, [r1, #6]
 80175a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80175a4:	4419      	add	r1, r3
 80175a6:	b209      	sxth	r1, r1
 80175a8:	428a      	cmp	r2, r1
 80175aa:	da07      	bge.n	80175bc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80175ac:	88c0      	ldrh	r0, [r0, #6]
 80175ae:	4410      	add	r0, r2
 80175b0:	b200      	sxth	r0, r0
 80175b2:	4283      	cmp	r3, r0
 80175b4:	bfac      	ite	ge
 80175b6:	2000      	movge	r0, #0
 80175b8:	2001      	movlt	r0, #1
 80175ba:	bd10      	pop	{r4, pc}
 80175bc:	2000      	movs	r0, #0
 80175be:	e7fc      	b.n	80175ba <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080175c0 <_ZN8touchgfx4Rect10restrictToEss>:
 80175c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80175c4:	b510      	push	{r4, lr}
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	da04      	bge.n	80175d4 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80175ca:	8884      	ldrh	r4, [r0, #4]
 80175cc:	4423      	add	r3, r4
 80175ce:	8083      	strh	r3, [r0, #4]
 80175d0:	2300      	movs	r3, #0
 80175d2:	8003      	strh	r3, [r0, #0]
 80175d4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80175d8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80175dc:	1b09      	subs	r1, r1, r4
 80175de:	428b      	cmp	r3, r1
 80175e0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80175e4:	bfc8      	it	gt
 80175e6:	8081      	strhgt	r1, [r0, #4]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	da04      	bge.n	80175f6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80175ec:	88c1      	ldrh	r1, [r0, #6]
 80175ee:	440b      	add	r3, r1
 80175f0:	80c3      	strh	r3, [r0, #6]
 80175f2:	2300      	movs	r3, #0
 80175f4:	8043      	strh	r3, [r0, #2]
 80175f6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80175fa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80175fe:	1a52      	subs	r2, r2, r1
 8017600:	4293      	cmp	r3, r2
 8017602:	bfc8      	it	gt
 8017604:	80c2      	strhgt	r2, [r0, #6]
 8017606:	bd10      	pop	{r4, pc}

08017608 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017608:	b510      	push	{r4, lr}
 801760a:	460c      	mov	r4, r1
 801760c:	4b0f      	ldr	r3, [pc, #60]	; (801764c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801760e:	4620      	mov	r0, r4
 8017610:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017614:	4b0e      	ldr	r3, [pc, #56]	; (8017650 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017616:	f9b3 1000 	ldrsh.w	r1, [r3]
 801761a:	f7ff ffd1 	bl	80175c0 <_ZN8touchgfx4Rect10restrictToEss>
 801761e:	4b0d      	ldr	r3, [pc, #52]	; (8017654 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017620:	6818      	ldr	r0, [r3, #0]
 8017622:	b190      	cbz	r0, 801764a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017624:	6803      	ldr	r3, [r0, #0]
 8017626:	4621      	mov	r1, r4
 8017628:	689b      	ldr	r3, [r3, #8]
 801762a:	4798      	blx	r3
 801762c:	4b0a      	ldr	r3, [pc, #40]	; (8017658 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801762e:	6818      	ldr	r0, [r3, #0]
 8017630:	b118      	cbz	r0, 801763a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017632:	6803      	ldr	r3, [r0, #0]
 8017634:	4621      	mov	r1, r4
 8017636:	689b      	ldr	r3, [r3, #8]
 8017638:	4798      	blx	r3
 801763a:	4b08      	ldr	r3, [pc, #32]	; (801765c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801763c:	4621      	mov	r1, r4
 801763e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017642:	6818      	ldr	r0, [r3, #0]
 8017644:	6803      	ldr	r3, [r0, #0]
 8017646:	69db      	ldr	r3, [r3, #28]
 8017648:	4718      	bx	r3
 801764a:	bd10      	pop	{r4, pc}
 801764c:	2004f652 	.word	0x2004f652
 8017650:	2004f650 	.word	0x2004f650
 8017654:	2004f6a0 	.word	0x2004f6a0
 8017658:	2004f69c 	.word	0x2004f69c
 801765c:	2004f65c 	.word	0x2004f65c

08017660 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017662:	4606      	mov	r6, r0
 8017664:	4608      	mov	r0, r1
 8017666:	460f      	mov	r7, r1
 8017668:	f7fc f963 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801766c:	b9e8      	cbnz	r0, 80176aa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801766e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017672:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017676:	42a5      	cmp	r5, r4
 8017678:	db17      	blt.n	80176aa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801767a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801767e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017682:	429a      	cmp	r2, r3
 8017684:	db11      	blt.n	80176aa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017686:	88b9      	ldrh	r1, [r7, #4]
 8017688:	440d      	add	r5, r1
 801768a:	88b1      	ldrh	r1, [r6, #4]
 801768c:	b22d      	sxth	r5, r5
 801768e:	440c      	add	r4, r1
 8017690:	b224      	sxth	r4, r4
 8017692:	42a5      	cmp	r5, r4
 8017694:	dc09      	bgt.n	80176aa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017696:	88f8      	ldrh	r0, [r7, #6]
 8017698:	4410      	add	r0, r2
 801769a:	88f2      	ldrh	r2, [r6, #6]
 801769c:	b200      	sxth	r0, r0
 801769e:	4413      	add	r3, r2
 80176a0:	b21b      	sxth	r3, r3
 80176a2:	4298      	cmp	r0, r3
 80176a4:	bfcc      	ite	gt
 80176a6:	2000      	movgt	r0, #0
 80176a8:	2001      	movle	r0, #1
 80176aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176ac <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80176ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ae:	4604      	mov	r4, r0
 80176b0:	4608      	mov	r0, r1
 80176b2:	460d      	mov	r5, r1
 80176b4:	f7fc f93d 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 80176b8:	b978      	cbnz	r0, 80176da <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80176ba:	4620      	mov	r0, r4
 80176bc:	f7fc f939 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 80176c0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80176c4:	b150      	cbz	r0, 80176dc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80176c6:	8026      	strh	r6, [r4, #0]
 80176c8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80176cc:	8063      	strh	r3, [r4, #2]
 80176ce:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80176d2:	80a3      	strh	r3, [r4, #4]
 80176d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80176d8:	80e3      	strh	r3, [r4, #6]
 80176da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176dc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80176e0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80176e4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80176e8:	42b1      	cmp	r1, r6
 80176ea:	460f      	mov	r7, r1
 80176ec:	bfa8      	it	ge
 80176ee:	4637      	movge	r7, r6
 80176f0:	4293      	cmp	r3, r2
 80176f2:	4618      	mov	r0, r3
 80176f4:	bfa8      	it	ge
 80176f6:	4610      	movge	r0, r2
 80176f8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80176fc:	88ed      	ldrh	r5, [r5, #6]
 80176fe:	4466      	add	r6, ip
 8017700:	442a      	add	r2, r5
 8017702:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017706:	88e5      	ldrh	r5, [r4, #6]
 8017708:	4461      	add	r1, ip
 801770a:	442b      	add	r3, r5
 801770c:	b236      	sxth	r6, r6
 801770e:	b209      	sxth	r1, r1
 8017710:	b212      	sxth	r2, r2
 8017712:	b21b      	sxth	r3, r3
 8017714:	428e      	cmp	r6, r1
 8017716:	bfac      	ite	ge
 8017718:	ebc7 0106 	rsbge	r1, r7, r6
 801771c:	ebc7 0101 	rsblt	r1, r7, r1
 8017720:	429a      	cmp	r2, r3
 8017722:	bfac      	ite	ge
 8017724:	ebc0 0202 	rsbge	r2, r0, r2
 8017728:	ebc0 0203 	rsblt	r2, r0, r3
 801772c:	8027      	strh	r7, [r4, #0]
 801772e:	8060      	strh	r0, [r4, #2]
 8017730:	80a1      	strh	r1, [r4, #4]
 8017732:	80e2      	strh	r2, [r4, #6]
 8017734:	e7d1      	b.n	80176da <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017738 <_ZN8touchgfx11Application11getInstanceEv>:
 8017738:	4b01      	ldr	r3, [pc, #4]	; (8017740 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801773a:	6818      	ldr	r0, [r3, #0]
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	2004f6b0 	.word	0x2004f6b0

08017744 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017744:	2300      	movs	r3, #0
 8017746:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801774a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801774e:	30a8      	adds	r0, #168	; 0xa8
 8017750:	f802 3b01 	strb.w	r3, [r2], #1
 8017754:	4282      	cmp	r2, r0
 8017756:	d1fb      	bne.n	8017750 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017758:	4770      	bx	lr

0801775a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801775a:	4603      	mov	r3, r0
 801775c:	2200      	movs	r2, #0
 801775e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017762:	801a      	strh	r2, [r3, #0]
 8017764:	805a      	strh	r2, [r3, #2]
 8017766:	809a      	strh	r2, [r3, #4]
 8017768:	80da      	strh	r2, [r3, #6]
 801776a:	3308      	adds	r3, #8
 801776c:	428b      	cmp	r3, r1
 801776e:	d1f8      	bne.n	8017762 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017770:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017774:	4770      	bx	lr
	...

08017778 <_ZN8touchgfx11ApplicationC1Ev>:
 8017778:	b570      	push	{r4, r5, r6, lr}
 801777a:	2500      	movs	r5, #0
 801777c:	4604      	mov	r4, r0
 801777e:	4b18      	ldr	r3, [pc, #96]	; (80177e0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8017780:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8017784:	6003      	str	r3, [r0, #0]
 8017786:	30a8      	adds	r0, #168	; 0xa8
 8017788:	f7ff ffe7 	bl	801775a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801778c:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017790:	f7ff ffe3 	bl	801775a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017794:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017798:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801779c:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80177a0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80177a4:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80177a8:	490e      	ldr	r1, [pc, #56]	; (80177e4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80177aa:	480f      	ldr	r0, [pc, #60]	; (80177e8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80177ac:	f00e f8b4 	bl	8025918 <CRC_Lock>
 80177b0:	4e0e      	ldr	r6, [pc, #56]	; (80177ec <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80177b2:	4b0f      	ldr	r3, [pc, #60]	; (80177f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80177b4:	b158      	cbz	r0, 80177ce <_ZN8touchgfx11ApplicationC1Ev+0x56>
 80177b6:	801d      	strh	r5, [r3, #0]
 80177b8:	2300      	movs	r3, #0
 80177ba:	4a0e      	ldr	r2, [pc, #56]	; (80177f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80177bc:	4620      	mov	r0, r4
 80177be:	6013      	str	r3, [r2, #0]
 80177c0:	4a0d      	ldr	r2, [pc, #52]	; (80177f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80177c2:	6033      	str	r3, [r6, #0]
 80177c4:	6013      	str	r3, [r2, #0]
 80177c6:	f7ff ffbd 	bl	8017744 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80177ca:	4620      	mov	r0, r4
 80177cc:	bd70      	pop	{r4, r5, r6, pc}
 80177ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80177d2:	2002      	movs	r0, #2
 80177d4:	801a      	strh	r2, [r3, #0]
 80177d6:	6030      	str	r0, [r6, #0]
 80177d8:	f001 fa9e 	bl	8018d18 <_ZN8touchgfx6Screen4drawEv>
 80177dc:	e7ec      	b.n	80177b8 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 80177de:	bf00      	nop
 80177e0:	08029390 	.word	0x08029390
 80177e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80177e8:	f407a5c2 	.word	0xf407a5c2
 80177ec:	2004f6a0 	.word	0x2004f6a0
 80177f0:	20025820 	.word	0x20025820
 80177f4:	2004f6b0 	.word	0x2004f6b0
 80177f8:	2004f6a4 	.word	0x2004f6a4

080177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80177fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017800:	b510      	push	{r4, lr}
 8017802:	3b01      	subs	r3, #1
 8017804:	b29b      	uxth	r3, r3
 8017806:	428b      	cmp	r3, r1
 8017808:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801780c:	d908      	bls.n	8017820 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801780e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017818:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801781c:	685a      	ldr	r2, [r3, #4]
 801781e:	6062      	str	r2, [r4, #4]
 8017820:	bd10      	pop	{r4, pc}
	...

08017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017828:	4b94      	ldr	r3, [pc, #592]	; (8017a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801782a:	b08f      	sub	sp, #60	; 0x3c
 801782c:	ac0a      	add	r4, sp, #40	; 0x28
 801782e:	e884 0006 	stmia.w	r4, {r1, r2}
 8017832:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017836:	4b92      	ldr	r3, [pc, #584]	; (8017a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8017838:	4683      	mov	fp, r0
 801783a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801783e:	4620      	mov	r0, r4
 8017840:	f7ff febe 	bl	80175c0 <_ZN8touchgfx4Rect10restrictToEss>
 8017844:	4620      	mov	r0, r4
 8017846:	f7fc f874 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801784a:	2800      	cmp	r0, #0
 801784c:	d16a      	bne.n	8017924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801784e:	9403      	str	r4, [sp, #12]
 8017850:	2400      	movs	r4, #0
 8017852:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017856:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801785a:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801785e:	9301      	str	r3, [sp, #4]
 8017860:	36a0      	adds	r6, #160	; 0xa0
 8017862:	42a5      	cmp	r5, r4
 8017864:	d00d      	beq.n	8017882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8017866:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801786a:	9803      	ldr	r0, [sp, #12]
 801786c:	f7ff fef8 	bl	8017660 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017870:	b128      	cbz	r0, 801787e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017872:	1e69      	subs	r1, r5, #1
 8017874:	1b09      	subs	r1, r1, r4
 8017876:	b289      	uxth	r1, r1
 8017878:	9801      	ldr	r0, [sp, #4]
 801787a:	f7ff ffbf 	bl	80177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801787e:	3401      	adds	r4, #1
 8017880:	e7ef      	b.n	8017862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8017882:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017886:	1e7b      	subs	r3, r7, #1
 8017888:	9302      	str	r3, [sp, #8]
 801788a:	9704      	str	r7, [sp, #16]
 801788c:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017890:	2400      	movs	r4, #0
 8017892:	4655      	mov	r5, sl
 8017894:	4626      	mov	r6, r4
 8017896:	9705      	str	r7, [sp, #20]
 8017898:	9b05      	ldr	r3, [sp, #20]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d078      	beq.n	8017990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801789e:	9903      	ldr	r1, [sp, #12]
 80178a0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80178a4:	f7ff fe6a 	bl	801757c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80178a8:	b360      	cbz	r0, 8017904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80178aa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80178ae:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80178b2:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80178b6:	45e6      	cmp	lr, ip
 80178b8:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80178bc:	db35      	blt.n	801792a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80178be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80178c2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80178c6:	4472      	add	r2, lr
 80178c8:	4463      	add	r3, ip
 80178ca:	b212      	sxth	r2, r2
 80178cc:	b21b      	sxth	r3, r3
 80178ce:	429a      	cmp	r2, r3
 80178d0:	dc2b      	bgt.n	801792a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80178d2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80178d6:	fa1f f288 	uxth.w	r2, r8
 80178da:	4413      	add	r3, r2
 80178dc:	b29b      	uxth	r3, r3
 80178de:	45c1      	cmp	r9, r8
 80178e0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80178e4:	fa0f fe83 	sxth.w	lr, r3
 80178e8:	fa1f fc89 	uxth.w	ip, r9
 80178ec:	db0f      	blt.n	801790e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80178ee:	eba3 030c 	sub.w	r3, r3, ip
 80178f2:	1ac9      	subs	r1, r1, r3
 80178f4:	b209      	sxth	r1, r1
 80178f6:	2900      	cmp	r1, #0
 80178f8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80178fc:	dd12      	ble.n	8017924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80178fe:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017902:	4604      	mov	r4, r0
 8017904:	9b05      	ldr	r3, [sp, #20]
 8017906:	3d08      	subs	r5, #8
 8017908:	3b01      	subs	r3, #1
 801790a:	9305      	str	r3, [sp, #20]
 801790c:	e7c4      	b.n	8017898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801790e:	4461      	add	r1, ip
 8017910:	b209      	sxth	r1, r1
 8017912:	4571      	cmp	r1, lr
 8017914:	dc3a      	bgt.n	801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017916:	eba2 020c 	sub.w	r2, r2, ip
 801791a:	b212      	sxth	r2, r2
 801791c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017920:	2a00      	cmp	r2, #0
 8017922:	dcee      	bgt.n	8017902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017924:	b00f      	add	sp, #60	; 0x3c
 8017926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792a:	45c1      	cmp	r9, r8
 801792c:	db2e      	blt.n	801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801792e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017932:	4499      	add	r9, r3
 8017934:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017938:	fa0f f989 	sxth.w	r9, r9
 801793c:	4498      	add	r8, r3
 801793e:	fa0f f888 	sxth.w	r8, r8
 8017942:	45c1      	cmp	r9, r8
 8017944:	dc22      	bgt.n	801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017946:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801794a:	fa1f f28c 	uxth.w	r2, ip
 801794e:	4413      	add	r3, r2
 8017950:	b29b      	uxth	r3, r3
 8017952:	45e6      	cmp	lr, ip
 8017954:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017958:	fa1f f88e 	uxth.w	r8, lr
 801795c:	fa0f f983 	sxth.w	r9, r3
 8017960:	db0a      	blt.n	8017978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8017962:	eba3 0308 	sub.w	r3, r3, r8
 8017966:	1ac9      	subs	r1, r1, r3
 8017968:	b209      	sxth	r1, r1
 801796a:	2900      	cmp	r1, #0
 801796c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017970:	ddd8      	ble.n	8017924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017972:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8017976:	e7c4      	b.n	8017902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017978:	4441      	add	r1, r8
 801797a:	b209      	sxth	r1, r1
 801797c:	4549      	cmp	r1, r9
 801797e:	dc05      	bgt.n	801798c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017980:	eba2 0208 	sub.w	r2, r2, r8
 8017984:	b212      	sxth	r2, r2
 8017986:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801798a:	e7c9      	b.n	8017920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801798c:	4606      	mov	r6, r0
 801798e:	e7b9      	b.n	8017904 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017990:	2c00      	cmp	r4, #0
 8017992:	f47f af7d 	bne.w	8017890 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8017996:	2e00      	cmp	r6, #0
 8017998:	f000 81e2 	beq.w	8017d60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801799c:	4655      	mov	r5, sl
 801799e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80179a2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80179a6:	b2b9      	uxth	r1, r7
 80179a8:	9105      	str	r1, [sp, #20]
 80179aa:	9805      	ldr	r0, [sp, #20]
 80179ac:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80179b0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80179b4:	4401      	add	r1, r0
 80179b6:	b2b3      	uxth	r3, r6
 80179b8:	b289      	uxth	r1, r1
 80179ba:	441a      	add	r2, r3
 80179bc:	9106      	str	r1, [sp, #24]
 80179be:	b292      	uxth	r2, r2
 80179c0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80179c4:	fa0f f882 	sxth.w	r8, r2
 80179c8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80179cc:	9b04      	ldr	r3, [sp, #16]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d058      	beq.n	8017a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80179d2:	9903      	ldr	r1, [sp, #12]
 80179d4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80179d8:	f7ff fdd0 	bl	801757c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80179dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80179e0:	b1d8      	cbz	r0, 8017a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80179e2:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80179e6:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80179ea:	4576      	cmp	r6, lr
 80179ec:	dc26      	bgt.n	8017a3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80179ee:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80179f2:	44f4      	add	ip, lr
 80179f4:	fa0f fc8c 	sxth.w	ip, ip
 80179f8:	45e0      	cmp	r8, ip
 80179fa:	db1f      	blt.n	8017a3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80179fc:	428f      	cmp	r7, r1
 80179fe:	fa1f fc81 	uxth.w	ip, r1
 8017a02:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8017a06:	dc0f      	bgt.n	8017a28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8017a08:	9806      	ldr	r0, [sp, #24]
 8017a0a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8017a0e:	eba0 0c0c 	sub.w	ip, r0, ip
 8017a12:	eba1 010c 	sub.w	r1, r1, ip
 8017a16:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	9904      	ldr	r1, [sp, #16]
 8017a1e:	3d08      	subs	r5, #8
 8017a20:	3901      	subs	r1, #1
 8017a22:	9104      	str	r1, [sp, #16]
 8017a24:	4604      	mov	r4, r0
 8017a26:	e7cf      	b.n	80179c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8017a28:	4461      	add	r1, ip
 8017a2a:	b209      	sxth	r1, r1
 8017a2c:	4549      	cmp	r1, r9
 8017a2e:	dcf5      	bgt.n	8017a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017a30:	9905      	ldr	r1, [sp, #20]
 8017a32:	eba1 0c0c 	sub.w	ip, r1, ip
 8017a36:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017a3a:	e7ee      	b.n	8017a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017a3c:	428f      	cmp	r7, r1
 8017a3e:	dced      	bgt.n	8017a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017a40:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8017a44:	4461      	add	r1, ip
 8017a46:	b209      	sxth	r1, r1
 8017a48:	4589      	cmp	r9, r1
 8017a4a:	dbe7      	blt.n	8017a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017a4c:	4576      	cmp	r6, lr
 8017a4e:	fa1f fc8e 	uxth.w	ip, lr
 8017a52:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8017a56:	dc08      	bgt.n	8017a6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8017a58:	eba2 0c0c 	sub.w	ip, r2, ip
 8017a5c:	eba1 010c 	sub.w	r1, r1, ip
 8017a60:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8017a64:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017a68:	e7d7      	b.n	8017a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017a6a:	4461      	add	r1, ip
 8017a6c:	b209      	sxth	r1, r1
 8017a6e:	4588      	cmp	r8, r1
 8017a70:	dbd4      	blt.n	8017a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017a72:	eba3 0c0c 	sub.w	ip, r3, ip
 8017a76:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017a7a:	e7ce      	b.n	8017a1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017a7c:	2004f652 	.word	0x2004f652
 8017a80:	2004f650 	.word	0x2004f650
 8017a84:	2c00      	cmp	r4, #0
 8017a86:	f000 816b 	beq.w	8017d60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017a8a:	9b02      	ldr	r3, [sp, #8]
 8017a8c:	3301      	adds	r3, #1
 8017a8e:	f000 8167 	beq.w	8017d60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017a92:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8017a96:	4621      	mov	r1, r4
 8017a98:	9803      	ldr	r0, [sp, #12]
 8017a9a:	f7ff fde1 	bl	8017660 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017a9e:	b120      	cbz	r0, 8017aaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8017aa0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017aa4:	9801      	ldr	r0, [sp, #4]
 8017aa6:	f7ff fea9 	bl	80177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017aaa:	9903      	ldr	r1, [sp, #12]
 8017aac:	4620      	mov	r0, r4
 8017aae:	f7ff fd65 	bl	801757c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	f000 809b 	beq.w	8017bee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017ab8:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8017abc:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8017ac0:	b281      	uxth	r1, r0
 8017ac2:	eb01 0c03 	add.w	ip, r1, r3
 8017ac6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8017aca:	fa1f f98c 	uxth.w	r9, ip
 8017ace:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ad4:	b2ab      	uxth	r3, r5
 8017ad6:	eb03 040c 	add.w	r4, r3, ip
 8017ada:	b2a4      	uxth	r4, r4
 8017adc:	9405      	str	r4, [sp, #20]
 8017ade:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8017ae2:	4285      	cmp	r5, r0
 8017ae4:	9404      	str	r4, [sp, #16]
 8017ae6:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017aea:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8017aee:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8017af2:	f340 809a 	ble.w	8017c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8017af6:	1a5b      	subs	r3, r3, r1
 8017af8:	b29b      	uxth	r3, r3
 8017afa:	4596      	cmp	lr, r2
 8017afc:	fa0f f589 	sxth.w	r5, r9
 8017b00:	b21e      	sxth	r6, r3
 8017b02:	dd2e      	ble.n	8017b62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8017b04:	9f02      	ldr	r7, [sp, #8]
 8017b06:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8017b0a:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017b0e:	9f04      	ldr	r7, [sp, #16]
 8017b10:	fa1f fe8e 	uxth.w	lr, lr
 8017b14:	1b7f      	subs	r7, r7, r5
 8017b16:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8017b1a:	b292      	uxth	r2, r2
 8017b1c:	ebae 0102 	sub.w	r1, lr, r2
 8017b20:	4486      	add	lr, r0
 8017b22:	442a      	add	r2, r5
 8017b24:	b289      	uxth	r1, r1
 8017b26:	fa0f fe8e 	sxth.w	lr, lr
 8017b2a:	b212      	sxth	r2, r2
 8017b2c:	b20c      	sxth	r4, r1
 8017b2e:	ebae 0202 	sub.w	r2, lr, r2
 8017b32:	4367      	muls	r7, r4
 8017b34:	4372      	muls	r2, r6
 8017b36:	4297      	cmp	r7, r2
 8017b38:	db09      	blt.n	8017b4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8017b3a:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8017b3e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8017b42:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017b46:	449c      	add	ip, r3
 8017b48:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017b4c:	e680      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017b4e:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017b52:	4401      	add	r1, r0
 8017b54:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8017b58:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017b5c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017b60:	e676      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017b62:	9f04      	ldr	r7, [sp, #16]
 8017b64:	42bd      	cmp	r5, r7
 8017b66:	da27      	bge.n	8017bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8017b68:	9902      	ldr	r1, [sp, #8]
 8017b6a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017b6e:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8017b72:	eb04 010e 	add.w	r1, r4, lr
 8017b76:	fa1f f881 	uxth.w	r8, r1
 8017b7a:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8017b7e:	fa0f f988 	sxth.w	r9, r8
 8017b82:	4411      	add	r1, r2
 8017b84:	eba1 0108 	sub.w	r1, r1, r8
 8017b88:	b289      	uxth	r1, r1
 8017b8a:	fa0f f881 	sxth.w	r8, r1
 8017b8e:	eba2 020e 	sub.w	r2, r2, lr
 8017b92:	1b7f      	subs	r7, r7, r5
 8017b94:	4372      	muls	r2, r6
 8017b96:	fb08 f707 	mul.w	r7, r8, r7
 8017b9a:	42ba      	cmp	r2, r7
 8017b9c:	dc06      	bgt.n	8017bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017b9e:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8017ba2:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8017ba6:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8017baa:	e7ca      	b.n	8017b42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017bac:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8017bb0:	4421      	add	r1, r4
 8017bb2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017bb6:	e64b      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017bb8:	9d05      	ldr	r5, [sp, #20]
 8017bba:	2c06      	cmp	r4, #6
 8017bbc:	eba9 0505 	sub.w	r5, r9, r5
 8017bc0:	b2ad      	uxth	r5, r5
 8017bc2:	fa0f fe85 	sxth.w	lr, r5
 8017bc6:	d818      	bhi.n	8017bfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8017bc8:	9b04      	ldr	r3, [sp, #16]
 8017bca:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8017bce:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8017bd2:	1c63      	adds	r3, r4, #1
 8017bd4:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8017bd8:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017bdc:	9b01      	ldr	r3, [sp, #4]
 8017bde:	9d01      	ldr	r5, [sp, #4]
 8017be0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017be4:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8017be8:	805a      	strh	r2, [r3, #2]
 8017bea:	809e      	strh	r6, [r3, #4]
 8017bec:	80d9      	strh	r1, [r3, #6]
 8017bee:	9b02      	ldr	r3, [sp, #8]
 8017bf0:	f1aa 0a08 	sub.w	sl, sl, #8
 8017bf4:	3b01      	subs	r3, #1
 8017bf6:	9302      	str	r3, [sp, #8]
 8017bf8:	e747      	b.n	8017a8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8017bfa:	9a02      	ldr	r2, [sp, #8]
 8017bfc:	45b6      	cmp	lr, r6
 8017bfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017c02:	db0d      	blt.n	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8017c04:	449c      	add	ip, r3
 8017c06:	fa1f fc8c 	uxth.w	ip, ip
 8017c0a:	445a      	add	r2, fp
 8017c0c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017c10:	448c      	add	ip, r1
 8017c12:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8017c16:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8017c1a:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8017c1e:	e617      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017c20:	445a      	add	r2, fp
 8017c22:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8017c26:	44ac      	add	ip, r5
 8017c28:	e78e      	b.n	8017b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017c2a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8017c2e:	fa1f f18e 	uxth.w	r1, lr
 8017c32:	eb01 0806 	add.w	r8, r1, r6
 8017c36:	b293      	uxth	r3, r2
 8017c38:	fa1f f888 	uxth.w	r8, r8
 8017c3c:	9306      	str	r3, [sp, #24]
 8017c3e:	fa0f f388 	sxth.w	r3, r8
 8017c42:	9307      	str	r3, [sp, #28]
 8017c44:	9f06      	ldr	r7, [sp, #24]
 8017c46:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8017c4a:	4596      	cmp	lr, r2
 8017c4c:	443b      	add	r3, r7
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	9308      	str	r3, [sp, #32]
 8017c52:	da25      	bge.n	8017ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8017c54:	9905      	ldr	r1, [sp, #20]
 8017c56:	eba3 0308 	sub.w	r3, r3, r8
 8017c5a:	eba9 0401 	sub.w	r4, r9, r1
 8017c5e:	b2a4      	uxth	r4, r4
 8017c60:	b29b      	uxth	r3, r3
 8017c62:	fa0f f984 	sxth.w	r9, r4
 8017c66:	b219      	sxth	r1, r3
 8017c68:	eba2 020e 	sub.w	r2, r2, lr
 8017c6c:	1b40      	subs	r0, r0, r5
 8017c6e:	fb09 f202 	mul.w	r2, r9, r2
 8017c72:	4348      	muls	r0, r1
 8017c74:	4282      	cmp	r2, r0
 8017c76:	9a02      	ldr	r2, [sp, #8]
 8017c78:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017c7c:	445a      	add	r2, fp
 8017c7e:	dc06      	bgt.n	8017c8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8017c80:	9b07      	ldr	r3, [sp, #28]
 8017c82:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8017c86:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8017c8a:	44a4      	add	ip, r4
 8017c8c:	e75c      	b.n	8017b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017c8e:	9904      	ldr	r1, [sp, #16]
 8017c90:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8017c94:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8017c98:	4433      	add	r3, r6
 8017c9a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017c9e:	e5d7      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017ca0:	9f06      	ldr	r7, [sp, #24]
 8017ca2:	9b04      	ldr	r3, [sp, #16]
 8017ca4:	1bc9      	subs	r1, r1, r7
 8017ca6:	fa0f f789 	sxth.w	r7, r9
 8017caa:	b289      	uxth	r1, r1
 8017cac:	429f      	cmp	r7, r3
 8017cae:	fa0f fe81 	sxth.w	lr, r1
 8017cb2:	dd23      	ble.n	8017cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8017cb4:	9a05      	ldr	r2, [sp, #20]
 8017cb6:	1b40      	subs	r0, r0, r5
 8017cb8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017cbc:	eba9 0202 	sub.w	r2, r9, r2
 8017cc0:	9d07      	ldr	r5, [sp, #28]
 8017cc2:	b292      	uxth	r2, r2
 8017cc4:	eba5 0a03 	sub.w	sl, r5, r3
 8017cc8:	b214      	sxth	r4, r2
 8017cca:	fb0e f000 	mul.w	r0, lr, r0
 8017cce:	fb04 fa0a 	mul.w	sl, r4, sl
 8017cd2:	9b02      	ldr	r3, [sp, #8]
 8017cd4:	4550      	cmp	r0, sl
 8017cd6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017cda:	445b      	add	r3, fp
 8017cdc:	db03      	blt.n	8017ce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8017cde:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8017ce2:	4494      	add	ip, r2
 8017ce4:	e730      	b.n	8017b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8017ce6:	9a04      	ldr	r2, [sp, #16]
 8017ce8:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8017cec:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8017cf0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8017cf4:	4431      	add	r1, r6
 8017cf6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017cfa:	e75a      	b.n	8017bb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8017cfc:	9b08      	ldr	r3, [sp, #32]
 8017cfe:	2c06      	cmp	r4, #6
 8017d00:	eba3 0308 	sub.w	r3, r3, r8
 8017d04:	b29b      	uxth	r3, r3
 8017d06:	b21d      	sxth	r5, r3
 8017d08:	d813      	bhi.n	8017d32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8017d0a:	9b07      	ldr	r3, [sp, #28]
 8017d0c:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8017d10:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8017d14:	1c63      	adds	r3, r4, #1
 8017d16:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017d1a:	9b01      	ldr	r3, [sp, #4]
 8017d1c:	9901      	ldr	r1, [sp, #4]
 8017d1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017d22:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8017d26:	805a      	strh	r2, [r3, #2]
 8017d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d2a:	f8a3 e006 	strh.w	lr, [r3, #6]
 8017d2e:	809a      	strh	r2, [r3, #4]
 8017d30:	e75d      	b.n	8017bee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017d32:	9802      	ldr	r0, [sp, #8]
 8017d34:	4575      	cmp	r5, lr
 8017d36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8017d3a:	db0d      	blt.n	8017d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8017d3c:	4431      	add	r1, r6
 8017d3e:	9b06      	ldr	r3, [sp, #24]
 8017d40:	b289      	uxth	r1, r1
 8017d42:	4458      	add	r0, fp
 8017d44:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017d48:	4419      	add	r1, r3
 8017d4a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017d4e:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8017d52:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8017d56:	e57b      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017d58:	4458      	add	r0, fp
 8017d5a:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8017d5e:	e79b      	b.n	8017c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8017d60:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8017d64:	2e07      	cmp	r6, #7
 8017d66:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017d6a:	d812      	bhi.n	8017d92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56e>
 8017d6c:	1c75      	adds	r5, r6, #1
 8017d6e:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8017d72:	9d01      	ldr	r5, [sp, #4]
 8017d74:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017d78:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017d7c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8017d80:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8017d84:	442c      	add	r4, r5
 8017d86:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017d8a:	8061      	strh	r1, [r4, #2]
 8017d8c:	80a2      	strh	r2, [r4, #4]
 8017d8e:	80e3      	strh	r3, [r4, #6]
 8017d90:	e5c8      	b.n	8017924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017d92:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8017d96:	f04f 37ff 	mov.w	r7, #4294967295
 8017d9a:	2500      	movs	r5, #0
 8017d9c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017da0:	3e01      	subs	r6, #1
 8017da2:	445c      	add	r4, fp
 8017da4:	9305      	str	r3, [sp, #20]
 8017da6:	1e72      	subs	r2, r6, #1
 8017da8:	4691      	mov	r9, r2
 8017daa:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8017dae:	9302      	str	r3, [sp, #8]
 8017db0:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8017db4:	9304      	str	r3, [sp, #16]
 8017db6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8017dba:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017dbe:	bf16      	itet	ne
 8017dc0:	9905      	ldrne	r1, [sp, #20]
 8017dc2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017dc6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017dca:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017dce:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017dd2:	6818      	ldr	r0, [r3, #0]
 8017dd4:	fb18 f801 	smulbb	r8, r8, r1
 8017dd8:	6859      	ldr	r1, [r3, #4]
 8017dda:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017dde:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017de2:	4671      	mov	r1, lr
 8017de4:	a80c      	add	r0, sp, #48	; 0x30
 8017de6:	9207      	str	r2, [sp, #28]
 8017de8:	9306      	str	r3, [sp, #24]
 8017dea:	f7ff fc5f 	bl	80176ac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017dee:	f04f 0c08 	mov.w	ip, #8
 8017df2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8017df6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8017dfa:	9b04      	ldr	r3, [sp, #16]
 8017dfc:	9a02      	ldr	r2, [sp, #8]
 8017dfe:	fb10 f001 	smulbb	r0, r0, r1
 8017e02:	fb02 8803 	mla	r8, r2, r3, r8
 8017e06:	eba0 0108 	sub.w	r1, r0, r8
 8017e0a:	fb90 f0fc 	sdiv	r0, r0, ip
 8017e0e:	4288      	cmp	r0, r1
 8017e10:	dc20      	bgt.n	8017e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8017e12:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017e16:	4551      	cmp	r1, sl
 8017e18:	da03      	bge.n	8017e22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8017e1a:	b1d9      	cbz	r1, 8017e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 8017e1c:	468a      	mov	sl, r1
 8017e1e:	464f      	mov	r7, r9
 8017e20:	4635      	mov	r5, r6
 8017e22:	f109 39ff 	add.w	r9, r9, #4294967295
 8017e26:	f119 0f02 	cmn.w	r9, #2
 8017e2a:	d1c6      	bne.n	8017dba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8017e2c:	4616      	mov	r6, r2
 8017e2e:	3201      	adds	r2, #1
 8017e30:	f1a4 0408 	sub.w	r4, r4, #8
 8017e34:	d1b7      	bne.n	8017da6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x582>
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	b2ac      	uxth	r4, r5
 8017e3a:	00ed      	lsls	r5, r5, #3
 8017e3c:	1958      	adds	r0, r3, r5
 8017e3e:	1c7b      	adds	r3, r7, #1
 8017e40:	d10b      	bne.n	8017e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 8017e42:	4601      	mov	r1, r0
 8017e44:	9803      	ldr	r0, [sp, #12]
 8017e46:	f7ff fc31 	bl	80176ac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017e4a:	4621      	mov	r1, r4
 8017e4c:	9801      	ldr	r0, [sp, #4]
 8017e4e:	f7ff fcd5 	bl	80177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e52:	e4fd      	b.n	8017850 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017e54:	464f      	mov	r7, r9
 8017e56:	4635      	mov	r5, r6
 8017e58:	e7ed      	b.n	8017e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 8017e5a:	9b01      	ldr	r3, [sp, #4]
 8017e5c:	00ff      	lsls	r7, r7, #3
 8017e5e:	19d9      	adds	r1, r3, r7
 8017e60:	f7ff fc24 	bl	80176ac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017e64:	9b03      	ldr	r3, [sp, #12]
 8017e66:	445f      	add	r7, fp
 8017e68:	cb03      	ldmia	r3!, {r0, r1}
 8017e6a:	445d      	add	r5, fp
 8017e6c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8017e70:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8017e74:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8017e78:	9b03      	ldr	r3, [sp, #12]
 8017e7a:	6869      	ldr	r1, [r5, #4]
 8017e7c:	c303      	stmia	r3!, {r0, r1}
 8017e7e:	e7e4      	b.n	8017e4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

08017e80 <_ZN8touchgfx11Application10invalidateEv>:
 8017e80:	2100      	movs	r1, #0
 8017e82:	4b09      	ldr	r3, [pc, #36]	; (8017ea8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8017e84:	b082      	sub	sp, #8
 8017e86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e8a:	4b08      	ldr	r3, [pc, #32]	; (8017eac <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017e8c:	9100      	str	r1, [sp, #0]
 8017e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e92:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017e96:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017e9a:	ab02      	add	r3, sp, #8
 8017e9c:	e913 0006 	ldmdb	r3, {r1, r2}
 8017ea0:	b002      	add	sp, #8
 8017ea2:	f7ff bcbf 	b.w	8017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017ea6:	bf00      	nop
 8017ea8:	2004f650 	.word	0x2004f650
 8017eac:	2004f652 	.word	0x2004f652

08017eb0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8017eb8:	b09b      	sub	sp, #108	; 0x6c
 8017eba:	4604      	mov	r4, r0
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	f7fb fd38 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	b940      	cbnz	r0, 8017ed8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8017ec6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7ff fcaa 	bl	8017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017ed0:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8017ed4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8017ed8:	4bc9      	ldr	r3, [pc, #804]	; (8018200 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d03e      	beq.n	8017f5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8017ee0:	4dc8      	ldr	r5, [pc, #800]	; (8018204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017ee2:	4628      	mov	r0, r5
 8017ee4:	f7fb fd25 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ee8:	4606      	mov	r6, r0
 8017eea:	2800      	cmp	r0, #0
 8017eec:	d137      	bne.n	8017f5e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f7ff fa0e 	bl	8017310 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017ef4:	6829      	ldr	r1, [r5, #0]
 8017ef6:	686a      	ldr	r2, [r5, #4]
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f7ff fc93 	bl	8017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017efe:	802e      	strh	r6, [r5, #0]
 8017f00:	806e      	strh	r6, [r5, #2]
 8017f02:	80ae      	strh	r6, [r5, #4]
 8017f04:	80ee      	strh	r6, [r5, #6]
 8017f06:	ae09      	add	r6, sp, #36	; 0x24
 8017f08:	4630      	mov	r0, r6
 8017f0a:	f7ff fc26 	bl	801775a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017f0e:	4abe      	ldr	r2, [pc, #760]	; (8018208 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017f10:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8017f14:	8815      	ldrh	r5, [r2, #0]
 8017f16:	9202      	str	r2, [sp, #8]
 8017f18:	462b      	mov	r3, r5
 8017f1a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8017f1e:	429f      	cmp	r7, r3
 8017f20:	d924      	bls.n	8017f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8017f22:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8017f26:	2907      	cmp	r1, #7
 8017f28:	d816      	bhi.n	8017f58 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8017f2a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017f2e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8017f32:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8017f36:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8017f3a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017f3e:	1c4a      	adds	r2, r1, #1
 8017f40:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8017f44:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8017f48:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017f4c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8017f50:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017f54:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017f58:	3301      	adds	r3, #1
 8017f5a:	b29b      	uxth	r3, r3
 8017f5c:	e7df      	b.n	8017f1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8017f5e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d1cf      	bne.n	8017f06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8017f66:	b01b      	add	sp, #108	; 0x6c
 8017f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	462f      	mov	r7, r5
 8017f6e:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8017f72:	42bb      	cmp	r3, r7
 8017f74:	d90b      	bls.n	8017f8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8017f76:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8017f7a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8017f7e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8017f82:	4620      	mov	r0, r4
 8017f84:	3701      	adds	r7, #1
 8017f86:	f7ff fc4d 	bl	8017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017f8a:	b2bf      	uxth	r7, r7
 8017f8c:	e7ef      	b.n	8017f6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8017f8e:	4a9f      	ldr	r2, [pc, #636]	; (801820c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017f90:	6813      	ldr	r3, [r2, #0]
 8017f92:	4690      	mov	r8, r2
 8017f94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	f040 80e6 	bne.w	801816a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8017f9e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017fa2:	4629      	mov	r1, r5
 8017fa4:	2500      	movs	r5, #0
 8017fa6:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8017faa:	33aa      	adds	r3, #170	; 0xaa
 8017fac:	428f      	cmp	r7, r1
 8017fae:	f103 0308 	add.w	r3, r3, #8
 8017fb2:	dd0a      	ble.n	8017fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8017fb4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017fb8:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8017fbc:	3101      	adds	r1, #1
 8017fbe:	4402      	add	r2, r0
 8017fc0:	b212      	sxth	r2, r2
 8017fc2:	4295      	cmp	r5, r2
 8017fc4:	bfb8      	it	lt
 8017fc6:	4615      	movlt	r5, r2
 8017fc8:	e7f0      	b.n	8017fac <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8017fca:	4b91      	ldr	r3, [pc, #580]	; (8018210 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8017fcc:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801820c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 8017fd0:	881b      	ldrh	r3, [r3, #0]
 8017fd2:	46d8      	mov	r8, fp
 8017fd4:	2b0f      	cmp	r3, #15
 8017fd6:	bf88      	it	hi
 8017fd8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8017fdc:	f04f 0300 	mov.w	r3, #0
 8017fe0:	bf98      	it	ls
 8017fe2:	f04f 0a01 	movls.w	sl, #1
 8017fe6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017fea:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8017fee:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8017ff2:	4438      	add	r0, r7
 8017ff4:	b207      	sxth	r7, r0
 8017ff6:	f8db 0000 	ldr.w	r0, [fp]
 8017ffa:	42bd      	cmp	r5, r7
 8017ffc:	6803      	ldr	r3, [r0, #0]
 8017ffe:	f340 8084 	ble.w	801810a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018006:	4798      	blx	r3
 8018008:	eb07 030a 	add.w	r3, r7, sl
 801800c:	4298      	cmp	r0, r3
 801800e:	da07      	bge.n	8018020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018010:	4285      	cmp	r5, r0
 8018012:	dd05      	ble.n	8018020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018014:	4287      	cmp	r7, r0
 8018016:	dd6d      	ble.n	80180f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018018:	2f00      	cmp	r7, #0
 801801a:	dd6b      	ble.n	80180f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801801c:	4628      	mov	r0, r5
 801801e:	e004      	b.n	801802a <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8018020:	4287      	cmp	r7, r0
 8018022:	dcfb      	bgt.n	801801c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018024:	42a8      	cmp	r0, r5
 8018026:	bfa8      	it	ge
 8018028:	4628      	movge	r0, r5
 801802a:	2200      	movs	r2, #0
 801802c:	4b79      	ldr	r3, [pc, #484]	; (8018214 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801802e:	1bc0      	subs	r0, r0, r7
 8018030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018034:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018038:	f8ad 3018 	strh.w	r3, [sp, #24]
 801803c:	9b02      	ldr	r3, [sp, #8]
 801803e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018042:	881f      	ldrh	r7, [r3, #0]
 8018044:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018048:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801804c:	42bb      	cmp	r3, r7
 801804e:	d9cc      	bls.n	8017fea <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018050:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018054:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018058:	ab07      	add	r3, sp, #28
 801805a:	6851      	ldr	r1, [r2, #4]
 801805c:	c303      	stmia	r3!, {r0, r1}
 801805e:	a905      	add	r1, sp, #20
 8018060:	a807      	add	r0, sp, #28
 8018062:	f7ff fa8b 	bl	801757c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018066:	2800      	cmp	r0, #0
 8018068:	d04c      	beq.n	8018104 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801806a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801806e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018072:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8018076:	4686      	mov	lr, r0
 8018078:	4290      	cmp	r0, r2
 801807a:	4448      	add	r0, r9
 801807c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8018080:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018084:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018088:	bfb8      	it	lt
 801808a:	4696      	movlt	lr, r2
 801808c:	444a      	add	r2, r9
 801808e:	4299      	cmp	r1, r3
 8018090:	b280      	uxth	r0, r0
 8018092:	b292      	uxth	r2, r2
 8018094:	468c      	mov	ip, r1
 8018096:	9303      	str	r3, [sp, #12]
 8018098:	bfb8      	it	lt
 801809a:	469c      	movlt	ip, r3
 801809c:	fa0f f982 	sxth.w	r9, r2
 80180a0:	b203      	sxth	r3, r0
 80180a2:	454b      	cmp	r3, r9
 80180a4:	bfb8      	it	lt
 80180a6:	4602      	movlt	r2, r0
 80180a8:	eba2 020e 	sub.w	r2, r2, lr
 80180ac:	f8ad 2020 	strh.w	r2, [sp, #32]
 80180b0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80180b4:	9b03      	ldr	r3, [sp, #12]
 80180b6:	4411      	add	r1, r2
 80180b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80180bc:	b289      	uxth	r1, r1
 80180be:	4413      	add	r3, r2
 80180c0:	b29b      	uxth	r3, r3
 80180c2:	b208      	sxth	r0, r1
 80180c4:	b21a      	sxth	r2, r3
 80180c6:	4290      	cmp	r0, r2
 80180c8:	bfb8      	it	lt
 80180ca:	460b      	movlt	r3, r1
 80180cc:	eba3 030c 	sub.w	r3, r3, ip
 80180d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80180d4:	f8ad e01c 	strh.w	lr, [sp, #28]
 80180d8:	f8ad c01e 	strh.w	ip, [sp, #30]
 80180dc:	a807      	add	r0, sp, #28
 80180de:	f7fb fc28 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 80180e2:	b920      	cbnz	r0, 80180ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80180e4:	6823      	ldr	r3, [r4, #0]
 80180e6:	a907      	add	r1, sp, #28
 80180e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ea:	4620      	mov	r0, r4
 80180ec:	4798      	blx	r3
 80180ee:	3701      	adds	r7, #1
 80180f0:	b2bf      	uxth	r7, r7
 80180f2:	e7a9      	b.n	8018048 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80180f4:	f8d8 0000 	ldr.w	r0, [r8]
 80180f8:	2101      	movs	r1, #1
 80180fa:	6803      	ldr	r3, [r0, #0]
 80180fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018100:	4798      	blx	r3
 8018102:	e772      	b.n	8017fea <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018104:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018108:	e7e8      	b.n	80180dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801810c:	4798      	blx	r3
 801810e:	4b42      	ldr	r3, [pc, #264]	; (8018218 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	2b00      	cmp	r3, #0
 8018114:	f43f af27 	beq.w	8017f66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018118:	2300      	movs	r3, #0
 801811a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801811e:	9b02      	ldr	r3, [sp, #8]
 8018120:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018124:	881b      	ldrh	r3, [r3, #0]
 8018126:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801812a:	429d      	cmp	r5, r3
 801812c:	f67f af1b 	bls.w	8017f66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018130:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8018134:	2907      	cmp	r1, #7
 8018136:	d815      	bhi.n	8018164 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8018138:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801813c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018140:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018144:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018148:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801814c:	1c4a      	adds	r2, r1, #1
 801814e:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8018152:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018156:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801815a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801815e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8018162:	80d7      	strh	r7, [r2, #6]
 8018164:	3301      	adds	r3, #1
 8018166:	b29b      	uxth	r3, r3
 8018168:	e7df      	b.n	801812a <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801816a:	2b02      	cmp	r3, #2
 801816c:	f040 8136 	bne.w	80183dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018170:	4b2a      	ldr	r3, [pc, #168]	; (801821c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8018172:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	2b01      	cmp	r3, #1
 801817a:	f000 809c 	beq.w	80182b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801817e:	9b02      	ldr	r3, [sp, #8]
 8018180:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8018184:	f8b3 b000 	ldrh.w	fp, [r3]
 8018188:	f10b 0b01 	add.w	fp, fp, #1
 801818c:	fa1f fb8b 	uxth.w	fp, fp
 8018190:	2a00      	cmp	r2, #0
 8018192:	d0bc      	beq.n	801810e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018194:	4659      	mov	r1, fp
 8018196:	f04f 0800 	mov.w	r8, #0
 801819a:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801819e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80181a2:	441d      	add	r5, r3
 80181a4:	b22d      	sxth	r5, r5
 80181a6:	b28b      	uxth	r3, r1
 80181a8:	429a      	cmp	r2, r3
 80181aa:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80181ae:	f240 80c1 	bls.w	8018334 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80181b2:	4427      	add	r7, r4
 80181b4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80181b8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80181bc:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80181c0:	4608      	mov	r0, r1
 80181c2:	4563      	cmp	r3, ip
 80181c4:	f340 80a3 	ble.w	801830e <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80181c8:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80181cc:	4465      	add	r5, ip
 80181ce:	b22d      	sxth	r5, r5
 80181d0:	429d      	cmp	r5, r3
 80181d2:	bfa8      	it	ge
 80181d4:	461d      	movge	r5, r3
 80181d6:	3101      	adds	r1, #1
 80181d8:	4680      	mov	r8, r0
 80181da:	e7e4      	b.n	80181a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80181dc:	d10b      	bne.n	80181f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80181de:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80181e2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80181e6:	458c      	cmp	ip, r1
 80181e8:	bfb4      	ite	lt
 80181ea:	469c      	movlt	ip, r3
 80181ec:	46bc      	movge	ip, r7
 80181ee:	4572      	cmp	r2, lr
 80181f0:	bfb8      	it	lt
 80181f2:	4672      	movlt	r2, lr
 80181f4:	e088      	b.n	8018308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80181f6:	428a      	cmp	r2, r1
 80181f8:	bfb8      	it	lt
 80181fa:	460a      	movlt	r2, r1
 80181fc:	46bc      	mov	ip, r7
 80181fe:	e083      	b.n	8018308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018200:	2004f69c 	.word	0x2004f69c
 8018204:	2004f6a8 	.word	0x2004f6a8
 8018208:	20025820 	.word	0x20025820
 801820c:	2004f65c 	.word	0x2004f65c
 8018210:	2004f652 	.word	0x2004f652
 8018214:	2004f650 	.word	0x2004f650
 8018218:	2004f65a 	.word	0x2004f65a
 801821c:	2004f654 	.word	0x2004f654
 8018220:	1961      	adds	r1, r4, r5
 8018222:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018226:	ab07      	add	r3, sp, #28
 8018228:	6849      	ldr	r1, [r1, #4]
 801822a:	c303      	stmia	r3!, {r0, r1}
 801822c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018230:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018234:	2b13      	cmp	r3, #19
 8018236:	bfd8      	it	le
 8018238:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801823c:	440b      	add	r3, r1
 801823e:	1a9b      	subs	r3, r3, r2
 8018240:	a807      	add	r0, sp, #28
 8018242:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018246:	f8ad 201c 	strh.w	r2, [sp, #28]
 801824a:	f7ff f87b 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801824e:	a807      	add	r0, sp, #28
 8018250:	f7fb fb6f 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018254:	bb78      	cbnz	r0, 80182b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018256:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801825a:	f8d8 0000 	ldr.w	r0, [r8]
 801825e:	f1bc 0f14 	cmp.w	ip, #20
 8018262:	bfa8      	it	ge
 8018264:	f04f 0c14 	movge.w	ip, #20
 8018268:	f8d0 e000 	ldr.w	lr, [r0]
 801826c:	fa1f fc8c 	uxth.w	ip, ip
 8018270:	f8cd c000 	str.w	ip, [sp]
 8018274:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018278:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801827c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018280:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018284:	47d0      	blx	sl
 8018286:	4682      	mov	sl, r0
 8018288:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801828c:	a807      	add	r0, sp, #28
 801828e:	f7ff f83f 	bl	8017310 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018292:	6823      	ldr	r3, [r4, #0]
 8018294:	4620      	mov	r0, r4
 8018296:	4425      	add	r5, r4
 8018298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801829a:	a907      	add	r1, sp, #28
 801829c:	4798      	blx	r3
 801829e:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80182a2:	eba0 000a 	sub.w	r0, r0, sl
 80182a6:	b200      	sxth	r0, r0
 80182a8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80182ac:	b918      	cbnz	r0, 80182b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80182ae:	b2b9      	uxth	r1, r7
 80182b0:	4648      	mov	r0, r9
 80182b2:	f7ff faa3 	bl	80177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80182b6:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80182ba:	f1bb 0f00 	cmp.w	fp, #0
 80182be:	f43f af26 	beq.w	801810e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80182c2:	2700      	movs	r7, #0
 80182c4:	9b02      	ldr	r3, [sp, #8]
 80182c6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80182ca:	881b      	ldrh	r3, [r3, #0]
 80182cc:	3301      	adds	r3, #1
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	b299      	uxth	r1, r3
 80182d2:	458b      	cmp	fp, r1
 80182d4:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80182d8:	d9a2      	bls.n	8018220 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80182da:	4425      	add	r5, r4
 80182dc:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80182e0:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80182e4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80182e8:	4408      	add	r0, r1
 80182ea:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80182ee:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80182f2:	b200      	sxth	r0, r0
 80182f4:	4471      	add	r1, lr
 80182f6:	b209      	sxth	r1, r1
 80182f8:	4288      	cmp	r0, r1
 80182fa:	469c      	mov	ip, r3
 80182fc:	f6bf af6e 	bge.w	80181dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8018300:	4586      	cmp	lr, r0
 8018302:	4672      	mov	r2, lr
 8018304:	bfb8      	it	lt
 8018306:	4602      	movlt	r2, r0
 8018308:	3301      	adds	r3, #1
 801830a:	4667      	mov	r7, ip
 801830c:	e7e0      	b.n	80182d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801830e:	d10c      	bne.n	801832a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8018310:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8018314:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8018318:	4287      	cmp	r7, r0
 801831a:	bfb4      	ite	lt
 801831c:	4608      	movlt	r0, r1
 801831e:	4640      	movge	r0, r8
 8018320:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8018324:	443b      	add	r3, r7
 8018326:	b21b      	sxth	r3, r3
 8018328:	e752      	b.n	80181d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801832a:	4565      	cmp	r5, ip
 801832c:	bfa8      	it	ge
 801832e:	4665      	movge	r5, ip
 8018330:	4640      	mov	r0, r8
 8018332:	e750      	b.n	80181d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8018334:	eb09 0007 	add.w	r0, r9, r7
 8018338:	4427      	add	r7, r4
 801833a:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801833e:	9203      	str	r2, [sp, #12]
 8018340:	f1ba 0f13 	cmp.w	sl, #19
 8018344:	bfde      	ittt	le
 8018346:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801834a:	4455      	addle	r5, sl
 801834c:	b22d      	sxthle	r5, r5
 801834e:	f7fb faf0 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018352:	9a03      	ldr	r2, [sp, #12]
 8018354:	2800      	cmp	r0, #0
 8018356:	f47f af1b 	bne.w	8018190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801835a:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801835e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018362:	1aad      	subs	r5, r5, r2
 8018364:	2d14      	cmp	r5, #20
 8018366:	bfa8      	it	ge
 8018368:	2514      	movge	r5, #20
 801836a:	4828      	ldr	r0, [pc, #160]	; (801840c <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801836c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8018370:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8018374:	6800      	ldr	r0, [r0, #0]
 8018376:	f8ad 101c 	strh.w	r1, [sp, #28]
 801837a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801837e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018382:	f8d0 c000 	ldr.w	ip, [r0]
 8018386:	b2ad      	uxth	r5, r5
 8018388:	fa1f fa8a 	uxth.w	sl, sl
 801838c:	4555      	cmp	r5, sl
 801838e:	bf94      	ite	ls
 8018390:	9500      	strls	r5, [sp, #0]
 8018392:	f8cd a000 	strhi.w	sl, [sp]
 8018396:	b292      	uxth	r2, r2
 8018398:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801839c:	b29b      	uxth	r3, r3
 801839e:	b289      	uxth	r1, r1
 80183a0:	47a8      	blx	r5
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80183a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183aa:	a907      	add	r1, sp, #28
 80183ac:	4620      	mov	r0, r4
 80183ae:	4798      	blx	r3
 80183b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80183b4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80183b8:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80183bc:	1a5b      	subs	r3, r3, r1
 80183be:	440a      	add	r2, r1
 80183c0:	b21b      	sxth	r3, r3
 80183c2:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 80183c6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f47f aed7 	bne.w	801817e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80183d0:	fa1f f188 	uxth.w	r1, r8
 80183d4:	4648      	mov	r0, r9
 80183d6:	f7ff fa11 	bl	80177fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80183da:	e6d0      	b.n	801817e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80183dc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80183e0:	42ab      	cmp	r3, r5
 80183e2:	f67f ae94 	bls.w	801810e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80183e6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80183ea:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80183ee:	ab07      	add	r3, sp, #28
 80183f0:	6851      	ldr	r1, [r2, #4]
 80183f2:	c303      	stmia	r3!, {r0, r1}
 80183f4:	a807      	add	r0, sp, #28
 80183f6:	f7fb fa9c 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 80183fa:	b920      	cbnz	r0, 8018406 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	a907      	add	r1, sp, #28
 8018400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018402:	4620      	mov	r0, r4
 8018404:	4798      	blx	r3
 8018406:	3501      	adds	r5, #1
 8018408:	b2ad      	uxth	r5, r5
 801840a:	e7e7      	b.n	80183dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801840c:	2004f65c 	.word	0x2004f65c

08018410 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018410:	2200      	movs	r2, #0
 8018412:	4b03      	ldr	r3, [pc, #12]	; (8018420 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018414:	801a      	strh	r2, [r3, #0]
 8018416:	805a      	strh	r2, [r3, #2]
 8018418:	809a      	strh	r2, [r3, #4]
 801841a:	80da      	strh	r2, [r3, #6]
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop
 8018420:	2004f6a8 	.word	0x2004f6a8

08018424 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018428:	4606      	mov	r6, r0
 801842a:	b09d      	sub	sp, #116	; 0x74
 801842c:	a803      	add	r0, sp, #12
 801842e:	4614      	mov	r4, r2
 8018430:	468a      	mov	sl, r1
 8018432:	461d      	mov	r5, r3
 8018434:	f000 fe1d 	bl	8019072 <_ZN8touchgfx12TextProviderC1Ev>
 8018438:	6833      	ldr	r3, [r6, #0]
 801843a:	4630      	mov	r0, r6
 801843c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801843e:	4798      	blx	r3
 8018440:	6833      	ldr	r3, [r6, #0]
 8018442:	4607      	mov	r7, r0
 8018444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018446:	4630      	mov	r0, r6
 8018448:	4798      	blx	r3
 801844a:	462a      	mov	r2, r5
 801844c:	2500      	movs	r5, #0
 801844e:	9000      	str	r0, [sp, #0]
 8018450:	4621      	mov	r1, r4
 8018452:	463b      	mov	r3, r7
 8018454:	a803      	add	r0, sp, #12
 8018456:	f000 fe5f 	bl	8019118 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801845a:	462c      	mov	r4, r5
 801845c:	46a9      	mov	r9, r5
 801845e:	46a8      	mov	r8, r5
 8018460:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018464:	2300      	movs	r3, #0
 8018466:	9302      	str	r3, [sp, #8]
 8018468:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801846c:	429c      	cmp	r4, r3
 801846e:	d002      	beq.n	8018476 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018470:	455c      	cmp	r4, fp
 8018472:	bf18      	it	ne
 8018474:	4625      	movne	r5, r4
 8018476:	ab02      	add	r3, sp, #8
 8018478:	4632      	mov	r2, r6
 801847a:	4651      	mov	r1, sl
 801847c:	a803      	add	r0, sp, #12
 801847e:	f001 f93b 	bl	80196f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018482:	4604      	mov	r4, r0
 8018484:	b108      	cbz	r0, 801848a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018486:	280a      	cmp	r0, #10
 8018488:	d10a      	bne.n	80184a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801848a:	45c1      	cmp	r9, r8
 801848c:	bf38      	it	cc
 801848e:	46c1      	movcc	r9, r8
 8018490:	f04f 0800 	mov.w	r8, #0
 8018494:	2c00      	cmp	r4, #0
 8018496:	d1e5      	bne.n	8018464 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018498:	4648      	mov	r0, r9
 801849a:	b01d      	add	sp, #116	; 0x74
 801849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a0:	9a02      	ldr	r2, [sp, #8]
 80184a2:	2a00      	cmp	r2, #0
 80184a4:	d0de      	beq.n	8018464 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80184a6:	7b57      	ldrb	r7, [r2, #13]
 80184a8:	6833      	ldr	r3, [r6, #0]
 80184aa:	007f      	lsls	r7, r7, #1
 80184ac:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80184b0:	7a97      	ldrb	r7, [r2, #10]
 80184b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184b4:	4307      	orrs	r7, r0
 80184b6:	4629      	mov	r1, r5
 80184b8:	4630      	mov	r0, r6
 80184ba:	8894      	ldrh	r4, [r2, #4]
 80184bc:	4798      	blx	r3
 80184be:	4438      	add	r0, r7
 80184c0:	4480      	add	r8, r0
 80184c2:	fa1f f888 	uxth.w	r8, r8
 80184c6:	e7e5      	b.n	8018494 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080184c8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80184c8:	b508      	push	{r3, lr}
 80184ca:	6803      	ldr	r3, [r0, #0]
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	4798      	blx	r3
 80184d0:	b128      	cbz	r0, 80184de <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80184d2:	7b43      	ldrb	r3, [r0, #13]
 80184d4:	7a80      	ldrb	r0, [r0, #10]
 80184d6:	005b      	lsls	r3, r3, #1
 80184d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80184dc:	4318      	orrs	r0, r3
 80184de:	bd08      	pop	{r3, pc}

080184e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80184e0:	b40e      	push	{r1, r2, r3}
 80184e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184e4:	4605      	mov	r5, r0
 80184e6:	b09e      	sub	sp, #120	; 0x78
 80184e8:	ab23      	add	r3, sp, #140	; 0x8c
 80184ea:	f853 4b04 	ldr.w	r4, [r3], #4
 80184ee:	a805      	add	r0, sp, #20
 80184f0:	9303      	str	r3, [sp, #12]
 80184f2:	f000 fdbe 	bl	8019072 <_ZN8touchgfx12TextProviderC1Ev>
 80184f6:	682b      	ldr	r3, [r5, #0]
 80184f8:	4628      	mov	r0, r5
 80184fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184fc:	4798      	blx	r3
 80184fe:	682b      	ldr	r3, [r5, #0]
 8018500:	4606      	mov	r6, r0
 8018502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018504:	4628      	mov	r0, r5
 8018506:	4798      	blx	r3
 8018508:	4621      	mov	r1, r4
 801850a:	2400      	movs	r4, #0
 801850c:	4633      	mov	r3, r6
 801850e:	9000      	str	r0, [sp, #0]
 8018510:	9a03      	ldr	r2, [sp, #12]
 8018512:	ae1e      	add	r6, sp, #120	; 0x78
 8018514:	a805      	add	r0, sp, #20
 8018516:	f000 fdff 	bl	8019118 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801851a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801851e:	4633      	mov	r3, r6
 8018520:	462a      	mov	r2, r5
 8018522:	4621      	mov	r1, r4
 8018524:	a805      	add	r0, sp, #20
 8018526:	f001 f8e7 	bl	80196f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801852a:	b1f0      	cbz	r0, 801856a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801852c:	280a      	cmp	r0, #10
 801852e:	d018      	beq.n	8018562 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018530:	9f04      	ldr	r7, [sp, #16]
 8018532:	b1b7      	cbz	r7, 8018562 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018534:	7b78      	ldrb	r0, [r7, #13]
 8018536:	7a3b      	ldrb	r3, [r7, #8]
 8018538:	00c1      	lsls	r1, r0, #3
 801853a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801853e:	4319      	orrs	r1, r3
 8018540:	0643      	lsls	r3, r0, #25
 8018542:	bf44      	itt	mi
 8018544:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018548:	b219      	sxthmi	r1, r3
 801854a:	0100      	lsls	r0, r0, #4
 801854c:	79fb      	ldrb	r3, [r7, #7]
 801854e:	88aa      	ldrh	r2, [r5, #4]
 8018550:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018554:	4303      	orrs	r3, r0
 8018556:	4413      	add	r3, r2
 8018558:	1a5b      	subs	r3, r3, r1
 801855a:	b29b      	uxth	r3, r3
 801855c:	42a3      	cmp	r3, r4
 801855e:	bfc8      	it	gt
 8018560:	b21c      	sxthgt	r4, r3
 8018562:	4633      	mov	r3, r6
 8018564:	462a      	mov	r2, r5
 8018566:	2100      	movs	r1, #0
 8018568:	e7dc      	b.n	8018524 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801856a:	b2a0      	uxth	r0, r4
 801856c:	b01e      	add	sp, #120	; 0x78
 801856e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018572:	b003      	add	sp, #12
 8018574:	4770      	bx	lr

08018576 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018576:	b40e      	push	{r1, r2, r3}
 8018578:	b570      	push	{r4, r5, r6, lr}
 801857a:	4604      	mov	r4, r0
 801857c:	b09d      	sub	sp, #116	; 0x74
 801857e:	ab21      	add	r3, sp, #132	; 0x84
 8018580:	f853 5b04 	ldr.w	r5, [r3], #4
 8018584:	a803      	add	r0, sp, #12
 8018586:	9302      	str	r3, [sp, #8]
 8018588:	f000 fd73 	bl	8019072 <_ZN8touchgfx12TextProviderC1Ev>
 801858c:	6823      	ldr	r3, [r4, #0]
 801858e:	4620      	mov	r0, r4
 8018590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018592:	4798      	blx	r3
 8018594:	6823      	ldr	r3, [r4, #0]
 8018596:	4606      	mov	r6, r0
 8018598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801859a:	4620      	mov	r0, r4
 801859c:	4798      	blx	r3
 801859e:	4633      	mov	r3, r6
 80185a0:	9000      	str	r0, [sp, #0]
 80185a2:	9a02      	ldr	r2, [sp, #8]
 80185a4:	4629      	mov	r1, r5
 80185a6:	a803      	add	r0, sp, #12
 80185a8:	f000 fdb6 	bl	8019118 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80185ac:	a803      	add	r0, sp, #12
 80185ae:	f001 f925 	bl	80197fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80185b2:	2401      	movs	r4, #1
 80185b4:	b2a3      	uxth	r3, r4
 80185b6:	b140      	cbz	r0, 80185ca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80185b8:	280a      	cmp	r0, #10
 80185ba:	bf08      	it	eq
 80185bc:	3301      	addeq	r3, #1
 80185be:	a803      	add	r0, sp, #12
 80185c0:	bf08      	it	eq
 80185c2:	b21c      	sxtheq	r4, r3
 80185c4:	f001 f91a 	bl	80197fc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80185c8:	e7f4      	b.n	80185b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80185ca:	4618      	mov	r0, r3
 80185cc:	b01d      	add	sp, #116	; 0x74
 80185ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185d2:	b003      	add	sp, #12
 80185d4:	4770      	bx	lr

080185d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80185d6:	b40e      	push	{r1, r2, r3}
 80185d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185da:	4604      	mov	r4, r0
 80185dc:	b09e      	sub	sp, #120	; 0x78
 80185de:	ab23      	add	r3, sp, #140	; 0x8c
 80185e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80185e4:	a805      	add	r0, sp, #20
 80185e6:	9303      	str	r3, [sp, #12]
 80185e8:	f000 fd43 	bl	8019072 <_ZN8touchgfx12TextProviderC1Ev>
 80185ec:	6823      	ldr	r3, [r4, #0]
 80185ee:	4620      	mov	r0, r4
 80185f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185f2:	4798      	blx	r3
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	4606      	mov	r6, r0
 80185f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185fa:	4620      	mov	r0, r4
 80185fc:	4798      	blx	r3
 80185fe:	4633      	mov	r3, r6
 8018600:	4629      	mov	r1, r5
 8018602:	9000      	str	r0, [sp, #0]
 8018604:	9a03      	ldr	r2, [sp, #12]
 8018606:	a805      	add	r0, sp, #20
 8018608:	f000 fd86 	bl	8019118 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801860c:	2100      	movs	r1, #0
 801860e:	ad1e      	add	r5, sp, #120	; 0x78
 8018610:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018614:	462b      	mov	r3, r5
 8018616:	4622      	mov	r2, r4
 8018618:	a805      	add	r0, sp, #20
 801861a:	f001 f86d 	bl	80196f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801861e:	26ff      	movs	r6, #255	; 0xff
 8018620:	b1d8      	cbz	r0, 801865a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8018622:	280a      	cmp	r0, #10
 8018624:	d012      	beq.n	801864c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018626:	9804      	ldr	r0, [sp, #16]
 8018628:	b180      	cbz	r0, 801864c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801862a:	7b47      	ldrb	r7, [r0, #13]
 801862c:	7922      	ldrb	r2, [r4, #4]
 801862e:	00fb      	lsls	r3, r7, #3
 8018630:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018634:	7a03      	ldrb	r3, [r0, #8]
 8018636:	430b      	orrs	r3, r1
 8018638:	0679      	lsls	r1, r7, #25
 801863a:	bf44      	itt	mi
 801863c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018640:	b21b      	sxthmi	r3, r3
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	b2db      	uxtb	r3, r3
 8018646:	429e      	cmp	r6, r3
 8018648:	bf28      	it	cs
 801864a:	461e      	movcs	r6, r3
 801864c:	462b      	mov	r3, r5
 801864e:	4622      	mov	r2, r4
 8018650:	2100      	movs	r1, #0
 8018652:	a805      	add	r0, sp, #20
 8018654:	f001 f850 	bl	80196f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018658:	e7e2      	b.n	8018620 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801865a:	4630      	mov	r0, r6
 801865c:	b01e      	add	sp, #120	; 0x78
 801865e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018662:	b003      	add	sp, #12
 8018664:	4770      	bx	lr

08018666 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018666:	b513      	push	{r0, r1, r4, lr}
 8018668:	2400      	movs	r4, #0
 801866a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801866e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018672:	6803      	ldr	r3, [r0, #0]
 8018674:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018678:	9400      	str	r4, [sp, #0]
 801867a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801867e:	691b      	ldr	r3, [r3, #16]
 8018680:	4669      	mov	r1, sp
 8018682:	4798      	blx	r3
 8018684:	b002      	add	sp, #8
 8018686:	bd10      	pop	{r4, pc}

08018688 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018688:	b538      	push	{r3, r4, r5, lr}
 801868a:	460c      	mov	r4, r1
 801868c:	4605      	mov	r5, r0
 801868e:	680b      	ldr	r3, [r1, #0]
 8018690:	68db      	ldr	r3, [r3, #12]
 8018692:	4798      	blx	r3
 8018694:	6823      	ldr	r3, [r4, #0]
 8018696:	4620      	mov	r0, r4
 8018698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869a:	4629      	mov	r1, r5
 801869c:	4798      	blx	r3
 801869e:	4628      	mov	r0, r5
 80186a0:	bd38      	pop	{r3, r4, r5, pc}

080186a2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80186a2:	b410      	push	{r4}
 80186a4:	880a      	ldrh	r2, [r1, #0]
 80186a6:	8884      	ldrh	r4, [r0, #4]
 80186a8:	4422      	add	r2, r4
 80186aa:	800a      	strh	r2, [r1, #0]
 80186ac:	88c4      	ldrh	r4, [r0, #6]
 80186ae:	884a      	ldrh	r2, [r1, #2]
 80186b0:	4422      	add	r2, r4
 80186b2:	804a      	strh	r2, [r1, #2]
 80186b4:	6940      	ldr	r0, [r0, #20]
 80186b6:	b120      	cbz	r0, 80186c2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80186b8:	6803      	ldr	r3, [r0, #0]
 80186ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186c0:	4718      	bx	r3
 80186c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186c6:	4770      	bx	lr

080186c8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80186c8:	b570      	push	{r4, r5, r6, lr}
 80186ca:	460c      	mov	r4, r1
 80186cc:	8882      	ldrh	r2, [r0, #4]
 80186ce:	880b      	ldrh	r3, [r1, #0]
 80186d0:	4605      	mov	r5, r0
 80186d2:	4413      	add	r3, r2
 80186d4:	800b      	strh	r3, [r1, #0]
 80186d6:	88c2      	ldrh	r2, [r0, #6]
 80186d8:	884b      	ldrh	r3, [r1, #2]
 80186da:	4413      	add	r3, r2
 80186dc:	804b      	strh	r3, [r1, #2]
 80186de:	1d01      	adds	r1, r0, #4
 80186e0:	4620      	mov	r0, r4
 80186e2:	f7fb f8e3 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 80186e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	dd0b      	ble.n	8018706 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	dd07      	ble.n	8018706 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186f6:	6968      	ldr	r0, [r5, #20]
 80186f8:	b128      	cbz	r0, 8018706 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186fa:	6803      	ldr	r3, [r0, #0]
 80186fc:	4621      	mov	r1, r4
 80186fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018704:	4718      	bx	r3
 8018706:	bd70      	pop	{r4, r5, r6, pc}

08018708 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018708:	b570      	push	{r4, r5, r6, lr}
 801870a:	460c      	mov	r4, r1
 801870c:	8882      	ldrh	r2, [r0, #4]
 801870e:	880b      	ldrh	r3, [r1, #0]
 8018710:	4605      	mov	r5, r0
 8018712:	4413      	add	r3, r2
 8018714:	800b      	strh	r3, [r1, #0]
 8018716:	88c2      	ldrh	r2, [r0, #6]
 8018718:	884b      	ldrh	r3, [r1, #2]
 801871a:	4413      	add	r3, r2
 801871c:	804b      	strh	r3, [r1, #2]
 801871e:	1d01      	adds	r1, r0, #4
 8018720:	4620      	mov	r0, r4
 8018722:	f7fb f8c3 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8018726:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	dd18      	ble.n	8018760 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801872e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018732:	2b00      	cmp	r3, #0
 8018734:	dd14      	ble.n	8018760 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018736:	6968      	ldr	r0, [r5, #20]
 8018738:	b128      	cbz	r0, 8018746 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801873a:	6803      	ldr	r3, [r0, #0]
 801873c:	4621      	mov	r1, r4
 801873e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018742:	691b      	ldr	r3, [r3, #16]
 8018744:	4718      	bx	r3
 8018746:	4b07      	ldr	r3, [pc, #28]	; (8018764 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	3304      	adds	r3, #4
 801874c:	429d      	cmp	r5, r3
 801874e:	d107      	bne.n	8018760 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018750:	f7fe fff2 	bl	8017738 <_ZN8touchgfx11Application11getInstanceEv>
 8018754:	6821      	ldr	r1, [r4, #0]
 8018756:	6862      	ldr	r2, [r4, #4]
 8018758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801875c:	f7ff b862 	b.w	8017824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018760:	bd70      	pop	{r4, r5, r6, pc}
 8018762:	bf00      	nop
 8018764:	2004f6a0 	.word	0x2004f6a0

08018768 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018768:	b570      	push	{r4, r5, r6, lr}
 801876a:	4604      	mov	r4, r0
 801876c:	4616      	mov	r6, r2
 801876e:	460d      	mov	r5, r1
 8018770:	b901      	cbnz	r1, 8018774 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018772:	b192      	cbz	r2, 801879a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018774:	6823      	ldr	r3, [r4, #0]
 8018776:	4620      	mov	r0, r4
 8018778:	699b      	ldr	r3, [r3, #24]
 801877a:	4798      	blx	r3
 801877c:	88e2      	ldrh	r2, [r4, #6]
 801877e:	88a1      	ldrh	r1, [r4, #4]
 8018780:	4432      	add	r2, r6
 8018782:	4429      	add	r1, r5
 8018784:	4620      	mov	r0, r4
 8018786:	b212      	sxth	r2, r2
 8018788:	b209      	sxth	r1, r1
 801878a:	f7f5 fb92 	bl	800deb2 <_ZN8touchgfx8Drawable5setXYEss>
 801878e:	6823      	ldr	r3, [r4, #0]
 8018790:	4620      	mov	r0, r4
 8018792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018796:	699b      	ldr	r3, [r3, #24]
 8018798:	4718      	bx	r3
 801879a:	bd70      	pop	{r4, r5, r6, pc}

0801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801879c:	b510      	push	{r4, lr}
 801879e:	2300      	movs	r3, #0
 80187a0:	4604      	mov	r4, r0
 80187a2:	4608      	mov	r0, r1
 80187a4:	8023      	strh	r3, [r4, #0]
 80187a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80187aa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80187ae:	8063      	strh	r3, [r4, #2]
 80187b0:	6803      	ldr	r3, [r0, #0]
 80187b2:	80a1      	strh	r1, [r4, #4]
 80187b4:	80e2      	strh	r2, [r4, #6]
 80187b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187b8:	4621      	mov	r1, r4
 80187ba:	4798      	blx	r3
 80187bc:	4620      	mov	r0, r4
 80187be:	bd10      	pop	{r4, pc}

080187c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80187c0:	b530      	push	{r4, r5, lr}
 80187c2:	8083      	strh	r3, [r0, #4]
 80187c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80187c8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80187cc:	7183      	strb	r3, [r0, #6]
 80187ce:	79c3      	ldrb	r3, [r0, #7]
 80187d0:	6101      	str	r1, [r0, #16]
 80187d2:	f365 0306 	bfi	r3, r5, #0, #7
 80187d6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80187da:	8282      	strh	r2, [r0, #20]
 80187dc:	f365 13c7 	bfi	r3, r5, #7, #1
 80187e0:	71c3      	strb	r3, [r0, #7]
 80187e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80187e6:	7203      	strb	r3, [r0, #8]
 80187e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80187ec:	7243      	strb	r3, [r0, #9]
 80187ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80187f2:	8143      	strh	r3, [r0, #10]
 80187f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80187f8:	8183      	strh	r3, [r0, #12]
 80187fa:	4b01      	ldr	r3, [pc, #4]	; (8018800 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80187fc:	6003      	str	r3, [r0, #0]
 80187fe:	bd30      	pop	{r4, r5, pc}
 8018800:	08029444 	.word	0x08029444

08018804 <_ZNK8touchgfx9ConstFont4findEt>:
 8018804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018806:	6904      	ldr	r4, [r0, #16]
 8018808:	b3bc      	cbz	r4, 801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801880a:	88a3      	ldrh	r3, [r4, #4]
 801880c:	8a82      	ldrh	r2, [r0, #20]
 801880e:	1acb      	subs	r3, r1, r3
 8018810:	f102 32ff 	add.w	r2, r2, #4294967295
 8018814:	d431      	bmi.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018816:	4293      	cmp	r3, r2
 8018818:	dd0c      	ble.n	8018834 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801881a:	230e      	movs	r3, #14
 801881c:	fb03 4302 	mla	r3, r3, r2, r4
 8018820:	889b      	ldrh	r3, [r3, #4]
 8018822:	1a5b      	subs	r3, r3, r1
 8018824:	1ad3      	subs	r3, r2, r3
 8018826:	429a      	cmp	r2, r3
 8018828:	db27      	blt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801882a:	2b00      	cmp	r3, #0
 801882c:	bfbc      	itt	lt
 801882e:	2302      	movlt	r3, #2
 8018830:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018834:	2500      	movs	r5, #0
 8018836:	260e      	movs	r6, #14
 8018838:	4295      	cmp	r5, r2
 801883a:	dc1e      	bgt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801883c:	fb06 4003 	mla	r0, r6, r3, r4
 8018840:	8887      	ldrh	r7, [r0, #4]
 8018842:	42b9      	cmp	r1, r7
 8018844:	d01a      	beq.n	801887c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018846:	d20d      	bcs.n	8018864 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018848:	1e5a      	subs	r2, r3, #1
 801884a:	4295      	cmp	r5, r2
 801884c:	dc15      	bgt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801884e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018852:	1a5b      	subs	r3, r3, r1
 8018854:	1ad3      	subs	r3, r2, r3
 8018856:	429a      	cmp	r2, r3
 8018858:	db0f      	blt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801885a:	429d      	cmp	r5, r3
 801885c:	ddec      	ble.n	8018838 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801885e:	1953      	adds	r3, r2, r5
 8018860:	105b      	asrs	r3, r3, #1
 8018862:	e7e9      	b.n	8018838 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018864:	1c5d      	adds	r5, r3, #1
 8018866:	42aa      	cmp	r2, r5
 8018868:	db07      	blt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801886a:	8a43      	ldrh	r3, [r0, #18]
 801886c:	1acb      	subs	r3, r1, r3
 801886e:	442b      	add	r3, r5
 8018870:	429d      	cmp	r5, r3
 8018872:	dc02      	bgt.n	801887a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018874:	429a      	cmp	r2, r3
 8018876:	dadf      	bge.n	8018838 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018878:	e7f1      	b.n	801885e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801887a:	2000      	movs	r0, #0
 801887c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801887e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801887e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018880:	4604      	mov	r4, r0
 8018882:	4617      	mov	r7, r2
 8018884:	461e      	mov	r6, r3
 8018886:	b911      	cbnz	r1, 801888e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018888:	2500      	movs	r5, #0
 801888a:	4628      	mov	r0, r5
 801888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801888e:	290a      	cmp	r1, #10
 8018890:	d0fa      	beq.n	8018888 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018892:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018896:	4291      	cmp	r1, r2
 8018898:	d0f6      	beq.n	8018888 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801889a:	f242 020b 	movw	r2, #8203	; 0x200b
 801889e:	4291      	cmp	r1, r2
 80188a0:	d0f2      	beq.n	8018888 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80188a2:	f7ff ffaf 	bl	8018804 <_ZNK8touchgfx9ConstFont4findEt>
 80188a6:	4605      	mov	r5, r0
 80188a8:	b950      	cbnz	r0, 80188c0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	4620      	mov	r0, r4
 80188ae:	691b      	ldr	r3, [r3, #16]
 80188b0:	4798      	blx	r3
 80188b2:	4601      	mov	r1, r0
 80188b4:	4620      	mov	r0, r4
 80188b6:	f7ff ffa5 	bl	8018804 <_ZNK8touchgfx9ConstFont4findEt>
 80188ba:	4605      	mov	r5, r0
 80188bc:	2800      	cmp	r0, #0
 80188be:	d0e3      	beq.n	8018888 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80188c0:	6823      	ldr	r3, [r4, #0]
 80188c2:	4629      	mov	r1, r5
 80188c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80188c6:	4620      	mov	r0, r4
 80188c8:	4798      	blx	r3
 80188ca:	6038      	str	r0, [r7, #0]
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	4620      	mov	r0, r4
 80188d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188d2:	4798      	blx	r3
 80188d4:	7030      	strb	r0, [r6, #0]
 80188d6:	e7d8      	b.n	801888a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080188d8 <_ZN8touchgfx4clzuEm>:
 80188d8:	4603      	mov	r3, r0
 80188da:	b1c8      	cbz	r0, 8018910 <_ZN8touchgfx4clzuEm+0x38>
 80188dc:	0c02      	lsrs	r2, r0, #16
 80188de:	0412      	lsls	r2, r2, #16
 80188e0:	b9a2      	cbnz	r2, 801890c <_ZN8touchgfx4clzuEm+0x34>
 80188e2:	0403      	lsls	r3, r0, #16
 80188e4:	2010      	movs	r0, #16
 80188e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188ea:	bf04      	itt	eq
 80188ec:	021b      	lsleq	r3, r3, #8
 80188ee:	3008      	addeq	r0, #8
 80188f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188f4:	bf04      	itt	eq
 80188f6:	011b      	lsleq	r3, r3, #4
 80188f8:	3004      	addeq	r0, #4
 80188fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188fe:	bf04      	itt	eq
 8018900:	009b      	lsleq	r3, r3, #2
 8018902:	3002      	addeq	r0, #2
 8018904:	2b00      	cmp	r3, #0
 8018906:	db04      	blt.n	8018912 <_ZN8touchgfx4clzuEm+0x3a>
 8018908:	3001      	adds	r0, #1
 801890a:	4770      	bx	lr
 801890c:	2000      	movs	r0, #0
 801890e:	e7ea      	b.n	80188e6 <_ZN8touchgfx4clzuEm+0xe>
 8018910:	2020      	movs	r0, #32
 8018912:	4770      	bx	lr

08018914 <_ZN8touchgfx7muldivuEmmmRm>:
 8018914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018918:	4680      	mov	r8, r0
 801891a:	460f      	mov	r7, r1
 801891c:	4615      	mov	r5, r2
 801891e:	461e      	mov	r6, r3
 8018920:	f7ff ffda 	bl	80188d8 <_ZN8touchgfx4clzuEm>
 8018924:	b998      	cbnz	r0, 801894e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8018926:	4608      	mov	r0, r1
 8018928:	f7ff ffd6 	bl	80188d8 <_ZN8touchgfx4clzuEm>
 801892c:	2800      	cmp	r0, #0
 801892e:	dd08      	ble.n	8018942 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018930:	4633      	mov	r3, r6
 8018932:	462a      	mov	r2, r5
 8018934:	4641      	mov	r1, r8
 8018936:	4638      	mov	r0, r7
 8018938:	f7ff ffec 	bl	8018914 <_ZN8touchgfx7muldivuEmmmRm>
 801893c:	b003      	add	sp, #12
 801893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018942:	f04f 33ff 	mov.w	r3, #4294967295
 8018946:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801894a:	6033      	str	r3, [r6, #0]
 801894c:	e7f6      	b.n	801893c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801894e:	fa31 f900 	lsrs.w	r9, r1, r0
 8018952:	fb01 f308 	mul.w	r3, r1, r8
 8018956:	d105      	bne.n	8018964 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8018958:	fbb3 f0f5 	udiv	r0, r3, r5
 801895c:	fb05 3510 	mls	r5, r5, r0, r3
 8018960:	6035      	str	r5, [r6, #0]
 8018962:	e7eb      	b.n	801893c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018964:	2301      	movs	r3, #1
 8018966:	fa08 fb00 	lsl.w	fp, r8, r0
 801896a:	fa03 f000 	lsl.w	r0, r3, r0
 801896e:	3801      	subs	r0, #1
 8018970:	462a      	mov	r2, r5
 8018972:	4633      	mov	r3, r6
 8018974:	4641      	mov	r1, r8
 8018976:	4038      	ands	r0, r7
 8018978:	f7ff ffcc 	bl	8018914 <_ZN8touchgfx7muldivuEmmmRm>
 801897c:	fbbb faf5 	udiv	sl, fp, r5
 8018980:	462a      	mov	r2, r5
 8018982:	4607      	mov	r7, r0
 8018984:	ab01      	add	r3, sp, #4
 8018986:	fb05 b11a 	mls	r1, r5, sl, fp
 801898a:	4648      	mov	r0, r9
 801898c:	f7ff ffc2 	bl	8018914 <_ZN8touchgfx7muldivuEmmmRm>
 8018990:	9b01      	ldr	r3, [sp, #4]
 8018992:	6832      	ldr	r2, [r6, #0]
 8018994:	fb09 f40a 	mul.w	r4, r9, sl
 8018998:	441a      	add	r2, r3
 801899a:	fbb2 f3f5 	udiv	r3, r2, r5
 801899e:	441c      	add	r4, r3
 80189a0:	443c      	add	r4, r7
 80189a2:	4420      	add	r0, r4
 80189a4:	fb05 2513 	mls	r5, r5, r3, r2
 80189a8:	e7da      	b.n	8018960 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080189aa <_ZN8touchgfx6muldivElllRl>:
 80189aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80189ac:	2800      	cmp	r0, #0
 80189ae:	bfb6      	itet	lt
 80189b0:	f04f 34ff 	movlt.w	r4, #4294967295
 80189b4:	2401      	movge	r4, #1
 80189b6:	4240      	neglt	r0, r0
 80189b8:	2900      	cmp	r1, #0
 80189ba:	bfbc      	itt	lt
 80189bc:	4249      	neglt	r1, r1
 80189be:	4264      	neglt	r4, r4
 80189c0:	2a00      	cmp	r2, #0
 80189c2:	bfb6      	itet	lt
 80189c4:	4265      	neglt	r5, r4
 80189c6:	4625      	movge	r5, r4
 80189c8:	4252      	neglt	r2, r2
 80189ca:	4288      	cmp	r0, r1
 80189cc:	461e      	mov	r6, r3
 80189ce:	bfc2      	ittt	gt
 80189d0:	4603      	movgt	r3, r0
 80189d2:	4608      	movgt	r0, r1
 80189d4:	4619      	movgt	r1, r3
 80189d6:	ab01      	add	r3, sp, #4
 80189d8:	f7ff ff9c 	bl	8018914 <_ZN8touchgfx7muldivuEmmmRm>
 80189dc:	9b01      	ldr	r3, [sp, #4]
 80189de:	4368      	muls	r0, r5
 80189e0:	435c      	muls	r4, r3
 80189e2:	6034      	str	r4, [r6, #0]
 80189e4:	b002      	add	sp, #8
 80189e6:	bd70      	pop	{r4, r5, r6, pc}

080189e8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80189e8:	2000      	movs	r0, #0
 80189ea:	4770      	bx	lr

080189ec <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80189ec:	2001      	movs	r0, #1
 80189ee:	4770      	bx	lr

080189f0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80189f0:	2002      	movs	r0, #2
 80189f2:	4770      	bx	lr

080189f4 <_ZN8touchgfx12GestureEventD1Ev>:
 80189f4:	4770      	bx	lr

080189f6 <_ZN8touchgfx9DragEventD1Ev>:
 80189f6:	4770      	bx	lr

080189f8 <_ZN8touchgfx10ClickEventD1Ev>:
 80189f8:	4770      	bx	lr

080189fa <_ZN8touchgfx10ClickEventD0Ev>:
 80189fa:	b510      	push	{r4, lr}
 80189fc:	4604      	mov	r4, r0
 80189fe:	210c      	movs	r1, #12
 8018a00:	f00d fba2 	bl	8026148 <_ZdlPvj>
 8018a04:	4620      	mov	r0, r4
 8018a06:	bd10      	pop	{r4, pc}

08018a08 <_ZN8touchgfx9DragEventD0Ev>:
 8018a08:	b510      	push	{r4, lr}
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	2110      	movs	r1, #16
 8018a0e:	f00d fb9b 	bl	8026148 <_ZdlPvj>
 8018a12:	4620      	mov	r0, r4
 8018a14:	bd10      	pop	{r4, pc}

08018a16 <_ZN8touchgfx12GestureEventD0Ev>:
 8018a16:	b510      	push	{r4, lr}
 8018a18:	4604      	mov	r4, r0
 8018a1a:	210c      	movs	r1, #12
 8018a1c:	f00d fb94 	bl	8026148 <_ZdlPvj>
 8018a20:	4620      	mov	r0, r4
 8018a22:	bd10      	pop	{r4, pc}

08018a24 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018a24:	b530      	push	{r4, r5, lr}
 8018a26:	460d      	mov	r5, r1
 8018a28:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018a2a:	b087      	sub	sp, #28
 8018a2c:	4604      	mov	r4, r0
 8018a2e:	b301      	cbz	r1, 8018a72 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018a30:	a801      	add	r0, sp, #4
 8018a32:	f7ff feb3 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a36:	892a      	ldrh	r2, [r5, #8]
 8018a38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018a3c:	7928      	ldrb	r0, [r5, #4]
 8018a3e:	1ad2      	subs	r2, r2, r3
 8018a40:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018a42:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018a46:	441a      	add	r2, r3
 8018a48:	896b      	ldrh	r3, [r5, #10]
 8018a4a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018a4e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018a52:	1b5b      	subs	r3, r3, r5
 8018a54:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018a56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018a58:	442b      	add	r3, r5
 8018a5a:	4d07      	ldr	r5, [pc, #28]	; (8018a78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018a5c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018a60:	9503      	str	r5, [sp, #12]
 8018a62:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a6a:	6803      	ldr	r3, [r0, #0]
 8018a6c:	a903      	add	r1, sp, #12
 8018a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a70:	4798      	blx	r3
 8018a72:	b007      	add	sp, #28
 8018a74:	bd30      	pop	{r4, r5, pc}
 8018a76:	bf00      	nop
 8018a78:	080294c4 	.word	0x080294c4

08018a7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018a82:	b08a      	sub	sp, #40	; 0x28
 8018a84:	4604      	mov	r4, r0
 8018a86:	460d      	mov	r5, r1
 8018a88:	b113      	cbz	r3, 8018a90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018a8a:	790b      	ldrb	r3, [r1, #4]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d044      	beq.n	8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018a90:	f104 0804 	add.w	r8, r4, #4
 8018a94:	4641      	mov	r1, r8
 8018a96:	a803      	add	r0, sp, #12
 8018a98:	f7ff fe80 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a9c:	792b      	ldrb	r3, [r5, #4]
 8018a9e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018aa2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018aa6:	b983      	cbnz	r3, 8018aca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018aa8:	892a      	ldrh	r2, [r5, #8]
 8018aaa:	88e9      	ldrh	r1, [r5, #6]
 8018aac:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018ab0:	1b92      	subs	r2, r2, r6
 8018ab2:	1bc9      	subs	r1, r1, r7
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018aba:	9300      	str	r3, [sp, #0]
 8018abc:	b212      	sxth	r2, r2
 8018abe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018ac2:	b209      	sxth	r1, r1
 8018ac4:	4640      	mov	r0, r8
 8018ac6:	f7fa fe11 	bl	80136ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018aca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018acc:	b329      	cbz	r1, 8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018ace:	a805      	add	r0, sp, #20
 8018ad0:	f7ff fe64 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ad4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018ad8:	792b      	ldrb	r3, [r5, #4]
 8018ada:	1abf      	subs	r7, r7, r2
 8018adc:	88ea      	ldrh	r2, [r5, #6]
 8018ade:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018ae0:	4417      	add	r7, r2
 8018ae2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018ae4:	f88d 3020 	strb.w	r3, [sp, #32]
 8018ae8:	4417      	add	r7, r2
 8018aea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018aee:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018af2:	1ab6      	subs	r6, r6, r2
 8018af4:	892a      	ldrh	r2, [r5, #8]
 8018af6:	a907      	add	r1, sp, #28
 8018af8:	4416      	add	r6, r2
 8018afa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018afc:	4416      	add	r6, r2
 8018afe:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018b02:	2600      	movs	r6, #0
 8018b04:	4a06      	ldr	r2, [pc, #24]	; (8018b20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018b06:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018b0a:	9207      	str	r2, [sp, #28]
 8018b0c:	6803      	ldr	r3, [r0, #0]
 8018b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b10:	4798      	blx	r3
 8018b12:	792b      	ldrb	r3, [r5, #4]
 8018b14:	b10b      	cbz	r3, 8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018b16:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018b1a:	b00a      	add	sp, #40	; 0x28
 8018b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b20:	0802949c 	.word	0x0802949c

08018b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b28:	460c      	mov	r4, r1
 8018b2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018b2c:	b088      	sub	sp, #32
 8018b2e:	4605      	mov	r5, r0
 8018b30:	2900      	cmp	r1, #0
 8018b32:	d06d      	beq.n	8018c10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018b34:	4668      	mov	r0, sp
 8018b36:	f7ff fe31 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b3a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018b3c:	88e3      	ldrh	r3, [r4, #6]
 8018b3e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018b42:	440b      	add	r3, r1
 8018b44:	b21b      	sxth	r3, r3
 8018b46:	4543      	cmp	r3, r8
 8018b48:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018b4c:	db31      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b4e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018b52:	44c4      	add	ip, r8
 8018b54:	fa0f fc8c 	sxth.w	ip, ip
 8018b58:	4563      	cmp	r3, ip
 8018b5a:	da2a      	bge.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b5c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018b5e:	8926      	ldrh	r6, [r4, #8]
 8018b60:	4416      	add	r6, r2
 8018b62:	b236      	sxth	r6, r6
 8018b64:	42be      	cmp	r6, r7
 8018b66:	db24      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b68:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018b6c:	4438      	add	r0, r7
 8018b6e:	b200      	sxth	r0, r0
 8018b70:	4286      	cmp	r6, r0
 8018b72:	da1e      	bge.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b74:	8963      	ldrh	r3, [r4, #10]
 8018b76:	4419      	add	r1, r3
 8018b78:	b209      	sxth	r1, r1
 8018b7a:	4541      	cmp	r1, r8
 8018b7c:	db08      	blt.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b7e:	4561      	cmp	r1, ip
 8018b80:	da06      	bge.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	441a      	add	r2, r3
 8018b86:	b212      	sxth	r2, r2
 8018b88:	42ba      	cmp	r2, r7
 8018b8a:	db01      	blt.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b8c:	4282      	cmp	r2, r0
 8018b8e:	db10      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b90:	4b21      	ldr	r3, [pc, #132]	; (8018c18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018b92:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018b94:	9304      	str	r3, [sp, #16]
 8018b96:	2302      	movs	r3, #2
 8018b98:	f88d 3014 	strb.w	r3, [sp, #20]
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ba2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ba6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018baa:	6803      	ldr	r3, [r0, #0]
 8018bac:	a904      	add	r1, sp, #16
 8018bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bb0:	4798      	blx	r3
 8018bb2:	1d29      	adds	r1, r5, #4
 8018bb4:	a802      	add	r0, sp, #8
 8018bb6:	f7ff fdf1 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018bba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018bbe:	88e0      	ldrh	r0, [r4, #6]
 8018bc0:	eba3 0808 	sub.w	r8, r3, r8
 8018bc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018bc8:	7921      	ldrb	r1, [r4, #4]
 8018bca:	1bdf      	subs	r7, r3, r7
 8018bcc:	b2bb      	uxth	r3, r7
 8018bce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018bd2:	fa1f f888 	uxth.w	r8, r8
 8018bd6:	8922      	ldrh	r2, [r4, #8]
 8018bd8:	8967      	ldrh	r7, [r4, #10]
 8018bda:	89a4      	ldrh	r4, [r4, #12]
 8018bdc:	4440      	add	r0, r8
 8018bde:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018be0:	4460      	add	r0, ip
 8018be2:	441a      	add	r2, r3
 8018be4:	44b8      	add	r8, r7
 8018be6:	4423      	add	r3, r4
 8018be8:	4c0c      	ldr	r4, [pc, #48]	; (8018c1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018bea:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018bee:	4433      	add	r3, r6
 8018bf0:	4432      	add	r2, r6
 8018bf2:	44e0      	add	r8, ip
 8018bf4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018bf6:	f88d 1014 	strb.w	r1, [sp, #20]
 8018bfa:	9404      	str	r4, [sp, #16]
 8018bfc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018c00:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018c04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018c08:	6803      	ldr	r3, [r0, #0]
 8018c0a:	a904      	add	r1, sp, #16
 8018c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c0e:	4798      	blx	r3
 8018c10:	b008      	add	sp, #32
 8018c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c16:	bf00      	nop
 8018c18:	0802949c 	.word	0x0802949c
 8018c1c:	080294b0 	.word	0x080294b0

08018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c22:	4604      	mov	r4, r0
 8018c24:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018c28:	3201      	adds	r2, #1
 8018c2a:	d112      	bne.n	8018c52 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018c2c:	2500      	movs	r5, #0
 8018c2e:	9500      	str	r5, [sp, #0]
 8018c30:	466d      	mov	r5, sp
 8018c32:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018c36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018c3a:	6803      	ldr	r3, [r0, #0]
 8018c3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018c40:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c44:	4629      	mov	r1, r5
 8018c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c48:	4798      	blx	r3
 8018c4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018c4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018c52:	4620      	mov	r0, r4
 8018c54:	b003      	add	sp, #12
 8018c56:	bd30      	pop	{r4, r5, pc}

08018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018c58:	b513      	push	{r0, r1, r4, lr}
 8018c5a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018c5e:	4604      	mov	r4, r0
 8018c60:	3301      	adds	r3, #1
 8018c62:	d109      	bne.n	8018c78 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018c64:	4601      	mov	r1, r0
 8018c66:	4668      	mov	r0, sp
 8018c68:	f7ff fd98 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018c70:	8423      	strh	r3, [r4, #32]
 8018c72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c76:	8463      	strh	r3, [r4, #34]	; 0x22
 8018c78:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018c7c:	b002      	add	sp, #8
 8018c7e:	bd10      	pop	{r4, pc}

08018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018c80:	b513      	push	{r0, r1, r4, lr}
 8018c82:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018c86:	4604      	mov	r4, r0
 8018c88:	3301      	adds	r3, #1
 8018c8a:	d109      	bne.n	8018ca0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	4668      	mov	r0, sp
 8018c90:	f7ff fd84 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c94:	f8bd 3000 	ldrh.w	r3, [sp]
 8018c98:	8423      	strh	r3, [r4, #32]
 8018c9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c9e:	8463      	strh	r3, [r4, #34]	; 0x22
 8018ca0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018ca4:	b002      	add	sp, #8
 8018ca6:	bd10      	pop	{r4, pc}

08018ca8 <_ZN8touchgfx6ScreenC1Ev>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	4605      	mov	r5, r0
 8018cac:	4b16      	ldr	r3, [pc, #88]	; (8018d08 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018cae:	2101      	movs	r1, #1
 8018cb0:	f845 3b04 	str.w	r3, [r5], #4
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	4604      	mov	r4, r0
 8018cb8:	8103      	strh	r3, [r0, #8]
 8018cba:	8143      	strh	r3, [r0, #10]
 8018cbc:	8183      	strh	r3, [r0, #12]
 8018cbe:	81c3      	strh	r3, [r0, #14]
 8018cc0:	8203      	strh	r3, [r0, #16]
 8018cc2:	8243      	strh	r3, [r0, #18]
 8018cc4:	8283      	strh	r3, [r0, #20]
 8018cc6:	82c3      	strh	r3, [r0, #22]
 8018cc8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018ccc:	6203      	str	r3, [r0, #32]
 8018cce:	8483      	strh	r3, [r0, #36]	; 0x24
 8018cd0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018cd2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018cd6:	4a0d      	ldr	r2, [pc, #52]	; (8018d0c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018cd8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018cdc:	6343      	str	r3, [r0, #52]	; 0x34
 8018cde:	4b0c      	ldr	r3, [pc, #48]	; (8018d10 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018ce0:	6042      	str	r2, [r0, #4]
 8018ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018ce6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018ce8:	4a0a      	ldr	r2, [pc, #40]	; (8018d14 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018cea:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018cee:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018cf2:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	4798      	blx	r3
 8018cfa:	6863      	ldr	r3, [r4, #4]
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d00:	4631      	mov	r1, r6
 8018d02:	4798      	blx	r3
 8018d04:	4620      	mov	r0, r4
 8018d06:	bd70      	pop	{r4, r5, r6, pc}
 8018d08:	080294d8 	.word	0x080294d8
 8018d0c:	08028d78 	.word	0x08028d78
 8018d10:	2004f652 	.word	0x2004f652
 8018d14:	2004f650 	.word	0x2004f650

08018d18 <_ZN8touchgfx6Screen4drawEv>:
 8018d18:	b507      	push	{r0, r1, r2, lr}
 8018d1a:	2100      	movs	r1, #0
 8018d1c:	4b08      	ldr	r3, [pc, #32]	; (8018d40 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018d1e:	9100      	str	r1, [sp, #0]
 8018d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d24:	4b07      	ldr	r3, [pc, #28]	; (8018d44 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018d26:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d2e:	4669      	mov	r1, sp
 8018d30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d34:	6803      	ldr	r3, [r0, #0]
 8018d36:	689b      	ldr	r3, [r3, #8]
 8018d38:	4798      	blx	r3
 8018d3a:	b003      	add	sp, #12
 8018d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d40:	2004f650 	.word	0x2004f650
 8018d44:	2004f652 	.word	0x2004f652

08018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018d50:	b089      	sub	sp, #36	; 0x24
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	4680      	mov	r8, r0
 8018d56:	460c      	mov	r4, r1
 8018d58:	4615      	mov	r5, r2
 8018d5a:	dd0e      	ble.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018d5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	dd0a      	ble.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018d64:	4628      	mov	r0, r5
 8018d66:	f7ff ff5b 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	f7fe fc06 	bl	801757c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018d70:	69eb      	ldr	r3, [r5, #28]
 8018d72:	b928      	cbnz	r0, 8018d80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018d74:	461d      	mov	r5, r3
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d1f4      	bne.n	8018d64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018d7a:	b009      	add	sp, #36	; 0x24
 8018d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d80:	ae04      	add	r6, sp, #16
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	f000 80b5 	beq.w	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018d88:	682b      	ldr	r3, [r5, #0]
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	68db      	ldr	r3, [r3, #12]
 8018d8e:	a802      	add	r0, sp, #8
 8018d90:	4798      	blx	r3
 8018d92:	4628      	mov	r0, r5
 8018d94:	f7ff ff60 	bl	8018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018d98:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018d9c:	4407      	add	r7, r0
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f7ff ff6e 	bl	8018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018da8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018dac:	4418      	add	r0, r3
 8018dae:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018db2:	4621      	mov	r1, r4
 8018db4:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018db8:	b23f      	sxth	r7, r7
 8018dba:	4630      	mov	r0, r6
 8018dbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018dc4:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018dc8:	f7fa fd70 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8018dcc:	4628      	mov	r0, r5
 8018dce:	f7ff ff27 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018dd8:	ab06      	add	r3, sp, #24
 8018dda:	e883 0003 	stmia.w	r3, {r0, r1}
 8018dde:	4611      	mov	r1, r2
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7fa fd63 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8018de6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018dea:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018dee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018df2:	4299      	cmp	r1, r3
 8018df4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018df8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018dfc:	d10b      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018dfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018e02:	4552      	cmp	r2, sl
 8018e04:	d107      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018e06:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018e0a:	455a      	cmp	r2, fp
 8018e0c:	d103      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018e0e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018e12:	454a      	cmp	r2, r9
 8018e14:	d06d      	beq.n	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018e16:	f1bb 0f00 	cmp.w	fp, #0
 8018e1a:	dd65      	ble.n	8018ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018e1c:	f1b9 0f00 	cmp.w	r9, #0
 8018e20:	dd62      	ble.n	8018ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018e22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018e26:	fa1f f08a 	uxth.w	r0, sl
 8018e2a:	4552      	cmp	r2, sl
 8018e2c:	9000      	str	r0, [sp, #0]
 8018e2e:	da12      	bge.n	8018e56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	9b00      	ldr	r3, [sp, #0]
 8018e34:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018e38:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018e3c:	1a9a      	subs	r2, r3, r2
 8018e3e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018e42:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018e46:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018e4a:	69ea      	ldr	r2, [r5, #28]
 8018e4c:	4631      	mov	r1, r6
 8018e4e:	4640      	mov	r0, r8
 8018e50:	f7ff ff7a 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018e54:	9b01      	ldr	r3, [sp, #4]
 8018e56:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018e5a:	b29f      	uxth	r7, r3
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	da0d      	bge.n	8018e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018e60:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018e64:	1aba      	subs	r2, r7, r2
 8018e66:	f8ad a012 	strh.w	sl, [sp, #18]
 8018e6a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018e6e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018e72:	69ea      	ldr	r2, [r5, #28]
 8018e74:	4631      	mov	r1, r6
 8018e76:	4640      	mov	r0, r8
 8018e78:	f7ff ff66 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018e7c:	8822      	ldrh	r2, [r4, #0]
 8018e7e:	88a3      	ldrh	r3, [r4, #4]
 8018e80:	445f      	add	r7, fp
 8018e82:	4413      	add	r3, r2
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	b2bf      	uxth	r7, r7
 8018e88:	b23a      	sxth	r2, r7
 8018e8a:	b219      	sxth	r1, r3
 8018e8c:	4291      	cmp	r1, r2
 8018e8e:	dd0d      	ble.n	8018eac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018e90:	1bdb      	subs	r3, r3, r7
 8018e92:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018e96:	f8ad a012 	strh.w	sl, [sp, #18]
 8018e9a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e9e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018ea2:	69ea      	ldr	r2, [r5, #28]
 8018ea4:	4631      	mov	r1, r6
 8018ea6:	4640      	mov	r0, r8
 8018ea8:	f7ff ff4e 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018eac:	88e2      	ldrh	r2, [r4, #6]
 8018eae:	8863      	ldrh	r3, [r4, #2]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	9a00      	ldr	r2, [sp, #0]
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	444a      	add	r2, r9
 8018eb8:	fa1f f982 	uxth.w	r9, r2
 8018ebc:	fa0f f289 	sxth.w	r2, r9
 8018ec0:	b219      	sxth	r1, r3
 8018ec2:	428a      	cmp	r2, r1
 8018ec4:	da15      	bge.n	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ec6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018eca:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018ece:	eba3 0309 	sub.w	r3, r3, r9
 8018ed2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018ed6:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018eda:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018ede:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ee2:	69ea      	ldr	r2, [r5, #28]
 8018ee4:	4631      	mov	r1, r6
 8018ee6:	e001      	b.n	8018eec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018ee8:	4621      	mov	r1, r4
 8018eea:	69ea      	ldr	r2, [r5, #28]
 8018eec:	4640      	mov	r0, r8
 8018eee:	f7ff ff2b 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018ef2:	4628      	mov	r0, r5
 8018ef4:	f7ff fe94 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018ef8:	4633      	mov	r3, r6
 8018efa:	4602      	mov	r2, r0
 8018efc:	6861      	ldr	r1, [r4, #4]
 8018efe:	6820      	ldr	r0, [r4, #0]
 8018f00:	c303      	stmia	r3!, {r0, r1}
 8018f02:	4611      	mov	r1, r2
 8018f04:	4630      	mov	r0, r6
 8018f06:	f7fa fcd1 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8018f0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f77f af33 	ble.w	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018f14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f77f af2e 	ble.w	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018f1e:	4628      	mov	r0, r5
 8018f20:	f7ff fe9a 	bl	8018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018f24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018f28:	1a18      	subs	r0, r3, r0
 8018f2a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f7ff fea6 	bl	8018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018f34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f38:	4631      	mov	r1, r6
 8018f3a:	1a18      	subs	r0, r3, r0
 8018f3c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018f40:	682b      	ldr	r3, [r5, #0]
 8018f42:	4628      	mov	r0, r5
 8018f44:	689b      	ldr	r3, [r3, #8]
 8018f46:	4798      	blx	r3
 8018f48:	e717      	b.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018f4a:	b570      	push	{r4, r5, r6, lr}
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	460c      	mov	r4, r1
 8018f50:	b086      	sub	sp, #24
 8018f52:	1d06      	adds	r6, r0, #4
 8018f54:	4631      	mov	r1, r6
 8018f56:	4605      	mov	r5, r0
 8018f58:	a802      	add	r0, sp, #8
 8018f5a:	9301      	str	r3, [sp, #4]
 8018f5c:	f7ff fc1e 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f64:	8822      	ldrh	r2, [r4, #0]
 8018f66:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018f6a:	1ad2      	subs	r2, r2, r3
 8018f6c:	8863      	ldrh	r3, [r4, #2]
 8018f6e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018f72:	1a5b      	subs	r3, r3, r1
 8018f74:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018f78:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018f7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018f80:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018f84:	aa01      	add	r2, sp, #4
 8018f86:	a904      	add	r1, sp, #16
 8018f88:	4630      	mov	r0, r6
 8018f8a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018f8e:	f7fa fd65 	bl	8013a5c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018f92:	9a01      	ldr	r2, [sp, #4]
 8018f94:	b11a      	cbz	r2, 8018f9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018f96:	4621      	mov	r1, r4
 8018f98:	4628      	mov	r0, r5
 8018f9a:	f7ff fed5 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018f9e:	b006      	add	sp, #24
 8018fa0:	bd70      	pop	{r4, r5, r6, pc}

08018fa2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018fa2:	b530      	push	{r4, r5, lr}
 8018fa4:	4602      	mov	r2, r0
 8018fa6:	b085      	sub	sp, #20
 8018fa8:	460d      	mov	r5, r1
 8018faa:	466b      	mov	r3, sp
 8018fac:	4604      	mov	r4, r0
 8018fae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018fb2:	6851      	ldr	r1, [r2, #4]
 8018fb4:	c303      	stmia	r3!, {r0, r1}
 8018fb6:	4629      	mov	r1, r5
 8018fb8:	4668      	mov	r0, sp
 8018fba:	f7fa fc77 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 8018fbe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018fc2:	b12b      	cbz	r3, 8018fd0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018fc4:	4669      	mov	r1, sp
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f7ff ffbf 	bl	8018f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018fcc:	b005      	add	sp, #20
 8018fce:	bd30      	pop	{r4, r5, pc}
 8018fd0:	3404      	adds	r4, #4
 8018fd2:	4621      	mov	r1, r4
 8018fd4:	a802      	add	r0, sp, #8
 8018fd6:	f7ff fbe1 	bl	801879c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fda:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fde:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018fe2:	4669      	mov	r1, sp
 8018fe4:	1a9b      	subs	r3, r3, r2
 8018fe6:	f8ad 3000 	strh.w	r3, [sp]
 8018fea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018fee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018ff2:	4620      	mov	r0, r4
 8018ff4:	1a9b      	subs	r3, r3, r2
 8018ff6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018ffa:	f7fa fcf6 	bl	80139ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018ffe:	e7e5      	b.n	8018fcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019000:	460b      	mov	r3, r1
 8019002:	680a      	ldr	r2, [r1, #0]
 8019004:	1d01      	adds	r1, r0, #4
 8019006:	6992      	ldr	r2, [r2, #24]
 8019008:	4618      	mov	r0, r3
 801900a:	4710      	bx	r2

0801900c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801900c:	4298      	cmp	r0, r3
 801900e:	d200      	bcs.n	8019012 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8019010:	b913      	cbnz	r3, 8019018 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8019012:	440a      	add	r2, r1
 8019014:	b210      	sxth	r0, r2
 8019016:	4770      	bx	lr
 8019018:	ee07 0a90 	vmov	s15, r0
 801901c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019020:	ee07 3a90 	vmov	s15, r3
 8019024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801902c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019030:	ee07 2a90 	vmov	s15, r2
 8019034:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019038:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801903c:	ee67 5a07 	vmul.f32	s11, s14, s14
 8019040:	ee07 1a90 	vmov	s15, r1
 8019044:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801904c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019054:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905c:	bfcc      	ite	gt
 801905e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019062:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801906a:	ee17 3a90 	vmov	r3, s15
 801906e:	b218      	sxth	r0, r3
 8019070:	4770      	bx	lr

08019072 <_ZN8touchgfx12TextProviderC1Ev>:
 8019072:	b538      	push	{r3, r4, r5, lr}
 8019074:	2500      	movs	r5, #0
 8019076:	2302      	movs	r3, #2
 8019078:	4604      	mov	r4, r0
 801907a:	e9c0 5500 	strd	r5, r5, [r0]
 801907e:	7403      	strb	r3, [r0, #16]
 8019080:	6145      	str	r5, [r0, #20]
 8019082:	7605      	strb	r5, [r0, #24]
 8019084:	83c5      	strh	r5, [r0, #30]
 8019086:	8405      	strh	r5, [r0, #32]
 8019088:	86c5      	strh	r5, [r0, #54]	; 0x36
 801908a:	8705      	strh	r5, [r0, #56]	; 0x38
 801908c:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801908e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019092:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019096:	220e      	movs	r2, #14
 8019098:	4629      	mov	r1, r5
 801909a:	304c      	adds	r0, #76	; 0x4c
 801909c:	f00d f8fe 	bl	802629c <memset>
 80190a0:	2301      	movs	r3, #1
 80190a2:	4620      	mov	r0, r4
 80190a4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80190a8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80190ac:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80190b0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80190b4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80190b8:	f7f7 ffe0 	bl	801107c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80190bc:	4620      	mov	r0, r4
 80190be:	bd38      	pop	{r3, r4, r5, pc}

080190c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80190c0:	b530      	push	{r4, r5, lr}
 80190c2:	2500      	movs	r5, #0
 80190c4:	2401      	movs	r4, #1
 80190c6:	6843      	ldr	r3, [r0, #4]
 80190c8:	b913      	cbnz	r3, 80190d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80190ca:	6803      	ldr	r3, [r0, #0]
 80190cc:	b313      	cbz	r3, 8019114 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80190ce:	6043      	str	r3, [r0, #4]
 80190d0:	7e03      	ldrb	r3, [r0, #24]
 80190d2:	b143      	cbz	r3, 80190e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80190d4:	6943      	ldr	r3, [r0, #20]
 80190d6:	b12b      	cbz	r3, 80190e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80190d8:	881a      	ldrh	r2, [r3, #0]
 80190da:	b11a      	cbz	r2, 80190e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80190dc:	1c9a      	adds	r2, r3, #2
 80190de:	6142      	str	r2, [r0, #20]
 80190e0:	8818      	ldrh	r0, [r3, #0]
 80190e2:	bd30      	pop	{r4, r5, pc}
 80190e4:	7605      	strb	r5, [r0, #24]
 80190e6:	6843      	ldr	r3, [r0, #4]
 80190e8:	8819      	ldrh	r1, [r3, #0]
 80190ea:	b199      	cbz	r1, 8019114 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80190ec:	1c9a      	adds	r2, r3, #2
 80190ee:	2902      	cmp	r1, #2
 80190f0:	6042      	str	r2, [r0, #4]
 80190f2:	d1f5      	bne.n	80190e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80190f4:	7c03      	ldrb	r3, [r0, #16]
 80190f6:	2b01      	cmp	r3, #1
 80190f8:	d8e5      	bhi.n	80190c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80190fa:	1c5a      	adds	r2, r3, #1
 80190fc:	7402      	strb	r2, [r0, #16]
 80190fe:	3302      	adds	r3, #2
 8019100:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019104:	6143      	str	r3, [r0, #20]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d0dd      	beq.n	80190c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801910a:	881b      	ldrh	r3, [r3, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d0da      	beq.n	80190c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019110:	7604      	strb	r4, [r0, #24]
 8019112:	e7d8      	b.n	80190c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019114:	2000      	movs	r0, #0
 8019116:	e7e4      	b.n	80190e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019118 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019118:	6001      	str	r1, [r0, #0]
 801911a:	2100      	movs	r1, #0
 801911c:	b430      	push	{r4, r5}
 801911e:	6041      	str	r1, [r0, #4]
 8019120:	6815      	ldr	r5, [r2, #0]
 8019122:	6085      	str	r5, [r0, #8]
 8019124:	6852      	ldr	r2, [r2, #4]
 8019126:	6443      	str	r3, [r0, #68]	; 0x44
 8019128:	9b02      	ldr	r3, [sp, #8]
 801912a:	60c2      	str	r2, [r0, #12]
 801912c:	7401      	strb	r1, [r0, #16]
 801912e:	6141      	str	r1, [r0, #20]
 8019130:	7601      	strb	r1, [r0, #24]
 8019132:	8701      	strh	r1, [r0, #56]	; 0x38
 8019134:	8401      	strh	r1, [r0, #32]
 8019136:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801913a:	6483      	str	r3, [r0, #72]	; 0x48
 801913c:	bc30      	pop	{r4, r5}
 801913e:	f7f7 bf9d 	b.w	801107c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019142 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019144:	4605      	mov	r5, r0
 8019146:	4608      	mov	r0, r1
 8019148:	b1e9      	cbz	r1, 8019186 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801914a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801914e:	460b      	mov	r3, r1
 8019150:	4622      	mov	r2, r4
 8019152:	f101 0708 	add.w	r7, r1, #8
 8019156:	4626      	mov	r6, r4
 8019158:	6818      	ldr	r0, [r3, #0]
 801915a:	6859      	ldr	r1, [r3, #4]
 801915c:	3308      	adds	r3, #8
 801915e:	c603      	stmia	r6!, {r0, r1}
 8019160:	42bb      	cmp	r3, r7
 8019162:	4634      	mov	r4, r6
 8019164:	d1f7      	bne.n	8019156 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019166:	6818      	ldr	r0, [r3, #0]
 8019168:	6030      	str	r0, [r6, #0]
 801916a:	4610      	mov	r0, r2
 801916c:	889b      	ldrh	r3, [r3, #4]
 801916e:	80b3      	strh	r3, [r6, #4]
 8019170:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019174:	015b      	lsls	r3, r3, #5
 8019176:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801917a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801917e:	430b      	orrs	r3, r1
 8019180:	425b      	negs	r3, r3
 8019182:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019188:	b538      	push	{r3, r4, r5, lr}
 801918a:	460c      	mov	r4, r1
 801918c:	6811      	ldr	r1, [r2, #0]
 801918e:	4610      	mov	r0, r2
 8019190:	68cd      	ldr	r5, [r1, #12]
 8019192:	4619      	mov	r1, r3
 8019194:	47a8      	blx	r5
 8019196:	2800      	cmp	r0, #0
 8019198:	bf08      	it	eq
 801919a:	4620      	moveq	r0, r4
 801919c:	bd38      	pop	{r3, r4, r5, pc}
	...

080191a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80191a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191a2:	4604      	mov	r4, r0
 80191a4:	4615      	mov	r5, r2
 80191a6:	4608      	mov	r0, r1
 80191a8:	b93a      	cbnz	r2, 80191ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80191aa:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80191ae:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80191b2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80191b6:	4628      	mov	r0, r5
 80191b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ba:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80191be:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80191c2:	8893      	ldrh	r3, [r2, #4]
 80191c4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80191c8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80191cc:	79ee      	ldrb	r6, [r5, #7]
 80191ce:	4316      	orrs	r6, r2
 80191d0:	19da      	adds	r2, r3, r7
 80191d2:	b291      	uxth	r1, r2
 80191d4:	291d      	cmp	r1, #29
 80191d6:	b2b7      	uxth	r7, r6
 80191d8:	d879      	bhi.n	80192ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80191da:	2201      	movs	r2, #1
 80191dc:	408a      	lsls	r2, r1
 80191de:	4974      	ldr	r1, [pc, #464]	; (80193b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 80191e0:	10f6      	asrs	r6, r6, #3
 80191e2:	420a      	tst	r2, r1
 80191e4:	d12d      	bne.n	8019242 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 80191e6:	f412 7f60 	tst.w	r2, #896	; 0x380
 80191ea:	d070      	beq.n	80192ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 80191ec:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80191f0:	462b      	mov	r3, r5
 80191f2:	f105 0e08 	add.w	lr, r5, #8
 80191f6:	4615      	mov	r5, r2
 80191f8:	4694      	mov	ip, r2
 80191fa:	6818      	ldr	r0, [r3, #0]
 80191fc:	6859      	ldr	r1, [r3, #4]
 80191fe:	3308      	adds	r3, #8
 8019200:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019204:	4573      	cmp	r3, lr
 8019206:	4662      	mov	r2, ip
 8019208:	d1f6      	bne.n	80191f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801920a:	6818      	ldr	r0, [r3, #0]
 801920c:	f8cc 0000 	str.w	r0, [ip]
 8019210:	889b      	ldrh	r3, [r3, #4]
 8019212:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019216:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801921a:	b2b3      	uxth	r3, r6
 801921c:	1aca      	subs	r2, r1, r3
 801921e:	b292      	uxth	r2, r2
 8019220:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019224:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019228:	10d2      	asrs	r2, r2, #3
 801922a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801922e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019232:	4302      	orrs	r2, r0
 8019234:	1bcf      	subs	r7, r1, r7
 8019236:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801923a:	1afb      	subs	r3, r7, r3
 801923c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019240:	e7b9      	b.n	80191b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019242:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019244:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019248:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801924a:	f640 6333 	movw	r3, #3635	; 0xe33
 801924e:	4299      	cmp	r1, r3
 8019250:	d110      	bne.n	8019274 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 8019252:	6803      	ldr	r3, [r0, #0]
 8019254:	68db      	ldr	r3, [r3, #12]
 8019256:	4798      	blx	r3
 8019258:	7b41      	ldrb	r1, [r0, #13]
 801925a:	00cb      	lsls	r3, r1, #3
 801925c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019260:	7a03      	ldrb	r3, [r0, #8]
 8019262:	0648      	lsls	r0, r1, #25
 8019264:	ea43 0302 	orr.w	r3, r3, r2
 8019268:	bf44      	itt	mi
 801926a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801926e:	b21b      	sxthmi	r3, r3
 8019270:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019274:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019278:	462a      	mov	r2, r5
 801927a:	443b      	add	r3, r7
 801927c:	4433      	add	r3, r6
 801927e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019282:	f105 0c08 	add.w	ip, r5, #8
 8019286:	4635      	mov	r5, r6
 8019288:	b29b      	uxth	r3, r3
 801928a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801928e:	4637      	mov	r7, r6
 8019290:	6810      	ldr	r0, [r2, #0]
 8019292:	6851      	ldr	r1, [r2, #4]
 8019294:	3208      	adds	r2, #8
 8019296:	c703      	stmia	r7!, {r0, r1}
 8019298:	4562      	cmp	r2, ip
 801929a:	463e      	mov	r6, r7
 801929c:	d1f7      	bne.n	801928e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801929e:	6810      	ldr	r0, [r2, #0]
 80192a0:	6038      	str	r0, [r7, #0]
 80192a2:	8892      	ldrh	r2, [r2, #4]
 80192a4:	80ba      	strh	r2, [r7, #4]
 80192a6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80192aa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80192ae:	10db      	asrs	r3, r3, #3
 80192b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80192b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80192b8:	4313      	orrs	r3, r2
 80192ba:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80192be:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80192c2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80192c6:	1a9b      	subs	r3, r3, r2
 80192c8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80192cc:	e773      	b.n	80191b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80192ce:	f640 611b 	movw	r1, #3611	; 0xe1b
 80192d2:	f023 0204 	bic.w	r2, r3, #4
 80192d6:	428a      	cmp	r2, r1
 80192d8:	d003      	beq.n	80192e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 80192da:	f640 621d 	movw	r2, #3613	; 0xe1d
 80192de:	4293      	cmp	r3, r2
 80192e0:	d120      	bne.n	8019324 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 80192e2:	3b01      	subs	r3, #1
 80192e4:	4602      	mov	r2, r0
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	4629      	mov	r1, r5
 80192ea:	4620      	mov	r0, r4
 80192ec:	f7ff ff4c 	bl	8019188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80192f0:	7b41      	ldrb	r1, [r0, #13]
 80192f2:	00cb      	lsls	r3, r1, #3
 80192f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80192f8:	7a03      	ldrb	r3, [r0, #8]
 80192fa:	0649      	lsls	r1, r1, #25
 80192fc:	ea43 0302 	orr.w	r3, r3, r2
 8019300:	bf44      	itt	mi
 8019302:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019306:	b21b      	sxthmi	r3, r3
 8019308:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801930c:	7b6b      	ldrb	r3, [r5, #13]
 801930e:	7aaa      	ldrb	r2, [r5, #10]
 8019310:	005b      	lsls	r3, r3, #1
 8019312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019316:	4313      	orrs	r3, r2
 8019318:	115a      	asrs	r2, r3, #5
 801931a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801931e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019322:	e036      	b.n	8019392 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8019324:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019328:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801932c:	7a2a      	ldrb	r2, [r5, #8]
 801932e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019332:	ea42 0201 	orr.w	r2, r2, r1
 8019336:	f640 6109 	movw	r1, #3593	; 0xe09
 801933a:	bf1c      	itt	ne
 801933c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019340:	b212      	sxthne	r2, r2
 8019342:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019346:	f023 0210 	bic.w	r2, r3, #16
 801934a:	428a      	cmp	r2, r1
 801934c:	d003      	beq.n	8019356 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801934e:	f640 6213 	movw	r2, #3603	; 0xe13
 8019352:	4293      	cmp	r3, r2
 8019354:	d12a      	bne.n	80193ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8019356:	7b6e      	ldrb	r6, [r5, #13]
 8019358:	4629      	mov	r1, r5
 801935a:	0076      	lsls	r6, r6, #1
 801935c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019360:	7aae      	ldrb	r6, [r5, #10]
 8019362:	4316      	orrs	r6, r2
 8019364:	f640 6213 	movw	r2, #3603	; 0xe13
 8019368:	4293      	cmp	r3, r2
 801936a:	bf18      	it	ne
 801936c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019370:	4602      	mov	r2, r0
 8019372:	bf14      	ite	ne
 8019374:	b29b      	uxthne	r3, r3
 8019376:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801937a:	4620      	mov	r0, r4
 801937c:	f7ff ff04 	bl	8019188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019380:	7b43      	ldrb	r3, [r0, #13]
 8019382:	7a82      	ldrb	r2, [r0, #10]
 8019384:	005b      	lsls	r3, r3, #1
 8019386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801938a:	4313      	orrs	r3, r2
 801938c:	1af6      	subs	r6, r6, r3
 801938e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019392:	7b69      	ldrb	r1, [r5, #13]
 8019394:	00cb      	lsls	r3, r1, #3
 8019396:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801939a:	7a2b      	ldrb	r3, [r5, #8]
 801939c:	4313      	orrs	r3, r2
 801939e:	064a      	lsls	r2, r1, #25
 80193a0:	bf44      	itt	mi
 80193a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80193a6:	b21b      	sxthmi	r3, r3
 80193a8:	1bdb      	subs	r3, r3, r7
 80193aa:	e747      	b.n	801923c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 80193ac:	2300      	movs	r3, #0
 80193ae:	e7b6      	b.n	801931e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 80193b0:	3fc00079 	.word	0x3fc00079

080193b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80193b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193b8:	4604      	mov	r4, r0
 80193ba:	b942      	cbnz	r2, 80193ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80193bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80193c0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80193c4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80193c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80193cc:	e047      	b.n	801945e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80193ce:	7b51      	ldrb	r1, [r2, #13]
 80193d0:	8893      	ldrh	r3, [r2, #4]
 80193d2:	010d      	lsls	r5, r1, #4
 80193d4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80193d8:	79d5      	ldrb	r5, [r2, #7]
 80193da:	4305      	orrs	r5, r0
 80193dc:	2d04      	cmp	r5, #4
 80193de:	bfcc      	ite	gt
 80193e0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80193e4:	f04f 0e01 	movle.w	lr, #1
 80193e8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80193ec:	f200 80ab 	bhi.w	8019546 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80193f0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80193f4:	4283      	cmp	r3, r0
 80193f6:	d216      	bcs.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80193f8:	f240 605b 	movw	r0, #1627	; 0x65b
 80193fc:	4283      	cmp	r3, r0
 80193fe:	d859      	bhi.n	80194b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019400:	f240 6057 	movw	r0, #1623	; 0x657
 8019404:	4283      	cmp	r3, r0
 8019406:	d20e      	bcs.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019408:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801940c:	d24a      	bcs.n	80194a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801940e:	f240 604e 	movw	r0, #1614	; 0x64e
 8019412:	4283      	cmp	r3, r0
 8019414:	d207      	bcs.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019416:	f240 601a 	movw	r0, #1562	; 0x61a
 801941a:	4283      	cmp	r3, r0
 801941c:	d02a      	beq.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801941e:	d821      	bhi.n	8019464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019420:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019424:	d35b      	bcc.n	80194de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019426:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801942a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801942e:	f040 80d0 	bne.w	80195d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019432:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019436:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801943a:	f040 80ca 	bne.w	80195d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801943e:	00cb      	lsls	r3, r1, #3
 8019440:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019444:	7a13      	ldrb	r3, [r2, #8]
 8019446:	0649      	lsls	r1, r1, #25
 8019448:	ea43 0300 	orr.w	r3, r3, r0
 801944c:	bf44      	itt	mi
 801944e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019452:	b21b      	sxthmi	r3, r3
 8019454:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019458:	1b5d      	subs	r5, r3, r5
 801945a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801945e:	4610      	mov	r0, r2
 8019460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019464:	f240 604b 	movw	r0, #1611	; 0x64b
 8019468:	4283      	cmp	r3, r0
 801946a:	d338      	bcc.n	80194de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801946c:	f240 604c 	movw	r0, #1612	; 0x64c
 8019470:	4283      	cmp	r3, r0
 8019472:	d9d8      	bls.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019474:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019478:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801947c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019480:	f040 80f2 	bne.w	8019668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019484:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019488:	f040 80ee 	bne.w	8019668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801948c:	00cb      	lsls	r3, r1, #3
 801948e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019492:	7a13      	ldrb	r3, [r2, #8]
 8019494:	064e      	lsls	r6, r1, #25
 8019496:	ea43 0300 	orr.w	r3, r3, r0
 801949a:	bf44      	itt	mi
 801949c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80194a0:	b21b      	sxthmi	r3, r3
 80194a2:	e7d9      	b.n	8019458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80194a4:	f240 6054 	movw	r0, #1620	; 0x654
 80194a8:	4283      	cmp	r3, r0
 80194aa:	d8e3      	bhi.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194ac:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80194b0:	d9e0      	bls.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194b2:	e7b8      	b.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194b4:	f240 6074 	movw	r0, #1652	; 0x674
 80194b8:	4283      	cmp	r3, r0
 80194ba:	d0b4      	beq.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194bc:	d82d      	bhi.n	801951a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80194be:	f240 605e 	movw	r0, #1630	; 0x65e
 80194c2:	4283      	cmp	r3, r0
 80194c4:	d804      	bhi.n	80194d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80194c6:	f240 605d 	movw	r0, #1629	; 0x65d
 80194ca:	4283      	cmp	r3, r0
 80194cc:	d3d2      	bcc.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194ce:	e7aa      	b.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194d0:	f240 605f 	movw	r0, #1631	; 0x65f
 80194d4:	4283      	cmp	r3, r0
 80194d6:	d0cd      	beq.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194d8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80194dc:	d0a3      	beq.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194de:	00cb      	lsls	r3, r1, #3
 80194e0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80194e4:	7a13      	ldrb	r3, [r2, #8]
 80194e6:	0649      	lsls	r1, r1, #25
 80194e8:	ea43 0300 	orr.w	r3, r3, r0
 80194ec:	bf44      	itt	mi
 80194ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80194f2:	b21b      	sxthmi	r3, r3
 80194f4:	1b5d      	subs	r5, r3, r5
 80194f6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80194fa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80194fe:	7b53      	ldrb	r3, [r2, #13]
 8019500:	015b      	lsls	r3, r3, #5
 8019502:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019506:	7993      	ldrb	r3, [r2, #6]
 8019508:	430b      	orrs	r3, r1
 801950a:	2105      	movs	r1, #5
 801950c:	005b      	lsls	r3, r3, #1
 801950e:	fb93 f3f1 	sdiv	r3, r3, r1
 8019512:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019516:	440b      	add	r3, r1
 8019518:	e756      	b.n	80193c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801951a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801951e:	4283      	cmp	r3, r0
 8019520:	d809      	bhi.n	8019536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019522:	f240 60df 	movw	r0, #1759	; 0x6df
 8019526:	4283      	cmp	r3, r0
 8019528:	f4bf af7d 	bcs.w	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801952c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019530:	2b05      	cmp	r3, #5
 8019532:	d8d4      	bhi.n	80194de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019534:	e777      	b.n	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019536:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801953a:	4283      	cmp	r3, r0
 801953c:	d09a      	beq.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801953e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019542:	4283      	cmp	r3, r0
 8019544:	e7ca      	b.n	80194dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019546:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801954a:	d22b      	bcs.n	80195a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801954c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019550:	4283      	cmp	r3, r0
 8019552:	d28f      	bcs.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019554:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019558:	4283      	cmp	r3, r0
 801955a:	d816      	bhi.n	801958a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801955c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019560:	4283      	cmp	r3, r0
 8019562:	f4bf af60 	bcs.w	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019566:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801956a:	4283      	cmp	r3, r0
 801956c:	d80a      	bhi.n	8019584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801956e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019572:	4283      	cmp	r3, r0
 8019574:	f4bf af57 	bcs.w	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019578:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801957c:	4283      	cmp	r3, r0
 801957e:	f43f af79 	beq.w	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019582:	e7ac      	b.n	80194de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019584:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019588:	e7f8      	b.n	801957c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801958a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801958e:	4283      	cmp	r3, r0
 8019590:	d802      	bhi.n	8019598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019592:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019596:	e798      	b.n	80194ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019598:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801959c:	4283      	cmp	r3, r0
 801959e:	f47f af42 	bne.w	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195a2:	e767      	b.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195a4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80195a8:	4283      	cmp	r3, r0
 80195aa:	f43f af63 	beq.w	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195ae:	d802      	bhi.n	80195b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80195b0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80195b4:	e7f2      	b.n	801959c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80195b6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80195ba:	4283      	cmp	r3, r0
 80195bc:	d805      	bhi.n	80195ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80195be:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80195c2:	4283      	cmp	r3, r0
 80195c4:	f4ff af2f 	bcc.w	8019426 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195c8:	e754      	b.n	8019474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195ca:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80195ce:	4283      	cmp	r3, r0
 80195d0:	e7af      	b.n	8019532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80195d2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80195d6:	4617      	mov	r7, r2
 80195d8:	4666      	mov	r6, ip
 80195da:	f102 0808 	add.w	r8, r2, #8
 80195de:	46e6      	mov	lr, ip
 80195e0:	6838      	ldr	r0, [r7, #0]
 80195e2:	6879      	ldr	r1, [r7, #4]
 80195e4:	3708      	adds	r7, #8
 80195e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80195ea:	4547      	cmp	r7, r8
 80195ec:	46f4      	mov	ip, lr
 80195ee:	d1f6      	bne.n	80195de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80195f0:	6838      	ldr	r0, [r7, #0]
 80195f2:	f8ce 0000 	str.w	r0, [lr]
 80195f6:	88b9      	ldrh	r1, [r7, #4]
 80195f8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80195fc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019600:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019604:	d009      	beq.n	801961a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019606:	7b51      	ldrb	r1, [r2, #13]
 8019608:	7992      	ldrb	r2, [r2, #6]
 801960a:	0149      	lsls	r1, r1, #5
 801960c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019610:	4311      	orrs	r1, r2
 8019612:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019616:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801961a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801961e:	b2ad      	uxth	r5, r5
 8019620:	d00d      	beq.n	801963e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8019622:	442b      	add	r3, r5
 8019624:	b29b      	uxth	r3, r3
 8019626:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801962a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801962e:	10db      	asrs	r3, r3, #3
 8019630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019638:	4313      	orrs	r3, r2
 801963a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801963e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019642:	00cb      	lsls	r3, r1, #3
 8019644:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019648:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801964c:	064f      	lsls	r7, r1, #25
 801964e:	ea43 0302 	orr.w	r3, r3, r2
 8019652:	bf44      	itt	mi
 8019654:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019658:	b21b      	sxthmi	r3, r3
 801965a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801965e:	1b5b      	subs	r3, r3, r5
 8019660:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019664:	4632      	mov	r2, r6
 8019666:	e6fa      	b.n	801945e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019668:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801966c:	4617      	mov	r7, r2
 801966e:	4666      	mov	r6, ip
 8019670:	f102 0908 	add.w	r9, r2, #8
 8019674:	46e0      	mov	r8, ip
 8019676:	6838      	ldr	r0, [r7, #0]
 8019678:	6879      	ldr	r1, [r7, #4]
 801967a:	3708      	adds	r7, #8
 801967c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019680:	454f      	cmp	r7, r9
 8019682:	46c4      	mov	ip, r8
 8019684:	d1f6      	bne.n	8019674 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8019686:	6838      	ldr	r0, [r7, #0]
 8019688:	f8c8 0000 	str.w	r0, [r8]
 801968c:	88b9      	ldrh	r1, [r7, #4]
 801968e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019692:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019696:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801969a:	d009      	beq.n	80196b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801969c:	7b51      	ldrb	r1, [r2, #13]
 801969e:	7992      	ldrb	r2, [r2, #6]
 80196a0:	0149      	lsls	r1, r1, #5
 80196a2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80196a6:	4311      	orrs	r1, r2
 80196a8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80196ac:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80196b0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80196b4:	d00e      	beq.n	80196d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80196b6:	eba3 030e 	sub.w	r3, r3, lr
 80196ba:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80196be:	b29b      	uxth	r3, r3
 80196c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80196c4:	10db      	asrs	r3, r3, #3
 80196c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80196ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80196ce:	4313      	orrs	r3, r2
 80196d0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80196d4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80196d8:	00cb      	lsls	r3, r1, #3
 80196da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80196de:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80196e2:	0648      	lsls	r0, r1, #25
 80196e4:	ea43 0302 	orr.w	r3, r3, r2
 80196e8:	bf44      	itt	mi
 80196ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80196ee:	b21b      	sxthmi	r3, r3
 80196f0:	1b5d      	subs	r5, r3, r5
 80196f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80196f6:	e7b5      	b.n	8019664 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080196f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80196f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196fc:	461e      	mov	r6, r3
 80196fe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019700:	4604      	mov	r4, r0
 8019702:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019706:	4617      	mov	r7, r2
 8019708:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801970c:	f7f7 fc10 	bl	8010f30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019710:	4605      	mov	r5, r0
 8019712:	b918      	cbnz	r0, 801971c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019714:	6030      	str	r0, [r6, #0]
 8019716:	4628      	mov	r0, r5
 8019718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	4601      	mov	r1, r0
 8019720:	68db      	ldr	r3, [r3, #12]
 8019722:	4638      	mov	r0, r7
 8019724:	4798      	blx	r3
 8019726:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801972a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801972e:	4602      	mov	r2, r0
 8019730:	6030      	str	r0, [r6, #0]
 8019732:	d213      	bcs.n	801975c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019734:	4643      	mov	r3, r8
 8019736:	4639      	mov	r1, r7
 8019738:	4620      	mov	r0, r4
 801973a:	f7ff fe3b 	bl	80193b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801973e:	6030      	str	r0, [r6, #0]
 8019740:	6833      	ldr	r3, [r6, #0]
 8019742:	b143      	cbz	r3, 8019756 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019744:	7b5a      	ldrb	r2, [r3, #13]
 8019746:	7a9b      	ldrb	r3, [r3, #10]
 8019748:	0052      	lsls	r2, r2, #1
 801974a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801974e:	4313      	orrs	r3, r2
 8019750:	bf0c      	ite	eq
 8019752:	2301      	moveq	r3, #1
 8019754:	2300      	movne	r3, #0
 8019756:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801975a:	e7dc      	b.n	8019716 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801975c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019760:	b29b      	uxth	r3, r3
 8019762:	2b7f      	cmp	r3, #127	; 0x7f
 8019764:	d804      	bhi.n	8019770 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019766:	4639      	mov	r1, r7
 8019768:	4620      	mov	r0, r4
 801976a:	f7ff fd19 	bl	80191a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801976e:	e7e6      	b.n	801973e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019770:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019774:	2b00      	cmp	r3, #0
 8019776:	d0e3      	beq.n	8019740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019778:	f640 1302 	movw	r3, #2306	; 0x902
 801977c:	429d      	cmp	r5, r3
 801977e:	d1df      	bne.n	8019740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019780:	4601      	mov	r1, r0
 8019782:	4620      	mov	r0, r4
 8019784:	f7ff fcdd 	bl	8019142 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019788:	e7d9      	b.n	801973e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801978a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801978a:	b510      	push	{r4, lr}
 801978c:	4604      	mov	r4, r0
 801978e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019792:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019794:	b1f1      	cbz	r1, 80197d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019796:	2b0a      	cmp	r3, #10
 8019798:	d02f      	beq.n	80197fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801979a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801979c:	3901      	subs	r1, #1
 801979e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80197a2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80197a4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80197a8:	1c51      	adds	r1, r2, #1
 80197aa:	b289      	uxth	r1, r1
 80197ac:	2901      	cmp	r1, #1
 80197ae:	bf84      	itt	hi
 80197b0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80197b4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80197b6:	f103 0201 	add.w	r2, r3, #1
 80197ba:	8722      	strh	r2, [r4, #56]	; 0x38
 80197bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80197be:	bf98      	it	ls
 80197c0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80197c2:	4413      	add	r3, r2
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	2b09      	cmp	r3, #9
 80197c8:	bf88      	it	hi
 80197ca:	3b0a      	subhi	r3, #10
 80197cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80197d0:	8458      	strh	r0, [r3, #34]	; 0x22
 80197d2:	e7dc      	b.n	801978e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80197d4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80197d6:	2b0a      	cmp	r3, #10
 80197d8:	d00f      	beq.n	80197fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80197da:	4620      	mov	r0, r4
 80197dc:	f7ff fc70 	bl	80190c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80197e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80197e2:	1c5a      	adds	r2, r3, #1
 80197e4:	8722      	strh	r2, [r4, #56]	; 0x38
 80197e6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80197e8:	4413      	add	r3, r2
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	2b09      	cmp	r3, #9
 80197ee:	bf88      	it	hi
 80197f0:	3b0a      	subhi	r3, #10
 80197f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80197f6:	8458      	strh	r0, [r3, #34]	; 0x22
 80197f8:	e7ec      	b.n	80197d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80197fa:	bd10      	pop	{r4, pc}

080197fc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80197fc:	b538      	push	{r3, r4, r5, lr}
 80197fe:	4604      	mov	r4, r0
 8019800:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019802:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019806:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019808:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801980a:	3a01      	subs	r2, #1
 801980c:	8702      	strh	r2, [r0, #56]	; 0x38
 801980e:	1c5a      	adds	r2, r3, #1
 8019810:	b292      	uxth	r2, r2
 8019812:	2a09      	cmp	r2, #9
 8019814:	bf86      	itte	hi
 8019816:	3b09      	subhi	r3, #9
 8019818:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801981a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801981c:	f7ff ffb5 	bl	801978a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019820:	8c23      	ldrh	r3, [r4, #32]
 8019822:	2b01      	cmp	r3, #1
 8019824:	bf9c      	itt	ls
 8019826:	3301      	addls	r3, #1
 8019828:	8423      	strhls	r3, [r4, #32]
 801982a:	8be3      	ldrh	r3, [r4, #30]
 801982c:	b90b      	cbnz	r3, 8019832 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801982e:	2302      	movs	r3, #2
 8019830:	83e3      	strh	r3, [r4, #30]
 8019832:	8be3      	ldrh	r3, [r4, #30]
 8019834:	4628      	mov	r0, r5
 8019836:	3b01      	subs	r3, #1
 8019838:	b29b      	uxth	r3, r3
 801983a:	83e3      	strh	r3, [r4, #30]
 801983c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019840:	8365      	strh	r5, [r4, #26]
 8019842:	bd38      	pop	{r3, r4, r5, pc}

08019844 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019844:	428a      	cmp	r2, r1
 8019846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801984a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801984c:	d931      	bls.n	80198b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801984e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019850:	1a54      	subs	r4, r2, r1
 8019852:	19ee      	adds	r6, r5, r7
 8019854:	3e01      	subs	r6, #1
 8019856:	fa1f fe84 	uxth.w	lr, r4
 801985a:	b2b4      	uxth	r4, r6
 801985c:	eba4 090e 	sub.w	r9, r4, lr
 8019860:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019864:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019868:	fa1f f989 	uxth.w	r9, r9
 801986c:	2c09      	cmp	r4, #9
 801986e:	4626      	mov	r6, r4
 8019870:	bf88      	it	hi
 8019872:	f1a4 060a 	subhi.w	r6, r4, #10
 8019876:	f1bc 0f00 	cmp.w	ip, #0
 801987a:	bf08      	it	eq
 801987c:	f04f 0c02 	moveq.w	ip, #2
 8019880:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019884:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019888:	3c01      	subs	r4, #1
 801988a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801988e:	fa1f fc8c 	uxth.w	ip, ip
 8019892:	b2a4      	uxth	r4, r4
 8019894:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019898:	454c      	cmp	r4, r9
 801989a:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801989e:	d1e5      	bne.n	801986c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80198a0:	eba5 050e 	sub.w	r5, r5, lr
 80198a4:	eb0e 0408 	add.w	r4, lr, r8
 80198a8:	8705      	strh	r5, [r0, #56]	; 0x38
 80198aa:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80198ae:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80198b2:	250a      	movs	r5, #10
 80198b4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80198b6:	1a64      	subs	r4, r4, r1
 80198b8:	4439      	add	r1, r7
 80198ba:	b289      	uxth	r1, r1
 80198bc:	2909      	cmp	r1, #9
 80198be:	bf88      	it	hi
 80198c0:	390a      	subhi	r1, #10
 80198c2:	8704      	strh	r4, [r0, #56]	; 0x38
 80198c4:	86c1      	strh	r1, [r0, #54]	; 0x36
 80198c6:	b18a      	cbz	r2, 80198ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80198c8:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80198ca:	3a01      	subs	r2, #1
 80198cc:	3101      	adds	r1, #1
 80198ce:	b292      	uxth	r2, r2
 80198d0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80198d4:	8701      	strh	r1, [r0, #56]	; 0x38
 80198d6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80198d8:	b901      	cbnz	r1, 80198dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 80198da:	86c5      	strh	r5, [r0, #54]	; 0x36
 80198dc:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80198de:	3901      	subs	r1, #1
 80198e0:	b289      	uxth	r1, r1
 80198e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80198e4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80198e8:	844c      	strh	r4, [r1, #34]	; 0x22
 80198ea:	e7ec      	b.n	80198c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80198ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198f0:	f7ff bf4b 	b.w	801978a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080198f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80198f4:	b570      	push	{r4, r5, r6, lr}
 80198f6:	2500      	movs	r5, #0
 80198f8:	4295      	cmp	r5, r2
 80198fa:	d011      	beq.n	8019920 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80198fc:	8bc4      	ldrh	r4, [r0, #30]
 80198fe:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019902:	4414      	add	r4, r2
 8019904:	3c01      	subs	r4, #1
 8019906:	1b64      	subs	r4, r4, r5
 8019908:	b2a4      	uxth	r4, r4
 801990a:	2c01      	cmp	r4, #1
 801990c:	bf88      	it	hi
 801990e:	3c02      	subhi	r4, #2
 8019910:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019914:	8b64      	ldrh	r4, [r4, #26]
 8019916:	42b4      	cmp	r4, r6
 8019918:	d117      	bne.n	801994a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801991a:	3501      	adds	r5, #1
 801991c:	b2ad      	uxth	r5, r5
 801991e:	e7eb      	b.n	80198f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019920:	2400      	movs	r4, #0
 8019922:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019926:	4413      	add	r3, r2
 8019928:	b2a2      	uxth	r2, r4
 801992a:	429a      	cmp	r2, r3
 801992c:	da0f      	bge.n	801994e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801992e:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019930:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019934:	4432      	add	r2, r6
 8019936:	b292      	uxth	r2, r2
 8019938:	2a09      	cmp	r2, #9
 801993a:	bf88      	it	hi
 801993c:	3a0a      	subhi	r2, #10
 801993e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019942:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019944:	3401      	adds	r4, #1
 8019946:	42aa      	cmp	r2, r5
 8019948:	d0ee      	beq.n	8019928 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801994a:	2000      	movs	r0, #0
 801994c:	bd70      	pop	{r4, r5, r6, pc}
 801994e:	2001      	movs	r0, #1
 8019950:	e7fc      	b.n	801994c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019952 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019956:	4605      	mov	r5, r0
 8019958:	4616      	mov	r6, r2
 801995a:	1c8c      	adds	r4, r1, #2
 801995c:	8809      	ldrh	r1, [r1, #0]
 801995e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019962:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019966:	42b3      	cmp	r3, r6
 8019968:	d124      	bne.n	80199b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801996a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801996e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019972:	f001 070f 	and.w	r7, r1, #15
 8019976:	f8cd 8000 	str.w	r8, [sp]
 801997a:	464b      	mov	r3, r9
 801997c:	4652      	mov	r2, sl
 801997e:	4621      	mov	r1, r4
 8019980:	4628      	mov	r0, r5
 8019982:	f7ff ffb7 	bl	80198f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019986:	4683      	mov	fp, r0
 8019988:	b168      	cbz	r0, 80199a6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801998a:	eb0a 0109 	add.w	r1, sl, r9
 801998e:	4441      	add	r1, r8
 8019990:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019994:	463a      	mov	r2, r7
 8019996:	4649      	mov	r1, r9
 8019998:	4628      	mov	r0, r5
 801999a:	f7ff ff53 	bl	8019844 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801999e:	4658      	mov	r0, fp
 80199a0:	b003      	add	sp, #12
 80199a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199a6:	eb07 010a 	add.w	r1, r7, sl
 80199aa:	4449      	add	r1, r9
 80199ac:	4441      	add	r1, r8
 80199ae:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80199b2:	e7d2      	b.n	801995a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80199b4:	f04f 0b00 	mov.w	fp, #0
 80199b8:	e7f1      	b.n	801999e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080199ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80199ba:	b570      	push	{r4, r5, r6, lr}
 80199bc:	8810      	ldrh	r0, [r2, #0]
 80199be:	4298      	cmp	r0, r3
 80199c0:	d817      	bhi.n	80199f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80199c2:	1e48      	subs	r0, r1, #1
 80199c4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80199c8:	4298      	cmp	r0, r3
 80199ca:	d312      	bcc.n	80199f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80199cc:	2400      	movs	r4, #0
 80199ce:	428c      	cmp	r4, r1
 80199d0:	d20f      	bcs.n	80199f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80199d2:	1860      	adds	r0, r4, r1
 80199d4:	1040      	asrs	r0, r0, #1
 80199d6:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80199da:	0085      	lsls	r5, r0, #2
 80199dc:	42b3      	cmp	r3, r6
 80199de:	d902      	bls.n	80199e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80199e0:	3001      	adds	r0, #1
 80199e2:	b284      	uxth	r4, r0
 80199e4:	e7f3      	b.n	80199ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80199e6:	d201      	bcs.n	80199ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80199e8:	b281      	uxth	r1, r0
 80199ea:	e7f0      	b.n	80199ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80199ec:	442a      	add	r2, r5
 80199ee:	8850      	ldrh	r0, [r2, #2]
 80199f0:	bd70      	pop	{r4, r5, r6, pc}
 80199f2:	2000      	movs	r0, #0
 80199f4:	e7fc      	b.n	80199f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080199f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80199f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199fa:	4604      	mov	r4, r0
 80199fc:	260b      	movs	r6, #11
 80199fe:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019a00:	886f      	ldrh	r7, [r5, #2]
 8019a02:	087f      	lsrs	r7, r7, #1
 8019a04:	3e01      	subs	r6, #1
 8019a06:	d013      	beq.n	8019a30 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019a08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019a0a:	462a      	mov	r2, r5
 8019a0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a10:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019a14:	4639      	mov	r1, r7
 8019a16:	4643      	mov	r3, r8
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f7ff ffce 	bl	80199ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019a1e:	b138      	cbz	r0, 8019a30 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019a20:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019a24:	4642      	mov	r2, r8
 8019a26:	4620      	mov	r0, r4
 8019a28:	f7ff ff93 	bl	8019952 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019a2c:	2800      	cmp	r0, #0
 8019a2e:	d1e9      	bne.n	8019a04 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019a34:	b570      	push	{r4, r5, r6, lr}
 8019a36:	694a      	ldr	r2, [r1, #20]
 8019a38:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019a3a:	684b      	ldr	r3, [r1, #4]
 8019a3c:	1b54      	subs	r4, r2, r5
 8019a3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019a40:	f000 8107 	beq.w	8019c52 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019a44:	1b9b      	subs	r3, r3, r6
 8019a46:	d003      	beq.n	8019a50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019a48:	2210      	movs	r2, #16
 8019a4a:	4363      	muls	r3, r4
 8019a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019a50:	680c      	ldr	r4, [r1, #0]
 8019a52:	698a      	ldr	r2, [r1, #24]
 8019a54:	1b65      	subs	r5, r4, r5
 8019a56:	f000 80fe 	beq.w	8019c56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019a5a:	1b92      	subs	r2, r2, r6
 8019a5c:	d003      	beq.n	8019a66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019a5e:	2410      	movs	r4, #16
 8019a60:	436a      	muls	r2, r5
 8019a62:	fb92 f2f4 	sdiv	r2, r2, r4
 8019a66:	1a9b      	subs	r3, r3, r2
 8019a68:	ee07 3a90 	vmov	s15, r3
 8019a6c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019c94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a78:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019a7c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019a80:	460a      	mov	r2, r1
 8019a82:	eeb1 6a43 	vneg.f32	s12, s6
 8019a86:	4603      	mov	r3, r0
 8019a88:	f100 040c 	add.w	r4, r0, #12
 8019a8c:	edd2 7a02 	vldr	s15, [r2, #8]
 8019a90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019a94:	ece3 6a01 	vstmia	r3!, {s13}
 8019a98:	edd2 7a03 	vldr	s15, [r2, #12]
 8019a9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019aa0:	edc3 7a02 	vstr	s15, [r3, #8]
 8019aa4:	edd2 7a04 	vldr	s15, [r2, #16]
 8019aa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019aac:	429c      	cmp	r4, r3
 8019aae:	edc3 7a05 	vstr	s15, [r3, #20]
 8019ab2:	f102 0214 	add.w	r2, r2, #20
 8019ab6:	d1e9      	bne.n	8019a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019ab8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019aba:	698b      	ldr	r3, [r1, #24]
 8019abc:	edd0 4a02 	vldr	s9, [r0, #8]
 8019ac0:	1a9b      	subs	r3, r3, r2
 8019ac2:	ee07 3a90 	vmov	s15, r3
 8019ac6:	684b      	ldr	r3, [r1, #4]
 8019ac8:	edd0 3a00 	vldr	s7, [r0]
 8019acc:	1a9b      	subs	r3, r3, r2
 8019ace:	edd0 6a01 	vldr	s13, [r0, #4]
 8019ad2:	ee07 3a10 	vmov	s14, r3
 8019ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ada:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019ade:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019ae2:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019ae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019aea:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019aee:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019af2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019af6:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019afa:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019afe:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019b00:	694a      	ldr	r2, [r1, #20]
 8019b02:	ed90 5a05 	vldr	s10, [r0, #20]
 8019b06:	1b13      	subs	r3, r2, r4
 8019b08:	ee07 3a10 	vmov	s14, r3
 8019b0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b10:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019b14:	680b      	ldr	r3, [r1, #0]
 8019b16:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019b1a:	1b1b      	subs	r3, r3, r4
 8019b1c:	ee07 3a10 	vmov	s14, r3
 8019b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019b28:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019b2c:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019b30:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019b34:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019b36:	698b      	ldr	r3, [r1, #24]
 8019b38:	ed90 2a03 	vldr	s4, [r0, #12]
 8019b3c:	1a9b      	subs	r3, r3, r2
 8019b3e:	ee06 3a90 	vmov	s13, r3
 8019b42:	684b      	ldr	r3, [r1, #4]
 8019b44:	edd0 5a04 	vldr	s11, [r0, #16]
 8019b48:	1a9b      	subs	r3, r3, r2
 8019b4a:	ee07 3a10 	vmov	s14, r3
 8019b4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019b52:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019b56:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019b5a:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019b5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b62:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019b66:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019b6a:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019b6e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019b72:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019b76:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019b78:	694a      	ldr	r2, [r1, #20]
 8019b7a:	ed90 1a07 	vldr	s2, [r0, #28]
 8019b7e:	1b13      	subs	r3, r2, r4
 8019b80:	ee07 3a10 	vmov	s14, r3
 8019b84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019b8c:	680b      	ldr	r3, [r1, #0]
 8019b8e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019b92:	1b1b      	subs	r3, r3, r4
 8019b94:	ee07 3a10 	vmov	s14, r3
 8019b98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ba0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019ba4:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019ba8:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019bac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019bae:	698b      	ldr	r3, [r1, #24]
 8019bb0:	edd0 5a08 	vldr	s11, [r0, #32]
 8019bb4:	1a9b      	subs	r3, r3, r2
 8019bb6:	ee07 3a10 	vmov	s14, r3
 8019bba:	684b      	ldr	r3, [r1, #4]
 8019bbc:	edd0 2a06 	vldr	s5, [r0, #24]
 8019bc0:	1a9b      	subs	r3, r3, r2
 8019bc2:	ee01 3a90 	vmov	s3, r3
 8019bc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bca:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019bce:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019bd2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019bd6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019bda:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019bde:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019be2:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019be6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019bea:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019bee:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019bf0:	694a      	ldr	r2, [r1, #20]
 8019bf2:	1b13      	subs	r3, r2, r4
 8019bf4:	ee03 3a10 	vmov	s6, r3
 8019bf8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019bfc:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019c00:	680b      	ldr	r3, [r1, #0]
 8019c02:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019c06:	1b1b      	subs	r3, r3, r4
 8019c08:	ee03 3a10 	vmov	s6, r3
 8019c0c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019c10:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019c14:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019c18:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019c1c:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019c20:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019c24:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2c:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019c30:	dd13      	ble.n	8019c5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019c36:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019c3a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c46:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019c48:	dd15      	ble.n	8019c76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019c4e:	6403      	str	r3, [r0, #64]	; 0x40
 8019c50:	bd70      	pop	{r4, r5, r6, pc}
 8019c52:	4623      	mov	r3, r4
 8019c54:	e6fc      	b.n	8019a50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019c56:	462a      	mov	r2, r5
 8019c58:	e705      	b.n	8019a66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019c5a:	d502      	bpl.n	8019c62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019c5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019c60:	e7e9      	b.n	8019c36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019c62:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019c66:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019c6a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c72:	dade      	bge.n	8019c32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019c74:	e7f2      	b.n	8019c5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019c76:	d502      	bpl.n	8019c7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019c78:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019c7c:	e7e7      	b.n	8019c4e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019c7e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019c82:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019c86:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8e:	dadc      	bge.n	8019c4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019c90:	e7f2      	b.n	8019c78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019c92:	bf00      	nop
 8019c94:	3d800000 	.word	0x3d800000

08019c98 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c9c:	2714      	movs	r7, #20
 8019c9e:	435f      	muls	r7, r3
 8019ca0:	eb02 0c07 	add.w	ip, r2, r7
 8019ca4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019ca8:	f115 0e0f 	adds.w	lr, r5, #15
 8019cac:	f100 80a2 	bmi.w	8019df4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019cb0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019cb4:	2614      	movs	r6, #20
 8019cb6:	9c08      	ldr	r4, [sp, #32]
 8019cb8:	f8c0 e014 	str.w	lr, [r0, #20]
 8019cbc:	4366      	muls	r6, r4
 8019cbe:	eb02 0806 	add.w	r8, r2, r6
 8019cc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019cc6:	f115 040f 	adds.w	r4, r5, #15
 8019cca:	f100 809f 	bmi.w	8019e0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019cce:	1124      	asrs	r4, r4, #4
 8019cd0:	eba4 040e 	sub.w	r4, r4, lr
 8019cd4:	6184      	str	r4, [r0, #24]
 8019cd6:	2c00      	cmp	r4, #0
 8019cd8:	f000 808a 	beq.w	8019df0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019cdc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019ce0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019ce4:	5995      	ldr	r5, [r2, r6]
 8019ce6:	eba4 0809 	sub.w	r8, r4, r9
 8019cea:	59d4      	ldr	r4, [r2, r7]
 8019cec:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019cf0:	eba5 0a04 	sub.w	sl, r5, r4
 8019cf4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019cf8:	fb0e fe05 	mul.w	lr, lr, r5
 8019cfc:	fb0a ee19 	mls	lr, sl, r9, lr
 8019d00:	fb08 e404 	mla	r4, r8, r4, lr
 8019d04:	3c01      	subs	r4, #1
 8019d06:	19a4      	adds	r4, r4, r6
 8019d08:	f100 808c 	bmi.w	8019e24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019d0c:	fb94 fef6 	sdiv	lr, r4, r6
 8019d10:	fb06 441e 	mls	r4, r6, lr, r4
 8019d14:	f8c0 e000 	str.w	lr, [r0]
 8019d18:	6104      	str	r4, [r0, #16]
 8019d1a:	2d00      	cmp	r5, #0
 8019d1c:	f2c0 8095 	blt.w	8019e4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019d20:	fb95 f4f6 	sdiv	r4, r5, r6
 8019d24:	fb06 5514 	mls	r5, r6, r4, r5
 8019d28:	6044      	str	r4, [r0, #4]
 8019d2a:	6085      	str	r5, [r0, #8]
 8019d2c:	60c6      	str	r6, [r0, #12]
 8019d2e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019d32:	6945      	ldr	r5, [r0, #20]
 8019d34:	59d2      	ldr	r2, [r2, r7]
 8019d36:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019d3a:	ee07 4a10 	vmov	s14, r4
 8019d3e:	6804      	ldr	r4, [r0, #0]
 8019d40:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8019e6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019d44:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019d48:	ee07 2a90 	vmov	s15, r2
 8019d4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019d58:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019d5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019d60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d64:	edd3 6a00 	vldr	s13, [r3]
 8019d68:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019d6c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8019d70:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019d74:	edc0 6a07 	vstr	s13, [r0, #28]
 8019d78:	edd0 6a01 	vldr	s13, [r0, #4]
 8019d7c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8019d80:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8019d84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019d88:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019d8c:	ed80 6a08 	vstr	s12, [r0, #32]
 8019d90:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8019d92:	6242      	str	r2, [r0, #36]	; 0x24
 8019d94:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8019d98:	ed93 6a03 	vldr	s12, [r3, #12]
 8019d9c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019da0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019da4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019da8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019dac:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019db0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019db4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019db8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019dbc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019dbe:	6302      	str	r2, [r0, #48]	; 0x30
 8019dc0:	ed93 6a06 	vldr	s12, [r3, #24]
 8019dc4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8019dc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019dcc:	eeb0 7a46 	vmov.f32	s14, s12
 8019dd0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8019dd4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019dd8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019ddc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8019de0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8019de4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019de8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8019dec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8019dee:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019df4:	2410      	movs	r4, #16
 8019df6:	f1c5 0501 	rsb	r5, r5, #1
 8019dfa:	f015 050f 	ands.w	r5, r5, #15
 8019dfe:	fb9e fef4 	sdiv	lr, lr, r4
 8019e02:	bf18      	it	ne
 8019e04:	2501      	movne	r5, #1
 8019e06:	ebae 0e05 	sub.w	lr, lr, r5
 8019e0a:	e753      	b.n	8019cb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019e0c:	f04f 0910 	mov.w	r9, #16
 8019e10:	f1c5 0501 	rsb	r5, r5, #1
 8019e14:	f015 050f 	ands.w	r5, r5, #15
 8019e18:	fb94 f4f9 	sdiv	r4, r4, r9
 8019e1c:	bf18      	it	ne
 8019e1e:	2501      	movne	r5, #1
 8019e20:	1b64      	subs	r4, r4, r5
 8019e22:	e755      	b.n	8019cd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019e24:	4264      	negs	r4, r4
 8019e26:	fb94 fef6 	sdiv	lr, r4, r6
 8019e2a:	fb06 441e 	mls	r4, r6, lr, r4
 8019e2e:	f1ce 0800 	rsb	r8, lr, #0
 8019e32:	f8c0 8000 	str.w	r8, [r0]
 8019e36:	6104      	str	r4, [r0, #16]
 8019e38:	2c00      	cmp	r4, #0
 8019e3a:	f43f af6e 	beq.w	8019d1a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019e3e:	ea6f 0e0e 	mvn.w	lr, lr
 8019e42:	1b34      	subs	r4, r6, r4
 8019e44:	f8c0 e000 	str.w	lr, [r0]
 8019e48:	e766      	b.n	8019d18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019e4a:	426d      	negs	r5, r5
 8019e4c:	fb95 f4f6 	sdiv	r4, r5, r6
 8019e50:	fb06 5514 	mls	r5, r6, r4, r5
 8019e54:	f1c4 0e00 	rsb	lr, r4, #0
 8019e58:	f8c0 e004 	str.w	lr, [r0, #4]
 8019e5c:	6085      	str	r5, [r0, #8]
 8019e5e:	2d00      	cmp	r5, #0
 8019e60:	f43f af64 	beq.w	8019d2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019e64:	43e4      	mvns	r4, r4
 8019e66:	1b75      	subs	r5, r6, r5
 8019e68:	6044      	str	r4, [r0, #4]
 8019e6a:	e75e      	b.n	8019d2a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019e6c:	3d800000 	.word	0x3d800000

08019e70 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019e70:	4b01      	ldr	r3, [pc, #4]	; (8019e78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019e72:	6018      	str	r0, [r3, #0]
 8019e74:	4770      	bx	lr
 8019e76:	bf00      	nop
 8019e78:	2004f6c4 	.word	0x2004f6c4

08019e7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019e7c:	4b06      	ldr	r3, [pc, #24]	; (8019e98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8019e7e:	881a      	ldrh	r2, [r3, #0]
 8019e80:	4282      	cmp	r2, r0
 8019e82:	d807      	bhi.n	8019e94 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019e84:	4b05      	ldr	r3, [pc, #20]	; (8019e9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019e86:	881b      	ldrh	r3, [r3, #0]
 8019e88:	4413      	add	r3, r2
 8019e8a:	4298      	cmp	r0, r3
 8019e8c:	bfac      	ite	ge
 8019e8e:	2000      	movge	r0, #0
 8019e90:	2001      	movlt	r0, #1
 8019e92:	4770      	bx	lr
 8019e94:	2000      	movs	r0, #0
 8019e96:	4770      	bx	lr
 8019e98:	2004f6e4 	.word	0x2004f6e4
 8019e9c:	2004f6e8 	.word	0x2004f6e8

08019ea0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019ea0:	b508      	push	{r3, lr}
 8019ea2:	4601      	mov	r1, r0
 8019ea4:	f7ff ffea 	bl	8019e7c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019ea8:	b118      	cbz	r0, 8019eb2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8019eaa:	4b02      	ldr	r3, [pc, #8]	; (8019eb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019eb2:	bd08      	pop	{r3, pc}
 8019eb4:	2004f6c8 	.word	0x2004f6c8

08019eb8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eba:	4c24      	ldr	r4, [pc, #144]	; (8019f4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019ebc:	6823      	ldr	r3, [r4, #0]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d042      	beq.n	8019f48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019ec2:	4a23      	ldr	r2, [pc, #140]	; (8019f50 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019ec4:	4d23      	ldr	r5, [pc, #140]	; (8019f54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019ec6:	8811      	ldrh	r1, [r2, #0]
 8019ec8:	f8b5 c000 	ldrh.w	ip, [r5]
 8019ecc:	4822      	ldr	r0, [pc, #136]	; (8019f58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019ece:	4461      	add	r1, ip
 8019ed0:	1c4a      	adds	r2, r1, #1
 8019ed2:	f022 0201 	bic.w	r2, r2, #1
 8019ed6:	008f      	lsls	r7, r1, #2
 8019ed8:	0412      	lsls	r2, r2, #16
 8019eda:	19de      	adds	r6, r3, r7
 8019edc:	0c12      	lsrs	r2, r2, #16
 8019ede:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019ee2:	6006      	str	r6, [r0, #0]
 8019ee4:	4e1d      	ldr	r6, [pc, #116]	; (8019f5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019ee6:	19da      	adds	r2, r3, r7
 8019ee8:	6032      	str	r2, [r6, #0]
 8019eea:	220e      	movs	r2, #14
 8019eec:	fb02 f20c 	mul.w	r2, r2, ip
 8019ef0:	3203      	adds	r2, #3
 8019ef2:	f022 0203 	bic.w	r2, r2, #3
 8019ef6:	443a      	add	r2, r7
 8019ef8:	4f19      	ldr	r7, [pc, #100]	; (8019f60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019efa:	4413      	add	r3, r2
 8019efc:	603b      	str	r3, [r7, #0]
 8019efe:	2300      	movs	r3, #0
 8019f00:	4f18      	ldr	r7, [pc, #96]	; (8019f64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019f02:	469c      	mov	ip, r3
 8019f04:	803b      	strh	r3, [r7, #0]
 8019f06:	4f18      	ldr	r7, [pc, #96]	; (8019f68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019f08:	683f      	ldr	r7, [r7, #0]
 8019f0a:	1aba      	subs	r2, r7, r2
 8019f0c:	4f17      	ldr	r7, [pc, #92]	; (8019f6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019f0e:	603a      	str	r2, [r7, #0]
 8019f10:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019f14:	4a16      	ldr	r2, [pc, #88]	; (8019f70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019f16:	8013      	strh	r3, [r2, #0]
 8019f18:	428b      	cmp	r3, r1
 8019f1a:	d10d      	bne.n	8019f38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	240e      	movs	r4, #14
 8019f20:	882d      	ldrh	r5, [r5, #0]
 8019f22:	6830      	ldr	r0, [r6, #0]
 8019f24:	429d      	cmp	r5, r3
 8019f26:	d90f      	bls.n	8019f48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019f28:	fb04 0203 	mla	r2, r4, r3, r0
 8019f2c:	7b11      	ldrb	r1, [r2, #12]
 8019f2e:	3301      	adds	r3, #1
 8019f30:	f36f 1145 	bfc	r1, #5, #1
 8019f34:	7311      	strb	r1, [r2, #12]
 8019f36:	e7f5      	b.n	8019f24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019f38:	6822      	ldr	r2, [r4, #0]
 8019f3a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019f3e:	6802      	ldr	r2, [r0, #0]
 8019f40:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019f44:	3301      	adds	r3, #1
 8019f46:	e7e7      	b.n	8019f18 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f4a:	bf00      	nop
 8019f4c:	2004f6c8 	.word	0x2004f6c8
 8019f50:	2004f6e4 	.word	0x2004f6e4
 8019f54:	2004f6e8 	.word	0x2004f6e8
 8019f58:	2004f6dc 	.word	0x2004f6dc
 8019f5c:	2004f6cc 	.word	0x2004f6cc
 8019f60:	2004f6d4 	.word	0x2004f6d4
 8019f64:	2004f6e6 	.word	0x2004f6e6
 8019f68:	2004f6d0 	.word	0x2004f6d0
 8019f6c:	2004f6e0 	.word	0x2004f6e0
 8019f70:	2004f6d8 	.word	0x2004f6d8

08019f74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019f74:	4b06      	ldr	r3, [pc, #24]	; (8019f90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	b943      	cbnz	r3, 8019f8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019f7a:	b139      	cbz	r1, 8019f8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019f7c:	4b05      	ldr	r3, [pc, #20]	; (8019f94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019f7e:	801a      	strh	r2, [r3, #0]
 8019f80:	4b05      	ldr	r3, [pc, #20]	; (8019f98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019f82:	6019      	str	r1, [r3, #0]
 8019f84:	4b05      	ldr	r3, [pc, #20]	; (8019f9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019f86:	6018      	str	r0, [r3, #0]
 8019f88:	f7ff bf96 	b.w	8019eb8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019f8c:	4770      	bx	lr
 8019f8e:	bf00      	nop
 8019f90:	2004f6d4 	.word	0x2004f6d4
 8019f94:	2004f6e8 	.word	0x2004f6e8
 8019f98:	2004f6d0 	.word	0x2004f6d0
 8019f9c:	2004f6c8 	.word	0x2004f6c8

08019fa0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019fa0:	b470      	push	{r4, r5, r6}
 8019fa2:	4c07      	ldr	r4, [pc, #28]	; (8019fc0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019fa4:	4605      	mov	r5, r0
 8019fa6:	6826      	ldr	r6, [r4, #0]
 8019fa8:	4610      	mov	r0, r2
 8019faa:	9a03      	ldr	r2, [sp, #12]
 8019fac:	b936      	cbnz	r6, 8019fbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019fae:	6025      	str	r5, [r4, #0]
 8019fb0:	4c04      	ldr	r4, [pc, #16]	; (8019fc4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019fb2:	8021      	strh	r1, [r4, #0]
 8019fb4:	bc70      	pop	{r4, r5, r6}
 8019fb6:	4619      	mov	r1, r3
 8019fb8:	f7ff bfdc 	b.w	8019f74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019fbc:	bc70      	pop	{r4, r5, r6}
 8019fbe:	4770      	bx	lr
 8019fc0:	2004f6ec 	.word	0x2004f6ec
 8019fc4:	2004f6e4 	.word	0x2004f6e4

08019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019fc8:	4a12      	ldr	r2, [pc, #72]	; (801a014 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019fca:	8803      	ldrh	r3, [r0, #0]
 8019fcc:	8812      	ldrh	r2, [r2, #0]
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	d207      	bcs.n	8019fe2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019fd2:	2114      	movs	r1, #20
 8019fd4:	4a10      	ldr	r2, [pc, #64]	; (801a018 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019fd6:	6812      	ldr	r2, [r2, #0]
 8019fd8:	fb01 2303 	mla	r3, r1, r3, r2
 8019fdc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019fe0:	4770      	bx	lr
 8019fe2:	490e      	ldr	r1, [pc, #56]	; (801a01c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019fe4:	8809      	ldrh	r1, [r1, #0]
 8019fe6:	4411      	add	r1, r2
 8019fe8:	428b      	cmp	r3, r1
 8019fea:	da04      	bge.n	8019ff6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019fec:	1a9b      	subs	r3, r3, r2
 8019fee:	4a0c      	ldr	r2, [pc, #48]	; (801a020 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019ff0:	210e      	movs	r1, #14
 8019ff2:	6812      	ldr	r2, [r2, #0]
 8019ff4:	e7f0      	b.n	8019fd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019ffa:	4293      	cmp	r3, r2
 8019ffc:	d108      	bne.n	801a010 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019ffe:	4b09      	ldr	r3, [pc, #36]	; (801a024 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a000:	781b      	ldrb	r3, [r3, #0]
 801a002:	b91b      	cbnz	r3, 801a00c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a004:	4b08      	ldr	r3, [pc, #32]	; (801a028 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a006:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a00a:	4770      	bx	lr
 801a00c:	4b07      	ldr	r3, [pc, #28]	; (801a02c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a00e:	e7fa      	b.n	801a006 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a010:	2000      	movs	r0, #0
 801a012:	4770      	bx	lr
 801a014:	2004f6e4 	.word	0x2004f6e4
 801a018:	2004f6ec 	.word	0x2004f6ec
 801a01c:	2004f6e8 	.word	0x2004f6e8
 801a020:	2004f6cc 	.word	0x2004f6cc
 801a024:	2004f654 	.word	0x2004f654
 801a028:	2004f656 	.word	0x2004f656
 801a02c:	2004f658 	.word	0x2004f658

0801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a030:	4a12      	ldr	r2, [pc, #72]	; (801a07c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a032:	8803      	ldrh	r3, [r0, #0]
 801a034:	8812      	ldrh	r2, [r2, #0]
 801a036:	4293      	cmp	r3, r2
 801a038:	d207      	bcs.n	801a04a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a03a:	2114      	movs	r1, #20
 801a03c:	4a10      	ldr	r2, [pc, #64]	; (801a080 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a03e:	6812      	ldr	r2, [r2, #0]
 801a040:	fb01 2303 	mla	r3, r1, r3, r2
 801a044:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a048:	4770      	bx	lr
 801a04a:	490e      	ldr	r1, [pc, #56]	; (801a084 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a04c:	8809      	ldrh	r1, [r1, #0]
 801a04e:	4411      	add	r1, r2
 801a050:	428b      	cmp	r3, r1
 801a052:	da04      	bge.n	801a05e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a054:	1a9b      	subs	r3, r3, r2
 801a056:	4a0c      	ldr	r2, [pc, #48]	; (801a088 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a058:	210e      	movs	r1, #14
 801a05a:	6812      	ldr	r2, [r2, #0]
 801a05c:	e7f0      	b.n	801a040 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a05e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a062:	4293      	cmp	r3, r2
 801a064:	d108      	bne.n	801a078 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a066:	4b09      	ldr	r3, [pc, #36]	; (801a08c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	b91b      	cbnz	r3, 801a074 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a06c:	4b08      	ldr	r3, [pc, #32]	; (801a090 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a06e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a072:	4770      	bx	lr
 801a074:	4b07      	ldr	r3, [pc, #28]	; (801a094 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a076:	e7fa      	b.n	801a06e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a078:	2000      	movs	r0, #0
 801a07a:	4770      	bx	lr
 801a07c:	2004f6e4 	.word	0x2004f6e4
 801a080:	2004f6ec 	.word	0x2004f6ec
 801a084:	2004f6e8 	.word	0x2004f6e8
 801a088:	2004f6cc 	.word	0x2004f6cc
 801a08c:	2004f654 	.word	0x2004f654
 801a090:	2004f658 	.word	0x2004f658
 801a094:	2004f656 	.word	0x2004f656

0801a098 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a098:	b510      	push	{r4, lr}
 801a09a:	4a1f      	ldr	r2, [pc, #124]	; (801a118 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801a09c:	880b      	ldrh	r3, [r1, #0]
 801a09e:	8812      	ldrh	r2, [r2, #0]
 801a0a0:	4293      	cmp	r3, r2
 801a0a2:	d213      	bcs.n	801a0cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a0a4:	2114      	movs	r1, #20
 801a0a6:	4a1d      	ldr	r2, [pc, #116]	; (801a11c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801a0a8:	6812      	ldr	r2, [r2, #0]
 801a0aa:	fb01 2303 	mla	r3, r1, r3, r2
 801a0ae:	8a1a      	ldrh	r2, [r3, #16]
 801a0b0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a0b4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a0b8:	8a5b      	ldrh	r3, [r3, #18]
 801a0ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a0be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0c2:	8004      	strh	r4, [r0, #0]
 801a0c4:	8041      	strh	r1, [r0, #2]
 801a0c6:	8082      	strh	r2, [r0, #4]
 801a0c8:	80c3      	strh	r3, [r0, #6]
 801a0ca:	e00e      	b.n	801a0ea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a0cc:	4914      	ldr	r1, [pc, #80]	; (801a120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801a0ce:	8809      	ldrh	r1, [r1, #0]
 801a0d0:	4411      	add	r1, r2
 801a0d2:	428b      	cmp	r3, r1
 801a0d4:	da0a      	bge.n	801a0ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801a0d6:	210e      	movs	r1, #14
 801a0d8:	1a9b      	subs	r3, r3, r2
 801a0da:	4a12      	ldr	r2, [pc, #72]	; (801a124 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a0dc:	6812      	ldr	r2, [r2, #0]
 801a0de:	fb01 2303 	mla	r3, r1, r3, r2
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	6002      	str	r2, [r0, #0]
 801a0e6:	685a      	ldr	r2, [r3, #4]
 801a0e8:	6042      	str	r2, [r0, #4]
 801a0ea:	bd10      	pop	{r4, pc}
 801a0ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a0f0:	4293      	cmp	r3, r2
 801a0f2:	d10b      	bne.n	801a10c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801a0f4:	4b0c      	ldr	r3, [pc, #48]	; (801a128 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a0f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a0fa:	4b0c      	ldr	r3, [pc, #48]	; (801a12c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a0fc:	8081      	strh	r1, [r0, #4]
 801a0fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a102:	2300      	movs	r3, #0
 801a104:	80c2      	strh	r2, [r0, #6]
 801a106:	8003      	strh	r3, [r0, #0]
 801a108:	8043      	strh	r3, [r0, #2]
 801a10a:	e7ee      	b.n	801a0ea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a10c:	2300      	movs	r3, #0
 801a10e:	8003      	strh	r3, [r0, #0]
 801a110:	8043      	strh	r3, [r0, #2]
 801a112:	8083      	strh	r3, [r0, #4]
 801a114:	e7d8      	b.n	801a0c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a116:	bf00      	nop
 801a118:	2004f6e4 	.word	0x2004f6e4
 801a11c:	2004f6ec 	.word	0x2004f6ec
 801a120:	2004f6e8 	.word	0x2004f6e8
 801a124:	2004f6cc 	.word	0x2004f6cc
 801a128:	2004f650 	.word	0x2004f650
 801a12c:	2004f652 	.word	0x2004f652

0801a130 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a130:	4a17      	ldr	r2, [pc, #92]	; (801a190 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801a132:	8803      	ldrh	r3, [r0, #0]
 801a134:	8812      	ldrh	r2, [r2, #0]
 801a136:	4293      	cmp	r3, r2
 801a138:	d213      	bcs.n	801a162 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801a13a:	2114      	movs	r1, #20
 801a13c:	4a15      	ldr	r2, [pc, #84]	; (801a194 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a13e:	6812      	ldr	r2, [r2, #0]
 801a140:	fb01 2303 	mla	r3, r1, r3, r2
 801a144:	8a1a      	ldrh	r2, [r3, #16]
 801a146:	8919      	ldrh	r1, [r3, #8]
 801a148:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a14c:	428a      	cmp	r2, r1
 801a14e:	db1d      	blt.n	801a18c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a150:	8a58      	ldrh	r0, [r3, #18]
 801a152:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a156:	895b      	ldrh	r3, [r3, #10]
 801a158:	4298      	cmp	r0, r3
 801a15a:	bfac      	ite	ge
 801a15c:	2000      	movge	r0, #0
 801a15e:	2001      	movlt	r0, #1
 801a160:	4770      	bx	lr
 801a162:	490d      	ldr	r1, [pc, #52]	; (801a198 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a164:	8809      	ldrh	r1, [r1, #0]
 801a166:	4411      	add	r1, r2
 801a168:	428b      	cmp	r3, r1
 801a16a:	da0d      	bge.n	801a188 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801a16c:	210e      	movs	r1, #14
 801a16e:	1a9b      	subs	r3, r3, r2
 801a170:	4a0a      	ldr	r2, [pc, #40]	; (801a19c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a172:	6812      	ldr	r2, [r2, #0]
 801a174:	fb01 2303 	mla	r3, r1, r3, r2
 801a178:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a17c:	891a      	ldrh	r2, [r3, #8]
 801a17e:	4291      	cmp	r1, r2
 801a180:	db04      	blt.n	801a18c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a182:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a186:	e7e6      	b.n	801a156 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801a188:	2000      	movs	r0, #0
 801a18a:	4770      	bx	lr
 801a18c:	2001      	movs	r0, #1
 801a18e:	4770      	bx	lr
 801a190:	2004f6e4 	.word	0x2004f6e4
 801a194:	2004f6ec 	.word	0x2004f6ec
 801a198:	2004f6e8 	.word	0x2004f6e8
 801a19c:	2004f6cc 	.word	0x2004f6cc

0801a1a0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a1a0:	4a12      	ldr	r2, [pc, #72]	; (801a1ec <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a1a2:	8803      	ldrh	r3, [r0, #0]
 801a1a4:	8811      	ldrh	r1, [r2, #0]
 801a1a6:	428b      	cmp	r3, r1
 801a1a8:	d20b      	bcs.n	801a1c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a1aa:	4a11      	ldr	r2, [pc, #68]	; (801a1f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a1ac:	6812      	ldr	r2, [r2, #0]
 801a1ae:	b112      	cbz	r2, 801a1b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a1b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a1b4:	b9c0      	cbnz	r0, 801a1e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a1b6:	4a0f      	ldr	r2, [pc, #60]	; (801a1f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a1b8:	6811      	ldr	r1, [r2, #0]
 801a1ba:	2214      	movs	r2, #20
 801a1bc:	4353      	muls	r3, r2
 801a1be:	58c8      	ldr	r0, [r1, r3]
 801a1c0:	4770      	bx	lr
 801a1c2:	4a0d      	ldr	r2, [pc, #52]	; (801a1f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a1c4:	8812      	ldrh	r2, [r2, #0]
 801a1c6:	440a      	add	r2, r1
 801a1c8:	4293      	cmp	r3, r2
 801a1ca:	da04      	bge.n	801a1d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a1cc:	4a08      	ldr	r2, [pc, #32]	; (801a1f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a1ce:	6812      	ldr	r2, [r2, #0]
 801a1d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a1d4:	4770      	bx	lr
 801a1d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a1da:	4293      	cmp	r3, r2
 801a1dc:	d103      	bne.n	801a1e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a1de:	4b07      	ldr	r3, [pc, #28]	; (801a1fc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a1e4:	4770      	bx	lr
 801a1e6:	2000      	movs	r0, #0
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop
 801a1ec:	2004f6e4 	.word	0x2004f6e4
 801a1f0:	2004f6c8 	.word	0x2004f6c8
 801a1f4:	2004f6ec 	.word	0x2004f6ec
 801a1f8:	2004f6e8 	.word	0x2004f6e8
 801a1fc:	2004f65c 	.word	0x2004f65c

0801a200 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a200:	4b24      	ldr	r3, [pc, #144]	; (801a294 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a202:	8802      	ldrh	r2, [r0, #0]
 801a204:	8818      	ldrh	r0, [r3, #0]
 801a206:	4282      	cmp	r2, r0
 801a208:	d221      	bcs.n	801a24e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a20a:	4b23      	ldr	r3, [pc, #140]	; (801a298 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a20c:	6819      	ldr	r1, [r3, #0]
 801a20e:	2314      	movs	r3, #20
 801a210:	fb03 1302 	mla	r3, r3, r2, r1
 801a214:	6858      	ldr	r0, [r3, #4]
 801a216:	2800      	cmp	r0, #0
 801a218:	d03a      	beq.n	801a290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a21a:	4920      	ldr	r1, [pc, #128]	; (801a29c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a21c:	6809      	ldr	r1, [r1, #0]
 801a21e:	2900      	cmp	r1, #0
 801a220:	d036      	beq.n	801a290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a222:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a226:	2900      	cmp	r1, #0
 801a228:	d032      	beq.n	801a290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a22a:	891a      	ldrh	r2, [r3, #8]
 801a22c:	8958      	ldrh	r0, [r3, #10]
 801a22e:	4350      	muls	r0, r2
 801a230:	7c5a      	ldrb	r2, [r3, #17]
 801a232:	7cdb      	ldrb	r3, [r3, #19]
 801a234:	0952      	lsrs	r2, r2, #5
 801a236:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a23a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a23e:	2b0b      	cmp	r3, #11
 801a240:	bf18      	it	ne
 801a242:	0040      	lslne	r0, r0, #1
 801a244:	3003      	adds	r0, #3
 801a246:	f020 0003 	bic.w	r0, r0, #3
 801a24a:	4408      	add	r0, r1
 801a24c:	4770      	bx	lr
 801a24e:	4b14      	ldr	r3, [pc, #80]	; (801a2a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a250:	881b      	ldrh	r3, [r3, #0]
 801a252:	4403      	add	r3, r0
 801a254:	429a      	cmp	r2, r3
 801a256:	da1a      	bge.n	801a28e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a258:	210e      	movs	r1, #14
 801a25a:	4b12      	ldr	r3, [pc, #72]	; (801a2a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a25c:	1a10      	subs	r0, r2, r0
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	fb01 3000 	mla	r0, r1, r0, r3
 801a264:	7b03      	ldrb	r3, [r0, #12]
 801a266:	f003 031f 	and.w	r3, r3, #31
 801a26a:	2b0b      	cmp	r3, #11
 801a26c:	d10b      	bne.n	801a286 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a26e:	8903      	ldrh	r3, [r0, #8]
 801a270:	8940      	ldrh	r0, [r0, #10]
 801a272:	4358      	muls	r0, r3
 801a274:	4b09      	ldr	r3, [pc, #36]	; (801a29c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a276:	3003      	adds	r0, #3
 801a278:	6819      	ldr	r1, [r3, #0]
 801a27a:	f020 0303 	bic.w	r3, r0, #3
 801a27e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a282:	4418      	add	r0, r3
 801a284:	4770      	bx	lr
 801a286:	2b0d      	cmp	r3, #13
 801a288:	d101      	bne.n	801a28e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a28a:	300d      	adds	r0, #13
 801a28c:	4770      	bx	lr
 801a28e:	2000      	movs	r0, #0
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	2004f6e4 	.word	0x2004f6e4
 801a298:	2004f6ec 	.word	0x2004f6ec
 801a29c:	2004f6c8 	.word	0x2004f6c8
 801a2a0:	2004f6e8 	.word	0x2004f6e8
 801a2a4:	2004f6cc 	.word	0x2004f6cc

0801a2a8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a2a8:	b510      	push	{r4, lr}
 801a2aa:	4a17      	ldr	r2, [pc, #92]	; (801a308 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a2ac:	8803      	ldrh	r3, [r0, #0]
 801a2ae:	8812      	ldrh	r2, [r2, #0]
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	d20c      	bcs.n	801a2ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a2b4:	2114      	movs	r1, #20
 801a2b6:	4a15      	ldr	r2, [pc, #84]	; (801a30c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a2b8:	6812      	ldr	r2, [r2, #0]
 801a2ba:	fb01 2303 	mla	r3, r1, r3, r2
 801a2be:	7c58      	ldrb	r0, [r3, #17]
 801a2c0:	0942      	lsrs	r2, r0, #5
 801a2c2:	7cd8      	ldrb	r0, [r3, #19]
 801a2c4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a2c8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a2cc:	bd10      	pop	{r4, pc}
 801a2ce:	4910      	ldr	r1, [pc, #64]	; (801a310 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a2d0:	8809      	ldrh	r1, [r1, #0]
 801a2d2:	4411      	add	r1, r2
 801a2d4:	428b      	cmp	r3, r1
 801a2d6:	da09      	bge.n	801a2ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a2d8:	210e      	movs	r1, #14
 801a2da:	1a9b      	subs	r3, r3, r2
 801a2dc:	4a0d      	ldr	r2, [pc, #52]	; (801a314 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a2de:	6812      	ldr	r2, [r2, #0]
 801a2e0:	fb01 2303 	mla	r3, r1, r3, r2
 801a2e4:	7b18      	ldrb	r0, [r3, #12]
 801a2e6:	f000 001f 	and.w	r0, r0, #31
 801a2ea:	e7ef      	b.n	801a2cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a2ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2f0:	4293      	cmp	r3, r2
 801a2f2:	d106      	bne.n	801a302 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a2f4:	f7f3 fee0 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 801a2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2fc:	6803      	ldr	r3, [r0, #0]
 801a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a300:	4718      	bx	r3
 801a302:	2000      	movs	r0, #0
 801a304:	e7e2      	b.n	801a2cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a306:	bf00      	nop
 801a308:	2004f6e4 	.word	0x2004f6e4
 801a30c:	2004f6ec 	.word	0x2004f6ec
 801a310:	2004f6e8 	.word	0x2004f6e8
 801a314:	2004f6cc 	.word	0x2004f6cc

0801a318 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801a318:	2010      	movs	r0, #16
 801a31a:	4770      	bx	lr

0801a31c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801a31c:	2000      	movs	r0, #0
 801a31e:	4770      	bx	lr

0801a320 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a320:	4b02      	ldr	r3, [pc, #8]	; (801a32c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801a322:	8818      	ldrh	r0, [r3, #0]
 801a324:	0040      	lsls	r0, r0, #1
 801a326:	b280      	uxth	r0, r0
 801a328:	4770      	bx	lr
 801a32a:	bf00      	nop
 801a32c:	2004f656 	.word	0x2004f656

0801a330 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a330:	2bff      	cmp	r3, #255	; 0xff
 801a332:	d050      	beq.n	801a3d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a334:	2a0b      	cmp	r2, #11
 801a336:	d04a      	beq.n	801a3ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a338:	d80e      	bhi.n	801a358 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a33a:	2a03      	cmp	r2, #3
 801a33c:	d03f      	beq.n	801a3be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a33e:	d804      	bhi.n	801a34a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a340:	2a01      	cmp	r2, #1
 801a342:	d03e      	beq.n	801a3c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a344:	d93f      	bls.n	801a3c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a346:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a348:	4770      	bx	lr
 801a34a:	2a09      	cmp	r2, #9
 801a34c:	d03f      	beq.n	801a3ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a34e:	d83c      	bhi.n	801a3ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a350:	2a08      	cmp	r2, #8
 801a352:	d03a      	beq.n	801a3ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a354:	2000      	movs	r0, #0
 801a356:	4770      	bx	lr
 801a358:	2a2f      	cmp	r2, #47	; 0x2f
 801a35a:	d024      	beq.n	801a3a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801a35c:	d80d      	bhi.n	801a37a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801a35e:	2a2d      	cmp	r2, #45	; 0x2d
 801a360:	d014      	beq.n	801a38c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801a362:	d826      	bhi.n	801a3b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a364:	2a2c      	cmp	r2, #44	; 0x2c
 801a366:	d1f5      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a368:	684b      	ldr	r3, [r1, #4]
 801a36a:	781b      	ldrb	r3, [r3, #0]
 801a36c:	2b01      	cmp	r3, #1
 801a36e:	d018      	beq.n	801a3a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801a370:	d323      	bcc.n	801a3ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a372:	2b02      	cmp	r3, #2
 801a374:	d1ee      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a376:	6880      	ldr	r0, [r0, #8]
 801a378:	4770      	bx	lr
 801a37a:	2a31      	cmp	r2, #49	; 0x31
 801a37c:	d004      	beq.n	801a388 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801a37e:	d328      	bcc.n	801a3d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a380:	2a32      	cmp	r2, #50	; 0x32
 801a382:	d026      	beq.n	801a3d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801a384:	2a33      	cmp	r2, #51	; 0x33
 801a386:	d1e5      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a388:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801a38a:	4770      	bx	lr
 801a38c:	684b      	ldr	r3, [r1, #4]
 801a38e:	781b      	ldrb	r3, [r3, #0]
 801a390:	2b01      	cmp	r3, #1
 801a392:	d004      	beq.n	801a39e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801a394:	d30b      	bcc.n	801a3ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a396:	2b02      	cmp	r3, #2
 801a398:	d1dc      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a39a:	6900      	ldr	r0, [r0, #16]
 801a39c:	4770      	bx	lr
 801a39e:	6a00      	ldr	r0, [r0, #32]
 801a3a0:	4770      	bx	lr
 801a3a2:	6980      	ldr	r0, [r0, #24]
 801a3a4:	4770      	bx	lr
 801a3a6:	684b      	ldr	r3, [r1, #4]
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d1d2      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a3ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a3b0:	4770      	bx	lr
 801a3b2:	684b      	ldr	r3, [r1, #4]
 801a3b4:	781b      	ldrb	r3, [r3, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d1cc      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a3ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a3bc:	4770      	bx	lr
 801a3be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801a3c0:	4770      	bx	lr
 801a3c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a3c4:	4770      	bx	lr
 801a3c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a3c8:	4770      	bx	lr
 801a3ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801a3cc:	4770      	bx	lr
 801a3ce:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801a3d0:	4770      	bx	lr
 801a3d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801a3d4:	4770      	bx	lr
 801a3d6:	2a0b      	cmp	r2, #11
 801a3d8:	d049      	beq.n	801a46e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a3da:	d80e      	bhi.n	801a3fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801a3dc:	2a03      	cmp	r2, #3
 801a3de:	d040      	beq.n	801a462 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a3e0:	d804      	bhi.n	801a3ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801a3e2:	2a01      	cmp	r2, #1
 801a3e4:	d03f      	beq.n	801a466 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801a3e6:	d940      	bls.n	801a46a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801a3e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801a3ea:	4770      	bx	lr
 801a3ec:	2a09      	cmp	r2, #9
 801a3ee:	d03e      	beq.n	801a46e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801a3f0:	d801      	bhi.n	801a3f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801a3f2:	2a08      	cmp	r2, #8
 801a3f4:	d1ae      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a3f6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801a3f8:	4770      	bx	lr
 801a3fa:	2a2f      	cmp	r2, #47	; 0x2f
 801a3fc:	d024      	beq.n	801a448 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a3fe:	d80d      	bhi.n	801a41c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a400:	2a2d      	cmp	r2, #45	; 0x2d
 801a402:	d014      	beq.n	801a42e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801a404:	d826      	bhi.n	801a454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801a406:	2a2c      	cmp	r2, #44	; 0x2c
 801a408:	d1a4      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a40a:	684b      	ldr	r3, [r1, #4]
 801a40c:	781b      	ldrb	r3, [r3, #0]
 801a40e:	2b01      	cmp	r3, #1
 801a410:	d018      	beq.n	801a444 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801a412:	d324      	bcc.n	801a45e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a414:	2b02      	cmp	r3, #2
 801a416:	d19d      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a418:	68c0      	ldr	r0, [r0, #12]
 801a41a:	4770      	bx	lr
 801a41c:	2a31      	cmp	r2, #49	; 0x31
 801a41e:	d004      	beq.n	801a42a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801a420:	d327      	bcc.n	801a472 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a422:	2a32      	cmp	r2, #50	; 0x32
 801a424:	d025      	beq.n	801a472 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801a426:	2a33      	cmp	r2, #51	; 0x33
 801a428:	d194      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a42a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801a42c:	4770      	bx	lr
 801a42e:	684b      	ldr	r3, [r1, #4]
 801a430:	781b      	ldrb	r3, [r3, #0]
 801a432:	2b01      	cmp	r3, #1
 801a434:	d004      	beq.n	801a440 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801a436:	d30b      	bcc.n	801a450 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801a438:	2b02      	cmp	r3, #2
 801a43a:	d18b      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a43c:	6940      	ldr	r0, [r0, #20]
 801a43e:	4770      	bx	lr
 801a440:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a442:	4770      	bx	lr
 801a444:	69c0      	ldr	r0, [r0, #28]
 801a446:	4770      	bx	lr
 801a448:	684b      	ldr	r3, [r1, #4]
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d181      	bne.n	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a450:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a452:	4770      	bx	lr
 801a454:	684b      	ldr	r3, [r1, #4]
 801a456:	781b      	ldrb	r3, [r3, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	f47f af7b 	bne.w	801a354 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a45e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a460:	4770      	bx	lr
 801a462:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a464:	4770      	bx	lr
 801a466:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a468:	4770      	bx	lr
 801a46a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a46c:	4770      	bx	lr
 801a46e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801a470:	4770      	bx	lr
 801a472:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801a474:	4770      	bx	lr

0801a476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a47a:	b087      	sub	sp, #28
 801a47c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a47e:	9101      	str	r1, [sp, #4]
 801a480:	9205      	str	r2, [sp, #20]
 801a482:	6841      	ldr	r1, [r0, #4]
 801a484:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a488:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801a48c:	9202      	str	r2, [sp, #8]
 801a48e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801a492:	fb01 2404 	mla	r4, r1, r4, r2
 801a496:	6802      	ldr	r2, [r0, #0]
 801a498:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a49c:	f8de 2000 	ldr.w	r2, [lr]
 801a4a0:	9203      	str	r2, [sp, #12]
 801a4a2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801a4a6:	3204      	adds	r2, #4
 801a4a8:	9204      	str	r2, [sp, #16]
 801a4aa:	9a02      	ldr	r2, [sp, #8]
 801a4ac:	43d6      	mvns	r6, r2
 801a4ae:	b2f6      	uxtb	r6, r6
 801a4b0:	9a01      	ldr	r2, [sp, #4]
 801a4b2:	2a00      	cmp	r2, #0
 801a4b4:	dc03      	bgt.n	801a4be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a4b6:	9a05      	ldr	r2, [sp, #20]
 801a4b8:	2a00      	cmp	r2, #0
 801a4ba:	f340 8129 	ble.w	801a710 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a4be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a4c0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a4c4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a4c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a4ca:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a4ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	dd0e      	ble.n	801a4f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a4d6:	1408      	asrs	r0, r1, #16
 801a4d8:	d405      	bmi.n	801a4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a4da:	4560      	cmp	r0, ip
 801a4dc:	da03      	bge.n	801a4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a4de:	1410      	asrs	r0, r2, #16
 801a4e0:	d401      	bmi.n	801a4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a4e2:	42b8      	cmp	r0, r7
 801a4e4:	db07      	blt.n	801a4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a4e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a4e8:	3b01      	subs	r3, #1
 801a4ea:	4401      	add	r1, r0
 801a4ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a4ee:	3402      	adds	r4, #2
 801a4f0:	4402      	add	r2, r0
 801a4f2:	e7ee      	b.n	801a4d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a4f4:	d071      	beq.n	801a5da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a4f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a4f8:	1e58      	subs	r0, r3, #1
 801a4fa:	fb05 1500 	mla	r5, r5, r0, r1
 801a4fe:	142d      	asrs	r5, r5, #16
 801a500:	d45f      	bmi.n	801a5c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a502:	4565      	cmp	r5, ip
 801a504:	da5d      	bge.n	801a5c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a506:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a508:	fb05 2000 	mla	r0, r5, r0, r2
 801a50c:	1400      	asrs	r0, r0, #16
 801a50e:	d458      	bmi.n	801a5c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a510:	42b8      	cmp	r0, r7
 801a512:	da56      	bge.n	801a5c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a514:	4699      	mov	r9, r3
 801a516:	46a2      	mov	sl, r4
 801a518:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801a51c:	f1b9 0f00 	cmp.w	r9, #0
 801a520:	dd57      	ble.n	801a5d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a522:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a526:	9803      	ldr	r0, [sp, #12]
 801a528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a52c:	fb07 000c 	mla	r0, r7, ip, r0
 801a530:	140d      	asrs	r5, r1, #16
 801a532:	5d40      	ldrb	r0, [r0, r5]
 801a534:	9d04      	ldr	r5, [sp, #16]
 801a536:	f109 39ff 	add.w	r9, r9, #4294967295
 801a53a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a53e:	f8ba 5000 	ldrh.w	r5, [sl]
 801a542:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a546:	122f      	asrs	r7, r5, #8
 801a548:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a54c:	fb17 f706 	smulbb	r7, r7, r6
 801a550:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a554:	00ed      	lsls	r5, r5, #3
 801a556:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a55a:	b2ed      	uxtb	r5, r5
 801a55c:	fb18 f806 	smulbb	r8, r8, r6
 801a560:	fb15 f506 	smulbb	r5, r5, r6
 801a564:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a568:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a56c:	10c7      	asrs	r7, r0, #3
 801a56e:	00c0      	lsls	r0, r0, #3
 801a570:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a574:	b2c0      	uxtb	r0, r0
 801a576:	fb07 870b 	mla	r7, r7, fp, r8
 801a57a:	fb00 500b 	mla	r0, r0, fp, r5
 801a57e:	fa1f fc8c 	uxth.w	ip, ip
 801a582:	b280      	uxth	r0, r0
 801a584:	b2bf      	uxth	r7, r7
 801a586:	f10c 0501 	add.w	r5, ip, #1
 801a58a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a58e:	f107 0801 	add.w	r8, r7, #1
 801a592:	1c45      	adds	r5, r0, #1
 801a594:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a598:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a59c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a59e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a5a2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a5a6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a5aa:	ea45 0c0c 	orr.w	ip, r5, ip
 801a5ae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a5b2:	4401      	add	r1, r0
 801a5b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a5b6:	ea4c 0c08 	orr.w	ip, ip, r8
 801a5ba:	f82a cb02 	strh.w	ip, [sl], #2
 801a5be:	4402      	add	r2, r0
 801a5c0:	e7ac      	b.n	801a51c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a5c2:	f04f 0800 	mov.w	r8, #0
 801a5c6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801a5ca:	eb03 0008 	add.w	r0, r3, r8
 801a5ce:	2800      	cmp	r0, #0
 801a5d0:	dc41      	bgt.n	801a656 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801a5d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a5da:	9b01      	ldr	r3, [sp, #4]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f340 8097 	ble.w	801a710 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801a5e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a5ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a5f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a5f6:	eef0 6a62 	vmov.f32	s13, s5
 801a5fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a5fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a602:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a60a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a60e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801a612:	eef0 6a43 	vmov.f32	s13, s6
 801a616:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a61a:	ee12 2a90 	vmov	r2, s5
 801a61e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a622:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a624:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a628:	fb92 f3f3 	sdiv	r3, r2, r3
 801a62c:	ee13 2a10 	vmov	r2, s6
 801a630:	9313      	str	r3, [sp, #76]	; 0x4c
 801a632:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a634:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801a638:	fb92 f3f3 	sdiv	r3, r2, r3
 801a63c:	9314      	str	r3, [sp, #80]	; 0x50
 801a63e:	9b01      	ldr	r3, [sp, #4]
 801a640:	9a05      	ldr	r2, [sp, #20]
 801a642:	3b01      	subs	r3, #1
 801a644:	9301      	str	r3, [sp, #4]
 801a646:	eeb0 3a67 	vmov.f32	s6, s15
 801a64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a64c:	eef0 2a47 	vmov.f32	s5, s14
 801a650:	bf08      	it	eq
 801a652:	4613      	moveq	r3, r2
 801a654:	e72c      	b.n	801a4b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a656:	140f      	asrs	r7, r1, #16
 801a658:	d453      	bmi.n	801a702 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a65a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a65e:	42bd      	cmp	r5, r7
 801a660:	dd4f      	ble.n	801a702 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a662:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a666:	d44c      	bmi.n	801a702 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a668:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a66c:	4560      	cmp	r0, ip
 801a66e:	dd48      	ble.n	801a702 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801a670:	9803      	ldr	r0, [sp, #12]
 801a672:	b22d      	sxth	r5, r5
 801a674:	fb0c 0505 	mla	r5, ip, r5, r0
 801a678:	5de8      	ldrb	r0, [r5, r7]
 801a67a:	9d04      	ldr	r5, [sp, #16]
 801a67c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a680:	f06f 0501 	mvn.w	r5, #1
 801a684:	fb05 fb08 	mul.w	fp, r5, r8
 801a688:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a68c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a690:	122f      	asrs	r7, r5, #8
 801a692:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a696:	fb17 f706 	smulbb	r7, r7, r6
 801a69a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a69e:	00ed      	lsls	r5, r5, #3
 801a6a0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a6a4:	b2ed      	uxtb	r5, r5
 801a6a6:	fb19 f906 	smulbb	r9, r9, r6
 801a6aa:	fb15 f506 	smulbb	r5, r5, r6
 801a6ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a6b2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a6b6:	10c7      	asrs	r7, r0, #3
 801a6b8:	00c0      	lsls	r0, r0, #3
 801a6ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a6be:	b2c0      	uxtb	r0, r0
 801a6c0:	fb07 970a 	mla	r7, r7, sl, r9
 801a6c4:	fb00 500a 	mla	r0, r0, sl, r5
 801a6c8:	fa1f fc8c 	uxth.w	ip, ip
 801a6cc:	b2bf      	uxth	r7, r7
 801a6ce:	b280      	uxth	r0, r0
 801a6d0:	f10c 0501 	add.w	r5, ip, #1
 801a6d4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a6d8:	f107 0901 	add.w	r9, r7, #1
 801a6dc:	1c45      	adds	r5, r0, #1
 801a6de:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a6e2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a6e6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a6ea:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a6ee:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a6f2:	ea45 0c0c 	orr.w	ip, r5, ip
 801a6f6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a6fa:	ea4c 0c09 	orr.w	ip, ip, r9
 801a6fe:	f824 c00b 	strh.w	ip, [r4, fp]
 801a702:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a704:	f108 38ff 	add.w	r8, r8, #4294967295
 801a708:	4401      	add	r1, r0
 801a70a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a70c:	4402      	add	r2, r0
 801a70e:	e75c      	b.n	801a5ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a710:	b007      	add	sp, #28
 801a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a716 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a71a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71e:	b085      	sub	sp, #20
 801a720:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a722:	4693      	mov	fp, r2
 801a724:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a728:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a72c:	6870      	ldr	r0, [r6, #4]
 801a72e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a730:	fb00 2404 	mla	r4, r0, r4, r2
 801a734:	6832      	ldr	r2, [r6, #0]
 801a736:	9100      	str	r1, [sp, #0]
 801a738:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a73c:	682a      	ldr	r2, [r5, #0]
 801a73e:	9201      	str	r2, [sp, #4]
 801a740:	686a      	ldr	r2, [r5, #4]
 801a742:	3204      	adds	r2, #4
 801a744:	9202      	str	r2, [sp, #8]
 801a746:	9a00      	ldr	r2, [sp, #0]
 801a748:	2a00      	cmp	r2, #0
 801a74a:	dc03      	bgt.n	801a754 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a74c:	f1bb 0f00 	cmp.w	fp, #0
 801a750:	f340 80a0 	ble.w	801a894 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a756:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a75a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a75e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a760:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a764:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a768:	2b00      	cmp	r3, #0
 801a76a:	dd0c      	ble.n	801a786 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a76c:	1406      	asrs	r6, r0, #16
 801a76e:	d405      	bmi.n	801a77c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a770:	454e      	cmp	r6, r9
 801a772:	da03      	bge.n	801a77c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a774:	1416      	asrs	r6, r2, #16
 801a776:	d401      	bmi.n	801a77c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a778:	4546      	cmp	r6, r8
 801a77a:	db05      	blt.n	801a788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a77c:	4470      	add	r0, lr
 801a77e:	4462      	add	r2, ip
 801a780:	3b01      	subs	r3, #1
 801a782:	3402      	adds	r4, #2
 801a784:	e7f0      	b.n	801a768 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a786:	d00f      	beq.n	801a7a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a788:	1e5e      	subs	r6, r3, #1
 801a78a:	fb0e 0706 	mla	r7, lr, r6, r0
 801a78e:	143f      	asrs	r7, r7, #16
 801a790:	d541      	bpl.n	801a816 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801a792:	4698      	mov	r8, r3
 801a794:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a798:	9603      	str	r6, [sp, #12]
 801a79a:	f1b8 0f00 	cmp.w	r8, #0
 801a79e:	dc59      	bgt.n	801a854 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a7a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a7a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a7a8:	9b00      	ldr	r3, [sp, #0]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	dd72      	ble.n	801a894 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801a7ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a7b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a7b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a7ba:	eeb0 6a62 	vmov.f32	s12, s5
 801a7be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a7c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a7d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a7da:	eeb0 6a43 	vmov.f32	s12, s6
 801a7de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a7e2:	ee12 2a90 	vmov	r2, s5
 801a7e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a7ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7f0:	fb92 fef3 	sdiv	lr, r2, r3
 801a7f4:	ee13 2a10 	vmov	r2, s6
 801a7f8:	fb92 fcf3 	sdiv	ip, r2, r3
 801a7fc:	9b00      	ldr	r3, [sp, #0]
 801a7fe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a802:	3b01      	subs	r3, #1
 801a804:	9300      	str	r3, [sp, #0]
 801a806:	eeb0 3a67 	vmov.f32	s6, s15
 801a80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a80c:	eef0 2a47 	vmov.f32	s5, s14
 801a810:	bf08      	it	eq
 801a812:	465b      	moveq	r3, fp
 801a814:	e797      	b.n	801a746 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a816:	454f      	cmp	r7, r9
 801a818:	dabb      	bge.n	801a792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a81a:	fb0c 2606 	mla	r6, ip, r6, r2
 801a81e:	1436      	asrs	r6, r6, #16
 801a820:	d4b7      	bmi.n	801a792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a822:	4546      	cmp	r6, r8
 801a824:	dab5      	bge.n	801a792 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a826:	461e      	mov	r6, r3
 801a828:	46a0      	mov	r8, r4
 801a82a:	2e00      	cmp	r6, #0
 801a82c:	ddb8      	ble.n	801a7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a82e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a832:	9901      	ldr	r1, [sp, #4]
 801a834:	1417      	asrs	r7, r2, #16
 801a836:	fb0a 1707 	mla	r7, sl, r7, r1
 801a83a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a83e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801a842:	9902      	ldr	r1, [sp, #8]
 801a844:	4470      	add	r0, lr
 801a846:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a84a:	4462      	add	r2, ip
 801a84c:	f828 7b02 	strh.w	r7, [r8], #2
 801a850:	3e01      	subs	r6, #1
 801a852:	e7ea      	b.n	801a82a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a854:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a858:	d417      	bmi.n	801a88a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a85a:	68ae      	ldr	r6, [r5, #8]
 801a85c:	454e      	cmp	r6, r9
 801a85e:	dd14      	ble.n	801a88a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a860:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a864:	d411      	bmi.n	801a88a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a866:	68ef      	ldr	r7, [r5, #12]
 801a868:	4557      	cmp	r7, sl
 801a86a:	dd0e      	ble.n	801a88a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801a86c:	f06f 0101 	mvn.w	r1, #1
 801a870:	9f01      	ldr	r7, [sp, #4]
 801a872:	b236      	sxth	r6, r6
 801a874:	fb0a 7606 	mla	r6, sl, r6, r7
 801a878:	9f02      	ldr	r7, [sp, #8]
 801a87a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801a87e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a882:	fb01 f608 	mul.w	r6, r1, r8
 801a886:	9903      	ldr	r1, [sp, #12]
 801a888:	538f      	strh	r7, [r1, r6]
 801a88a:	4470      	add	r0, lr
 801a88c:	4462      	add	r2, ip
 801a88e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a892:	e782      	b.n	801a79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a894:	b005      	add	sp, #20
 801a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a89a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a89e:	b087      	sub	sp, #28
 801a8a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a8a2:	9102      	str	r1, [sp, #8]
 801a8a4:	9205      	str	r2, [sp, #20]
 801a8a6:	6861      	ldr	r1, [r4, #4]
 801a8a8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a8ac:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a8b0:	9203      	str	r2, [sp, #12]
 801a8b2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801a8b6:	fb01 2000 	mla	r0, r1, r0, r2
 801a8ba:	6822      	ldr	r2, [r4, #0]
 801a8bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a8c0:	9200      	str	r2, [sp, #0]
 801a8c2:	f8dc 2000 	ldr.w	r2, [ip]
 801a8c6:	9204      	str	r2, [sp, #16]
 801a8c8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a8cc:	3204      	adds	r2, #4
 801a8ce:	9201      	str	r2, [sp, #4]
 801a8d0:	9a03      	ldr	r2, [sp, #12]
 801a8d2:	43d5      	mvns	r5, r2
 801a8d4:	b2ed      	uxtb	r5, r5
 801a8d6:	9a02      	ldr	r2, [sp, #8]
 801a8d8:	2a00      	cmp	r2, #0
 801a8da:	dc03      	bgt.n	801a8e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a8dc:	9a05      	ldr	r2, [sp, #20]
 801a8de:	2a00      	cmp	r2, #0
 801a8e0:	f340 812c 	ble.w	801ab3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801a8e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8e6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a8ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a8ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a8f0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a8f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	dd10      	ble.n	801a91e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a8fc:	140c      	asrs	r4, r1, #16
 801a8fe:	d405      	bmi.n	801a90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a900:	4574      	cmp	r4, lr
 801a902:	da03      	bge.n	801a90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a904:	1414      	asrs	r4, r2, #16
 801a906:	d401      	bmi.n	801a90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a908:	42bc      	cmp	r4, r7
 801a90a:	db09      	blt.n	801a920 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a90c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a90e:	9800      	ldr	r0, [sp, #0]
 801a910:	4421      	add	r1, r4
 801a912:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a914:	3002      	adds	r0, #2
 801a916:	4422      	add	r2, r4
 801a918:	3b01      	subs	r3, #1
 801a91a:	9000      	str	r0, [sp, #0]
 801a91c:	e7ec      	b.n	801a8f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a91e:	d071      	beq.n	801aa04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a920:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a922:	1e5c      	subs	r4, r3, #1
 801a924:	fb06 1604 	mla	r6, r6, r4, r1
 801a928:	1436      	asrs	r6, r6, #16
 801a92a:	d45d      	bmi.n	801a9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a92c:	4576      	cmp	r6, lr
 801a92e:	da5b      	bge.n	801a9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a930:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a932:	fb06 2404 	mla	r4, r6, r4, r2
 801a936:	1424      	asrs	r4, r4, #16
 801a938:	d456      	bmi.n	801a9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a93a:	42bc      	cmp	r4, r7
 801a93c:	da54      	bge.n	801a9e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a93e:	4698      	mov	r8, r3
 801a940:	f8dd 9000 	ldr.w	r9, [sp]
 801a944:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801a948:	f1b8 0f00 	cmp.w	r8, #0
 801a94c:	dd54      	ble.n	801a9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a94e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801a952:	9804      	ldr	r0, [sp, #16]
 801a954:	1414      	asrs	r4, r2, #16
 801a956:	fb07 0404 	mla	r4, r7, r4, r0
 801a95a:	140e      	asrs	r6, r1, #16
 801a95c:	f814 e006 	ldrb.w	lr, [r4, r6]
 801a960:	9801      	ldr	r0, [sp, #4]
 801a962:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a966:	eb00 0b0e 	add.w	fp, r0, lr
 801a96a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801a96e:	f8b9 4000 	ldrh.w	r4, [r9]
 801a972:	fb16 f60a 	smulbb	r6, r6, sl
 801a976:	1227      	asrs	r7, r4, #8
 801a978:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a97c:	fb07 6705 	mla	r7, r7, r5, r6
 801a980:	f89b b001 	ldrb.w	fp, [fp, #1]
 801a984:	10e6      	asrs	r6, r4, #3
 801a986:	00e4      	lsls	r4, r4, #3
 801a988:	b2e4      	uxtb	r4, r4
 801a98a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a98e:	fb14 f405 	smulbb	r4, r4, r5
 801a992:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801a996:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a99a:	fb06 b605 	mla	r6, r6, r5, fp
 801a99e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801a9a2:	b2bf      	uxth	r7, r7
 801a9a4:	b2b6      	uxth	r6, r6
 801a9a6:	fa1f fe8e 	uxth.w	lr, lr
 801a9aa:	1c7c      	adds	r4, r7, #1
 801a9ac:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801a9b0:	f106 0b01 	add.w	fp, r6, #1
 801a9b4:	f10e 0401 	add.w	r4, lr, #1
 801a9b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a9ba:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801a9be:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801a9c2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a9c6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801a9ca:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a9ce:	4327      	orrs	r7, r4
 801a9d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a9d4:	4401      	add	r1, r0
 801a9d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a9d8:	ea47 070b 	orr.w	r7, r7, fp
 801a9dc:	f829 7b02 	strh.w	r7, [r9], #2
 801a9e0:	4402      	add	r2, r0
 801a9e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801a9e6:	e7af      	b.n	801a948 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801a9e8:	f04f 0e00 	mov.w	lr, #0
 801a9ec:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801a9f0:	eb03 040e 	add.w	r4, r3, lr
 801a9f4:	2c00      	cmp	r4, #0
 801a9f6:	dc43      	bgt.n	801aa80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a9f8:	9a00      	ldr	r2, [sp, #0]
 801a9fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801aa02:	9300      	str	r3, [sp, #0]
 801aa04:	9b02      	ldr	r3, [sp, #8]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f340 8098 	ble.w	801ab3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801aa0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801aa10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aa1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa20:	eef0 6a62 	vmov.f32	s13, s5
 801aa24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aa34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa38:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801aa3c:	eef0 6a43 	vmov.f32	s13, s6
 801aa40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa44:	ee12 2a90 	vmov	r2, s5
 801aa48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aa52:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa56:	ee13 2a10 	vmov	r2, s6
 801aa5a:	9313      	str	r3, [sp, #76]	; 0x4c
 801aa5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa5e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801aa62:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa66:	9314      	str	r3, [sp, #80]	; 0x50
 801aa68:	9b02      	ldr	r3, [sp, #8]
 801aa6a:	9a05      	ldr	r2, [sp, #20]
 801aa6c:	3b01      	subs	r3, #1
 801aa6e:	9302      	str	r3, [sp, #8]
 801aa70:	eeb0 3a67 	vmov.f32	s6, s15
 801aa74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa76:	eef0 2a47 	vmov.f32	s5, s14
 801aa7a:	bf08      	it	eq
 801aa7c:	4613      	moveq	r3, r2
 801aa7e:	e72a      	b.n	801a8d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aa80:	140f      	asrs	r7, r1, #16
 801aa82:	d454      	bmi.n	801ab2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801aa84:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801aa88:	42be      	cmp	r6, r7
 801aa8a:	dd50      	ble.n	801ab2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801aa8c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801aa90:	d44d      	bmi.n	801ab2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801aa92:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801aa96:	4544      	cmp	r4, r8
 801aa98:	dd49      	ble.n	801ab2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801aa9a:	f06f 0001 	mvn.w	r0, #1
 801aa9e:	9c04      	ldr	r4, [sp, #16]
 801aaa0:	b236      	sxth	r6, r6
 801aaa2:	fb08 4606 	mla	r6, r8, r6, r4
 801aaa6:	f816 8007 	ldrb.w	r8, [r6, r7]
 801aaaa:	9c01      	ldr	r4, [sp, #4]
 801aaac:	fb00 fa0e 	mul.w	sl, r0, lr
 801aab0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801aab4:	eb04 0b08 	add.w	fp, r4, r8
 801aab8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801aabc:	9800      	ldr	r0, [sp, #0]
 801aabe:	fb16 f609 	smulbb	r6, r6, r9
 801aac2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801aac6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801aaca:	1227      	asrs	r7, r4, #8
 801aacc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aad0:	fb07 6705 	mla	r7, r7, r5, r6
 801aad4:	10e6      	asrs	r6, r4, #3
 801aad6:	00e4      	lsls	r4, r4, #3
 801aad8:	b2e4      	uxtb	r4, r4
 801aada:	fb1b fb09 	smulbb	fp, fp, r9
 801aade:	9801      	ldr	r0, [sp, #4]
 801aae0:	fb14 f405 	smulbb	r4, r4, r5
 801aae4:	f810 8008 	ldrb.w	r8, [r0, r8]
 801aae8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aaec:	fb06 b605 	mla	r6, r6, r5, fp
 801aaf0:	fb08 4809 	mla	r8, r8, r9, r4
 801aaf4:	b2bf      	uxth	r7, r7
 801aaf6:	b2b6      	uxth	r6, r6
 801aaf8:	fa1f f888 	uxth.w	r8, r8
 801aafc:	1c7c      	adds	r4, r7, #1
 801aafe:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ab02:	f106 0b01 	add.w	fp, r6, #1
 801ab06:	f108 0401 	add.w	r4, r8, #1
 801ab0a:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ab0e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ab12:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ab16:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ab1a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ab1e:	4327      	orrs	r7, r4
 801ab20:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ab24:	9800      	ldr	r0, [sp, #0]
 801ab26:	ea47 070b 	orr.w	r7, r7, fp
 801ab2a:	f820 700a 	strh.w	r7, [r0, sl]
 801ab2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ab30:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ab34:	4401      	add	r1, r0
 801ab36:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ab38:	4402      	add	r2, r0
 801ab3a:	e759      	b.n	801a9f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ab3c:	b007      	add	sp, #28
 801ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ab44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab4c:	b085      	sub	sp, #20
 801ab4e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ab50:	9203      	str	r2, [sp, #12]
 801ab52:	6870      	ldr	r0, [r6, #4]
 801ab54:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ab58:	fb00 2404 	mla	r4, r0, r4, r2
 801ab5c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ab5e:	6832      	ldr	r2, [r6, #0]
 801ab60:	686f      	ldr	r7, [r5, #4]
 801ab62:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ab66:	682a      	ldr	r2, [r5, #0]
 801ab68:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801ab6c:	9101      	str	r1, [sp, #4]
 801ab6e:	9202      	str	r2, [sp, #8]
 801ab70:	3704      	adds	r7, #4
 801ab72:	9a01      	ldr	r2, [sp, #4]
 801ab74:	2a00      	cmp	r2, #0
 801ab76:	dc03      	bgt.n	801ab80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ab78:	9a03      	ldr	r2, [sp, #12]
 801ab7a:	2a00      	cmp	r2, #0
 801ab7c:	f340 80cc 	ble.w	801ad18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ab80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab82:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ab86:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ab8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab8c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ab90:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	dd0d      	ble.n	801abb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab98:	1406      	asrs	r6, r0, #16
 801ab9a:	d405      	bmi.n	801aba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ab9c:	454e      	cmp	r6, r9
 801ab9e:	da03      	bge.n	801aba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aba0:	1416      	asrs	r6, r2, #16
 801aba2:	d401      	bmi.n	801aba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aba4:	4546      	cmp	r6, r8
 801aba6:	db06      	blt.n	801abb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aba8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801abaa:	4460      	add	r0, ip
 801abac:	4432      	add	r2, r6
 801abae:	3b01      	subs	r3, #1
 801abb0:	3402      	adds	r4, #2
 801abb2:	e7ef      	b.n	801ab94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801abb4:	d00f      	beq.n	801abd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801abb6:	1e5e      	subs	r6, r3, #1
 801abb8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801abbc:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801abc0:	d543      	bpl.n	801ac4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801abc2:	4698      	mov	r8, r3
 801abc4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801abc8:	f1b8 0f00 	cmp.w	r8, #0
 801abcc:	dc71      	bgt.n	801acb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801abce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abd2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801abd6:	9b01      	ldr	r3, [sp, #4]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	f340 809d 	ble.w	801ad18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801abde:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abe2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abe6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801abea:	eeb0 6a62 	vmov.f32	s12, s5
 801abee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801abf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801abf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801abfe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac02:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ac06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac0a:	eeb0 6a43 	vmov.f32	s12, s6
 801ac0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac12:	ee12 2a90 	vmov	r2, s5
 801ac16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac20:	fb92 fcf3 	sdiv	ip, r2, r3
 801ac24:	ee13 2a10 	vmov	r2, s6
 801ac28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac2c:	9312      	str	r3, [sp, #72]	; 0x48
 801ac2e:	9b01      	ldr	r3, [sp, #4]
 801ac30:	9a03      	ldr	r2, [sp, #12]
 801ac32:	3b01      	subs	r3, #1
 801ac34:	9301      	str	r3, [sp, #4]
 801ac36:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ac3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac3c:	eeb0 3a67 	vmov.f32	s6, s15
 801ac40:	bf08      	it	eq
 801ac42:	4613      	moveq	r3, r2
 801ac44:	eef0 2a47 	vmov.f32	s5, s14
 801ac48:	e793      	b.n	801ab72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ac4a:	45ce      	cmp	lr, r9
 801ac4c:	dab9      	bge.n	801abc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ac4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ac50:	fb01 2606 	mla	r6, r1, r6, r2
 801ac54:	1436      	asrs	r6, r6, #16
 801ac56:	d4b4      	bmi.n	801abc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ac58:	4546      	cmp	r6, r8
 801ac5a:	dab2      	bge.n	801abc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ac5c:	4698      	mov	r8, r3
 801ac5e:	46a2      	mov	sl, r4
 801ac60:	f1b8 0f00 	cmp.w	r8, #0
 801ac64:	ddb3      	ble.n	801abce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ac66:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ac6a:	9902      	ldr	r1, [sp, #8]
 801ac6c:	1416      	asrs	r6, r2, #16
 801ac6e:	fb09 1606 	mla	r6, r9, r6, r1
 801ac72:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801ac76:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ac7a:	4929      	ldr	r1, [pc, #164]	; (801ad20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ac7c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ac80:	eb07 0b0e 	add.w	fp, r7, lr
 801ac84:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ac88:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ac8c:	00f6      	lsls	r6, r6, #3
 801ac8e:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ac92:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ac96:	ea49 0606 	orr.w	r6, r9, r6
 801ac9a:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ac9e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aca0:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801aca4:	f82a 6b02 	strh.w	r6, [sl], #2
 801aca8:	4460      	add	r0, ip
 801acaa:	440a      	add	r2, r1
 801acac:	f108 38ff 	add.w	r8, r8, #4294967295
 801acb0:	e7d6      	b.n	801ac60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801acb2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801acb6:	d429      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801acb8:	68ae      	ldr	r6, [r5, #8]
 801acba:	454e      	cmp	r6, r9
 801acbc:	dd26      	ble.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801acbe:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801acc2:	d423      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801acc4:	68e9      	ldr	r1, [r5, #12]
 801acc6:	4559      	cmp	r1, fp
 801acc8:	dd20      	ble.n	801ad0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801acca:	9902      	ldr	r1, [sp, #8]
 801accc:	fa0f fe86 	sxth.w	lr, r6
 801acd0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801acd4:	f06f 0101 	mvn.w	r1, #1
 801acd8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801acdc:	fb01 f908 	mul.w	r9, r1, r8
 801ace0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ace4:	eb07 060e 	add.w	r6, r7, lr
 801ace8:	f896 b002 	ldrb.w	fp, [r6, #2]
 801acec:	7876      	ldrb	r6, [r6, #1]
 801acee:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801acf2:	00f6      	lsls	r6, r6, #3
 801acf4:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801acf8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801acfc:	ea4b 0606 	orr.w	r6, fp, r6
 801ad00:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ad04:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ad08:	f82a 6009 	strh.w	r6, [sl, r9]
 801ad0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ad0e:	4460      	add	r0, ip
 801ad10:	440a      	add	r2, r1
 801ad12:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad16:	e757      	b.n	801abc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ad18:	b005      	add	sp, #20
 801ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad1e:	bf00      	nop
 801ad20:	fffff800 	.word	0xfffff800

0801ad24 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad2c:	b087      	sub	sp, #28
 801ad2e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ad30:	468b      	mov	fp, r1
 801ad32:	9204      	str	r2, [sp, #16]
 801ad34:	6841      	ldr	r1, [r0, #4]
 801ad36:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ad3a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ad3e:	9205      	str	r2, [sp, #20]
 801ad40:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ad44:	fb01 2404 	mla	r4, r1, r4, r2
 801ad48:	6802      	ldr	r2, [r0, #0]
 801ad4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ad4e:	f8dc 2000 	ldr.w	r2, [ip]
 801ad52:	9201      	str	r2, [sp, #4]
 801ad54:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ad58:	3204      	adds	r2, #4
 801ad5a:	9202      	str	r2, [sp, #8]
 801ad5c:	f1bb 0f00 	cmp.w	fp, #0
 801ad60:	dc03      	bgt.n	801ad6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ad62:	9a04      	ldr	r2, [sp, #16]
 801ad64:	2a00      	cmp	r2, #0
 801ad66:	f340 8138 	ble.w	801afda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ad6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ad6c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ad70:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ad74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad76:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ad7a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	dd0e      	ble.n	801ada0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ad82:	1402      	asrs	r2, r0, #16
 801ad84:	d405      	bmi.n	801ad92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad86:	42ba      	cmp	r2, r7
 801ad88:	da03      	bge.n	801ad92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad8a:	140a      	asrs	r2, r1, #16
 801ad8c:	d401      	bmi.n	801ad92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ad8e:	42b2      	cmp	r2, r6
 801ad90:	db07      	blt.n	801ada2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ad92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ad94:	3b01      	subs	r3, #1
 801ad96:	4410      	add	r0, r2
 801ad98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ad9a:	3402      	adds	r4, #2
 801ad9c:	4411      	add	r1, r2
 801ad9e:	e7ee      	b.n	801ad7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ada0:	d019      	beq.n	801add6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ada2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ada4:	1e5a      	subs	r2, r3, #1
 801ada6:	fb05 0502 	mla	r5, r5, r2, r0
 801adaa:	142d      	asrs	r5, r5, #16
 801adac:	d409      	bmi.n	801adc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801adae:	42bd      	cmp	r5, r7
 801adb0:	da07      	bge.n	801adc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801adb2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801adb4:	fb05 1202 	mla	r2, r5, r2, r1
 801adb8:	1412      	asrs	r2, r2, #16
 801adba:	d402      	bmi.n	801adc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801adbc:	42b2      	cmp	r2, r6
 801adbe:	f2c0 80ac 	blt.w	801af1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801adc2:	f04f 0e00 	mov.w	lr, #0
 801adc6:	eb03 020e 	add.w	r2, r3, lr
 801adca:	2a00      	cmp	r2, #0
 801adcc:	dc3e      	bgt.n	801ae4c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801adce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801add2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801add6:	f1bb 0f00 	cmp.w	fp, #0
 801adda:	f340 80fe 	ble.w	801afda <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801adde:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ade2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ade6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801adea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801adee:	eeb0 6a62 	vmov.f32	s12, s5
 801adf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801adf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae06:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ae0a:	eeb0 6a43 	vmov.f32	s12, s6
 801ae0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae12:	ee12 2a90 	vmov	r2, s5
 801ae16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae24:	ee13 2a10 	vmov	r2, s6
 801ae28:	9313      	str	r3, [sp, #76]	; 0x4c
 801ae2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae2c:	f1bb 0b01 	subs.w	fp, fp, #1
 801ae30:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae34:	9a04      	ldr	r2, [sp, #16]
 801ae36:	9314      	str	r3, [sp, #80]	; 0x50
 801ae38:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ae3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae3e:	eeb0 3a67 	vmov.f32	s6, s15
 801ae42:	bf08      	it	eq
 801ae44:	4613      	moveq	r3, r2
 801ae46:	eef0 2a47 	vmov.f32	s5, s14
 801ae4a:	e787      	b.n	801ad5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ae4c:	1406      	asrs	r6, r0, #16
 801ae4e:	d45d      	bmi.n	801af0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ae50:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ae54:	42b5      	cmp	r5, r6
 801ae56:	dd59      	ble.n	801af0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ae58:	140f      	asrs	r7, r1, #16
 801ae5a:	d457      	bmi.n	801af0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ae5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ae60:	42ba      	cmp	r2, r7
 801ae62:	dd53      	ble.n	801af0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ae64:	9a01      	ldr	r2, [sp, #4]
 801ae66:	b22d      	sxth	r5, r5
 801ae68:	fb07 2505 	mla	r5, r7, r5, r2
 801ae6c:	5daa      	ldrb	r2, [r5, r6]
 801ae6e:	9d02      	ldr	r5, [sp, #8]
 801ae70:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ae74:	0e2e      	lsrs	r6, r5, #24
 801ae76:	d049      	beq.n	801af0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ae78:	f06f 0201 	mvn.w	r2, #1
 801ae7c:	fb02 f20e 	mul.w	r2, r2, lr
 801ae80:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ae84:	9203      	str	r2, [sp, #12]
 801ae86:	9a05      	ldr	r2, [sp, #20]
 801ae88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ae8c:	4356      	muls	r6, r2
 801ae8e:	1c72      	adds	r2, r6, #1
 801ae90:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ae94:	1212      	asrs	r2, r2, #8
 801ae96:	fa1f f982 	uxth.w	r9, r2
 801ae9a:	43d2      	mvns	r2, r2
 801ae9c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801aea0:	fb16 f609 	smulbb	r6, r6, r9
 801aea4:	b2ed      	uxtb	r5, r5
 801aea6:	ea4f 2728 	mov.w	r7, r8, asr #8
 801aeaa:	fb15 f509 	smulbb	r5, r5, r9
 801aeae:	b2d2      	uxtb	r2, r2
 801aeb0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801aeb4:	fb07 6702 	mla	r7, r7, r2, r6
 801aeb8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801aebc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801aec0:	fb1a fa09 	smulbb	sl, sl, r9
 801aec4:	fa5f f888 	uxtb.w	r8, r8
 801aec8:	fb08 5502 	mla	r5, r8, r2, r5
 801aecc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aed0:	fb06 a602 	mla	r6, r6, r2, sl
 801aed4:	b2bf      	uxth	r7, r7
 801aed6:	b2ad      	uxth	r5, r5
 801aed8:	1c7a      	adds	r2, r7, #1
 801aeda:	f105 0a01 	add.w	sl, r5, #1
 801aede:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801aee2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801aee6:	b2b6      	uxth	r6, r6
 801aee8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801aeec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801aef0:	ea4a 0707 	orr.w	r7, sl, r7
 801aef4:	f106 0a01 	add.w	sl, r6, #1
 801aef8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801aefc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801af00:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801af04:	9a03      	ldr	r2, [sp, #12]
 801af06:	ea47 070a 	orr.w	r7, r7, sl
 801af0a:	52a7      	strh	r7, [r4, r2]
 801af0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af0e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801af12:	4410      	add	r0, r2
 801af14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af16:	4411      	add	r1, r2
 801af18:	e755      	b.n	801adc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801af1a:	f04f 0800 	mov.w	r8, #0
 801af1e:	eba3 0208 	sub.w	r2, r3, r8
 801af22:	2a00      	cmp	r2, #0
 801af24:	f77f af53 	ble.w	801adce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801af28:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801af2c:	9f01      	ldr	r7, [sp, #4]
 801af2e:	140a      	asrs	r2, r1, #16
 801af30:	fb06 7202 	mla	r2, r6, r2, r7
 801af34:	1405      	asrs	r5, r0, #16
 801af36:	5d52      	ldrb	r2, [r2, r5]
 801af38:	9d02      	ldr	r5, [sp, #8]
 801af3a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801af3e:	0e2e      	lsrs	r6, r5, #24
 801af40:	d044      	beq.n	801afcc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801af42:	9a05      	ldr	r2, [sp, #20]
 801af44:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801af48:	4356      	muls	r6, r2
 801af4a:	1c72      	adds	r2, r6, #1
 801af4c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801af50:	1212      	asrs	r2, r2, #8
 801af52:	fa1f f982 	uxth.w	r9, r2
 801af56:	43d2      	mvns	r2, r2
 801af58:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801af5c:	fb16 f609 	smulbb	r6, r6, r9
 801af60:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801af64:	b2ed      	uxtb	r5, r5
 801af66:	ea4f 272e 	mov.w	r7, lr, asr #8
 801af6a:	fb15 f509 	smulbb	r5, r5, r9
 801af6e:	b2d2      	uxtb	r2, r2
 801af70:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801af74:	fb07 6702 	mla	r7, r7, r2, r6
 801af78:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801af7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801af80:	fb1a fa09 	smulbb	sl, sl, r9
 801af84:	fa5f fe8e 	uxtb.w	lr, lr
 801af88:	fb0e 5502 	mla	r5, lr, r2, r5
 801af8c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801af90:	fb06 a602 	mla	r6, r6, r2, sl
 801af94:	b2bf      	uxth	r7, r7
 801af96:	b2ad      	uxth	r5, r5
 801af98:	1c7a      	adds	r2, r7, #1
 801af9a:	f105 0a01 	add.w	sl, r5, #1
 801af9e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801afa2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801afa6:	b2b6      	uxth	r6, r6
 801afa8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801afac:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801afb0:	ea4a 0707 	orr.w	r7, sl, r7
 801afb4:	f106 0a01 	add.w	sl, r6, #1
 801afb8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801afbc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801afc0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801afc4:	ea47 070a 	orr.w	r7, r7, sl
 801afc8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801afcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801afce:	f108 0801 	add.w	r8, r8, #1
 801afd2:	4410      	add	r0, r2
 801afd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801afd6:	4411      	add	r1, r2
 801afd8:	e7a1      	b.n	801af1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801afda:	b007      	add	sp, #28
 801afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afe8:	b085      	sub	sp, #20
 801afea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801afec:	468b      	mov	fp, r1
 801afee:	6841      	ldr	r1, [r0, #4]
 801aff0:	9203      	str	r2, [sp, #12]
 801aff2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801aff6:	fb01 2404 	mla	r4, r1, r4, r2
 801affa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801affe:	6802      	ldr	r2, [r0, #0]
 801b000:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b004:	f8de 2000 	ldr.w	r2, [lr]
 801b008:	9200      	str	r2, [sp, #0]
 801b00a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b00e:	3204      	adds	r2, #4
 801b010:	9201      	str	r2, [sp, #4]
 801b012:	f1bb 0f00 	cmp.w	fp, #0
 801b016:	dc03      	bgt.n	801b020 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b018:	9a03      	ldr	r2, [sp, #12]
 801b01a:	2a00      	cmp	r2, #0
 801b01c:	f340 8153 	ble.w	801b2c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b022:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b026:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b02a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b02c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b030:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b034:	2b00      	cmp	r3, #0
 801b036:	dd0e      	ble.n	801b056 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b038:	1408      	asrs	r0, r1, #16
 801b03a:	d405      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b03c:	42b8      	cmp	r0, r7
 801b03e:	da03      	bge.n	801b048 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b040:	1410      	asrs	r0, r2, #16
 801b042:	d401      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b044:	42b0      	cmp	r0, r6
 801b046:	db07      	blt.n	801b058 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b048:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b04a:	3b01      	subs	r3, #1
 801b04c:	4401      	add	r1, r0
 801b04e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b050:	3402      	adds	r4, #2
 801b052:	4402      	add	r2, r0
 801b054:	e7ee      	b.n	801b034 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b056:	d017      	beq.n	801b088 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b058:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b05a:	1e58      	subs	r0, r3, #1
 801b05c:	fb05 1500 	mla	r5, r5, r0, r1
 801b060:	142d      	asrs	r5, r5, #16
 801b062:	d409      	bmi.n	801b078 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b064:	42bd      	cmp	r5, r7
 801b066:	da07      	bge.n	801b078 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b068:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b06a:	fb05 2000 	mla	r0, r5, r0, r2
 801b06e:	1400      	asrs	r0, r0, #16
 801b070:	d402      	bmi.n	801b078 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b072:	42b0      	cmp	r0, r6
 801b074:	f2c0 80bc 	blt.w	801b1f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b078:	2600      	movs	r6, #0
 801b07a:	1998      	adds	r0, r3, r6
 801b07c:	2800      	cmp	r0, #0
 801b07e:	dc3e      	bgt.n	801b0fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b084:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b088:	f1bb 0f00 	cmp.w	fp, #0
 801b08c:	f340 811b 	ble.w	801b2c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b090:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b094:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b098:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b09c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0a0:	eeb0 6a62 	vmov.f32	s12, s5
 801b0a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b0bc:	eeb0 6a43 	vmov.f32	s12, s6
 801b0c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0c4:	ee12 2a90 	vmov	r2, s5
 801b0c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0d6:	ee13 2a10 	vmov	r2, s6
 801b0da:	9311      	str	r3, [sp, #68]	; 0x44
 801b0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0de:	f1bb 0b01 	subs.w	fp, fp, #1
 801b0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0e6:	9a03      	ldr	r2, [sp, #12]
 801b0e8:	9312      	str	r3, [sp, #72]	; 0x48
 801b0ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0f0:	eeb0 3a67 	vmov.f32	s6, s15
 801b0f4:	bf08      	it	eq
 801b0f6:	4613      	moveq	r3, r2
 801b0f8:	eef0 2a47 	vmov.f32	s5, s14
 801b0fc:	e789      	b.n	801b012 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b0fe:	140f      	asrs	r7, r1, #16
 801b100:	d426      	bmi.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b102:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b106:	42bd      	cmp	r5, r7
 801b108:	dd22      	ble.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b10a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b10e:	d41f      	bmi.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b110:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b114:	4560      	cmp	r0, ip
 801b116:	dd1b      	ble.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b118:	9800      	ldr	r0, [sp, #0]
 801b11a:	b22d      	sxth	r5, r5
 801b11c:	fb0c 0505 	mla	r5, ip, r5, r0
 801b120:	5de8      	ldrb	r0, [r5, r7]
 801b122:	9d01      	ldr	r5, [sp, #4]
 801b124:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b128:	0e07      	lsrs	r7, r0, #24
 801b12a:	2fff      	cmp	r7, #255	; 0xff
 801b12c:	d116      	bne.n	801b15c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b12e:	f06f 0501 	mvn.w	r5, #1
 801b132:	fb05 f706 	mul.w	r7, r5, r6
 801b136:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b13a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b13e:	0945      	lsrs	r5, r0, #5
 801b140:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b144:	ea4c 0505 	orr.w	r5, ip, r5
 801b148:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b14c:	4305      	orrs	r5, r0
 801b14e:	53e5      	strh	r5, [r4, r7]
 801b150:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b152:	3e01      	subs	r6, #1
 801b154:	4401      	add	r1, r0
 801b156:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b158:	4402      	add	r2, r0
 801b15a:	e78e      	b.n	801b07a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b15c:	b2fd      	uxtb	r5, r7
 801b15e:	2f00      	cmp	r7, #0
 801b160:	d0f6      	beq.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b162:	f06f 0701 	mvn.w	r7, #1
 801b166:	fa1f f985 	uxth.w	r9, r5
 801b16a:	43ed      	mvns	r5, r5
 801b16c:	4377      	muls	r7, r6
 801b16e:	f834 8007 	ldrh.w	r8, [r4, r7]
 801b172:	9702      	str	r7, [sp, #8]
 801b174:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b178:	fb17 f709 	smulbb	r7, r7, r9
 801b17c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b180:	b2c0      	uxtb	r0, r0
 801b182:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b186:	fb10 f009 	smulbb	r0, r0, r9
 801b18a:	b2ed      	uxtb	r5, r5
 801b18c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b190:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b194:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801b198:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b19c:	fb1a fa09 	smulbb	sl, sl, r9
 801b1a0:	fa5f f888 	uxtb.w	r8, r8
 801b1a4:	fb08 0005 	mla	r0, r8, r5, r0
 801b1a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b1ac:	fb07 a705 	mla	r7, r7, r5, sl
 801b1b0:	b280      	uxth	r0, r0
 801b1b2:	fa1f fc8c 	uxth.w	ip, ip
 801b1b6:	f100 0a01 	add.w	sl, r0, #1
 801b1ba:	f10c 0501 	add.w	r5, ip, #1
 801b1be:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b1c2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b1c6:	b2bf      	uxth	r7, r7
 801b1c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b1cc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b1d0:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b1d4:	f107 0a01 	add.w	sl, r7, #1
 801b1d8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b1dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b1e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b1e4:	9802      	ldr	r0, [sp, #8]
 801b1e6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b1ea:	f824 c000 	strh.w	ip, [r4, r0]
 801b1ee:	e7af      	b.n	801b150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b1f0:	f04f 0800 	mov.w	r8, #0
 801b1f4:	eba3 0008 	sub.w	r0, r3, r8
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	f77f af41 	ble.w	801b080 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b1fe:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b202:	9f00      	ldr	r7, [sp, #0]
 801b204:	1410      	asrs	r0, r2, #16
 801b206:	fb06 7000 	mla	r0, r6, r0, r7
 801b20a:	140d      	asrs	r5, r1, #16
 801b20c:	5d40      	ldrb	r0, [r0, r5]
 801b20e:	9d01      	ldr	r5, [sp, #4]
 801b210:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b214:	0e2e      	lsrs	r6, r5, #24
 801b216:	2eff      	cmp	r6, #255	; 0xff
 801b218:	d112      	bne.n	801b240 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801b21a:	482c      	ldr	r0, [pc, #176]	; (801b2cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b21c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b220:	0968      	lsrs	r0, r5, #5
 801b222:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b226:	4330      	orrs	r0, r6
 801b228:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b22c:	4328      	orrs	r0, r5
 801b22e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801b232:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b234:	f108 0801 	add.w	r8, r8, #1
 801b238:	4401      	add	r1, r0
 801b23a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b23c:	4402      	add	r2, r0
 801b23e:	e7d9      	b.n	801b1f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b240:	b2f0      	uxtb	r0, r6
 801b242:	2e00      	cmp	r6, #0
 801b244:	d0f5      	beq.n	801b232 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b246:	fa1f f980 	uxth.w	r9, r0
 801b24a:	43c0      	mvns	r0, r0
 801b24c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b250:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801b254:	fb16 f609 	smulbb	r6, r6, r9
 801b258:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b25c:	b2ed      	uxtb	r5, r5
 801b25e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b262:	fb15 f509 	smulbb	r5, r5, r9
 801b266:	b2c0      	uxtb	r0, r0
 801b268:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b26c:	fb07 6700 	mla	r7, r7, r0, r6
 801b270:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b274:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b278:	fb1a fa09 	smulbb	sl, sl, r9
 801b27c:	fa5f fc8c 	uxtb.w	ip, ip
 801b280:	fb0c 5500 	mla	r5, ip, r0, r5
 801b284:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b288:	fb06 a600 	mla	r6, r6, r0, sl
 801b28c:	b2bf      	uxth	r7, r7
 801b28e:	b2ad      	uxth	r5, r5
 801b290:	1c78      	adds	r0, r7, #1
 801b292:	f105 0a01 	add.w	sl, r5, #1
 801b296:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b29a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b29e:	b2b6      	uxth	r6, r6
 801b2a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b2a4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b2a8:	ea4a 0707 	orr.w	r7, sl, r7
 801b2ac:	f106 0a01 	add.w	sl, r6, #1
 801b2b0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b2b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b2b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b2bc:	ea47 070a 	orr.w	r7, r7, sl
 801b2c0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b2c4:	e7b5      	b.n	801b232 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b2c6:	b005      	add	sp, #20
 801b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2cc:	fffff800 	.word	0xfffff800

0801b2d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d8:	b087      	sub	sp, #28
 801b2da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b2dc:	468b      	mov	fp, r1
 801b2de:	9204      	str	r2, [sp, #16]
 801b2e0:	6861      	ldr	r1, [r4, #4]
 801b2e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b2e6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b2ea:	9205      	str	r2, [sp, #20]
 801b2ec:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b2f0:	fb01 2000 	mla	r0, r1, r0, r2
 801b2f4:	6822      	ldr	r2, [r4, #0]
 801b2f6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b2fa:	f8de 2000 	ldr.w	r2, [lr]
 801b2fe:	9201      	str	r2, [sp, #4]
 801b300:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b304:	9202      	str	r2, [sp, #8]
 801b306:	f1bb 0f00 	cmp.w	fp, #0
 801b30a:	dc03      	bgt.n	801b314 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b30c:	9a04      	ldr	r2, [sp, #16]
 801b30e:	2a00      	cmp	r2, #0
 801b310:	f340 8142 	ble.w	801b598 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b316:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b31a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b31e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b320:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b324:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b328:	2b00      	cmp	r3, #0
 801b32a:	dd0e      	ble.n	801b34a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b32c:	140c      	asrs	r4, r1, #16
 801b32e:	d405      	bmi.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b330:	42bc      	cmp	r4, r7
 801b332:	da03      	bge.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b334:	1414      	asrs	r4, r2, #16
 801b336:	d401      	bmi.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b338:	42b4      	cmp	r4, r6
 801b33a:	db07      	blt.n	801b34c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b33c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b33e:	3b01      	subs	r3, #1
 801b340:	4421      	add	r1, r4
 801b342:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b344:	3002      	adds	r0, #2
 801b346:	4422      	add	r2, r4
 801b348:	e7ee      	b.n	801b328 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b34a:	d019      	beq.n	801b380 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b34c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b34e:	1e5c      	subs	r4, r3, #1
 801b350:	fb05 1504 	mla	r5, r5, r4, r1
 801b354:	142d      	asrs	r5, r5, #16
 801b356:	d409      	bmi.n	801b36c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b358:	42bd      	cmp	r5, r7
 801b35a:	da07      	bge.n	801b36c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b35c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b35e:	fb05 2404 	mla	r4, r5, r4, r2
 801b362:	1424      	asrs	r4, r4, #16
 801b364:	d402      	bmi.n	801b36c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b366:	42b4      	cmp	r4, r6
 801b368:	f2c0 80b1 	blt.w	801b4ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b36c:	f04f 0800 	mov.w	r8, #0
 801b370:	eb03 0408 	add.w	r4, r3, r8
 801b374:	2c00      	cmp	r4, #0
 801b376:	dc3e      	bgt.n	801b3f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b37c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b380:	f1bb 0f00 	cmp.w	fp, #0
 801b384:	f340 8108 	ble.w	801b598 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b388:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b38c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b390:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b394:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b398:	eeb0 6a62 	vmov.f32	s12, s5
 801b39c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3b0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b3b4:	eeb0 6a43 	vmov.f32	s12, s6
 801b3b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b3bc:	ee12 2a90 	vmov	r2, s5
 801b3c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3ce:	ee13 2a10 	vmov	r2, s6
 801b3d2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3d6:	f1bb 0b01 	subs.w	fp, fp, #1
 801b3da:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3de:	9a04      	ldr	r2, [sp, #16]
 801b3e0:	9314      	str	r3, [sp, #80]	; 0x50
 801b3e2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3e8:	eeb0 3a67 	vmov.f32	s6, s15
 801b3ec:	bf08      	it	eq
 801b3ee:	4613      	moveq	r3, r2
 801b3f0:	eef0 2a47 	vmov.f32	s5, s14
 801b3f4:	e787      	b.n	801b306 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b3f6:	140e      	asrs	r6, r1, #16
 801b3f8:	d462      	bmi.n	801b4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b3fa:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b3fe:	42b5      	cmp	r5, r6
 801b400:	dd5e      	ble.n	801b4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b402:	1417      	asrs	r7, r2, #16
 801b404:	d45c      	bmi.n	801b4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b406:	f8de 400c 	ldr.w	r4, [lr, #12]
 801b40a:	42bc      	cmp	r4, r7
 801b40c:	dd58      	ble.n	801b4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b40e:	b22d      	sxth	r5, r5
 801b410:	fb07 6505 	mla	r5, r7, r5, r6
 801b414:	9c02      	ldr	r4, [sp, #8]
 801b416:	5d66      	ldrb	r6, [r4, r5]
 801b418:	2e00      	cmp	r6, #0
 801b41a:	d051      	beq.n	801b4c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b41c:	9c01      	ldr	r4, [sp, #4]
 801b41e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801b422:	f06f 0401 	mvn.w	r4, #1
 801b426:	fb04 f408 	mul.w	r4, r4, r8
 801b42a:	5b05      	ldrh	r5, [r0, r4]
 801b42c:	9403      	str	r4, [sp, #12]
 801b42e:	9c05      	ldr	r4, [sp, #20]
 801b430:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b434:	4366      	muls	r6, r4
 801b436:	1c74      	adds	r4, r6, #1
 801b438:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b43c:	1224      	asrs	r4, r4, #8
 801b43e:	b2a7      	uxth	r7, r4
 801b440:	43e4      	mvns	r4, r4
 801b442:	122e      	asrs	r6, r5, #8
 801b444:	b2e4      	uxtb	r4, r4
 801b446:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b44a:	fb16 f604 	smulbb	r6, r6, r4
 801b44e:	00ed      	lsls	r5, r5, #3
 801b450:	b2ed      	uxtb	r5, r5
 801b452:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801b456:	fb15 f504 	smulbb	r5, r5, r4
 801b45a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b45e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b462:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b466:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801b46a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b46e:	fb1a fa04 	smulbb	sl, sl, r4
 801b472:	fa5f f989 	uxtb.w	r9, r9
 801b476:	fb09 5507 	mla	r5, r9, r7, r5
 801b47a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b47e:	fb06 a607 	mla	r6, r6, r7, sl
 801b482:	fa1f fc8c 	uxth.w	ip, ip
 801b486:	b2ad      	uxth	r5, r5
 801b488:	f10c 0401 	add.w	r4, ip, #1
 801b48c:	f105 0a01 	add.w	sl, r5, #1
 801b490:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b494:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b498:	b2b6      	uxth	r6, r6
 801b49a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b49e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b4a2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b4a6:	f106 0a01 	add.w	sl, r6, #1
 801b4aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b4ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b4b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b4b6:	9c03      	ldr	r4, [sp, #12]
 801b4b8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b4bc:	f820 c004 	strh.w	ip, [r0, r4]
 801b4c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b4c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b4c6:	4421      	add	r1, r4
 801b4c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b4ca:	4422      	add	r2, r4
 801b4cc:	e750      	b.n	801b370 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b4ce:	f04f 0900 	mov.w	r9, #0
 801b4d2:	eba3 0409 	sub.w	r4, r3, r9
 801b4d6:	2c00      	cmp	r4, #0
 801b4d8:	f77f af4e 	ble.w	801b378 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b4dc:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b4e0:	140d      	asrs	r5, r1, #16
 801b4e2:	1414      	asrs	r4, r2, #16
 801b4e4:	fb06 5404 	mla	r4, r6, r4, r5
 801b4e8:	9d02      	ldr	r5, [sp, #8]
 801b4ea:	5d2e      	ldrb	r6, [r5, r4]
 801b4ec:	2e00      	cmp	r6, #0
 801b4ee:	d04c      	beq.n	801b58a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b4f0:	9d01      	ldr	r5, [sp, #4]
 801b4f2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801b4f6:	9c05      	ldr	r4, [sp, #20]
 801b4f8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b4fc:	4366      	muls	r6, r4
 801b4fe:	1c74      	adds	r4, r6, #1
 801b500:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801b504:	1224      	asrs	r4, r4, #8
 801b506:	b2a7      	uxth	r7, r4
 801b508:	43e4      	mvns	r4, r4
 801b50a:	122e      	asrs	r6, r5, #8
 801b50c:	b2e4      	uxtb	r4, r4
 801b50e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b512:	fb16 f604 	smulbb	r6, r6, r4
 801b516:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b51a:	00ed      	lsls	r5, r5, #3
 801b51c:	b2ed      	uxtb	r5, r5
 801b51e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b522:	fb15 f504 	smulbb	r5, r5, r4
 801b526:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b52a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b52e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b532:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b536:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b53a:	fb1a fa04 	smulbb	sl, sl, r4
 801b53e:	fa5f f888 	uxtb.w	r8, r8
 801b542:	fb08 5507 	mla	r5, r8, r7, r5
 801b546:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b54a:	fb06 a607 	mla	r6, r6, r7, sl
 801b54e:	fa1f fc8c 	uxth.w	ip, ip
 801b552:	b2ad      	uxth	r5, r5
 801b554:	f10c 0401 	add.w	r4, ip, #1
 801b558:	f105 0a01 	add.w	sl, r5, #1
 801b55c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b560:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b564:	b2b6      	uxth	r6, r6
 801b566:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b56a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b56e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b572:	f106 0a01 	add.w	sl, r6, #1
 801b576:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b57a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b57e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b582:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b586:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b58a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b58c:	f109 0901 	add.w	r9, r9, #1
 801b590:	4421      	add	r1, r4
 801b592:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b594:	4422      	add	r2, r4
 801b596:	e79c      	b.n	801b4d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801b598:	b007      	add	sp, #28
 801b59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b59e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b59e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a6:	b085      	sub	sp, #20
 801b5a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b5aa:	468b      	mov	fp, r1
 801b5ac:	6861      	ldr	r1, [r4, #4]
 801b5ae:	9203      	str	r2, [sp, #12]
 801b5b0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801b5b4:	fb01 2000 	mla	r0, r1, r0, r2
 801b5b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b5bc:	6822      	ldr	r2, [r4, #0]
 801b5be:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b5c2:	f8d8 2000 	ldr.w	r2, [r8]
 801b5c6:	9200      	str	r2, [sp, #0]
 801b5c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b5cc:	9201      	str	r2, [sp, #4]
 801b5ce:	f1bb 0f00 	cmp.w	fp, #0
 801b5d2:	dc03      	bgt.n	801b5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b5d4:	9a03      	ldr	r2, [sp, #12]
 801b5d6:	2a00      	cmp	r2, #0
 801b5d8:	f340 8146 	ble.w	801b868 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5de:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801b5e2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b5e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b5e8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801b5ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	dd0e      	ble.n	801b612 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b5f4:	140c      	asrs	r4, r1, #16
 801b5f6:	d405      	bmi.n	801b604 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b5f8:	42bc      	cmp	r4, r7
 801b5fa:	da03      	bge.n	801b604 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b5fc:	1414      	asrs	r4, r2, #16
 801b5fe:	d401      	bmi.n	801b604 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b600:	42b4      	cmp	r4, r6
 801b602:	db07      	blt.n	801b614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b604:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b606:	3b01      	subs	r3, #1
 801b608:	4421      	add	r1, r4
 801b60a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b60c:	3002      	adds	r0, #2
 801b60e:	4422      	add	r2, r4
 801b610:	e7ee      	b.n	801b5f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b612:	d017      	beq.n	801b644 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b614:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b616:	1e5c      	subs	r4, r3, #1
 801b618:	fb05 1504 	mla	r5, r5, r4, r1
 801b61c:	142d      	asrs	r5, r5, #16
 801b61e:	d409      	bmi.n	801b634 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b620:	42bd      	cmp	r5, r7
 801b622:	da07      	bge.n	801b634 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b624:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b626:	fb05 2404 	mla	r4, r5, r4, r2
 801b62a:	1424      	asrs	r4, r4, #16
 801b62c:	d402      	bmi.n	801b634 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b62e:	42b4      	cmp	r4, r6
 801b630:	f2c0 80b3 	blt.w	801b79a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801b634:	2600      	movs	r6, #0
 801b636:	199c      	adds	r4, r3, r6
 801b638:	2c00      	cmp	r4, #0
 801b63a:	dc3e      	bgt.n	801b6ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b63c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b640:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b644:	f1bb 0f00 	cmp.w	fp, #0
 801b648:	f340 810e 	ble.w	801b868 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801b64c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b650:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b654:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b65c:	eeb0 6a62 	vmov.f32	s12, s5
 801b660:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b664:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b668:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b66c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b670:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b674:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b678:	eeb0 6a43 	vmov.f32	s12, s6
 801b67c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b680:	ee12 2a90 	vmov	r2, s5
 801b684:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b68a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b68e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b692:	ee13 2a10 	vmov	r2, s6
 801b696:	9311      	str	r3, [sp, #68]	; 0x44
 801b698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b69a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b69e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6a2:	9a03      	ldr	r2, [sp, #12]
 801b6a4:	9312      	str	r3, [sp, #72]	; 0x48
 801b6a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6ac:	eeb0 3a67 	vmov.f32	s6, s15
 801b6b0:	bf08      	it	eq
 801b6b2:	4613      	moveq	r3, r2
 801b6b4:	eef0 2a47 	vmov.f32	s5, s14
 801b6b8:	e789      	b.n	801b5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b6ba:	140f      	asrs	r7, r1, #16
 801b6bc:	d418      	bmi.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b6be:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b6c2:	42bd      	cmp	r5, r7
 801b6c4:	dd14      	ble.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b6c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b6ca:	d411      	bmi.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b6cc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b6d0:	4564      	cmp	r4, ip
 801b6d2:	dd0d      	ble.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b6d4:	b22d      	sxth	r5, r5
 801b6d6:	fb0c 7505 	mla	r5, ip, r5, r7
 801b6da:	9c01      	ldr	r4, [sp, #4]
 801b6dc:	5d64      	ldrb	r4, [r4, r5]
 801b6de:	2cff      	cmp	r4, #255	; 0xff
 801b6e0:	d10c      	bne.n	801b6fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b6e2:	9c00      	ldr	r4, [sp, #0]
 801b6e4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801b6e8:	f06f 0401 	mvn.w	r4, #1
 801b6ec:	4374      	muls	r4, r6
 801b6ee:	5305      	strh	r5, [r0, r4]
 801b6f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b6f2:	3e01      	subs	r6, #1
 801b6f4:	4421      	add	r1, r4
 801b6f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6f8:	4422      	add	r2, r4
 801b6fa:	e79c      	b.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6fc:	2c00      	cmp	r4, #0
 801b6fe:	d0f7      	beq.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b700:	9f00      	ldr	r7, [sp, #0]
 801b702:	fa1f fc84 	uxth.w	ip, r4
 801b706:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801b70a:	f06f 0501 	mvn.w	r5, #1
 801b70e:	43e4      	mvns	r4, r4
 801b710:	4375      	muls	r5, r6
 801b712:	9502      	str	r5, [sp, #8]
 801b714:	5b45      	ldrh	r5, [r0, r5]
 801b716:	b2e4      	uxtb	r4, r4
 801b718:	122f      	asrs	r7, r5, #8
 801b71a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b71e:	fb17 f704 	smulbb	r7, r7, r4
 801b722:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b726:	00ed      	lsls	r5, r5, #3
 801b728:	b2ed      	uxtb	r5, r5
 801b72a:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801b72e:	fb15 f504 	smulbb	r5, r5, r4
 801b732:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b736:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801b73a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b73e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801b742:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801b746:	fb1a fa04 	smulbb	sl, sl, r4
 801b74a:	fa5f f989 	uxtb.w	r9, r9
 801b74e:	fb09 550c 	mla	r5, r9, ip, r5
 801b752:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b756:	fb07 a70c 	mla	r7, r7, ip, sl
 801b75a:	fa1f fe8e 	uxth.w	lr, lr
 801b75e:	b2ad      	uxth	r5, r5
 801b760:	f10e 0401 	add.w	r4, lr, #1
 801b764:	f105 0a01 	add.w	sl, r5, #1
 801b768:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801b76c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b770:	b2bf      	uxth	r7, r7
 801b772:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b776:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801b77a:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b77e:	f107 0a01 	add.w	sl, r7, #1
 801b782:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b786:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b78a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b78e:	9c02      	ldr	r4, [sp, #8]
 801b790:	ea4e 0e0a 	orr.w	lr, lr, sl
 801b794:	f820 e004 	strh.w	lr, [r0, r4]
 801b798:	e7aa      	b.n	801b6f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b79a:	f04f 0900 	mov.w	r9, #0
 801b79e:	eba3 0409 	sub.w	r4, r3, r9
 801b7a2:	2c00      	cmp	r4, #0
 801b7a4:	f77f af4a 	ble.w	801b63c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b7a8:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801b7ac:	1414      	asrs	r4, r2, #16
 801b7ae:	140d      	asrs	r5, r1, #16
 801b7b0:	fb06 5504 	mla	r5, r6, r4, r5
 801b7b4:	9c01      	ldr	r4, [sp, #4]
 801b7b6:	5d64      	ldrb	r4, [r4, r5]
 801b7b8:	2cff      	cmp	r4, #255	; 0xff
 801b7ba:	d10b      	bne.n	801b7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801b7bc:	9c00      	ldr	r4, [sp, #0]
 801b7be:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801b7c2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801b7c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b7c8:	f109 0901 	add.w	r9, r9, #1
 801b7cc:	4421      	add	r1, r4
 801b7ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b7d0:	4422      	add	r2, r4
 801b7d2:	e7e4      	b.n	801b79e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b7d4:	2c00      	cmp	r4, #0
 801b7d6:	d0f6      	beq.n	801b7c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b7d8:	b2a7      	uxth	r7, r4
 801b7da:	43e4      	mvns	r4, r4
 801b7dc:	9e00      	ldr	r6, [sp, #0]
 801b7de:	b2e4      	uxtb	r4, r4
 801b7e0:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801b7e4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801b7e8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b7ec:	122e      	asrs	r6, r5, #8
 801b7ee:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b7f2:	fb16 f604 	smulbb	r6, r6, r4
 801b7f6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801b7fa:	00ed      	lsls	r5, r5, #3
 801b7fc:	b2ed      	uxtb	r5, r5
 801b7fe:	fb15 f504 	smulbb	r5, r5, r4
 801b802:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b806:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b80a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b80e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b812:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b816:	fb1a fa04 	smulbb	sl, sl, r4
 801b81a:	fa5f fe8e 	uxtb.w	lr, lr
 801b81e:	fb0e 5507 	mla	r5, lr, r7, r5
 801b822:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b826:	fb06 a607 	mla	r6, r6, r7, sl
 801b82a:	fa1f fc8c 	uxth.w	ip, ip
 801b82e:	b2ad      	uxth	r5, r5
 801b830:	f10c 0401 	add.w	r4, ip, #1
 801b834:	f105 0a01 	add.w	sl, r5, #1
 801b838:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801b83c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b840:	b2b6      	uxth	r6, r6
 801b842:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b846:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b84a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b84e:	f106 0a01 	add.w	sl, r6, #1
 801b852:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b856:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b85a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b85e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b862:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801b866:	e7ae      	b.n	801b7c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801b868:	b005      	add	sp, #20
 801b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b86e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b872:	b085      	sub	sp, #20
 801b874:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b876:	9100      	str	r1, [sp, #0]
 801b878:	9203      	str	r2, [sp, #12]
 801b87a:	6841      	ldr	r1, [r0, #4]
 801b87c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b880:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b884:	9201      	str	r2, [sp, #4]
 801b886:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b88a:	fb01 2404 	mla	r4, r1, r4, r2
 801b88e:	6802      	ldr	r2, [r0, #0]
 801b890:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b894:	f8de 2000 	ldr.w	r2, [lr]
 801b898:	9202      	str	r2, [sp, #8]
 801b89a:	9a01      	ldr	r2, [sp, #4]
 801b89c:	43d6      	mvns	r6, r2
 801b89e:	b2f6      	uxtb	r6, r6
 801b8a0:	9a00      	ldr	r2, [sp, #0]
 801b8a2:	2a00      	cmp	r2, #0
 801b8a4:	dc03      	bgt.n	801b8ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b8a6:	9a03      	ldr	r2, [sp, #12]
 801b8a8:	2a00      	cmp	r2, #0
 801b8aa:	f340 8124 	ble.w	801baf6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b8ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8b0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b8b4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b8b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8ba:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b8be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	dd0e      	ble.n	801b8e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b8c6:	1408      	asrs	r0, r1, #16
 801b8c8:	d405      	bmi.n	801b8d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b8ca:	4560      	cmp	r0, ip
 801b8cc:	da03      	bge.n	801b8d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b8ce:	1410      	asrs	r0, r2, #16
 801b8d0:	d401      	bmi.n	801b8d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b8d2:	42b8      	cmp	r0, r7
 801b8d4:	db07      	blt.n	801b8e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b8d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b8d8:	3b01      	subs	r3, #1
 801b8da:	4401      	add	r1, r0
 801b8dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b8de:	3402      	adds	r4, #2
 801b8e0:	4402      	add	r2, r0
 801b8e2:	e7ee      	b.n	801b8c2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b8e4:	d06e      	beq.n	801b9c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b8e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b8e8:	1e58      	subs	r0, r3, #1
 801b8ea:	fb05 1500 	mla	r5, r5, r0, r1
 801b8ee:	142d      	asrs	r5, r5, #16
 801b8f0:	d45c      	bmi.n	801b9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b8f2:	4565      	cmp	r5, ip
 801b8f4:	da5a      	bge.n	801b9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b8f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b8f8:	fb05 2000 	mla	r0, r5, r0, r2
 801b8fc:	1400      	asrs	r0, r0, #16
 801b8fe:	d455      	bmi.n	801b9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b900:	42b8      	cmp	r0, r7
 801b902:	da53      	bge.n	801b9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b904:	4699      	mov	r9, r3
 801b906:	46a2      	mov	sl, r4
 801b908:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801b90c:	f1b9 0f00 	cmp.w	r9, #0
 801b910:	dd54      	ble.n	801b9bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b912:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b916:	140d      	asrs	r5, r1, #16
 801b918:	1410      	asrs	r0, r2, #16
 801b91a:	fb07 5000 	mla	r0, r7, r0, r5
 801b91e:	9d02      	ldr	r5, [sp, #8]
 801b920:	f109 39ff 	add.w	r9, r9, #4294967295
 801b924:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b928:	f8ba 5000 	ldrh.w	r5, [sl]
 801b92c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b930:	122f      	asrs	r7, r5, #8
 801b932:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b936:	fb17 f706 	smulbb	r7, r7, r6
 801b93a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b93e:	00ed      	lsls	r5, r5, #3
 801b940:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b944:	b2ed      	uxtb	r5, r5
 801b946:	fb18 f806 	smulbb	r8, r8, r6
 801b94a:	fb15 f506 	smulbb	r5, r5, r6
 801b94e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b952:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b956:	10c7      	asrs	r7, r0, #3
 801b958:	00c0      	lsls	r0, r0, #3
 801b95a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b95e:	b2c0      	uxtb	r0, r0
 801b960:	fb07 870b 	mla	r7, r7, fp, r8
 801b964:	fb00 500b 	mla	r0, r0, fp, r5
 801b968:	fa1f fc8c 	uxth.w	ip, ip
 801b96c:	b280      	uxth	r0, r0
 801b96e:	b2bf      	uxth	r7, r7
 801b970:	f10c 0501 	add.w	r5, ip, #1
 801b974:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b978:	f107 0801 	add.w	r8, r7, #1
 801b97c:	1c45      	adds	r5, r0, #1
 801b97e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b982:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b986:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b988:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b98c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b990:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b994:	ea45 0c0c 	orr.w	ip, r5, ip
 801b998:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b99c:	4401      	add	r1, r0
 801b99e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b9a0:	ea4c 0c08 	orr.w	ip, ip, r8
 801b9a4:	f82a cb02 	strh.w	ip, [sl], #2
 801b9a8:	4402      	add	r2, r0
 801b9aa:	e7af      	b.n	801b90c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b9ac:	f04f 0800 	mov.w	r8, #0
 801b9b0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801b9b4:	eb03 0008 	add.w	r0, r3, r8
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	dc41      	bgt.n	801ba40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b9bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9c4:	9b00      	ldr	r3, [sp, #0]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	f340 8095 	ble.w	801baf6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b9cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b9d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b9dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b9e0:	eef0 6a62 	vmov.f32	s13, s5
 801b9e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b9ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b9f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b9f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b9f8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b9fc:	eef0 6a43 	vmov.f32	s13, s6
 801ba00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba04:	ee12 2a90 	vmov	r2, s5
 801ba08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba16:	ee13 2a10 	vmov	r2, s6
 801ba1a:	9311      	str	r3, [sp, #68]	; 0x44
 801ba1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba1e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ba22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba26:	9312      	str	r3, [sp, #72]	; 0x48
 801ba28:	9b00      	ldr	r3, [sp, #0]
 801ba2a:	9a03      	ldr	r2, [sp, #12]
 801ba2c:	3b01      	subs	r3, #1
 801ba2e:	9300      	str	r3, [sp, #0]
 801ba30:	eeb0 3a67 	vmov.f32	s6, s15
 801ba34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba36:	eef0 2a47 	vmov.f32	s5, s14
 801ba3a:	bf08      	it	eq
 801ba3c:	4613      	moveq	r3, r2
 801ba3e:	e72f      	b.n	801b8a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ba40:	140f      	asrs	r7, r1, #16
 801ba42:	d451      	bmi.n	801bae8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ba44:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ba48:	42bd      	cmp	r5, r7
 801ba4a:	dd4d      	ble.n	801bae8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ba4c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ba50:	d44a      	bmi.n	801bae8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ba52:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ba56:	4560      	cmp	r0, ip
 801ba58:	dd46      	ble.n	801bae8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ba5a:	b22d      	sxth	r5, r5
 801ba5c:	fb0c 7505 	mla	r5, ip, r5, r7
 801ba60:	9802      	ldr	r0, [sp, #8]
 801ba62:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801ba66:	f06f 0501 	mvn.w	r5, #1
 801ba6a:	fb05 fb08 	mul.w	fp, r5, r8
 801ba6e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ba72:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ba76:	122f      	asrs	r7, r5, #8
 801ba78:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ba7c:	fb17 f706 	smulbb	r7, r7, r6
 801ba80:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ba84:	00ed      	lsls	r5, r5, #3
 801ba86:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ba8a:	b2ed      	uxtb	r5, r5
 801ba8c:	fb19 f906 	smulbb	r9, r9, r6
 801ba90:	fb15 f506 	smulbb	r5, r5, r6
 801ba94:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ba98:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ba9c:	10c7      	asrs	r7, r0, #3
 801ba9e:	00c0      	lsls	r0, r0, #3
 801baa0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801baa4:	b2c0      	uxtb	r0, r0
 801baa6:	fb07 970a 	mla	r7, r7, sl, r9
 801baaa:	fb00 500a 	mla	r0, r0, sl, r5
 801baae:	fa1f fc8c 	uxth.w	ip, ip
 801bab2:	b2bf      	uxth	r7, r7
 801bab4:	b280      	uxth	r0, r0
 801bab6:	f10c 0501 	add.w	r5, ip, #1
 801baba:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801babe:	f107 0901 	add.w	r9, r7, #1
 801bac2:	1c45      	adds	r5, r0, #1
 801bac4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801bac8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801bacc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bad0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801bad4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bad8:	ea45 0c0c 	orr.w	ip, r5, ip
 801badc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bae0:	ea4c 0c09 	orr.w	ip, ip, r9
 801bae4:	f824 c00b 	strh.w	ip, [r4, fp]
 801bae8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801baea:	f108 38ff 	add.w	r8, r8, #4294967295
 801baee:	4401      	add	r1, r0
 801baf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801baf2:	4402      	add	r2, r0
 801baf4:	e75e      	b.n	801b9b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801baf6:	b005      	add	sp, #20
 801baf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bafc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bafc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb04:	b085      	sub	sp, #20
 801bb06:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bb08:	4693      	mov	fp, r2
 801bb0a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bb0e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801bb12:	6870      	ldr	r0, [r6, #4]
 801bb14:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801bb16:	fb00 2404 	mla	r4, r0, r4, r2
 801bb1a:	6832      	ldr	r2, [r6, #0]
 801bb1c:	9101      	str	r1, [sp, #4]
 801bb1e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bb22:	682a      	ldr	r2, [r5, #0]
 801bb24:	9202      	str	r2, [sp, #8]
 801bb26:	9a01      	ldr	r2, [sp, #4]
 801bb28:	2a00      	cmp	r2, #0
 801bb2a:	dc03      	bgt.n	801bb34 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bb2c:	f1bb 0f00 	cmp.w	fp, #0
 801bb30:	f340 809a 	ble.w	801bc68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bb34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb36:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bb3a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb40:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bb44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	dd0c      	ble.n	801bb66 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bb4c:	1406      	asrs	r6, r0, #16
 801bb4e:	d405      	bmi.n	801bb5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bb50:	454e      	cmp	r6, r9
 801bb52:	da03      	bge.n	801bb5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bb54:	1416      	asrs	r6, r2, #16
 801bb56:	d401      	bmi.n	801bb5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bb58:	4546      	cmp	r6, r8
 801bb5a:	db05      	blt.n	801bb68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bb5c:	4470      	add	r0, lr
 801bb5e:	4462      	add	r2, ip
 801bb60:	3b01      	subs	r3, #1
 801bb62:	3402      	adds	r4, #2
 801bb64:	e7f0      	b.n	801bb48 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bb66:	d00f      	beq.n	801bb88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bb68:	1e5e      	subs	r6, r3, #1
 801bb6a:	fb0e 0706 	mla	r7, lr, r6, r0
 801bb6e:	143f      	asrs	r7, r7, #16
 801bb70:	d541      	bpl.n	801bbf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801bb72:	4698      	mov	r8, r3
 801bb74:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801bb78:	9603      	str	r6, [sp, #12]
 801bb7a:	f1b8 0f00 	cmp.w	r8, #0
 801bb7e:	dc56      	bgt.n	801bc2e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801bb80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb84:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bb88:	9b01      	ldr	r3, [sp, #4]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	dd6c      	ble.n	801bc68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bb8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb9a:	eeb0 6a62 	vmov.f32	s12, s5
 801bb9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bba2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bba6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bbae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bbb2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bbb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bbba:	eeb0 6a43 	vmov.f32	s12, s6
 801bbbe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bbc2:	ee12 2a90 	vmov	r2, s5
 801bbc6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bbca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bbd0:	fb92 fef3 	sdiv	lr, r2, r3
 801bbd4:	ee13 2a10 	vmov	r2, s6
 801bbd8:	fb92 fcf3 	sdiv	ip, r2, r3
 801bbdc:	9b01      	ldr	r3, [sp, #4]
 801bbde:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bbe2:	3b01      	subs	r3, #1
 801bbe4:	9301      	str	r3, [sp, #4]
 801bbe6:	eeb0 3a67 	vmov.f32	s6, s15
 801bbea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbec:	eef0 2a47 	vmov.f32	s5, s14
 801bbf0:	bf08      	it	eq
 801bbf2:	465b      	moveq	r3, fp
 801bbf4:	e797      	b.n	801bb26 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801bbf6:	454f      	cmp	r7, r9
 801bbf8:	dabb      	bge.n	801bb72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bbfa:	fb0c 2606 	mla	r6, ip, r6, r2
 801bbfe:	1436      	asrs	r6, r6, #16
 801bc00:	d4b7      	bmi.n	801bb72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc02:	4546      	cmp	r6, r8
 801bc04:	dab5      	bge.n	801bb72 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc06:	461e      	mov	r6, r3
 801bc08:	46a0      	mov	r8, r4
 801bc0a:	2e00      	cmp	r6, #0
 801bc0c:	ddb8      	ble.n	801bb80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bc0e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801bc12:	1417      	asrs	r7, r2, #16
 801bc14:	ea4f 4920 	mov.w	r9, r0, asr #16
 801bc18:	fb0a 9707 	mla	r7, sl, r7, r9
 801bc1c:	9902      	ldr	r1, [sp, #8]
 801bc1e:	4470      	add	r0, lr
 801bc20:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801bc24:	4462      	add	r2, ip
 801bc26:	f828 7b02 	strh.w	r7, [r8], #2
 801bc2a:	3e01      	subs	r6, #1
 801bc2c:	e7ed      	b.n	801bc0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801bc2e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bc32:	d414      	bmi.n	801bc5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bc34:	68ae      	ldr	r6, [r5, #8]
 801bc36:	454e      	cmp	r6, r9
 801bc38:	dd11      	ble.n	801bc5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bc3a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bc3e:	d40e      	bmi.n	801bc5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bc40:	68ef      	ldr	r7, [r5, #12]
 801bc42:	4557      	cmp	r7, sl
 801bc44:	dd0b      	ble.n	801bc5e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801bc46:	f06f 0101 	mvn.w	r1, #1
 801bc4a:	b236      	sxth	r6, r6
 801bc4c:	fb0a 9606 	mla	r6, sl, r6, r9
 801bc50:	9f02      	ldr	r7, [sp, #8]
 801bc52:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bc56:	fb01 f608 	mul.w	r6, r1, r8
 801bc5a:	9903      	ldr	r1, [sp, #12]
 801bc5c:	538f      	strh	r7, [r1, r6]
 801bc5e:	4470      	add	r0, lr
 801bc60:	4462      	add	r2, ip
 801bc62:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc66:	e788      	b.n	801bb7a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bc68:	b005      	add	sp, #20
 801bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc6e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc76:	b087      	sub	sp, #28
 801bc78:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bc7a:	468b      	mov	fp, r1
 801bc7c:	9203      	str	r2, [sp, #12]
 801bc7e:	6841      	ldr	r1, [r0, #4]
 801bc80:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bc84:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801bc88:	9204      	str	r2, [sp, #16]
 801bc8a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801bc8e:	fb01 2505 	mla	r5, r1, r5, r2
 801bc92:	6802      	ldr	r2, [r0, #0]
 801bc94:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801bc98:	f8d9 2000 	ldr.w	r2, [r9]
 801bc9c:	9201      	str	r2, [sp, #4]
 801bc9e:	f1bb 0f00 	cmp.w	fp, #0
 801bca2:	dc03      	bgt.n	801bcac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bca4:	9a03      	ldr	r2, [sp, #12]
 801bca6:	2a00      	cmp	r2, #0
 801bca8:	f340 8159 	ble.w	801bf5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801bcac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bcae:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801bcb2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bcb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcb8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801bcbc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	dd0e      	ble.n	801bce2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bcc4:	1402      	asrs	r2, r0, #16
 801bcc6:	d405      	bmi.n	801bcd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bcc8:	42ba      	cmp	r2, r7
 801bcca:	da03      	bge.n	801bcd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bccc:	140a      	asrs	r2, r1, #16
 801bcce:	d401      	bmi.n	801bcd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bcd0:	42b2      	cmp	r2, r6
 801bcd2:	db07      	blt.n	801bce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bcd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	4410      	add	r0, r2
 801bcda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bcdc:	3502      	adds	r5, #2
 801bcde:	4411      	add	r1, r2
 801bce0:	e7ee      	b.n	801bcc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bce2:	d017      	beq.n	801bd14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bce4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bce6:	1e5a      	subs	r2, r3, #1
 801bce8:	fb04 0402 	mla	r4, r4, r2, r0
 801bcec:	1424      	asrs	r4, r4, #16
 801bcee:	d409      	bmi.n	801bd04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcf0:	42bc      	cmp	r4, r7
 801bcf2:	da07      	bge.n	801bd04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bcf6:	fb04 1202 	mla	r2, r4, r2, r1
 801bcfa:	1412      	asrs	r2, r2, #16
 801bcfc:	d402      	bmi.n	801bd04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcfe:	42b2      	cmp	r2, r6
 801bd00:	f2c0 80bf 	blt.w	801be82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bd04:	2700      	movs	r7, #0
 801bd06:	19da      	adds	r2, r3, r7
 801bd08:	2a00      	cmp	r2, #0
 801bd0a:	dc3e      	bgt.n	801bd8a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bd0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd10:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801bd14:	f1bb 0f00 	cmp.w	fp, #0
 801bd18:	f340 8121 	ble.w	801bf5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801bd1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd2c:	eeb0 6a62 	vmov.f32	s12, s5
 801bd30:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd34:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd44:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bd48:	eeb0 6a43 	vmov.f32	s12, s6
 801bd4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd50:	ee12 2a90 	vmov	r2, s5
 801bd54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd62:	ee13 2a10 	vmov	r2, s6
 801bd66:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd6a:	f1bb 0b01 	subs.w	fp, fp, #1
 801bd6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd72:	9a03      	ldr	r2, [sp, #12]
 801bd74:	9314      	str	r3, [sp, #80]	; 0x50
 801bd76:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bd7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd7c:	eeb0 3a67 	vmov.f32	s6, s15
 801bd80:	bf08      	it	eq
 801bd82:	4613      	moveq	r3, r2
 801bd84:	eef0 2a47 	vmov.f32	s5, s14
 801bd88:	e789      	b.n	801bc9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bd8a:	1406      	asrs	r6, r0, #16
 801bd8c:	d42d      	bmi.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bd8e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801bd92:	42b4      	cmp	r4, r6
 801bd94:	dd29      	ble.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bd96:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801bd9a:	d426      	bmi.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bd9c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801bda0:	4562      	cmp	r2, ip
 801bda2:	dd22      	ble.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bda4:	b224      	sxth	r4, r4
 801bda6:	fb0c 6404 	mla	r4, ip, r4, r6
 801bdaa:	9a01      	ldr	r2, [sp, #4]
 801bdac:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801bdb0:	0e22      	lsrs	r2, r4, #24
 801bdb2:	d01a      	beq.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bdb4:	9e04      	ldr	r6, [sp, #16]
 801bdb6:	4372      	muls	r2, r6
 801bdb8:	1c56      	adds	r6, r2, #1
 801bdba:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bdbe:	1212      	asrs	r2, r2, #8
 801bdc0:	0a26      	lsrs	r6, r4, #8
 801bdc2:	2aff      	cmp	r2, #255	; 0xff
 801bdc4:	9605      	str	r6, [sp, #20]
 801bdc6:	d116      	bne.n	801bdf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801bdc8:	f06f 0201 	mvn.w	r2, #1
 801bdcc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bdd0:	fb02 fc07 	mul.w	ip, r2, r7
 801bdd4:	0962      	lsrs	r2, r4, #5
 801bdd6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bdda:	f026 0607 	bic.w	r6, r6, #7
 801bdde:	4316      	orrs	r6, r2
 801bde0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bde4:	4326      	orrs	r6, r4
 801bde6:	f825 600c 	strh.w	r6, [r5, ip]
 801bdea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdec:	3f01      	subs	r7, #1
 801bdee:	4410      	add	r0, r2
 801bdf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdf2:	4411      	add	r1, r2
 801bdf4:	e787      	b.n	801bd06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bdf6:	f06f 0601 	mvn.w	r6, #1
 801bdfa:	fa1f fa82 	uxth.w	sl, r2
 801bdfe:	43d2      	mvns	r2, r2
 801be00:	437e      	muls	r6, r7
 801be02:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801be06:	f835 8006 	ldrh.w	r8, [r5, r6]
 801be0a:	fb1c fc0a 	smulbb	ip, ip, sl
 801be0e:	b2e4      	uxtb	r4, r4
 801be10:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801be14:	fb14 f40a 	smulbb	r4, r4, sl
 801be18:	b2d2      	uxtb	r2, r2
 801be1a:	9602      	str	r6, [sp, #8]
 801be1c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801be20:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801be24:	fb0e ce02 	mla	lr, lr, r2, ip
 801be28:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801be2c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801be30:	fb16 f60a 	smulbb	r6, r6, sl
 801be34:	fa5f f888 	uxtb.w	r8, r8
 801be38:	fb08 4402 	mla	r4, r8, r2, r4
 801be3c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801be40:	fb0c 6c02 	mla	ip, ip, r2, r6
 801be44:	fa1f fe8e 	uxth.w	lr, lr
 801be48:	b2a4      	uxth	r4, r4
 801be4a:	f10e 0201 	add.w	r2, lr, #1
 801be4e:	1c66      	adds	r6, r4, #1
 801be50:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801be54:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801be58:	fa1f fc8c 	uxth.w	ip, ip
 801be5c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801be60:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801be64:	ea46 0e0e 	orr.w	lr, r6, lr
 801be68:	f10c 0601 	add.w	r6, ip, #1
 801be6c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801be70:	0976      	lsrs	r6, r6, #5
 801be72:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801be76:	9a02      	ldr	r2, [sp, #8]
 801be78:	ea4e 0e06 	orr.w	lr, lr, r6
 801be7c:	f825 e002 	strh.w	lr, [r5, r2]
 801be80:	e7b3      	b.n	801bdea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801be82:	f04f 0800 	mov.w	r8, #0
 801be86:	eba3 0208 	sub.w	r2, r3, r8
 801be8a:	2a00      	cmp	r2, #0
 801be8c:	f77f af3e 	ble.w	801bd0c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801be90:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801be94:	1404      	asrs	r4, r0, #16
 801be96:	140a      	asrs	r2, r1, #16
 801be98:	fb06 4202 	mla	r2, r6, r2, r4
 801be9c:	9c01      	ldr	r4, [sp, #4]
 801be9e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801bea2:	0e22      	lsrs	r2, r4, #24
 801bea4:	d016      	beq.n	801bed4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801bea6:	9e04      	ldr	r6, [sp, #16]
 801bea8:	4372      	muls	r2, r6
 801beaa:	1c56      	adds	r6, r2, #1
 801beac:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801beb0:	1212      	asrs	r2, r2, #8
 801beb2:	2aff      	cmp	r2, #255	; 0xff
 801beb4:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801beb8:	d113      	bne.n	801bee2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801beba:	0962      	lsrs	r2, r4, #5
 801bebc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801bec0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bec4:	f026 0607 	bic.w	r6, r6, #7
 801bec8:	4316      	orrs	r6, r2
 801beca:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bece:	4326      	orrs	r6, r4
 801bed0:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801bed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bed6:	f108 0801 	add.w	r8, r8, #1
 801beda:	4410      	add	r0, r2
 801bedc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bede:	4411      	add	r1, r2
 801bee0:	e7d1      	b.n	801be86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801bee2:	fa1f fa82 	uxth.w	sl, r2
 801bee6:	43d2      	mvns	r2, r2
 801bee8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801beec:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801bef0:	fb17 f70a 	smulbb	r7, r7, sl
 801bef4:	b2e4      	uxtb	r4, r4
 801bef6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801befa:	fb14 f40a 	smulbb	r4, r4, sl
 801befe:	b2d2      	uxtb	r2, r2
 801bf00:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bf04:	fb0c 7c02 	mla	ip, ip, r2, r7
 801bf08:	b2f6      	uxtb	r6, r6
 801bf0a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801bf0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bf12:	fb16 f60a 	smulbb	r6, r6, sl
 801bf16:	fa5f fe8e 	uxtb.w	lr, lr
 801bf1a:	fb0e 4402 	mla	r4, lr, r2, r4
 801bf1e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bf22:	fb07 6702 	mla	r7, r7, r2, r6
 801bf26:	fa1f fc8c 	uxth.w	ip, ip
 801bf2a:	b2a4      	uxth	r4, r4
 801bf2c:	f10c 0201 	add.w	r2, ip, #1
 801bf30:	1c66      	adds	r6, r4, #1
 801bf32:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801bf36:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801bf3a:	b2bf      	uxth	r7, r7
 801bf3c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bf40:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bf44:	ea46 0c0c 	orr.w	ip, r6, ip
 801bf48:	1c7e      	adds	r6, r7, #1
 801bf4a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801bf4e:	0976      	lsrs	r6, r6, #5
 801bf50:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bf54:	ea4c 0c06 	orr.w	ip, ip, r6
 801bf58:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801bf5c:	e7ba      	b.n	801bed4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801bf5e:	b007      	add	sp, #28
 801bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf6c:	b085      	sub	sp, #20
 801bf6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bf70:	468b      	mov	fp, r1
 801bf72:	6841      	ldr	r1, [r0, #4]
 801bf74:	9203      	str	r2, [sp, #12]
 801bf76:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bf7a:	fb01 2404 	mla	r4, r1, r4, r2
 801bf7e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801bf82:	6802      	ldr	r2, [r0, #0]
 801bf84:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf88:	f8d8 2000 	ldr.w	r2, [r8]
 801bf8c:	9201      	str	r2, [sp, #4]
 801bf8e:	f1bb 0f00 	cmp.w	fp, #0
 801bf92:	dc03      	bgt.n	801bf9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bf94:	9a03      	ldr	r2, [sp, #12]
 801bf96:	2a00      	cmp	r2, #0
 801bf98:	f340 814f 	ble.w	801c23a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bf9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf9e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801bfa2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bfa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bfa8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801bfac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	dd0e      	ble.n	801bfd2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bfb4:	1408      	asrs	r0, r1, #16
 801bfb6:	d405      	bmi.n	801bfc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bfb8:	42b8      	cmp	r0, r7
 801bfba:	da03      	bge.n	801bfc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bfbc:	1410      	asrs	r0, r2, #16
 801bfbe:	d401      	bmi.n	801bfc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801bfc0:	42b0      	cmp	r0, r6
 801bfc2:	db07      	blt.n	801bfd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bfc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bfc6:	3b01      	subs	r3, #1
 801bfc8:	4401      	add	r1, r0
 801bfca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bfcc:	3402      	adds	r4, #2
 801bfce:	4402      	add	r2, r0
 801bfd0:	e7ee      	b.n	801bfb0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801bfd2:	d017      	beq.n	801c004 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bfd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bfd6:	1e58      	subs	r0, r3, #1
 801bfd8:	fb05 1500 	mla	r5, r5, r0, r1
 801bfdc:	142d      	asrs	r5, r5, #16
 801bfde:	d409      	bmi.n	801bff4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bfe0:	42bd      	cmp	r5, r7
 801bfe2:	da07      	bge.n	801bff4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bfe4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bfe6:	fb05 2000 	mla	r0, r5, r0, r2
 801bfea:	1400      	asrs	r0, r0, #16
 801bfec:	d402      	bmi.n	801bff4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bfee:	42b0      	cmp	r0, r6
 801bff0:	f2c0 80ba 	blt.w	801c168 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801bff4:	2600      	movs	r6, #0
 801bff6:	1998      	adds	r0, r3, r6
 801bff8:	2800      	cmp	r0, #0
 801bffa:	dc3e      	bgt.n	801c07a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c000:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c004:	f1bb 0f00 	cmp.w	fp, #0
 801c008:	f340 8117 	ble.w	801c23a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c00c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c010:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c014:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c018:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c01c:	eeb0 6a62 	vmov.f32	s12, s5
 801c020:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c024:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c028:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c02c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c030:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c034:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c038:	eeb0 6a43 	vmov.f32	s12, s6
 801c03c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c040:	ee12 2a90 	vmov	r2, s5
 801c044:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c04a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c04e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c052:	ee13 2a10 	vmov	r2, s6
 801c056:	9311      	str	r3, [sp, #68]	; 0x44
 801c058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c05a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c05e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c062:	9a03      	ldr	r2, [sp, #12]
 801c064:	9312      	str	r3, [sp, #72]	; 0x48
 801c066:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c06c:	eeb0 3a67 	vmov.f32	s6, s15
 801c070:	bf08      	it	eq
 801c072:	4613      	moveq	r3, r2
 801c074:	eef0 2a47 	vmov.f32	s5, s14
 801c078:	e789      	b.n	801bf8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c07a:	140f      	asrs	r7, r1, #16
 801c07c:	d424      	bmi.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c07e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c082:	42bd      	cmp	r5, r7
 801c084:	dd20      	ble.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c086:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c08a:	d41d      	bmi.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c08c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801c090:	4560      	cmp	r0, ip
 801c092:	dd19      	ble.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c094:	b22d      	sxth	r5, r5
 801c096:	fb0c 7505 	mla	r5, ip, r5, r7
 801c09a:	9801      	ldr	r0, [sp, #4]
 801c09c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c0a0:	0e07      	lsrs	r7, r0, #24
 801c0a2:	2fff      	cmp	r7, #255	; 0xff
 801c0a4:	d116      	bne.n	801c0d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c0a6:	f06f 0501 	mvn.w	r5, #1
 801c0aa:	fb05 f706 	mul.w	r7, r5, r6
 801c0ae:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c0b2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c0b6:	0945      	lsrs	r5, r0, #5
 801c0b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c0bc:	ea4c 0505 	orr.w	r5, ip, r5
 801c0c0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c0c4:	4305      	orrs	r5, r0
 801c0c6:	53e5      	strh	r5, [r4, r7]
 801c0c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c0ca:	3e01      	subs	r6, #1
 801c0cc:	4401      	add	r1, r0
 801c0ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c0d0:	4402      	add	r2, r0
 801c0d2:	e790      	b.n	801bff6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c0d4:	b2fd      	uxtb	r5, r7
 801c0d6:	2f00      	cmp	r7, #0
 801c0d8:	d0f6      	beq.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c0da:	f06f 0701 	mvn.w	r7, #1
 801c0de:	fa1f f985 	uxth.w	r9, r5
 801c0e2:	43ed      	mvns	r5, r5
 801c0e4:	4377      	muls	r7, r6
 801c0e6:	f834 e007 	ldrh.w	lr, [r4, r7]
 801c0ea:	9702      	str	r7, [sp, #8]
 801c0ec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c0f0:	fb17 f709 	smulbb	r7, r7, r9
 801c0f4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c0f8:	b2c0      	uxtb	r0, r0
 801c0fa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c0fe:	fb10 f009 	smulbb	r0, r0, r9
 801c102:	b2ed      	uxtb	r5, r5
 801c104:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c108:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c10c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c110:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c114:	fb1a fa09 	smulbb	sl, sl, r9
 801c118:	fa5f fe8e 	uxtb.w	lr, lr
 801c11c:	fb0e 0005 	mla	r0, lr, r5, r0
 801c120:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c124:	fb07 a705 	mla	r7, r7, r5, sl
 801c128:	b280      	uxth	r0, r0
 801c12a:	fa1f fc8c 	uxth.w	ip, ip
 801c12e:	f100 0a01 	add.w	sl, r0, #1
 801c132:	f10c 0501 	add.w	r5, ip, #1
 801c136:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c13a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c13e:	b2bf      	uxth	r7, r7
 801c140:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c144:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c148:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c14c:	f107 0a01 	add.w	sl, r7, #1
 801c150:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c154:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c158:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c15c:	9802      	ldr	r0, [sp, #8]
 801c15e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c162:	f824 c000 	strh.w	ip, [r4, r0]
 801c166:	e7af      	b.n	801c0c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c168:	f04f 0e00 	mov.w	lr, #0
 801c16c:	eba3 000e 	sub.w	r0, r3, lr
 801c170:	2800      	cmp	r0, #0
 801c172:	f77f af43 	ble.w	801bffc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c176:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c17a:	140d      	asrs	r5, r1, #16
 801c17c:	1410      	asrs	r0, r2, #16
 801c17e:	fb06 5000 	mla	r0, r6, r0, r5
 801c182:	9d01      	ldr	r5, [sp, #4]
 801c184:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c188:	0e2e      	lsrs	r6, r5, #24
 801c18a:	2eff      	cmp	r6, #255	; 0xff
 801c18c:	d112      	bne.n	801c1b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801c18e:	482c      	ldr	r0, [pc, #176]	; (801c240 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801c190:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c194:	0968      	lsrs	r0, r5, #5
 801c196:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c19a:	4330      	orrs	r0, r6
 801c19c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c1a0:	4328      	orrs	r0, r5
 801c1a2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801c1a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c1a8:	f10e 0e01 	add.w	lr, lr, #1
 801c1ac:	4401      	add	r1, r0
 801c1ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c1b0:	4402      	add	r2, r0
 801c1b2:	e7db      	b.n	801c16c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c1b4:	b2f0      	uxtb	r0, r6
 801c1b6:	2e00      	cmp	r6, #0
 801c1b8:	d0f5      	beq.n	801c1a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c1ba:	fa1f f980 	uxth.w	r9, r0
 801c1be:	43c0      	mvns	r0, r0
 801c1c0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c1c4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c1c8:	fb16 f609 	smulbb	r6, r6, r9
 801c1cc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c1d0:	b2ed      	uxtb	r5, r5
 801c1d2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c1d6:	fb15 f509 	smulbb	r5, r5, r9
 801c1da:	b2c0      	uxtb	r0, r0
 801c1dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c1e0:	fb07 6700 	mla	r7, r7, r0, r6
 801c1e4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c1e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c1ec:	fb1a fa09 	smulbb	sl, sl, r9
 801c1f0:	fa5f fc8c 	uxtb.w	ip, ip
 801c1f4:	fb0c 5500 	mla	r5, ip, r0, r5
 801c1f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c1fc:	fb06 a600 	mla	r6, r6, r0, sl
 801c200:	b2bf      	uxth	r7, r7
 801c202:	b2ad      	uxth	r5, r5
 801c204:	1c78      	adds	r0, r7, #1
 801c206:	f105 0a01 	add.w	sl, r5, #1
 801c20a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c20e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c212:	b2b6      	uxth	r6, r6
 801c214:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c218:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c21c:	ea4a 0707 	orr.w	r7, sl, r7
 801c220:	f106 0a01 	add.w	sl, r6, #1
 801c224:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c228:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c22c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c230:	ea47 070a 	orr.w	r7, r7, sl
 801c234:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801c238:	e7b5      	b.n	801c1a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c23a:	b005      	add	sp, #20
 801c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c240:	fffff800 	.word	0xfffff800

0801c244 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c24c:	b087      	sub	sp, #28
 801c24e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c250:	468b      	mov	fp, r1
 801c252:	9203      	str	r2, [sp, #12]
 801c254:	6841      	ldr	r1, [r0, #4]
 801c256:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c25a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c25e:	9204      	str	r2, [sp, #16]
 801c260:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c264:	fb01 2404 	mla	r4, r1, r4, r2
 801c268:	6802      	ldr	r2, [r0, #0]
 801c26a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c26e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c272:	3201      	adds	r2, #1
 801c274:	f022 0201 	bic.w	r2, r2, #1
 801c278:	9200      	str	r2, [sp, #0]
 801c27a:	f8d9 2000 	ldr.w	r2, [r9]
 801c27e:	9201      	str	r2, [sp, #4]
 801c280:	f1bb 0f00 	cmp.w	fp, #0
 801c284:	dc03      	bgt.n	801c28e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c286:	9a03      	ldr	r2, [sp, #12]
 801c288:	2a00      	cmp	r2, #0
 801c28a:	f340 816a 	ble.w	801c562 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c28e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c290:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c294:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c29a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c29e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	dd0e      	ble.n	801c2c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c2a6:	1402      	asrs	r2, r0, #16
 801c2a8:	d405      	bmi.n	801c2b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2aa:	42ba      	cmp	r2, r7
 801c2ac:	da03      	bge.n	801c2b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2ae:	140a      	asrs	r2, r1, #16
 801c2b0:	d401      	bmi.n	801c2b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2b2:	42b2      	cmp	r2, r6
 801c2b4:	db07      	blt.n	801c2c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c2b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	4410      	add	r0, r2
 801c2bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c2be:	3402      	adds	r4, #2
 801c2c0:	4411      	add	r1, r2
 801c2c2:	e7ee      	b.n	801c2a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c2c4:	d017      	beq.n	801c2f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c2c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c2c8:	1e5a      	subs	r2, r3, #1
 801c2ca:	fb05 0502 	mla	r5, r5, r2, r0
 801c2ce:	142d      	asrs	r5, r5, #16
 801c2d0:	d409      	bmi.n	801c2e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c2d2:	42bd      	cmp	r5, r7
 801c2d4:	da07      	bge.n	801c2e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c2d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c2d8:	fb05 1202 	mla	r2, r5, r2, r1
 801c2dc:	1412      	asrs	r2, r2, #16
 801c2de:	d402      	bmi.n	801c2e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c2e0:	42b2      	cmp	r2, r6
 801c2e2:	f2c0 80c8 	blt.w	801c476 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801c2e6:	2700      	movs	r7, #0
 801c2e8:	19da      	adds	r2, r3, r7
 801c2ea:	2a00      	cmp	r2, #0
 801c2ec:	dc3e      	bgt.n	801c36c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c2ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c2f6:	f1bb 0f00 	cmp.w	fp, #0
 801c2fa:	f340 8132 	ble.w	801c562 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c2fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c302:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c306:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c30a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c30e:	eeb0 6a62 	vmov.f32	s12, s5
 801c312:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c316:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c31a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c31e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c322:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c326:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c32a:	eeb0 6a43 	vmov.f32	s12, s6
 801c32e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c332:	ee12 2a90 	vmov	r2, s5
 801c336:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c33a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c33c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c340:	fb92 f3f3 	sdiv	r3, r2, r3
 801c344:	ee13 2a10 	vmov	r2, s6
 801c348:	9313      	str	r3, [sp, #76]	; 0x4c
 801c34a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c34c:	f1bb 0b01 	subs.w	fp, fp, #1
 801c350:	fb92 f3f3 	sdiv	r3, r2, r3
 801c354:	9a03      	ldr	r2, [sp, #12]
 801c356:	9314      	str	r3, [sp, #80]	; 0x50
 801c358:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c35e:	eeb0 3a67 	vmov.f32	s6, s15
 801c362:	bf08      	it	eq
 801c364:	4613      	moveq	r3, r2
 801c366:	eef0 2a47 	vmov.f32	s5, s14
 801c36a:	e789      	b.n	801c280 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c36c:	1405      	asrs	r5, r0, #16
 801c36e:	d436      	bmi.n	801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c370:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c374:	42aa      	cmp	r2, r5
 801c376:	dd32      	ble.n	801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c378:	140e      	asrs	r6, r1, #16
 801c37a:	d430      	bmi.n	801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c37c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c380:	42b2      	cmp	r2, r6
 801c382:	dd2c      	ble.n	801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c384:	9a00      	ldr	r2, [sp, #0]
 801c386:	fb06 5502 	mla	r5, r6, r2, r5
 801c38a:	9e01      	ldr	r6, [sp, #4]
 801c38c:	086a      	lsrs	r2, r5, #1
 801c38e:	5cb2      	ldrb	r2, [r6, r2]
 801c390:	07ee      	lsls	r6, r5, #31
 801c392:	bf54      	ite	pl
 801c394:	f002 020f 	andpl.w	r2, r2, #15
 801c398:	1112      	asrmi	r2, r2, #4
 801c39a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c39e:	b2d2      	uxtb	r2, r2
 801c3a0:	b1ea      	cbz	r2, 801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c3a2:	9d04      	ldr	r5, [sp, #16]
 801c3a4:	436a      	muls	r2, r5
 801c3a6:	1c55      	adds	r5, r2, #1
 801c3a8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c3ac:	4d6e      	ldr	r5, [pc, #440]	; (801c568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c3ae:	1212      	asrs	r2, r2, #8
 801c3b0:	682d      	ldr	r5, [r5, #0]
 801c3b2:	2aff      	cmp	r2, #255	; 0xff
 801c3b4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801c3b8:	9605      	str	r6, [sp, #20]
 801c3ba:	d116      	bne.n	801c3ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c3bc:	f06f 0201 	mvn.w	r2, #1
 801c3c0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c3c4:	fb02 fc07 	mul.w	ip, r2, r7
 801c3c8:	096a      	lsrs	r2, r5, #5
 801c3ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c3ce:	f026 0607 	bic.w	r6, r6, #7
 801c3d2:	4316      	orrs	r6, r2
 801c3d4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c3d8:	432e      	orrs	r6, r5
 801c3da:	f824 600c 	strh.w	r6, [r4, ip]
 801c3de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c3e0:	3f01      	subs	r7, #1
 801c3e2:	4410      	add	r0, r2
 801c3e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3e6:	4411      	add	r1, r2
 801c3e8:	e77e      	b.n	801c2e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c3ea:	f06f 0601 	mvn.w	r6, #1
 801c3ee:	fa1f fa82 	uxth.w	sl, r2
 801c3f2:	43d2      	mvns	r2, r2
 801c3f4:	437e      	muls	r6, r7
 801c3f6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801c3fa:	f834 8006 	ldrh.w	r8, [r4, r6]
 801c3fe:	fb1c fc0a 	smulbb	ip, ip, sl
 801c402:	b2ed      	uxtb	r5, r5
 801c404:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c408:	fb15 f50a 	smulbb	r5, r5, sl
 801c40c:	b2d2      	uxtb	r2, r2
 801c40e:	9602      	str	r6, [sp, #8]
 801c410:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c414:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c418:	fb0e ce02 	mla	lr, lr, r2, ip
 801c41c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c420:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c424:	fb16 f60a 	smulbb	r6, r6, sl
 801c428:	fa5f f888 	uxtb.w	r8, r8
 801c42c:	fb08 5502 	mla	r5, r8, r2, r5
 801c430:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c434:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c438:	fa1f fe8e 	uxth.w	lr, lr
 801c43c:	b2ad      	uxth	r5, r5
 801c43e:	f10e 0201 	add.w	r2, lr, #1
 801c442:	1c6e      	adds	r6, r5, #1
 801c444:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c448:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801c44c:	fa1f fc8c 	uxth.w	ip, ip
 801c450:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c454:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c458:	ea46 0e0e 	orr.w	lr, r6, lr
 801c45c:	f10c 0601 	add.w	r6, ip, #1
 801c460:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c464:	0976      	lsrs	r6, r6, #5
 801c466:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c46a:	9a02      	ldr	r2, [sp, #8]
 801c46c:	ea4e 0e06 	orr.w	lr, lr, r6
 801c470:	f824 e002 	strh.w	lr, [r4, r2]
 801c474:	e7b3      	b.n	801c3de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c476:	f04f 0800 	mov.w	r8, #0
 801c47a:	eba3 0208 	sub.w	r2, r3, r8
 801c47e:	2a00      	cmp	r2, #0
 801c480:	f77f af35 	ble.w	801c2ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c484:	9e00      	ldr	r6, [sp, #0]
 801c486:	1402      	asrs	r2, r0, #16
 801c488:	140d      	asrs	r5, r1, #16
 801c48a:	fb06 2505 	mla	r5, r6, r5, r2
 801c48e:	9e01      	ldr	r6, [sp, #4]
 801c490:	086a      	lsrs	r2, r5, #1
 801c492:	5cb2      	ldrb	r2, [r6, r2]
 801c494:	07ed      	lsls	r5, r5, #31
 801c496:	bf54      	ite	pl
 801c498:	f002 020f 	andpl.w	r2, r2, #15
 801c49c:	1112      	asrmi	r2, r2, #4
 801c49e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c4a2:	b2d2      	uxtb	r2, r2
 801c4a4:	b1c2      	cbz	r2, 801c4d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c4a6:	9d04      	ldr	r5, [sp, #16]
 801c4a8:	436a      	muls	r2, r5
 801c4aa:	1c55      	adds	r5, r2, #1
 801c4ac:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801c4b0:	4d2d      	ldr	r5, [pc, #180]	; (801c568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801c4b2:	1212      	asrs	r2, r2, #8
 801c4b4:	682e      	ldr	r6, [r5, #0]
 801c4b6:	2aff      	cmp	r2, #255	; 0xff
 801c4b8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801c4bc:	d113      	bne.n	801c4e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c4be:	0972      	lsrs	r2, r6, #5
 801c4c0:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801c4c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c4c8:	f025 0507 	bic.w	r5, r5, #7
 801c4cc:	4315      	orrs	r5, r2
 801c4ce:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c4d2:	4335      	orrs	r5, r6
 801c4d4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c4d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c4da:	f108 0801 	add.w	r8, r8, #1
 801c4de:	4410      	add	r0, r2
 801c4e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4e2:	4411      	add	r1, r2
 801c4e4:	e7c9      	b.n	801c47a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c4e6:	fa1f fa82 	uxth.w	sl, r2
 801c4ea:	43d2      	mvns	r2, r2
 801c4ec:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801c4f0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c4f4:	fb17 f70a 	smulbb	r7, r7, sl
 801c4f8:	b2f6      	uxtb	r6, r6
 801c4fa:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c4fe:	fb16 f60a 	smulbb	r6, r6, sl
 801c502:	b2d2      	uxtb	r2, r2
 801c504:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c508:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c50c:	b2ed      	uxtb	r5, r5
 801c50e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c512:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c516:	fb15 f50a 	smulbb	r5, r5, sl
 801c51a:	fa5f fe8e 	uxtb.w	lr, lr
 801c51e:	fb0e 6602 	mla	r6, lr, r2, r6
 801c522:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c526:	fb07 5702 	mla	r7, r7, r2, r5
 801c52a:	fa1f fc8c 	uxth.w	ip, ip
 801c52e:	b2b6      	uxth	r6, r6
 801c530:	f10c 0201 	add.w	r2, ip, #1
 801c534:	1c75      	adds	r5, r6, #1
 801c536:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c53a:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801c53e:	b2bf      	uxth	r7, r7
 801c540:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c544:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c548:	ea45 0c0c 	orr.w	ip, r5, ip
 801c54c:	1c7d      	adds	r5, r7, #1
 801c54e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801c552:	096d      	lsrs	r5, r5, #5
 801c554:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c558:	ea4c 0c05 	orr.w	ip, ip, r5
 801c55c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801c560:	e7ba      	b.n	801c4d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c562:	b007      	add	sp, #28
 801c564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c568:	2004f66c 	.word	0x2004f66c

0801c56c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c56c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c574:	b087      	sub	sp, #28
 801c576:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c578:	9101      	str	r1, [sp, #4]
 801c57a:	6841      	ldr	r1, [r0, #4]
 801c57c:	9205      	str	r2, [sp, #20]
 801c57e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c582:	fb01 2404 	mla	r4, r1, r4, r2
 801c586:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801c58a:	6802      	ldr	r2, [r0, #0]
 801c58c:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801c880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801c590:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c594:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c598:	3201      	adds	r2, #1
 801c59a:	f022 0201 	bic.w	r2, r2, #1
 801c59e:	9202      	str	r2, [sp, #8]
 801c5a0:	f8db 2000 	ldr.w	r2, [fp]
 801c5a4:	9203      	str	r2, [sp, #12]
 801c5a6:	9a01      	ldr	r2, [sp, #4]
 801c5a8:	2a00      	cmp	r2, #0
 801c5aa:	dc03      	bgt.n	801c5b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c5ac:	9a05      	ldr	r2, [sp, #20]
 801c5ae:	2a00      	cmp	r2, #0
 801c5b0:	f340 8162 	ble.w	801c878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c5b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5b6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801c5ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c5be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5c0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801c5c4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	dd0e      	ble.n	801c5ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c5cc:	1402      	asrs	r2, r0, #16
 801c5ce:	d405      	bmi.n	801c5dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5d0:	42ba      	cmp	r2, r7
 801c5d2:	da03      	bge.n	801c5dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5d4:	140a      	asrs	r2, r1, #16
 801c5d6:	d401      	bmi.n	801c5dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c5d8:	42b2      	cmp	r2, r6
 801c5da:	db07      	blt.n	801c5ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c5dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c5de:	3b01      	subs	r3, #1
 801c5e0:	4410      	add	r0, r2
 801c5e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5e4:	3402      	adds	r4, #2
 801c5e6:	4411      	add	r1, r2
 801c5e8:	e7ee      	b.n	801c5c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c5ea:	d017      	beq.n	801c61c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c5ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c5ee:	1e5a      	subs	r2, r3, #1
 801c5f0:	fb05 0502 	mla	r5, r5, r2, r0
 801c5f4:	142d      	asrs	r5, r5, #16
 801c5f6:	d409      	bmi.n	801c60c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c5f8:	42bd      	cmp	r5, r7
 801c5fa:	da07      	bge.n	801c60c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c5fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c5fe:	fb05 1202 	mla	r2, r5, r2, r1
 801c602:	1412      	asrs	r2, r2, #16
 801c604:	d402      	bmi.n	801c60c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c606:	42b2      	cmp	r2, r6
 801c608:	f2c0 80c3 	blt.w	801c792 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801c60c:	2500      	movs	r5, #0
 801c60e:	195a      	adds	r2, r3, r5
 801c610:	2a00      	cmp	r2, #0
 801c612:	dc3f      	bgt.n	801c694 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c614:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c618:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c61c:	9b01      	ldr	r3, [sp, #4]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	f340 812a 	ble.w	801c878 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801c624:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c628:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c62c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c630:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c634:	eeb0 6a62 	vmov.f32	s12, s5
 801c638:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c63c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c640:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c64c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c650:	eeb0 6a43 	vmov.f32	s12, s6
 801c654:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c658:	ee12 2a90 	vmov	r2, s5
 801c65c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c662:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c666:	fb92 f3f3 	sdiv	r3, r2, r3
 801c66a:	ee13 2a10 	vmov	r2, s6
 801c66e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c672:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c676:	fb92 f3f3 	sdiv	r3, r2, r3
 801c67a:	9314      	str	r3, [sp, #80]	; 0x50
 801c67c:	9b01      	ldr	r3, [sp, #4]
 801c67e:	9a05      	ldr	r2, [sp, #20]
 801c680:	3b01      	subs	r3, #1
 801c682:	9301      	str	r3, [sp, #4]
 801c684:	eeb0 3a67 	vmov.f32	s6, s15
 801c688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c68a:	eef0 2a47 	vmov.f32	s5, s14
 801c68e:	bf08      	it	eq
 801c690:	4613      	moveq	r3, r2
 801c692:	e788      	b.n	801c5a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c694:	1406      	asrs	r6, r0, #16
 801c696:	d42c      	bmi.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c698:	f8db 2008 	ldr.w	r2, [fp, #8]
 801c69c:	42b2      	cmp	r2, r6
 801c69e:	dd28      	ble.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c6a0:	140f      	asrs	r7, r1, #16
 801c6a2:	d426      	bmi.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c6a4:	f8db 200c 	ldr.w	r2, [fp, #12]
 801c6a8:	42ba      	cmp	r2, r7
 801c6aa:	dd22      	ble.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c6ac:	9a02      	ldr	r2, [sp, #8]
 801c6ae:	fb07 6602 	mla	r6, r7, r2, r6
 801c6b2:	9f03      	ldr	r7, [sp, #12]
 801c6b4:	0872      	lsrs	r2, r6, #1
 801c6b6:	5cba      	ldrb	r2, [r7, r2]
 801c6b8:	07f6      	lsls	r6, r6, #31
 801c6ba:	bf54      	ite	pl
 801c6bc:	f002 020f 	andpl.w	r2, r2, #15
 801c6c0:	1112      	asrmi	r2, r2, #4
 801c6c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c6c6:	b2d2      	uxtb	r2, r2
 801c6c8:	2aff      	cmp	r2, #255	; 0xff
 801c6ca:	d118      	bne.n	801c6fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c6cc:	f06f 0601 	mvn.w	r6, #1
 801c6d0:	f8d8 2000 	ldr.w	r2, [r8]
 801c6d4:	fb06 f705 	mul.w	r7, r6, r5
 801c6d8:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801c6dc:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801c6e0:	0956      	lsrs	r6, r2, #5
 801c6e2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c6e6:	ea4c 0606 	orr.w	r6, ip, r6
 801c6ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c6ee:	4316      	orrs	r6, r2
 801c6f0:	53e6      	strh	r6, [r4, r7]
 801c6f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c6f4:	3d01      	subs	r5, #1
 801c6f6:	4410      	add	r0, r2
 801c6f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6fa:	4411      	add	r1, r2
 801c6fc:	e787      	b.n	801c60e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c6fe:	2a00      	cmp	r2, #0
 801c700:	d0f7      	beq.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c702:	f06f 0601 	mvn.w	r6, #1
 801c706:	fa1f f982 	uxth.w	r9, r2
 801c70a:	43d2      	mvns	r2, r2
 801c70c:	436e      	muls	r6, r5
 801c70e:	f8d8 c000 	ldr.w	ip, [r8]
 801c712:	f834 e006 	ldrh.w	lr, [r4, r6]
 801c716:	9604      	str	r6, [sp, #16]
 801c718:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801c71c:	fb16 f609 	smulbb	r6, r6, r9
 801c720:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801c724:	fa5f fc8c 	uxtb.w	ip, ip
 801c728:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c72c:	fb1c fc09 	smulbb	ip, ip, r9
 801c730:	b2d2      	uxtb	r2, r2
 801c732:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c736:	fb07 6702 	mla	r7, r7, r2, r6
 801c73a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c73e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c742:	fb1a fa09 	smulbb	sl, sl, r9
 801c746:	fa5f fe8e 	uxtb.w	lr, lr
 801c74a:	fb0e cc02 	mla	ip, lr, r2, ip
 801c74e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c752:	fb06 a602 	mla	r6, r6, r2, sl
 801c756:	b2bf      	uxth	r7, r7
 801c758:	fa1f fc8c 	uxth.w	ip, ip
 801c75c:	1c7a      	adds	r2, r7, #1
 801c75e:	f10c 0a01 	add.w	sl, ip, #1
 801c762:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c766:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801c76a:	b2b6      	uxth	r6, r6
 801c76c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c770:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c774:	ea4a 0707 	orr.w	r7, sl, r7
 801c778:	f106 0a01 	add.w	sl, r6, #1
 801c77c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c780:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c784:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c788:	9a04      	ldr	r2, [sp, #16]
 801c78a:	ea47 070a 	orr.w	r7, r7, sl
 801c78e:	52a7      	strh	r7, [r4, r2]
 801c790:	e7af      	b.n	801c6f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801c792:	f04f 0e00 	mov.w	lr, #0
 801c796:	eba3 020e 	sub.w	r2, r3, lr
 801c79a:	2a00      	cmp	r2, #0
 801c79c:	f77f af3a 	ble.w	801c614 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c7a0:	9e02      	ldr	r6, [sp, #8]
 801c7a2:	1402      	asrs	r2, r0, #16
 801c7a4:	140d      	asrs	r5, r1, #16
 801c7a6:	fb06 2505 	mla	r5, r6, r5, r2
 801c7aa:	9e03      	ldr	r6, [sp, #12]
 801c7ac:	086a      	lsrs	r2, r5, #1
 801c7ae:	5cb2      	ldrb	r2, [r6, r2]
 801c7b0:	07ed      	lsls	r5, r5, #31
 801c7b2:	bf54      	ite	pl
 801c7b4:	f002 020f 	andpl.w	r2, r2, #15
 801c7b8:	1112      	asrmi	r2, r2, #4
 801c7ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c7be:	b2d2      	uxtb	r2, r2
 801c7c0:	2aff      	cmp	r2, #255	; 0xff
 801c7c2:	d115      	bne.n	801c7f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c7c4:	f8d8 5000 	ldr.w	r5, [r8]
 801c7c8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801c7cc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801c7d0:	096a      	lsrs	r2, r5, #5
 801c7d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c7d6:	4332      	orrs	r2, r6
 801c7d8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c7dc:	432a      	orrs	r2, r5
 801c7de:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801c7e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7e4:	f10e 0e01 	add.w	lr, lr, #1
 801c7e8:	4410      	add	r0, r2
 801c7ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7ec:	4411      	add	r1, r2
 801c7ee:	e7d2      	b.n	801c796 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c7f0:	2a00      	cmp	r2, #0
 801c7f2:	d0f6      	beq.n	801c7e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c7f4:	fa1f f982 	uxth.w	r9, r2
 801c7f8:	43d2      	mvns	r2, r2
 801c7fa:	f8d8 7000 	ldr.w	r7, [r8]
 801c7fe:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c802:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801c806:	fb15 f509 	smulbb	r5, r5, r9
 801c80a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c80e:	b2ff      	uxtb	r7, r7
 801c810:	ea4f 262c 	mov.w	r6, ip, asr #8
 801c814:	fb17 f709 	smulbb	r7, r7, r9
 801c818:	b2d2      	uxtb	r2, r2
 801c81a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c81e:	fb06 5602 	mla	r6, r6, r2, r5
 801c822:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c826:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c82a:	fb1a fa09 	smulbb	sl, sl, r9
 801c82e:	fa5f fc8c 	uxtb.w	ip, ip
 801c832:	fb0c 7702 	mla	r7, ip, r2, r7
 801c836:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c83a:	fb05 a502 	mla	r5, r5, r2, sl
 801c83e:	b2b6      	uxth	r6, r6
 801c840:	b2bf      	uxth	r7, r7
 801c842:	1c72      	adds	r2, r6, #1
 801c844:	f107 0a01 	add.w	sl, r7, #1
 801c848:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801c84c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c850:	b2ad      	uxth	r5, r5
 801c852:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c856:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801c85a:	ea4a 0606 	orr.w	r6, sl, r6
 801c85e:	f105 0a01 	add.w	sl, r5, #1
 801c862:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c866:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c86a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c86e:	ea46 060a 	orr.w	r6, r6, sl
 801c872:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801c876:	e7b4      	b.n	801c7e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c878:	b007      	add	sp, #28
 801c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c87e:	bf00      	nop
 801c880:	2004f66c 	.word	0x2004f66c

0801c884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c884:	4770      	bx	lr

0801c886 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c886:	4770      	bx	lr

0801c888 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c888:	4770      	bx	lr

0801c88a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c88a:	4770      	bx	lr

0801c88c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c88c:	4770      	bx	lr

0801c88e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c88e:	4770      	bx	lr

0801c890 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c890:	4770      	bx	lr

0801c892 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c892:	4770      	bx	lr

0801c894 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c894:	4770      	bx	lr

0801c896 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c896:	4770      	bx	lr

0801c898 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c898:	4770      	bx	lr

0801c89a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c89a:	4770      	bx	lr

0801c89c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c89c:	4770      	bx	lr

0801c89e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c89e:	4770      	bx	lr

0801c8a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c8a0:	4770      	bx	lr

0801c8a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c8a2:	4770      	bx	lr

0801c8a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c8a4:	4770      	bx	lr

0801c8a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c8a6:	4770      	bx	lr

0801c8a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c8a8:	4770      	bx	lr

0801c8aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c8aa:	4770      	bx	lr

0801c8ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c8ac:	4770      	bx	lr

0801c8ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c8ae:	4770      	bx	lr

0801c8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c8b0:	4770      	bx	lr

0801c8b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c8b2:	4770      	bx	lr

0801c8b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c8b4:	4770      	bx	lr

0801c8b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801c8b6:	4770      	bx	lr

0801c8b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c8b8:	4770      	bx	lr

0801c8ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801c8ba:	4770      	bx	lr

0801c8bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8c0:	b088      	sub	sp, #32
 801c8c2:	ac08      	add	r4, sp, #32
 801c8c4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c8c8:	4606      	mov	r6, r0
 801c8ca:	4620      	mov	r0, r4
 801c8cc:	4688      	mov	r8, r1
 801c8ce:	4691      	mov	r9, r2
 801c8d0:	f7fd fc66 	bl	801a1a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c8d4:	6833      	ldr	r3, [r6, #0]
 801c8d6:	4605      	mov	r5, r0
 801c8d8:	4620      	mov	r0, r4
 801c8da:	699f      	ldr	r7, [r3, #24]
 801c8dc:	f7fd fb74 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c8e0:	4682      	mov	sl, r0
 801c8e2:	4620      	mov	r0, r4
 801c8e4:	f7fd fba4 	bl	801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c8e8:	9500      	str	r5, [sp, #0]
 801c8ea:	e9cd a001 	strd	sl, r0, [sp, #4]
 801c8ee:	464b      	mov	r3, r9
 801c8f0:	a806      	add	r0, sp, #24
 801c8f2:	4642      	mov	r2, r8
 801c8f4:	4631      	mov	r1, r6
 801c8f6:	47b8      	blx	r7
 801c8f8:	4628      	mov	r0, r5
 801c8fa:	b008      	add	sp, #32
 801c8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801c900 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c904:	2300      	movs	r3, #0
 801c906:	9300      	str	r3, [sp, #0]
 801c908:	4b3d      	ldr	r3, [pc, #244]	; (801ca00 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d137      	bne.n	801c980 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801c910:	4a3c      	ldr	r2, [pc, #240]	; (801ca04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c912:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c916:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d132      	bne.n	801c984 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801c91e:	4b3a      	ldr	r3, [pc, #232]	; (801ca08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c920:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c924:	6808      	ldr	r0, [r1, #0]
 801c926:	6849      	ldr	r1, [r1, #4]
 801c928:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c92c:	ac02      	add	r4, sp, #8
 801c92e:	ab02      	add	r3, sp, #8
 801c930:	c303      	stmia	r3!, {r0, r1}
 801c932:	4669      	mov	r1, sp
 801c934:	4620      	mov	r0, r4
 801c936:	f7fa fd2d 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c93a:	4668      	mov	r0, sp
 801c93c:	f7fa fd02 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c940:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c944:	f8bd 2000 	ldrh.w	r2, [sp]
 801c948:	4d30      	ldr	r5, [pc, #192]	; (801ca0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801c94a:	4413      	add	r3, r2
 801c94c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c950:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c958:	6828      	ldr	r0, [r5, #0]
 801c95a:	4413      	add	r3, r2
 801c95c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c960:	6803      	ldr	r3, [r0, #0]
 801c962:	462f      	mov	r7, r5
 801c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c966:	4798      	blx	r3
 801c968:	f010 0f01 	tst.w	r0, #1
 801c96c:	d00c      	beq.n	801c988 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801c96e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c972:	6828      	ldr	r0, [r5, #0]
 801c974:	6803      	ldr	r3, [r0, #0]
 801c976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c978:	4798      	blx	r3
 801c97a:	b004      	add	sp, #16
 801c97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c980:	4a21      	ldr	r2, [pc, #132]	; (801ca08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801c982:	e7c6      	b.n	801c912 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c984:	4b1f      	ldr	r3, [pc, #124]	; (801ca04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c986:	e7cb      	b.n	801c920 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c988:	6838      	ldr	r0, [r7, #0]
 801c98a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c98e:	6803      	ldr	r3, [r0, #0]
 801c990:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801c994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c996:	4798      	blx	r3
 801c998:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c99c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c9a0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801c9a4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801c9a8:	fb16 3602 	smlabb	r6, r6, r2, r3
 801c9ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c9b0:	6838      	ldr	r0, [r7, #0]
 801c9b2:	6803      	ldr	r3, [r0, #0]
 801c9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9b6:	4798      	blx	r3
 801c9b8:	4a12      	ldr	r2, [pc, #72]	; (801ca04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801c9ba:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801c9be:	4691      	mov	r9, r2
 801c9c0:	8813      	ldrh	r3, [r2, #0]
 801c9c2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801c9c6:	435d      	muls	r5, r3
 801c9c8:	fb03 1404 	mla	r4, r3, r4, r1
 801c9cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c9d0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801c9d4:	6838      	ldr	r0, [r7, #0]
 801c9d6:	42ac      	cmp	r4, r5
 801c9d8:	6803      	ldr	r3, [r0, #0]
 801c9da:	d20e      	bcs.n	801c9fa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801c9dc:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801c9e0:	4632      	mov	r2, r6
 801c9e2:	4643      	mov	r3, r8
 801c9e4:	4621      	mov	r1, r4
 801c9e6:	47d0      	blx	sl
 801c9e8:	f8b9 3000 	ldrh.w	r3, [r9]
 801c9ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c9f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c9f4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801c9f8:	e7ec      	b.n	801c9d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c9fc:	4798      	blx	r3
 801c9fe:	e7bc      	b.n	801c97a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ca00:	2004f654 	.word	0x2004f654
 801ca04:	2004f656 	.word	0x2004f656
 801ca08:	2004f658 	.word	0x2004f658
 801ca0c:	2004f65c 	.word	0x2004f65c

0801ca10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca14:	b08b      	sub	sp, #44	; 0x2c
 801ca16:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801ca1a:	460f      	mov	r7, r1
 801ca1c:	4616      	mov	r6, r2
 801ca1e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ca22:	f1bb 0f00 	cmp.w	fp, #0
 801ca26:	d049      	beq.n	801cabc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ca28:	6810      	ldr	r0, [r2, #0]
 801ca2a:	6851      	ldr	r1, [r2, #4]
 801ca2c:	ad06      	add	r5, sp, #24
 801ca2e:	c503      	stmia	r5!, {r0, r1}
 801ca30:	6818      	ldr	r0, [r3, #0]
 801ca32:	6859      	ldr	r1, [r3, #4]
 801ca34:	ad08      	add	r5, sp, #32
 801ca36:	c503      	stmia	r5!, {r0, r1}
 801ca38:	a806      	add	r0, sp, #24
 801ca3a:	f7fa fc83 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca3e:	4631      	mov	r1, r6
 801ca40:	a808      	add	r0, sp, #32
 801ca42:	f7fa fca7 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca46:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ca4a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ca4e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ca52:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ca56:	fb16 2103 	smlabb	r1, r6, r3, r2
 801ca5a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801ca5e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ca62:	4f60      	ldr	r7, [pc, #384]	; (801cbe4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ca64:	440a      	add	r2, r1
 801ca66:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ca6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ca6e:	6838      	ldr	r0, [r7, #0]
 801ca70:	4413      	add	r3, r2
 801ca72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ca76:	6803      	ldr	r3, [r0, #0]
 801ca78:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801ca7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca7e:	4798      	blx	r3
 801ca80:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ca84:	46b9      	mov	r9, r7
 801ca86:	d01c      	beq.n	801cac2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ca88:	f010 0f04 	tst.w	r0, #4
 801ca8c:	d01d      	beq.n	801caca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ca8e:	2700      	movs	r7, #0
 801ca90:	f8d9 0000 	ldr.w	r0, [r9]
 801ca94:	b2ad      	uxth	r5, r5
 801ca96:	6801      	ldr	r1, [r0, #0]
 801ca98:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801ca9c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801caa0:	f8cd b00c 	str.w	fp, [sp, #12]
 801caa4:	9402      	str	r4, [sp, #8]
 801caa6:	fa1f f488 	uxth.w	r4, r8
 801caaa:	9501      	str	r5, [sp, #4]
 801caac:	9400      	str	r4, [sp, #0]
 801caae:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801cab0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cab4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cab8:	4631      	mov	r1, r6
 801caba:	47a0      	blx	r4
 801cabc:	b00b      	add	sp, #44	; 0x2c
 801cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cac2:	b914      	cbnz	r4, 801caca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801cac4:	f010 0f01 	tst.w	r0, #1
 801cac8:	e7e0      	b.n	801ca8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801caca:	f8d9 0000 	ldr.w	r0, [r9]
 801cace:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801cad2:	6803      	ldr	r3, [r0, #0]
 801cad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cad6:	4798      	blx	r3
 801cad8:	4b43      	ldr	r3, [pc, #268]	; (801cbe8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801cada:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801cade:	881a      	ldrh	r2, [r3, #0]
 801cae0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801cae4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801cae8:	fb02 1404 	mla	r4, r2, r4, r1
 801caec:	469a      	mov	sl, r3
 801caee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801caf2:	fb05 f502 	mul.w	r5, r5, r2
 801caf6:	d059      	beq.n	801cbac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801caf8:	469e      	mov	lr, r3
 801cafa:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801cafe:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cb02:	fa1f f28b 	uxth.w	r2, fp
 801cb06:	fa1f f989 	uxth.w	r9, r9
 801cb0a:	42ac      	cmp	r4, r5
 801cb0c:	d264      	bcs.n	801cbd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cb0e:	eb04 0a07 	add.w	sl, r4, r7
 801cb12:	4554      	cmp	r4, sl
 801cb14:	d23d      	bcs.n	801cb92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801cb16:	8821      	ldrh	r1, [r4, #0]
 801cb18:	f836 3b02 	ldrh.w	r3, [r6], #2
 801cb1c:	1208      	asrs	r0, r1, #8
 801cb1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cb22:	fb10 f009 	smulbb	r0, r0, r9
 801cb26:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801cb2a:	00c9      	lsls	r1, r1, #3
 801cb2c:	b2c9      	uxtb	r1, r1
 801cb2e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801cb32:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cb36:	fb11 f109 	smulbb	r1, r1, r9
 801cb3a:	fb1b fb09 	smulbb	fp, fp, r9
 801cb3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb42:	fb0c 0c02 	mla	ip, ip, r2, r0
 801cb46:	10d8      	asrs	r0, r3, #3
 801cb48:	00db      	lsls	r3, r3, #3
 801cb4a:	b2db      	uxtb	r3, r3
 801cb4c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801cb50:	fb03 1302 	mla	r3, r3, r2, r1
 801cb54:	fb00 b002 	mla	r0, r0, r2, fp
 801cb58:	fa1f fc8c 	uxth.w	ip, ip
 801cb5c:	f10c 0b01 	add.w	fp, ip, #1
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cb66:	b280      	uxth	r0, r0
 801cb68:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801cb6c:	f103 0c01 	add.w	ip, r3, #1
 801cb70:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801cb74:	1c43      	adds	r3, r0, #1
 801cb76:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cb7a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801cb7e:	0940      	lsrs	r0, r0, #5
 801cb80:	ea4c 0c0b 	orr.w	ip, ip, fp
 801cb84:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cb88:	ea4c 0c00 	orr.w	ip, ip, r0
 801cb8c:	f824 cb02 	strh.w	ip, [r4], #2
 801cb90:	e7bf      	b.n	801cb12 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801cb92:	f8be 3000 	ldrh.w	r3, [lr]
 801cb96:	eba3 0308 	sub.w	r3, r3, r8
 801cb9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cb9e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cba2:	eba3 0308 	sub.w	r3, r3, r8
 801cba6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cbaa:	e7ae      	b.n	801cb0a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801cbac:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801cbb0:	f8d9 0000 	ldr.w	r0, [r9]
 801cbb4:	42ac      	cmp	r4, r5
 801cbb6:	6803      	ldr	r3, [r0, #0]
 801cbb8:	d20e      	bcs.n	801cbd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801cbba:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801cbbe:	4632      	mov	r2, r6
 801cbc0:	463b      	mov	r3, r7
 801cbc2:	4621      	mov	r1, r4
 801cbc4:	47c0      	blx	r8
 801cbc6:	f8ba 3000 	ldrh.w	r3, [sl]
 801cbca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cbce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cbd2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801cbd6:	e7eb      	b.n	801cbb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801cbd8:	4b02      	ldr	r3, [pc, #8]	; (801cbe4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801cbda:	6818      	ldr	r0, [r3, #0]
 801cbdc:	6803      	ldr	r3, [r0, #0]
 801cbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbe0:	4798      	blx	r3
 801cbe2:	e76b      	b.n	801cabc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801cbe4:	2004f65c 	.word	0x2004f65c
 801cbe8:	2004f656 	.word	0x2004f656

0801cbec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cbec:	b510      	push	{r4, lr}
 801cbee:	4604      	mov	r4, r0
 801cbf0:	2104      	movs	r1, #4
 801cbf2:	f009 faa9 	bl	8026148 <_ZdlPvj>
 801cbf6:	4620      	mov	r0, r4
 801cbf8:	bd10      	pop	{r4, pc}

0801cbfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801cbfa:	b510      	push	{r4, lr}
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	2104      	movs	r1, #4
 801cc00:	f009 faa2 	bl	8026148 <_ZdlPvj>
 801cc04:	4620      	mov	r0, r4
 801cc06:	bd10      	pop	{r4, pc}

0801cc08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc08:	b510      	push	{r4, lr}
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	2104      	movs	r1, #4
 801cc0e:	f009 fa9b 	bl	8026148 <_ZdlPvj>
 801cc12:	4620      	mov	r0, r4
 801cc14:	bd10      	pop	{r4, pc}

0801cc16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801cc16:	b510      	push	{r4, lr}
 801cc18:	4604      	mov	r4, r0
 801cc1a:	2104      	movs	r1, #4
 801cc1c:	f009 fa94 	bl	8026148 <_ZdlPvj>
 801cc20:	4620      	mov	r0, r4
 801cc22:	bd10      	pop	{r4, pc}

0801cc24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cc24:	b510      	push	{r4, lr}
 801cc26:	4604      	mov	r4, r0
 801cc28:	2104      	movs	r1, #4
 801cc2a:	f009 fa8d 	bl	8026148 <_ZdlPvj>
 801cc2e:	4620      	mov	r0, r4
 801cc30:	bd10      	pop	{r4, pc}

0801cc32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cc32:	b510      	push	{r4, lr}
 801cc34:	4604      	mov	r4, r0
 801cc36:	2104      	movs	r1, #4
 801cc38:	f009 fa86 	bl	8026148 <_ZdlPvj>
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	bd10      	pop	{r4, pc}

0801cc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc40:	b510      	push	{r4, lr}
 801cc42:	4604      	mov	r4, r0
 801cc44:	2104      	movs	r1, #4
 801cc46:	f009 fa7f 	bl	8026148 <_ZdlPvj>
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	bd10      	pop	{r4, pc}

0801cc4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cc4e:	b510      	push	{r4, lr}
 801cc50:	4604      	mov	r4, r0
 801cc52:	2104      	movs	r1, #4
 801cc54:	f009 fa78 	bl	8026148 <_ZdlPvj>
 801cc58:	4620      	mov	r0, r4
 801cc5a:	bd10      	pop	{r4, pc}

0801cc5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc5c:	b510      	push	{r4, lr}
 801cc5e:	4604      	mov	r4, r0
 801cc60:	2104      	movs	r1, #4
 801cc62:	f009 fa71 	bl	8026148 <_ZdlPvj>
 801cc66:	4620      	mov	r0, r4
 801cc68:	bd10      	pop	{r4, pc}

0801cc6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc6a:	b510      	push	{r4, lr}
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	2104      	movs	r1, #4
 801cc70:	f009 fa6a 	bl	8026148 <_ZdlPvj>
 801cc74:	4620      	mov	r0, r4
 801cc76:	bd10      	pop	{r4, pc}

0801cc78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc78:	b510      	push	{r4, lr}
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	2104      	movs	r1, #4
 801cc7e:	f009 fa63 	bl	8026148 <_ZdlPvj>
 801cc82:	4620      	mov	r0, r4
 801cc84:	bd10      	pop	{r4, pc}

0801cc86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc86:	b510      	push	{r4, lr}
 801cc88:	4604      	mov	r4, r0
 801cc8a:	2104      	movs	r1, #4
 801cc8c:	f009 fa5c 	bl	8026148 <_ZdlPvj>
 801cc90:	4620      	mov	r0, r4
 801cc92:	bd10      	pop	{r4, pc}

0801cc94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cc94:	b510      	push	{r4, lr}
 801cc96:	4604      	mov	r4, r0
 801cc98:	2104      	movs	r1, #4
 801cc9a:	f009 fa55 	bl	8026148 <_ZdlPvj>
 801cc9e:	4620      	mov	r0, r4
 801cca0:	bd10      	pop	{r4, pc}

0801cca2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801cca2:	b510      	push	{r4, lr}
 801cca4:	4604      	mov	r4, r0
 801cca6:	2104      	movs	r1, #4
 801cca8:	f009 fa4e 	bl	8026148 <_ZdlPvj>
 801ccac:	4620      	mov	r0, r4
 801ccae:	bd10      	pop	{r4, pc}

0801ccb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ccb0:	b510      	push	{r4, lr}
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	2104      	movs	r1, #4
 801ccb6:	f009 fa47 	bl	8026148 <_ZdlPvj>
 801ccba:	4620      	mov	r0, r4
 801ccbc:	bd10      	pop	{r4, pc}

0801ccbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ccbe:	b510      	push	{r4, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	2104      	movs	r1, #4
 801ccc4:	f009 fa40 	bl	8026148 <_ZdlPvj>
 801ccc8:	4620      	mov	r0, r4
 801ccca:	bd10      	pop	{r4, pc}

0801cccc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cccc:	b510      	push	{r4, lr}
 801ccce:	4604      	mov	r4, r0
 801ccd0:	2104      	movs	r1, #4
 801ccd2:	f009 fa39 	bl	8026148 <_ZdlPvj>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	bd10      	pop	{r4, pc}

0801ccda <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ccda:	b510      	push	{r4, lr}
 801ccdc:	4604      	mov	r4, r0
 801ccde:	2104      	movs	r1, #4
 801cce0:	f009 fa32 	bl	8026148 <_ZdlPvj>
 801cce4:	4620      	mov	r0, r4
 801cce6:	bd10      	pop	{r4, pc}

0801cce8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cce8:	b510      	push	{r4, lr}
 801ccea:	4604      	mov	r4, r0
 801ccec:	2104      	movs	r1, #4
 801ccee:	f009 fa2b 	bl	8026148 <_ZdlPvj>
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	bd10      	pop	{r4, pc}

0801ccf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ccf6:	b510      	push	{r4, lr}
 801ccf8:	4604      	mov	r4, r0
 801ccfa:	2104      	movs	r1, #4
 801ccfc:	f009 fa24 	bl	8026148 <_ZdlPvj>
 801cd00:	4620      	mov	r0, r4
 801cd02:	bd10      	pop	{r4, pc}

0801cd04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cd04:	b510      	push	{r4, lr}
 801cd06:	4604      	mov	r4, r0
 801cd08:	2104      	movs	r1, #4
 801cd0a:	f009 fa1d 	bl	8026148 <_ZdlPvj>
 801cd0e:	4620      	mov	r0, r4
 801cd10:	bd10      	pop	{r4, pc}

0801cd12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cd12:	b510      	push	{r4, lr}
 801cd14:	4604      	mov	r4, r0
 801cd16:	2104      	movs	r1, #4
 801cd18:	f009 fa16 	bl	8026148 <_ZdlPvj>
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	bd10      	pop	{r4, pc}

0801cd20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cd20:	b510      	push	{r4, lr}
 801cd22:	4604      	mov	r4, r0
 801cd24:	2104      	movs	r1, #4
 801cd26:	f009 fa0f 	bl	8026148 <_ZdlPvj>
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	bd10      	pop	{r4, pc}

0801cd2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cd2e:	b510      	push	{r4, lr}
 801cd30:	4604      	mov	r4, r0
 801cd32:	2104      	movs	r1, #4
 801cd34:	f009 fa08 	bl	8026148 <_ZdlPvj>
 801cd38:	4620      	mov	r0, r4
 801cd3a:	bd10      	pop	{r4, pc}

0801cd3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cd3c:	b510      	push	{r4, lr}
 801cd3e:	4604      	mov	r4, r0
 801cd40:	2104      	movs	r1, #4
 801cd42:	f009 fa01 	bl	8026148 <_ZdlPvj>
 801cd46:	4620      	mov	r0, r4
 801cd48:	bd10      	pop	{r4, pc}

0801cd4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cd4a:	b510      	push	{r4, lr}
 801cd4c:	4604      	mov	r4, r0
 801cd4e:	2104      	movs	r1, #4
 801cd50:	f009 f9fa 	bl	8026148 <_ZdlPvj>
 801cd54:	4620      	mov	r0, r4
 801cd56:	bd10      	pop	{r4, pc}

0801cd58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cd58:	b510      	push	{r4, lr}
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	2104      	movs	r1, #4
 801cd5e:	f009 f9f3 	bl	8026148 <_ZdlPvj>
 801cd62:	4620      	mov	r0, r4
 801cd64:	bd10      	pop	{r4, pc}

0801cd66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801cd66:	b510      	push	{r4, lr}
 801cd68:	4604      	mov	r4, r0
 801cd6a:	2104      	movs	r1, #4
 801cd6c:	f009 f9ec 	bl	8026148 <_ZdlPvj>
 801cd70:	4620      	mov	r0, r4
 801cd72:	bd10      	pop	{r4, pc}

0801cd74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd78:	469b      	mov	fp, r3
 801cd7a:	4616      	mov	r6, r2
 801cd7c:	b091      	sub	sp, #68	; 0x44
 801cd7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd82:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801cd86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cd8a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801cd8e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801cd92:	4604      	mov	r4, r0
 801cd94:	460d      	mov	r5, r1
 801cd96:	4640      	mov	r0, r8
 801cd98:	4659      	mov	r1, fp
 801cd9a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801cd9e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801cda2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801cda6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801cdaa:	f7f6 fd7f 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 801cdae:	4631      	mov	r1, r6
 801cdb0:	4640      	mov	r0, r8
 801cdb2:	f7f6 fd7b 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 801cdb6:	4b74      	ldr	r3, [pc, #464]	; (801cf88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801cdb8:	8818      	ldrh	r0, [r3, #0]
 801cdba:	4b74      	ldr	r3, [pc, #464]	; (801cf8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801cdbc:	b202      	sxth	r2, r0
 801cdbe:	8819      	ldrh	r1, [r3, #0]
 801cdc0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cdc4:	b20e      	sxth	r6, r1
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	da07      	bge.n	801cdda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801cdca:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801cdce:	4463      	add	r3, ip
 801cdd0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801cdda:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801cdde:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801cde2:	1ad2      	subs	r2, r2, r3
 801cde4:	4594      	cmp	ip, r2
 801cde6:	bfc4      	itt	gt
 801cde8:	1ac2      	subgt	r2, r0, r3
 801cdea:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801cdee:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cdf2:	2a00      	cmp	r2, #0
 801cdf4:	da07      	bge.n	801ce06 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801cdf6:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801cdfa:	4462      	add	r2, ip
 801cdfc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801ce00:	2200      	movs	r2, #0
 801ce02:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801ce06:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801ce0a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ce0e:	eba6 060a 	sub.w	r6, r6, sl
 801ce12:	42b2      	cmp	r2, r6
 801ce14:	bfc4      	itt	gt
 801ce16:	eba1 020a 	subgt.w	r2, r1, sl
 801ce1a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801ce1e:	4a5c      	ldr	r2, [pc, #368]	; (801cf90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801ce20:	7812      	ldrb	r2, [r2, #0]
 801ce22:	b9a2      	cbnz	r2, 801ce4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801ce24:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801ce28:	4286      	cmp	r6, r0
 801ce2a:	4640      	mov	r0, r8
 801ce2c:	9303      	str	r3, [sp, #12]
 801ce2e:	bf14      	ite	ne
 801ce30:	2600      	movne	r6, #0
 801ce32:	2601      	moveq	r6, #1
 801ce34:	f7f6 fd7d 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ce38:	9b03      	ldr	r3, [sp, #12]
 801ce3a:	b160      	cbz	r0, 801ce56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	8023      	strh	r3, [r4, #0]
 801ce40:	8063      	strh	r3, [r4, #2]
 801ce42:	80a3      	strh	r3, [r4, #4]
 801ce44:	4620      	mov	r0, r4
 801ce46:	80e3      	strh	r3, [r4, #6]
 801ce48:	b011      	add	sp, #68	; 0x44
 801ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce4e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ce52:	428e      	cmp	r6, r1
 801ce54:	e7e9      	b.n	801ce2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801ce56:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ce5a:	a90e      	add	r1, sp, #56	; 0x38
 801ce5c:	9205      	str	r2, [sp, #20]
 801ce5e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ce62:	900e      	str	r0, [sp, #56]	; 0x38
 801ce64:	9206      	str	r2, [sp, #24]
 801ce66:	f8bb 2000 	ldrh.w	r2, [fp]
 801ce6a:	a80c      	add	r0, sp, #48	; 0x30
 801ce6c:	1a9b      	subs	r3, r3, r2
 801ce6e:	b21b      	sxth	r3, r3
 801ce70:	9303      	str	r3, [sp, #12]
 801ce72:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801ce76:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801ce7a:	ebaa 0a03 	sub.w	sl, sl, r3
 801ce7e:	fa0f f38a 	sxth.w	r3, sl
 801ce82:	9304      	str	r3, [sp, #16]
 801ce84:	9b03      	ldr	r3, [sp, #12]
 801ce86:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801ce8a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801ce8e:	9b04      	ldr	r3, [sp, #16]
 801ce90:	f8df b104 	ldr.w	fp, [pc, #260]	; 801cf98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801ce94:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ce98:	9b05      	ldr	r3, [sp, #20]
 801ce9a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ce9e:	9b06      	ldr	r3, [sp, #24]
 801cea0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801cea4:	f7fa fa76 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cea8:	4640      	mov	r0, r8
 801ceaa:	f7fa fa4b 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ceae:	a80e      	add	r0, sp, #56	; 0x38
 801ceb0:	f7fa fa48 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ceb4:	4b37      	ldr	r3, [pc, #220]	; (801cf94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	881b      	ldrh	r3, [r3, #0]
 801ceba:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cebe:	9307      	str	r3, [sp, #28]
 801cec0:	682b      	ldr	r3, [r5, #0]
 801cec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cec4:	4798      	blx	r3
 801cec6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801ceca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cece:	4681      	mov	r9, r0
 801ced0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801ced4:	f8db 0000 	ldr.w	r0, [fp]
 801ced8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ceda:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801cede:	6803      	ldr	r3, [r0, #0]
 801cee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cee2:	4798      	blx	r3
 801cee4:	4607      	mov	r7, r0
 801cee6:	f8db 0000 	ldr.w	r0, [fp]
 801ceea:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ceee:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801cef2:	6803      	ldr	r3, [r0, #0]
 801cef4:	9109      	str	r1, [sp, #36]	; 0x24
 801cef6:	9208      	str	r2, [sp, #32]
 801cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cefa:	4798      	blx	r3
 801cefc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cf00:	f010 0f01 	tst.w	r0, #1
 801cf04:	d012      	beq.n	801cf2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801cf06:	f8db 0000 	ldr.w	r0, [fp]
 801cf0a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801cf0e:	6803      	ldr	r3, [r0, #0]
 801cf10:	9200      	str	r2, [sp, #0]
 801cf12:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801cf14:	e898 0006 	ldmia.w	r8, {r1, r2}
 801cf18:	462b      	mov	r3, r5
 801cf1a:	47b0      	blx	r6
 801cf1c:	9b03      	ldr	r3, [sp, #12]
 801cf1e:	8023      	strh	r3, [r4, #0]
 801cf20:	9b04      	ldr	r3, [sp, #16]
 801cf22:	8063      	strh	r3, [r4, #2]
 801cf24:	9b05      	ldr	r3, [sp, #20]
 801cf26:	80a3      	strh	r3, [r4, #4]
 801cf28:	9b06      	ldr	r3, [sp, #24]
 801cf2a:	e78b      	b.n	801ce44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801cf2c:	fb09 f202 	mul.w	r2, r9, r2
 801cf30:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801cf34:	440f      	add	r7, r1
 801cf36:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801cf3a:	b166      	cbz	r6, 801cf56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801cf3c:	9a07      	ldr	r2, [sp, #28]
 801cf3e:	4592      	cmp	sl, r2
 801cf40:	d109      	bne.n	801cf56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801cf42:	f8db 0000 	ldr.w	r0, [fp]
 801cf46:	fb09 f303 	mul.w	r3, r9, r3
 801cf4a:	6802      	ldr	r2, [r0, #0]
 801cf4c:	4629      	mov	r1, r5
 801cf4e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801cf50:	463a      	mov	r2, r7
 801cf52:	47b0      	blx	r6
 801cf54:	e7e2      	b.n	801cf1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801cf56:	fb0a f303 	mul.w	r3, sl, r3
 801cf5a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801cf98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801cf5e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801cf62:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801cf66:	4545      	cmp	r5, r8
 801cf68:	d2d8      	bcs.n	801cf1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801cf6a:	f8db 0000 	ldr.w	r0, [fp]
 801cf6e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801cf72:	6802      	ldr	r2, [r0, #0]
 801cf74:	4629      	mov	r1, r5
 801cf76:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801cf7a:	005b      	lsls	r3, r3, #1
 801cf7c:	463a      	mov	r2, r7
 801cf7e:	47d0      	blx	sl
 801cf80:	444f      	add	r7, r9
 801cf82:	4435      	add	r5, r6
 801cf84:	e7ef      	b.n	801cf66 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801cf86:	bf00      	nop
 801cf88:	2004f650 	.word	0x2004f650
 801cf8c:	2004f652 	.word	0x2004f652
 801cf90:	2004f654 	.word	0x2004f654
 801cf94:	2004f656 	.word	0x2004f656
 801cf98:	2004f65c 	.word	0x2004f65c

0801cf9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf9e:	4606      	mov	r6, r0
 801cfa0:	b087      	sub	sp, #28
 801cfa2:	460c      	mov	r4, r1
 801cfa4:	4617      	mov	r7, r2
 801cfa6:	461d      	mov	r5, r3
 801cfa8:	b333      	cbz	r3, 801cff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cfaa:	4608      	mov	r0, r1
 801cfac:	f7f6 fcc1 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cfb0:	bb10      	cbnz	r0, 801cff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cfb2:	6820      	ldr	r0, [r4, #0]
 801cfb4:	6861      	ldr	r1, [r4, #4]
 801cfb6:	ab04      	add	r3, sp, #16
 801cfb8:	4c1b      	ldr	r4, [pc, #108]	; (801d028 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801cfba:	c303      	stmia	r3!, {r0, r1}
 801cfbc:	a804      	add	r0, sp, #16
 801cfbe:	f7fa f9c1 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfc2:	6820      	ldr	r0, [r4, #0]
 801cfc4:	6803      	ldr	r3, [r0, #0]
 801cfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfc8:	4798      	blx	r3
 801cfca:	2dff      	cmp	r5, #255	; 0xff
 801cfcc:	d016      	beq.n	801cffc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801cfce:	f010 0f08 	tst.w	r0, #8
 801cfd2:	6820      	ldr	r0, [r4, #0]
 801cfd4:	d015      	beq.n	801d002 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801cfd6:	2400      	movs	r4, #0
 801cfd8:	6801      	ldr	r1, [r0, #0]
 801cfda:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801cfde:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cfe2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cfe6:	9401      	str	r4, [sp, #4]
 801cfe8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cfec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cff0:	9400      	str	r4, [sp, #0]
 801cff2:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cff4:	4639      	mov	r1, r7
 801cff6:	47a0      	blx	r4
 801cff8:	b007      	add	sp, #28
 801cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cffc:	f010 0f02 	tst.w	r0, #2
 801d000:	e7e7      	b.n	801cfd2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801d002:	6803      	ldr	r3, [r0, #0]
 801d004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d006:	4798      	blx	r3
 801d008:	4b08      	ldr	r3, [pc, #32]	; (801d02c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d00a:	4601      	mov	r1, r0
 801d00c:	881a      	ldrh	r2, [r3, #0]
 801d00e:	e9cd 7500 	strd	r7, r5, [sp]
 801d012:	6833      	ldr	r3, [r6, #0]
 801d014:	4630      	mov	r0, r6
 801d016:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801d018:	ab04      	add	r3, sp, #16
 801d01a:	47a8      	blx	r5
 801d01c:	6820      	ldr	r0, [r4, #0]
 801d01e:	6803      	ldr	r3, [r0, #0]
 801d020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d022:	4798      	blx	r3
 801d024:	e7e8      	b.n	801cff8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d026:	bf00      	nop
 801d028:	2004f65c 	.word	0x2004f65c
 801d02c:	2004f656 	.word	0x2004f656

0801d030 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d034:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801d038:	4688      	mov	r8, r1
 801d03a:	4614      	mov	r4, r2
 801d03c:	461d      	mov	r5, r3
 801d03e:	9e08      	ldr	r6, [sp, #32]
 801d040:	2f00      	cmp	r7, #0
 801d042:	f000 80a9 	beq.w	801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d046:	4618      	mov	r0, r3
 801d048:	f7f6 fc73 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d04c:	2800      	cmp	r0, #0
 801d04e:	f040 80a3 	bne.w	801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d052:	f9b5 1000 	ldrsh.w	r1, [r5]
 801d056:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d05a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801d05e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801d062:	fb04 1303 	mla	r3, r4, r3, r1
 801d066:	4365      	muls	r5, r4
 801d068:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801d06c:	2fff      	cmp	r7, #255	; 0xff
 801d06e:	eba4 0200 	sub.w	r2, r4, r0
 801d072:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801d076:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801d07a:	d04a      	beq.n	801d112 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801d07c:	b2bc      	uxth	r4, r7
 801d07e:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801d082:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801d086:	fa5f f788 	uxtb.w	r7, r8
 801d08a:	b2f3      	uxtb	r3, r6
 801d08c:	fb0e fe04 	mul.w	lr, lr, r4
 801d090:	4367      	muls	r7, r4
 801d092:	4363      	muls	r3, r4
 801d094:	0040      	lsls	r0, r0, #1
 801d096:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801d09a:	fa1f fc8c 	uxth.w	ip, ip
 801d09e:	42a9      	cmp	r1, r5
 801d0a0:	d27a      	bcs.n	801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d0a2:	eb01 0900 	add.w	r9, r1, r0
 801d0a6:	4549      	cmp	r1, r9
 801d0a8:	d231      	bcs.n	801d10e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801d0aa:	880a      	ldrh	r2, [r1, #0]
 801d0ac:	1214      	asrs	r4, r2, #8
 801d0ae:	10d6      	asrs	r6, r2, #3
 801d0b0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d0b4:	00d2      	lsls	r2, r2, #3
 801d0b6:	b2d2      	uxtb	r2, r2
 801d0b8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d0bc:	fb14 f40c 	smulbb	r4, r4, ip
 801d0c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d0c4:	fb12 f20c 	smulbb	r2, r2, ip
 801d0c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d0cc:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d0d0:	4474      	add	r4, lr
 801d0d2:	fb16 f60c 	smulbb	r6, r6, ip
 801d0d6:	b2a4      	uxth	r4, r4
 801d0d8:	441a      	add	r2, r3
 801d0da:	b292      	uxth	r2, r2
 801d0dc:	f104 0a01 	add.w	sl, r4, #1
 801d0e0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d0e4:	f102 0a01 	add.w	sl, r2, #1
 801d0e8:	443e      	add	r6, r7
 801d0ea:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d0ee:	b2b6      	uxth	r6, r6
 801d0f0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d0f4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d0f8:	4322      	orrs	r2, r4
 801d0fa:	1c74      	adds	r4, r6, #1
 801d0fc:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d100:	0976      	lsrs	r6, r6, #5
 801d102:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d106:	4332      	orrs	r2, r6
 801d108:	f821 2b02 	strh.w	r2, [r1], #2
 801d10c:	e7cb      	b.n	801d0a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d10e:	4441      	add	r1, r8
 801d110:	e7c5      	b.n	801d09e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d112:	4f22      	ldr	r7, [pc, #136]	; (801d19c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d114:	0973      	lsrs	r3, r6, #5
 801d116:	ea08 0707 	and.w	r7, r8, r7
 801d11a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d11e:	433b      	orrs	r3, r7
 801d120:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d124:	4333      	orrs	r3, r6
 801d126:	07e7      	lsls	r7, r4, #31
 801d128:	b29b      	uxth	r3, r3
 801d12a:	d50b      	bpl.n	801d144 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d12c:	0040      	lsls	r0, r0, #1
 801d12e:	0052      	lsls	r2, r2, #1
 801d130:	42a9      	cmp	r1, r5
 801d132:	d231      	bcs.n	801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d134:	180c      	adds	r4, r1, r0
 801d136:	42a1      	cmp	r1, r4
 801d138:	d202      	bcs.n	801d140 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d13a:	f821 3b02 	strh.w	r3, [r1], #2
 801d13e:	e7fa      	b.n	801d136 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d140:	4411      	add	r1, r2
 801d142:	e7f5      	b.n	801d130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d144:	078e      	lsls	r6, r1, #30
 801d146:	d008      	beq.n	801d15a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d148:	460a      	mov	r2, r1
 801d14a:	0066      	lsls	r6, r4, #1
 801d14c:	42aa      	cmp	r2, r5
 801d14e:	d202      	bcs.n	801d156 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d150:	8013      	strh	r3, [r2, #0]
 801d152:	4432      	add	r2, r6
 801d154:	e7fa      	b.n	801d14c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d156:	3102      	adds	r1, #2
 801d158:	3801      	subs	r0, #1
 801d15a:	07c2      	lsls	r2, r0, #31
 801d15c:	d50b      	bpl.n	801d176 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d15e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d162:	3a01      	subs	r2, #1
 801d164:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d168:	0066      	lsls	r6, r4, #1
 801d16a:	42aa      	cmp	r2, r5
 801d16c:	d202      	bcs.n	801d174 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d16e:	8013      	strh	r3, [r2, #0]
 801d170:	4432      	add	r2, r6
 801d172:	e7fa      	b.n	801d16a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d174:	3801      	subs	r0, #1
 801d176:	b178      	cbz	r0, 801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d178:	1040      	asrs	r0, r0, #1
 801d17a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d17e:	0080      	lsls	r0, r0, #2
 801d180:	0064      	lsls	r4, r4, #1
 801d182:	42a9      	cmp	r1, r5
 801d184:	d208      	bcs.n	801d198 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d186:	460a      	mov	r2, r1
 801d188:	180e      	adds	r6, r1, r0
 801d18a:	42b2      	cmp	r2, r6
 801d18c:	d202      	bcs.n	801d194 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d18e:	f842 3b04 	str.w	r3, [r2], #4
 801d192:	e7fa      	b.n	801d18a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d194:	4421      	add	r1, r4
 801d196:	e7f4      	b.n	801d182 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d19c:	00fff800 	.word	0x00fff800

0801d1a0 <_ZN8touchgfx8LCD16bppC1Ev>:
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	4910      	ldr	r1, [pc, #64]	; (801d1e4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801d1a4:	6042      	str	r2, [r0, #4]
 801d1a6:	6001      	str	r1, [r0, #0]
 801d1a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d1ac:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d1b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d1b4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d1b8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d1bc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d1c0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d1c4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d1c8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d1cc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d1d0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d1d4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d1d8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d1dc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d1e0:	4770      	bx	lr
 801d1e2:	bf00      	nop
 801d1e4:	0802973c 	.word	0x0802973c

0801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1ec:	460d      	mov	r5, r1
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	4699      	mov	r9, r3
 801d1f2:	b08d      	sub	sp, #52	; 0x34
 801d1f4:	6808      	ldr	r0, [r1, #0]
 801d1f6:	6849      	ldr	r1, [r1, #4]
 801d1f8:	ab08      	add	r3, sp, #32
 801d1fa:	c303      	stmia	r3!, {r0, r1}
 801d1fc:	6810      	ldr	r0, [r2, #0]
 801d1fe:	6851      	ldr	r1, [r2, #4]
 801d200:	ab0a      	add	r3, sp, #40	; 0x28
 801d202:	c303      	stmia	r3!, {r0, r1}
 801d204:	a808      	add	r0, sp, #32
 801d206:	f7fa f89d 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d20a:	4629      	mov	r1, r5
 801d20c:	a80a      	add	r0, sp, #40	; 0x28
 801d20e:	f7fa f8c1 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d212:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d216:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d21a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d21e:	4d63      	ldr	r5, [pc, #396]	; (801d3ac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d220:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d224:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d228:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d22c:	6828      	ldr	r0, [r5, #0]
 801d22e:	440a      	add	r2, r1
 801d230:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d234:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d238:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d23c:	4413      	add	r3, r2
 801d23e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d24a:	4798      	blx	r3
 801d24c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d250:	d119      	bne.n	801d286 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d252:	f010 0f20 	tst.w	r0, #32
 801d256:	6828      	ldr	r0, [r5, #0]
 801d258:	d018      	beq.n	801d28c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d25a:	2500      	movs	r5, #0
 801d25c:	6801      	ldr	r1, [r0, #0]
 801d25e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d262:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d266:	b2b6      	uxth	r6, r6
 801d268:	9502      	str	r5, [sp, #8]
 801d26a:	fa1f f588 	uxth.w	r5, r8
 801d26e:	9601      	str	r6, [sp, #4]
 801d270:	9500      	str	r5, [sp, #0]
 801d272:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d274:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d278:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d27c:	4621      	mov	r1, r4
 801d27e:	47a8      	blx	r5
 801d280:	b00d      	add	sp, #52	; 0x34
 801d282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d286:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d28a:	e7e4      	b.n	801d256 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d28c:	6803      	ldr	r3, [r0, #0]
 801d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d290:	4798      	blx	r3
 801d292:	4947      	ldr	r1, [pc, #284]	; (801d3b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d294:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d298:	468a      	mov	sl, r1
 801d29a:	880b      	ldrh	r3, [r1, #0]
 801d29c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d2a0:	fb03 5202 	mla	r2, r3, r2, r5
 801d2a4:	4373      	muls	r3, r6
 801d2a6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d2aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d2ae:	9307      	str	r3, [sp, #28]
 801d2b0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d2b4:	9306      	str	r3, [sp, #24]
 801d2b6:	9b07      	ldr	r3, [sp, #28]
 801d2b8:	4298      	cmp	r0, r3
 801d2ba:	d270      	bcs.n	801d39e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d2bc:	4621      	mov	r1, r4
 801d2be:	9b06      	ldr	r3, [sp, #24]
 801d2c0:	eb00 0b03 	add.w	fp, r0, r3
 801d2c4:	4558      	cmp	r0, fp
 801d2c6:	d25d      	bcs.n	801d384 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d2c8:	f851 4b04 	ldr.w	r4, [r1], #4
 801d2cc:	0e23      	lsrs	r3, r4, #24
 801d2ce:	d014      	beq.n	801d2fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d2d0:	2bff      	cmp	r3, #255	; 0xff
 801d2d2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d2d6:	d112      	bne.n	801d2fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d2d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d2dc:	d10f      	bne.n	801d2fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d2de:	0963      	lsrs	r3, r4, #5
 801d2e0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d2e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d2e8:	f02c 0c07 	bic.w	ip, ip, #7
 801d2ec:	ea43 0c0c 	orr.w	ip, r3, ip
 801d2f0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d2f4:	ea4c 0404 	orr.w	r4, ip, r4
 801d2f8:	8004      	strh	r4, [r0, #0]
 801d2fa:	3002      	adds	r0, #2
 801d2fc:	e7e2      	b.n	801d2c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d2fe:	fb09 f303 	mul.w	r3, r9, r3
 801d302:	1c5a      	adds	r2, r3, #1
 801d304:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d308:	1212      	asrs	r2, r2, #8
 801d30a:	b293      	uxth	r3, r2
 801d30c:	43d2      	mvns	r2, r2
 801d30e:	8807      	ldrh	r7, [r0, #0]
 801d310:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d314:	fb1e fe03 	smulbb	lr, lr, r3
 801d318:	123e      	asrs	r6, r7, #8
 801d31a:	fa5f fc8c 	uxtb.w	ip, ip
 801d31e:	b2e4      	uxtb	r4, r4
 801d320:	fb1c fc03 	smulbb	ip, ip, r3
 801d324:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d328:	fb14 f403 	smulbb	r4, r4, r3
 801d32c:	b2d2      	uxtb	r2, r2
 801d32e:	10fd      	asrs	r5, r7, #3
 801d330:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d334:	00ff      	lsls	r7, r7, #3
 801d336:	fb06 e602 	mla	r6, r6, r2, lr
 801d33a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d33e:	b2ff      	uxtb	r7, r7
 801d340:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d344:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d348:	fb05 c502 	mla	r5, r5, r2, ip
 801d34c:	fb07 4702 	mla	r7, r7, r2, r4
 801d350:	b2b6      	uxth	r6, r6
 801d352:	f106 0e01 	add.w	lr, r6, #1
 801d356:	b2ad      	uxth	r5, r5
 801d358:	b2bf      	uxth	r7, r7
 801d35a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d35e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d362:	f105 0c01 	add.w	ip, r5, #1
 801d366:	1c7e      	adds	r6, r7, #1
 801d368:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d36c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d370:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d374:	096d      	lsrs	r5, r5, #5
 801d376:	ea46 060e 	orr.w	r6, r6, lr
 801d37a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d37e:	432e      	orrs	r6, r5
 801d380:	8006      	strh	r6, [r0, #0]
 801d382:	e7ba      	b.n	801d2fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d384:	f8ba 3000 	ldrh.w	r3, [sl]
 801d388:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d38c:	eba3 0308 	sub.w	r3, r3, r8
 801d390:	eba4 0408 	sub.w	r4, r4, r8
 801d394:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d398:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d39c:	e78b      	b.n	801d2b6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801d39e:	4b03      	ldr	r3, [pc, #12]	; (801d3ac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d3a0:	6818      	ldr	r0, [r3, #0]
 801d3a2:	6803      	ldr	r3, [r0, #0]
 801d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3a6:	4798      	blx	r3
 801d3a8:	e76a      	b.n	801d280 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801d3aa:	bf00      	nop
 801d3ac:	2004f65c 	.word	0x2004f65c
 801d3b0:	2004f656 	.word	0x2004f656

0801d3b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801d3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d3b8:	b085      	sub	sp, #20
 801d3ba:	466d      	mov	r5, sp
 801d3bc:	4616      	mov	r6, r2
 801d3be:	460c      	mov	r4, r1
 801d3c0:	6810      	ldr	r0, [r2, #0]
 801d3c2:	6851      	ldr	r1, [r2, #4]
 801d3c4:	c503      	stmia	r5!, {r0, r1}
 801d3c6:	6818      	ldr	r0, [r3, #0]
 801d3c8:	6859      	ldr	r1, [r3, #4]
 801d3ca:	c503      	stmia	r5!, {r0, r1}
 801d3cc:	4668      	mov	r0, sp
 801d3ce:	f7f9 ffb9 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3d2:	4631      	mov	r1, r6
 801d3d4:	a802      	add	r0, sp, #8
 801d3d6:	f7f9 ffdd 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3da:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d3de:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801d3e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d3e6:	4d28      	ldr	r5, [pc, #160]	; (801d488 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801d3e8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3ec:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d3f0:	f8bd 1000 	ldrh.w	r1, [sp]
 801d3f4:	6828      	ldr	r0, [r5, #0]
 801d3f6:	440a      	add	r2, r1
 801d3f8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d3fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d400:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d404:	4413      	add	r3, r2
 801d406:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d40a:	6803      	ldr	r3, [r0, #0]
 801d40c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d412:	4798      	blx	r3
 801d414:	4e1d      	ldr	r6, [pc, #116]	; (801d48c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801d416:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d41a:	8833      	ldrh	r3, [r6, #0]
 801d41c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d420:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801d490 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801d424:	fb03 1202 	mla	r2, r3, r2, r1
 801d428:	fb08 f303 	mul.w	r3, r8, r3
 801d42c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d430:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d434:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801d438:	4298      	cmp	r0, r3
 801d43a:	d21d      	bcs.n	801d478 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801d43c:	eb00 080c 	add.w	r8, r0, ip
 801d440:	4540      	cmp	r0, r8
 801d442:	d20f      	bcs.n	801d464 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801d444:	f854 1b04 	ldr.w	r1, [r4], #4
 801d448:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801d44c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801d450:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d454:	ea42 0209 	orr.w	r2, r2, r9
 801d458:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801d45c:	430a      	orrs	r2, r1
 801d45e:	f820 2b02 	strh.w	r2, [r0], #2
 801d462:	e7ed      	b.n	801d440 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801d464:	8832      	ldrh	r2, [r6, #0]
 801d466:	1bd2      	subs	r2, r2, r7
 801d468:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d46c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d470:	1bd2      	subs	r2, r2, r7
 801d472:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801d476:	e7df      	b.n	801d438 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801d478:	6828      	ldr	r0, [r5, #0]
 801d47a:	6803      	ldr	r3, [r0, #0]
 801d47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d47e:	4798      	blx	r3
 801d480:	b005      	add	sp, #20
 801d482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d486:	bf00      	nop
 801d488:	2004f65c 	.word	0x2004f65c
 801d48c:	2004f656 	.word	0x2004f656
 801d490:	fffff800 	.word	0xfffff800

0801d494 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d498:	460e      	mov	r6, r1
 801d49a:	4604      	mov	r4, r0
 801d49c:	461d      	mov	r5, r3
 801d49e:	b08e      	sub	sp, #56	; 0x38
 801d4a0:	6808      	ldr	r0, [r1, #0]
 801d4a2:	6849      	ldr	r1, [r1, #4]
 801d4a4:	ab0a      	add	r3, sp, #40	; 0x28
 801d4a6:	c303      	stmia	r3!, {r0, r1}
 801d4a8:	6810      	ldr	r0, [r2, #0]
 801d4aa:	6851      	ldr	r1, [r2, #4]
 801d4ac:	ab0c      	add	r3, sp, #48	; 0x30
 801d4ae:	c303      	stmia	r3!, {r0, r1}
 801d4b0:	a80a      	add	r0, sp, #40	; 0x28
 801d4b2:	f7f9 ff47 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4b6:	4631      	mov	r1, r6
 801d4b8:	a80c      	add	r0, sp, #48	; 0x30
 801d4ba:	f7f9 ff6b 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d4c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d4c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d4ca:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d67c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801d4ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d4d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d4d6:	440c      	add	r4, r1
 801d4d8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d4dc:	f8d8 0000 	ldr.w	r0, [r8]
 801d4e0:	440a      	add	r2, r1
 801d4e2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d4e6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d4ea:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d4ee:	4413      	add	r3, r2
 801d4f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d4f4:	6803      	ldr	r3, [r0, #0]
 801d4f6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801d4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4fc:	4798      	blx	r3
 801d4fe:	2dff      	cmp	r5, #255	; 0xff
 801d500:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d680 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801d504:	d124      	bne.n	801d550 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801d506:	f010 0f01 	tst.w	r0, #1
 801d50a:	f8d8 0000 	ldr.w	r0, [r8]
 801d50e:	d022      	beq.n	801d556 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801d510:	2100      	movs	r1, #0
 801d512:	f04f 0e01 	mov.w	lr, #1
 801d516:	f8d0 c000 	ldr.w	ip, [r0]
 801d51a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801d51e:	f8cd e018 	str.w	lr, [sp, #24]
 801d522:	f8b9 e000 	ldrh.w	lr, [r9]
 801d526:	b2b6      	uxth	r6, r6
 801d528:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d52c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d530:	b2bf      	uxth	r7, r7
 801d532:	9102      	str	r1, [sp, #8]
 801d534:	9503      	str	r5, [sp, #12]
 801d536:	9601      	str	r6, [sp, #4]
 801d538:	9700      	str	r7, [sp, #0]
 801d53a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d53e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d542:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801d546:	4621      	mov	r1, r4
 801d548:	47a8      	blx	r5
 801d54a:	b00e      	add	sp, #56	; 0x38
 801d54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d550:	f010 0f04 	tst.w	r0, #4
 801d554:	e7d9      	b.n	801d50a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801d556:	6803      	ldr	r3, [r0, #0]
 801d558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d55a:	4798      	blx	r3
 801d55c:	f8b9 3000 	ldrh.w	r3, [r9]
 801d560:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d564:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d568:	435e      	muls	r6, r3
 801d56a:	fb03 1202 	mla	r2, r3, r2, r1
 801d56e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d572:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d576:	ebac 0c07 	sub.w	ip, ip, r7
 801d57a:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801d57e:	2dff      	cmp	r5, #255	; 0xff
 801d580:	eba3 0707 	sub.w	r7, r3, r7
 801d584:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d588:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d58c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801d590:	d049      	beq.n	801d626 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801d592:	43eb      	mvns	r3, r5
 801d594:	fa1f f985 	uxth.w	r9, r5
 801d598:	b2db      	uxtb	r3, r3
 801d59a:	42b0      	cmp	r0, r6
 801d59c:	d266      	bcs.n	801d66c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d59e:	eb00 0a0e 	add.w	sl, r0, lr
 801d5a2:	4550      	cmp	r0, sl
 801d5a4:	4621      	mov	r1, r4
 801d5a6:	f104 0403 	add.w	r4, r4, #3
 801d5aa:	d25b      	bcs.n	801d664 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801d5ac:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d5b0:	8802      	ldrh	r2, [r0, #0]
 801d5b2:	fb11 f109 	smulbb	r1, r1, r9
 801d5b6:	ea4f 2822 	mov.w	r8, r2, asr #8
 801d5ba:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801d5be:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801d5c2:	fb08 1803 	mla	r8, r8, r3, r1
 801d5c6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801d5ca:	10d5      	asrs	r5, r2, #3
 801d5cc:	fb11 f109 	smulbb	r1, r1, r9
 801d5d0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d5d4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d5d8:	fb05 1503 	mla	r5, r5, r3, r1
 801d5dc:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d5e0:	00d2      	lsls	r2, r2, #3
 801d5e2:	fb11 f109 	smulbb	r1, r1, r9
 801d5e6:	b2d2      	uxtb	r2, r2
 801d5e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d5ec:	fb02 1203 	mla	r2, r2, r3, r1
 801d5f0:	fa1f f888 	uxth.w	r8, r8
 801d5f4:	b292      	uxth	r2, r2
 801d5f6:	f108 0101 	add.w	r1, r8, #1
 801d5fa:	b2ad      	uxth	r5, r5
 801d5fc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d600:	1c51      	adds	r1, r2, #1
 801d602:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d606:	1c69      	adds	r1, r5, #1
 801d608:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801d60c:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801d610:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d614:	096d      	lsrs	r5, r5, #5
 801d616:	ea42 0208 	orr.w	r2, r2, r8
 801d61a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d61e:	432a      	orrs	r2, r5
 801d620:	f820 2b02 	strh.w	r2, [r0], #2
 801d624:	e7bd      	b.n	801d5a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801d626:	4a14      	ldr	r2, [pc, #80]	; (801d678 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801d628:	42b0      	cmp	r0, r6
 801d62a:	d21f      	bcs.n	801d66c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801d62c:	eb00 050e 	add.w	r5, r0, lr
 801d630:	42a8      	cmp	r0, r5
 801d632:	4621      	mov	r1, r4
 801d634:	f104 0403 	add.w	r4, r4, #3
 801d638:	d210      	bcs.n	801d65c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801d63a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801d63e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801d642:	00db      	lsls	r3, r3, #3
 801d644:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801d648:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d64c:	430b      	orrs	r3, r1
 801d64e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801d652:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801d656:	f820 3b02 	strh.w	r3, [r0], #2
 801d65a:	e7e9      	b.n	801d630 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801d65c:	4438      	add	r0, r7
 801d65e:	eb01 040c 	add.w	r4, r1, ip
 801d662:	e7e1      	b.n	801d628 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801d664:	4438      	add	r0, r7
 801d666:	eb01 040c 	add.w	r4, r1, ip
 801d66a:	e796      	b.n	801d59a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801d66c:	4b03      	ldr	r3, [pc, #12]	; (801d67c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801d66e:	6818      	ldr	r0, [r3, #0]
 801d670:	6803      	ldr	r3, [r0, #0]
 801d672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d674:	4798      	blx	r3
 801d676:	e768      	b.n	801d54a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801d678:	fffff800 	.word	0xfffff800
 801d67c:	2004f65c 	.word	0x2004f65c
 801d680:	2004f656 	.word	0x2004f656

0801d684 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d684:	b4f0      	push	{r4, r5, r6, r7}
 801d686:	4616      	mov	r6, r2
 801d688:	2e01      	cmp	r6, #1
 801d68a:	461c      	mov	r4, r3
 801d68c:	460d      	mov	r5, r1
 801d68e:	9a04      	ldr	r2, [sp, #16]
 801d690:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d694:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d698:	d012      	beq.n	801d6c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801d69a:	d303      	bcc.n	801d6a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801d69c:	2e02      	cmp	r6, #2
 801d69e:	d00a      	beq.n	801d6b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801d6a0:	bcf0      	pop	{r4, r5, r6, r7}
 801d6a2:	4770      	bx	lr
 801d6a4:	6805      	ldr	r5, [r0, #0]
 801d6a6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801d6aa:	68ed      	ldr	r5, [r5, #12]
 801d6ac:	4613      	mov	r3, r2
 801d6ae:	46ac      	mov	ip, r5
 801d6b0:	4622      	mov	r2, r4
 801d6b2:	bcf0      	pop	{r4, r5, r6, r7}
 801d6b4:	4760      	bx	ip
 801d6b6:	4621      	mov	r1, r4
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	bcf0      	pop	{r4, r5, r6, r7}
 801d6bc:	f7ff bd94 	b.w	801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d6c0:	4621      	mov	r1, r4
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	bcf0      	pop	{r4, r5, r6, r7}
 801d6c6:	f7ff bee5 	b.w	801d494 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801d6cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d0:	4616      	mov	r6, r2
 801d6d2:	4681      	mov	r9, r0
 801d6d4:	b093      	sub	sp, #76	; 0x4c
 801d6d6:	6810      	ldr	r0, [r2, #0]
 801d6d8:	4688      	mov	r8, r1
 801d6da:	6851      	ldr	r1, [r2, #4]
 801d6dc:	ac0e      	add	r4, sp, #56	; 0x38
 801d6de:	c403      	stmia	r4!, {r0, r1}
 801d6e0:	6818      	ldr	r0, [r3, #0]
 801d6e2:	6859      	ldr	r1, [r3, #4]
 801d6e4:	ac10      	add	r4, sp, #64	; 0x40
 801d6e6:	c403      	stmia	r4!, {r0, r1}
 801d6e8:	a80e      	add	r0, sp, #56	; 0x38
 801d6ea:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801d6ee:	f7f9 fe29 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6f2:	4631      	mov	r1, r6
 801d6f4:	a810      	add	r0, sp, #64	; 0x40
 801d6f6:	f7f9 fe4d 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d6fa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d6fe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d702:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d706:	4e62      	ldr	r6, [pc, #392]	; (801d890 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d708:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d70c:	4489      	add	r9, r1
 801d70e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d712:	6830      	ldr	r0, [r6, #0]
 801d714:	440a      	add	r2, r1
 801d716:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d71a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d71e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801d722:	4413      	add	r3, r2
 801d724:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d728:	6803      	ldr	r3, [r0, #0]
 801d72a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d730:	4798      	blx	r3
 801d732:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d736:	4f57      	ldr	r7, [pc, #348]	; (801d894 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801d738:	6830      	ldr	r0, [r6, #0]
 801d73a:	d01d      	beq.n	801d778 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d73c:	2200      	movs	r2, #0
 801d73e:	6801      	ldr	r1, [r0, #0]
 801d740:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801d744:	220b      	movs	r2, #11
 801d746:	9207      	str	r2, [sp, #28]
 801d748:	883a      	ldrh	r2, [r7, #0]
 801d74a:	b2a4      	uxth	r4, r4
 801d74c:	9206      	str	r2, [sp, #24]
 801d74e:	2201      	movs	r2, #1
 801d750:	e9cd a204 	strd	sl, r2, [sp, #16]
 801d754:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d758:	b2ad      	uxth	r5, r5
 801d75a:	9203      	str	r2, [sp, #12]
 801d75c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d760:	9502      	str	r5, [sp, #8]
 801d762:	9200      	str	r2, [sp, #0]
 801d764:	9401      	str	r4, [sp, #4]
 801d766:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d768:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d76c:	4642      	mov	r2, r8
 801d76e:	4649      	mov	r1, r9
 801d770:	47a0      	blx	r4
 801d772:	b013      	add	sp, #76	; 0x4c
 801d774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d778:	6803      	ldr	r3, [r0, #0]
 801d77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d77c:	4798      	blx	r3
 801d77e:	f04f 0e04 	mov.w	lr, #4
 801d782:	883b      	ldrh	r3, [r7, #0]
 801d784:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801d788:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801d78c:	435d      	muls	r5, r3
 801d78e:	fb03 1202 	mla	r2, r3, r2, r1
 801d792:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d796:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801d79a:	920c      	str	r2, [sp, #48]	; 0x30
 801d79c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d7a0:	1b12      	subs	r2, r2, r4
 801d7a2:	920d      	str	r2, [sp, #52]	; 0x34
 801d7a4:	0062      	lsls	r2, r4, #1
 801d7a6:	1b1c      	subs	r4, r3, r4
 801d7a8:	0063      	lsls	r3, r4, #1
 801d7aa:	920a      	str	r2, [sp, #40]	; 0x28
 801d7ac:	930b      	str	r3, [sp, #44]	; 0x2c
 801d7ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7b0:	4298      	cmp	r0, r3
 801d7b2:	d266      	bcs.n	801d882 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801d7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7b6:	eb00 0b03 	add.w	fp, r0, r3
 801d7ba:	4558      	cmp	r0, fp
 801d7bc:	d25c      	bcs.n	801d878 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d7be:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d7c2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801d7c6:	f858 2003 	ldr.w	r2, [r8, r3]
 801d7ca:	0e11      	lsrs	r1, r2, #24
 801d7cc:	d012      	beq.n	801d7f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d7ce:	29ff      	cmp	r1, #255	; 0xff
 801d7d0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801d7d4:	d110      	bne.n	801d7f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d7d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d7da:	d10d      	bne.n	801d7f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d7dc:	0953      	lsrs	r3, r2, #5
 801d7de:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801d7e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7e6:	f027 0707 	bic.w	r7, r7, #7
 801d7ea:	431f      	orrs	r7, r3
 801d7ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d7f0:	433a      	orrs	r2, r7
 801d7f2:	8002      	strh	r2, [r0, #0]
 801d7f4:	3002      	adds	r0, #2
 801d7f6:	e7e0      	b.n	801d7ba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801d7f8:	fb0a f101 	mul.w	r1, sl, r1
 801d7fc:	1c4b      	adds	r3, r1, #1
 801d7fe:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801d802:	121b      	asrs	r3, r3, #8
 801d804:	b299      	uxth	r1, r3
 801d806:	43db      	mvns	r3, r3
 801d808:	8806      	ldrh	r6, [r0, #0]
 801d80a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801d80e:	b2d2      	uxtb	r2, r2
 801d810:	fb1c fc01 	smulbb	ip, ip, r1
 801d814:	fb12 f201 	smulbb	r2, r2, r1
 801d818:	1235      	asrs	r5, r6, #8
 801d81a:	10f4      	asrs	r4, r6, #3
 801d81c:	00f6      	lsls	r6, r6, #3
 801d81e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d822:	b2f6      	uxtb	r6, r6
 801d824:	b2ff      	uxtb	r7, r7
 801d826:	b2db      	uxtb	r3, r3
 801d828:	fb17 f701 	smulbb	r7, r7, r1
 801d82c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801d830:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d834:	fb05 c503 	mla	r5, r5, r3, ip
 801d838:	fb06 2203 	mla	r2, r6, r3, r2
 801d83c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d840:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801d844:	fb04 7403 	mla	r4, r4, r3, r7
 801d848:	b2ad      	uxth	r5, r5
 801d84a:	b292      	uxth	r2, r2
 801d84c:	f105 0c01 	add.w	ip, r5, #1
 801d850:	1c57      	adds	r7, r2, #1
 801d852:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d856:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d85a:	b2a4      	uxth	r4, r4
 801d85c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d860:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d864:	433d      	orrs	r5, r7
 801d866:	1c67      	adds	r7, r4, #1
 801d868:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801d86c:	0964      	lsrs	r4, r4, #5
 801d86e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d872:	4325      	orrs	r5, r4
 801d874:	8005      	strh	r5, [r0, #0]
 801d876:	e7bd      	b.n	801d7f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d87a:	4418      	add	r0, r3
 801d87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d87e:	4499      	add	r9, r3
 801d880:	e795      	b.n	801d7ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801d882:	4b03      	ldr	r3, [pc, #12]	; (801d890 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801d884:	6818      	ldr	r0, [r3, #0]
 801d886:	6803      	ldr	r3, [r0, #0]
 801d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d88a:	4798      	blx	r3
 801d88c:	e771      	b.n	801d772 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801d88e:	bf00      	nop
 801d890:	2004f65c 	.word	0x2004f65c
 801d894:	2004f656 	.word	0x2004f656

0801d898 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801d898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d89c:	b087      	sub	sp, #28
 801d89e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801d8a2:	4680      	mov	r8, r0
 801d8a4:	460d      	mov	r5, r1
 801d8a6:	4614      	mov	r4, r2
 801d8a8:	2e00      	cmp	r6, #0
 801d8aa:	f000 80b9 	beq.w	801da20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801d8ae:	6810      	ldr	r0, [r2, #0]
 801d8b0:	6851      	ldr	r1, [r2, #4]
 801d8b2:	af02      	add	r7, sp, #8
 801d8b4:	c703      	stmia	r7!, {r0, r1}
 801d8b6:	6818      	ldr	r0, [r3, #0]
 801d8b8:	6859      	ldr	r1, [r3, #4]
 801d8ba:	af04      	add	r7, sp, #16
 801d8bc:	c703      	stmia	r7!, {r0, r1}
 801d8be:	a802      	add	r0, sp, #8
 801d8c0:	f7f9 fd40 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8c4:	4621      	mov	r1, r4
 801d8c6:	a804      	add	r0, sp, #16
 801d8c8:	f7f9 fd64 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d8cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d8d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d8d4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801d8d8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801d8dc:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d8e0:	eb08 0401 	add.w	r4, r8, r1
 801d8e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d8e8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801d8ec:	440a      	add	r2, r1
 801d8ee:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d8f2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d8f6:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801d8fa:	4413      	add	r3, r2
 801d8fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d900:	4b49      	ldr	r3, [pc, #292]	; (801da28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801d902:	6818      	ldr	r0, [r3, #0]
 801d904:	6803      	ldr	r3, [r0, #0]
 801d906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d908:	4798      	blx	r3
 801d90a:	4b48      	ldr	r3, [pc, #288]	; (801da2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801d90c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801d910:	881a      	ldrh	r2, [r3, #0]
 801d912:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801d916:	2eff      	cmp	r6, #255	; 0xff
 801d918:	fb02 c101 	mla	r1, r2, r1, ip
 801d91c:	fb02 f207 	mul.w	r2, r2, r7
 801d920:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801d924:	f105 0104 	add.w	r1, r5, #4
 801d928:	461d      	mov	r5, r3
 801d92a:	d05a      	beq.n	801d9e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801d92c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801d930:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d934:	b2b6      	uxth	r6, r6
 801d936:	fa1f fe8e 	uxth.w	lr, lr
 801d93a:	9301      	str	r3, [sp, #4]
 801d93c:	4282      	cmp	r2, r0
 801d93e:	d96a      	bls.n	801da16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d940:	eb00 0b0a 	add.w	fp, r0, sl
 801d944:	4583      	cmp	fp, r0
 801d946:	d940      	bls.n	801d9ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801d948:	8805      	ldrh	r5, [r0, #0]
 801d94a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d94e:	122f      	asrs	r7, r5, #8
 801d950:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d954:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d958:	fb17 f70e 	smulbb	r7, r7, lr
 801d95c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d960:	00ed      	lsls	r5, r5, #3
 801d962:	b2ed      	uxtb	r5, r5
 801d964:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d968:	fb15 f50e 	smulbb	r5, r5, lr
 801d96c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d970:	fb0c 7c06 	mla	ip, ip, r6, r7
 801d974:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d978:	10df      	asrs	r7, r3, #3
 801d97a:	00db      	lsls	r3, r3, #3
 801d97c:	fb19 f90e 	smulbb	r9, r9, lr
 801d980:	b2db      	uxtb	r3, r3
 801d982:	fb03 5306 	mla	r3, r3, r6, r5
 801d986:	fa1f fc8c 	uxth.w	ip, ip
 801d98a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d98e:	fb07 9706 	mla	r7, r7, r6, r9
 801d992:	f10c 0901 	add.w	r9, ip, #1
 801d996:	b29b      	uxth	r3, r3
 801d998:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d99c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801d9a0:	f103 0c01 	add.w	ip, r3, #1
 801d9a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d9a8:	b2bf      	uxth	r7, r7
 801d9aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d9ae:	ea4c 0c09 	orr.w	ip, ip, r9
 801d9b2:	f107 0901 	add.w	r9, r7, #1
 801d9b6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d9ba:	097f      	lsrs	r7, r7, #5
 801d9bc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d9c0:	ea4c 0c07 	orr.w	ip, ip, r7
 801d9c4:	f820 cb02 	strh.w	ip, [r0], #2
 801d9c8:	e7bc      	b.n	801d944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801d9ca:	9b01      	ldr	r3, [sp, #4]
 801d9cc:	881b      	ldrh	r3, [r3, #0]
 801d9ce:	eba3 0308 	sub.w	r3, r3, r8
 801d9d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d9d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d9da:	eba3 0308 	sub.w	r3, r3, r8
 801d9de:	441c      	add	r4, r3
 801d9e0:	e7ac      	b.n	801d93c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801d9e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d9e6:	4282      	cmp	r2, r0
 801d9e8:	d915      	bls.n	801da16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801d9ea:	eb00 060a 	add.w	r6, r0, sl
 801d9ee:	4286      	cmp	r6, r0
 801d9f0:	d906      	bls.n	801da00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801d9f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d9f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801d9fa:	f820 3b02 	strh.w	r3, [r0], #2
 801d9fe:	e7f6      	b.n	801d9ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801da00:	882b      	ldrh	r3, [r5, #0]
 801da02:	eba3 0308 	sub.w	r3, r3, r8
 801da06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801da0a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801da0e:	eba3 0308 	sub.w	r3, r3, r8
 801da12:	441c      	add	r4, r3
 801da14:	e7e7      	b.n	801d9e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801da16:	4b04      	ldr	r3, [pc, #16]	; (801da28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801da18:	6818      	ldr	r0, [r3, #0]
 801da1a:	6803      	ldr	r3, [r0, #0]
 801da1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da1e:	4798      	blx	r3
 801da20:	b007      	add	sp, #28
 801da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da26:	bf00      	nop
 801da28:	2004f65c 	.word	0x2004f65c
 801da2c:	2004f656 	.word	0x2004f656

0801da30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da34:	b091      	sub	sp, #68	; 0x44
 801da36:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801da3a:	4680      	mov	r8, r0
 801da3c:	460f      	mov	r7, r1
 801da3e:	4614      	mov	r4, r2
 801da40:	2d00      	cmp	r5, #0
 801da42:	d051      	beq.n	801dae8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801da44:	6810      	ldr	r0, [r2, #0]
 801da46:	6851      	ldr	r1, [r2, #4]
 801da48:	ae0c      	add	r6, sp, #48	; 0x30
 801da4a:	c603      	stmia	r6!, {r0, r1}
 801da4c:	6818      	ldr	r0, [r3, #0]
 801da4e:	6859      	ldr	r1, [r3, #4]
 801da50:	ae0e      	add	r6, sp, #56	; 0x38
 801da52:	c603      	stmia	r6!, {r0, r1}
 801da54:	a80c      	add	r0, sp, #48	; 0x30
 801da56:	f7f9 fc75 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da5a:	4621      	mov	r1, r4
 801da5c:	a80e      	add	r0, sp, #56	; 0x38
 801da5e:	f7f9 fc99 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da62:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801da66:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801da6a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801da6e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801dc4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801da72:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da76:	eb08 0401 	add.w	r4, r8, r1
 801da7a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801da7e:	f8d9 0000 	ldr.w	r0, [r9]
 801da82:	440a      	add	r2, r1
 801da84:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801da88:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801da8c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801da90:	4413      	add	r3, r2
 801da92:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801da96:	6803      	ldr	r3, [r0, #0]
 801da98:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801da9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da9e:	4798      	blx	r3
 801daa0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801daa4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dc50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801daa8:	f8d9 0000 	ldr.w	r0, [r9]
 801daac:	d01f      	beq.n	801daee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801daae:	2200      	movs	r2, #0
 801dab0:	6801      	ldr	r1, [r0, #0]
 801dab2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801dab6:	220b      	movs	r2, #11
 801dab8:	9207      	str	r2, [sp, #28]
 801daba:	f8b8 2000 	ldrh.w	r2, [r8]
 801dabe:	b2b6      	uxth	r6, r6
 801dac0:	9206      	str	r2, [sp, #24]
 801dac2:	2201      	movs	r2, #1
 801dac4:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801dac8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801dacc:	9601      	str	r6, [sp, #4]
 801dace:	9203      	str	r2, [sp, #12]
 801dad0:	fa1f f28a 	uxth.w	r2, sl
 801dad4:	9202      	str	r2, [sp, #8]
 801dad6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801dada:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dade:	9200      	str	r2, [sp, #0]
 801dae0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801dae2:	463a      	mov	r2, r7
 801dae4:	4621      	mov	r1, r4
 801dae6:	47a8      	blx	r5
 801dae8:	b011      	add	sp, #68	; 0x44
 801daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daee:	6803      	ldr	r3, [r0, #0]
 801daf0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801daf6:	4798      	blx	r3
 801daf8:	f8b8 2000 	ldrh.w	r2, [r8]
 801dafc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801db00:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801db04:	2dff      	cmp	r5, #255	; 0xff
 801db06:	fb02 1303 	mla	r3, r2, r3, r1
 801db0a:	fb0a fa02 	mul.w	sl, sl, r2
 801db0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801db12:	d062      	beq.n	801dbda <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801db14:	ea6f 0c05 	mvn.w	ip, r5
 801db18:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801db1c:	930a      	str	r3, [sp, #40]	; 0x28
 801db1e:	b2ad      	uxth	r5, r5
 801db20:	fa5f fc8c 	uxtb.w	ip, ip
 801db24:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801db28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db2a:	4298      	cmp	r0, r3
 801db2c:	f080 8085 	bcs.w	801dc3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801db30:	eb00 0b09 	add.w	fp, r0, r9
 801db34:	4558      	cmp	r0, fp
 801db36:	d246      	bcs.n	801dbc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801db38:	2303      	movs	r3, #3
 801db3a:	2204      	movs	r2, #4
 801db3c:	f814 eb01 	ldrb.w	lr, [r4], #1
 801db40:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801db44:	eb07 0a0e 	add.w	sl, r7, lr
 801db48:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801db4c:	8803      	ldrh	r3, [r0, #0]
 801db4e:	fb18 f805 	smulbb	r8, r8, r5
 801db52:	1219      	asrs	r1, r3, #8
 801db54:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801db58:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801db5c:	fb01 810c 	mla	r1, r1, ip, r8
 801db60:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801db64:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801db68:	fb1e fe05 	smulbb	lr, lr, r5
 801db6c:	fb18 f805 	smulbb	r8, r8, r5
 801db70:	10da      	asrs	r2, r3, #3
 801db72:	00db      	lsls	r3, r3, #3
 801db74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801db78:	b2db      	uxtb	r3, r3
 801db7a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801db7e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801db82:	fb02 820c 	mla	r2, r2, ip, r8
 801db86:	fb03 e30c 	mla	r3, r3, ip, lr
 801db8a:	b289      	uxth	r1, r1
 801db8c:	b292      	uxth	r2, r2
 801db8e:	b29b      	uxth	r3, r3
 801db90:	f101 0801 	add.w	r8, r1, #1
 801db94:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801db98:	f103 0e01 	add.w	lr, r3, #1
 801db9c:	f102 0801 	add.w	r8, r2, #1
 801dba0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801dba4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801dba8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801dbac:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801dbb0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801dbb4:	ea4e 0101 	orr.w	r1, lr, r1
 801dbb8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801dbbc:	ea41 0108 	orr.w	r1, r1, r8
 801dbc0:	f820 1b02 	strh.w	r1, [r0], #2
 801dbc4:	e7b6      	b.n	801db34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801dbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbc8:	881b      	ldrh	r3, [r3, #0]
 801dbca:	1b9b      	subs	r3, r3, r6
 801dbcc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dbd0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dbd4:	1b9b      	subs	r3, r3, r6
 801dbd6:	441c      	add	r4, r3
 801dbd8:	e7a6      	b.n	801db28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801dbda:	2203      	movs	r2, #3
 801dbdc:	2504      	movs	r5, #4
 801dbde:	491a      	ldr	r1, [pc, #104]	; (801dc48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801dbe0:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801dbe4:	4550      	cmp	r0, sl
 801dbe6:	d228      	bcs.n	801dc3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801dbe8:	eb00 0c09 	add.w	ip, r0, r9
 801dbec:	4560      	cmp	r0, ip
 801dbee:	4623      	mov	r3, r4
 801dbf0:	d219      	bcs.n	801dc26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801dbf2:	f893 e000 	ldrb.w	lr, [r3]
 801dbf6:	3401      	adds	r4, #1
 801dbf8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801dbfc:	eb07 0b0e 	add.w	fp, r7, lr
 801dc00:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801dc04:	f89b b001 	ldrb.w	fp, [fp, #1]
 801dc08:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801dc0c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801dc10:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801dc14:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801dc18:	ea43 030b 	orr.w	r3, r3, fp
 801dc1c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801dc20:	f820 3b02 	strh.w	r3, [r0], #2
 801dc24:	e7e2      	b.n	801dbec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801dc26:	f8b8 3000 	ldrh.w	r3, [r8]
 801dc2a:	1b9b      	subs	r3, r3, r6
 801dc2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc30:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801dc34:	1b9b      	subs	r3, r3, r6
 801dc36:	441c      	add	r4, r3
 801dc38:	e7d4      	b.n	801dbe4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801dc3a:	4b04      	ldr	r3, [pc, #16]	; (801dc4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801dc3c:	6818      	ldr	r0, [r3, #0]
 801dc3e:	6803      	ldr	r3, [r0, #0]
 801dc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc42:	4798      	blx	r3
 801dc44:	e750      	b.n	801dae8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801dc46:	bf00      	nop
 801dc48:	fffff800 	.word	0xfffff800
 801dc4c:	2004f65c 	.word	0x2004f65c
 801dc50:	2004f656 	.word	0x2004f656

0801dc54 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dc54:	b430      	push	{r4, r5}
 801dc56:	780d      	ldrb	r5, [r1, #0]
 801dc58:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801dc5c:	2d01      	cmp	r5, #1
 801dc5e:	d00a      	beq.n	801dc76 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801dc60:	d305      	bcc.n	801dc6e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801dc62:	2d02      	cmp	r5, #2
 801dc64:	d10b      	bne.n	801dc7e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801dc66:	9402      	str	r4, [sp, #8]
 801dc68:	bc30      	pop	{r4, r5}
 801dc6a:	f7ff be15 	b.w	801d898 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801dc6e:	9402      	str	r4, [sp, #8]
 801dc70:	bc30      	pop	{r4, r5}
 801dc72:	f7ff bd2b 	b.w	801d6cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801dc76:	9402      	str	r4, [sp, #8]
 801dc78:	bc30      	pop	{r4, r5}
 801dc7a:	f7ff bed9 	b.w	801da30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801dc7e:	bc30      	pop	{r4, r5}
 801dc80:	4770      	bx	lr
	...

0801dc84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc88:	4617      	mov	r7, r2
 801dc8a:	4604      	mov	r4, r0
 801dc8c:	460e      	mov	r6, r1
 801dc8e:	b087      	sub	sp, #28
 801dc90:	6810      	ldr	r0, [r2, #0]
 801dc92:	6851      	ldr	r1, [r2, #4]
 801dc94:	ad02      	add	r5, sp, #8
 801dc96:	c503      	stmia	r5!, {r0, r1}
 801dc98:	6818      	ldr	r0, [r3, #0]
 801dc9a:	6859      	ldr	r1, [r3, #4]
 801dc9c:	ad04      	add	r5, sp, #16
 801dc9e:	c503      	stmia	r5!, {r0, r1}
 801dca0:	a802      	add	r0, sp, #8
 801dca2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801dca6:	f7f9 fb4d 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcaa:	4639      	mov	r1, r7
 801dcac:	a804      	add	r0, sp, #16
 801dcae:	f7f9 fb71 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dcb6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801dcbe:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801dcc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dcc6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801dcca:	440e      	add	r6, r1
 801dccc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801dcd0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801dcd4:	440a      	add	r2, r1
 801dcd6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dcda:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dcde:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801decc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801dce2:	4413      	add	r3, r2
 801dce4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dce8:	4b77      	ldr	r3, [pc, #476]	; (801dec8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801dcea:	6818      	ldr	r0, [r3, #0]
 801dcec:	6803      	ldr	r3, [r0, #0]
 801dcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcf0:	4798      	blx	r3
 801dcf2:	f8b9 b000 	ldrh.w	fp, [r9]
 801dcf6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dcfa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dcfe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dd02:	fb0b 2303 	mla	r3, fp, r3, r2
 801dd06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dd0a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dd0e:	fb05 f50b 	mul.w	r5, r5, fp
 801dd12:	9300      	str	r3, [sp, #0]
 801dd14:	d069      	beq.n	801ddea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801dd16:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801dd1a:	4558      	cmp	r0, fp
 801dd1c:	f080 80cc 	bcs.w	801deb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801dd20:	4631      	mov	r1, r6
 801dd22:	9b00      	ldr	r3, [sp, #0]
 801dd24:	18c3      	adds	r3, r0, r3
 801dd26:	9301      	str	r3, [sp, #4]
 801dd28:	9b01      	ldr	r3, [sp, #4]
 801dd2a:	4298      	cmp	r0, r3
 801dd2c:	d24f      	bcs.n	801ddce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801dd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd32:	2a00      	cmp	r2, #0
 801dd34:	d048      	beq.n	801ddc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dd36:	fb0a f202 	mul.w	r2, sl, r2
 801dd3a:	1c53      	adds	r3, r2, #1
 801dd3c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dd40:	121b      	asrs	r3, r3, #8
 801dd42:	d041      	beq.n	801ddc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801dd44:	b29e      	uxth	r6, r3
 801dd46:	43db      	mvns	r3, r3
 801dd48:	8802      	ldrh	r2, [r0, #0]
 801dd4a:	b2db      	uxtb	r3, r3
 801dd4c:	1215      	asrs	r5, r2, #8
 801dd4e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dd52:	f8b4 c000 	ldrh.w	ip, [r4]
 801dd56:	fb15 f503 	smulbb	r5, r5, r3
 801dd5a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801dd5e:	00d2      	lsls	r2, r2, #3
 801dd60:	b2d2      	uxtb	r2, r2
 801dd62:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dd66:	fb12 f203 	smulbb	r2, r2, r3
 801dd6a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd6e:	fb07 5706 	mla	r7, r7, r6, r5
 801dd72:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801dd76:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801dd7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd7e:	fb1e fe03 	smulbb	lr, lr, r3
 801dd82:	fa5f fc8c 	uxtb.w	ip, ip
 801dd86:	fb0c 2c06 	mla	ip, ip, r6, r2
 801dd8a:	b2bf      	uxth	r7, r7
 801dd8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dd90:	fb05 e506 	mla	r5, r5, r6, lr
 801dd94:	f107 0e01 	add.w	lr, r7, #1
 801dd98:	fa1f fc8c 	uxth.w	ip, ip
 801dd9c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dda0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801dda4:	f10c 0701 	add.w	r7, ip, #1
 801dda8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ddac:	b2ad      	uxth	r5, r5
 801ddae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ddb2:	ea47 070e 	orr.w	r7, r7, lr
 801ddb6:	f105 0e01 	add.w	lr, r5, #1
 801ddba:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ddbe:	096d      	lsrs	r5, r5, #5
 801ddc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ddc4:	432f      	orrs	r7, r5
 801ddc6:	8007      	strh	r7, [r0, #0]
 801ddc8:	3002      	adds	r0, #2
 801ddca:	3402      	adds	r4, #2
 801ddcc:	e7ac      	b.n	801dd28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801ddce:	f8b9 3000 	ldrh.w	r3, [r9]
 801ddd2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801ddd6:	eba3 0308 	sub.w	r3, r3, r8
 801ddda:	eba6 0608 	sub.w	r6, r6, r8
 801ddde:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801dde2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dde6:	440e      	add	r6, r1
 801dde8:	e797      	b.n	801dd1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801ddea:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801ddee:	42a8      	cmp	r0, r5
 801ddf0:	d262      	bcs.n	801deb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801ddf2:	4631      	mov	r1, r6
 801ddf4:	9b00      	ldr	r3, [sp, #0]
 801ddf6:	eb00 0b03 	add.w	fp, r0, r3
 801ddfa:	4558      	cmp	r0, fp
 801ddfc:	d24e      	bcs.n	801de9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801ddfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de02:	b12b      	cbz	r3, 801de10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801de04:	2bff      	cmp	r3, #255	; 0xff
 801de06:	f8b4 e000 	ldrh.w	lr, [r4]
 801de0a:	d104      	bne.n	801de16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801de0c:	f8a0 e000 	strh.w	lr, [r0]
 801de10:	3002      	adds	r0, #2
 801de12:	3402      	adds	r4, #2
 801de14:	e7f1      	b.n	801ddfa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801de16:	b29f      	uxth	r7, r3
 801de18:	43db      	mvns	r3, r3
 801de1a:	8802      	ldrh	r2, [r0, #0]
 801de1c:	b2db      	uxtb	r3, r3
 801de1e:	1216      	asrs	r6, r2, #8
 801de20:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801de24:	fb16 f603 	smulbb	r6, r6, r3
 801de28:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801de2c:	00d2      	lsls	r2, r2, #3
 801de2e:	b2d2      	uxtb	r2, r2
 801de30:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801de34:	fb1a fa03 	smulbb	sl, sl, r3
 801de38:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801de3c:	fb12 f303 	smulbb	r3, r2, r3
 801de40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de44:	fb0c 6c07 	mla	ip, ip, r7, r6
 801de48:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801de4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801de50:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de54:	fa5f fe8e 	uxtb.w	lr, lr
 801de58:	fb06 a607 	mla	r6, r6, r7, sl
 801de5c:	fb0e 3307 	mla	r3, lr, r7, r3
 801de60:	fa1f fc8c 	uxth.w	ip, ip
 801de64:	f10c 0201 	add.w	r2, ip, #1
 801de68:	b2b6      	uxth	r6, r6
 801de6a:	b29b      	uxth	r3, r3
 801de6c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801de70:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801de74:	f106 0a01 	add.w	sl, r6, #1
 801de78:	f103 0c01 	add.w	ip, r3, #1
 801de7c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801de80:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801de84:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801de88:	0976      	lsrs	r6, r6, #5
 801de8a:	ea4c 0c02 	orr.w	ip, ip, r2
 801de8e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801de92:	ea4c 0c06 	orr.w	ip, ip, r6
 801de96:	f8a0 c000 	strh.w	ip, [r0]
 801de9a:	e7b9      	b.n	801de10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801de9c:	f8b9 3000 	ldrh.w	r3, [r9]
 801dea0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dea4:	eba3 0308 	sub.w	r3, r3, r8
 801dea8:	eba6 0608 	sub.w	r6, r6, r8
 801deac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801deb0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801deb4:	440e      	add	r6, r1
 801deb6:	e79a      	b.n	801ddee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801deb8:	4b03      	ldr	r3, [pc, #12]	; (801dec8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801deba:	6818      	ldr	r0, [r3, #0]
 801debc:	6803      	ldr	r3, [r0, #0]
 801debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dec0:	4798      	blx	r3
 801dec2:	b007      	add	sp, #28
 801dec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dec8:	2004f65c 	.word	0x2004f65c
 801decc:	2004f656 	.word	0x2004f656

0801ded0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ded4:	b089      	sub	sp, #36	; 0x24
 801ded6:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801deda:	4682      	mov	sl, r0
 801dedc:	460f      	mov	r7, r1
 801dede:	4691      	mov	r9, r2
 801dee0:	4698      	mov	r8, r3
 801dee2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dee4:	2e00      	cmp	r6, #0
 801dee6:	d036      	beq.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801dee8:	4608      	mov	r0, r1
 801deea:	f7fc f86d 	bl	8019fc8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801deee:	4605      	mov	r5, r0
 801def0:	4638      	mov	r0, r7
 801def2:	f7fc f89d 	bl	801a030 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801def6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801defa:	4638      	mov	r0, r7
 801defc:	f8ad 9008 	strh.w	r9, [sp, #8]
 801df00:	f8ad 500c 	strh.w	r5, [sp, #12]
 801df04:	f8ad 800a 	strh.w	r8, [sp, #10]
 801df08:	f7fc f94a 	bl	801a1a0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df0c:	4605      	mov	r5, r0
 801df0e:	4638      	mov	r0, r7
 801df10:	f7fc f976 	bl	801a200 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801df14:	4681      	mov	r9, r0
 801df16:	4638      	mov	r0, r7
 801df18:	f7fc f9c6 	bl	801a2a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801df1c:	280b      	cmp	r0, #11
 801df1e:	d81a      	bhi.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801df20:	e8df f000 	tbb	[pc, r0]
 801df24:	1906aebd 	.word	0x1906aebd
 801df28:	19191919 	.word	0x19191919
 801df2c:	b5191919 	.word	0xb5191919
 801df30:	4bb0      	ldr	r3, [pc, #704]	; (801e1f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801df32:	6818      	ldr	r0, [r3, #0]
 801df34:	6803      	ldr	r3, [r0, #0]
 801df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df38:	4798      	blx	r3
 801df3a:	2eff      	cmp	r6, #255	; 0xff
 801df3c:	d121      	bne.n	801df82 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801df3e:	0683      	lsls	r3, r0, #26
 801df40:	d41f      	bmi.n	801df82 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801df42:	4638      	mov	r0, r7
 801df44:	f7fc f8f4 	bl	801a130 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801df48:	b940      	cbnz	r0, 801df5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801df4a:	4623      	mov	r3, r4
 801df4c:	aa02      	add	r2, sp, #8
 801df4e:	4629      	mov	r1, r5
 801df50:	4650      	mov	r0, sl
 801df52:	f7ff fa2f 	bl	801d3b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801df56:	b009      	add	sp, #36	; 0x24
 801df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df5c:	f10d 0818 	add.w	r8, sp, #24
 801df60:	4639      	mov	r1, r7
 801df62:	4640      	mov	r0, r8
 801df64:	af04      	add	r7, sp, #16
 801df66:	f7fc f897 	bl	801a098 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801df6a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801df6e:	e887 0003 	stmia.w	r7, {r0, r1}
 801df72:	4638      	mov	r0, r7
 801df74:	4621      	mov	r1, r4
 801df76:	f7f5 fc99 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 801df7a:	4638      	mov	r0, r7
 801df7c:	f7f5 fcd9 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801df80:	b130      	cbz	r0, 801df90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801df82:	4633      	mov	r3, r6
 801df84:	4622      	mov	r2, r4
 801df86:	a902      	add	r1, sp, #8
 801df88:	4628      	mov	r0, r5
 801df8a:	f7ff f92d 	bl	801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df8e:	e7e2      	b.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801df90:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df94:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801df98:	4293      	cmp	r3, r2
 801df9a:	dd12      	ble.n	801dfc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801df9c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dfa0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dfa4:	1a9b      	subs	r3, r3, r2
 801dfa6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801dfaa:	f8ad 201a 	strh.w	r2, [sp, #26]
 801dfae:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dfb2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dfb6:	4642      	mov	r2, r8
 801dfb8:	4633      	mov	r3, r6
 801dfba:	a902      	add	r1, sp, #8
 801dfbc:	4628      	mov	r0, r5
 801dfbe:	f7ff f913 	bl	801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dfc2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801dfc6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dfca:	4293      	cmp	r3, r2
 801dfcc:	dd12      	ble.n	801dff4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801dfce:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801dfd2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801dfd6:	1a9b      	subs	r3, r3, r2
 801dfd8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dfdc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dfe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dfe4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801dfe8:	23ff      	movs	r3, #255	; 0xff
 801dfea:	4642      	mov	r2, r8
 801dfec:	a902      	add	r1, sp, #8
 801dfee:	4628      	mov	r0, r5
 801dff0:	f7ff f8fa 	bl	801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dff4:	463b      	mov	r3, r7
 801dff6:	aa02      	add	r2, sp, #8
 801dff8:	4629      	mov	r1, r5
 801dffa:	4650      	mov	r0, sl
 801dffc:	f7ff f9da 	bl	801d3b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e000:	88a2      	ldrh	r2, [r4, #4]
 801e002:	8823      	ldrh	r3, [r4, #0]
 801e004:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e008:	4413      	add	r3, r2
 801e00a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e00e:	b29b      	uxth	r3, r3
 801e010:	440a      	add	r2, r1
 801e012:	b292      	uxth	r2, r2
 801e014:	b211      	sxth	r1, r2
 801e016:	b218      	sxth	r0, r3
 801e018:	4288      	cmp	r0, r1
 801e01a:	dd12      	ble.n	801e042 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801e01c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e020:	1a9b      	subs	r3, r3, r2
 801e022:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801e026:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e02a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e02e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e032:	23ff      	movs	r3, #255	; 0xff
 801e034:	4642      	mov	r2, r8
 801e036:	a902      	add	r1, sp, #8
 801e038:	4628      	mov	r0, r5
 801e03a:	f8ad 601a 	strh.w	r6, [sp, #26]
 801e03e:	f7ff f8d3 	bl	801d1e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e042:	88e2      	ldrh	r2, [r4, #6]
 801e044:	8863      	ldrh	r3, [r4, #2]
 801e046:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e04a:	4413      	add	r3, r2
 801e04c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e050:	b29b      	uxth	r3, r3
 801e052:	440a      	add	r2, r1
 801e054:	b292      	uxth	r2, r2
 801e056:	b211      	sxth	r1, r2
 801e058:	b218      	sxth	r0, r3
 801e05a:	4288      	cmp	r0, r1
 801e05c:	f77f af7b 	ble.w	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e060:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e064:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e068:	1a9b      	subs	r3, r3, r2
 801e06a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e06e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e072:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e076:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e07a:	23ff      	movs	r3, #255	; 0xff
 801e07c:	4642      	mov	r2, r8
 801e07e:	e782      	b.n	801df86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801e080:	4633      	mov	r3, r6
 801e082:	4622      	mov	r2, r4
 801e084:	a902      	add	r1, sp, #8
 801e086:	4628      	mov	r0, r5
 801e088:	f7ff fa04 	bl	801d494 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e08c:	e763      	b.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e08e:	9600      	str	r6, [sp, #0]
 801e090:	4623      	mov	r3, r4
 801e092:	aa02      	add	r2, sp, #8
 801e094:	4649      	mov	r1, r9
 801e096:	4628      	mov	r0, r5
 801e098:	f7ff fddc 	bl	801dc54 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e09c:	e75b      	b.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e09e:	4638      	mov	r0, r7
 801e0a0:	f7fc f846 	bl	801a130 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e0a4:	b950      	cbnz	r0, 801e0bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801e0a6:	e9cd 6000 	strd	r6, r0, [sp]
 801e0aa:	f8da 3000 	ldr.w	r3, [sl]
 801e0ae:	aa02      	add	r2, sp, #8
 801e0b0:	68de      	ldr	r6, [r3, #12]
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	4623      	mov	r3, r4
 801e0b6:	4650      	mov	r0, sl
 801e0b8:	47b0      	blx	r6
 801e0ba:	e74c      	b.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e0bc:	f10d 0818 	add.w	r8, sp, #24
 801e0c0:	4639      	mov	r1, r7
 801e0c2:	4640      	mov	r0, r8
 801e0c4:	af04      	add	r7, sp, #16
 801e0c6:	f7fb ffe7 	bl	801a098 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e0ca:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e0ce:	e887 0003 	stmia.w	r7, {r0, r1}
 801e0d2:	4638      	mov	r0, r7
 801e0d4:	4621      	mov	r1, r4
 801e0d6:	f7f5 fbe9 	bl	80138ac <_ZN8touchgfx4RectaNERKS0_>
 801e0da:	4638      	mov	r0, r7
 801e0dc:	f7f5 fc29 	bl	8013932 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e0e0:	b138      	cbz	r0, 801e0f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801e0e2:	4623      	mov	r3, r4
 801e0e4:	9600      	str	r6, [sp, #0]
 801e0e6:	aa02      	add	r2, sp, #8
 801e0e8:	4649      	mov	r1, r9
 801e0ea:	4628      	mov	r0, r5
 801e0ec:	f7ff fdca 	bl	801dc84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e0f0:	e731      	b.n	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e0f2:	e9cd 6000 	strd	r6, r0, [sp]
 801e0f6:	f8da 3000 	ldr.w	r3, [sl]
 801e0fa:	aa02      	add	r2, sp, #8
 801e0fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e100:	4629      	mov	r1, r5
 801e102:	463b      	mov	r3, r7
 801e104:	4650      	mov	r0, sl
 801e106:	47d8      	blx	fp
 801e108:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e10c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e110:	4293      	cmp	r3, r2
 801e112:	dd13      	ble.n	801e13c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801e114:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e118:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e11c:	1a9b      	subs	r3, r3, r2
 801e11e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e122:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e126:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e12a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e12e:	9600      	str	r6, [sp, #0]
 801e130:	4643      	mov	r3, r8
 801e132:	aa02      	add	r2, sp, #8
 801e134:	4649      	mov	r1, r9
 801e136:	4628      	mov	r0, r5
 801e138:	f7ff fda4 	bl	801dc84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e13c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e140:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e144:	4293      	cmp	r3, r2
 801e146:	dd13      	ble.n	801e170 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801e148:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e14c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e150:	1a9b      	subs	r3, r3, r2
 801e152:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e156:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e15a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e15e:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e162:	9600      	str	r6, [sp, #0]
 801e164:	4643      	mov	r3, r8
 801e166:	aa02      	add	r2, sp, #8
 801e168:	4649      	mov	r1, r9
 801e16a:	4628      	mov	r0, r5
 801e16c:	f7ff fd8a 	bl	801dc84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e170:	88a2      	ldrh	r2, [r4, #4]
 801e172:	8823      	ldrh	r3, [r4, #0]
 801e174:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e178:	4413      	add	r3, r2
 801e17a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e17e:	b29b      	uxth	r3, r3
 801e180:	440a      	add	r2, r1
 801e182:	b292      	uxth	r2, r2
 801e184:	b211      	sxth	r1, r2
 801e186:	b218      	sxth	r0, r3
 801e188:	4288      	cmp	r0, r1
 801e18a:	dd13      	ble.n	801e1b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801e18c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e190:	1a9b      	subs	r3, r3, r2
 801e192:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e196:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e19a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e19e:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e1a2:	9600      	str	r6, [sp, #0]
 801e1a4:	4643      	mov	r3, r8
 801e1a6:	aa02      	add	r2, sp, #8
 801e1a8:	4649      	mov	r1, r9
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e1b0:	f7ff fd68 	bl	801dc84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e1b4:	88e2      	ldrh	r2, [r4, #6]
 801e1b6:	8863      	ldrh	r3, [r4, #2]
 801e1b8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e1bc:	4413      	add	r3, r2
 801e1be:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e1c2:	b29b      	uxth	r3, r3
 801e1c4:	440a      	add	r2, r1
 801e1c6:	b292      	uxth	r2, r2
 801e1c8:	b211      	sxth	r1, r2
 801e1ca:	b218      	sxth	r0, r3
 801e1cc:	4288      	cmp	r0, r1
 801e1ce:	f77f aec2 	ble.w	801df56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e1d2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e1d6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e1da:	1a9b      	subs	r3, r3, r2
 801e1dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e1e0:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e1e4:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e1e8:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e1ec:	9600      	str	r6, [sp, #0]
 801e1ee:	4643      	mov	r3, r8
 801e1f0:	e779      	b.n	801e0e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801e1f2:	bf00      	nop
 801e1f4:	2004f65c 	.word	0x2004f65c

0801e1f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e1f8:	b180      	cbz	r0, 801e21c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e1fa:	2903      	cmp	r1, #3
 801e1fc:	d81c      	bhi.n	801e238 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e1fe:	e8df f001 	tbb	[pc, r1]
 801e202:	1d02      	.short	0x1d02
 801e204:	1f08      	.short	0x1f08
 801e206:	4b10      	ldr	r3, [pc, #64]	; (801e248 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e208:	8818      	ldrh	r0, [r3, #0]
 801e20a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e20e:	4240      	negs	r0, r0
 801e210:	4770      	bx	lr
 801e212:	4b0d      	ldr	r3, [pc, #52]	; (801e248 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e214:	8818      	ldrh	r0, [r3, #0]
 801e216:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e21a:	4770      	bx	lr
 801e21c:	2903      	cmp	r1, #3
 801e21e:	d80b      	bhi.n	801e238 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e220:	a301      	add	r3, pc, #4	; (adr r3, 801e228 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e222:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e226:	bf00      	nop
 801e228:	0801e23d 	.word	0x0801e23d
 801e22c:	0801e213 	.word	0x0801e213
 801e230:	0801e241 	.word	0x0801e241
 801e234:	0801e207 	.word	0x0801e207
 801e238:	2000      	movs	r0, #0
 801e23a:	4770      	bx	lr
 801e23c:	2001      	movs	r0, #1
 801e23e:	4770      	bx	lr
 801e240:	f04f 30ff 	mov.w	r0, #4294967295
 801e244:	4770      	bx	lr
 801e246:	bf00      	nop
 801e248:	2004f656 	.word	0x2004f656

0801e24c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e24c:	b180      	cbz	r0, 801e270 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e24e:	2903      	cmp	r1, #3
 801e250:	d81c      	bhi.n	801e28c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e252:	e8df f001 	tbb	[pc, r1]
 801e256:	021d      	.short	0x021d
 801e258:	071f      	.short	0x071f
 801e25a:	4b10      	ldr	r3, [pc, #64]	; (801e29c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e25c:	8818      	ldrh	r0, [r3, #0]
 801e25e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e262:	4770      	bx	lr
 801e264:	4b0d      	ldr	r3, [pc, #52]	; (801e29c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e266:	8818      	ldrh	r0, [r3, #0]
 801e268:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e26c:	4240      	negs	r0, r0
 801e26e:	4770      	bx	lr
 801e270:	2903      	cmp	r1, #3
 801e272:	d80b      	bhi.n	801e28c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e274:	a301      	add	r3, pc, #4	; (adr r3, 801e27c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e276:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e27a:	bf00      	nop
 801e27c:	0801e25b 	.word	0x0801e25b
 801e280:	0801e295 	.word	0x0801e295
 801e284:	0801e265 	.word	0x0801e265
 801e288:	0801e291 	.word	0x0801e291
 801e28c:	2000      	movs	r0, #0
 801e28e:	4770      	bx	lr
 801e290:	2001      	movs	r0, #1
 801e292:	4770      	bx	lr
 801e294:	f04f 30ff 	mov.w	r0, #4294967295
 801e298:	4770      	bx	lr
 801e29a:	bf00      	nop
 801e29c:	2004f656 	.word	0x2004f656

0801e2a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2a4:	b099      	sub	sp, #100	; 0x64
 801e2a6:	910b      	str	r1, [sp, #44]	; 0x2c
 801e2a8:	a914      	add	r1, sp, #80	; 0x50
 801e2aa:	e881 000c 	stmia.w	r1, {r2, r3}
 801e2ae:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e2b2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e2b6:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e2ba:	9309      	str	r3, [sp, #36]	; 0x24
 801e2bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e2c0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e2c4:	9310      	str	r3, [sp, #64]	; 0x40
 801e2c6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e2ca:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e2ce:	930c      	str	r3, [sp, #48]	; 0x30
 801e2d0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e2d4:	798f      	ldrb	r7, [r1, #6]
 801e2d6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e2da:	431f      	orrs	r7, r3
 801e2dc:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e2e0:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e2e4:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e2e8:	f000 8194 	beq.w	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e2ec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e2f0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e2f4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e2f8:	ea59 0903 	orrs.w	r9, r9, r3
 801e2fc:	f000 818a 	beq.w	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e300:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e304:	b29b      	uxth	r3, r3
 801e306:	2d00      	cmp	r5, #0
 801e308:	f000 812f 	beq.w	801e56a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801e30c:	1aed      	subs	r5, r5, r3
 801e30e:	b2ad      	uxth	r5, r5
 801e310:	042b      	lsls	r3, r5, #16
 801e312:	d502      	bpl.n	801e31a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e314:	1b64      	subs	r4, r4, r5
 801e316:	2500      	movs	r5, #0
 801e318:	b224      	sxth	r4, r4
 801e31a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e31e:	a814      	add	r0, sp, #80	; 0x50
 801e320:	428c      	cmp	r4, r1
 801e322:	b28b      	uxth	r3, r1
 801e324:	bfbf      	itttt	lt
 801e326:	18ed      	addlt	r5, r5, r3
 801e328:	1b2c      	sublt	r4, r5, r4
 801e32a:	b2a5      	uxthlt	r5, r4
 801e32c:	460c      	movlt	r4, r1
 801e32e:	8891      	ldrh	r1, [r2, #4]
 801e330:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e334:	440b      	add	r3, r1
 801e336:	b21b      	sxth	r3, r3
 801e338:	930f      	str	r3, [sp, #60]	; 0x3c
 801e33a:	88d3      	ldrh	r3, [r2, #6]
 801e33c:	8852      	ldrh	r2, [r2, #2]
 801e33e:	4621      	mov	r1, r4
 801e340:	4413      	add	r3, r2
 801e342:	b21b      	sxth	r3, r3
 801e344:	930d      	str	r3, [sp, #52]	; 0x34
 801e346:	4bbd      	ldr	r3, [pc, #756]	; (801e63c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e34a:	f893 b000 	ldrb.w	fp, [r3]
 801e34e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e352:	f1dc 0300 	rsbs	r3, ip, #0
 801e356:	eb43 030c 	adc.w	r3, r3, ip
 801e35a:	930e      	str	r3, [sp, #56]	; 0x38
 801e35c:	4653      	mov	r3, sl
 801e35e:	f7f8 fe6b 	bl	8017038 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e362:	4621      	mov	r1, r4
 801e364:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e368:	4653      	mov	r3, sl
 801e36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e36c:	a814      	add	r0, sp, #80	; 0x50
 801e36e:	f7f8 fe80 	bl	8017072 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e372:	a918      	add	r1, sp, #96	; 0x60
 801e374:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e378:	a817      	add	r0, sp, #92	; 0x5c
 801e37a:	f7f8 ffa1 	bl	80172c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e37e:	f1ba 0f00 	cmp.w	sl, #0
 801e382:	f040 80f5 	bne.w	801e570 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801e386:	f1bb 0f01 	cmp.w	fp, #1
 801e38a:	f040 80f9 	bne.w	801e580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801e38e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e390:	2b00      	cmp	r3, #0
 801e392:	f040 8144 	bne.w	801e61e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801e396:	b2ba      	uxth	r2, r7
 801e398:	b905      	cbnz	r5, 801e39c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801e39a:	b16e      	cbz	r6, 801e3b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801e39c:	4631      	mov	r1, r6
 801e39e:	fb06 5302 	mla	r3, r6, r2, r5
 801e3a2:	fb08 f303 	mul.w	r3, r8, r3
 801e3a6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801e3a8:	f003 0607 	and.w	r6, r3, #7
 801e3ac:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801e3b0:	9328      	str	r3, [sp, #160]	; 0xa0
 801e3b2:	eba9 0301 	sub.w	r3, r9, r1
 801e3b6:	930a      	str	r3, [sp, #40]	; 0x28
 801e3b8:	4651      	mov	r1, sl
 801e3ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e3bc:	f7ff ff1c 	bl	801e1f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801e3c0:	4681      	mov	r9, r0
 801e3c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e3c4:	f7ff ff42 	bl	801e24c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801e3c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e3cc:	4683      	mov	fp, r0
 801e3ce:	eba3 0a01 	sub.w	sl, r3, r1
 801e3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e3d4:	459a      	cmp	sl, r3
 801e3d6:	bfa8      	it	ge
 801e3d8:	469a      	movge	sl, r3
 801e3da:	f1ba 0f00 	cmp.w	sl, #0
 801e3de:	f340 8119 	ble.w	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3e4:	1b64      	subs	r4, r4, r5
 801e3e6:	1b1c      	subs	r4, r3, r4
 801e3e8:	42bc      	cmp	r4, r7
 801e3ea:	bfd4      	ite	le
 801e3ec:	ebc5 0504 	rsble	r5, r5, r4
 801e3f0:	ebc5 0507 	rsbgt	r5, r5, r7
 801e3f4:	2d00      	cmp	r5, #0
 801e3f6:	f340 810d 	ble.w	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e3fa:	1b52      	subs	r2, r2, r5
 801e3fc:	fb08 f302 	mul.w	r3, r8, r2
 801e400:	930f      	str	r3, [sp, #60]	; 0x3c
 801e402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e404:	2b00      	cmp	r3, #0
 801e406:	f040 8115 	bne.w	801e634 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801e40a:	4b8d      	ldr	r3, [pc, #564]	; (801e640 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e40c:	6818      	ldr	r0, [r3, #0]
 801e40e:	6803      	ldr	r3, [r0, #0]
 801e410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e412:	4798      	blx	r3
 801e414:	2301      	movs	r3, #1
 801e416:	fa03 f308 	lsl.w	r3, r3, r8
 801e41a:	4a8a      	ldr	r2, [pc, #552]	; (801e644 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e41c:	3b01      	subs	r3, #1
 801e41e:	b2db      	uxtb	r3, r3
 801e420:	8811      	ldrh	r1, [r2, #0]
 801e422:	930e      	str	r3, [sp, #56]	; 0x38
 801e424:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e428:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e42c:	fb01 2303 	mla	r3, r1, r3, r2
 801e430:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e434:	930a      	str	r3, [sp, #40]	; 0x28
 801e436:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e438:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e43c:	9313      	str	r3, [sp, #76]	; 0x4c
 801e43e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e440:	0a19      	lsrs	r1, r3, #8
 801e442:	b2cb      	uxtb	r3, r1
 801e444:	9312      	str	r3, [sp, #72]	; 0x48
 801e446:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e448:	b2db      	uxtb	r3, r3
 801e44a:	9311      	str	r3, [sp, #68]	; 0x44
 801e44c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e44e:	095a      	lsrs	r2, r3, #5
 801e450:	4b7d      	ldr	r3, [pc, #500]	; (801e648 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e452:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e456:	400b      	ands	r3, r1
 801e458:	4313      	orrs	r3, r2
 801e45a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e45c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e460:	4313      	orrs	r3, r2
 801e462:	b29b      	uxth	r3, r3
 801e464:	9310      	str	r3, [sp, #64]	; 0x40
 801e466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e468:	781a      	ldrb	r2, [r3, #0]
 801e46a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e46e:	fb05 b919 	mls	r9, r5, r9, fp
 801e472:	fb03 fb05 	mul.w	fp, r3, r5
 801e476:	4132      	asrs	r2, r6
 801e478:	b2d2      	uxtb	r2, r2
 801e47a:	930d      	str	r3, [sp, #52]	; 0x34
 801e47c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801e480:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e484:	f0c0 80f3 	bcc.w	801e66e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801e488:	46ae      	mov	lr, r5
 801e48a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801e48e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e492:	f0c0 80db 	bcc.w	801e64c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e498:	4013      	ands	r3, r2
 801e49a:	d055      	beq.n	801e548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e49c:	20ff      	movs	r0, #255	; 0xff
 801e49e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e4a0:	fb90 f1f1 	sdiv	r1, r0, r1
 801e4a4:	434b      	muls	r3, r1
 801e4a6:	2bfe      	cmp	r3, #254	; 0xfe
 801e4a8:	dd03      	ble.n	801e4b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801e4aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4ac:	4281      	cmp	r1, r0
 801e4ae:	f000 80c3 	beq.w	801e638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e4b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e4b4:	f8bc 4000 	ldrh.w	r4, [ip]
 801e4b8:	fb11 f303 	smulbb	r3, r1, r3
 801e4bc:	b29b      	uxth	r3, r3
 801e4be:	1c59      	adds	r1, r3, #1
 801e4c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e4c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e4c8:	b29f      	uxth	r7, r3
 801e4ca:	43db      	mvns	r3, r3
 801e4cc:	b2db      	uxtb	r3, r3
 801e4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801e4d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e4d2:	1220      	asrs	r0, r4, #8
 801e4d4:	fb13 f907 	smulbb	r9, r3, r7
 801e4d8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4de:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e4e2:	fb00 9003 	mla	r0, r0, r3, r9
 801e4e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e4e8:	10e1      	asrs	r1, r4, #3
 801e4ea:	fb13 f907 	smulbb	r9, r3, r7
 801e4ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4f4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801e4f8:	fb01 9103 	mla	r1, r1, r3, r9
 801e4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4fe:	00e4      	lsls	r4, r4, #3
 801e500:	fb13 f707 	smulbb	r7, r3, r7
 801e504:	b2e4      	uxtb	r4, r4
 801e506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e508:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e50c:	fb04 7403 	mla	r4, r4, r3, r7
 801e510:	b280      	uxth	r0, r0
 801e512:	b2a4      	uxth	r4, r4
 801e514:	1c43      	adds	r3, r0, #1
 801e516:	f104 0901 	add.w	r9, r4, #1
 801e51a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e51e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801e522:	b289      	uxth	r1, r1
 801e524:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801e528:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e52c:	ea49 0000 	orr.w	r0, r9, r0
 801e530:	f101 0901 	add.w	r9, r1, #1
 801e534:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801e538:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e53c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e540:	ea40 0009 	orr.w	r0, r0, r9
 801e544:	f8ac 0000 	strh.w	r0, [ip]
 801e548:	4446      	add	r6, r8
 801e54a:	b2b6      	uxth	r6, r6
 801e54c:	2e07      	cmp	r6, #7
 801e54e:	bf89      	itett	hi
 801e550:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801e552:	fa42 f208 	asrls.w	r2, r2, r8
 801e556:	785a      	ldrbhi	r2, [r3, #1]
 801e558:	3301      	addhi	r3, #1
 801e55a:	bf88      	it	hi
 801e55c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801e55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e560:	bf94      	ite	ls
 801e562:	b2d2      	uxtbls	r2, r2
 801e564:	2600      	movhi	r6, #0
 801e566:	449c      	add	ip, r3
 801e568:	e791      	b.n	801e48e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801e56a:	441c      	add	r4, r3
 801e56c:	b224      	sxth	r4, r4
 801e56e:	e6d4      	b.n	801e31a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e570:	f1ba 0f01 	cmp.w	sl, #1
 801e574:	f47f af0b 	bne.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e578:	f1bb 0f01 	cmp.w	fp, #1
 801e57c:	f47f af07 	bne.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e580:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801e640 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801e584:	f8db 0000 	ldr.w	r0, [fp]
 801e588:	6803      	ldr	r3, [r0, #0]
 801e58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e58c:	4798      	blx	r3
 801e58e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e592:	465a      	mov	r2, fp
 801e594:	d006      	beq.n	801e5a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801e596:	f1b8 0f04 	cmp.w	r8, #4
 801e59a:	d13e      	bne.n	801e61a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801e59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e59e:	3300      	adds	r3, #0
 801e5a0:	bf18      	it	ne
 801e5a2:	2301      	movne	r3, #1
 801e5a4:	0580      	lsls	r0, r0, #22
 801e5a6:	d56b      	bpl.n	801e680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801e5a8:	f1b8 0f08 	cmp.w	r8, #8
 801e5ac:	d168      	bne.n	801e680 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	bf0c      	ite	eq
 801e5b2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e5b6:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e5ba:	2d00      	cmp	r5, #0
 801e5bc:	f47f aee7 	bne.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e5c0:	2e00      	cmp	r6, #0
 801e5c2:	f47f aee4 	bne.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e5c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e5c8:	19e3      	adds	r3, r4, r7
 801e5ca:	4283      	cmp	r3, r0
 801e5cc:	f73f aedf 	bgt.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e5d4:	444b      	add	r3, r9
 801e5d6:	4283      	cmp	r3, r0
 801e5d8:	f73f aed9 	bgt.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e5dc:	2500      	movs	r5, #0
 801e5de:	6810      	ldr	r0, [r2, #0]
 801e5e0:	b2bf      	uxth	r7, r7
 801e5e2:	6804      	ldr	r4, [r0, #0]
 801e5e4:	f1b8 0f08 	cmp.w	r8, #8
 801e5e8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e5ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e5ee:	bf1c      	itt	ne
 801e5f0:	3701      	addne	r7, #1
 801e5f2:	f027 0701 	bicne.w	r7, r7, #1
 801e5f6:	9104      	str	r1, [sp, #16]
 801e5f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e5fa:	bf18      	it	ne
 801e5fc:	b2bf      	uxthne	r7, r7
 801e5fe:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e602:	e9cd 7900 	strd	r7, r9, [sp]
 801e606:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801e60a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801e60e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e610:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e612:	47a0      	blx	r4
 801e614:	b019      	add	sp, #100	; 0x64
 801e616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e61a:	2300      	movs	r3, #0
 801e61c:	e7c2      	b.n	801e5a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801e61e:	2208      	movs	r2, #8
 801e620:	fb92 f3f8 	sdiv	r3, r2, r8
 801e624:	1e5a      	subs	r2, r3, #1
 801e626:	443a      	add	r2, r7
 801e628:	fb92 f2f3 	sdiv	r2, r2, r3
 801e62c:	fb12 f203 	smulbb	r2, r2, r3
 801e630:	b292      	uxth	r2, r2
 801e632:	e6b1      	b.n	801e398 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801e634:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e636:	e6ed      	b.n	801e414 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801e638:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e63a:	e783      	b.n	801e544 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801e63c:	2004f654 	.word	0x2004f654
 801e640:	2004f65c 	.word	0x2004f65c
 801e644:	2004f656 	.word	0x2004f656
 801e648:	00fff800 	.word	0x00fff800
 801e64c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e64e:	b153      	cbz	r3, 801e666 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801e650:	441e      	add	r6, r3
 801e652:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e654:	b2b6      	uxth	r6, r6
 801e656:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801e65a:	781a      	ldrb	r2, [r3, #0]
 801e65c:	f006 0607 	and.w	r6, r6, #7
 801e660:	4132      	asrs	r2, r6
 801e662:	9328      	str	r3, [sp, #160]	; 0xa0
 801e664:	b2d2      	uxtb	r2, r2
 801e666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e668:	445b      	add	r3, fp
 801e66a:	930a      	str	r3, [sp, #40]	; 0x28
 801e66c:	e708      	b.n	801e480 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801e66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e670:	2b00      	cmp	r3, #0
 801e672:	d1cf      	bne.n	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e674:	4b05      	ldr	r3, [pc, #20]	; (801e68c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801e676:	6818      	ldr	r0, [r3, #0]
 801e678:	6803      	ldr	r3, [r0, #0]
 801e67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e67c:	4798      	blx	r3
 801e67e:	e7c9      	b.n	801e614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e680:	2b00      	cmp	r3, #0
 801e682:	f43f ae84 	beq.w	801e38e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801e686:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e68a:	e796      	b.n	801e5ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801e68c:	2004f65c 	.word	0x2004f65c

0801e690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801e690:	b538      	push	{r3, r4, r5, lr}
 801e692:	4605      	mov	r5, r0
 801e694:	4c13      	ldr	r4, [pc, #76]	; (801e6e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801e696:	e8d4 3f8f 	ldab	r3, [r4]
 801e69a:	07da      	lsls	r2, r3, #31
 801e69c:	d40b      	bmi.n	801e6b6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801e69e:	4620      	mov	r0, r4
 801e6a0:	f007 fd54 	bl	802614c <__cxa_guard_acquire>
 801e6a4:	b138      	cbz	r0, 801e6b6 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	f007 fd5c 	bl	8026164 <__cxa_guard_release>
 801e6ac:	4a0e      	ldr	r2, [pc, #56]	; (801e6e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e6ae:	490f      	ldr	r1, [pc, #60]	; (801e6ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801e6b0:	480f      	ldr	r0, [pc, #60]	; (801e6f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e6b2:	f007 fd44 	bl	802613e <__aeabi_atexit>
 801e6b6:	4c0f      	ldr	r4, [pc, #60]	; (801e6f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801e6b8:	e8d4 3f8f 	ldab	r3, [r4]
 801e6bc:	07db      	lsls	r3, r3, #31
 801e6be:	d40b      	bmi.n	801e6d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801e6c0:	4620      	mov	r0, r4
 801e6c2:	f007 fd43 	bl	802614c <__cxa_guard_acquire>
 801e6c6:	b138      	cbz	r0, 801e6d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f007 fd4b 	bl	8026164 <__cxa_guard_release>
 801e6ce:	4a06      	ldr	r2, [pc, #24]	; (801e6e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801e6d0:	4909      	ldr	r1, [pc, #36]	; (801e6f8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801e6d2:	480a      	ldr	r0, [pc, #40]	; (801e6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e6d4:	f007 fd33 	bl	802613e <__aeabi_atexit>
 801e6d8:	4b05      	ldr	r3, [pc, #20]	; (801e6f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801e6da:	612b      	str	r3, [r5, #16]
 801e6dc:	4b07      	ldr	r3, [pc, #28]	; (801e6fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801e6de:	616b      	str	r3, [r5, #20]
 801e6e0:	bd38      	pop	{r3, r4, r5, pc}
 801e6e2:	bf00      	nop
 801e6e4:	2004f730 	.word	0x2004f730
 801e6e8:	20000000 	.word	0x20000000
 801e6ec:	0801c8b7 	.word	0x0801c8b7
 801e6f0:	20025864 	.word	0x20025864
 801e6f4:	2004f734 	.word	0x2004f734
 801e6f8:	0801c8b5 	.word	0x0801c8b5
 801e6fc:	20025868 	.word	0x20025868

0801e700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801e700:	b538      	push	{r3, r4, r5, lr}
 801e702:	4605      	mov	r5, r0
 801e704:	4c13      	ldr	r4, [pc, #76]	; (801e754 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801e706:	e8d4 3f8f 	ldab	r3, [r4]
 801e70a:	07da      	lsls	r2, r3, #31
 801e70c:	d40b      	bmi.n	801e726 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801e70e:	4620      	mov	r0, r4
 801e710:	f007 fd1c 	bl	802614c <__cxa_guard_acquire>
 801e714:	b138      	cbz	r0, 801e726 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801e716:	4620      	mov	r0, r4
 801e718:	f007 fd24 	bl	8026164 <__cxa_guard_release>
 801e71c:	4a0e      	ldr	r2, [pc, #56]	; (801e758 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e71e:	490f      	ldr	r1, [pc, #60]	; (801e75c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801e720:	480f      	ldr	r0, [pc, #60]	; (801e760 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e722:	f007 fd0c 	bl	802613e <__aeabi_atexit>
 801e726:	4c0f      	ldr	r4, [pc, #60]	; (801e764 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801e728:	e8d4 3f8f 	ldab	r3, [r4]
 801e72c:	07db      	lsls	r3, r3, #31
 801e72e:	d40b      	bmi.n	801e748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801e730:	4620      	mov	r0, r4
 801e732:	f007 fd0b 	bl	802614c <__cxa_guard_acquire>
 801e736:	b138      	cbz	r0, 801e748 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801e738:	4620      	mov	r0, r4
 801e73a:	f007 fd13 	bl	8026164 <__cxa_guard_release>
 801e73e:	4a06      	ldr	r2, [pc, #24]	; (801e758 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801e740:	4909      	ldr	r1, [pc, #36]	; (801e768 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801e742:	480a      	ldr	r0, [pc, #40]	; (801e76c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e744:	f007 fcfb 	bl	802613e <__aeabi_atexit>
 801e748:	4b05      	ldr	r3, [pc, #20]	; (801e760 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801e74a:	60ab      	str	r3, [r5, #8]
 801e74c:	4b07      	ldr	r3, [pc, #28]	; (801e76c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801e74e:	60eb      	str	r3, [r5, #12]
 801e750:	bd38      	pop	{r3, r4, r5, pc}
 801e752:	bf00      	nop
 801e754:	2004f708 	.word	0x2004f708
 801e758:	20000000 	.word	0x20000000
 801e75c:	0801c8bb 	.word	0x0801c8bb
 801e760:	2002583c 	.word	0x2002583c
 801e764:	2004f70c 	.word	0x2004f70c
 801e768:	0801c8b9 	.word	0x0801c8b9
 801e76c:	20025840 	.word	0x20025840

0801e770 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801e770:	b510      	push	{r4, lr}
 801e772:	4604      	mov	r4, r0
 801e774:	f7ff ff8c 	bl	801e690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801e778:	4620      	mov	r0, r4
 801e77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e77e:	f7ff bfbf 	b.w	801e700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801e784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e784:	b538      	push	{r3, r4, r5, lr}
 801e786:	4605      	mov	r5, r0
 801e788:	4c13      	ldr	r4, [pc, #76]	; (801e7d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801e78a:	e8d4 3f8f 	ldab	r3, [r4]
 801e78e:	07da      	lsls	r2, r3, #31
 801e790:	d40b      	bmi.n	801e7aa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801e792:	4620      	mov	r0, r4
 801e794:	f007 fcda 	bl	802614c <__cxa_guard_acquire>
 801e798:	b138      	cbz	r0, 801e7aa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801e79a:	4620      	mov	r0, r4
 801e79c:	f007 fce2 	bl	8026164 <__cxa_guard_release>
 801e7a0:	4a0e      	ldr	r2, [pc, #56]	; (801e7dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e7a2:	490f      	ldr	r1, [pc, #60]	; (801e7e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e7a4:	480f      	ldr	r0, [pc, #60]	; (801e7e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e7a6:	f007 fcca 	bl	802613e <__aeabi_atexit>
 801e7aa:	4c0f      	ldr	r4, [pc, #60]	; (801e7e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e7ac:	e8d4 3f8f 	ldab	r3, [r4]
 801e7b0:	07db      	lsls	r3, r3, #31
 801e7b2:	d40b      	bmi.n	801e7cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	f007 fcc9 	bl	802614c <__cxa_guard_acquire>
 801e7ba:	b138      	cbz	r0, 801e7cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801e7bc:	4620      	mov	r0, r4
 801e7be:	f007 fcd1 	bl	8026164 <__cxa_guard_release>
 801e7c2:	4a06      	ldr	r2, [pc, #24]	; (801e7dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e7c4:	4909      	ldr	r1, [pc, #36]	; (801e7ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e7c6:	480a      	ldr	r0, [pc, #40]	; (801e7f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e7c8:	f007 fcb9 	bl	802613e <__aeabi_atexit>
 801e7cc:	4b05      	ldr	r3, [pc, #20]	; (801e7e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e7ce:	622b      	str	r3, [r5, #32]
 801e7d0:	4b07      	ldr	r3, [pc, #28]	; (801e7f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e7d2:	626b      	str	r3, [r5, #36]	; 0x24
 801e7d4:	bd38      	pop	{r3, r4, r5, pc}
 801e7d6:	bf00      	nop
 801e7d8:	2004f738 	.word	0x2004f738
 801e7dc:	20000000 	.word	0x20000000
 801e7e0:	0801c8af 	.word	0x0801c8af
 801e7e4:	2002586c 	.word	0x2002586c
 801e7e8:	2004f73c 	.word	0x2004f73c
 801e7ec:	0801c8ad 	.word	0x0801c8ad
 801e7f0:	20025870 	.word	0x20025870

0801e7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e7f4:	b538      	push	{r3, r4, r5, lr}
 801e7f6:	4605      	mov	r5, r0
 801e7f8:	4c13      	ldr	r4, [pc, #76]	; (801e848 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801e7fa:	e8d4 3f8f 	ldab	r3, [r4]
 801e7fe:	07da      	lsls	r2, r3, #31
 801e800:	d40b      	bmi.n	801e81a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801e802:	4620      	mov	r0, r4
 801e804:	f007 fca2 	bl	802614c <__cxa_guard_acquire>
 801e808:	b138      	cbz	r0, 801e81a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801e80a:	4620      	mov	r0, r4
 801e80c:	f007 fcaa 	bl	8026164 <__cxa_guard_release>
 801e810:	4a0e      	ldr	r2, [pc, #56]	; (801e84c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e812:	490f      	ldr	r1, [pc, #60]	; (801e850 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e814:	480f      	ldr	r0, [pc, #60]	; (801e854 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e816:	f007 fc92 	bl	802613e <__aeabi_atexit>
 801e81a:	4c0f      	ldr	r4, [pc, #60]	; (801e858 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e81c:	e8d4 3f8f 	ldab	r3, [r4]
 801e820:	07db      	lsls	r3, r3, #31
 801e822:	d40b      	bmi.n	801e83c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801e824:	4620      	mov	r0, r4
 801e826:	f007 fc91 	bl	802614c <__cxa_guard_acquire>
 801e82a:	b138      	cbz	r0, 801e83c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801e82c:	4620      	mov	r0, r4
 801e82e:	f007 fc99 	bl	8026164 <__cxa_guard_release>
 801e832:	4a06      	ldr	r2, [pc, #24]	; (801e84c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e834:	4909      	ldr	r1, [pc, #36]	; (801e85c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e836:	480a      	ldr	r0, [pc, #40]	; (801e860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e838:	f007 fc81 	bl	802613e <__aeabi_atexit>
 801e83c:	4b05      	ldr	r3, [pc, #20]	; (801e854 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e83e:	61ab      	str	r3, [r5, #24]
 801e840:	4b07      	ldr	r3, [pc, #28]	; (801e860 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e842:	61eb      	str	r3, [r5, #28]
 801e844:	bd38      	pop	{r3, r4, r5, pc}
 801e846:	bf00      	nop
 801e848:	2004f710 	.word	0x2004f710
 801e84c:	20000000 	.word	0x20000000
 801e850:	0801c8b3 	.word	0x0801c8b3
 801e854:	20025844 	.word	0x20025844
 801e858:	2004f714 	.word	0x2004f714
 801e85c:	0801c8b1 	.word	0x0801c8b1
 801e860:	20025848 	.word	0x20025848

0801e864 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801e864:	b510      	push	{r4, lr}
 801e866:	4604      	mov	r4, r0
 801e868:	f7ff ff8c 	bl	801e784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e86c:	4620      	mov	r0, r4
 801e86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e872:	f7ff bfbf 	b.w	801e7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e878:	b538      	push	{r3, r4, r5, lr}
 801e87a:	4605      	mov	r5, r0
 801e87c:	4c13      	ldr	r4, [pc, #76]	; (801e8cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801e87e:	e8d4 3f8f 	ldab	r3, [r4]
 801e882:	07da      	lsls	r2, r3, #31
 801e884:	d40b      	bmi.n	801e89e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801e886:	4620      	mov	r0, r4
 801e888:	f007 fc60 	bl	802614c <__cxa_guard_acquire>
 801e88c:	b138      	cbz	r0, 801e89e <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801e88e:	4620      	mov	r0, r4
 801e890:	f007 fc68 	bl	8026164 <__cxa_guard_release>
 801e894:	4a0e      	ldr	r2, [pc, #56]	; (801e8d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e896:	490f      	ldr	r1, [pc, #60]	; (801e8d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e898:	480f      	ldr	r0, [pc, #60]	; (801e8d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e89a:	f007 fc50 	bl	802613e <__aeabi_atexit>
 801e89e:	4c0f      	ldr	r4, [pc, #60]	; (801e8dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e8a0:	e8d4 3f8f 	ldab	r3, [r4]
 801e8a4:	07db      	lsls	r3, r3, #31
 801e8a6:	d40b      	bmi.n	801e8c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	f007 fc4f 	bl	802614c <__cxa_guard_acquire>
 801e8ae:	b138      	cbz	r0, 801e8c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801e8b0:	4620      	mov	r0, r4
 801e8b2:	f007 fc57 	bl	8026164 <__cxa_guard_release>
 801e8b6:	4a06      	ldr	r2, [pc, #24]	; (801e8d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e8b8:	4909      	ldr	r1, [pc, #36]	; (801e8e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e8ba:	480a      	ldr	r0, [pc, #40]	; (801e8e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e8bc:	f007 fc3f 	bl	802613e <__aeabi_atexit>
 801e8c0:	4b05      	ldr	r3, [pc, #20]	; (801e8d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e8c2:	632b      	str	r3, [r5, #48]	; 0x30
 801e8c4:	4b07      	ldr	r3, [pc, #28]	; (801e8e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e8c6:	636b      	str	r3, [r5, #52]	; 0x34
 801e8c8:	bd38      	pop	{r3, r4, r5, pc}
 801e8ca:	bf00      	nop
 801e8cc:	2004f748 	.word	0x2004f748
 801e8d0:	20000000 	.word	0x20000000
 801e8d4:	0801c8a7 	.word	0x0801c8a7
 801e8d8:	2002587c 	.word	0x2002587c
 801e8dc:	2004f74c 	.word	0x2004f74c
 801e8e0:	0801c8a5 	.word	0x0801c8a5
 801e8e4:	20025880 	.word	0x20025880

0801e8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e8e8:	b538      	push	{r3, r4, r5, lr}
 801e8ea:	4605      	mov	r5, r0
 801e8ec:	4c13      	ldr	r4, [pc, #76]	; (801e93c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801e8ee:	e8d4 3f8f 	ldab	r3, [r4]
 801e8f2:	07da      	lsls	r2, r3, #31
 801e8f4:	d40b      	bmi.n	801e90e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801e8f6:	4620      	mov	r0, r4
 801e8f8:	f007 fc28 	bl	802614c <__cxa_guard_acquire>
 801e8fc:	b138      	cbz	r0, 801e90e <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801e8fe:	4620      	mov	r0, r4
 801e900:	f007 fc30 	bl	8026164 <__cxa_guard_release>
 801e904:	4a0e      	ldr	r2, [pc, #56]	; (801e940 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e906:	490f      	ldr	r1, [pc, #60]	; (801e944 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e908:	480f      	ldr	r0, [pc, #60]	; (801e948 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e90a:	f007 fc18 	bl	802613e <__aeabi_atexit>
 801e90e:	4c0f      	ldr	r4, [pc, #60]	; (801e94c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e910:	e8d4 3f8f 	ldab	r3, [r4]
 801e914:	07db      	lsls	r3, r3, #31
 801e916:	d40b      	bmi.n	801e930 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801e918:	4620      	mov	r0, r4
 801e91a:	f007 fc17 	bl	802614c <__cxa_guard_acquire>
 801e91e:	b138      	cbz	r0, 801e930 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801e920:	4620      	mov	r0, r4
 801e922:	f007 fc1f 	bl	8026164 <__cxa_guard_release>
 801e926:	4a06      	ldr	r2, [pc, #24]	; (801e940 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e928:	4909      	ldr	r1, [pc, #36]	; (801e950 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e92a:	480a      	ldr	r0, [pc, #40]	; (801e954 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e92c:	f007 fc07 	bl	802613e <__aeabi_atexit>
 801e930:	4b05      	ldr	r3, [pc, #20]	; (801e948 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e932:	62ab      	str	r3, [r5, #40]	; 0x28
 801e934:	4b07      	ldr	r3, [pc, #28]	; (801e954 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e936:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e938:	bd38      	pop	{r3, r4, r5, pc}
 801e93a:	bf00      	nop
 801e93c:	2004f718 	.word	0x2004f718
 801e940:	20000000 	.word	0x20000000
 801e944:	0801c8ab 	.word	0x0801c8ab
 801e948:	2002584c 	.word	0x2002584c
 801e94c:	2004f71c 	.word	0x2004f71c
 801e950:	0801c8a9 	.word	0x0801c8a9
 801e954:	20025850 	.word	0x20025850

0801e958 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e958:	b510      	push	{r4, lr}
 801e95a:	4604      	mov	r4, r0
 801e95c:	f7ff ff8c 	bl	801e878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e960:	4620      	mov	r0, r4
 801e962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e966:	f7ff bfbf 	b.w	801e8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e96c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801e96c:	b538      	push	{r3, r4, r5, lr}
 801e96e:	4605      	mov	r5, r0
 801e970:	4c13      	ldr	r4, [pc, #76]	; (801e9c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801e972:	e8d4 3f8f 	ldab	r3, [r4]
 801e976:	07da      	lsls	r2, r3, #31
 801e978:	d40b      	bmi.n	801e992 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e97a:	4620      	mov	r0, r4
 801e97c:	f007 fbe6 	bl	802614c <__cxa_guard_acquire>
 801e980:	b138      	cbz	r0, 801e992 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801e982:	4620      	mov	r0, r4
 801e984:	f007 fbee 	bl	8026164 <__cxa_guard_release>
 801e988:	4a0e      	ldr	r2, [pc, #56]	; (801e9c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e98a:	490f      	ldr	r1, [pc, #60]	; (801e9c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801e98c:	480f      	ldr	r0, [pc, #60]	; (801e9cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e98e:	f007 fbd6 	bl	802613e <__aeabi_atexit>
 801e992:	4c0f      	ldr	r4, [pc, #60]	; (801e9d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801e994:	e8d4 3f8f 	ldab	r3, [r4]
 801e998:	07db      	lsls	r3, r3, #31
 801e99a:	d40b      	bmi.n	801e9b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e99c:	4620      	mov	r0, r4
 801e99e:	f007 fbd5 	bl	802614c <__cxa_guard_acquire>
 801e9a2:	b138      	cbz	r0, 801e9b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	f007 fbdd 	bl	8026164 <__cxa_guard_release>
 801e9aa:	4a06      	ldr	r2, [pc, #24]	; (801e9c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801e9ac:	4909      	ldr	r1, [pc, #36]	; (801e9d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801e9ae:	480a      	ldr	r0, [pc, #40]	; (801e9d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e9b0:	f007 fbc5 	bl	802613e <__aeabi_atexit>
 801e9b4:	4b05      	ldr	r3, [pc, #20]	; (801e9cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801e9b6:	652b      	str	r3, [r5, #80]	; 0x50
 801e9b8:	4b07      	ldr	r3, [pc, #28]	; (801e9d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801e9ba:	656b      	str	r3, [r5, #84]	; 0x54
 801e9bc:	bd38      	pop	{r3, r4, r5, pc}
 801e9be:	bf00      	nop
 801e9c0:	2004f750 	.word	0x2004f750
 801e9c4:	20000000 	.word	0x20000000
 801e9c8:	0801c897 	.word	0x0801c897
 801e9cc:	20025884 	.word	0x20025884
 801e9d0:	2004f754 	.word	0x2004f754
 801e9d4:	0801c895 	.word	0x0801c895
 801e9d8:	20025888 	.word	0x20025888

0801e9dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801e9dc:	b538      	push	{r3, r4, r5, lr}
 801e9de:	4605      	mov	r5, r0
 801e9e0:	4c13      	ldr	r4, [pc, #76]	; (801ea30 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801e9e2:	e8d4 3f8f 	ldab	r3, [r4]
 801e9e6:	07da      	lsls	r2, r3, #31
 801e9e8:	d40b      	bmi.n	801ea02 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e9ea:	4620      	mov	r0, r4
 801e9ec:	f007 fbae 	bl	802614c <__cxa_guard_acquire>
 801e9f0:	b138      	cbz	r0, 801ea02 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	f007 fbb6 	bl	8026164 <__cxa_guard_release>
 801e9f8:	4a0e      	ldr	r2, [pc, #56]	; (801ea34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801e9fa:	490f      	ldr	r1, [pc, #60]	; (801ea38 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801e9fc:	480f      	ldr	r0, [pc, #60]	; (801ea3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801e9fe:	f007 fb9e 	bl	802613e <__aeabi_atexit>
 801ea02:	4c0f      	ldr	r4, [pc, #60]	; (801ea40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801ea04:	e8d4 3f8f 	ldab	r3, [r4]
 801ea08:	07db      	lsls	r3, r3, #31
 801ea0a:	d40b      	bmi.n	801ea24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801ea0c:	4620      	mov	r0, r4
 801ea0e:	f007 fb9d 	bl	802614c <__cxa_guard_acquire>
 801ea12:	b138      	cbz	r0, 801ea24 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801ea14:	4620      	mov	r0, r4
 801ea16:	f007 fba5 	bl	8026164 <__cxa_guard_release>
 801ea1a:	4a06      	ldr	r2, [pc, #24]	; (801ea34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801ea1c:	4909      	ldr	r1, [pc, #36]	; (801ea44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801ea1e:	480a      	ldr	r0, [pc, #40]	; (801ea48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801ea20:	f007 fb8d 	bl	802613e <__aeabi_atexit>
 801ea24:	4b05      	ldr	r3, [pc, #20]	; (801ea3c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801ea26:	64ab      	str	r3, [r5, #72]	; 0x48
 801ea28:	4b07      	ldr	r3, [pc, #28]	; (801ea48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801ea2a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ea2c:	bd38      	pop	{r3, r4, r5, pc}
 801ea2e:	bf00      	nop
 801ea30:	2004f758 	.word	0x2004f758
 801ea34:	20000000 	.word	0x20000000
 801ea38:	0801c89b 	.word	0x0801c89b
 801ea3c:	2002588c 	.word	0x2002588c
 801ea40:	2004f75c 	.word	0x2004f75c
 801ea44:	0801c899 	.word	0x0801c899
 801ea48:	20025890 	.word	0x20025890

0801ea4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801ea4c:	b538      	push	{r3, r4, r5, lr}
 801ea4e:	4605      	mov	r5, r0
 801ea50:	4c13      	ldr	r4, [pc, #76]	; (801eaa0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801ea52:	e8d4 3f8f 	ldab	r3, [r4]
 801ea56:	07da      	lsls	r2, r3, #31
 801ea58:	d40b      	bmi.n	801ea72 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801ea5a:	4620      	mov	r0, r4
 801ea5c:	f007 fb76 	bl	802614c <__cxa_guard_acquire>
 801ea60:	b138      	cbz	r0, 801ea72 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801ea62:	4620      	mov	r0, r4
 801ea64:	f007 fb7e 	bl	8026164 <__cxa_guard_release>
 801ea68:	4a0e      	ldr	r2, [pc, #56]	; (801eaa4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ea6a:	490f      	ldr	r1, [pc, #60]	; (801eaa8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801ea6c:	480f      	ldr	r0, [pc, #60]	; (801eaac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ea6e:	f007 fb66 	bl	802613e <__aeabi_atexit>
 801ea72:	4c0f      	ldr	r4, [pc, #60]	; (801eab0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801ea74:	e8d4 3f8f 	ldab	r3, [r4]
 801ea78:	07db      	lsls	r3, r3, #31
 801ea7a:	d40b      	bmi.n	801ea94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f007 fb65 	bl	802614c <__cxa_guard_acquire>
 801ea82:	b138      	cbz	r0, 801ea94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801ea84:	4620      	mov	r0, r4
 801ea86:	f007 fb6d 	bl	8026164 <__cxa_guard_release>
 801ea8a:	4a06      	ldr	r2, [pc, #24]	; (801eaa4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801ea8c:	4909      	ldr	r1, [pc, #36]	; (801eab4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801ea8e:	480a      	ldr	r0, [pc, #40]	; (801eab8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ea90:	f007 fb55 	bl	802613e <__aeabi_atexit>
 801ea94:	4b05      	ldr	r3, [pc, #20]	; (801eaac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801ea96:	642b      	str	r3, [r5, #64]	; 0x40
 801ea98:	4b07      	ldr	r3, [pc, #28]	; (801eab8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801ea9a:	646b      	str	r3, [r5, #68]	; 0x44
 801ea9c:	bd38      	pop	{r3, r4, r5, pc}
 801ea9e:	bf00      	nop
 801eaa0:	2004f720 	.word	0x2004f720
 801eaa4:	20000000 	.word	0x20000000
 801eaa8:	0801c89f 	.word	0x0801c89f
 801eaac:	20025854 	.word	0x20025854
 801eab0:	2004f724 	.word	0x2004f724
 801eab4:	0801c89d 	.word	0x0801c89d
 801eab8:	20025858 	.word	0x20025858

0801eabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801eabc:	b538      	push	{r3, r4, r5, lr}
 801eabe:	4605      	mov	r5, r0
 801eac0:	4c13      	ldr	r4, [pc, #76]	; (801eb10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801eac2:	e8d4 3f8f 	ldab	r3, [r4]
 801eac6:	07da      	lsls	r2, r3, #31
 801eac8:	d40b      	bmi.n	801eae2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801eaca:	4620      	mov	r0, r4
 801eacc:	f007 fb3e 	bl	802614c <__cxa_guard_acquire>
 801ead0:	b138      	cbz	r0, 801eae2 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801ead2:	4620      	mov	r0, r4
 801ead4:	f007 fb46 	bl	8026164 <__cxa_guard_release>
 801ead8:	4a0e      	ldr	r2, [pc, #56]	; (801eb14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801eada:	490f      	ldr	r1, [pc, #60]	; (801eb18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801eadc:	480f      	ldr	r0, [pc, #60]	; (801eb1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801eade:	f007 fb2e 	bl	802613e <__aeabi_atexit>
 801eae2:	4c0f      	ldr	r4, [pc, #60]	; (801eb20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801eae4:	e8d4 3f8f 	ldab	r3, [r4]
 801eae8:	07db      	lsls	r3, r3, #31
 801eaea:	d40b      	bmi.n	801eb04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801eaec:	4620      	mov	r0, r4
 801eaee:	f007 fb2d 	bl	802614c <__cxa_guard_acquire>
 801eaf2:	b138      	cbz	r0, 801eb04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801eaf4:	4620      	mov	r0, r4
 801eaf6:	f007 fb35 	bl	8026164 <__cxa_guard_release>
 801eafa:	4a06      	ldr	r2, [pc, #24]	; (801eb14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801eafc:	4909      	ldr	r1, [pc, #36]	; (801eb24 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801eafe:	480a      	ldr	r0, [pc, #40]	; (801eb28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801eb00:	f007 fb1d 	bl	802613e <__aeabi_atexit>
 801eb04:	4b05      	ldr	r3, [pc, #20]	; (801eb1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801eb06:	63ab      	str	r3, [r5, #56]	; 0x38
 801eb08:	4b07      	ldr	r3, [pc, #28]	; (801eb28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801eb0a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801eb0c:	bd38      	pop	{r3, r4, r5, pc}
 801eb0e:	bf00      	nop
 801eb10:	2004f740 	.word	0x2004f740
 801eb14:	20000000 	.word	0x20000000
 801eb18:	0801c8a3 	.word	0x0801c8a3
 801eb1c:	20025874 	.word	0x20025874
 801eb20:	2004f744 	.word	0x2004f744
 801eb24:	0801c8a1 	.word	0x0801c8a1
 801eb28:	20025878 	.word	0x20025878

0801eb2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801eb2c:	b510      	push	{r4, lr}
 801eb2e:	4604      	mov	r4, r0
 801eb30:	f7ff ff1c 	bl	801e96c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801eb34:	4620      	mov	r0, r4
 801eb36:	f7ff ff89 	bl	801ea4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801eb3a:	4620      	mov	r0, r4
 801eb3c:	f7ff ff4e 	bl	801e9dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801eb40:	4620      	mov	r0, r4
 801eb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb46:	f7ff bfb9 	b.w	801eabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801eb4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801eb4c:	b538      	push	{r3, r4, r5, lr}
 801eb4e:	4605      	mov	r5, r0
 801eb50:	4c13      	ldr	r4, [pc, #76]	; (801eba0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801eb52:	e8d4 3f8f 	ldab	r3, [r4]
 801eb56:	07da      	lsls	r2, r3, #31
 801eb58:	d40b      	bmi.n	801eb72 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801eb5a:	4620      	mov	r0, r4
 801eb5c:	f007 faf6 	bl	802614c <__cxa_guard_acquire>
 801eb60:	b138      	cbz	r0, 801eb72 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801eb62:	4620      	mov	r0, r4
 801eb64:	f007 fafe 	bl	8026164 <__cxa_guard_release>
 801eb68:	4a0e      	ldr	r2, [pc, #56]	; (801eba4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eb6a:	490f      	ldr	r1, [pc, #60]	; (801eba8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801eb6c:	480f      	ldr	r0, [pc, #60]	; (801ebac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eb6e:	f007 fae6 	bl	802613e <__aeabi_atexit>
 801eb72:	4c0f      	ldr	r4, [pc, #60]	; (801ebb0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801eb74:	e8d4 3f8f 	ldab	r3, [r4]
 801eb78:	07db      	lsls	r3, r3, #31
 801eb7a:	d40b      	bmi.n	801eb94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801eb7c:	4620      	mov	r0, r4
 801eb7e:	f007 fae5 	bl	802614c <__cxa_guard_acquire>
 801eb82:	b138      	cbz	r0, 801eb94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801eb84:	4620      	mov	r0, r4
 801eb86:	f007 faed 	bl	8026164 <__cxa_guard_release>
 801eb8a:	4a06      	ldr	r2, [pc, #24]	; (801eba4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801eb8c:	4909      	ldr	r1, [pc, #36]	; (801ebb4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801eb8e:	480a      	ldr	r0, [pc, #40]	; (801ebb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eb90:	f007 fad5 	bl	802613e <__aeabi_atexit>
 801eb94:	4b05      	ldr	r3, [pc, #20]	; (801ebac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801eb96:	662b      	str	r3, [r5, #96]	; 0x60
 801eb98:	4b07      	ldr	r3, [pc, #28]	; (801ebb8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801eb9a:	666b      	str	r3, [r5, #100]	; 0x64
 801eb9c:	bd38      	pop	{r3, r4, r5, pc}
 801eb9e:	bf00      	nop
 801eba0:	2004f728 	.word	0x2004f728
 801eba4:	20000000 	.word	0x20000000
 801eba8:	0801c88f 	.word	0x0801c88f
 801ebac:	2002585c 	.word	0x2002585c
 801ebb0:	2004f72c 	.word	0x2004f72c
 801ebb4:	0801c88d 	.word	0x0801c88d
 801ebb8:	20025860 	.word	0x20025860

0801ebbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ebbc:	b538      	push	{r3, r4, r5, lr}
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	4c13      	ldr	r4, [pc, #76]	; (801ec10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801ebc2:	e8d4 3f8f 	ldab	r3, [r4]
 801ebc6:	07da      	lsls	r2, r3, #31
 801ebc8:	d40b      	bmi.n	801ebe2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ebca:	4620      	mov	r0, r4
 801ebcc:	f007 fabe 	bl	802614c <__cxa_guard_acquire>
 801ebd0:	b138      	cbz	r0, 801ebe2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ebd2:	4620      	mov	r0, r4
 801ebd4:	f007 fac6 	bl	8026164 <__cxa_guard_release>
 801ebd8:	4a0e      	ldr	r2, [pc, #56]	; (801ec14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ebda:	490f      	ldr	r1, [pc, #60]	; (801ec18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ebdc:	480f      	ldr	r0, [pc, #60]	; (801ec1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ebde:	f007 faae 	bl	802613e <__aeabi_atexit>
 801ebe2:	4c0f      	ldr	r4, [pc, #60]	; (801ec20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ebe4:	e8d4 3f8f 	ldab	r3, [r4]
 801ebe8:	07db      	lsls	r3, r3, #31
 801ebea:	d40b      	bmi.n	801ec04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ebec:	4620      	mov	r0, r4
 801ebee:	f007 faad 	bl	802614c <__cxa_guard_acquire>
 801ebf2:	b138      	cbz	r0, 801ec04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	f007 fab5 	bl	8026164 <__cxa_guard_release>
 801ebfa:	4a06      	ldr	r2, [pc, #24]	; (801ec14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ebfc:	4909      	ldr	r1, [pc, #36]	; (801ec24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ebfe:	480a      	ldr	r0, [pc, #40]	; (801ec28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ec00:	f007 fa9d 	bl	802613e <__aeabi_atexit>
 801ec04:	4b05      	ldr	r3, [pc, #20]	; (801ec1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ec06:	65ab      	str	r3, [r5, #88]	; 0x58
 801ec08:	4b07      	ldr	r3, [pc, #28]	; (801ec28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ec0a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801ec0c:	bd38      	pop	{r3, r4, r5, pc}
 801ec0e:	bf00      	nop
 801ec10:	2004f700 	.word	0x2004f700
 801ec14:	20000000 	.word	0x20000000
 801ec18:	0801c893 	.word	0x0801c893
 801ec1c:	20025834 	.word	0x20025834
 801ec20:	2004f704 	.word	0x2004f704
 801ec24:	0801c891 	.word	0x0801c891
 801ec28:	20025838 	.word	0x20025838

0801ec2c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801ec2c:	b510      	push	{r4, lr}
 801ec2e:	4604      	mov	r4, r0
 801ec30:	f7ff ff8c 	bl	801eb4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ec34:	4620      	mov	r0, r4
 801ec36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec3a:	f7ff bfbf 	b.w	801ebbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ec40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ec40:	b538      	push	{r3, r4, r5, lr}
 801ec42:	4605      	mov	r5, r0
 801ec44:	4c13      	ldr	r4, [pc, #76]	; (801ec94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801ec46:	e8d4 3f8f 	ldab	r3, [r4]
 801ec4a:	07da      	lsls	r2, r3, #31
 801ec4c:	d40b      	bmi.n	801ec66 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801ec4e:	4620      	mov	r0, r4
 801ec50:	f007 fa7c 	bl	802614c <__cxa_guard_acquire>
 801ec54:	b138      	cbz	r0, 801ec66 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801ec56:	4620      	mov	r0, r4
 801ec58:	f007 fa84 	bl	8026164 <__cxa_guard_release>
 801ec5c:	4a0e      	ldr	r2, [pc, #56]	; (801ec98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ec5e:	490f      	ldr	r1, [pc, #60]	; (801ec9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ec60:	480f      	ldr	r0, [pc, #60]	; (801eca0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ec62:	f007 fa6c 	bl	802613e <__aeabi_atexit>
 801ec66:	4c0f      	ldr	r4, [pc, #60]	; (801eca4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ec68:	e8d4 3f8f 	ldab	r3, [r4]
 801ec6c:	07db      	lsls	r3, r3, #31
 801ec6e:	d40b      	bmi.n	801ec88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801ec70:	4620      	mov	r0, r4
 801ec72:	f007 fa6b 	bl	802614c <__cxa_guard_acquire>
 801ec76:	b138      	cbz	r0, 801ec88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f007 fa73 	bl	8026164 <__cxa_guard_release>
 801ec7e:	4a06      	ldr	r2, [pc, #24]	; (801ec98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ec80:	4909      	ldr	r1, [pc, #36]	; (801eca8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ec82:	480a      	ldr	r0, [pc, #40]	; (801ecac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ec84:	f007 fa5b 	bl	802613e <__aeabi_atexit>
 801ec88:	4b05      	ldr	r3, [pc, #20]	; (801eca0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ec8a:	672b      	str	r3, [r5, #112]	; 0x70
 801ec8c:	4b07      	ldr	r3, [pc, #28]	; (801ecac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ec8e:	676b      	str	r3, [r5, #116]	; 0x74
 801ec90:	bd38      	pop	{r3, r4, r5, pc}
 801ec92:	bf00      	nop
 801ec94:	2004f6f8 	.word	0x2004f6f8
 801ec98:	20000000 	.word	0x20000000
 801ec9c:	0801c887 	.word	0x0801c887
 801eca0:	2002582c 	.word	0x2002582c
 801eca4:	2004f6fc 	.word	0x2004f6fc
 801eca8:	0801c885 	.word	0x0801c885
 801ecac:	20025830 	.word	0x20025830

0801ecb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ecb0:	b538      	push	{r3, r4, r5, lr}
 801ecb2:	4605      	mov	r5, r0
 801ecb4:	4c13      	ldr	r4, [pc, #76]	; (801ed04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801ecb6:	e8d4 3f8f 	ldab	r3, [r4]
 801ecba:	07da      	lsls	r2, r3, #31
 801ecbc:	d40b      	bmi.n	801ecd6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	f007 fa44 	bl	802614c <__cxa_guard_acquire>
 801ecc4:	b138      	cbz	r0, 801ecd6 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f007 fa4c 	bl	8026164 <__cxa_guard_release>
 801eccc:	4a0e      	ldr	r2, [pc, #56]	; (801ed08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ecce:	490f      	ldr	r1, [pc, #60]	; (801ed0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ecd0:	480f      	ldr	r0, [pc, #60]	; (801ed10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ecd2:	f007 fa34 	bl	802613e <__aeabi_atexit>
 801ecd6:	4c0f      	ldr	r4, [pc, #60]	; (801ed14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ecd8:	e8d4 3f8f 	ldab	r3, [r4]
 801ecdc:	07db      	lsls	r3, r3, #31
 801ecde:	d40b      	bmi.n	801ecf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ece0:	4620      	mov	r0, r4
 801ece2:	f007 fa33 	bl	802614c <__cxa_guard_acquire>
 801ece6:	b138      	cbz	r0, 801ecf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ece8:	4620      	mov	r0, r4
 801ecea:	f007 fa3b 	bl	8026164 <__cxa_guard_release>
 801ecee:	4a06      	ldr	r2, [pc, #24]	; (801ed08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ecf0:	4909      	ldr	r1, [pc, #36]	; (801ed18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ecf2:	480a      	ldr	r0, [pc, #40]	; (801ed1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ecf4:	f007 fa23 	bl	802613e <__aeabi_atexit>
 801ecf8:	4b05      	ldr	r3, [pc, #20]	; (801ed10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ecfa:	66ab      	str	r3, [r5, #104]	; 0x68
 801ecfc:	4b07      	ldr	r3, [pc, #28]	; (801ed1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ecfe:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ed00:	bd38      	pop	{r3, r4, r5, pc}
 801ed02:	bf00      	nop
 801ed04:	2004f6f0 	.word	0x2004f6f0
 801ed08:	20000000 	.word	0x20000000
 801ed0c:	0801c88b 	.word	0x0801c88b
 801ed10:	20025824 	.word	0x20025824
 801ed14:	2004f6f4 	.word	0x2004f6f4
 801ed18:	0801c889 	.word	0x0801c889
 801ed1c:	20025828 	.word	0x20025828

0801ed20 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801ed20:	b510      	push	{r4, lr}
 801ed22:	4604      	mov	r4, r0
 801ed24:	f7ff ff8c 	bl	801ec40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ed28:	4620      	mov	r0, r4
 801ed2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed2e:	f7ff bfbf 	b.w	801ecb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801ed32 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801ed32:	b510      	push	{r4, lr}
 801ed34:	4604      	mov	r4, r0
 801ed36:	f7ff fff3 	bl	801ed20 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f7ff ff76 	bl	801ec2c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801ed40:	4620      	mov	r0, r4
 801ed42:	f7ff fe09 	bl	801e958 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801ed46:	4620      	mov	r0, r4
 801ed48:	f7ff fd12 	bl	801e770 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f7ff fd89 	bl	801e864 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801ed52:	4620      	mov	r0, r4
 801ed54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed58:	f7ff bee8 	b.w	801eb2c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801ed5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed60:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801ed64:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801ed68:	fb05 4c0e 	mla	ip, r5, lr, r4
 801ed6c:	2d00      	cmp	r5, #0
 801ed6e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801ed72:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801ed76:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ed7a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ed7e:	eb02 0a0c 	add.w	sl, r2, ip
 801ed82:	8808      	ldrh	r0, [r1, #0]
 801ed84:	f2c0 80b0 	blt.w	801eee8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ed88:	45ab      	cmp	fp, r5
 801ed8a:	f340 80ad 	ble.w	801eee8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ed8e:	2c00      	cmp	r4, #0
 801ed90:	f2c0 80a8 	blt.w	801eee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ed94:	45a6      	cmp	lr, r4
 801ed96:	f340 80a5 	ble.w	801eee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ed9a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ed9e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801eda2:	1c62      	adds	r2, r4, #1
 801eda4:	f100 80a3 	bmi.w	801eeee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801eda8:	4596      	cmp	lr, r2
 801edaa:	f340 80a0 	ble.w	801eeee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801edae:	f1b9 0f00 	cmp.w	r9, #0
 801edb2:	f000 809c 	beq.w	801eeee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801edb6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801edba:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801edbe:	3501      	adds	r5, #1
 801edc0:	f100 8099 	bmi.w	801eef6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801edc4:	45ab      	cmp	fp, r5
 801edc6:	f340 8096 	ble.w	801eef6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801edca:	2f00      	cmp	r7, #0
 801edcc:	f000 8093 	beq.w	801eef6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801edd0:	2c00      	cmp	r4, #0
 801edd2:	f2c0 808e 	blt.w	801eef2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801edd6:	45a6      	cmp	lr, r4
 801edd8:	f340 808b 	ble.w	801eef2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801eddc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801ede0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801ede4:	3401      	adds	r4, #1
 801ede6:	f100 8089 	bmi.w	801eefc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801edea:	45a6      	cmp	lr, r4
 801edec:	f340 8086 	ble.w	801eefc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801edf0:	f1b9 0f00 	cmp.w	r9, #0
 801edf4:	f000 8082 	beq.w	801eefc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801edf8:	44d6      	add	lr, sl
 801edfa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801edfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ee02:	fb19 fe07 	smulbb	lr, r9, r7
 801ee06:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801ee0a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ee0e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801ee12:	ea44 0808 	orr.w	r8, r4, r8
 801ee16:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801ee1a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801ee1e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ee22:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ee26:	ea44 0c0c 	orr.w	ip, r4, ip
 801ee2a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801ee2e:	fb04 f40c 	mul.w	r4, r4, ip
 801ee32:	f1c7 0210 	rsb	r2, r7, #16
 801ee36:	eba2 0209 	sub.w	r2, r2, r9
 801ee3a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801ee3e:	fb02 4808 	mla	r8, r2, r8, r4
 801ee42:	b2b4      	uxth	r4, r6
 801ee44:	43f6      	mvns	r6, r6
 801ee46:	041a      	lsls	r2, r3, #16
 801ee48:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ee4c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee50:	4313      	orrs	r3, r2
 801ee52:	fb0e 8303 	mla	r3, lr, r3, r8
 801ee56:	042a      	lsls	r2, r5, #16
 801ee58:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ee5c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ee60:	432a      	orrs	r2, r5
 801ee62:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801ee66:	fb07 3202 	mla	r2, r7, r2, r3
 801ee6a:	0d53      	lsrs	r3, r2, #21
 801ee6c:	0952      	lsrs	r2, r2, #5
 801ee6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee72:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ee76:	431a      	orrs	r2, r3
 801ee78:	b293      	uxth	r3, r2
 801ee7a:	1202      	asrs	r2, r0, #8
 801ee7c:	b2f6      	uxtb	r6, r6
 801ee7e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ee82:	fb12 f206 	smulbb	r2, r2, r6
 801ee86:	10c7      	asrs	r7, r0, #3
 801ee88:	00c0      	lsls	r0, r0, #3
 801ee8a:	b2c0      	uxtb	r0, r0
 801ee8c:	121d      	asrs	r5, r3, #8
 801ee8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee92:	fb10 f006 	smulbb	r0, r0, r6
 801ee96:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ee9a:	fb17 f706 	smulbb	r7, r7, r6
 801ee9e:	fb05 2504 	mla	r5, r5, r4, r2
 801eea2:	10da      	asrs	r2, r3, #3
 801eea4:	00db      	lsls	r3, r3, #3
 801eea6:	b2db      	uxtb	r3, r3
 801eea8:	fb03 0004 	mla	r0, r3, r4, r0
 801eeac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eeb0:	fb02 7204 	mla	r2, r2, r4, r7
 801eeb4:	b2ad      	uxth	r5, r5
 801eeb6:	b280      	uxth	r0, r0
 801eeb8:	1c6b      	adds	r3, r5, #1
 801eeba:	b292      	uxth	r2, r2
 801eebc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801eec0:	1c43      	adds	r3, r0, #1
 801eec2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801eec6:	1c50      	adds	r0, r2, #1
 801eec8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801eecc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801eed0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801eed4:	0952      	lsrs	r2, r2, #5
 801eed6:	432b      	orrs	r3, r5
 801eed8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eedc:	4313      	orrs	r3, r2
 801eede:	800b      	strh	r3, [r1, #0]
 801eee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eee4:	4680      	mov	r8, r0
 801eee6:	e75c      	b.n	801eda2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801eee8:	4684      	mov	ip, r0
 801eeea:	4680      	mov	r8, r0
 801eeec:	e767      	b.n	801edbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801eeee:	4684      	mov	ip, r0
 801eef0:	e765      	b.n	801edbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801eef2:	4605      	mov	r5, r0
 801eef4:	e776      	b.n	801ede4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801eef6:	4603      	mov	r3, r0
 801eef8:	4605      	mov	r5, r0
 801eefa:	e782      	b.n	801ee02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801eefc:	4603      	mov	r3, r0
 801eefe:	e780      	b.n	801ee02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801ef00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef04:	b099      	sub	sp, #100	; 0x64
 801ef06:	9215      	str	r2, [sp, #84]	; 0x54
 801ef08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ef0a:	9016      	str	r0, [sp, #88]	; 0x58
 801ef0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef0e:	6850      	ldr	r0, [r2, #4]
 801ef10:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801ef14:	910c      	str	r1, [sp, #48]	; 0x30
 801ef16:	930d      	str	r3, [sp, #52]	; 0x34
 801ef18:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801ef1c:	fb00 1303 	mla	r3, r0, r3, r1
 801ef20:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801ef24:	6812      	ldr	r2, [r2, #0]
 801ef26:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801ef2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef32:	685e      	ldr	r6, [r3, #4]
 801ef34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef36:	3604      	adds	r6, #4
 801ef38:	43db      	mvns	r3, r3
 801ef3a:	b2db      	uxtb	r3, r3
 801ef3c:	930a      	str	r3, [sp, #40]	; 0x28
 801ef3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	dc03      	bgt.n	801ef4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ef44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	f340 8225 	ble.w	801f396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801ef4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ef4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef52:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef56:	1e48      	subs	r0, r1, #1
 801ef58:	1e57      	subs	r7, r2, #1
 801ef5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f340 80e3 	ble.w	801f128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801ef62:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801ef66:	ea4f 4325 	mov.w	r3, r5, asr #16
 801ef6a:	d406      	bmi.n	801ef7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ef6c:	4584      	cmp	ip, r0
 801ef6e:	da04      	bge.n	801ef7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	db02      	blt.n	801ef7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ef74:	42bb      	cmp	r3, r7
 801ef76:	f2c0 80d8 	blt.w	801f12a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ef7a:	f11c 0c01 	adds.w	ip, ip, #1
 801ef7e:	f100 80c9 	bmi.w	801f114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef82:	4561      	cmp	r1, ip
 801ef84:	f2c0 80c6 	blt.w	801f114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef88:	3301      	adds	r3, #1
 801ef8a:	f100 80c3 	bmi.w	801f114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef8e:	429a      	cmp	r2, r3
 801ef90:	f2c0 80c0 	blt.w	801f114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef94:	4647      	mov	r7, r8
 801ef96:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ef9a:	f1bb 0f00 	cmp.w	fp, #0
 801ef9e:	f340 80e3 	ble.w	801f168 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801efa2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801efa4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801efa6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801efaa:	ea5f 422a 	movs.w	r2, sl, asr #16
 801efae:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801efb2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801efb6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801efba:	689b      	ldr	r3, [r3, #8]
 801efbc:	f100 8121 	bmi.w	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801efc0:	f103 39ff 	add.w	r9, r3, #4294967295
 801efc4:	454a      	cmp	r2, r9
 801efc6:	f280 811c 	bge.w	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801efca:	f1bc 0f00 	cmp.w	ip, #0
 801efce:	f2c0 8118 	blt.w	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801efd2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801efd6:	45cc      	cmp	ip, r9
 801efd8:	f280 8113 	bge.w	801f202 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801efdc:	b21b      	sxth	r3, r3
 801efde:	fb0c 2203 	mla	r2, ip, r3, r2
 801efe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801efe4:	eb04 0902 	add.w	r9, r4, r2
 801efe8:	5ca2      	ldrb	r2, [r4, r2]
 801efea:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801efee:	2800      	cmp	r0, #0
 801eff0:	f000 80fe 	beq.w	801f1f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801eff4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801eff8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801effc:	9211      	str	r2, [sp, #68]	; 0x44
 801effe:	b151      	cbz	r1, 801f016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f000:	eb09 0203 	add.w	r2, r9, r3
 801f004:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f008:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f00c:	930f      	str	r3, [sp, #60]	; 0x3c
 801f00e:	7853      	ldrb	r3, [r2, #1]
 801f010:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f014:	9312      	str	r3, [sp, #72]	; 0x48
 801f016:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f018:	fb10 f201 	smulbb	r2, r0, r1
 801f01c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f020:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f024:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f028:	ea4c 0c03 	orr.w	ip, ip, r3
 801f02c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f02e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f030:	041b      	lsls	r3, r3, #16
 801f032:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f036:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f03a:	10d2      	asrs	r2, r2, #3
 801f03c:	4323      	orrs	r3, r4
 801f03e:	4353      	muls	r3, r2
 801f040:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f044:	fb09 330c 	mla	r3, r9, ip, r3
 801f048:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f04c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f050:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f054:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f058:	f1c1 0c10 	rsb	ip, r1, #16
 801f05c:	ebac 0c00 	sub.w	ip, ip, r0
 801f060:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f064:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f06a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f06e:	0418      	lsls	r0, r3, #16
 801f070:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f074:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f078:	4318      	orrs	r0, r3
 801f07a:	fb02 c200 	mla	r2, r2, r0, ip
 801f07e:	8838      	ldrh	r0, [r7, #0]
 801f080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f082:	0d53      	lsrs	r3, r2, #21
 801f084:	1201      	asrs	r1, r0, #8
 801f086:	0952      	lsrs	r2, r2, #5
 801f088:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f08c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f090:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f094:	431a      	orrs	r2, r3
 801f096:	fb11 f104 	smulbb	r1, r1, r4
 801f09a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f09e:	00c0      	lsls	r0, r0, #3
 801f0a0:	b292      	uxth	r2, r2
 801f0a2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f0a6:	b2c0      	uxtb	r0, r0
 801f0a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f0ac:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f0b0:	fb1e fe04 	smulbb	lr, lr, r4
 801f0b4:	fb10 f004 	smulbb	r0, r0, r4
 801f0b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f0bc:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f0c0:	10d1      	asrs	r1, r2, #3
 801f0c2:	00d2      	lsls	r2, r2, #3
 801f0c4:	b2d2      	uxtb	r2, r2
 801f0c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f0ca:	fb01 e103 	mla	r1, r1, r3, lr
 801f0ce:	fb02 0303 	mla	r3, r2, r3, r0
 801f0d2:	fa1f fc8c 	uxth.w	ip, ip
 801f0d6:	b29a      	uxth	r2, r3
 801f0d8:	f10c 0301 	add.w	r3, ip, #1
 801f0dc:	b289      	uxth	r1, r1
 801f0de:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f0e2:	1c53      	adds	r3, r2, #1
 801f0e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f0e8:	1c4a      	adds	r2, r1, #1
 801f0ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f0ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f0f2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f0f6:	0949      	lsrs	r1, r1, #5
 801f0f8:	ea43 030c 	orr.w	r3, r3, ip
 801f0fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f100:	430b      	orrs	r3, r1
 801f102:	803b      	strh	r3, [r7, #0]
 801f104:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f106:	3702      	adds	r7, #2
 801f108:	449a      	add	sl, r3
 801f10a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f10c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f110:	441d      	add	r5, r3
 801f112:	e742      	b.n	801ef9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f114:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f116:	f108 0802 	add.w	r8, r8, #2
 801f11a:	449a      	add	sl, r3
 801f11c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f11e:	441d      	add	r5, r3
 801f120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f122:	3b01      	subs	r3, #1
 801f124:	9309      	str	r3, [sp, #36]	; 0x24
 801f126:	e718      	b.n	801ef5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f128:	d023      	beq.n	801f172 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f12c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f12e:	3b01      	subs	r3, #1
 801f130:	fb00 a003 	mla	r0, r0, r3, sl
 801f134:	1400      	asrs	r0, r0, #16
 801f136:	f53f af2d 	bmi.w	801ef94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f13a:	3901      	subs	r1, #1
 801f13c:	4288      	cmp	r0, r1
 801f13e:	f6bf af29 	bge.w	801ef94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f142:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f144:	fb01 5303 	mla	r3, r1, r3, r5
 801f148:	141b      	asrs	r3, r3, #16
 801f14a:	f53f af23 	bmi.w	801ef94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f14e:	3a01      	subs	r2, #1
 801f150:	4293      	cmp	r3, r2
 801f152:	f6bf af1f 	bge.w	801ef94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f156:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f15a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f15e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f162:	f1be 0f00 	cmp.w	lr, #0
 801f166:	dc6c      	bgt.n	801f242 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f16a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f16e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f174:	2b00      	cmp	r3, #0
 801f176:	f340 810e 	ble.w	801f396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f17a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f17e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f182:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f186:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f18a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f18e:	eef0 6a62 	vmov.f32	s13, s5
 801f192:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f196:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f19a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f19e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f1a6:	ee16 aa90 	vmov	sl, s13
 801f1aa:	eef0 6a43 	vmov.f32	s13, s6
 801f1ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f1b2:	ee12 2a90 	vmov	r2, s5
 801f1b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f1ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1c4:	ee13 2a10 	vmov	r2, s6
 801f1c8:	9325      	str	r3, [sp, #148]	; 0x94
 801f1ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1cc:	ee16 5a90 	vmov	r5, s13
 801f1d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1d4:	9326      	str	r3, [sp, #152]	; 0x98
 801f1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f1d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f1da:	3b01      	subs	r3, #1
 801f1dc:	930c      	str	r3, [sp, #48]	; 0x30
 801f1de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f1e0:	bf08      	it	eq
 801f1e2:	4613      	moveq	r3, r2
 801f1e4:	eeb0 3a67 	vmov.f32	s6, s15
 801f1e8:	9309      	str	r3, [sp, #36]	; 0x24
 801f1ea:	eef0 2a47 	vmov.f32	s5, s14
 801f1ee:	e6a6      	b.n	801ef3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f1f0:	2900      	cmp	r1, #0
 801f1f2:	f43f af10 	beq.w	801f016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f1f6:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f1fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f1fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801f200:	e709      	b.n	801f016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f202:	f112 0901 	adds.w	r9, r2, #1
 801f206:	f53f af7d 	bmi.w	801f104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f20a:	454b      	cmp	r3, r9
 801f20c:	f6ff af7a 	blt.w	801f104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f210:	f11c 0901 	adds.w	r9, ip, #1
 801f214:	f53f af76 	bmi.w	801f104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f218:	45ce      	cmp	lr, r9
 801f21a:	f6ff af73 	blt.w	801f104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f21e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f220:	9202      	str	r2, [sp, #8]
 801f222:	b21b      	sxth	r3, r3
 801f224:	fa0f f28e 	sxth.w	r2, lr
 801f228:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f22c:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f230:	9201      	str	r2, [sp, #4]
 801f232:	9300      	str	r3, [sp, #0]
 801f234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f236:	4633      	mov	r3, r6
 801f238:	4639      	mov	r1, r7
 801f23a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f23c:	f7ff fd8e 	bl	801ed5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f240:	e760      	b.n	801f104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f242:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f244:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f248:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f24c:	1429      	asrs	r1, r5, #16
 801f24e:	fb03 2101 	mla	r1, r3, r1, r2
 801f252:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f256:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f25a:	440a      	add	r2, r1
 801f25c:	5c61      	ldrb	r1, [r4, r1]
 801f25e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f262:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f266:	f1bc 0f00 	cmp.w	ip, #0
 801f26a:	f000 808c 	beq.w	801f386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f26e:	7857      	ldrb	r7, [r2, #1]
 801f270:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f274:	9413      	str	r4, [sp, #76]	; 0x4c
 801f276:	b140      	cbz	r0, 801f28a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f278:	18d7      	adds	r7, r2, r3
 801f27a:	5cd3      	ldrb	r3, [r2, r3]
 801f27c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f280:	9310      	str	r3, [sp, #64]	; 0x40
 801f282:	787b      	ldrb	r3, [r7, #1]
 801f284:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f288:	9314      	str	r3, [sp, #80]	; 0x50
 801f28a:	fb1c f200 	smulbb	r2, ip, r0
 801f28e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f290:	10d2      	asrs	r2, r2, #3
 801f292:	041f      	lsls	r7, r3, #16
 801f294:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f298:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f29c:	431f      	orrs	r7, r3
 801f29e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f2a2:	9317      	str	r3, [sp, #92]	; 0x5c
 801f2a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f2a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f2a8:	041b      	lsls	r3, r3, #16
 801f2aa:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f2ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f2b2:	ea43 030b 	orr.w	r3, r3, fp
 801f2b6:	4353      	muls	r3, r2
 801f2b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f2ba:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f2be:	fb04 3707 	mla	r7, r4, r7, r3
 801f2c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f2c6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f2ca:	ea43 0b01 	orr.w	fp, r3, r1
 801f2ce:	f1c0 0110 	rsb	r1, r0, #16
 801f2d2:	eba1 0c0c 	sub.w	ip, r1, ip
 801f2d6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f2da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2dc:	fb0c 770b 	mla	r7, ip, fp, r7
 801f2e0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f2e4:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f2e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f2ec:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f2f0:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f2f4:	fb02 770c 	mla	r7, r2, ip, r7
 801f2f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f2fa:	0d79      	lsrs	r1, r7, #21
 801f2fc:	8812      	ldrh	r2, [r2, #0]
 801f2fe:	097f      	lsrs	r7, r7, #5
 801f300:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f304:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f308:	430f      	orrs	r7, r1
 801f30a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f30c:	1211      	asrs	r1, r2, #8
 801f30e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f312:	b2bb      	uxth	r3, r7
 801f314:	fb11 f104 	smulbb	r1, r1, r4
 801f318:	10d7      	asrs	r7, r2, #3
 801f31a:	00d2      	lsls	r2, r2, #3
 801f31c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f320:	b2d2      	uxtb	r2, r2
 801f322:	1218      	asrs	r0, r3, #8
 801f324:	fb17 f704 	smulbb	r7, r7, r4
 801f328:	fb12 f204 	smulbb	r2, r2, r4
 801f32c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f330:	fb00 1009 	mla	r0, r0, r9, r1
 801f334:	10d9      	asrs	r1, r3, #3
 801f336:	00db      	lsls	r3, r3, #3
 801f338:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f33c:	b2db      	uxtb	r3, r3
 801f33e:	fb01 7109 	mla	r1, r1, r9, r7
 801f342:	fb03 2309 	mla	r3, r3, r9, r2
 801f346:	b280      	uxth	r0, r0
 801f348:	b29b      	uxth	r3, r3
 801f34a:	b289      	uxth	r1, r1
 801f34c:	1c42      	adds	r2, r0, #1
 801f34e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f352:	1c4f      	adds	r7, r1, #1
 801f354:	1c5a      	adds	r2, r3, #1
 801f356:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f35a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f35e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f362:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f366:	0949      	lsrs	r1, r1, #5
 801f368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f36a:	4310      	orrs	r0, r2
 801f36c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f370:	4308      	orrs	r0, r1
 801f372:	f823 0b02 	strh.w	r0, [r3], #2
 801f376:	930e      	str	r3, [sp, #56]	; 0x38
 801f378:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f37a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f37e:	449a      	add	sl, r3
 801f380:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f382:	441d      	add	r5, r3
 801f384:	e6ed      	b.n	801f162 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f386:	2800      	cmp	r0, #0
 801f388:	f43f af7f 	beq.w	801f28a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f38c:	5cd3      	ldrb	r3, [r2, r3]
 801f38e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f392:	9310      	str	r3, [sp, #64]	; 0x40
 801f394:	e779      	b.n	801f28a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f396:	b019      	add	sp, #100	; 0x64
 801f398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f39c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801f39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3a0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801f3a4:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801f3a8:	fb08 470e 	mla	r7, r8, lr, r4
 801f3ac:	f1b8 0f00 	cmp.w	r8, #0
 801f3b0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f3b4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f3b8:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801f3bc:	eb02 0907 	add.w	r9, r2, r7
 801f3c0:	8808      	ldrh	r0, [r1, #0]
 801f3c2:	db67      	blt.n	801f494 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f3c4:	45c2      	cmp	sl, r8
 801f3c6:	dd65      	ble.n	801f494 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801f3c8:	2c00      	cmp	r4, #0
 801f3ca:	db61      	blt.n	801f490 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f3cc:	45a6      	cmp	lr, r4
 801f3ce:	dd5f      	ble.n	801f490 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801f3d0:	5dd2      	ldrb	r2, [r2, r7]
 801f3d2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f3d6:	1c62      	adds	r2, r4, #1
 801f3d8:	d45f      	bmi.n	801f49a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f3da:	4596      	cmp	lr, r2
 801f3dc:	dd5d      	ble.n	801f49a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f3de:	2d00      	cmp	r5, #0
 801f3e0:	d05b      	beq.n	801f49a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801f3e2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f3e6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f3ea:	f118 0801 	adds.w	r8, r8, #1
 801f3ee:	d458      	bmi.n	801f4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f3f0:	45c2      	cmp	sl, r8
 801f3f2:	dd56      	ble.n	801f4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f3f4:	2e00      	cmp	r6, #0
 801f3f6:	d054      	beq.n	801f4a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801f3f8:	2c00      	cmp	r4, #0
 801f3fa:	db50      	blt.n	801f49e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f3fc:	45a6      	cmp	lr, r4
 801f3fe:	dd4e      	ble.n	801f49e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801f400:	f819 200e 	ldrb.w	r2, [r9, lr]
 801f404:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f408:	3401      	adds	r4, #1
 801f40a:	d407      	bmi.n	801f41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f40c:	45a6      	cmp	lr, r4
 801f40e:	dd05      	ble.n	801f41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f410:	b125      	cbz	r5, 801f41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801f412:	44ce      	add	lr, r9
 801f414:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f418:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f41c:	fb15 f406 	smulbb	r4, r5, r6
 801f420:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f424:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f428:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f42c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f430:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f434:	ea43 0c0c 	orr.w	ip, r3, ip
 801f438:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f43c:	f1c6 0310 	rsb	r3, r6, #16
 801f440:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f444:	1b5b      	subs	r3, r3, r5
 801f446:	ea4e 0707 	orr.w	r7, lr, r7
 801f44a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f44e:	437d      	muls	r5, r7
 801f450:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f454:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f458:	0403      	lsls	r3, r0, #16
 801f45a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f45e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f462:	4318      	orrs	r0, r3
 801f464:	fb04 c000 	mla	r0, r4, r0, ip
 801f468:	0413      	lsls	r3, r2, #16
 801f46a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f46e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f472:	4313      	orrs	r3, r2
 801f474:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f478:	fb06 0003 	mla	r0, r6, r3, r0
 801f47c:	0d43      	lsrs	r3, r0, #21
 801f47e:	0940      	lsrs	r0, r0, #5
 801f480:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f484:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f488:	4318      	orrs	r0, r3
 801f48a:	8008      	strh	r0, [r1, #0]
 801f48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f490:	4684      	mov	ip, r0
 801f492:	e7a0      	b.n	801f3d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801f494:	4607      	mov	r7, r0
 801f496:	4684      	mov	ip, r0
 801f498:	e7a7      	b.n	801f3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f49a:	4607      	mov	r7, r0
 801f49c:	e7a5      	b.n	801f3ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801f49e:	4602      	mov	r2, r0
 801f4a0:	e7b2      	b.n	801f408 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801f4a2:	4602      	mov	r2, r0
 801f4a4:	e7ba      	b.n	801f41c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801f4a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f4aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ae:	b093      	sub	sp, #76	; 0x4c
 801f4b0:	920f      	str	r2, [sp, #60]	; 0x3c
 801f4b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f4b4:	9010      	str	r0, [sp, #64]	; 0x40
 801f4b6:	6850      	ldr	r0, [r2, #4]
 801f4b8:	9108      	str	r1, [sp, #32]
 801f4ba:	9306      	str	r3, [sp, #24]
 801f4bc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f4c0:	fb00 1303 	mla	r3, r0, r3, r1
 801f4c4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801f4c8:	6812      	ldr	r2, [r2, #0]
 801f4ca:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801f4ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	9307      	str	r3, [sp, #28]
 801f4d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f4d6:	685f      	ldr	r7, [r3, #4]
 801f4d8:	3704      	adds	r7, #4
 801f4da:	9b08      	ldr	r3, [sp, #32]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	dc03      	bgt.n	801f4e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f4e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	f340 81b2 	ble.w	801f84c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f4e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f4ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f4ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f4f2:	1e48      	subs	r0, r1, #1
 801f4f4:	f102 3cff 	add.w	ip, r2, #4294967295
 801f4f8:	9b06      	ldr	r3, [sp, #24]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	f340 80a9 	ble.w	801f652 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f500:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f504:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f508:	d406      	bmi.n	801f518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f50a:	4586      	cmp	lr, r0
 801f50c:	da04      	bge.n	801f518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f50e:	2b00      	cmp	r3, #0
 801f510:	db02      	blt.n	801f518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f512:	4563      	cmp	r3, ip
 801f514:	f2c0 809e 	blt.w	801f654 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f518:	f11e 0e01 	adds.w	lr, lr, #1
 801f51c:	f100 808f 	bmi.w	801f63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f520:	4571      	cmp	r1, lr
 801f522:	f2c0 808c 	blt.w	801f63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f526:	3301      	adds	r3, #1
 801f528:	f100 8089 	bmi.w	801f63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f52c:	429a      	cmp	r2, r3
 801f52e:	f2c0 8086 	blt.w	801f63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801f532:	46c8      	mov	r8, r9
 801f534:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f538:	f1bb 0f00 	cmp.w	fp, #0
 801f53c:	f340 80a6 	ble.w	801f68c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f540:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f542:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f544:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f548:	1422      	asrs	r2, r4, #16
 801f54a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801f54e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801f552:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f556:	689b      	ldr	r3, [r3, #8]
 801f558:	f100 80e3 	bmi.w	801f722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f55c:	f103 3aff 	add.w	sl, r3, #4294967295
 801f560:	4552      	cmp	r2, sl
 801f562:	f280 80de 	bge.w	801f722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f566:	f1bc 0f00 	cmp.w	ip, #0
 801f56a:	f2c0 80da 	blt.w	801f722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f56e:	f10e 3aff 	add.w	sl, lr, #4294967295
 801f572:	45d4      	cmp	ip, sl
 801f574:	f280 80d5 	bge.w	801f722 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f578:	b21b      	sxth	r3, r3
 801f57a:	fb0c 2203 	mla	r2, ip, r3, r2
 801f57e:	9d07      	ldr	r5, [sp, #28]
 801f580:	eb05 0a02 	add.w	sl, r5, r2
 801f584:	5caa      	ldrb	r2, [r5, r2]
 801f586:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801f58a:	2800      	cmp	r0, #0
 801f58c:	f000 80c0 	beq.w	801f710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f590:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f594:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801f598:	920b      	str	r2, [sp, #44]	; 0x2c
 801f59a:	b151      	cbz	r1, 801f5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f59c:	eb0a 0203 	add.w	r2, sl, r3
 801f5a0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f5a4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f5a8:	9309      	str	r3, [sp, #36]	; 0x24
 801f5aa:	7853      	ldrb	r3, [r2, #1]
 801f5ac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f5b0:	930c      	str	r3, [sp, #48]	; 0x30
 801f5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5b4:	fb10 f201 	smulbb	r2, r0, r1
 801f5b8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f5bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f5c0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f5c4:	ea4c 0c03 	orr.w	ip, ip, r3
 801f5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f5cc:	041b      	lsls	r3, r3, #16
 801f5ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f5d2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f5d6:	10d2      	asrs	r2, r2, #3
 801f5d8:	432b      	orrs	r3, r5
 801f5da:	4353      	muls	r3, r2
 801f5dc:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801f5e0:	fb0a 330c 	mla	r3, sl, ip, r3
 801f5e4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f5e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f5ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f5f0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f5f4:	f1c1 0c10 	rsb	ip, r1, #16
 801f5f8:	ebac 0c00 	sub.w	ip, ip, r0
 801f5fc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f600:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f606:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f60a:	0418      	lsls	r0, r3, #16
 801f60c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f610:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f614:	4318      	orrs	r0, r3
 801f616:	fb02 c200 	mla	r2, r2, r0, ip
 801f61a:	0d53      	lsrs	r3, r2, #21
 801f61c:	0952      	lsrs	r2, r2, #5
 801f61e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f622:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f626:	431a      	orrs	r2, r3
 801f628:	f8a8 2000 	strh.w	r2, [r8]
 801f62c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f62e:	f108 0802 	add.w	r8, r8, #2
 801f632:	441c      	add	r4, r3
 801f634:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f636:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f63a:	441e      	add	r6, r3
 801f63c:	e77c      	b.n	801f538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f63e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f640:	f109 0902 	add.w	r9, r9, #2
 801f644:	441c      	add	r4, r3
 801f646:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f648:	441e      	add	r6, r3
 801f64a:	9b06      	ldr	r3, [sp, #24]
 801f64c:	3b01      	subs	r3, #1
 801f64e:	9306      	str	r3, [sp, #24]
 801f650:	e752      	b.n	801f4f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f652:	d020      	beq.n	801f696 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f654:	9b06      	ldr	r3, [sp, #24]
 801f656:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f658:	3b01      	subs	r3, #1
 801f65a:	fb00 4003 	mla	r0, r0, r3, r4
 801f65e:	1400      	asrs	r0, r0, #16
 801f660:	f53f af67 	bmi.w	801f532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f664:	3901      	subs	r1, #1
 801f666:	4288      	cmp	r0, r1
 801f668:	f6bf af63 	bge.w	801f532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f66c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f66e:	fb01 6303 	mla	r3, r1, r3, r6
 801f672:	141b      	asrs	r3, r3, #16
 801f674:	f53f af5d 	bmi.w	801f532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f678:	3a01      	subs	r2, #1
 801f67a:	4293      	cmp	r3, r2
 801f67c:	f6bf af59 	bge.w	801f532 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f680:	46ca      	mov	sl, r9
 801f682:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f686:	f1b8 0f00 	cmp.w	r8, #0
 801f68a:	dc67      	bgt.n	801f75c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f68c:	9b06      	ldr	r3, [sp, #24]
 801f68e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f692:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801f696:	9b08      	ldr	r3, [sp, #32]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	f340 80d7 	ble.w	801f84c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801f69e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6ae:	eeb0 6a62 	vmov.f32	s12, s5
 801f6b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6c6:	ee16 4a10 	vmov	r4, s12
 801f6ca:	eeb0 6a43 	vmov.f32	s12, s6
 801f6ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6d2:	ee12 2a90 	vmov	r2, s5
 801f6d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f6dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6e4:	ee13 2a10 	vmov	r2, s6
 801f6e8:	931f      	str	r3, [sp, #124]	; 0x7c
 801f6ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f6ec:	ee16 6a10 	vmov	r6, s12
 801f6f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6f4:	9320      	str	r3, [sp, #128]	; 0x80
 801f6f6:	9b08      	ldr	r3, [sp, #32]
 801f6f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f6fa:	3b01      	subs	r3, #1
 801f6fc:	9308      	str	r3, [sp, #32]
 801f6fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f700:	bf08      	it	eq
 801f702:	4613      	moveq	r3, r2
 801f704:	eeb0 3a67 	vmov.f32	s6, s15
 801f708:	9306      	str	r3, [sp, #24]
 801f70a:	eef0 2a47 	vmov.f32	s5, s14
 801f70e:	e6e4      	b.n	801f4da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f710:	2900      	cmp	r1, #0
 801f712:	f43f af4e 	beq.w	801f5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f716:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801f71a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f71e:	9309      	str	r3, [sp, #36]	; 0x24
 801f720:	e747      	b.n	801f5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f722:	f112 0a01 	adds.w	sl, r2, #1
 801f726:	d481      	bmi.n	801f62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f728:	4553      	cmp	r3, sl
 801f72a:	f6ff af7f 	blt.w	801f62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f72e:	f11c 0a01 	adds.w	sl, ip, #1
 801f732:	f53f af7b 	bmi.w	801f62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f736:	45d6      	cmp	lr, sl
 801f738:	f6ff af78 	blt.w	801f62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f73c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801f740:	b21b      	sxth	r3, r3
 801f742:	fa0f f28e 	sxth.w	r2, lr
 801f746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f74a:	9201      	str	r2, [sp, #4]
 801f74c:	9300      	str	r3, [sp, #0]
 801f74e:	9a07      	ldr	r2, [sp, #28]
 801f750:	463b      	mov	r3, r7
 801f752:	4641      	mov	r1, r8
 801f754:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f756:	f7ff fe21 	bl	801f39c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801f75a:	e767      	b.n	801f62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f75c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f75e:	1422      	asrs	r2, r4, #16
 801f760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f764:	1431      	asrs	r1, r6, #16
 801f766:	fb03 2101 	mla	r1, r3, r1, r2
 801f76a:	9d07      	ldr	r5, [sp, #28]
 801f76c:	9a07      	ldr	r2, [sp, #28]
 801f76e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801f772:	440a      	add	r2, r1
 801f774:	5c69      	ldrb	r1, [r5, r1]
 801f776:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f77a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801f77e:	f1be 0f00 	cmp.w	lr, #0
 801f782:	d05c      	beq.n	801f83e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801f784:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f788:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801f78c:	950d      	str	r5, [sp, #52]	; 0x34
 801f78e:	b150      	cbz	r0, 801f7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f790:	eb02 0c03 	add.w	ip, r2, r3
 801f794:	5cd3      	ldrb	r3, [r2, r3]
 801f796:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f79a:	930a      	str	r3, [sp, #40]	; 0x28
 801f79c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f7a0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f7a4:	930e      	str	r3, [sp, #56]	; 0x38
 801f7a6:	fb1e f200 	smulbb	r2, lr, r0
 801f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f7ac:	10d2      	asrs	r2, r2, #3
 801f7ae:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f7b2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f7b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f7ba:	ea4c 0c03 	orr.w	ip, ip, r3
 801f7be:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801f7c2:	9311      	str	r3, [sp, #68]	; 0x44
 801f7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f7c8:	041b      	lsls	r3, r3, #16
 801f7ca:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801f7ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f7d2:	ea43 030b 	orr.w	r3, r3, fp
 801f7d6:	4353      	muls	r3, r2
 801f7d8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f7da:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f7de:	fb05 3c0c 	mla	ip, r5, ip, r3
 801f7e2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f7e6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f7ea:	ea43 0b01 	orr.w	fp, r3, r1
 801f7ee:	f1c0 0110 	rsb	r1, r0, #16
 801f7f2:	eba1 0e0e 	sub.w	lr, r1, lr
 801f7f6:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801f7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7fc:	fb0e cc0b 	mla	ip, lr, fp, ip
 801f800:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801f804:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801f808:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f80c:	ea4b 0e0e 	orr.w	lr, fp, lr
 801f810:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f814:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f818:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801f81c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f820:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f824:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f828:	ea43 0c0c 	orr.w	ip, r3, ip
 801f82c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f82e:	f82a cb02 	strh.w	ip, [sl], #2
 801f832:	441c      	add	r4, r3
 801f834:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f836:	f108 38ff 	add.w	r8, r8, #4294967295
 801f83a:	441e      	add	r6, r3
 801f83c:	e723      	b.n	801f686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f83e:	2800      	cmp	r0, #0
 801f840:	d0b1      	beq.n	801f7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f842:	5cd3      	ldrb	r3, [r2, r3]
 801f844:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801f848:	930a      	str	r3, [sp, #40]	; 0x28
 801f84a:	e7ac      	b.n	801f7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801f84c:	b013      	add	sp, #76	; 0x4c
 801f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801f852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f856:	880d      	ldrh	r5, [r1, #0]
 801f858:	b087      	sub	sp, #28
 801f85a:	10ef      	asrs	r7, r5, #3
 801f85c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801f860:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f864:	00ed      	lsls	r5, r5, #3
 801f866:	9701      	str	r7, [sp, #4]
 801f868:	b2ed      	uxtb	r5, r5
 801f86a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801f86e:	9502      	str	r5, [sp, #8]
 801f870:	9d01      	ldr	r5, [sp, #4]
 801f872:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f876:	fb06 0709 	mla	r7, r6, r9, r0
 801f87a:	9103      	str	r1, [sp, #12]
 801f87c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f880:	022d      	lsls	r5, r5, #8
 801f882:	9902      	ldr	r1, [sp, #8]
 801f884:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801f888:	430d      	orrs	r5, r1
 801f88a:	2e00      	cmp	r6, #0
 801f88c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f890:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f894:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f898:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801f89c:	eb02 0c07 	add.w	ip, r2, r7
 801f8a0:	9505      	str	r5, [sp, #20]
 801f8a2:	f2c0 80b6 	blt.w	801fa12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f8a6:	45b3      	cmp	fp, r6
 801f8a8:	f340 80b3 	ble.w	801fa12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801f8ac:	2800      	cmp	r0, #0
 801f8ae:	f2c0 80ae 	blt.w	801fa0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f8b2:	4581      	cmp	r9, r0
 801f8b4:	f340 80ab 	ble.w	801fa0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801f8b8:	5dd7      	ldrb	r7, [r2, r7]
 801f8ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f8be:	441f      	add	r7, r3
 801f8c0:	1c42      	adds	r2, r0, #1
 801f8c2:	f100 80a9 	bmi.w	801fa18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f8c6:	4591      	cmp	r9, r2
 801f8c8:	f340 80a6 	ble.w	801fa18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f8cc:	2c00      	cmp	r4, #0
 801f8ce:	f000 80a3 	beq.w	801fa18 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801f8d2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f8da:	441d      	add	r5, r3
 801f8dc:	3601      	adds	r6, #1
 801f8de:	f100 809f 	bmi.w	801fa20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f8e2:	45b3      	cmp	fp, r6
 801f8e4:	f340 809c 	ble.w	801fa20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f8e8:	f1be 0f00 	cmp.w	lr, #0
 801f8ec:	f000 8098 	beq.w	801fa20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801f8f0:	2800      	cmp	r0, #0
 801f8f2:	f2c0 8093 	blt.w	801fa1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f8f6:	4581      	cmp	r9, r0
 801f8f8:	f340 8090 	ble.w	801fa1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801f8fc:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801f900:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f904:	441e      	add	r6, r3
 801f906:	3001      	adds	r0, #1
 801f908:	f100 808d 	bmi.w	801fa26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f90c:	4581      	cmp	r9, r0
 801f90e:	f340 808a 	ble.w	801fa26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f912:	2c00      	cmp	r4, #0
 801f914:	f000 8087 	beq.w	801fa26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801f918:	44e1      	add	r9, ip
 801f91a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f91e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f922:	4413      	add	r3, r2
 801f924:	b2a4      	uxth	r4, r4
 801f926:	fa1f fe8e 	uxth.w	lr, lr
 801f92a:	fb04 fb0e 	mul.w	fp, r4, lr
 801f92e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801f932:	fa1f f08e 	uxth.w	r0, lr
 801f936:	fa1f fe88 	uxth.w	lr, r8
 801f93a:	ea6f 0808 	mvn.w	r8, r8
 801f93e:	0124      	lsls	r4, r4, #4
 801f940:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801f944:	eba4 040b 	sub.w	r4, r4, fp
 801f948:	b2a2      	uxth	r2, r4
 801f94a:	78ac      	ldrb	r4, [r5, #2]
 801f94c:	f897 c002 	ldrb.w	ip, [r7, #2]
 801f950:	4354      	muls	r4, r2
 801f952:	eba9 0900 	sub.w	r9, r9, r0
 801f956:	fa1f f989 	uxth.w	r9, r9
 801f95a:	fb09 440c 	mla	r4, r9, ip, r4
 801f95e:	f896 c002 	ldrb.w	ip, [r6, #2]
 801f962:	fa5f f888 	uxtb.w	r8, r8
 801f966:	fb00 440c 	mla	r4, r0, ip, r4
 801f96a:	f893 c002 	ldrb.w	ip, [r3, #2]
 801f96e:	fb1a fa08 	smulbb	sl, sl, r8
 801f972:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f976:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f97a:	fb0c ac0e 	mla	ip, ip, lr, sl
 801f97e:	f895 a001 	ldrb.w	sl, [r5, #1]
 801f982:	782d      	ldrb	r5, [r5, #0]
 801f984:	fb02 fa0a 	mul.w	sl, r2, sl
 801f988:	436a      	muls	r2, r5
 801f98a:	787c      	ldrb	r4, [r7, #1]
 801f98c:	783f      	ldrb	r7, [r7, #0]
 801f98e:	fb09 aa04 	mla	sl, r9, r4, sl
 801f992:	fb09 2207 	mla	r2, r9, r7, r2
 801f996:	7874      	ldrb	r4, [r6, #1]
 801f998:	7835      	ldrb	r5, [r6, #0]
 801f99a:	fb00 aa04 	mla	sl, r0, r4, sl
 801f99e:	fb00 2005 	mla	r0, r0, r5, r2
 801f9a2:	785c      	ldrb	r4, [r3, #1]
 801f9a4:	781b      	ldrb	r3, [r3, #0]
 801f9a6:	fb0b a404 	mla	r4, fp, r4, sl
 801f9aa:	9901      	ldr	r1, [sp, #4]
 801f9ac:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f9b0:	9b02      	ldr	r3, [sp, #8]
 801f9b2:	fb11 fa08 	smulbb	sl, r1, r8
 801f9b6:	fb13 f808 	smulbb	r8, r3, r8
 801f9ba:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f9be:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f9c2:	fb04 a40e 	mla	r4, r4, lr, sl
 801f9c6:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801f9ca:	fa1f fc8c 	uxth.w	ip, ip
 801f9ce:	f10c 0301 	add.w	r3, ip, #1
 801f9d2:	fa1f fe8e 	uxth.w	lr, lr
 801f9d6:	b2a4      	uxth	r4, r4
 801f9d8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f9dc:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801f9e0:	f104 0a01 	add.w	sl, r4, #1
 801f9e4:	f10e 0c01 	add.w	ip, lr, #1
 801f9e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f9ec:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f9f0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f9f4:	0964      	lsrs	r4, r4, #5
 801f9f6:	ea4c 0c03 	orr.w	ip, ip, r3
 801f9fa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f9fe:	9b03      	ldr	r3, [sp, #12]
 801fa00:	ea4c 0c04 	orr.w	ip, ip, r4
 801fa04:	f8a3 c000 	strh.w	ip, [r3]
 801fa08:	b007      	add	sp, #28
 801fa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa0e:	af05      	add	r7, sp, #20
 801fa10:	e756      	b.n	801f8c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801fa12:	ad05      	add	r5, sp, #20
 801fa14:	462f      	mov	r7, r5
 801fa16:	e761      	b.n	801f8dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fa18:	ad05      	add	r5, sp, #20
 801fa1a:	e75f      	b.n	801f8dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801fa1c:	ae05      	add	r6, sp, #20
 801fa1e:	e772      	b.n	801f906 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801fa20:	ab05      	add	r3, sp, #20
 801fa22:	461e      	mov	r6, r3
 801fa24:	e77e      	b.n	801f924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801fa26:	ab05      	add	r3, sp, #20
 801fa28:	e77c      	b.n	801f924 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801fa2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa2e:	b095      	sub	sp, #84	; 0x54
 801fa30:	9212      	str	r2, [sp, #72]	; 0x48
 801fa32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801fa34:	9013      	str	r0, [sp, #76]	; 0x4c
 801fa36:	9309      	str	r3, [sp, #36]	; 0x24
 801fa38:	6850      	ldr	r0, [r2, #4]
 801fa3a:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801fa3e:	910e      	str	r1, [sp, #56]	; 0x38
 801fa40:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa42:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801fa46:	fb00 1303 	mla	r3, r0, r3, r1
 801fa4a:	6812      	ldr	r2, [r2, #0]
 801fa4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fa50:	930a      	str	r3, [sp, #40]	; 0x28
 801fa52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	930d      	str	r3, [sp, #52]	; 0x34
 801fa58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa5a:	685c      	ldr	r4, [r3, #4]
 801fa5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa5e:	3404      	adds	r4, #4
 801fa60:	43db      	mvns	r3, r3
 801fa62:	b2db      	uxtb	r3, r3
 801fa64:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	dc03      	bgt.n	801fa74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fa6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	f340 8255 	ble.w	801ff1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fa74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa7e:	1e48      	subs	r0, r1, #1
 801fa80:	1e55      	subs	r5, r2, #1
 801fa82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	f340 80f9 	ble.w	801fc7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fa8a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801fa8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fa8e:	1436      	asrs	r6, r6, #16
 801fa90:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fa94:	d406      	bmi.n	801faa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fa96:	4286      	cmp	r6, r0
 801fa98:	da04      	bge.n	801faa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	db02      	blt.n	801faa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fa9e:	42ab      	cmp	r3, r5
 801faa0:	f2c0 80ed 	blt.w	801fc7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801faa4:	3601      	adds	r6, #1
 801faa6:	f100 80da 	bmi.w	801fc5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801faaa:	42b1      	cmp	r1, r6
 801faac:	f2c0 80d7 	blt.w	801fc5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fab0:	3301      	adds	r3, #1
 801fab2:	f100 80d4 	bmi.w	801fc5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fab6:	429a      	cmp	r2, r3
 801fab8:	f2c0 80d1 	blt.w	801fc5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801fabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fabe:	9311      	str	r3, [sp, #68]	; 0x44
 801fac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fac2:	930c      	str	r3, [sp, #48]	; 0x30
 801fac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	f340 80fa 	ble.w	801fcc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801facc:	9826      	ldr	r0, [sp, #152]	; 0x98
 801face:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fad0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fad2:	68c6      	ldr	r6, [r0, #12]
 801fad4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fad6:	141d      	asrs	r5, r3, #16
 801fad8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fadc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fade:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fae0:	1400      	asrs	r0, r0, #16
 801fae2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fae6:	6892      	ldr	r2, [r2, #8]
 801fae8:	f100 813e 	bmi.w	801fd68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801faec:	1e57      	subs	r7, r2, #1
 801faee:	42b8      	cmp	r0, r7
 801faf0:	f280 813a 	bge.w	801fd68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801faf4:	2d00      	cmp	r5, #0
 801faf6:	f2c0 8137 	blt.w	801fd68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fafa:	1e77      	subs	r7, r6, #1
 801fafc:	42bd      	cmp	r5, r7
 801fafe:	f280 8133 	bge.w	801fd68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801fb02:	b212      	sxth	r2, r2
 801fb04:	fb05 0002 	mla	r0, r5, r2, r0
 801fb08:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fb0a:	f815 a000 	ldrb.w	sl, [r5, r0]
 801fb0e:	182e      	adds	r6, r5, r0
 801fb10:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801fb14:	eb04 050a 	add.w	r5, r4, sl
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	f000 8117 	beq.w	801fd4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801fb1e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fb22:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fb26:	44a4      	add	ip, r4
 801fb28:	2900      	cmp	r1, #0
 801fb2a:	f000 8117 	beq.w	801fd5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801fb2e:	18b0      	adds	r0, r6, r2
 801fb30:	7840      	ldrb	r0, [r0, #1]
 801fb32:	5cb2      	ldrb	r2, [r6, r2]
 801fb34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb3c:	4422      	add	r2, r4
 801fb3e:	4420      	add	r0, r4
 801fb40:	b29b      	uxth	r3, r3
 801fb42:	b289      	uxth	r1, r1
 801fb44:	fb03 f901 	mul.w	r9, r3, r1
 801fb48:	011b      	lsls	r3, r3, #4
 801fb4a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801fb4e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801fb52:	eba3 0309 	sub.w	r3, r3, r9
 801fb56:	b29b      	uxth	r3, r3
 801fb58:	435f      	muls	r7, r3
 801fb5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fb5e:	b289      	uxth	r1, r1
 801fb60:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fb64:	eba8 0801 	sub.w	r8, r8, r1
 801fb68:	fa1f f888 	uxth.w	r8, r8
 801fb6c:	fb08 770b 	mla	r7, r8, fp, r7
 801fb70:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fb74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb76:	fb01 770b 	mla	r7, r1, fp, r7
 801fb7a:	f8b6 e000 	ldrh.w	lr, [r6]
 801fb7e:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fb82:	9310      	str	r3, [sp, #64]	; 0x40
 801fb84:	fb09 770b 	mla	r7, r9, fp, r7
 801fb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb8a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801fb8e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fb92:	fb1b fb03 	smulbb	fp, fp, r3
 801fb96:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801fb9a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fb9e:	fb07 b706 	mla	r7, r7, r6, fp
 801fba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fba4:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fba8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fbac:	f89c c000 	ldrb.w	ip, [ip]
 801fbb0:	435d      	muls	r5, r3
 801fbb2:	fb08 550b 	mla	r5, r8, fp, r5
 801fbb6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbbc:	fb01 550b 	mla	r5, r1, fp, r5
 801fbc0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fbc4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801fbc8:	fb09 550b 	mla	r5, r9, fp, r5
 801fbcc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801fbd0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fbd4:	fb1b fb03 	smulbb	fp, fp, r3
 801fbd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fbde:	fb03 f30c 	mul.w	r3, r3, ip
 801fbe2:	fb08 330a 	mla	r3, r8, sl, r3
 801fbe6:	f892 c000 	ldrb.w	ip, [r2]
 801fbea:	fa5f fe8e 	uxtb.w	lr, lr
 801fbee:	fb01 330c 	mla	r3, r1, ip, r3
 801fbf2:	f890 c000 	ldrb.w	ip, [r0]
 801fbf6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fbfa:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc00:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fc04:	fb1e fe03 	smulbb	lr, lr, r3
 801fc08:	fb05 b506 	mla	r5, r5, r6, fp
 801fc0c:	fb0c e606 	mla	r6, ip, r6, lr
 801fc10:	b2bf      	uxth	r7, r7
 801fc12:	1c7b      	adds	r3, r7, #1
 801fc14:	b2ad      	uxth	r5, r5
 801fc16:	b2b6      	uxth	r6, r6
 801fc18:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fc1c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801fc20:	f105 0b01 	add.w	fp, r5, #1
 801fc24:	1c77      	adds	r7, r6, #1
 801fc26:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fc2a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fc2e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fc32:	096d      	lsrs	r5, r5, #5
 801fc34:	431f      	orrs	r7, r3
 801fc36:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc3c:	433d      	orrs	r5, r7
 801fc3e:	801d      	strh	r5, [r3, #0]
 801fc40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fc44:	3302      	adds	r3, #2
 801fc46:	930c      	str	r3, [sp, #48]	; 0x30
 801fc48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc4a:	4413      	add	r3, r2
 801fc4c:	931f      	str	r3, [sp, #124]	; 0x7c
 801fc4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fc50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc52:	4413      	add	r3, r2
 801fc54:	9320      	str	r3, [sp, #128]	; 0x80
 801fc56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc58:	3b01      	subs	r3, #1
 801fc5a:	9311      	str	r3, [sp, #68]	; 0x44
 801fc5c:	e732      	b.n	801fac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fc5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fc60:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801fc62:	4433      	add	r3, r6
 801fc64:	931f      	str	r3, [sp, #124]	; 0x7c
 801fc66:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801fc68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fc6a:	4433      	add	r3, r6
 801fc6c:	9320      	str	r3, [sp, #128]	; 0x80
 801fc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc70:	3b01      	subs	r3, #1
 801fc72:	9309      	str	r3, [sp, #36]	; 0x24
 801fc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc76:	3302      	adds	r3, #2
 801fc78:	930a      	str	r3, [sp, #40]	; 0x28
 801fc7a:	e702      	b.n	801fa82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fc7c:	d027      	beq.n	801fcce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc80:	9821      	ldr	r0, [sp, #132]	; 0x84
 801fc82:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fc84:	3b01      	subs	r3, #1
 801fc86:	fb00 5003 	mla	r0, r0, r3, r5
 801fc8a:	1400      	asrs	r0, r0, #16
 801fc8c:	f53f af16 	bmi.w	801fabc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fc90:	3901      	subs	r1, #1
 801fc92:	4288      	cmp	r0, r1
 801fc94:	f6bf af12 	bge.w	801fabc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fc98:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fc9a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fc9c:	fb01 0303 	mla	r3, r1, r3, r0
 801fca0:	141b      	asrs	r3, r3, #16
 801fca2:	f53f af0b 	bmi.w	801fabc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fca6:	3a01      	subs	r2, #1
 801fca8:	4293      	cmp	r3, r2
 801fcaa:	f6bf af07 	bge.w	801fabc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcb0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801fcb4:	9311      	str	r3, [sp, #68]	; 0x44
 801fcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcb8:	930c      	str	r3, [sp, #48]	; 0x30
 801fcba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	dc70      	bgt.n	801fda2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801fcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fcc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fcc8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fccc:	930a      	str	r3, [sp, #40]	; 0x28
 801fcce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	f340 8124 	ble.w	801ff1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801fcd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fcda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fce6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcea:	eef0 6a62 	vmov.f32	s13, s5
 801fcee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcf2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd02:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801fd06:	eef0 6a43 	vmov.f32	s13, s6
 801fd0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd0e:	ee12 2a90 	vmov	r2, s5
 801fd12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fd18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd20:	ee13 2a10 	vmov	r2, s6
 801fd24:	9321      	str	r3, [sp, #132]	; 0x84
 801fd26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fd28:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801fd2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd30:	9322      	str	r3, [sp, #136]	; 0x88
 801fd32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd36:	3b01      	subs	r3, #1
 801fd38:	930e      	str	r3, [sp, #56]	; 0x38
 801fd3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fd3c:	bf08      	it	eq
 801fd3e:	4613      	moveq	r3, r2
 801fd40:	eeb0 3a67 	vmov.f32	s6, s15
 801fd44:	9309      	str	r3, [sp, #36]	; 0x24
 801fd46:	eef0 2a47 	vmov.f32	s5, s14
 801fd4a:	e68c      	b.n	801fa66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fd4c:	b149      	cbz	r1, 801fd62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801fd4e:	4628      	mov	r0, r5
 801fd50:	5cb2      	ldrb	r2, [r6, r2]
 801fd52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd56:	4422      	add	r2, r4
 801fd58:	46ac      	mov	ip, r5
 801fd5a:	e6f1      	b.n	801fb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fd5c:	4628      	mov	r0, r5
 801fd5e:	462a      	mov	r2, r5
 801fd60:	e6ee      	b.n	801fb40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fd62:	4628      	mov	r0, r5
 801fd64:	462a      	mov	r2, r5
 801fd66:	e7f7      	b.n	801fd58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801fd68:	1c47      	adds	r7, r0, #1
 801fd6a:	f53f af69 	bmi.w	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fd6e:	42ba      	cmp	r2, r7
 801fd70:	f6ff af66 	blt.w	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fd74:	1c6f      	adds	r7, r5, #1
 801fd76:	f53f af63 	bmi.w	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fd7a:	42be      	cmp	r6, r7
 801fd7c:	f6ff af60 	blt.w	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fd80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801fd82:	b236      	sxth	r6, r6
 801fd84:	b212      	sxth	r2, r2
 801fd86:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801fd8a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801fd8e:	9002      	str	r0, [sp, #8]
 801fd90:	9200      	str	r2, [sp, #0]
 801fd92:	9601      	str	r6, [sp, #4]
 801fd94:	4623      	mov	r3, r4
 801fd96:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801fd9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fd9c:	f7ff fd59 	bl	801f852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801fda0:	e74e      	b.n	801fc40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801fda2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fda4:	9820      	ldr	r0, [sp, #128]	; 0x80
 801fda6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fdaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fdac:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fdae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fdb2:	142d      	asrs	r5, r5, #16
 801fdb4:	1400      	asrs	r0, r0, #16
 801fdb6:	fb02 5000 	mla	r0, r2, r0, r5
 801fdba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fdbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fdbe:	f815 9000 	ldrb.w	r9, [r5, r0]
 801fdc2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fdc6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801fdca:	182e      	adds	r6, r5, r0
 801fdcc:	eb04 0509 	add.w	r5, r4, r9
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	f000 8096 	beq.w	801ff02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801fdd6:	7877      	ldrb	r7, [r6, #1]
 801fdd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fddc:	4427      	add	r7, r4
 801fdde:	2900      	cmp	r1, #0
 801fde0:	f000 8097 	beq.w	801ff12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801fde4:	18b0      	adds	r0, r6, r2
 801fde6:	7840      	ldrb	r0, [r0, #1]
 801fde8:	5cb2      	ldrb	r2, [r6, r2]
 801fdea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fdee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fdf2:	4422      	add	r2, r4
 801fdf4:	4420      	add	r0, r4
 801fdf6:	b29b      	uxth	r3, r3
 801fdf8:	b289      	uxth	r1, r1
 801fdfa:	fb03 f801 	mul.w	r8, r3, r1
 801fdfe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fe00:	011b      	lsls	r3, r3, #4
 801fe02:	f8b6 c000 	ldrh.w	ip, [r6]
 801fe06:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fe0a:	78be      	ldrb	r6, [r7, #2]
 801fe0c:	eba3 0308 	sub.w	r3, r3, r8
 801fe10:	b29b      	uxth	r3, r3
 801fe12:	435e      	muls	r6, r3
 801fe14:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fe18:	b289      	uxth	r1, r1
 801fe1a:	f895 b002 	ldrb.w	fp, [r5, #2]
 801fe1e:	ebae 0e01 	sub.w	lr, lr, r1
 801fe22:	fa1f fe8e 	uxth.w	lr, lr
 801fe26:	fb0e 660b 	mla	r6, lr, fp, r6
 801fe2a:	f892 b002 	ldrb.w	fp, [r2, #2]
 801fe2e:	9310      	str	r3, [sp, #64]	; 0x40
 801fe30:	fb01 660b 	mla	r6, r1, fp, r6
 801fe34:	f890 b002 	ldrb.w	fp, [r0, #2]
 801fe38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe3a:	fb08 660b 	mla	r6, r8, fp, r6
 801fe3e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801fe42:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801fe46:	fb1b fb03 	smulbb	fp, fp, r3
 801fe4a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fe4e:	fb06 b60a 	mla	r6, r6, sl, fp
 801fe52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe54:	f895 b001 	ldrb.w	fp, [r5, #1]
 801fe58:	787d      	ldrb	r5, [r7, #1]
 801fe5a:	783f      	ldrb	r7, [r7, #0]
 801fe5c:	435d      	muls	r5, r3
 801fe5e:	fb0e 550b 	mla	r5, lr, fp, r5
 801fe62:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fe66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe68:	fb01 550b 	mla	r5, r1, fp, r5
 801fe6c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fe70:	f814 9009 	ldrb.w	r9, [r4, r9]
 801fe74:	fb08 550b 	mla	r5, r8, fp, r5
 801fe78:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801fe7c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801fe80:	fb1b fb03 	smulbb	fp, fp, r3
 801fe84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fe8a:	437b      	muls	r3, r7
 801fe8c:	fb0e 3309 	mla	r3, lr, r9, r3
 801fe90:	7817      	ldrb	r7, [r2, #0]
 801fe92:	fa5f fc8c 	uxtb.w	ip, ip
 801fe96:	fb01 3307 	mla	r3, r1, r7, r3
 801fe9a:	7807      	ldrb	r7, [r0, #0]
 801fe9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801fea0:	fb08 3707 	mla	r7, r8, r7, r3
 801fea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fea6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801feaa:	fb1c fc03 	smulbb	ip, ip, r3
 801feae:	fb05 b50a 	mla	r5, r5, sl, fp
 801feb2:	fb07 c70a 	mla	r7, r7, sl, ip
 801feb6:	b2b6      	uxth	r6, r6
 801feb8:	b2ad      	uxth	r5, r5
 801feba:	b2bf      	uxth	r7, r7
 801febc:	1c73      	adds	r3, r6, #1
 801febe:	1c7a      	adds	r2, r7, #1
 801fec0:	f105 0b01 	add.w	fp, r5, #1
 801fec4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fec8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fecc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801fed0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fed4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fed8:	096d      	lsrs	r5, r5, #5
 801feda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fedc:	4316      	orrs	r6, r2
 801fede:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fee2:	432e      	orrs	r6, r5
 801fee4:	f823 6b02 	strh.w	r6, [r3], #2
 801fee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801feea:	930c      	str	r3, [sp, #48]	; 0x30
 801feec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801feee:	4413      	add	r3, r2
 801fef0:	931f      	str	r3, [sp, #124]	; 0x7c
 801fef2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fef6:	4413      	add	r3, r2
 801fef8:	9320      	str	r3, [sp, #128]	; 0x80
 801fefa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fefc:	3b01      	subs	r3, #1
 801fefe:	9311      	str	r3, [sp, #68]	; 0x44
 801ff00:	e6db      	b.n	801fcba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801ff02:	b149      	cbz	r1, 801ff18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801ff04:	4628      	mov	r0, r5
 801ff06:	5cb2      	ldrb	r2, [r6, r2]
 801ff08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff0c:	4422      	add	r2, r4
 801ff0e:	462f      	mov	r7, r5
 801ff10:	e771      	b.n	801fdf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ff12:	4628      	mov	r0, r5
 801ff14:	462a      	mov	r2, r5
 801ff16:	e76e      	b.n	801fdf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801ff18:	4628      	mov	r0, r5
 801ff1a:	462a      	mov	r2, r5
 801ff1c:	e7f7      	b.n	801ff0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801ff1e:	b015      	add	sp, #84	; 0x54
 801ff20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801ff24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff28:	880f      	ldrh	r7, [r1, #0]
 801ff2a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801ff2e:	023c      	lsls	r4, r7, #8
 801ff30:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801ff34:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801ff38:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ff3c:	017c      	lsls	r4, r7, #5
 801ff3e:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801ff42:	00ff      	lsls	r7, r7, #3
 801ff44:	ea4b 0404 	orr.w	r4, fp, r4
 801ff48:	b2ff      	uxtb	r7, r7
 801ff4a:	4327      	orrs	r7, r4
 801ff4c:	2d00      	cmp	r5, #0
 801ff4e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ff52:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801ff56:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801ff5a:	eb02 080a 	add.w	r8, r2, sl
 801ff5e:	9701      	str	r7, [sp, #4]
 801ff60:	db7e      	blt.n	8020060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ff62:	45a9      	cmp	r9, r5
 801ff64:	dd7c      	ble.n	8020060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ff66:	f1bc 0f00 	cmp.w	ip, #0
 801ff6a:	db77      	blt.n	802005c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ff6c:	45e6      	cmp	lr, ip
 801ff6e:	dd75      	ble.n	802005c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ff70:	f812 700a 	ldrb.w	r7, [r2, sl]
 801ff74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ff78:	441f      	add	r7, r3
 801ff7a:	f11c 0201 	adds.w	r2, ip, #1
 801ff7e:	d472      	bmi.n	8020066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ff80:	4596      	cmp	lr, r2
 801ff82:	dd70      	ble.n	8020066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ff84:	2800      	cmp	r0, #0
 801ff86:	d06e      	beq.n	8020066 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ff88:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ff8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ff90:	441c      	add	r4, r3
 801ff92:	3501      	adds	r5, #1
 801ff94:	d46b      	bmi.n	802006e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ff96:	45a9      	cmp	r9, r5
 801ff98:	dd69      	ble.n	802006e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ff9a:	2e00      	cmp	r6, #0
 801ff9c:	d067      	beq.n	802006e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ff9e:	f1bc 0f00 	cmp.w	ip, #0
 801ffa2:	db62      	blt.n	802006a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ffa4:	45e6      	cmp	lr, ip
 801ffa6:	dd60      	ble.n	802006a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ffa8:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ffac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ffb0:	441d      	add	r5, r3
 801ffb2:	f11c 0201 	adds.w	r2, ip, #1
 801ffb6:	d45d      	bmi.n	8020074 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ffb8:	4596      	cmp	lr, r2
 801ffba:	dd5b      	ble.n	8020074 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ffbc:	2800      	cmp	r0, #0
 801ffbe:	d059      	beq.n	8020074 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ffc0:	44c6      	add	lr, r8
 801ffc2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ffc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffca:	4413      	add	r3, r2
 801ffcc:	b280      	uxth	r0, r0
 801ffce:	b2b2      	uxth	r2, r6
 801ffd0:	fb00 f602 	mul.w	r6, r0, r2
 801ffd4:	0100      	lsls	r0, r0, #4
 801ffd6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ffda:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801ffde:	1b80      	subs	r0, r0, r6
 801ffe0:	fa1f fc82 	uxth.w	ip, r2
 801ffe4:	b282      	uxth	r2, r0
 801ffe6:	78a0      	ldrb	r0, [r4, #2]
 801ffe8:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ffec:	4350      	muls	r0, r2
 801ffee:	eba8 080c 	sub.w	r8, r8, ip
 801fff2:	fa1f f888 	uxth.w	r8, r8
 801fff6:	fb08 0e0e 	mla	lr, r8, lr, r0
 801fffa:	78a8      	ldrb	r0, [r5, #2]
 801fffc:	f897 9000 	ldrb.w	r9, [r7]
 8020000:	fb0c e000 	mla	r0, ip, r0, lr
 8020004:	f893 e002 	ldrb.w	lr, [r3, #2]
 8020008:	787f      	ldrb	r7, [r7, #1]
 802000a:	fb06 0e0e 	mla	lr, r6, lr, r0
 802000e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8020012:	f894 e000 	ldrb.w	lr, [r4]
 8020016:	fb02 fe0e 	mul.w	lr, r2, lr
 802001a:	fb08 e909 	mla	r9, r8, r9, lr
 802001e:	f895 e000 	ldrb.w	lr, [r5]
 8020022:	fb0c 990e 	mla	r9, ip, lr, r9
 8020026:	f893 e000 	ldrb.w	lr, [r3]
 802002a:	785b      	ldrb	r3, [r3, #1]
 802002c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8020030:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020034:	ea4e 0e00 	orr.w	lr, lr, r0
 8020038:	7860      	ldrb	r0, [r4, #1]
 802003a:	4350      	muls	r0, r2
 802003c:	fb08 0007 	mla	r0, r8, r7, r0
 8020040:	786a      	ldrb	r2, [r5, #1]
 8020042:	fb0c 0202 	mla	r2, ip, r2, r0
 8020046:	fb06 2303 	mla	r3, r6, r3, r2
 802004a:	095b      	lsrs	r3, r3, #5
 802004c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020050:	ea4e 0303 	orr.w	r3, lr, r3
 8020054:	800b      	strh	r3, [r1, #0]
 8020056:	b003      	add	sp, #12
 8020058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802005c:	af01      	add	r7, sp, #4
 802005e:	e78c      	b.n	801ff7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8020060:	ac01      	add	r4, sp, #4
 8020062:	4627      	mov	r7, r4
 8020064:	e795      	b.n	801ff92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8020066:	ac01      	add	r4, sp, #4
 8020068:	e793      	b.n	801ff92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802006a:	ad01      	add	r5, sp, #4
 802006c:	e7a1      	b.n	801ffb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802006e:	ab01      	add	r3, sp, #4
 8020070:	461d      	mov	r5, r3
 8020072:	e7ab      	b.n	801ffcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020074:	ab01      	add	r3, sp, #4
 8020076:	e7a9      	b.n	801ffcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020078 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802007c:	b08f      	sub	sp, #60	; 0x3c
 802007e:	920c      	str	r2, [sp, #48]	; 0x30
 8020080:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020082:	900d      	str	r0, [sp, #52]	; 0x34
 8020084:	6850      	ldr	r0, [r2, #4]
 8020086:	910a      	str	r1, [sp, #40]	; 0x28
 8020088:	9306      	str	r3, [sp, #24]
 802008a:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802008e:	fb00 1303 	mla	r3, r0, r3, r1
 8020092:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020096:	6812      	ldr	r2, [r2, #0]
 8020098:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802009c:	9307      	str	r3, [sp, #28]
 802009e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	9308      	str	r3, [sp, #32]
 80200a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200a6:	685c      	ldr	r4, [r3, #4]
 80200a8:	3404      	adds	r4, #4
 80200aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200ac:	2b00      	cmp	r3, #0
 80200ae:	dc03      	bgt.n	80200b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80200b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	f340 81d6 	ble.w	8020464 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80200b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200ba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80200be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80200c2:	1e48      	subs	r0, r1, #1
 80200c4:	1e56      	subs	r6, r2, #1
 80200c6:	9b06      	ldr	r3, [sp, #24]
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	f340 80b7 	ble.w	802023c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80200ce:	ea5f 472b 	movs.w	r7, fp, asr #16
 80200d2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80200d6:	d406      	bmi.n	80200e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80200d8:	4287      	cmp	r7, r0
 80200da:	da04      	bge.n	80200e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80200dc:	2b00      	cmp	r3, #0
 80200de:	db02      	blt.n	80200e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80200e0:	42b3      	cmp	r3, r6
 80200e2:	f2c0 80ac 	blt.w	802023e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80200e6:	3701      	adds	r7, #1
 80200e8:	f100 809d 	bmi.w	8020226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80200ec:	42b9      	cmp	r1, r7
 80200ee:	f2c0 809a 	blt.w	8020226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80200f2:	3301      	adds	r3, #1
 80200f4:	f100 8097 	bmi.w	8020226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80200f8:	429a      	cmp	r2, r3
 80200fa:	f2c0 8094 	blt.w	8020226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80200fe:	9b06      	ldr	r3, [sp, #24]
 8020100:	930b      	str	r3, [sp, #44]	; 0x2c
 8020102:	9b07      	ldr	r3, [sp, #28]
 8020104:	9309      	str	r3, [sp, #36]	; 0x24
 8020106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020108:	2b00      	cmp	r3, #0
 802010a:	f340 80b5 	ble.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802010e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020110:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020112:	68c7      	ldr	r7, [r0, #12]
 8020114:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020118:	ea4f 4625 	mov.w	r6, r5, asr #16
 802011c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020120:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020124:	6892      	ldr	r2, [r2, #8]
 8020126:	f100 80fb 	bmi.w	8020320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802012a:	f102 3cff 	add.w	ip, r2, #4294967295
 802012e:	4560      	cmp	r0, ip
 8020130:	f280 80f6 	bge.w	8020320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020134:	2e00      	cmp	r6, #0
 8020136:	f2c0 80f3 	blt.w	8020320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802013a:	f107 3cff 	add.w	ip, r7, #4294967295
 802013e:	4566      	cmp	r6, ip
 8020140:	f280 80ee 	bge.w	8020320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020144:	b212      	sxth	r2, r2
 8020146:	fb06 0002 	mla	r0, r6, r2, r0
 802014a:	9e08      	ldr	r6, [sp, #32]
 802014c:	1837      	adds	r7, r6, r0
 802014e:	5c30      	ldrb	r0, [r6, r0]
 8020150:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020154:	eb04 0c08 	add.w	ip, r4, r8
 8020158:	2b00      	cmp	r3, #0
 802015a:	f000 80d3 	beq.w	8020304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802015e:	787e      	ldrb	r6, [r7, #1]
 8020160:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020164:	4426      	add	r6, r4
 8020166:	2900      	cmp	r1, #0
 8020168:	f000 80d4 	beq.w	8020314 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802016c:	18b8      	adds	r0, r7, r2
 802016e:	7840      	ldrb	r0, [r0, #1]
 8020170:	5cba      	ldrb	r2, [r7, r2]
 8020172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020176:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802017a:	4422      	add	r2, r4
 802017c:	4420      	add	r0, r4
 802017e:	b29b      	uxth	r3, r3
 8020180:	b289      	uxth	r1, r1
 8020182:	fb03 f901 	mul.w	r9, r3, r1
 8020186:	011b      	lsls	r3, r3, #4
 8020188:	78b7      	ldrb	r7, [r6, #2]
 802018a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802018e:	eba3 0309 	sub.w	r3, r3, r9
 8020192:	b29b      	uxth	r3, r3
 8020194:	435f      	muls	r7, r3
 8020196:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802019a:	b289      	uxth	r1, r1
 802019c:	f89c a002 	ldrb.w	sl, [ip, #2]
 80201a0:	ebae 0e01 	sub.w	lr, lr, r1
 80201a4:	fa1f fe8e 	uxth.w	lr, lr
 80201a8:	fb0e 770a 	mla	r7, lr, sl, r7
 80201ac:	f892 a002 	ldrb.w	sl, [r2, #2]
 80201b0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80201b4:	fb01 770a 	mla	r7, r1, sl, r7
 80201b8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80201bc:	fb09 7a0a 	mla	sl, r9, sl, r7
 80201c0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80201c4:	f896 8000 	ldrb.w	r8, [r6]
 80201c8:	7876      	ldrb	r6, [r6, #1]
 80201ca:	fb03 f808 	mul.w	r8, r3, r8
 80201ce:	fb0e 8807 	mla	r8, lr, r7, r8
 80201d2:	7817      	ldrb	r7, [r2, #0]
 80201d4:	4373      	muls	r3, r6
 80201d6:	fb01 8807 	mla	r8, r1, r7, r8
 80201da:	7807      	ldrb	r7, [r0, #0]
 80201dc:	fb0e 330c 	mla	r3, lr, ip, r3
 80201e0:	fb09 8707 	mla	r7, r9, r7, r8
 80201e4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80201e8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80201ec:	ea47 070a 	orr.w	r7, r7, sl
 80201f0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80201f4:	fb01 310a 	mla	r1, r1, sl, r3
 80201f8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80201fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201fe:	fb09 1a0a 	mla	sl, r9, sl, r1
 8020202:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020206:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802020a:	ea47 070a 	orr.w	r7, r7, sl
 802020e:	801f      	strh	r7, [r3, #0]
 8020210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020212:	3302      	adds	r3, #2
 8020214:	9309      	str	r3, [sp, #36]	; 0x24
 8020216:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020218:	449b      	add	fp, r3
 802021a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802021c:	441d      	add	r5, r3
 802021e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020220:	3b01      	subs	r3, #1
 8020222:	930b      	str	r3, [sp, #44]	; 0x2c
 8020224:	e76f      	b.n	8020106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020228:	449b      	add	fp, r3
 802022a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802022c:	441d      	add	r5, r3
 802022e:	9b06      	ldr	r3, [sp, #24]
 8020230:	3b01      	subs	r3, #1
 8020232:	9306      	str	r3, [sp, #24]
 8020234:	9b07      	ldr	r3, [sp, #28]
 8020236:	3302      	adds	r3, #2
 8020238:	9307      	str	r3, [sp, #28]
 802023a:	e744      	b.n	80200c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802023c:	d023      	beq.n	8020286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802023e:	9b06      	ldr	r3, [sp, #24]
 8020240:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020242:	3b01      	subs	r3, #1
 8020244:	fb00 b003 	mla	r0, r0, r3, fp
 8020248:	1400      	asrs	r0, r0, #16
 802024a:	f53f af58 	bmi.w	80200fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802024e:	3901      	subs	r1, #1
 8020250:	4288      	cmp	r0, r1
 8020252:	f6bf af54 	bge.w	80200fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020256:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020258:	fb01 5303 	mla	r3, r1, r3, r5
 802025c:	141b      	asrs	r3, r3, #16
 802025e:	f53f af4e 	bmi.w	80200fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020262:	3a01      	subs	r2, #1
 8020264:	4293      	cmp	r3, r2
 8020266:	f6bf af4a 	bge.w	80200fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802026a:	9b06      	ldr	r3, [sp, #24]
 802026c:	9309      	str	r3, [sp, #36]	; 0x24
 802026e:	9b07      	ldr	r3, [sp, #28]
 8020270:	930b      	str	r3, [sp, #44]	; 0x2c
 8020272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020274:	2b00      	cmp	r3, #0
 8020276:	dc70      	bgt.n	802035a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020278:	9b06      	ldr	r3, [sp, #24]
 802027a:	9a07      	ldr	r2, [sp, #28]
 802027c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020280:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020284:	9307      	str	r3, [sp, #28]
 8020286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020288:	2b00      	cmp	r3, #0
 802028a:	f340 80eb 	ble.w	8020464 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802028e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020292:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020296:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802029a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802029e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202a2:	eef0 6a62 	vmov.f32	s13, s5
 80202a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ba:	ee16 ba90 	vmov	fp, s13
 80202be:	eef0 6a43 	vmov.f32	s13, s6
 80202c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202c6:	ee12 2a90 	vmov	r2, s5
 80202ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80202d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80202d8:	ee13 2a10 	vmov	r2, s6
 80202dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80202de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80202e0:	ee16 5a90 	vmov	r5, s13
 80202e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80202e8:	931c      	str	r3, [sp, #112]	; 0x70
 80202ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80202ee:	3b01      	subs	r3, #1
 80202f0:	930a      	str	r3, [sp, #40]	; 0x28
 80202f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80202f4:	bf08      	it	eq
 80202f6:	4613      	moveq	r3, r2
 80202f8:	eeb0 3a67 	vmov.f32	s6, s15
 80202fc:	9306      	str	r3, [sp, #24]
 80202fe:	eef0 2a47 	vmov.f32	s5, s14
 8020302:	e6d2      	b.n	80200aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020304:	b149      	cbz	r1, 802031a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020306:	4660      	mov	r0, ip
 8020308:	5cba      	ldrb	r2, [r7, r2]
 802030a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802030e:	4422      	add	r2, r4
 8020310:	4666      	mov	r6, ip
 8020312:	e734      	b.n	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020314:	4660      	mov	r0, ip
 8020316:	4662      	mov	r2, ip
 8020318:	e731      	b.n	802017e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802031a:	4660      	mov	r0, ip
 802031c:	4662      	mov	r2, ip
 802031e:	e7f7      	b.n	8020310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8020320:	f110 0c01 	adds.w	ip, r0, #1
 8020324:	f53f af74 	bmi.w	8020210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020328:	4562      	cmp	r2, ip
 802032a:	f6ff af71 	blt.w	8020210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802032e:	f116 0c01 	adds.w	ip, r6, #1
 8020332:	f53f af6d 	bmi.w	8020210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8020336:	4567      	cmp	r7, ip
 8020338:	f6ff af6a 	blt.w	8020210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802033c:	b23f      	sxth	r7, r7
 802033e:	b212      	sxth	r2, r2
 8020340:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020344:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020348:	9200      	str	r2, [sp, #0]
 802034a:	9701      	str	r7, [sp, #4]
 802034c:	4623      	mov	r3, r4
 802034e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020352:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020354:	f7ff fde6 	bl	801ff24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020358:	e75a      	b.n	8020210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802035a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802035c:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020360:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020364:	1428      	asrs	r0, r5, #16
 8020366:	fb02 6000 	mla	r0, r2, r0, r6
 802036a:	9e08      	ldr	r6, [sp, #32]
 802036c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020370:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020374:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020378:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802037c:	1837      	adds	r7, r6, r0
 802037e:	eb04 0c08 	add.w	ip, r4, r8
 8020382:	2b00      	cmp	r3, #0
 8020384:	d060      	beq.n	8020448 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8020386:	787e      	ldrb	r6, [r7, #1]
 8020388:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802038c:	4426      	add	r6, r4
 802038e:	2900      	cmp	r1, #0
 8020390:	d062      	beq.n	8020458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020392:	18b8      	adds	r0, r7, r2
 8020394:	7840      	ldrb	r0, [r0, #1]
 8020396:	5cba      	ldrb	r2, [r7, r2]
 8020398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802039c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203a0:	4422      	add	r2, r4
 80203a2:	4420      	add	r0, r4
 80203a4:	b29b      	uxth	r3, r3
 80203a6:	b289      	uxth	r1, r1
 80203a8:	fb03 f901 	mul.w	r9, r3, r1
 80203ac:	011b      	lsls	r3, r3, #4
 80203ae:	78b7      	ldrb	r7, [r6, #2]
 80203b0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80203b4:	eba3 0309 	sub.w	r3, r3, r9
 80203b8:	b29b      	uxth	r3, r3
 80203ba:	435f      	muls	r7, r3
 80203bc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80203c0:	b289      	uxth	r1, r1
 80203c2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80203c6:	ebae 0e01 	sub.w	lr, lr, r1
 80203ca:	fa1f fe8e 	uxth.w	lr, lr
 80203ce:	fb0e 770a 	mla	r7, lr, sl, r7
 80203d2:	f892 a002 	ldrb.w	sl, [r2, #2]
 80203d6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80203da:	fb01 770a 	mla	r7, r1, sl, r7
 80203de:	f890 a002 	ldrb.w	sl, [r0, #2]
 80203e2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80203e6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80203ea:	f896 8000 	ldrb.w	r8, [r6]
 80203ee:	7876      	ldrb	r6, [r6, #1]
 80203f0:	fb03 f808 	mul.w	r8, r3, r8
 80203f4:	fb0e 8807 	mla	r8, lr, r7, r8
 80203f8:	7817      	ldrb	r7, [r2, #0]
 80203fa:	4373      	muls	r3, r6
 80203fc:	fb01 8807 	mla	r8, r1, r7, r8
 8020400:	7807      	ldrb	r7, [r0, #0]
 8020402:	fb0e 330c 	mla	r3, lr, ip, r3
 8020406:	fb09 8707 	mla	r7, r9, r7, r8
 802040a:	7856      	ldrb	r6, [r2, #1]
 802040c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020410:	fb01 3306 	mla	r3, r1, r6, r3
 8020414:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020418:	ea47 070a 	orr.w	r7, r7, sl
 802041c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020420:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020424:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802042a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802042e:	ea47 070a 	orr.w	r7, r7, sl
 8020432:	f823 7b02 	strh.w	r7, [r3], #2
 8020436:	930b      	str	r3, [sp, #44]	; 0x2c
 8020438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802043a:	449b      	add	fp, r3
 802043c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802043e:	441d      	add	r5, r3
 8020440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020442:	3b01      	subs	r3, #1
 8020444:	9309      	str	r3, [sp, #36]	; 0x24
 8020446:	e714      	b.n	8020272 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020448:	b149      	cbz	r1, 802045e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802044a:	4660      	mov	r0, ip
 802044c:	5cba      	ldrb	r2, [r7, r2]
 802044e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020452:	4422      	add	r2, r4
 8020454:	4666      	mov	r6, ip
 8020456:	e7a5      	b.n	80203a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020458:	4660      	mov	r0, ip
 802045a:	4662      	mov	r2, ip
 802045c:	e7a2      	b.n	80203a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802045e:	4660      	mov	r0, ip
 8020460:	4662      	mov	r2, ip
 8020462:	e7f7      	b.n	8020454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020464:	b00f      	add	sp, #60	; 0x3c
 8020466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802046a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 802046a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802046e:	b085      	sub	sp, #20
 8020470:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020474:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8020478:	9102      	str	r1, [sp, #8]
 802047a:	fb04 710c 	mla	r1, r4, ip, r7
 802047e:	2c00      	cmp	r4, #0
 8020480:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020484:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8020488:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802048c:	eb02 0e01 	add.w	lr, r2, r1
 8020490:	f2c0 8122 	blt.w	80206d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020494:	45a0      	cmp	r8, r4
 8020496:	f340 811f 	ble.w	80206d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802049a:	2f00      	cmp	r7, #0
 802049c:	f2c0 811a 	blt.w	80206d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80204a0:	45bc      	cmp	ip, r7
 80204a2:	f340 8117 	ble.w	80206d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80204a6:	5c52      	ldrb	r2, [r2, r1]
 80204a8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80204ac:	1c7a      	adds	r2, r7, #1
 80204ae:	f100 8116 	bmi.w	80206de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80204b2:	4594      	cmp	ip, r2
 80204b4:	f340 8113 	ble.w	80206de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80204b8:	2e00      	cmp	r6, #0
 80204ba:	f000 8112 	beq.w	80206e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80204be:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80204c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80204c6:	3401      	adds	r4, #1
 80204c8:	f100 810f 	bmi.w	80206ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80204cc:	45a0      	cmp	r8, r4
 80204ce:	f340 810c 	ble.w	80206ea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80204d2:	2800      	cmp	r0, #0
 80204d4:	f000 810c 	beq.w	80206f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80204d8:	2f00      	cmp	r7, #0
 80204da:	f2c0 8104 	blt.w	80206e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80204de:	45bc      	cmp	ip, r7
 80204e0:	f340 8101 	ble.w	80206e6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80204e4:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80204e8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80204ec:	3701      	adds	r7, #1
 80204ee:	f100 8102 	bmi.w	80206f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80204f2:	45bc      	cmp	ip, r7
 80204f4:	f340 80ff 	ble.w	80206f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80204f8:	2e00      	cmp	r6, #0
 80204fa:	f000 80fe 	beq.w	80206fa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80204fe:	44f4      	add	ip, lr
 8020500:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020504:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020508:	b2b6      	uxth	r6, r6
 802050a:	b280      	uxth	r0, r0
 802050c:	fb00 fe06 	mul.w	lr, r0, r6
 8020510:	0136      	lsls	r6, r6, #4
 8020512:	eba6 070e 	sub.w	r7, r6, lr
 8020516:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802051a:	b2bf      	uxth	r7, r7
 802051c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020520:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020524:	fb0a f607 	mul.w	r6, sl, r7
 8020528:	b280      	uxth	r0, r0
 802052a:	1a1b      	subs	r3, r3, r0
 802052c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020530:	b29b      	uxth	r3, r3
 8020532:	fb0b 6603 	mla	r6, fp, r3, r6
 8020536:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802053a:	fb00 6609 	mla	r6, r0, r9, r6
 802053e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020542:	fb0e 6608 	mla	r6, lr, r8, r6
 8020546:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802054a:	9600      	str	r6, [sp, #0]
 802054c:	2e00      	cmp	r6, #0
 802054e:	f000 80be 	beq.w	80206ce <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020552:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020556:	fb0b fc0c 	mul.w	ip, fp, ip
 802055a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802055e:	fb0b f505 	mul.w	r5, fp, r5
 8020562:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020566:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802056a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802056e:	44dc      	add	ip, fp
 8020570:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020574:	9501      	str	r5, [sp, #4]
 8020576:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802057a:	9503      	str	r5, [sp, #12]
 802057c:	9d01      	ldr	r5, [sp, #4]
 802057e:	9e02      	ldr	r6, [sp, #8]
 8020580:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020584:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020588:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802058c:	fb0a fc0c 	mul.w	ip, sl, ip
 8020590:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020594:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020598:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802059c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80205a0:	4465      	add	r5, ip
 80205a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80205a6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80205aa:	fb09 fc0c 	mul.w	ip, r9, ip
 80205ae:	fb09 f904 	mul.w	r9, r9, r4
 80205b2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80205b6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80205ba:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80205be:	fb08 f404 	mul.w	r4, r8, r4
 80205c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205c6:	fb08 f802 	mul.w	r8, r8, r2
 80205ca:	0a2d      	lsrs	r5, r5, #8
 80205cc:	0a22      	lsrs	r2, r4, #8
 80205ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80205d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80205d6:	437d      	muls	r5, r7
 80205d8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80205dc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80205e0:	4414      	add	r4, r2
 80205e2:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80205e6:	fb0a fa01 	mul.w	sl, sl, r1
 80205ea:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80205ee:	9a03      	ldr	r2, [sp, #12]
 80205f0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80205f4:	fb02 5503 	mla	r5, r2, r3, r5
 80205f8:	0a24      	lsrs	r4, r4, #8
 80205fa:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80205fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020602:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020606:	fb04 540e 	mla	r4, r4, lr, r5
 802060a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802060e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020612:	4461      	add	r1, ip
 8020614:	0a09      	lsrs	r1, r1, #8
 8020616:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802061a:	fb01 4100 	mla	r1, r1, r0, r4
 802061e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020622:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020626:	fb07 f70a 	mul.w	r7, r7, sl
 802062a:	0a09      	lsrs	r1, r1, #8
 802062c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020630:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8020634:	fb03 7101 	mla	r1, r3, r1, r7
 8020638:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802063c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020640:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020644:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020648:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802064c:	fb00 e101 	mla	r1, r0, r1, lr
 8020650:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020654:	9a00      	ldr	r2, [sp, #0]
 8020656:	b287      	uxth	r7, r0
 8020658:	437a      	muls	r2, r7
 802065a:	1c53      	adds	r3, r2, #1
 802065c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020660:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020664:	0a09      	lsrs	r1, r1, #8
 8020666:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802066a:	4321      	orrs	r1, r4
 802066c:	0c0a      	lsrs	r2, r1, #16
 802066e:	8836      	ldrh	r6, [r6, #0]
 8020670:	fb12 f207 	smulbb	r2, r2, r7
 8020674:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020678:	b2c8      	uxtb	r0, r1
 802067a:	1235      	asrs	r5, r6, #8
 802067c:	fb14 f407 	smulbb	r4, r4, r7
 8020680:	fb10 f007 	smulbb	r0, r0, r7
 8020684:	b2db      	uxtb	r3, r3
 8020686:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802068a:	fb05 2503 	mla	r5, r5, r3, r2
 802068e:	10f2      	asrs	r2, r6, #3
 8020690:	00f6      	lsls	r6, r6, #3
 8020692:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020696:	b2f6      	uxtb	r6, r6
 8020698:	fb02 4203 	mla	r2, r2, r3, r4
 802069c:	fb06 0303 	mla	r3, r6, r3, r0
 80206a0:	b2ad      	uxth	r5, r5
 80206a2:	b299      	uxth	r1, r3
 80206a4:	b294      	uxth	r4, r2
 80206a6:	1c6b      	adds	r3, r5, #1
 80206a8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80206ac:	1c62      	adds	r2, r4, #1
 80206ae:	1c4b      	adds	r3, r1, #1
 80206b0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80206b4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80206b8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80206bc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80206c0:	0952      	lsrs	r2, r2, #5
 80206c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80206c6:	432b      	orrs	r3, r5
 80206c8:	4313      	orrs	r3, r2
 80206ca:	9a02      	ldr	r2, [sp, #8]
 80206cc:	8013      	strh	r3, [r2, #0]
 80206ce:	b005      	add	sp, #20
 80206d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206d4:	2500      	movs	r5, #0
 80206d6:	e6e9      	b.n	80204ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80206d8:	2100      	movs	r1, #0
 80206da:	460d      	mov	r5, r1
 80206dc:	e6f3      	b.n	80204c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80206de:	2100      	movs	r1, #0
 80206e0:	e6f1      	b.n	80204c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80206e2:	4631      	mov	r1, r6
 80206e4:	e6ef      	b.n	80204c6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80206e6:	2400      	movs	r4, #0
 80206e8:	e700      	b.n	80204ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80206ea:	2200      	movs	r2, #0
 80206ec:	4614      	mov	r4, r2
 80206ee:	e70b      	b.n	8020508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80206f0:	4602      	mov	r2, r0
 80206f2:	4604      	mov	r4, r0
 80206f4:	e708      	b.n	8020508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80206f6:	2200      	movs	r2, #0
 80206f8:	e706      	b.n	8020508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80206fa:	4632      	mov	r2, r6
 80206fc:	e704      	b.n	8020508 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080206fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020702:	b09f      	sub	sp, #124	; 0x7c
 8020704:	921b      	str	r2, [sp, #108]	; 0x6c
 8020706:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020708:	901d      	str	r0, [sp, #116]	; 0x74
 802070a:	9309      	str	r3, [sp, #36]	; 0x24
 802070c:	6850      	ldr	r0, [r2, #4]
 802070e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020712:	9119      	str	r1, [sp, #100]	; 0x64
 8020714:	931c      	str	r3, [sp, #112]	; 0x70
 8020716:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802071a:	fb00 1303 	mla	r3, r0, r3, r1
 802071e:	6812      	ldr	r2, [r2, #0]
 8020720:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020722:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020726:	930c      	str	r3, [sp, #48]	; 0x30
 8020728:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	9312      	str	r3, [sp, #72]	; 0x48
 802072e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020730:	685e      	ldr	r6, [r3, #4]
 8020732:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020736:	3604      	adds	r6, #4
 8020738:	930d      	str	r3, [sp, #52]	; 0x34
 802073a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802073c:	2b00      	cmp	r3, #0
 802073e:	dc03      	bgt.n	8020748 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020742:	2b00      	cmp	r3, #0
 8020744:	f340 8387 	ble.w	8020e56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020748:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802074a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802074e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020752:	1e48      	subs	r0, r1, #1
 8020754:	1e57      	subs	r7, r2, #1
 8020756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020758:	2b00      	cmp	r3, #0
 802075a:	f340 8194 	ble.w	8020a86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802075e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020760:	142b      	asrs	r3, r5, #16
 8020762:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020766:	d406      	bmi.n	8020776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020768:	4584      	cmp	ip, r0
 802076a:	da04      	bge.n	8020776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802076c:	2b00      	cmp	r3, #0
 802076e:	db02      	blt.n	8020776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020770:	42bb      	cmp	r3, r7
 8020772:	f2c0 8189 	blt.w	8020a88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020776:	f11c 0c01 	adds.w	ip, ip, #1
 802077a:	f100 8177 	bmi.w	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802077e:	4561      	cmp	r1, ip
 8020780:	f2c0 8174 	blt.w	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020784:	3301      	adds	r3, #1
 8020786:	f100 8171 	bmi.w	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802078a:	429a      	cmp	r2, r3
 802078c:	f2c0 816e 	blt.w	8020a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020792:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020794:	931a      	str	r3, [sp, #104]	; 0x68
 8020796:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020798:	2b00      	cmp	r3, #0
 802079a:	f340 8193 	ble.w	8020ac4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802079e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80207a0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80207a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80207a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80207ae:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80207b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80207b4:	141b      	asrs	r3, r3, #16
 80207b6:	f100 81d6 	bmi.w	8020b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80207ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80207be:	4543      	cmp	r3, r8
 80207c0:	f280 81d1 	bge.w	8020b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80207c4:	f1bc 0f00 	cmp.w	ip, #0
 80207c8:	f2c0 81cd 	blt.w	8020b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80207cc:	f10e 38ff 	add.w	r8, lr, #4294967295
 80207d0:	45c4      	cmp	ip, r8
 80207d2:	f280 81c8 	bge.w	8020b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80207d6:	b200      	sxth	r0, r0
 80207d8:	fb0c 3300 	mla	r3, ip, r0, r3
 80207dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80207de:	eb04 0803 	add.w	r8, r4, r3
 80207e2:	5ce3      	ldrb	r3, [r4, r3]
 80207e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80207e8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80207ec:	2a00      	cmp	r2, #0
 80207ee:	f000 81af 	beq.w	8020b50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80207f2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80207f6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80207fa:	940e      	str	r4, [sp, #56]	; 0x38
 80207fc:	0e24      	lsrs	r4, r4, #24
 80207fe:	9415      	str	r4, [sp, #84]	; 0x54
 8020800:	b179      	cbz	r1, 8020822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020802:	eb08 0c00 	add.w	ip, r8, r0
 8020806:	f818 0000 	ldrb.w	r0, [r8, r0]
 802080a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802080e:	900a      	str	r0, [sp, #40]	; 0x28
 8020810:	0e00      	lsrs	r0, r0, #24
 8020812:	9013      	str	r0, [sp, #76]	; 0x4c
 8020814:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020818:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802081c:	900f      	str	r0, [sp, #60]	; 0x3c
 802081e:	0e00      	lsrs	r0, r0, #24
 8020820:	9016      	str	r0, [sp, #88]	; 0x58
 8020822:	b292      	uxth	r2, r2
 8020824:	b289      	uxth	r1, r1
 8020826:	fb02 f901 	mul.w	r9, r2, r1
 802082a:	0112      	lsls	r2, r2, #4
 802082c:	eba2 0809 	sub.w	r8, r2, r9
 8020830:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020832:	fa1f f888 	uxth.w	r8, r8
 8020836:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802083a:	fb08 f000 	mul.w	r0, r8, r0
 802083e:	b289      	uxth	r1, r1
 8020840:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020844:	1a52      	subs	r2, r2, r1
 8020846:	b292      	uxth	r2, r2
 8020848:	fb02 000e 	mla	r0, r2, lr, r0
 802084c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802084e:	fb01 0004 	mla	r0, r1, r4, r0
 8020852:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020854:	fb09 0004 	mla	r0, r9, r4, r0
 8020858:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802085c:	2800      	cmp	r0, #0
 802085e:	f000 80fa 	beq.w	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020862:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020866:	d01b      	beq.n	80208a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020868:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802086c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020870:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020874:	fb0e fe03 	mul.w	lr, lr, r3
 8020878:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802087c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020880:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020884:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020888:	4453      	add	r3, sl
 802088a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802088e:	0a1b      	lsrs	r3, r3, #8
 8020890:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020894:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020898:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802089c:	ea43 030c 	orr.w	r3, r3, ip
 80208a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80208a2:	2cff      	cmp	r4, #255	; 0xff
 80208a4:	d021      	beq.n	80208ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80208a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80208a8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80208ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80208ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80208b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80208b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80208b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80208bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80208be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80208c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80208ca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80208ce:	44de      	add	lr, fp
 80208d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208e4:	ea4e 040a 	orr.w	r4, lr, sl
 80208e8:	940e      	str	r4, [sp, #56]	; 0x38
 80208ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208ec:	2cff      	cmp	r4, #255	; 0xff
 80208ee:	d021      	beq.n	8020934 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80208f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80208f2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80208f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80208f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80208fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80208fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020902:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020906:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020908:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802090c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020910:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020914:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020918:	44de      	add	lr, fp
 802091a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802091e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020922:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020926:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802092a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802092e:	ea4e 040a 	orr.w	r4, lr, sl
 8020932:	940a      	str	r4, [sp, #40]	; 0x28
 8020934:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020936:	2cff      	cmp	r4, #255	; 0xff
 8020938:	d021      	beq.n	802097e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802093a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802093c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020940:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020942:	fb04 fb0b 	mul.w	fp, r4, fp
 8020946:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020948:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802094c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020950:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020952:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020956:	fb04 fa0a 	mul.w	sl, r4, sl
 802095a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802095e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020962:	44de      	add	lr, fp
 8020964:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020968:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802096c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020970:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020974:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020978:	ea4e 040a 	orr.w	r4, lr, sl
 802097c:	940f      	str	r4, [sp, #60]	; 0x3c
 802097e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020980:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020984:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020988:	fb08 fc0c 	mul.w	ip, r8, ip
 802098c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020990:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020992:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020996:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802099a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802099e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80209a0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80209a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80209a6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80209aa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80209ae:	fb08 f80e 	mul.w	r8, r8, lr
 80209b2:	fb02 8303 	mla	r3, r2, r3, r8
 80209b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80209b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209bc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80209c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209c2:	fb01 330a 	mla	r3, r1, sl, r3
 80209c6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80209ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209cc:	fb09 3901 	mla	r9, r9, r1, r3
 80209d0:	4342      	muls	r2, r0
 80209d2:	1c50      	adds	r0, r2, #1
 80209d4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80209d8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80209dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80209e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80209e4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80209e8:	ea4c 0c09 	orr.w	ip, ip, r9
 80209ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80209ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80209f2:	883b      	ldrh	r3, [r7, #0]
 80209f4:	fb12 f204 	smulbb	r2, r2, r4
 80209f8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80209fc:	fa5f fc8c 	uxtb.w	ip, ip
 8020a00:	1219      	asrs	r1, r3, #8
 8020a02:	fb1c fc04 	smulbb	ip, ip, r4
 8020a06:	b2c0      	uxtb	r0, r0
 8020a08:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020a0c:	fb01 2100 	mla	r1, r1, r0, r2
 8020a10:	10da      	asrs	r2, r3, #3
 8020a12:	00db      	lsls	r3, r3, #3
 8020a14:	fb1e fe04 	smulbb	lr, lr, r4
 8020a18:	b2db      	uxtb	r3, r3
 8020a1a:	fb03 c300 	mla	r3, r3, r0, ip
 8020a1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020a22:	b289      	uxth	r1, r1
 8020a24:	fb02 e200 	mla	r2, r2, r0, lr
 8020a28:	fa1f fc83 	uxth.w	ip, r3
 8020a2c:	1c4b      	adds	r3, r1, #1
 8020a2e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020a32:	f10c 0301 	add.w	r3, ip, #1
 8020a36:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020a3a:	b292      	uxth	r2, r2
 8020a3c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020a40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020a44:	430b      	orrs	r3, r1
 8020a46:	1c51      	adds	r1, r2, #1
 8020a48:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020a4c:	0952      	lsrs	r2, r2, #5
 8020a4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a52:	4313      	orrs	r3, r2
 8020a54:	803b      	strh	r3, [r7, #0]
 8020a56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020a58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a5a:	3702      	adds	r7, #2
 8020a5c:	441a      	add	r2, r3
 8020a5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020a60:	9229      	str	r2, [sp, #164]	; 0xa4
 8020a62:	441d      	add	r5, r3
 8020a64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020a66:	3b01      	subs	r3, #1
 8020a68:	931a      	str	r3, [sp, #104]	; 0x68
 8020a6a:	e694      	b.n	8020796 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020a6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020a6e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020a70:	441c      	add	r4, r3
 8020a72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020a74:	9429      	str	r4, [sp, #164]	; 0xa4
 8020a76:	441d      	add	r5, r3
 8020a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a7a:	3b01      	subs	r3, #1
 8020a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8020a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a80:	3302      	adds	r3, #2
 8020a82:	930c      	str	r3, [sp, #48]	; 0x30
 8020a84:	e667      	b.n	8020756 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020a86:	d024      	beq.n	8020ad2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8020a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a8a:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020a8c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020a8e:	3b01      	subs	r3, #1
 8020a90:	fb00 4003 	mla	r0, r0, r3, r4
 8020a94:	1400      	asrs	r0, r0, #16
 8020a96:	f53f ae7b 	bmi.w	8020790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020a9a:	3901      	subs	r1, #1
 8020a9c:	4288      	cmp	r0, r1
 8020a9e:	f6bf ae77 	bge.w	8020790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020aa2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020aa4:	fb01 5303 	mla	r3, r1, r3, r5
 8020aa8:	141b      	asrs	r3, r3, #16
 8020aaa:	f53f ae71 	bmi.w	8020790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020aae:	3a01      	subs	r2, #1
 8020ab0:	4293      	cmp	r3, r2
 8020ab2:	f6bf ae6d 	bge.w	8020790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020ab6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020aba:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8020abe:	f1bb 0f00 	cmp.w	fp, #0
 8020ac2:	dc70      	bgt.n	8020ba6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8020ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ac6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020acc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8020ad2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	f340 81be 	ble.w	8020e56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ade:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ae2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ae6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020aea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020aee:	eef0 6a62 	vmov.f32	s13, s5
 8020af2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020af6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020afa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020afe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b06:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020b0a:	eef0 6a43 	vmov.f32	s13, s6
 8020b0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b12:	ee12 2a90 	vmov	r2, s5
 8020b16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b24:	ee13 2a10 	vmov	r2, s6
 8020b28:	932b      	str	r3, [sp, #172]	; 0xac
 8020b2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b2c:	ee16 5a90 	vmov	r5, s13
 8020b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b34:	932c      	str	r3, [sp, #176]	; 0xb0
 8020b36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020b38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8020b3a:	3b01      	subs	r3, #1
 8020b3c:	9319      	str	r3, [sp, #100]	; 0x64
 8020b3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b40:	bf08      	it	eq
 8020b42:	4613      	moveq	r3, r2
 8020b44:	eeb0 3a67 	vmov.f32	s6, s15
 8020b48:	9309      	str	r3, [sp, #36]	; 0x24
 8020b4a:	eef0 2a47 	vmov.f32	s5, s14
 8020b4e:	e5f4      	b.n	802073a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020b50:	2900      	cmp	r1, #0
 8020b52:	f43f ae66 	beq.w	8020822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020b56:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020b5a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020b5e:	900a      	str	r0, [sp, #40]	; 0x28
 8020b60:	0e00      	lsrs	r0, r0, #24
 8020b62:	9013      	str	r0, [sp, #76]	; 0x4c
 8020b64:	e65d      	b.n	8020822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020b66:	f113 0801 	adds.w	r8, r3, #1
 8020b6a:	f53f af74 	bmi.w	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020b6e:	4540      	cmp	r0, r8
 8020b70:	f6ff af71 	blt.w	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020b74:	f11c 0801 	adds.w	r8, ip, #1
 8020b78:	f53f af6d 	bmi.w	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020b7c:	45c6      	cmp	lr, r8
 8020b7e:	f6ff af6a 	blt.w	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020b82:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020b84:	9302      	str	r3, [sp, #8]
 8020b86:	b200      	sxth	r0, r0
 8020b88:	fa0f f38e 	sxth.w	r3, lr
 8020b8c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020b90:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020b94:	9301      	str	r3, [sp, #4]
 8020b96:	9000      	str	r0, [sp, #0]
 8020b98:	4633      	mov	r3, r6
 8020b9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b9c:	4639      	mov	r1, r7
 8020b9e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020ba0:	f7ff fc63 	bl	802046a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8020ba4:	e757      	b.n	8020a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020ba6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020ba8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020baa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020bae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020bb0:	1427      	asrs	r7, r4, #16
 8020bb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020bb6:	142b      	asrs	r3, r5, #16
 8020bb8:	fb01 7303 	mla	r3, r1, r3, r7
 8020bbc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020bbe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020bc2:	18e7      	adds	r7, r4, r3
 8020bc4:	5ce3      	ldrb	r3, [r4, r3]
 8020bc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020bca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020bce:	2a00      	cmp	r2, #0
 8020bd0:	f000 8137 	beq.w	8020e42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8020bd4:	f897 e001 	ldrb.w	lr, [r7, #1]
 8020bd8:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8020bdc:	9410      	str	r4, [sp, #64]	; 0x40
 8020bde:	0e24      	lsrs	r4, r4, #24
 8020be0:	9417      	str	r4, [sp, #92]	; 0x5c
 8020be2:	b170      	cbz	r0, 8020c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020be4:	eb07 0e01 	add.w	lr, r7, r1
 8020be8:	5c79      	ldrb	r1, [r7, r1]
 8020bea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020bee:	910b      	str	r1, [sp, #44]	; 0x2c
 8020bf0:	0e09      	lsrs	r1, r1, #24
 8020bf2:	9114      	str	r1, [sp, #80]	; 0x50
 8020bf4:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8020bf8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020bfc:	9111      	str	r1, [sp, #68]	; 0x44
 8020bfe:	0e09      	lsrs	r1, r1, #24
 8020c00:	9118      	str	r1, [sp, #96]	; 0x60
 8020c02:	b292      	uxth	r2, r2
 8020c04:	b280      	uxth	r0, r0
 8020c06:	fb02 f800 	mul.w	r8, r2, r0
 8020c0a:	0112      	lsls	r2, r2, #4
 8020c0c:	eba2 0e08 	sub.w	lr, r2, r8
 8020c10:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020c12:	fa1f fe8e 	uxth.w	lr, lr
 8020c16:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020c1a:	fb0e f101 	mul.w	r1, lr, r1
 8020c1e:	b280      	uxth	r0, r0
 8020c20:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020c24:	1a12      	subs	r2, r2, r0
 8020c26:	b292      	uxth	r2, r2
 8020c28:	fb02 110c 	mla	r1, r2, ip, r1
 8020c2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020c2e:	fb00 1104 	mla	r1, r0, r4, r1
 8020c32:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020c34:	fb08 1104 	mla	r1, r8, r4, r1
 8020c38:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020c3c:	2900      	cmp	r1, #0
 8020c3e:	f000 80f5 	beq.w	8020e2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8020c42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020c46:	d019      	beq.n	8020c7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8020c48:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020c4c:	fb0c fa0a 	mul.w	sl, ip, sl
 8020c50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c54:	fb0c fc03 	mul.w	ip, ip, r3
 8020c58:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020c5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c60:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020c64:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020c68:	4453      	add	r3, sl
 8020c6a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020c6e:	0a1b      	lsrs	r3, r3, #8
 8020c70:	0a3f      	lsrs	r7, r7, #8
 8020c72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c76:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020c7a:	433b      	orrs	r3, r7
 8020c7c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020c7e:	2cff      	cmp	r4, #255	; 0xff
 8020c80:	d020      	beq.n	8020cc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020c82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020c84:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020c88:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020c8a:	4367      	muls	r7, r4
 8020c8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020c8e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020c92:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c96:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020c98:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020c9c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ca0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ca4:	44bc      	add	ip, r7
 8020ca6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020caa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020cae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cbe:	ea4c 040a 	orr.w	r4, ip, sl
 8020cc2:	9410      	str	r4, [sp, #64]	; 0x40
 8020cc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020cc6:	2cff      	cmp	r4, #255	; 0xff
 8020cc8:	d020      	beq.n	8020d0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8020cca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020ccc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020cd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020cd2:	4367      	muls	r7, r4
 8020cd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020cd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020cda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020cde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020ce0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020ce4:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ce8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cec:	44bc      	add	ip, r7
 8020cee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020cf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020cf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cfa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cfe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d06:	ea4c 040a 	orr.w	r4, ip, sl
 8020d0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8020d0c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020d0e:	2cff      	cmp	r4, #255	; 0xff
 8020d10:	d020      	beq.n	8020d54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8020d12:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d14:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d18:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020d1a:	4367      	muls	r7, r4
 8020d1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020d22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020d26:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020d28:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020d2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d34:	44bc      	add	ip, r7
 8020d36:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020d3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020d3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020d46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020d4e:	ea4c 040a 	orr.w	r4, ip, sl
 8020d52:	9411      	str	r4, [sp, #68]	; 0x44
 8020d54:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d56:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d5a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d5e:	fb0e f707 	mul.w	r7, lr, r7
 8020d62:	fb02 770c 	mla	r7, r2, ip, r7
 8020d66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d6c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020d70:	fb00 770c 	mla	r7, r0, ip, r7
 8020d74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020d76:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020d7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d7c:	fb08 770c 	mla	r7, r8, ip, r7
 8020d80:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020d84:	fb0e fe0c 	mul.w	lr, lr, ip
 8020d88:	fb02 e303 	mla	r3, r2, r3, lr
 8020d8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020d8e:	0a3f      	lsrs	r7, r7, #8
 8020d90:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020d94:	fb00 330a 	mla	r3, r0, sl, r3
 8020d98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020d9a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020d9e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020da2:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020da8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dac:	434b      	muls	r3, r1
 8020dae:	1c59      	adds	r1, r3, #1
 8020db0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020db4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020db8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020dbc:	ea47 070c 	orr.w	r7, r7, ip
 8020dc0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dc2:	0c3b      	lsrs	r3, r7, #16
 8020dc4:	f8b9 0000 	ldrh.w	r0, [r9]
 8020dc8:	fb13 f304 	smulbb	r3, r3, r4
 8020dcc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020dd0:	b2ff      	uxtb	r7, r7
 8020dd2:	1202      	asrs	r2, r0, #8
 8020dd4:	fb17 f704 	smulbb	r7, r7, r4
 8020dd8:	b2c9      	uxtb	r1, r1
 8020dda:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8020dde:	fb02 3201 	mla	r2, r2, r1, r3
 8020de2:	10c3      	asrs	r3, r0, #3
 8020de4:	00c0      	lsls	r0, r0, #3
 8020de6:	fb1c fc04 	smulbb	ip, ip, r4
 8020dea:	b2c0      	uxtb	r0, r0
 8020dec:	fb00 7001 	mla	r0, r0, r1, r7
 8020df0:	b292      	uxth	r2, r2
 8020df2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020df6:	fb03 c301 	mla	r3, r3, r1, ip
 8020dfa:	f102 0c01 	add.w	ip, r2, #1
 8020dfe:	b280      	uxth	r0, r0
 8020e00:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020e04:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8020e08:	1c42      	adds	r2, r0, #1
 8020e0a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020e0e:	b29b      	uxth	r3, r3
 8020e10:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020e14:	ea42 020c 	orr.w	r2, r2, ip
 8020e18:	f103 0c01 	add.w	ip, r3, #1
 8020e1c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020e20:	095b      	lsrs	r3, r3, #5
 8020e22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e26:	431a      	orrs	r2, r3
 8020e28:	f8a9 2000 	strh.w	r2, [r9]
 8020e2c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020e2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e30:	f109 0902 	add.w	r9, r9, #2
 8020e34:	441a      	add	r2, r3
 8020e36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020e38:	9229      	str	r2, [sp, #164]	; 0xa4
 8020e3a:	441d      	add	r5, r3
 8020e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020e40:	e63d      	b.n	8020abe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8020e42:	2800      	cmp	r0, #0
 8020e44:	f43f aedd 	beq.w	8020c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020e48:	5c79      	ldrb	r1, [r7, r1]
 8020e4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020e50:	0e09      	lsrs	r1, r1, #24
 8020e52:	9114      	str	r1, [sp, #80]	; 0x50
 8020e54:	e6d5      	b.n	8020c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8020e56:	b01f      	add	sp, #124	; 0x7c
 8020e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e5c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8020e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e60:	b089      	sub	sp, #36	; 0x24
 8020e62:	9101      	str	r1, [sp, #4]
 8020e64:	9801      	ldr	r0, [sp, #4]
 8020e66:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8020e6a:	8800      	ldrh	r0, [r0, #0]
 8020e6c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8020e70:	1206      	asrs	r6, r0, #8
 8020e72:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020e76:	9602      	str	r6, [sp, #8]
 8020e78:	10c6      	asrs	r6, r0, #3
 8020e7a:	00c0      	lsls	r0, r0, #3
 8020e7c:	b2c0      	uxtb	r0, r0
 8020e7e:	9004      	str	r0, [sp, #16]
 8020e80:	fb07 100c 	mla	r0, r7, ip, r1
 8020e84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020e88:	2f00      	cmp	r7, #0
 8020e8a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8020e8e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8020e92:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8020e96:	9603      	str	r6, [sp, #12]
 8020e98:	eb02 0e00 	add.w	lr, r2, r0
 8020e9c:	f2c0 810a 	blt.w	80210b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020ea0:	45b8      	cmp	r8, r7
 8020ea2:	f340 8107 	ble.w	80210b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8020ea6:	2900      	cmp	r1, #0
 8020ea8:	f2c0 8102 	blt.w	80210b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020eac:	458c      	cmp	ip, r1
 8020eae:	f340 80ff 	ble.w	80210b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8020eb2:	5c12      	ldrb	r2, [r2, r0]
 8020eb4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020eb8:	1c4a      	adds	r2, r1, #1
 8020eba:	f100 80fe 	bmi.w	80210ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020ebe:	4594      	cmp	ip, r2
 8020ec0:	f340 80fb 	ble.w	80210ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8020ec4:	2d00      	cmp	r5, #0
 8020ec6:	f000 80fa 	beq.w	80210be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8020eca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020ece:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020ed2:	3701      	adds	r7, #1
 8020ed4:	f100 80f7 	bmi.w	80210c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020ed8:	45b8      	cmp	r8, r7
 8020eda:	f340 80f4 	ble.w	80210c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8020ede:	2c00      	cmp	r4, #0
 8020ee0:	f000 80f4 	beq.w	80210cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8020ee4:	2900      	cmp	r1, #0
 8020ee6:	eb0e 020c 	add.w	r2, lr, ip
 8020eea:	f2c0 80ea 	blt.w	80210c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020eee:	458c      	cmp	ip, r1
 8020ef0:	f340 80e7 	ble.w	80210c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8020ef4:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8020ef8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8020efc:	3101      	adds	r1, #1
 8020efe:	f100 80e8 	bmi.w	80210d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020f02:	458c      	cmp	ip, r1
 8020f04:	f340 80e5 	ble.w	80210d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8020f08:	2d00      	cmp	r5, #0
 8020f0a:	f000 80e4 	beq.w	80210d6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8020f0e:	7852      	ldrb	r2, [r2, #1]
 8020f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020f14:	0e0b      	lsrs	r3, r1, #24
 8020f16:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020f1a:	9300      	str	r3, [sp, #0]
 8020f1c:	b2a4      	uxth	r4, r4
 8020f1e:	b2ab      	uxth	r3, r5
 8020f20:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020f24:	fb03 f904 	mul.w	r9, r3, r4
 8020f28:	fb0a f505 	mul.w	r5, sl, r5
 8020f2c:	011b      	lsls	r3, r3, #4
 8020f2e:	eba3 0e09 	sub.w	lr, r3, r9
 8020f32:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8020f36:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020f3a:	0a28      	lsrs	r0, r5, #8
 8020f3c:	fb0a f303 	mul.w	r3, sl, r3
 8020f40:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020f44:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020f48:	4405      	add	r5, r0
 8020f4a:	0a2d      	lsrs	r5, r5, #8
 8020f4c:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8020f50:	9005      	str	r0, [sp, #20]
 8020f52:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8020f56:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020f5a:	0a1b      	lsrs	r3, r3, #8
 8020f5c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020f60:	9306      	str	r3, [sp, #24]
 8020f62:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8020f66:	fb0b f303 	mul.w	r3, fp, r3
 8020f6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020f6e:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8020f72:	fb0b f606 	mul.w	r6, fp, r6
 8020f76:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020f7a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f7e:	fb08 f707 	mul.w	r7, r8, r7
 8020f82:	0a1d      	lsrs	r5, r3, #8
 8020f84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020f88:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020f8c:	441d      	add	r5, r3
 8020f8e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8020f92:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020f96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020f9a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020f9e:	fb08 fc0c 	mul.w	ip, r8, ip
 8020fa2:	0a1b      	lsrs	r3, r3, #8
 8020fa4:	9307      	str	r3, [sp, #28]
 8020fa6:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020faa:	0e0b      	lsrs	r3, r1, #24
 8020fac:	0a2d      	lsrs	r5, r5, #8
 8020fae:	fa1f fe8e 	uxth.w	lr, lr
 8020fb2:	435f      	muls	r7, r3
 8020fb4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020fb8:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8020fbc:	fb05 f50e 	mul.w	r5, r5, lr
 8020fc0:	b2a4      	uxth	r4, r4
 8020fc2:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8020fc6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020fca:	4359      	muls	r1, r3
 8020fcc:	1b12      	subs	r2, r2, r4
 8020fce:	9b05      	ldr	r3, [sp, #20]
 8020fd0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fd4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020fd8:	b292      	uxth	r2, r2
 8020fda:	4460      	add	r0, ip
 8020fdc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020fe0:	fb03 5502 	mla	r5, r3, r2, r5
 8020fe4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020fe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fec:	44bc      	add	ip, r7
 8020fee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ff6:	0a36      	lsrs	r6, r6, #8
 8020ff8:	fb0c 5509 	mla	r5, ip, r9, r5
 8020ffc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021000:	fb0e f606 	mul.w	r6, lr, r6
 8021004:	9b06      	ldr	r3, [sp, #24]
 8021006:	0a00      	lsrs	r0, r0, #8
 8021008:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802100c:	fb00 5504 	mla	r5, r0, r4, r5
 8021010:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021014:	fb02 6000 	mla	r0, r2, r0, r6
 8021018:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802101c:	fb0e fe0b 	mul.w	lr, lr, fp
 8021020:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021024:	0a09      	lsrs	r1, r1, #8
 8021026:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802102a:	fb09 0001 	mla	r0, r9, r1, r0
 802102e:	fb02 e20a 	mla	r2, r2, sl, lr
 8021032:	9b07      	ldr	r3, [sp, #28]
 8021034:	0a2d      	lsrs	r5, r5, #8
 8021036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802103a:	fb04 0003 	mla	r0, r4, r3, r0
 802103e:	fb04 2408 	mla	r4, r4, r8, r2
 8021042:	9b00      	ldr	r3, [sp, #0]
 8021044:	9a04      	ldr	r2, [sp, #16]
 8021046:	fb09 4903 	mla	r9, r9, r3, r4
 802104a:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802104e:	9b02      	ldr	r3, [sp, #8]
 8021050:	fa5f f989 	uxtb.w	r9, r9
 8021054:	fb03 f109 	mul.w	r1, r3, r9
 8021058:	9b03      	ldr	r3, [sp, #12]
 802105a:	0a00      	lsrs	r0, r0, #8
 802105c:	fb03 f309 	mul.w	r3, r3, r9
 8021060:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021064:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021068:	4305      	orrs	r5, r0
 802106a:	fb02 f909 	mul.w	r9, r2, r9
 802106e:	1c58      	adds	r0, r3, #1
 8021070:	1c4a      	adds	r2, r1, #1
 8021072:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021076:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802107a:	0a2b      	lsrs	r3, r5, #8
 802107c:	0c2a      	lsrs	r2, r5, #16
 802107e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021082:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021086:	00db      	lsls	r3, r3, #3
 8021088:	0212      	lsls	r2, r2, #8
 802108a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802108e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021092:	4313      	orrs	r3, r2
 8021094:	f109 0201 	add.w	r2, r9, #1
 8021098:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802109c:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80210a0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80210a4:	431d      	orrs	r5, r3
 80210a6:	9b01      	ldr	r3, [sp, #4]
 80210a8:	801d      	strh	r5, [r3, #0]
 80210aa:	b009      	add	sp, #36	; 0x24
 80210ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b0:	2000      	movs	r0, #0
 80210b2:	e701      	b.n	8020eb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80210b4:	2600      	movs	r6, #0
 80210b6:	4630      	mov	r0, r6
 80210b8:	e70b      	b.n	8020ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80210ba:	2600      	movs	r6, #0
 80210bc:	e709      	b.n	8020ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80210be:	462e      	mov	r6, r5
 80210c0:	e707      	b.n	8020ed2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80210c2:	2700      	movs	r7, #0
 80210c4:	e71a      	b.n	8020efc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80210c6:	2100      	movs	r1, #0
 80210c8:	460f      	mov	r7, r1
 80210ca:	e723      	b.n	8020f14 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80210cc:	4621      	mov	r1, r4
 80210ce:	4627      	mov	r7, r4
 80210d0:	e720      	b.n	8020f14 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80210d2:	2100      	movs	r1, #0
 80210d4:	e71e      	b.n	8020f14 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80210d6:	4629      	mov	r1, r5
 80210d8:	e71c      	b.n	8020f14 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

080210dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210e0:	b09b      	sub	sp, #108	; 0x6c
 80210e2:	9218      	str	r2, [sp, #96]	; 0x60
 80210e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210e6:	9019      	str	r0, [sp, #100]	; 0x64
 80210e8:	6850      	ldr	r0, [r2, #4]
 80210ea:	9116      	str	r1, [sp, #88]	; 0x58
 80210ec:	9307      	str	r3, [sp, #28]
 80210ee:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80210f2:	fb00 1303 	mla	r3, r0, r3, r1
 80210f6:	6812      	ldr	r2, [r2, #0]
 80210f8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80210fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80210fe:	930a      	str	r3, [sp, #40]	; 0x28
 8021100:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	930f      	str	r3, [sp, #60]	; 0x3c
 8021106:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021108:	685e      	ldr	r6, [r3, #4]
 802110a:	3604      	adds	r6, #4
 802110c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802110e:	2b00      	cmp	r3, #0
 8021110:	dc03      	bgt.n	802111a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021112:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021114:	2b00      	cmp	r3, #0
 8021116:	f340 8373 	ble.w	8021800 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802111a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802111c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021120:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021124:	1e48      	subs	r0, r1, #1
 8021126:	1e57      	subs	r7, r2, #1
 8021128:	9b07      	ldr	r3, [sp, #28]
 802112a:	2b00      	cmp	r3, #0
 802112c:	f340 818f 	ble.w	802144e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8021130:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021132:	142b      	asrs	r3, r5, #16
 8021134:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021138:	d406      	bmi.n	8021148 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802113a:	4584      	cmp	ip, r0
 802113c:	da04      	bge.n	8021148 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802113e:	2b00      	cmp	r3, #0
 8021140:	db02      	blt.n	8021148 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021142:	42bb      	cmp	r3, r7
 8021144:	f2c0 8184 	blt.w	8021450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021148:	f11c 0c01 	adds.w	ip, ip, #1
 802114c:	f100 8172 	bmi.w	8021434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021150:	4561      	cmp	r1, ip
 8021152:	f2c0 816f 	blt.w	8021434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021156:	3301      	adds	r3, #1
 8021158:	f100 816c 	bmi.w	8021434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802115c:	429a      	cmp	r2, r3
 802115e:	f2c0 8169 	blt.w	8021434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021162:	9b07      	ldr	r3, [sp, #28]
 8021164:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021166:	9317      	str	r3, [sp, #92]	; 0x5c
 8021168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802116a:	2b00      	cmp	r3, #0
 802116c:	f340 818e 	ble.w	802148c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021170:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021172:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021176:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802117a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802117c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021180:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021184:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021186:	141b      	asrs	r3, r3, #16
 8021188:	f100 81d1 	bmi.w	802152e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802118c:	f101 38ff 	add.w	r8, r1, #4294967295
 8021190:	4543      	cmp	r3, r8
 8021192:	f280 81cc 	bge.w	802152e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021196:	f1bc 0f00 	cmp.w	ip, #0
 802119a:	f2c0 81c8 	blt.w	802152e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802119e:	f10e 38ff 	add.w	r8, lr, #4294967295
 80211a2:	45c4      	cmp	ip, r8
 80211a4:	f280 81c3 	bge.w	802152e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80211a8:	b209      	sxth	r1, r1
 80211aa:	fb0c 3301 	mla	r3, ip, r1, r3
 80211ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211b0:	eb04 0803 	add.w	r8, r4, r3
 80211b4:	5ce3      	ldrb	r3, [r4, r3]
 80211b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80211ba:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80211be:	2a00      	cmp	r2, #0
 80211c0:	f000 81aa 	beq.w	8021518 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80211c4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80211c8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80211cc:	940b      	str	r4, [sp, #44]	; 0x2c
 80211ce:	0e24      	lsrs	r4, r4, #24
 80211d0:	9412      	str	r4, [sp, #72]	; 0x48
 80211d2:	b178      	cbz	r0, 80211f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80211d4:	eb08 0c01 	add.w	ip, r8, r1
 80211d8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80211dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80211e0:	9108      	str	r1, [sp, #32]
 80211e2:	0e09      	lsrs	r1, r1, #24
 80211e4:	9110      	str	r1, [sp, #64]	; 0x40
 80211e6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80211ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80211ee:	910c      	str	r1, [sp, #48]	; 0x30
 80211f0:	0e09      	lsrs	r1, r1, #24
 80211f2:	9113      	str	r1, [sp, #76]	; 0x4c
 80211f4:	b292      	uxth	r2, r2
 80211f6:	b280      	uxth	r0, r0
 80211f8:	fb02 f900 	mul.w	r9, r2, r0
 80211fc:	0112      	lsls	r2, r2, #4
 80211fe:	eba2 0809 	sub.w	r8, r2, r9
 8021202:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021204:	fa1f f888 	uxth.w	r8, r8
 8021208:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802120c:	fb08 f101 	mul.w	r1, r8, r1
 8021210:	b280      	uxth	r0, r0
 8021212:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021216:	1a12      	subs	r2, r2, r0
 8021218:	b292      	uxth	r2, r2
 802121a:	fb02 110e 	mla	r1, r2, lr, r1
 802121e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021220:	fb00 1104 	mla	r1, r0, r4, r1
 8021224:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021226:	fb09 1104 	mla	r1, r9, r4, r1
 802122a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802122e:	2900      	cmp	r1, #0
 8021230:	f000 80f5 	beq.w	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021234:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021238:	d01b      	beq.n	8021272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802123a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802123e:	fb0e fa0a 	mul.w	sl, lr, sl
 8021242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021246:	fb0e fe03 	mul.w	lr, lr, r3
 802124a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802124e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021252:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021256:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802125a:	4453      	add	r3, sl
 802125c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021260:	0a1b      	lsrs	r3, r3, #8
 8021262:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021266:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802126a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802126e:	ea43 030c 	orr.w	r3, r3, ip
 8021272:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021274:	2cff      	cmp	r4, #255	; 0xff
 8021276:	d021      	beq.n	80212bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802127a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802127e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021280:	fb04 fb0b 	mul.w	fp, r4, fp
 8021284:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021286:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802128a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802128e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021294:	fb04 fa0a 	mul.w	sl, r4, sl
 8021298:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802129c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80212a0:	44de      	add	lr, fp
 80212a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80212a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80212aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80212b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212b6:	ea4e 040a 	orr.w	r4, lr, sl
 80212ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80212bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212be:	2cff      	cmp	r4, #255	; 0xff
 80212c0:	d021      	beq.n	8021306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80212c2:	9c08      	ldr	r4, [sp, #32]
 80212c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80212c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80212ce:	9c08      	ldr	r4, [sp, #32]
 80212d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80212d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80212d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80212da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80212de:	fb04 fa0a 	mul.w	sl, r4, sl
 80212e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80212e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80212ea:	44de      	add	lr, fp
 80212ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80212f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80212f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80212fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021300:	ea4e 040a 	orr.w	r4, lr, sl
 8021304:	9408      	str	r4, [sp, #32]
 8021306:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021308:	2cff      	cmp	r4, #255	; 0xff
 802130a:	d021      	beq.n	8021350 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802130c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802130e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021312:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021314:	fb04 fb0b 	mul.w	fp, r4, fp
 8021318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802131a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802131e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021322:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021324:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021328:	fb04 fa0a 	mul.w	sl, r4, sl
 802132c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021330:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021334:	44de      	add	lr, fp
 8021336:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802133a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802133e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021342:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021346:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802134a:	ea4e 040a 	orr.w	r4, lr, sl
 802134e:	940c      	str	r4, [sp, #48]	; 0x30
 8021350:	43c9      	mvns	r1, r1
 8021352:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021354:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021358:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802135c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021360:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021364:	9c08      	ldr	r4, [sp, #32]
 8021366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802136a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802136e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021372:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021374:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021378:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802137a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802137e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021382:	fb08 f80e 	mul.w	r8, r8, lr
 8021386:	fb02 8303 	mla	r3, r2, r3, r8
 802138a:	9a08      	ldr	r2, [sp, #32]
 802138c:	f8b7 8000 	ldrh.w	r8, [r7]
 8021390:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021394:	fb00 330a 	mla	r3, r0, sl, r3
 8021398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802139a:	fa5f fe81 	uxtb.w	lr, r1
 802139e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80213a2:	fb09 3900 	mla	r9, r9, r0, r3
 80213a6:	ea4f 2228 	mov.w	r2, r8, asr #8
 80213aa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80213ae:	fb02 f20e 	mul.w	r2, r2, lr
 80213b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80213ba:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80213be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213c2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80213c6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80213ca:	ea4c 0c09 	orr.w	ip, ip, r9
 80213ce:	fb00 f00e 	mul.w	r0, r0, lr
 80213d2:	1c53      	adds	r3, r2, #1
 80213d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80213d8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80213dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80213e0:	4a62      	ldr	r2, [pc, #392]	; (802156c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80213e2:	b2db      	uxtb	r3, r3
 80213e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80213e8:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80213ec:	b2c9      	uxtb	r1, r1
 80213ee:	1c43      	adds	r3, r0, #1
 80213f0:	fb01 f10e 	mul.w	r1, r1, lr
 80213f4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80213f8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80213fc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021400:	00db      	lsls	r3, r3, #3
 8021402:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021406:	4313      	orrs	r3, r2
 8021408:	1c4a      	adds	r2, r1, #1
 802140a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802140e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021412:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021416:	ea4c 0c03 	orr.w	ip, ip, r3
 802141a:	f8a7 c000 	strh.w	ip, [r7]
 802141e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021420:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021422:	3702      	adds	r7, #2
 8021424:	441a      	add	r2, r3
 8021426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021428:	9225      	str	r2, [sp, #148]	; 0x94
 802142a:	441d      	add	r5, r3
 802142c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802142e:	3b01      	subs	r3, #1
 8021430:	9317      	str	r3, [sp, #92]	; 0x5c
 8021432:	e699      	b.n	8021168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021434:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021436:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021438:	441c      	add	r4, r3
 802143a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802143c:	9425      	str	r4, [sp, #148]	; 0x94
 802143e:	441d      	add	r5, r3
 8021440:	9b07      	ldr	r3, [sp, #28]
 8021442:	3b01      	subs	r3, #1
 8021444:	9307      	str	r3, [sp, #28]
 8021446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021448:	3302      	adds	r3, #2
 802144a:	930a      	str	r3, [sp, #40]	; 0x28
 802144c:	e66c      	b.n	8021128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802144e:	d024      	beq.n	802149a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021450:	9b07      	ldr	r3, [sp, #28]
 8021452:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021454:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021456:	3b01      	subs	r3, #1
 8021458:	fb00 4003 	mla	r0, r0, r3, r4
 802145c:	1400      	asrs	r0, r0, #16
 802145e:	f53f ae80 	bmi.w	8021162 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021462:	3901      	subs	r1, #1
 8021464:	4288      	cmp	r0, r1
 8021466:	f6bf ae7c 	bge.w	8021162 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802146a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802146c:	fb01 5303 	mla	r3, r1, r3, r5
 8021470:	141b      	asrs	r3, r3, #16
 8021472:	f53f ae76 	bmi.w	8021162 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021476:	3a01      	subs	r2, #1
 8021478:	4293      	cmp	r3, r2
 802147a:	f6bf ae72 	bge.w	8021162 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802147e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021482:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021486:	f1bb 0f00 	cmp.w	fp, #0
 802148a:	dc71      	bgt.n	8021570 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802148c:	9b07      	ldr	r3, [sp, #28]
 802148e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021494:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021498:	930a      	str	r3, [sp, #40]	; 0x28
 802149a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802149c:	2b00      	cmp	r3, #0
 802149e:	f340 81af 	ble.w	8021800 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80214a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80214a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80214b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214b6:	eef0 6a62 	vmov.f32	s13, s5
 80214ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80214ce:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80214d2:	eef0 6a43 	vmov.f32	s13, s6
 80214d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214da:	ee12 2a90 	vmov	r2, s5
 80214de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80214e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80214e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80214ec:	ee13 2a10 	vmov	r2, s6
 80214f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80214f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80214f4:	ee16 5a90 	vmov	r5, s13
 80214f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80214fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80214fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021500:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021502:	3b01      	subs	r3, #1
 8021504:	9316      	str	r3, [sp, #88]	; 0x58
 8021506:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021508:	bf08      	it	eq
 802150a:	4613      	moveq	r3, r2
 802150c:	eeb0 3a67 	vmov.f32	s6, s15
 8021510:	9307      	str	r3, [sp, #28]
 8021512:	eef0 2a47 	vmov.f32	s5, s14
 8021516:	e5f9      	b.n	802110c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021518:	2800      	cmp	r0, #0
 802151a:	f43f ae6b 	beq.w	80211f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802151e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021522:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021526:	9108      	str	r1, [sp, #32]
 8021528:	0e09      	lsrs	r1, r1, #24
 802152a:	9110      	str	r1, [sp, #64]	; 0x40
 802152c:	e662      	b.n	80211f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802152e:	f113 0801 	adds.w	r8, r3, #1
 8021532:	f53f af74 	bmi.w	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021536:	4541      	cmp	r1, r8
 8021538:	f6ff af71 	blt.w	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802153c:	f11c 0801 	adds.w	r8, ip, #1
 8021540:	f53f af6d 	bmi.w	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021544:	45c6      	cmp	lr, r8
 8021546:	f6ff af6a 	blt.w	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802154a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802154e:	b209      	sxth	r1, r1
 8021550:	fa0f f38e 	sxth.w	r3, lr
 8021554:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021558:	9301      	str	r3, [sp, #4]
 802155a:	9100      	str	r1, [sp, #0]
 802155c:	4633      	mov	r3, r6
 802155e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021560:	4639      	mov	r1, r7
 8021562:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021564:	f7ff fc7a 	bl	8020e5c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8021568:	e759      	b.n	802141e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802156a:	bf00      	nop
 802156c:	fffff800 	.word	0xfffff800
 8021570:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021572:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021574:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021578:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802157a:	1427      	asrs	r7, r4, #16
 802157c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021580:	142b      	asrs	r3, r5, #16
 8021582:	fb01 7303 	mla	r3, r1, r3, r7
 8021586:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021588:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802158c:	18e7      	adds	r7, r4, r3
 802158e:	5ce3      	ldrb	r3, [r4, r3]
 8021590:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021594:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021598:	2a00      	cmp	r2, #0
 802159a:	f000 8127 	beq.w	80217ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802159e:	f897 e001 	ldrb.w	lr, [r7, #1]
 80215a2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80215a6:	940d      	str	r4, [sp, #52]	; 0x34
 80215a8:	0e24      	lsrs	r4, r4, #24
 80215aa:	9414      	str	r4, [sp, #80]	; 0x50
 80215ac:	b170      	cbz	r0, 80215cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80215ae:	eb07 0e01 	add.w	lr, r7, r1
 80215b2:	5c79      	ldrb	r1, [r7, r1]
 80215b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215b8:	9109      	str	r1, [sp, #36]	; 0x24
 80215ba:	0e09      	lsrs	r1, r1, #24
 80215bc:	9111      	str	r1, [sp, #68]	; 0x44
 80215be:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80215c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215c6:	910e      	str	r1, [sp, #56]	; 0x38
 80215c8:	0e09      	lsrs	r1, r1, #24
 80215ca:	9115      	str	r1, [sp, #84]	; 0x54
 80215cc:	b292      	uxth	r2, r2
 80215ce:	b280      	uxth	r0, r0
 80215d0:	fb02 f800 	mul.w	r8, r2, r0
 80215d4:	0112      	lsls	r2, r2, #4
 80215d6:	eba2 0e08 	sub.w	lr, r2, r8
 80215da:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80215de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215e0:	fa1f fe8e 	uxth.w	lr, lr
 80215e4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80215e8:	fb0e f202 	mul.w	r2, lr, r2
 80215ec:	b280      	uxth	r0, r0
 80215ee:	1a09      	subs	r1, r1, r0
 80215f0:	b289      	uxth	r1, r1
 80215f2:	fb01 220c 	mla	r2, r1, ip, r2
 80215f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80215f8:	fb00 2204 	mla	r2, r0, r4, r2
 80215fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80215fe:	fb08 2204 	mla	r2, r8, r4, r2
 8021602:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021606:	2a00      	cmp	r2, #0
 8021608:	f000 80e5 	beq.w	80217d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802160c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021610:	d019      	beq.n	8021646 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8021612:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021616:	fb0c fa0a 	mul.w	sl, ip, sl
 802161a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802161e:	fb0c fc03 	mul.w	ip, ip, r3
 8021622:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021626:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802162a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802162e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021632:	4453      	add	r3, sl
 8021634:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021638:	0a1b      	lsrs	r3, r3, #8
 802163a:	0a3f      	lsrs	r7, r7, #8
 802163c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021640:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021644:	433b      	orrs	r3, r7
 8021646:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021648:	2cff      	cmp	r4, #255	; 0xff
 802164a:	d020      	beq.n	802168e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 802164c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802164e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021652:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021654:	4367      	muls	r7, r4
 8021656:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021658:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802165c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021660:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021662:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021666:	fb04 fa0a 	mul.w	sl, r4, sl
 802166a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802166e:	44bc      	add	ip, r7
 8021670:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021674:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802167c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021684:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021688:	ea4c 040a 	orr.w	r4, ip, sl
 802168c:	940d      	str	r4, [sp, #52]	; 0x34
 802168e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021690:	2cff      	cmp	r4, #255	; 0xff
 8021692:	d020      	beq.n	80216d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021694:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021696:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802169a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802169c:	4367      	muls	r7, r4
 802169e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80216a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80216a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80216a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80216aa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80216ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80216b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216b6:	44bc      	add	ip, r7
 80216b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80216bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80216c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80216d0:	ea4c 040a 	orr.w	r4, ip, sl
 80216d4:	9409      	str	r4, [sp, #36]	; 0x24
 80216d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80216d8:	2cff      	cmp	r4, #255	; 0xff
 80216da:	d020      	beq.n	802171e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80216dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80216de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80216e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80216e4:	4367      	muls	r7, r4
 80216e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80216e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80216ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80216f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80216f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80216f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80216fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216fe:	44bc      	add	ip, r7
 8021700:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021704:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021708:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802170c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021710:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021714:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021718:	ea4c 040a 	orr.w	r4, ip, sl
 802171c:	940e      	str	r4, [sp, #56]	; 0x38
 802171e:	43d2      	mvns	r2, r2
 8021720:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021722:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021726:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802172a:	fb0e f707 	mul.w	r7, lr, r7
 802172e:	fb01 770c 	mla	r7, r1, ip, r7
 8021732:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021738:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802173c:	fb00 770c 	mla	r7, r0, ip, r7
 8021740:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021742:	b2d2      	uxtb	r2, r2
 8021744:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021748:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802174a:	fb08 770c 	mla	r7, r8, ip, r7
 802174e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021752:	fb0e fe0c 	mul.w	lr, lr, ip
 8021756:	fb01 e303 	mla	r3, r1, r3, lr
 802175a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802175c:	0a3f      	lsrs	r7, r7, #8
 802175e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021762:	fb00 330a 	mla	r3, r0, sl, r3
 8021766:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021768:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802176c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021770:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021774:	f8b9 3000 	ldrh.w	r3, [r9]
 8021778:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802177c:	1218      	asrs	r0, r3, #8
 802177e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021782:	4350      	muls	r0, r2
 8021784:	10d9      	asrs	r1, r3, #3
 8021786:	00db      	lsls	r3, r3, #3
 8021788:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802178c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021790:	b2db      	uxtb	r3, r3
 8021792:	ea47 070c 	orr.w	r7, r7, ip
 8021796:	4351      	muls	r1, r2
 8021798:	4353      	muls	r3, r2
 802179a:	1c42      	adds	r2, r0, #1
 802179c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80217a0:	0c3a      	lsrs	r2, r7, #16
 80217a2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80217a6:	4a18      	ldr	r2, [pc, #96]	; (8021808 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80217a8:	b2c0      	uxtb	r0, r0
 80217aa:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80217ae:	1c4a      	adds	r2, r1, #1
 80217b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80217b4:	0a3a      	lsrs	r2, r7, #8
 80217b6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80217ba:	00c9      	lsls	r1, r1, #3
 80217bc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217c0:	4301      	orrs	r1, r0
 80217c2:	1c58      	adds	r0, r3, #1
 80217c4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80217c8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80217cc:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80217d0:	4308      	orrs	r0, r1
 80217d2:	f8a9 0000 	strh.w	r0, [r9]
 80217d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80217d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80217da:	f109 0902 	add.w	r9, r9, #2
 80217de:	441a      	add	r2, r3
 80217e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217e2:	9225      	str	r2, [sp, #148]	; 0x94
 80217e4:	441d      	add	r5, r3
 80217e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80217ea:	e64c      	b.n	8021486 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80217ec:	2800      	cmp	r0, #0
 80217ee:	f43f aeed 	beq.w	80215cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80217f2:	5c79      	ldrb	r1, [r7, r1]
 80217f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80217f8:	9109      	str	r1, [sp, #36]	; 0x24
 80217fa:	0e09      	lsrs	r1, r1, #24
 80217fc:	9111      	str	r1, [sp, #68]	; 0x44
 80217fe:	e6e5      	b.n	80215cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021800:	b01b      	add	sp, #108	; 0x6c
 8021802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021806:	bf00      	nop
 8021808:	fffff800 	.word	0xfffff800

0802180c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021810:	b085      	sub	sp, #20
 8021812:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021816:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802181a:	fb00 7406 	mla	r4, r0, r6, r7
 802181e:	2800      	cmp	r0, #0
 8021820:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8021824:	9103      	str	r1, [sp, #12]
 8021826:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802182a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802182e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021832:	9501      	str	r5, [sp, #4]
 8021834:	eb03 0904 	add.w	r9, r3, r4
 8021838:	f2c0 8150 	blt.w	8021adc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802183c:	4583      	cmp	fp, r0
 802183e:	f340 814d 	ble.w	8021adc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021842:	2f00      	cmp	r7, #0
 8021844:	f2c0 8146 	blt.w	8021ad4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021848:	42be      	cmp	r6, r7
 802184a:	f340 8143 	ble.w	8021ad4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802184e:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021852:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021856:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802185a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802185e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021862:	4355      	muls	r5, r2
 8021864:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021868:	fb0c f203 	mul.w	r2, ip, r3
 802186c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021870:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021874:	441d      	add	r5, r3
 8021876:	f102 0320 	add.w	r3, r2, #32
 802187a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802187e:	0a1b      	lsrs	r3, r3, #8
 8021880:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021884:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021888:	431c      	orrs	r4, r3
 802188a:	1c7b      	adds	r3, r7, #1
 802188c:	f100 812b 	bmi.w	8021ae6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021890:	429e      	cmp	r6, r3
 8021892:	f340 8128 	ble.w	8021ae6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021896:	2900      	cmp	r1, #0
 8021898:	f000 8128 	beq.w	8021aec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802189c:	9a01      	ldr	r2, [sp, #4]
 802189e:	f899 3001 	ldrb.w	r3, [r9, #1]
 80218a2:	8855      	ldrh	r5, [r2, #2]
 80218a4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80218a8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80218ac:	fb08 f802 	mul.w	r8, r8, r2
 80218b0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80218b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80218b8:	435d      	muls	r5, r3
 80218ba:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80218be:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80218c2:	44d0      	add	r8, sl
 80218c4:	f105 0a20 	add.w	sl, r5, #32
 80218c8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80218cc:	0a2d      	lsrs	r5, r5, #8
 80218ce:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80218d2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80218d6:	432a      	orrs	r2, r5
 80218d8:	3001      	adds	r0, #1
 80218da:	f100 810d 	bmi.w	8021af8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80218de:	4583      	cmp	fp, r0
 80218e0:	f340 810a 	ble.w	8021af8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80218e4:	f1be 0f00 	cmp.w	lr, #0
 80218e8:	f000 810b 	beq.w	8021b02 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80218ec:	2f00      	cmp	r7, #0
 80218ee:	f2c0 8100 	blt.w	8021af2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80218f2:	42be      	cmp	r6, r7
 80218f4:	f340 80fd 	ble.w	8021af2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80218f8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80218fc:	9801      	ldr	r0, [sp, #4]
 80218fe:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021902:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021906:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802190a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802190e:	fb0a fa00 	mul.w	sl, sl, r0
 8021912:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021916:	fb05 f808 	mul.w	r8, r5, r8
 802191a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802191e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021922:	4482      	add	sl, r0
 8021924:	f108 0020 	add.w	r0, r8, #32
 8021928:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802192c:	0a00      	lsrs	r0, r0, #8
 802192e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021932:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021936:	ea4b 0b00 	orr.w	fp, fp, r0
 802193a:	3701      	adds	r7, #1
 802193c:	f100 80e6 	bmi.w	8021b0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021940:	42be      	cmp	r6, r7
 8021942:	f340 80e3 	ble.w	8021b0c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021946:	2900      	cmp	r1, #0
 8021948:	f000 80e3 	beq.w	8021b12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 802194c:	9801      	ldr	r0, [sp, #4]
 802194e:	3601      	adds	r6, #1
 8021950:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021954:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021958:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802195c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021960:	fb07 f800 	mul.w	r8, r7, r0
 8021964:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021968:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802196c:	fb09 f906 	mul.w	r9, r9, r6
 8021970:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8021974:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8021978:	44d1      	add	r9, sl
 802197a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802197e:	f108 0020 	add.w	r0, r8, #32
 8021982:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021986:	0a00      	lsrs	r0, r0, #8
 8021988:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802198c:	4330      	orrs	r0, r6
 802198e:	b28e      	uxth	r6, r1
 8021990:	fa1f f98e 	uxth.w	r9, lr
 8021994:	fb06 f809 	mul.w	r8, r6, r9
 8021998:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802199c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80219a0:	0136      	lsls	r6, r6, #4
 80219a2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80219a6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80219aa:	9601      	str	r6, [sp, #4]
 80219ac:	ea4a 0404 	orr.w	r4, sl, r4
 80219b0:	fa1f f689 	uxth.w	r6, r9
 80219b4:	9602      	str	r6, [sp, #8]
 80219b6:	4626      	mov	r6, r4
 80219b8:	fb11 f90e 	smulbb	r9, r1, lr
 80219bc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80219c0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80219c4:	f1ce 0410 	rsb	r4, lr, #16
 80219c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80219cc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80219d0:	1a64      	subs	r4, r4, r1
 80219d2:	ea4a 0202 	orr.w	r2, sl, r2
 80219d6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80219da:	434a      	muls	r2, r1
 80219dc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80219e0:	fb04 2406 	mla	r4, r4, r6, r2
 80219e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80219e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80219ec:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80219f0:	ea4a 0000 	orr.w	r0, sl, r0
 80219f4:	fb09 4200 	mla	r2, r9, r0, r4
 80219f8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80219fc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021a00:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8021a04:	ea44 0b0b 	orr.w	fp, r4, fp
 8021a08:	9c01      	ldr	r4, [sp, #4]
 8021a0a:	9e02      	ldr	r6, [sp, #8]
 8021a0c:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8021a10:	1ba4      	subs	r4, r4, r6
 8021a12:	9e01      	ldr	r6, [sp, #4]
 8021a14:	b2a4      	uxth	r4, r4
 8021a16:	eba6 0608 	sub.w	r6, r6, r8
 8021a1a:	b2b6      	uxth	r6, r6
 8021a1c:	4373      	muls	r3, r6
 8021a1e:	fb0c 3304 	mla	r3, ip, r4, r3
 8021a22:	9c02      	ldr	r4, [sp, #8]
 8021a24:	9903      	ldr	r1, [sp, #12]
 8021a26:	fb04 3505 	mla	r5, r4, r5, r3
 8021a2a:	fb08 5707 	mla	r7, r8, r7, r5
 8021a2e:	8808      	ldrh	r0, [r1, #0]
 8021a30:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8021a34:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021a38:	b289      	uxth	r1, r1
 8021a3a:	434f      	muls	r7, r1
 8021a3c:	1c7b      	adds	r3, r7, #1
 8021a3e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021a42:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8021a46:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8021a4a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8021a4e:	1203      	asrs	r3, r0, #8
 8021a50:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021a54:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021a58:	b2ff      	uxtb	r7, r7
 8021a5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a5e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021a62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021a66:	fb13 f307 	smulbb	r3, r3, r7
 8021a6a:	ea42 0e0e 	orr.w	lr, r2, lr
 8021a6e:	fa1f f28e 	uxth.w	r2, lr
 8021a72:	1215      	asrs	r5, r2, #8
 8021a74:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021a78:	fb05 3501 	mla	r5, r5, r1, r3
 8021a7c:	10c3      	asrs	r3, r0, #3
 8021a7e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021a82:	fb13 f307 	smulbb	r3, r3, r7
 8021a86:	10d4      	asrs	r4, r2, #3
 8021a88:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a8c:	fb04 3401 	mla	r4, r4, r1, r3
 8021a90:	00c3      	lsls	r3, r0, #3
 8021a92:	b2db      	uxtb	r3, r3
 8021a94:	fb13 f307 	smulbb	r3, r3, r7
 8021a98:	00d2      	lsls	r2, r2, #3
 8021a9a:	b2d2      	uxtb	r2, r2
 8021a9c:	fb02 3101 	mla	r1, r2, r1, r3
 8021aa0:	b2ad      	uxth	r5, r5
 8021aa2:	b289      	uxth	r1, r1
 8021aa4:	b2a4      	uxth	r4, r4
 8021aa6:	1c6b      	adds	r3, r5, #1
 8021aa8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021aac:	1c62      	adds	r2, r4, #1
 8021aae:	1c4b      	adds	r3, r1, #1
 8021ab0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021ab4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021ab8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021abc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021ac0:	0964      	lsrs	r4, r4, #5
 8021ac2:	432b      	orrs	r3, r5
 8021ac4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021ac8:	9a03      	ldr	r2, [sp, #12]
 8021aca:	4323      	orrs	r3, r4
 8021acc:	8013      	strh	r3, [r2, #0]
 8021ace:	b005      	add	sp, #20
 8021ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ad4:	f04f 0c00 	mov.w	ip, #0
 8021ad8:	4664      	mov	r4, ip
 8021ada:	e6d6      	b.n	802188a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8021adc:	2300      	movs	r3, #0
 8021ade:	469c      	mov	ip, r3
 8021ae0:	461a      	mov	r2, r3
 8021ae2:	461c      	mov	r4, r3
 8021ae4:	e6f8      	b.n	80218d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	461a      	mov	r2, r3
 8021aea:	e6f5      	b.n	80218d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021aec:	460b      	mov	r3, r1
 8021aee:	460a      	mov	r2, r1
 8021af0:	e6f2      	b.n	80218d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8021af2:	2500      	movs	r5, #0
 8021af4:	46ab      	mov	fp, r5
 8021af6:	e720      	b.n	802193a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8021af8:	2700      	movs	r7, #0
 8021afa:	463d      	mov	r5, r7
 8021afc:	4638      	mov	r0, r7
 8021afe:	46bb      	mov	fp, r7
 8021b00:	e745      	b.n	802198e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021b02:	4677      	mov	r7, lr
 8021b04:	4675      	mov	r5, lr
 8021b06:	4670      	mov	r0, lr
 8021b08:	46f3      	mov	fp, lr
 8021b0a:	e740      	b.n	802198e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021b0c:	2700      	movs	r7, #0
 8021b0e:	4638      	mov	r0, r7
 8021b10:	e73d      	b.n	802198e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8021b12:	460f      	mov	r7, r1
 8021b14:	4608      	mov	r0, r1
 8021b16:	e73a      	b.n	802198e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08021b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b1c:	b097      	sub	sp, #92	; 0x5c
 8021b1e:	9214      	str	r2, [sp, #80]	; 0x50
 8021b20:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021b22:	9015      	str	r0, [sp, #84]	; 0x54
 8021b24:	9308      	str	r3, [sp, #32]
 8021b26:	6850      	ldr	r0, [r2, #4]
 8021b28:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021b2c:	9111      	str	r1, [sp, #68]	; 0x44
 8021b2e:	9312      	str	r3, [sp, #72]	; 0x48
 8021b30:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021b34:	fb00 1303 	mla	r3, r0, r3, r1
 8021b38:	6812      	ldr	r2, [r2, #0]
 8021b3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8021b40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b48:	685b      	ldr	r3, [r3, #4]
 8021b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8021b4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021b50:	930a      	str	r3, [sp, #40]	; 0x28
 8021b52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	dc03      	bgt.n	8021b60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	f340 83cb 	ble.w	80222f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021b60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b6a:	1e48      	subs	r0, r1, #1
 8021b6c:	1e55      	subs	r5, r2, #1
 8021b6e:	9b08      	ldr	r3, [sp, #32]
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	f340 81a3 	ble.w	8021ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021b76:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8021b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b7a:	1436      	asrs	r6, r6, #16
 8021b7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021b80:	d406      	bmi.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b82:	4286      	cmp	r6, r0
 8021b84:	da04      	bge.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	db02      	blt.n	8021b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b8a:	42ab      	cmp	r3, r5
 8021b8c:	f2c0 8197 	blt.w	8021ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021b90:	3601      	adds	r6, #1
 8021b92:	f100 8184 	bmi.w	8021e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021b96:	42b1      	cmp	r1, r6
 8021b98:	f2c0 8181 	blt.w	8021e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021b9c:	3301      	adds	r3, #1
 8021b9e:	f100 817e 	bmi.w	8021e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021ba2:	429a      	cmp	r2, r3
 8021ba4:	f2c0 817b 	blt.w	8021e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8021ba8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021bac:	9b08      	ldr	r3, [sp, #32]
 8021bae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	f340 81a4 	ble.w	8021f02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8021bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021bbc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021bbe:	1418      	asrs	r0, r3, #16
 8021bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021bc2:	142d      	asrs	r5, r5, #16
 8021bc4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021bca:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021bce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021bd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021bd4:	f100 81f8 	bmi.w	8021fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021bd8:	f102 3eff 	add.w	lr, r2, #4294967295
 8021bdc:	4575      	cmp	r5, lr
 8021bde:	f280 81f3 	bge.w	8021fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021be2:	2800      	cmp	r0, #0
 8021be4:	f2c0 81f0 	blt.w	8021fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021be8:	f103 3eff 	add.w	lr, r3, #4294967295
 8021bec:	4570      	cmp	r0, lr
 8021bee:	f280 81eb 	bge.w	8021fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021bf2:	b212      	sxth	r2, r2
 8021bf4:	fb00 5002 	mla	r0, r0, r2, r5
 8021bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bfa:	fa1f fe81 	uxth.w	lr, r1
 8021bfe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021c02:	eb03 0a00 	add.w	sl, r3, r0
 8021c06:	f813 9000 	ldrb.w	r9, [r3, r0]
 8021c0a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021c0e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	f1bc 0f00 	cmp.w	ip, #0
 8021c18:	f000 81b9 	beq.w	8021f8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8021c1c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021c20:	eb0a 0b02 	add.w	fp, sl, r2
 8021c24:	fa1f fa8c 	uxth.w	sl, ip
 8021c28:	fb0a fe0e 	mul.w	lr, sl, lr
 8021c2c:	eba5 050e 	sub.w	r5, r5, lr
 8021c30:	b2ad      	uxth	r5, r5
 8021c32:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8021c36:	fb08 f505 	mul.w	r5, r8, r5
 8021c3a:	fa1f fa8a 	uxth.w	sl, sl
 8021c3e:	eba3 030a 	sub.w	r3, r3, sl
 8021c42:	b29b      	uxth	r3, r3
 8021c44:	940d      	str	r4, [sp, #52]	; 0x34
 8021c46:	fb09 5303 	mla	r3, r9, r3, r5
 8021c4a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8021c4e:	940e      	str	r4, [sp, #56]	; 0x38
 8021c50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021c52:	fb0a 3304 	mla	r3, sl, r4, r3
 8021c56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c58:	fb0e 3304 	mla	r3, lr, r4, r3
 8021c5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	f000 810f 	beq.w	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021c66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021c68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c6c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8021c70:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8021c74:	f000 8190 	beq.w	8021f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021c78:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021c7c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8021c80:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021c84:	fb09 f000 	mul.w	r0, r9, r0
 8021c88:	fb0a fe0e 	mul.w	lr, sl, lr
 8021c8c:	f100 0b20 	add.w	fp, r0, #32
 8021c90:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021c94:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021c98:	44ce      	add	lr, r9
 8021c9a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021c9e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021ca2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021ca6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021caa:	ea4e 0909 	orr.w	r9, lr, r9
 8021cae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021cb2:	8868      	ldrh	r0, [r5, #2]
 8021cb4:	d019      	beq.n	8021cea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021cb6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8021cba:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021cbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cc2:	fb08 f800 	mul.w	r8, r8, r0
 8021cc6:	fb0a fe0e 	mul.w	lr, sl, lr
 8021cca:	f108 0b20 	add.w	fp, r8, #32
 8021cce:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021cd2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021cd6:	4486      	add	lr, r0
 8021cd8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021cdc:	0a00      	lsrs	r0, r0, #8
 8021cde:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021ce2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021ce6:	ea4e 0000 	orr.w	r0, lr, r0
 8021cea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021cee:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8021cf2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021cf6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021cfa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021cfe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d02:	ea4e 0909 	orr.w	r9, lr, r9
 8021d06:	ea4a 0000 	orr.w	r0, sl, r0
 8021d0a:	f1bc 0f00 	cmp.w	ip, #0
 8021d0e:	f000 8145 	beq.w	8021f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8021d12:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8021d16:	3a01      	subs	r2, #1
 8021d18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d1a:	0052      	lsls	r2, r2, #1
 8021d1c:	3202      	adds	r2, #2
 8021d1e:	2cff      	cmp	r4, #255	; 0xff
 8021d20:	eb05 0e02 	add.w	lr, r5, r2
 8021d24:	5aaa      	ldrh	r2, [r5, r2]
 8021d26:	d018      	beq.n	8021d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021d28:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8021d2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d30:	fb04 fa02 	mul.w	sl, r4, r2
 8021d34:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021d38:	fb08 f805 	mul.w	r8, r8, r5
 8021d3c:	f10a 0520 	add.w	r5, sl, #32
 8021d40:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8021d44:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8021d48:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021d4c:	4442      	add	r2, r8
 8021d4e:	0a2d      	lsrs	r5, r5, #8
 8021d50:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8021d54:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d58:	432a      	orrs	r2, r5
 8021d5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d5c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8021d60:	2cff      	cmp	r4, #255	; 0xff
 8021d62:	d01a      	beq.n	8021d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8021d64:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8021d68:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d6c:	fb04 fa05 	mul.w	sl, r4, r5
 8021d70:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8021d74:	fb08 f80e 	mul.w	r8, r8, lr
 8021d78:	f10a 0e20 	add.w	lr, sl, #32
 8021d7c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8021d80:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021d84:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021d88:	4445      	add	r5, r8
 8021d8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d8e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8021d92:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8021d96:	ea45 050e 	orr.w	r5, r5, lr
 8021d9a:	fb1c fe01 	smulbb	lr, ip, r1
 8021d9e:	f1cc 0810 	rsb	r8, ip, #16
 8021da2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021da6:	eba8 0801 	sub.w	r8, r8, r1
 8021daa:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021dae:	4341      	muls	r1, r0
 8021db0:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8021db4:	fb09 1108 	mla	r1, r9, r8, r1
 8021db8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8021dbc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021dc0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021dc4:	ea4a 0202 	orr.w	r2, sl, r2
 8021dc8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021dcc:	fb0c 1102 	mla	r1, ip, r2, r1
 8021dd0:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8021dd4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021dd8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021ddc:	ea4b 0505 	orr.w	r5, fp, r5
 8021de0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8021de4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021de8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021dec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021df0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021df4:	ea42 0e0e 	orr.w	lr, r2, lr
 8021df8:	fa1f f28e 	uxth.w	r2, lr
 8021dfc:	2bff      	cmp	r3, #255	; 0xff
 8021dfe:	d103      	bne.n	8021e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021e00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021e02:	29ff      	cmp	r1, #255	; 0xff
 8021e04:	f000 80de 	beq.w	8021fc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021e08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021e0a:	8838      	ldrh	r0, [r7, #0]
 8021e0c:	434b      	muls	r3, r1
 8021e0e:	f103 0c01 	add.w	ip, r3, #1
 8021e12:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8021e16:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8021e1a:	fa5f fc83 	uxtb.w	ip, r3
 8021e1e:	1203      	asrs	r3, r0, #8
 8021e20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021e24:	fb13 f30c 	smulbb	r3, r3, ip
 8021e28:	1215      	asrs	r5, r2, #8
 8021e2a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021e2e:	fb05 3501 	mla	r5, r5, r1, r3
 8021e32:	10c3      	asrs	r3, r0, #3
 8021e34:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021e38:	fb13 f30c 	smulbb	r3, r3, ip
 8021e3c:	10d1      	asrs	r1, r2, #3
 8021e3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e40:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e44:	fb01 3104 	mla	r1, r1, r4, r3
 8021e48:	00c3      	lsls	r3, r0, #3
 8021e4a:	b2db      	uxtb	r3, r3
 8021e4c:	fb13 f30c 	smulbb	r3, r3, ip
 8021e50:	00d2      	lsls	r2, r2, #3
 8021e52:	b2d2      	uxtb	r2, r2
 8021e54:	fb02 3304 	mla	r3, r2, r4, r3
 8021e58:	b2ad      	uxth	r5, r5
 8021e5a:	b29a      	uxth	r2, r3
 8021e5c:	1c6b      	adds	r3, r5, #1
 8021e5e:	b289      	uxth	r1, r1
 8021e60:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021e64:	1c53      	adds	r3, r2, #1
 8021e66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021e6a:	1c4a      	adds	r2, r1, #1
 8021e6c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021e70:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021e74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021e78:	0949      	lsrs	r1, r1, #5
 8021e7a:	432b      	orrs	r3, r5
 8021e7c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021e80:	430b      	orrs	r3, r1
 8021e82:	803b      	strh	r3, [r7, #0]
 8021e84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021e86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021e88:	3702      	adds	r7, #2
 8021e8a:	4413      	add	r3, r2
 8021e8c:	9321      	str	r3, [sp, #132]	; 0x84
 8021e8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8021e90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e92:	441a      	add	r2, r3
 8021e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021e96:	9222      	str	r2, [sp, #136]	; 0x88
 8021e98:	3b01      	subs	r3, #1
 8021e9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e9c:	e689      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021ea0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8021ea2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8021ea4:	4433      	add	r3, r6
 8021ea6:	9321      	str	r3, [sp, #132]	; 0x84
 8021ea8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021eaa:	441c      	add	r4, r3
 8021eac:	9b08      	ldr	r3, [sp, #32]
 8021eae:	9422      	str	r4, [sp, #136]	; 0x88
 8021eb0:	3b01      	subs	r3, #1
 8021eb2:	9308      	str	r3, [sp, #32]
 8021eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eb6:	3302      	adds	r3, #2
 8021eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8021eba:	e658      	b.n	8021b6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021ebc:	d028      	beq.n	8021f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021ebe:	9b08      	ldr	r3, [sp, #32]
 8021ec0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021ec2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8021ec4:	3b01      	subs	r3, #1
 8021ec6:	fb00 5003 	mla	r0, r0, r3, r5
 8021eca:	1400      	asrs	r0, r0, #16
 8021ecc:	f53f ae6c 	bmi.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ed0:	3901      	subs	r1, #1
 8021ed2:	4288      	cmp	r0, r1
 8021ed4:	f6bf ae68 	bge.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ed8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021eda:	9822      	ldr	r0, [sp, #136]	; 0x88
 8021edc:	fb01 0303 	mla	r3, r1, r3, r0
 8021ee0:	141b      	asrs	r3, r3, #16
 8021ee2:	f53f ae61 	bmi.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ee6:	3a01      	subs	r2, #1
 8021ee8:	4293      	cmp	r3, r2
 8021eea:	f6bf ae5d 	bge.w	8021ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021eee:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021ef2:	9b08      	ldr	r3, [sp, #32]
 8021ef4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021ef8:	9313      	str	r3, [sp, #76]	; 0x4c
 8021efa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	f300 8082 	bgt.w	8022006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8021f02:	9b08      	ldr	r3, [sp, #32]
 8021f04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f0a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8021f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	f340 81ef 	ble.w	80222f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8021f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f2c:	eef0 6a62 	vmov.f32	s13, s5
 8021f30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f44:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8021f48:	eef0 6a43 	vmov.f32	s13, s6
 8021f4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f50:	ee12 2a90 	vmov	r2, s5
 8021f54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f62:	ee13 2a10 	vmov	r2, s6
 8021f66:	9323      	str	r3, [sp, #140]	; 0x8c
 8021f68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f6a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8021f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f72:	9324      	str	r3, [sp, #144]	; 0x90
 8021f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f78:	3b01      	subs	r3, #1
 8021f7a:	9311      	str	r3, [sp, #68]	; 0x44
 8021f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f7e:	bf08      	it	eq
 8021f80:	4613      	moveq	r3, r2
 8021f82:	eeb0 3a67 	vmov.f32	s6, s15
 8021f86:	9308      	str	r3, [sp, #32]
 8021f88:	eef0 2a47 	vmov.f32	s5, s14
 8021f8c:	e5e1      	b.n	8021b52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021f8e:	fb08 f505 	mul.w	r5, r8, r5
 8021f92:	fb09 5303 	mla	r3, r9, r3, r5
 8021f96:	e661      	b.n	8021c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8021f98:	4681      	mov	r9, r0
 8021f9a:	e688      	b.n	8021cae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8021f9c:	f1c1 0210 	rsb	r2, r1, #16
 8021fa0:	4341      	muls	r1, r0
 8021fa2:	fb09 1902 	mla	r9, r9, r2, r1
 8021fa6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021faa:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8021fae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021fb2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021fb6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021fba:	ea42 0909 	orr.w	r9, r2, r9
 8021fbe:	fa1f f289 	uxth.w	r2, r9
 8021fc2:	e71b      	b.n	8021dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021fc4:	803a      	strh	r2, [r7, #0]
 8021fc6:	e75d      	b.n	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fc8:	f115 0e01 	adds.w	lr, r5, #1
 8021fcc:	f53f af5a 	bmi.w	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fd0:	4572      	cmp	r2, lr
 8021fd2:	f6ff af57 	blt.w	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fd6:	f110 0e01 	adds.w	lr, r0, #1
 8021fda:	f53f af53 	bmi.w	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fde:	4573      	cmp	r3, lr
 8021fe0:	f6ff af50 	blt.w	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021fe4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021fe6:	b21b      	sxth	r3, r3
 8021fe8:	b212      	sxth	r2, r2
 8021fea:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8021fee:	9301      	str	r3, [sp, #4]
 8021ff0:	9200      	str	r2, [sp, #0]
 8021ff2:	e9cd c405 	strd	ip, r4, [sp, #20]
 8021ff6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8021ffa:	9502      	str	r5, [sp, #8]
 8021ffc:	4639      	mov	r1, r7
 8021ffe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022000:	f7ff fc04 	bl	802180c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022004:	e73e      	b.n	8021e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022008:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802200c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802200e:	fa1f fc82 	uxth.w	ip, r2
 8022012:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022016:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022018:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802201c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022022:	141f      	asrs	r7, r3, #16
 8022024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022026:	141b      	asrs	r3, r3, #16
 8022028:	fb01 3707 	mla	r7, r1, r7, r3
 802202c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802202e:	eb03 0a07 	add.w	sl, r3, r7
 8022032:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022036:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802203a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802203e:	b29b      	uxth	r3, r3
 8022040:	2d00      	cmp	r5, #0
 8022042:	f000 813d 	beq.w	80222c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8022046:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802204a:	eb0a 0b01 	add.w	fp, sl, r1
 802204e:	fa1f fa85 	uxth.w	sl, r5
 8022052:	fb0a fc0c 	mul.w	ip, sl, ip
 8022056:	eba0 000c 	sub.w	r0, r0, ip
 802205a:	b280      	uxth	r0, r0
 802205c:	fb08 f000 	mul.w	r0, r8, r0
 8022060:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022064:	fa1f fa8a 	uxth.w	sl, sl
 8022068:	eba3 030a 	sub.w	r3, r3, sl
 802206c:	b29b      	uxth	r3, r3
 802206e:	fb09 0303 	mla	r3, r9, r3, r0
 8022072:	940f      	str	r4, [sp, #60]	; 0x3c
 8022074:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022076:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802207a:	fb0a 3300 	mla	r3, sl, r0, r3
 802207e:	fb0c 3304 	mla	r3, ip, r4, r3
 8022082:	9410      	str	r4, [sp, #64]	; 0x40
 8022084:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022088:	2b00      	cmp	r3, #0
 802208a:	f000 810b 	beq.w	80222a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802208e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022090:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022092:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022096:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802209a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802209e:	f000 8114 	beq.w	80222ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80220a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80220a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80220aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80220ae:	fb09 f707 	mul.w	r7, r9, r7
 80220b2:	fb0a fc0c 	mul.w	ip, sl, ip
 80220b6:	f107 0b20 	add.w	fp, r7, #32
 80220ba:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80220be:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80220c2:	44cc      	add	ip, r9
 80220c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80220c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80220cc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80220d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80220d4:	ea4c 0909 	orr.w	r9, ip, r9
 80220d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80220dc:	8847      	ldrh	r7, [r0, #2]
 80220de:	d019      	beq.n	8022114 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 80220e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80220e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80220e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80220ec:	fb08 f807 	mul.w	r8, r8, r7
 80220f0:	fb0a fc0c 	mul.w	ip, sl, ip
 80220f4:	f108 0b20 	add.w	fp, r8, #32
 80220f8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80220fc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022100:	44bc      	add	ip, r7
 8022102:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022106:	0a3f      	lsrs	r7, r7, #8
 8022108:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802210c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022110:	ea4c 0707 	orr.w	r7, ip, r7
 8022114:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022118:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802211c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022120:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022124:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022128:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802212c:	ea4c 0909 	orr.w	r9, ip, r9
 8022130:	ea4a 0707 	orr.w	r7, sl, r7
 8022134:	2d00      	cmp	r5, #0
 8022136:	f000 80ca 	beq.w	80222ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802213a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802213e:	3901      	subs	r1, #1
 8022140:	0049      	lsls	r1, r1, #1
 8022142:	3102      	adds	r1, #2
 8022144:	eb00 0c01 	add.w	ip, r0, r1
 8022148:	5a41      	ldrh	r1, [r0, r1]
 802214a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802214c:	28ff      	cmp	r0, #255	; 0xff
 802214e:	d019      	beq.n	8022184 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8022150:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022152:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022156:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802215a:	fb04 fa01 	mul.w	sl, r4, r1
 802215e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022162:	fb08 f800 	mul.w	r8, r8, r0
 8022166:	f10a 0020 	add.w	r0, sl, #32
 802216a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802216e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022172:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022176:	4441      	add	r1, r8
 8022178:	0a00      	lsrs	r0, r0, #8
 802217a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802217e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022182:	4301      	orrs	r1, r0
 8022184:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022186:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802218a:	2cff      	cmp	r4, #255	; 0xff
 802218c:	d01a      	beq.n	80221c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802218e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022192:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022196:	fb04 fa00 	mul.w	sl, r4, r0
 802219a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802219e:	fb08 f80c 	mul.w	r8, r8, ip
 80221a2:	f10a 0c20 	add.w	ip, sl, #32
 80221a6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80221aa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80221ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80221b2:	4440      	add	r0, r8
 80221b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221b8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80221bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80221c0:	ea40 000c 	orr.w	r0, r0, ip
 80221c4:	fb15 fc02 	smulbb	ip, r5, r2
 80221c8:	f1c5 0810 	rsb	r8, r5, #16
 80221cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80221d0:	eba8 0802 	sub.w	r8, r8, r2
 80221d4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80221d8:	437a      	muls	r2, r7
 80221da:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80221de:	fb09 2208 	mla	r2, r9, r8, r2
 80221e2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80221e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80221ea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80221ee:	ea4a 0101 	orr.w	r1, sl, r1
 80221f2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80221f6:	fb05 2201 	mla	r2, r5, r1, r2
 80221fa:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80221fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022202:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022206:	ea4b 0000 	orr.w	r0, fp, r0
 802220a:	fb0c 2200 	mla	r2, ip, r0, r2
 802220e:	0d57      	lsrs	r7, r2, #21
 8022210:	0952      	lsrs	r2, r2, #5
 8022212:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022216:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802221a:	433a      	orrs	r2, r7
 802221c:	2bff      	cmp	r3, #255	; 0xff
 802221e:	b292      	uxth	r2, r2
 8022220:	d102      	bne.n	8022228 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022222:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022224:	29ff      	cmp	r1, #255	; 0xff
 8022226:	d063      	beq.n	80222f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8022228:	980a      	ldr	r0, [sp, #40]	; 0x28
 802222a:	f8be 1000 	ldrh.w	r1, [lr]
 802222e:	4343      	muls	r3, r0
 8022230:	1c58      	adds	r0, r3, #1
 8022232:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8022236:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802223a:	1208      	asrs	r0, r1, #8
 802223c:	b2db      	uxtb	r3, r3
 802223e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022242:	fb10 f003 	smulbb	r0, r0, r3
 8022246:	10cf      	asrs	r7, r1, #3
 8022248:	00c9      	lsls	r1, r1, #3
 802224a:	b2c9      	uxtb	r1, r1
 802224c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802224e:	1215      	asrs	r5, r2, #8
 8022250:	fb11 f103 	smulbb	r1, r1, r3
 8022254:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022258:	fb05 0504 	mla	r5, r5, r4, r0
 802225c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022260:	10d0      	asrs	r0, r2, #3
 8022262:	00d2      	lsls	r2, r2, #3
 8022264:	fb17 f703 	smulbb	r7, r7, r3
 8022268:	b2d2      	uxtb	r2, r2
 802226a:	fb02 1204 	mla	r2, r2, r4, r1
 802226e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022272:	fb00 7004 	mla	r0, r0, r4, r7
 8022276:	b2ad      	uxth	r5, r5
 8022278:	b292      	uxth	r2, r2
 802227a:	1c6b      	adds	r3, r5, #1
 802227c:	1c57      	adds	r7, r2, #1
 802227e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022282:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022286:	b280      	uxth	r0, r0
 8022288:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802228c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022290:	433d      	orrs	r5, r7
 8022292:	1c47      	adds	r7, r0, #1
 8022294:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022298:	097f      	lsrs	r7, r7, #5
 802229a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802229e:	433d      	orrs	r5, r7
 80222a0:	f8ae 5000 	strh.w	r5, [lr]
 80222a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80222a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80222a8:	f10e 0e02 	add.w	lr, lr, #2
 80222ac:	4413      	add	r3, r2
 80222ae:	9321      	str	r3, [sp, #132]	; 0x84
 80222b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80222b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80222b4:	441a      	add	r2, r3
 80222b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222b8:	9222      	str	r2, [sp, #136]	; 0x88
 80222ba:	3b01      	subs	r3, #1
 80222bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80222be:	e61c      	b.n	8021efa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80222c0:	fb08 f000 	mul.w	r0, r8, r0
 80222c4:	fb09 0303 	mla	r3, r9, r3, r0
 80222c8:	e6dc      	b.n	8022084 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80222ca:	46b9      	mov	r9, r7
 80222cc:	e704      	b.n	80220d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80222ce:	f1c2 0110 	rsb	r1, r2, #16
 80222d2:	437a      	muls	r2, r7
 80222d4:	fb09 2901 	mla	r9, r9, r1, r2
 80222d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80222dc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80222e0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80222e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80222e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80222ec:	4302      	orrs	r2, r0
 80222ee:	e795      	b.n	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80222f0:	f8ae 2000 	strh.w	r2, [lr]
 80222f4:	e7d6      	b.n	80222a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80222f6:	b017      	add	sp, #92	; 0x5c
 80222f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080222fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80222fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022300:	b085      	sub	sp, #20
 8022302:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022306:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802230a:	fb00 7406 	mla	r4, r0, r6, r7
 802230e:	2800      	cmp	r0, #0
 8022310:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8022314:	9103      	str	r1, [sp, #12]
 8022316:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802231a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802231e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022322:	9501      	str	r5, [sp, #4]
 8022324:	eb02 0904 	add.w	r9, r2, r4
 8022328:	f2c0 8141 	blt.w	80225ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802232c:	4583      	cmp	fp, r0
 802232e:	f340 813e 	ble.w	80225ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8022332:	2f00      	cmp	r7, #0
 8022334:	f2c0 8137 	blt.w	80225a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8022338:	42be      	cmp	r6, r7
 802233a:	f340 8134 	ble.w	80225a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802233e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8022342:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8022346:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802234a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802234e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8022352:	4355      	muls	r5, r2
 8022354:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022358:	fb0c f203 	mul.w	r2, ip, r3
 802235c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8022360:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8022364:	441d      	add	r5, r3
 8022366:	f102 0320 	add.w	r3, r2, #32
 802236a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802236e:	0a1b      	lsrs	r3, r3, #8
 8022370:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022374:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022378:	431c      	orrs	r4, r3
 802237a:	1c7b      	adds	r3, r7, #1
 802237c:	f100 811c 	bmi.w	80225b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022380:	429e      	cmp	r6, r3
 8022382:	f340 8119 	ble.w	80225b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022386:	2900      	cmp	r1, #0
 8022388:	f000 8119 	beq.w	80225be <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 802238c:	9a01      	ldr	r2, [sp, #4]
 802238e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022392:	8855      	ldrh	r5, [r2, #2]
 8022394:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022398:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802239c:	fb08 f802 	mul.w	r8, r8, r2
 80223a0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80223a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80223a8:	435d      	muls	r5, r3
 80223aa:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80223ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80223b2:	44d0      	add	r8, sl
 80223b4:	f105 0a20 	add.w	sl, r5, #32
 80223b8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80223bc:	0a2d      	lsrs	r5, r5, #8
 80223be:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80223c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80223c6:	432a      	orrs	r2, r5
 80223c8:	3001      	adds	r0, #1
 80223ca:	f100 80fe 	bmi.w	80225ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80223ce:	4583      	cmp	fp, r0
 80223d0:	f340 80fb 	ble.w	80225ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80223d4:	f1be 0f00 	cmp.w	lr, #0
 80223d8:	f000 80fc 	beq.w	80225d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80223dc:	2f00      	cmp	r7, #0
 80223de:	f2c0 80f1 	blt.w	80225c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80223e2:	42be      	cmp	r6, r7
 80223e4:	f340 80ee 	ble.w	80225c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80223e8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80223ec:	9801      	ldr	r0, [sp, #4]
 80223ee:	f819 5006 	ldrb.w	r5, [r9, r6]
 80223f2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80223f6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80223fa:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80223fe:	fb0a fa00 	mul.w	sl, sl, r0
 8022402:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022406:	fb05 f808 	mul.w	r8, r5, r8
 802240a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802240e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8022412:	4482      	add	sl, r0
 8022414:	f108 0020 	add.w	r0, r8, #32
 8022418:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802241c:	0a00      	lsrs	r0, r0, #8
 802241e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022422:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022426:	ea4b 0b00 	orr.w	fp, fp, r0
 802242a:	3701      	adds	r7, #1
 802242c:	f100 80d7 	bmi.w	80225de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022430:	42be      	cmp	r6, r7
 8022432:	f340 80d4 	ble.w	80225de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022436:	2900      	cmp	r1, #0
 8022438:	f000 80d4 	beq.w	80225e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 802243c:	9801      	ldr	r0, [sp, #4]
 802243e:	3601      	adds	r6, #1
 8022440:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8022444:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022448:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802244c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022450:	fb07 f800 	mul.w	r8, r7, r0
 8022454:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022458:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802245c:	fb09 f906 	mul.w	r9, r9, r6
 8022460:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022464:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022468:	44d1      	add	r9, sl
 802246a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802246e:	f108 0020 	add.w	r0, r8, #32
 8022472:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022476:	0a00      	lsrs	r0, r0, #8
 8022478:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802247c:	4330      	orrs	r0, r6
 802247e:	b28e      	uxth	r6, r1
 8022480:	fa1f f98e 	uxth.w	r9, lr
 8022484:	fb06 f809 	mul.w	r8, r6, r9
 8022488:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802248c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022490:	0136      	lsls	r6, r6, #4
 8022492:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022496:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802249a:	9601      	str	r6, [sp, #4]
 802249c:	ea4a 0404 	orr.w	r4, sl, r4
 80224a0:	fa1f f689 	uxth.w	r6, r9
 80224a4:	9602      	str	r6, [sp, #8]
 80224a6:	4626      	mov	r6, r4
 80224a8:	fb11 f90e 	smulbb	r9, r1, lr
 80224ac:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80224b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80224b4:	f1ce 0410 	rsb	r4, lr, #16
 80224b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80224bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80224c0:	1a64      	subs	r4, r4, r1
 80224c2:	ea4a 0202 	orr.w	r2, sl, r2
 80224c6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80224ca:	434a      	muls	r2, r1
 80224cc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80224d0:	fb04 2406 	mla	r4, r4, r6, r2
 80224d4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80224d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80224dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80224e0:	ea4a 0000 	orr.w	r0, sl, r0
 80224e4:	fb09 4200 	mla	r2, r9, r0, r4
 80224e8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80224ec:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80224f0:	9801      	ldr	r0, [sp, #4]
 80224f2:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80224f6:	ea44 0b0b 	orr.w	fp, r4, fp
 80224fa:	9c02      	ldr	r4, [sp, #8]
 80224fc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022500:	1b00      	subs	r0, r0, r4
 8022502:	9c01      	ldr	r4, [sp, #4]
 8022504:	b280      	uxth	r0, r0
 8022506:	eba4 0608 	sub.w	r6, r4, r8
 802250a:	b2b6      	uxth	r6, r6
 802250c:	4373      	muls	r3, r6
 802250e:	fb0c 3300 	mla	r3, ip, r0, r3
 8022512:	9802      	ldr	r0, [sp, #8]
 8022514:	9903      	ldr	r1, [sp, #12]
 8022516:	fb00 3505 	mla	r5, r0, r5, r3
 802251a:	fb08 5707 	mla	r7, r8, r7, r5
 802251e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8022522:	8809      	ldrh	r1, [r1, #0]
 8022524:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022528:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802252c:	120b      	asrs	r3, r1, #8
 802252e:	b2ff      	uxtb	r7, r7
 8022530:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022534:	437b      	muls	r3, r7
 8022536:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802253a:	10c8      	asrs	r0, r1, #3
 802253c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022540:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022544:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022548:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802254c:	00c9      	lsls	r1, r1, #3
 802254e:	4378      	muls	r0, r7
 8022550:	ea42 0e0e 	orr.w	lr, r2, lr
 8022554:	b2c9      	uxtb	r1, r1
 8022556:	fa1f f28e 	uxth.w	r2, lr
 802255a:	434f      	muls	r7, r1
 802255c:	1c59      	adds	r1, r3, #1
 802255e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022562:	1213      	asrs	r3, r2, #8
 8022564:	f023 0307 	bic.w	r3, r3, #7
 8022568:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802256c:	1c41      	adds	r1, r0, #1
 802256e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022572:	10d1      	asrs	r1, r2, #3
 8022574:	f021 0103 	bic.w	r1, r1, #3
 8022578:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802257c:	021b      	lsls	r3, r3, #8
 802257e:	00c9      	lsls	r1, r1, #3
 8022580:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022584:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022588:	430b      	orrs	r3, r1
 802258a:	1c79      	adds	r1, r7, #1
 802258c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022590:	00d2      	lsls	r2, r2, #3
 8022592:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022596:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802259a:	431a      	orrs	r2, r3
 802259c:	9b03      	ldr	r3, [sp, #12]
 802259e:	801a      	strh	r2, [r3, #0]
 80225a0:	b005      	add	sp, #20
 80225a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a6:	f04f 0c00 	mov.w	ip, #0
 80225aa:	4664      	mov	r4, ip
 80225ac:	e6e5      	b.n	802237a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80225ae:	2300      	movs	r3, #0
 80225b0:	469c      	mov	ip, r3
 80225b2:	461a      	mov	r2, r3
 80225b4:	461c      	mov	r4, r3
 80225b6:	e707      	b.n	80223c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80225b8:	2300      	movs	r3, #0
 80225ba:	461a      	mov	r2, r3
 80225bc:	e704      	b.n	80223c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80225be:	460b      	mov	r3, r1
 80225c0:	460a      	mov	r2, r1
 80225c2:	e701      	b.n	80223c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80225c4:	2500      	movs	r5, #0
 80225c6:	46ab      	mov	fp, r5
 80225c8:	e72f      	b.n	802242a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80225ca:	2700      	movs	r7, #0
 80225cc:	463d      	mov	r5, r7
 80225ce:	4638      	mov	r0, r7
 80225d0:	46bb      	mov	fp, r7
 80225d2:	e754      	b.n	802247e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80225d4:	4677      	mov	r7, lr
 80225d6:	4675      	mov	r5, lr
 80225d8:	4670      	mov	r0, lr
 80225da:	46f3      	mov	fp, lr
 80225dc:	e74f      	b.n	802247e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80225de:	2700      	movs	r7, #0
 80225e0:	4638      	mov	r0, r7
 80225e2:	e74c      	b.n	802247e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80225e4:	460f      	mov	r7, r1
 80225e6:	4608      	mov	r0, r1
 80225e8:	e749      	b.n	802247e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080225ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80225ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225f0:	b093      	sub	sp, #76	; 0x4c
 80225f2:	9210      	str	r2, [sp, #64]	; 0x40
 80225f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80225f6:	9011      	str	r0, [sp, #68]	; 0x44
 80225f8:	6850      	ldr	r0, [r2, #4]
 80225fa:	910e      	str	r1, [sp, #56]	; 0x38
 80225fc:	9306      	str	r3, [sp, #24]
 80225fe:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022602:	fb00 1303 	mla	r3, r0, r3, r1
 8022606:	6812      	ldr	r2, [r2, #0]
 8022608:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802260c:	9307      	str	r3, [sp, #28]
 802260e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	9308      	str	r3, [sp, #32]
 8022614:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022616:	685b      	ldr	r3, [r3, #4]
 8022618:	9309      	str	r3, [sp, #36]	; 0x24
 802261a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802261c:	2b00      	cmp	r3, #0
 802261e:	dc03      	bgt.n	8022628 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022622:	2b00      	cmp	r3, #0
 8022624:	f340 83b4 	ble.w	8022d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022628:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802262a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802262e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022632:	1e48      	subs	r0, r1, #1
 8022634:	1e55      	subs	r5, r2, #1
 8022636:	9b06      	ldr	r3, [sp, #24]
 8022638:	2b00      	cmp	r3, #0
 802263a:	f340 8163 	ble.w	8022904 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802263e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022640:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022642:	1436      	asrs	r6, r6, #16
 8022644:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022648:	d406      	bmi.n	8022658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802264a:	4286      	cmp	r6, r0
 802264c:	da04      	bge.n	8022658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802264e:	2b00      	cmp	r3, #0
 8022650:	db02      	blt.n	8022658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022652:	42ab      	cmp	r3, r5
 8022654:	f2c0 8157 	blt.w	8022906 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022658:	3601      	adds	r6, #1
 802265a:	f100 8144 	bmi.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802265e:	42b1      	cmp	r1, r6
 8022660:	f2c0 8141 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022664:	3301      	adds	r3, #1
 8022666:	f100 813e 	bmi.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802266a:	429a      	cmp	r2, r3
 802266c:	f2c0 813b 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022670:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022674:	9b06      	ldr	r3, [sp, #24]
 8022676:	9f07      	ldr	r7, [sp, #28]
 8022678:	930f      	str	r3, [sp, #60]	; 0x3c
 802267a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802267c:	2b00      	cmp	r3, #0
 802267e:	f340 8164 	ble.w	802294a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022684:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022686:	1418      	asrs	r0, r3, #16
 8022688:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802268a:	142d      	asrs	r5, r5, #16
 802268c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022690:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022692:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022696:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022698:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802269c:	f100 81ee 	bmi.w	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80226a0:	f102 3eff 	add.w	lr, r2, #4294967295
 80226a4:	4575      	cmp	r5, lr
 80226a6:	f280 81e9 	bge.w	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80226aa:	2800      	cmp	r0, #0
 80226ac:	f2c0 81e6 	blt.w	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80226b0:	f103 3eff 	add.w	lr, r3, #4294967295
 80226b4:	4570      	cmp	r0, lr
 80226b6:	f280 81e1 	bge.w	8022a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80226ba:	b212      	sxth	r2, r2
 80226bc:	fb00 5002 	mla	r0, r0, r2, r5
 80226c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226c2:	fa1f fe81 	uxth.w	lr, r1
 80226c6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80226ca:	eb03 0a00 	add.w	sl, r3, r0
 80226ce:	f813 9000 	ldrb.w	r9, [r3, r0]
 80226d2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80226d6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80226da:	b29b      	uxth	r3, r3
 80226dc:	f1bc 0f00 	cmp.w	ip, #0
 80226e0:	f000 8179 	beq.w	80229d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80226e4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80226e8:	eb0a 0b02 	add.w	fp, sl, r2
 80226ec:	fa1f fa8c 	uxth.w	sl, ip
 80226f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80226f4:	eba5 050e 	sub.w	r5, r5, lr
 80226f8:	b2ad      	uxth	r5, r5
 80226fa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80226fe:	fb08 f505 	mul.w	r5, r8, r5
 8022702:	fa1f fa8a 	uxth.w	sl, sl
 8022706:	eba3 030a 	sub.w	r3, r3, sl
 802270a:	b29b      	uxth	r3, r3
 802270c:	940a      	str	r4, [sp, #40]	; 0x28
 802270e:	fb09 5303 	mla	r3, r9, r3, r5
 8022712:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022716:	940b      	str	r4, [sp, #44]	; 0x2c
 8022718:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802271a:	fb0a 3304 	mla	r3, sl, r4, r3
 802271e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022720:	fb0e 3304 	mla	r3, lr, r4, r3
 8022724:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022728:	2b00      	cmp	r3, #0
 802272a:	f000 80cf 	beq.w	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802272e:	9c08      	ldr	r4, [sp, #32]
 8022730:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022734:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022738:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802273c:	f000 8150 	beq.w	80229e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022740:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022744:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022748:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802274c:	fb09 f000 	mul.w	r0, r9, r0
 8022750:	fb0a fe0e 	mul.w	lr, sl, lr
 8022754:	f100 0b20 	add.w	fp, r0, #32
 8022758:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802275c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022760:	44ce      	add	lr, r9
 8022762:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022766:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802276a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802276e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022772:	ea4e 0909 	orr.w	r9, lr, r9
 8022776:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802277a:	8868      	ldrh	r0, [r5, #2]
 802277c:	d019      	beq.n	80227b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802277e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022782:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022786:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802278a:	fb08 f800 	mul.w	r8, r8, r0
 802278e:	fb0a fe0e 	mul.w	lr, sl, lr
 8022792:	f108 0b20 	add.w	fp, r8, #32
 8022796:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802279a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802279e:	4486      	add	lr, r0
 80227a0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80227a4:	0a00      	lsrs	r0, r0, #8
 80227a6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80227aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80227ae:	ea4e 0000 	orr.w	r0, lr, r0
 80227b2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80227b6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80227ba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80227be:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80227c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80227c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80227ca:	ea4e 0909 	orr.w	r9, lr, r9
 80227ce:	ea4a 0000 	orr.w	r0, sl, r0
 80227d2:	f1bc 0f00 	cmp.w	ip, #0
 80227d6:	f000 8105 	beq.w	80229e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80227da:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80227de:	3a01      	subs	r2, #1
 80227e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80227e2:	0052      	lsls	r2, r2, #1
 80227e4:	3202      	adds	r2, #2
 80227e6:	2cff      	cmp	r4, #255	; 0xff
 80227e8:	eb05 0e02 	add.w	lr, r5, r2
 80227ec:	5aaa      	ldrh	r2, [r5, r2]
 80227ee:	d018      	beq.n	8022822 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80227f0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80227f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80227f8:	fb04 fa02 	mul.w	sl, r4, r2
 80227fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022800:	fb08 f805 	mul.w	r8, r8, r5
 8022804:	f10a 0520 	add.w	r5, sl, #32
 8022808:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802280c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022810:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022814:	4442      	add	r2, r8
 8022816:	0a2d      	lsrs	r5, r5, #8
 8022818:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802281c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022820:	432a      	orrs	r2, r5
 8022822:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022824:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022828:	2cff      	cmp	r4, #255	; 0xff
 802282a:	d01a      	beq.n	8022862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802282c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022830:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022834:	fb04 fa05 	mul.w	sl, r4, r5
 8022838:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802283c:	fb08 f80e 	mul.w	r8, r8, lr
 8022840:	f10a 0e20 	add.w	lr, sl, #32
 8022844:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022848:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802284c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022850:	4445      	add	r5, r8
 8022852:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022856:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802285a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802285e:	ea45 050e 	orr.w	r5, r5, lr
 8022862:	fb1c fe01 	smulbb	lr, ip, r1
 8022866:	f1cc 0810 	rsb	r8, ip, #16
 802286a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802286e:	eba8 0801 	sub.w	r8, r8, r1
 8022872:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022876:	4341      	muls	r1, r0
 8022878:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802287c:	fb09 1108 	mla	r1, r9, r8, r1
 8022880:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022884:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022888:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802288c:	ea4a 0202 	orr.w	r2, sl, r2
 8022890:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022894:	fb0c 1102 	mla	r1, ip, r2, r1
 8022898:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802289c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80228a0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80228a4:	ea4b 0505 	orr.w	r5, fp, r5
 80228a8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80228ac:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80228b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80228b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80228bc:	ea42 0e0e 	orr.w	lr, r2, lr
 80228c0:	fa1f f28e 	uxth.w	r2, lr
 80228c4:	2bff      	cmp	r3, #255	; 0xff
 80228c6:	f040 80a1 	bne.w	8022a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80228ca:	803a      	strh	r2, [r7, #0]
 80228cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80228ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80228d0:	3702      	adds	r7, #2
 80228d2:	4413      	add	r3, r2
 80228d4:	931d      	str	r3, [sp, #116]	; 0x74
 80228d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80228d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228da:	441a      	add	r2, r3
 80228dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80228de:	921e      	str	r2, [sp, #120]	; 0x78
 80228e0:	3b01      	subs	r3, #1
 80228e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80228e4:	e6c9      	b.n	802267a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80228e8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80228ea:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80228ec:	4433      	add	r3, r6
 80228ee:	931d      	str	r3, [sp, #116]	; 0x74
 80228f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228f2:	441c      	add	r4, r3
 80228f4:	9b06      	ldr	r3, [sp, #24]
 80228f6:	941e      	str	r4, [sp, #120]	; 0x78
 80228f8:	3b01      	subs	r3, #1
 80228fa:	9306      	str	r3, [sp, #24]
 80228fc:	9b07      	ldr	r3, [sp, #28]
 80228fe:	3302      	adds	r3, #2
 8022900:	9307      	str	r3, [sp, #28]
 8022902:	e698      	b.n	8022636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022904:	d028      	beq.n	8022958 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022906:	9b06      	ldr	r3, [sp, #24]
 8022908:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802290a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802290c:	3b01      	subs	r3, #1
 802290e:	fb00 5003 	mla	r0, r0, r3, r5
 8022912:	1400      	asrs	r0, r0, #16
 8022914:	f53f aeac 	bmi.w	8022670 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022918:	3901      	subs	r1, #1
 802291a:	4288      	cmp	r0, r1
 802291c:	f6bf aea8 	bge.w	8022670 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022920:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022922:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022924:	fb01 0303 	mla	r3, r1, r3, r0
 8022928:	141b      	asrs	r3, r3, #16
 802292a:	f53f aea1 	bmi.w	8022670 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802292e:	3a01      	subs	r2, #1
 8022930:	4293      	cmp	r3, r2
 8022932:	f6bf ae9d 	bge.w	8022670 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022936:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802293a:	9b06      	ldr	r3, [sp, #24]
 802293c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022940:	930f      	str	r3, [sp, #60]	; 0x3c
 8022942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022944:	2b00      	cmp	r3, #0
 8022946:	f300 80b6 	bgt.w	8022ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 802294a:	9b06      	ldr	r3, [sp, #24]
 802294c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022950:	9b07      	ldr	r3, [sp, #28]
 8022952:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022956:	9307      	str	r3, [sp, #28]
 8022958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802295a:	2b00      	cmp	r3, #0
 802295c:	f340 8218 	ble.w	8022d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022964:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022968:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802296c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022970:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022974:	eef0 6a62 	vmov.f32	s13, s5
 8022978:	ee31 1a05 	vadd.f32	s2, s2, s10
 802297c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022980:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022984:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022988:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802298c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8022990:	eef0 6a43 	vmov.f32	s13, s6
 8022994:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022998:	ee12 2a90 	vmov	r2, s5
 802299c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80229aa:	ee13 2a10 	vmov	r2, s6
 80229ae:	931f      	str	r3, [sp, #124]	; 0x7c
 80229b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229b2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80229b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80229ba:	9320      	str	r3, [sp, #128]	; 0x80
 80229bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80229be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229c0:	3b01      	subs	r3, #1
 80229c2:	930e      	str	r3, [sp, #56]	; 0x38
 80229c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229c6:	bf08      	it	eq
 80229c8:	4613      	moveq	r3, r2
 80229ca:	eeb0 3a67 	vmov.f32	s6, s15
 80229ce:	9306      	str	r3, [sp, #24]
 80229d0:	eef0 2a47 	vmov.f32	s5, s14
 80229d4:	e621      	b.n	802261a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80229d6:	fb08 f505 	mul.w	r5, r8, r5
 80229da:	fb09 5303 	mla	r3, r9, r3, r5
 80229de:	e6a1      	b.n	8022724 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80229e0:	4681      	mov	r9, r0
 80229e2:	e6c8      	b.n	8022776 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80229e4:	f1c1 0210 	rsb	r2, r1, #16
 80229e8:	4341      	muls	r1, r0
 80229ea:	fb09 1902 	mla	r9, r9, r2, r1
 80229ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80229f2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80229f6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80229fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80229fe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022a02:	ea42 0909 	orr.w	r9, r2, r9
 8022a06:	fa1f f289 	uxth.w	r2, r9
 8022a0a:	e75b      	b.n	80228c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022a0c:	43db      	mvns	r3, r3
 8022a0e:	f8b7 c000 	ldrh.w	ip, [r7]
 8022a12:	fa5f fe83 	uxtb.w	lr, r3
 8022a16:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022a1a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022a1e:	fb00 f00e 	mul.w	r0, r0, lr
 8022a22:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022a26:	1c41      	adds	r1, r0, #1
 8022a28:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022a2c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022a30:	fb05 f50e 	mul.w	r5, r5, lr
 8022a34:	1211      	asrs	r1, r2, #8
 8022a36:	f021 0107 	bic.w	r1, r1, #7
 8022a3a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022a3e:	48d6      	ldr	r0, [pc, #856]	; (8022d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022a40:	b2c9      	uxtb	r1, r1
 8022a42:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8022a46:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8022a4a:	1c69      	adds	r1, r5, #1
 8022a4c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022a50:	b2db      	uxtb	r3, r3
 8022a52:	10d1      	asrs	r1, r2, #3
 8022a54:	fb03 f30e 	mul.w	r3, r3, lr
 8022a58:	f021 0103 	bic.w	r1, r1, #3
 8022a5c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022a60:	00c9      	lsls	r1, r1, #3
 8022a62:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022a66:	4301      	orrs	r1, r0
 8022a68:	1c58      	adds	r0, r3, #1
 8022a6a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022a6e:	00d2      	lsls	r2, r2, #3
 8022a70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a74:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022a78:	430a      	orrs	r2, r1
 8022a7a:	e726      	b.n	80228ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8022a7c:	f115 0e01 	adds.w	lr, r5, #1
 8022a80:	f53f af24 	bmi.w	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022a84:	4572      	cmp	r2, lr
 8022a86:	f6ff af21 	blt.w	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022a8a:	f110 0e01 	adds.w	lr, r0, #1
 8022a8e:	f53f af1d 	bmi.w	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022a92:	4573      	cmp	r3, lr
 8022a94:	f6ff af1a 	blt.w	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022a98:	b21b      	sxth	r3, r3
 8022a9a:	b212      	sxth	r2, r2
 8022a9c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8022aa0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8022aa4:	9301      	str	r3, [sp, #4]
 8022aa6:	9200      	str	r2, [sp, #0]
 8022aa8:	4639      	mov	r1, r7
 8022aaa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8022aae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ab0:	f7ff fc24 	bl	80222fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022ab4:	e70a      	b.n	80228cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022ab6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022ab8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022abc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022abe:	fa1f fc82 	uxth.w	ip, r2
 8022ac2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022ac6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ac8:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022acc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022ad2:	141f      	asrs	r7, r3, #16
 8022ad4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022ad6:	141b      	asrs	r3, r3, #16
 8022ad8:	fb01 3707 	mla	r7, r1, r7, r3
 8022adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ade:	eb03 0a07 	add.w	sl, r3, r7
 8022ae2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022ae6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022aea:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022aee:	b29b      	uxth	r3, r3
 8022af0:	2d00      	cmp	r5, #0
 8022af2:	f000 80fe 	beq.w	8022cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022af6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022afa:	eb0a 0b01 	add.w	fp, sl, r1
 8022afe:	fa1f fa85 	uxth.w	sl, r5
 8022b02:	fb0a fc0c 	mul.w	ip, sl, ip
 8022b06:	eba0 000c 	sub.w	r0, r0, ip
 8022b0a:	b280      	uxth	r0, r0
 8022b0c:	fb08 f000 	mul.w	r0, r8, r0
 8022b10:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022b14:	fa1f fa8a 	uxth.w	sl, sl
 8022b18:	eba3 030a 	sub.w	r3, r3, sl
 8022b1c:	b29b      	uxth	r3, r3
 8022b1e:	fb09 0303 	mla	r3, r9, r3, r0
 8022b22:	940c      	str	r4, [sp, #48]	; 0x30
 8022b24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b26:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022b2a:	fb0a 3300 	mla	r3, sl, r0, r3
 8022b2e:	fb0c 3304 	mla	r3, ip, r4, r3
 8022b32:	940d      	str	r4, [sp, #52]	; 0x34
 8022b34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	f000 80cc 	beq.w	8022cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022b3e:	9808      	ldr	r0, [sp, #32]
 8022b40:	9c08      	ldr	r4, [sp, #32]
 8022b42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b46:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022b4a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022b4e:	f000 80d5 	beq.w	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8022b52:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022b56:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022b5a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022b5e:	fb09 f707 	mul.w	r7, r9, r7
 8022b62:	fb0a fc0c 	mul.w	ip, sl, ip
 8022b66:	f107 0b20 	add.w	fp, r7, #32
 8022b6a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022b6e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022b72:	44cc      	add	ip, r9
 8022b74:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022b78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b7c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022b80:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022b84:	ea4c 0909 	orr.w	r9, ip, r9
 8022b88:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b8c:	8847      	ldrh	r7, [r0, #2]
 8022b8e:	d019      	beq.n	8022bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8022b90:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022b94:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022b98:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022b9c:	fb08 f807 	mul.w	r8, r8, r7
 8022ba0:	fb0a fc0c 	mul.w	ip, sl, ip
 8022ba4:	f108 0b20 	add.w	fp, r8, #32
 8022ba8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022bac:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022bb0:	44bc      	add	ip, r7
 8022bb2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022bb6:	0a3f      	lsrs	r7, r7, #8
 8022bb8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022bbc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022bc0:	ea4c 0707 	orr.w	r7, ip, r7
 8022bc4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022bc8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022bcc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022bd0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022bd4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022bd8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022bdc:	ea4c 0909 	orr.w	r9, ip, r9
 8022be0:	ea4a 0707 	orr.w	r7, sl, r7
 8022be4:	2d00      	cmp	r5, #0
 8022be6:	f000 808b 	beq.w	8022d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8022bea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022bee:	3901      	subs	r1, #1
 8022bf0:	0049      	lsls	r1, r1, #1
 8022bf2:	3102      	adds	r1, #2
 8022bf4:	eb00 0c01 	add.w	ip, r0, r1
 8022bf8:	5a41      	ldrh	r1, [r0, r1]
 8022bfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022bfc:	28ff      	cmp	r0, #255	; 0xff
 8022bfe:	d019      	beq.n	8022c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8022c00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022c02:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022c06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022c0a:	fb04 fa01 	mul.w	sl, r4, r1
 8022c0e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022c12:	fb08 f800 	mul.w	r8, r8, r0
 8022c16:	f10a 0020 	add.w	r0, sl, #32
 8022c1a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022c1e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022c22:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022c26:	4441      	add	r1, r8
 8022c28:	0a00      	lsrs	r0, r0, #8
 8022c2a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022c2e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022c32:	4301      	orrs	r1, r0
 8022c34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022c36:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022c3a:	2cff      	cmp	r4, #255	; 0xff
 8022c3c:	d01a      	beq.n	8022c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8022c3e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022c42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022c46:	fb04 fa00 	mul.w	sl, r4, r0
 8022c4a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022c4e:	fb08 f80c 	mul.w	r8, r8, ip
 8022c52:	f10a 0c20 	add.w	ip, sl, #32
 8022c56:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022c5a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022c5e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022c62:	4440      	add	r0, r8
 8022c64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c68:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022c6c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022c70:	ea40 000c 	orr.w	r0, r0, ip
 8022c74:	fb15 fc02 	smulbb	ip, r5, r2
 8022c78:	f1c5 0810 	rsb	r8, r5, #16
 8022c7c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022c80:	eba8 0802 	sub.w	r8, r8, r2
 8022c84:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022c88:	437a      	muls	r2, r7
 8022c8a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022c8e:	fb09 2208 	mla	r2, r9, r8, r2
 8022c92:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022c96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022c9a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022c9e:	ea4a 0101 	orr.w	r1, sl, r1
 8022ca2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022ca6:	fb05 2201 	mla	r2, r5, r1, r2
 8022caa:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022cae:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022cb2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022cb6:	ea4b 0000 	orr.w	r0, fp, r0
 8022cba:	fb0c 2200 	mla	r2, ip, r0, r2
 8022cbe:	0d57      	lsrs	r7, r2, #21
 8022cc0:	0952      	lsrs	r2, r2, #5
 8022cc2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022cc6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022cca:	433a      	orrs	r2, r7
 8022ccc:	2bff      	cmp	r3, #255	; 0xff
 8022cce:	b292      	uxth	r2, r2
 8022cd0:	d127      	bne.n	8022d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8022cd2:	f8ae 2000 	strh.w	r2, [lr]
 8022cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022cd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022cda:	f10e 0e02 	add.w	lr, lr, #2
 8022cde:	4413      	add	r3, r2
 8022ce0:	931d      	str	r3, [sp, #116]	; 0x74
 8022ce2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022ce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ce6:	441a      	add	r2, r3
 8022ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022cea:	921e      	str	r2, [sp, #120]	; 0x78
 8022cec:	3b01      	subs	r3, #1
 8022cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cf0:	e627      	b.n	8022942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022cf2:	fb08 f000 	mul.w	r0, r8, r0
 8022cf6:	fb09 0303 	mla	r3, r9, r3, r0
 8022cfa:	e71b      	b.n	8022b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8022cfc:	46b9      	mov	r9, r7
 8022cfe:	e743      	b.n	8022b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8022d00:	f1c2 0110 	rsb	r1, r2, #16
 8022d04:	437a      	muls	r2, r7
 8022d06:	fb09 2901 	mla	r9, r9, r1, r2
 8022d0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022d0e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022d12:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022d16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d1e:	4302      	orrs	r2, r0
 8022d20:	e7d4      	b.n	8022ccc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022d22:	43db      	mvns	r3, r3
 8022d24:	f8be 7000 	ldrh.w	r7, [lr]
 8022d28:	fa5f fc83 	uxtb.w	ip, r3
 8022d2c:	1238      	asrs	r0, r7, #8
 8022d2e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022d32:	fb00 f00c 	mul.w	r0, r0, ip
 8022d36:	10fd      	asrs	r5, r7, #3
 8022d38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022d3c:	fb05 f10c 	mul.w	r1, r5, ip
 8022d40:	1c45      	adds	r5, r0, #1
 8022d42:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022d46:	1215      	asrs	r5, r2, #8
 8022d48:	f025 0507 	bic.w	r5, r5, #7
 8022d4c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022d50:	00fb      	lsls	r3, r7, #3
 8022d52:	1c4d      	adds	r5, r1, #1
 8022d54:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8022d58:	b2db      	uxtb	r3, r3
 8022d5a:	10d1      	asrs	r1, r2, #3
 8022d5c:	fb03 f30c 	mul.w	r3, r3, ip
 8022d60:	f021 0103 	bic.w	r1, r1, #3
 8022d64:	4c0c      	ldr	r4, [pc, #48]	; (8022d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8022d66:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022d6a:	b2c0      	uxtb	r0, r0
 8022d6c:	00c9      	lsls	r1, r1, #3
 8022d6e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d72:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8022d76:	4308      	orrs	r0, r1
 8022d78:	1c59      	adds	r1, r3, #1
 8022d7a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022d7e:	00d2      	lsls	r2, r2, #3
 8022d80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d84:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8022d88:	4318      	orrs	r0, r3
 8022d8a:	f8ae 0000 	strh.w	r0, [lr]
 8022d8e:	e7a2      	b.n	8022cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8022d90:	b013      	add	sp, #76	; 0x4c
 8022d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d96:	bf00      	nop
 8022d98:	fffff800 	.word	0xfffff800

08022d9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8022d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022da0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8022da4:	fb05 4c03 	mla	ip, r5, r3, r4
 8022da8:	2d00      	cmp	r5, #0
 8022daa:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8022dae:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8022db2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022db6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8022dba:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8022dbe:	8808      	ldrh	r0, [r1, #0]
 8022dc0:	f2c0 80a7 	blt.w	8022f12 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022dc4:	45aa      	cmp	sl, r5
 8022dc6:	f340 80a4 	ble.w	8022f12 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8022dca:	2c00      	cmp	r4, #0
 8022dcc:	f2c0 809f 	blt.w	8022f0e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022dd0:	42a3      	cmp	r3, r4
 8022dd2:	f340 809c 	ble.w	8022f0e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8022dd6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8022dda:	1c62      	adds	r2, r4, #1
 8022ddc:	f100 809c 	bmi.w	8022f18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022de0:	4293      	cmp	r3, r2
 8022de2:	f340 8099 	ble.w	8022f18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022de6:	f1b9 0f00 	cmp.w	r9, #0
 8022dea:	f000 8095 	beq.w	8022f18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8022dee:	f8be c002 	ldrh.w	ip, [lr, #2]
 8022df2:	3501      	adds	r5, #1
 8022df4:	f100 8094 	bmi.w	8022f20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022df8:	45aa      	cmp	sl, r5
 8022dfa:	f340 8091 	ble.w	8022f20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022dfe:	2f00      	cmp	r7, #0
 8022e00:	f000 808e 	beq.w	8022f20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8022e04:	2c00      	cmp	r4, #0
 8022e06:	f2c0 8089 	blt.w	8022f1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022e0a:	42a3      	cmp	r3, r4
 8022e0c:	f340 8086 	ble.w	8022f1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8022e10:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8022e14:	3401      	adds	r4, #1
 8022e16:	f100 8086 	bmi.w	8022f26 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022e1a:	42a3      	cmp	r3, r4
 8022e1c:	f340 8083 	ble.w	8022f26 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022e20:	f1b9 0f00 	cmp.w	r9, #0
 8022e24:	d07f      	beq.n	8022f26 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8022e26:	3301      	adds	r3, #1
 8022e28:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8022e2c:	fb19 fe07 	smulbb	lr, r9, r7
 8022e30:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022e34:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022e38:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022e3c:	ea44 0808 	orr.w	r8, r4, r8
 8022e40:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022e44:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022e48:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022e4c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022e50:	ea44 0c0c 	orr.w	ip, r4, ip
 8022e54:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022e58:	fb04 f40c 	mul.w	r4, r4, ip
 8022e5c:	f1c7 0210 	rsb	r2, r7, #16
 8022e60:	eba2 0209 	sub.w	r2, r2, r9
 8022e64:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022e68:	fb02 4808 	mla	r8, r2, r8, r4
 8022e6c:	b2b4      	uxth	r4, r6
 8022e6e:	43f6      	mvns	r6, r6
 8022e70:	041a      	lsls	r2, r3, #16
 8022e72:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e76:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e7a:	4313      	orrs	r3, r2
 8022e7c:	fb0e 8303 	mla	r3, lr, r3, r8
 8022e80:	042a      	lsls	r2, r5, #16
 8022e82:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e86:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022e8a:	432a      	orrs	r2, r5
 8022e8c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022e90:	fb07 3202 	mla	r2, r7, r2, r3
 8022e94:	0d53      	lsrs	r3, r2, #21
 8022e96:	0952      	lsrs	r2, r2, #5
 8022e98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e9c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ea0:	431a      	orrs	r2, r3
 8022ea2:	b293      	uxth	r3, r2
 8022ea4:	1202      	asrs	r2, r0, #8
 8022ea6:	b2f6      	uxtb	r6, r6
 8022ea8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022eac:	fb12 f206 	smulbb	r2, r2, r6
 8022eb0:	10c7      	asrs	r7, r0, #3
 8022eb2:	00c0      	lsls	r0, r0, #3
 8022eb4:	b2c0      	uxtb	r0, r0
 8022eb6:	121d      	asrs	r5, r3, #8
 8022eb8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022ebc:	fb10 f006 	smulbb	r0, r0, r6
 8022ec0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022ec4:	fb17 f706 	smulbb	r7, r7, r6
 8022ec8:	fb05 2504 	mla	r5, r5, r4, r2
 8022ecc:	10da      	asrs	r2, r3, #3
 8022ece:	00db      	lsls	r3, r3, #3
 8022ed0:	b2db      	uxtb	r3, r3
 8022ed2:	fb03 0004 	mla	r0, r3, r4, r0
 8022ed6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022eda:	fb02 7204 	mla	r2, r2, r4, r7
 8022ede:	b2ad      	uxth	r5, r5
 8022ee0:	b280      	uxth	r0, r0
 8022ee2:	1c6b      	adds	r3, r5, #1
 8022ee4:	b292      	uxth	r2, r2
 8022ee6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022eea:	1c43      	adds	r3, r0, #1
 8022eec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022ef0:	1c50      	adds	r0, r2, #1
 8022ef2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022ef6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022efa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022efe:	0952      	lsrs	r2, r2, #5
 8022f00:	432b      	orrs	r3, r5
 8022f02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f06:	4313      	orrs	r3, r2
 8022f08:	800b      	strh	r3, [r1, #0]
 8022f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f0e:	4680      	mov	r8, r0
 8022f10:	e763      	b.n	8022dda <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8022f12:	4684      	mov	ip, r0
 8022f14:	4680      	mov	r8, r0
 8022f16:	e76c      	b.n	8022df2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022f18:	4684      	mov	ip, r0
 8022f1a:	e76a      	b.n	8022df2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8022f1c:	4605      	mov	r5, r0
 8022f1e:	e779      	b.n	8022e14 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8022f20:	4603      	mov	r3, r0
 8022f22:	4605      	mov	r5, r0
 8022f24:	e782      	b.n	8022e2c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8022f26:	4603      	mov	r3, r0
 8022f28:	e780      	b.n	8022e2c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08022f2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f2e:	b093      	sub	sp, #76	; 0x4c
 8022f30:	461d      	mov	r5, r3
 8022f32:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022f38:	910a      	str	r1, [sp, #40]	; 0x28
 8022f3a:	9210      	str	r2, [sp, #64]	; 0x40
 8022f3c:	6859      	ldr	r1, [r3, #4]
 8022f3e:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	920b      	str	r2, [sp, #44]	; 0x2c
 8022f46:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8022f4a:	fb01 2707 	mla	r7, r1, r7, r2
 8022f4e:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8022f52:	9307      	str	r3, [sp, #28]
 8022f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022f56:	9011      	str	r0, [sp, #68]	; 0x44
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8022f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f5e:	43db      	mvns	r3, r3
 8022f60:	b2db      	uxtb	r3, r3
 8022f62:	9308      	str	r3, [sp, #32]
 8022f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	dc03      	bgt.n	8022f72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022f6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	f340 8203 	ble.w	8023378 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022f74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f7c:	1e48      	subs	r0, r1, #1
 8022f7e:	f102 3cff 	add.w	ip, r2, #4294967295
 8022f82:	2d00      	cmp	r5, #0
 8022f84:	f340 80da 	ble.w	802313c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8022f88:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022f8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f90:	d406      	bmi.n	8022fa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f92:	4586      	cmp	lr, r0
 8022f94:	da04      	bge.n	8022fa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	db02      	blt.n	8022fa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022f9a:	4563      	cmp	r3, ip
 8022f9c:	f2c0 80cf 	blt.w	802313e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022fa0:	f11e 0e01 	adds.w	lr, lr, #1
 8022fa4:	f100 80c1 	bmi.w	802312a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022fa8:	4571      	cmp	r1, lr
 8022faa:	f2c0 80be 	blt.w	802312a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022fae:	3301      	adds	r3, #1
 8022fb0:	f100 80bb 	bmi.w	802312a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022fb4:	429a      	cmp	r2, r3
 8022fb6:	f2c0 80b8 	blt.w	802312a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022fba:	46a9      	mov	r9, r5
 8022fbc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022fc0:	f1b9 0f00 	cmp.w	r9, #0
 8022fc4:	f340 80d8 	ble.w	8023178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022fca:	1421      	asrs	r1, r4, #16
 8022fcc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022fd0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022fd4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022fd8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022fdc:	f100 8111 	bmi.w	8023202 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022fe0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022fe4:	4551      	cmp	r1, sl
 8022fe6:	f280 810c 	bge.w	8023202 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022fea:	2800      	cmp	r0, #0
 8022fec:	f2c0 8109 	blt.w	8023202 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022ff0:	f103 3aff 	add.w	sl, r3, #4294967295
 8022ff4:	4550      	cmp	r0, sl
 8022ff6:	f280 8104 	bge.w	8023202 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022ffa:	fa0f f38e 	sxth.w	r3, lr
 8022ffe:	fb00 1103 	mla	r1, r0, r3, r1
 8023002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023004:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023008:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802300c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8023010:	f1bc 0f00 	cmp.w	ip, #0
 8023014:	d007      	beq.n	8023026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8023016:	005b      	lsls	r3, r3, #1
 8023018:	eb0a 0003 	add.w	r0, sl, r3
 802301c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8023020:	930c      	str	r3, [sp, #48]	; 0x30
 8023022:	8843      	ldrh	r3, [r0, #2]
 8023024:	930d      	str	r3, [sp, #52]	; 0x34
 8023026:	fb12 f30c 	smulbb	r3, r2, ip
 802302a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802302e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023032:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023036:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802303a:	10db      	asrs	r3, r3, #3
 802303c:	ea40 000e 	orr.w	r0, r0, lr
 8023040:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023044:	f1cc 0e10 	rsb	lr, ip, #16
 8023048:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802304c:	ebae 0e02 	sub.w	lr, lr, r2
 8023050:	ea4a 0101 	orr.w	r1, sl, r1
 8023054:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023058:	4351      	muls	r1, r2
 802305a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802305e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023060:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023064:	0410      	lsls	r0, r2, #16
 8023066:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802306a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802306e:	4310      	orrs	r0, r2
 8023070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023072:	fb03 e000 	mla	r0, r3, r0, lr
 8023076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023078:	0412      	lsls	r2, r2, #16
 802307a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802307e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023082:	ea42 020e 	orr.w	r2, r2, lr
 8023086:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802308a:	fb03 0302 	mla	r3, r3, r2, r0
 802308e:	f8b8 0000 	ldrh.w	r0, [r8]
 8023092:	9f08      	ldr	r7, [sp, #32]
 8023094:	0d5a      	lsrs	r2, r3, #21
 8023096:	1201      	asrs	r1, r0, #8
 8023098:	095b      	lsrs	r3, r3, #5
 802309a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802309e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80230a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80230a6:	4313      	orrs	r3, r2
 80230a8:	fb11 f107 	smulbb	r1, r1, r7
 80230ac:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80230b0:	00c0      	lsls	r0, r0, #3
 80230b2:	b29b      	uxth	r3, r3
 80230b4:	b2c0      	uxtb	r0, r0
 80230b6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80230ba:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80230be:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80230c2:	fb10 f007 	smulbb	r0, r0, r7
 80230c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80230ca:	fb1e fe07 	smulbb	lr, lr, r7
 80230ce:	fb0c 1c02 	mla	ip, ip, r2, r1
 80230d2:	10d9      	asrs	r1, r3, #3
 80230d4:	00db      	lsls	r3, r3, #3
 80230d6:	b2db      	uxtb	r3, r3
 80230d8:	fb03 0302 	mla	r3, r3, r2, r0
 80230dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80230e0:	fb01 e102 	mla	r1, r1, r2, lr
 80230e4:	fa1f fc8c 	uxth.w	ip, ip
 80230e8:	b29a      	uxth	r2, r3
 80230ea:	f10c 0301 	add.w	r3, ip, #1
 80230ee:	b289      	uxth	r1, r1
 80230f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80230f4:	1c53      	adds	r3, r2, #1
 80230f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80230fa:	1c4a      	adds	r2, r1, #1
 80230fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023100:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023104:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023108:	0949      	lsrs	r1, r1, #5
 802310a:	ea43 030c 	orr.w	r3, r3, ip
 802310e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023112:	430b      	orrs	r3, r1
 8023114:	f8a8 3000 	strh.w	r3, [r8]
 8023118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802311a:	f108 0802 	add.w	r8, r8, #2
 802311e:	441c      	add	r4, r3
 8023120:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023122:	f109 39ff 	add.w	r9, r9, #4294967295
 8023126:	441e      	add	r6, r3
 8023128:	e74a      	b.n	8022fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802312a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802312c:	3d01      	subs	r5, #1
 802312e:	441c      	add	r4, r3
 8023130:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023132:	441e      	add	r6, r3
 8023134:	9b07      	ldr	r3, [sp, #28]
 8023136:	3302      	adds	r3, #2
 8023138:	9307      	str	r3, [sp, #28]
 802313a:	e722      	b.n	8022f82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802313c:	d022      	beq.n	8023184 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802313e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023140:	1e6b      	subs	r3, r5, #1
 8023142:	fb00 4003 	mla	r0, r0, r3, r4
 8023146:	1400      	asrs	r0, r0, #16
 8023148:	f53f af37 	bmi.w	8022fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802314c:	3901      	subs	r1, #1
 802314e:	4288      	cmp	r0, r1
 8023150:	f6bf af33 	bge.w	8022fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023154:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023156:	fb01 6303 	mla	r3, r1, r3, r6
 802315a:	141b      	asrs	r3, r3, #16
 802315c:	f53f af2d 	bmi.w	8022fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023160:	3a01      	subs	r2, #1
 8023162:	4293      	cmp	r3, r2
 8023164:	f6bf af29 	bge.w	8022fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023168:	46a8      	mov	r8, r5
 802316a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802316e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023172:	f1b8 0f00 	cmp.w	r8, #0
 8023176:	dc5e      	bgt.n	8023236 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023178:	9b07      	ldr	r3, [sp, #28]
 802317a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802317e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023182:	9307      	str	r3, [sp, #28]
 8023184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023186:	2b00      	cmp	r3, #0
 8023188:	f340 80f6 	ble.w	8023378 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802318c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023190:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023194:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023198:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802319c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231a0:	eef0 6a62 	vmov.f32	s13, s5
 80231a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231b8:	ee16 4a90 	vmov	r4, s13
 80231bc:	eef0 6a43 	vmov.f32	s13, s6
 80231c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231c4:	ee12 2a90 	vmov	r2, s5
 80231c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80231cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80231ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80231d6:	ee13 2a10 	vmov	r2, s6
 80231da:	931f      	str	r3, [sp, #124]	; 0x7c
 80231dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80231de:	ee16 6a90 	vmov	r6, s13
 80231e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80231e6:	9320      	str	r3, [sp, #128]	; 0x80
 80231e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80231ec:	3b01      	subs	r3, #1
 80231ee:	930a      	str	r3, [sp, #40]	; 0x28
 80231f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80231f2:	bf0c      	ite	eq
 80231f4:	4615      	moveq	r5, r2
 80231f6:	461d      	movne	r5, r3
 80231f8:	eeb0 3a67 	vmov.f32	s6, s15
 80231fc:	eef0 2a47 	vmov.f32	s5, s14
 8023200:	e6b0      	b.n	8022f64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023202:	f111 0a01 	adds.w	sl, r1, #1
 8023206:	d487      	bmi.n	8023118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023208:	45d6      	cmp	lr, sl
 802320a:	db85      	blt.n	8023118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802320c:	f110 0a01 	adds.w	sl, r0, #1
 8023210:	d482      	bmi.n	8023118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023212:	4553      	cmp	r3, sl
 8023214:	db80      	blt.n	8023118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023216:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023218:	b21b      	sxth	r3, r3
 802321a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802321e:	9101      	str	r1, [sp, #4]
 8023220:	9300      	str	r3, [sp, #0]
 8023222:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023226:	fa0f f38e 	sxth.w	r3, lr
 802322a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802322c:	4641      	mov	r1, r8
 802322e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023230:	f7ff fdb4 	bl	8022d9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023234:	e770      	b.n	8023118 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023238:	1430      	asrs	r0, r6, #16
 802323a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802323e:	1423      	asrs	r3, r4, #16
 8023240:	fb01 3000 	mla	r0, r1, r0, r3
 8023244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023246:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023248:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802324c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023250:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8023254:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023258:	8858      	ldrh	r0, [r3, #2]
 802325a:	f1be 0f00 	cmp.w	lr, #0
 802325e:	d00b      	beq.n	8023278 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8023260:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023264:	3901      	subs	r1, #1
 8023266:	0049      	lsls	r1, r1, #1
 8023268:	3102      	adds	r1, #2
 802326a:	eb03 0b01 	add.w	fp, r3, r1
 802326e:	5a5b      	ldrh	r3, [r3, r1]
 8023270:	930e      	str	r3, [sp, #56]	; 0x38
 8023272:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023276:	930f      	str	r3, [sp, #60]	; 0x3c
 8023278:	fb12 f30e 	smulbb	r3, r2, lr
 802327c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8023280:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023284:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023288:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802328c:	10db      	asrs	r3, r3, #3
 802328e:	ea41 010c 	orr.w	r1, r1, ip
 8023292:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023296:	f1ce 0c10 	rsb	ip, lr, #16
 802329a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802329e:	ebac 0c02 	sub.w	ip, ip, r2
 80232a2:	ea4b 0000 	orr.w	r0, fp, r0
 80232a6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80232aa:	4350      	muls	r0, r2
 80232ac:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80232b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80232b2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80232b6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80232ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80232be:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80232c2:	ea4b 0101 	orr.w	r1, fp, r1
 80232c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80232c8:	fb03 c101 	mla	r1, r3, r1, ip
 80232cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80232ce:	0412      	lsls	r2, r2, #16
 80232d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232d4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80232d8:	4302      	orrs	r2, r0
 80232da:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80232de:	fb03 1202 	mla	r2, r3, r2, r1
 80232e2:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80232e6:	0952      	lsrs	r2, r2, #5
 80232e8:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80232ec:	f8b9 2000 	ldrh.w	r2, [r9]
 80232f0:	9f08      	ldr	r7, [sp, #32]
 80232f2:	1211      	asrs	r1, r2, #8
 80232f4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80232f8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80232fc:	fb11 f107 	smulbb	r1, r1, r7
 8023300:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023304:	ea4b 0303 	orr.w	r3, fp, r3
 8023308:	00d2      	lsls	r2, r2, #3
 802330a:	b29b      	uxth	r3, r3
 802330c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023310:	b2d2      	uxtb	r2, r2
 8023312:	1218      	asrs	r0, r3, #8
 8023314:	fb1c fc07 	smulbb	ip, ip, r7
 8023318:	fb12 f207 	smulbb	r2, r2, r7
 802331c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023320:	fb00 100a 	mla	r0, r0, sl, r1
 8023324:	10d9      	asrs	r1, r3, #3
 8023326:	00db      	lsls	r3, r3, #3
 8023328:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802332c:	b2db      	uxtb	r3, r3
 802332e:	fb01 c10a 	mla	r1, r1, sl, ip
 8023332:	fb03 230a 	mla	r3, r3, sl, r2
 8023336:	b280      	uxth	r0, r0
 8023338:	b29b      	uxth	r3, r3
 802333a:	b289      	uxth	r1, r1
 802333c:	1c42      	adds	r2, r0, #1
 802333e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023342:	f101 0c01 	add.w	ip, r1, #1
 8023346:	1c5a      	adds	r2, r3, #1
 8023348:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802334c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023350:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023352:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023356:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802335a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802335e:	4310      	orrs	r0, r2
 8023360:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023364:	441c      	add	r4, r3
 8023366:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023368:	ea40 000c 	orr.w	r0, r0, ip
 802336c:	f829 0b02 	strh.w	r0, [r9], #2
 8023370:	441e      	add	r6, r3
 8023372:	f108 38ff 	add.w	r8, r8, #4294967295
 8023376:	e6fc      	b.n	8023172 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023378:	b013      	add	sp, #76	; 0x4c
 802337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802337e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802337e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023382:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023386:	fb0e 4703 	mla	r7, lr, r3, r4
 802338a:	f1be 0f00 	cmp.w	lr, #0
 802338e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023392:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023396:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802339a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802339e:	8808      	ldrh	r0, [r1, #0]
 80233a0:	db60      	blt.n	8023464 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80233a2:	45f1      	cmp	r9, lr
 80233a4:	dd5e      	ble.n	8023464 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80233a6:	2c00      	cmp	r4, #0
 80233a8:	db5a      	blt.n	8023460 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80233aa:	42a3      	cmp	r3, r4
 80233ac:	dd58      	ble.n	8023460 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80233ae:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80233b2:	1c62      	adds	r2, r4, #1
 80233b4:	d459      	bmi.n	802346a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80233b6:	4293      	cmp	r3, r2
 80233b8:	dd57      	ble.n	802346a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80233ba:	2d00      	cmp	r5, #0
 80233bc:	d055      	beq.n	802346a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80233be:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80233c2:	f11e 0e01 	adds.w	lr, lr, #1
 80233c6:	d454      	bmi.n	8023472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80233c8:	45f1      	cmp	r9, lr
 80233ca:	dd52      	ble.n	8023472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80233cc:	2e00      	cmp	r6, #0
 80233ce:	d050      	beq.n	8023472 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80233d0:	2c00      	cmp	r4, #0
 80233d2:	db4c      	blt.n	802346e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80233d4:	42a3      	cmp	r3, r4
 80233d6:	dd4a      	ble.n	802346e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80233d8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80233dc:	3401      	adds	r4, #1
 80233de:	d405      	bmi.n	80233ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80233e0:	42a3      	cmp	r3, r4
 80233e2:	dd03      	ble.n	80233ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80233e4:	b115      	cbz	r5, 80233ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80233e6:	3301      	adds	r3, #1
 80233e8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80233ec:	fb15 f406 	smulbb	r4, r5, r6
 80233f0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80233f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80233f8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80233fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023400:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023404:	ea43 0c0c 	orr.w	ip, r3, ip
 8023408:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802340c:	f1c6 0310 	rsb	r3, r6, #16
 8023410:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023414:	1b5b      	subs	r3, r3, r5
 8023416:	ea4e 0707 	orr.w	r7, lr, r7
 802341a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802341e:	437d      	muls	r5, r7
 8023420:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023424:	fb03 5c0c 	mla	ip, r3, ip, r5
 8023428:	0403      	lsls	r3, r0, #16
 802342a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802342e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023432:	4318      	orrs	r0, r3
 8023434:	fb04 c000 	mla	r0, r4, r0, ip
 8023438:	0413      	lsls	r3, r2, #16
 802343a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802343e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023442:	4313      	orrs	r3, r2
 8023444:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8023448:	fb06 0003 	mla	r0, r6, r3, r0
 802344c:	0d43      	lsrs	r3, r0, #21
 802344e:	0940      	lsrs	r0, r0, #5
 8023450:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023454:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023458:	4318      	orrs	r0, r3
 802345a:	8008      	strh	r0, [r1, #0]
 802345c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023460:	4684      	mov	ip, r0
 8023462:	e7a6      	b.n	80233b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023464:	4607      	mov	r7, r0
 8023466:	4684      	mov	ip, r0
 8023468:	e7ab      	b.n	80233c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802346a:	4607      	mov	r7, r0
 802346c:	e7a9      	b.n	80233c2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802346e:	4602      	mov	r2, r0
 8023470:	e7b4      	b.n	80233dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8023472:	4602      	mov	r2, r0
 8023474:	e7ba      	b.n	80233ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08023476 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802347a:	b08f      	sub	sp, #60	; 0x3c
 802347c:	461d      	mov	r5, r3
 802347e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8023482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023484:	9107      	str	r1, [sp, #28]
 8023486:	6859      	ldr	r1, [r3, #4]
 8023488:	920c      	str	r2, [sp, #48]	; 0x30
 802348a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802348e:	fb01 2707 	mla	r7, r1, r7, r2
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	900d      	str	r0, [sp, #52]	; 0x34
 8023496:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802349a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802349c:	f8d3 8000 	ldr.w	r8, [r3]
 80234a0:	9b07      	ldr	r3, [sp, #28]
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	dc03      	bgt.n	80234ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80234a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	f340 8181 	ble.w	80237b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80234ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80234b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80234b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80234b8:	1e48      	subs	r0, r1, #1
 80234ba:	f102 3cff 	add.w	ip, r2, #4294967295
 80234be:	2d00      	cmp	r5, #0
 80234c0:	f340 809b 	ble.w	80235fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80234c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80234c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80234cc:	d406      	bmi.n	80234dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80234ce:	4586      	cmp	lr, r0
 80234d0:	da04      	bge.n	80234dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80234d2:	2b00      	cmp	r3, #0
 80234d4:	db02      	blt.n	80234dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80234d6:	4563      	cmp	r3, ip
 80234d8:	f2c0 8090 	blt.w	80235fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234dc:	f11e 0e01 	adds.w	lr, lr, #1
 80234e0:	f100 8084 	bmi.w	80235ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80234e4:	4571      	cmp	r1, lr
 80234e6:	f2c0 8081 	blt.w	80235ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80234ea:	3301      	adds	r3, #1
 80234ec:	d47e      	bmi.n	80235ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80234ee:	429a      	cmp	r2, r3
 80234f0:	db7c      	blt.n	80235ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80234f2:	46aa      	mov	sl, r5
 80234f4:	46b9      	mov	r9, r7
 80234f6:	f1ba 0f00 	cmp.w	sl, #0
 80234fa:	f340 8099 	ble.w	8023630 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80234fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023500:	1421      	asrs	r1, r4, #16
 8023502:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023506:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802350a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802350e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023512:	f100 80d0 	bmi.w	80236b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023516:	f10e 3bff 	add.w	fp, lr, #4294967295
 802351a:	4559      	cmp	r1, fp
 802351c:	f280 80cb 	bge.w	80236b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023520:	2800      	cmp	r0, #0
 8023522:	f2c0 80c8 	blt.w	80236b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023526:	f103 3bff 	add.w	fp, r3, #4294967295
 802352a:	4558      	cmp	r0, fp
 802352c:	f280 80c3 	bge.w	80236b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023530:	fa0f fe8e 	sxth.w	lr, lr
 8023534:	fb00 110e 	mla	r1, r0, lr, r1
 8023538:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802353c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8023540:	8841      	ldrh	r1, [r0, #2]
 8023542:	f1bc 0f00 	cmp.w	ip, #0
 8023546:	d00b      	beq.n	8023560 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8023548:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802354c:	3b01      	subs	r3, #1
 802354e:	005b      	lsls	r3, r3, #1
 8023550:	3302      	adds	r3, #2
 8023552:	eb00 0e03 	add.w	lr, r0, r3
 8023556:	5ac3      	ldrh	r3, [r0, r3]
 8023558:	9308      	str	r3, [sp, #32]
 802355a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802355e:	9309      	str	r3, [sp, #36]	; 0x24
 8023560:	fb12 f30c 	smulbb	r3, r2, ip
 8023564:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023568:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802356c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023570:	ea40 000b 	orr.w	r0, r0, fp
 8023574:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023578:	10db      	asrs	r3, r3, #3
 802357a:	f1cc 0e10 	rsb	lr, ip, #16
 802357e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023582:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023586:	ebae 0e02 	sub.w	lr, lr, r2
 802358a:	ea4b 0101 	orr.w	r1, fp, r1
 802358e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023592:	4351      	muls	r1, r2
 8023594:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802359a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802359e:	0410      	lsls	r0, r2, #16
 80235a0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80235a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80235a8:	4310      	orrs	r0, r2
 80235aa:	9a08      	ldr	r2, [sp, #32]
 80235ac:	fb03 e000 	mla	r0, r3, r0, lr
 80235b0:	9908      	ldr	r1, [sp, #32]
 80235b2:	0412      	lsls	r2, r2, #16
 80235b4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80235b8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80235bc:	ea42 020e 	orr.w	r2, r2, lr
 80235c0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80235c4:	fb03 0302 	mla	r3, r3, r2, r0
 80235c8:	0d5a      	lsrs	r2, r3, #21
 80235ca:	095b      	lsrs	r3, r3, #5
 80235cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80235d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80235d4:	4313      	orrs	r3, r2
 80235d6:	f8a9 3000 	strh.w	r3, [r9]
 80235da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80235dc:	f109 0902 	add.w	r9, r9, #2
 80235e0:	441c      	add	r4, r3
 80235e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80235e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80235e8:	441e      	add	r6, r3
 80235ea:	e784      	b.n	80234f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80235ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80235ee:	3d01      	subs	r5, #1
 80235f0:	441c      	add	r4, r3
 80235f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80235f4:	3702      	adds	r7, #2
 80235f6:	441e      	add	r6, r3
 80235f8:	e761      	b.n	80234be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80235fa:	d01d      	beq.n	8023638 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80235fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80235fe:	1e6b      	subs	r3, r5, #1
 8023600:	fb00 4003 	mla	r0, r0, r3, r4
 8023604:	1400      	asrs	r0, r0, #16
 8023606:	f53f af74 	bmi.w	80234f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802360a:	3901      	subs	r1, #1
 802360c:	4288      	cmp	r0, r1
 802360e:	f6bf af70 	bge.w	80234f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023612:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023614:	fb01 6303 	mla	r3, r1, r3, r6
 8023618:	141b      	asrs	r3, r3, #16
 802361a:	f53f af6a 	bmi.w	80234f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802361e:	3a01      	subs	r2, #1
 8023620:	4293      	cmp	r3, r2
 8023622:	f6bf af66 	bge.w	80234f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023626:	46a9      	mov	r9, r5
 8023628:	46ba      	mov	sl, r7
 802362a:	f1b9 0f00 	cmp.w	r9, #0
 802362e:	dc5a      	bgt.n	80236e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8023630:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023634:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8023638:	9b07      	ldr	r3, [sp, #28]
 802363a:	2b00      	cmp	r3, #0
 802363c:	f340 80b8 	ble.w	80237b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023644:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023648:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802364c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023650:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023654:	eef0 6a62 	vmov.f32	s13, s5
 8023658:	ee31 1a05 	vadd.f32	s2, s2, s10
 802365c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023660:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023664:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802366c:	ee16 4a90 	vmov	r4, s13
 8023670:	eef0 6a43 	vmov.f32	s13, s6
 8023674:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023678:	ee12 2a90 	vmov	r2, s5
 802367c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023680:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023682:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023686:	fb92 f3f3 	sdiv	r3, r2, r3
 802368a:	ee13 2a10 	vmov	r2, s6
 802368e:	931b      	str	r3, [sp, #108]	; 0x6c
 8023690:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023692:	ee16 6a90 	vmov	r6, s13
 8023696:	fb92 f3f3 	sdiv	r3, r2, r3
 802369a:	931c      	str	r3, [sp, #112]	; 0x70
 802369c:	9b07      	ldr	r3, [sp, #28]
 802369e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80236a0:	3b01      	subs	r3, #1
 80236a2:	9307      	str	r3, [sp, #28]
 80236a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80236a6:	bf0c      	ite	eq
 80236a8:	4615      	moveq	r5, r2
 80236aa:	461d      	movne	r5, r3
 80236ac:	eeb0 3a67 	vmov.f32	s6, s15
 80236b0:	eef0 2a47 	vmov.f32	s5, s14
 80236b4:	e6f4      	b.n	80234a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80236b6:	f111 0b01 	adds.w	fp, r1, #1
 80236ba:	d48e      	bmi.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80236bc:	45de      	cmp	lr, fp
 80236be:	db8c      	blt.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80236c0:	f110 0b01 	adds.w	fp, r0, #1
 80236c4:	d489      	bmi.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80236c6:	455b      	cmp	r3, fp
 80236c8:	db87      	blt.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80236ca:	b21b      	sxth	r3, r3
 80236cc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80236d0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80236d4:	9300      	str	r3, [sp, #0]
 80236d6:	4642      	mov	r2, r8
 80236d8:	fa0f f38e 	sxth.w	r3, lr
 80236dc:	4649      	mov	r1, r9
 80236de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80236e0:	f7ff fe4d 	bl	802337e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80236e4:	e779      	b.n	80235da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80236e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80236e8:	1420      	asrs	r0, r4, #16
 80236ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80236ee:	1431      	asrs	r1, r6, #16
 80236f0:	fb03 0101 	mla	r1, r3, r1, r0
 80236f4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80236f8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80236fc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8023700:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023704:	8841      	ldrh	r1, [r0, #2]
 8023706:	f1be 0f00 	cmp.w	lr, #0
 802370a:	d00b      	beq.n	8023724 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802370c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023710:	3b01      	subs	r3, #1
 8023712:	005b      	lsls	r3, r3, #1
 8023714:	3302      	adds	r3, #2
 8023716:	eb00 0b03 	add.w	fp, r0, r3
 802371a:	5ac3      	ldrh	r3, [r0, r3]
 802371c:	930a      	str	r3, [sp, #40]	; 0x28
 802371e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023722:	930b      	str	r3, [sp, #44]	; 0x2c
 8023724:	fb12 f30e 	smulbb	r3, r2, lr
 8023728:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802372c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023730:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023734:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023738:	10db      	asrs	r3, r3, #3
 802373a:	ea40 000c 	orr.w	r0, r0, ip
 802373e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023742:	f1ce 0c10 	rsb	ip, lr, #16
 8023746:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802374a:	ebac 0c02 	sub.w	ip, ip, r2
 802374e:	ea4b 0101 	orr.w	r1, fp, r1
 8023752:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023756:	4351      	muls	r1, r2
 8023758:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802375c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802375e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023762:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023766:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802376a:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802376e:	ea4b 0000 	orr.w	r0, fp, r0
 8023772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023774:	fb03 c000 	mla	r0, r3, r0, ip
 8023778:	990a      	ldr	r1, [sp, #40]	; 0x28
 802377a:	0412      	lsls	r2, r2, #16
 802377c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023780:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023784:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023788:	ea42 0b0b 	orr.w	fp, r2, fp
 802378c:	fb03 000b 	mla	r0, r3, fp, r0
 8023790:	0d43      	lsrs	r3, r0, #21
 8023792:	0940      	lsrs	r0, r0, #5
 8023794:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023798:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802379c:	4318      	orrs	r0, r3
 802379e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80237a0:	f82a 0b02 	strh.w	r0, [sl], #2
 80237a4:	441c      	add	r4, r3
 80237a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80237a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80237ac:	441e      	add	r6, r3
 80237ae:	e73c      	b.n	802362a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80237b0:	b00f      	add	sp, #60	; 0x3c
 80237b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080237b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80237b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237ba:	b085      	sub	sp, #20
 80237bc:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80237c0:	9102      	str	r1, [sp, #8]
 80237c2:	fb04 7103 	mla	r1, r4, r3, r7
 80237c6:	2c00      	cmp	r4, #0
 80237c8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80237cc:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80237d0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80237d4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80237d8:	f2c0 811b 	blt.w	8023a12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80237dc:	45a6      	cmp	lr, r4
 80237de:	f340 8118 	ble.w	8023a12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80237e2:	2f00      	cmp	r7, #0
 80237e4:	f2c0 8113 	blt.w	8023a0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80237e8:	42bb      	cmp	r3, r7
 80237ea:	f340 8110 	ble.w	8023a0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80237ee:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80237f2:	1c7a      	adds	r2, r7, #1
 80237f4:	f100 8110 	bmi.w	8023a18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80237f8:	4293      	cmp	r3, r2
 80237fa:	f340 810d 	ble.w	8023a18 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80237fe:	2e00      	cmp	r6, #0
 8023800:	f000 810c 	beq.w	8023a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8023804:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023808:	3401      	adds	r4, #1
 802380a:	f100 810b 	bmi.w	8023a24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802380e:	45a6      	cmp	lr, r4
 8023810:	f340 8108 	ble.w	8023a24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023814:	2800      	cmp	r0, #0
 8023816:	f000 8108 	beq.w	8023a2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802381a:	2f00      	cmp	r7, #0
 802381c:	f2c0 8100 	blt.w	8023a20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023820:	42bb      	cmp	r3, r7
 8023822:	f340 80fd 	ble.w	8023a20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023826:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802382a:	3701      	adds	r7, #1
 802382c:	f100 8100 	bmi.w	8023a30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023830:	42bb      	cmp	r3, r7
 8023832:	f340 80fd 	ble.w	8023a30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023836:	2e00      	cmp	r6, #0
 8023838:	f000 80fc 	beq.w	8023a34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802383c:	3301      	adds	r3, #1
 802383e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023842:	b2b6      	uxth	r6, r6
 8023844:	b280      	uxth	r0, r0
 8023846:	fb00 fe06 	mul.w	lr, r0, r6
 802384a:	0136      	lsls	r6, r6, #4
 802384c:	eba6 070e 	sub.w	r7, r6, lr
 8023850:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023854:	b2bf      	uxth	r7, r7
 8023856:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802385a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802385e:	fb0a f607 	mul.w	r6, sl, r7
 8023862:	b280      	uxth	r0, r0
 8023864:	1a1b      	subs	r3, r3, r0
 8023866:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802386a:	b29b      	uxth	r3, r3
 802386c:	fb0b 6603 	mla	r6, fp, r3, r6
 8023870:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023874:	fb00 6609 	mla	r6, r0, r9, r6
 8023878:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802387c:	fb0e 6608 	mla	r6, lr, r8, r6
 8023880:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023884:	9600      	str	r6, [sp, #0]
 8023886:	2e00      	cmp	r6, #0
 8023888:	f000 80be 	beq.w	8023a08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802388c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023890:	fb0b fc0c 	mul.w	ip, fp, ip
 8023894:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023898:	fb0b f505 	mul.w	r5, fp, r5
 802389c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80238a0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80238a4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238a8:	44dc      	add	ip, fp
 80238aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238ae:	9501      	str	r5, [sp, #4]
 80238b0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80238b4:	9503      	str	r5, [sp, #12]
 80238b6:	9d01      	ldr	r5, [sp, #4]
 80238b8:	9e02      	ldr	r6, [sp, #8]
 80238ba:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80238be:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80238c2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80238c6:	fb0a fc0c 	mul.w	ip, sl, ip
 80238ca:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80238ce:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80238d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238da:	4465      	add	r5, ip
 80238dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80238e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80238e4:	fb09 fc0c 	mul.w	ip, r9, ip
 80238e8:	fb09 f904 	mul.w	r9, r9, r4
 80238ec:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80238f0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80238f4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80238f8:	fb08 f404 	mul.w	r4, r8, r4
 80238fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023900:	fb08 f802 	mul.w	r8, r8, r2
 8023904:	0a2d      	lsrs	r5, r5, #8
 8023906:	0a22      	lsrs	r2, r4, #8
 8023908:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802390c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023910:	437d      	muls	r5, r7
 8023912:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023916:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802391a:	4414      	add	r4, r2
 802391c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023920:	fb0a fa01 	mul.w	sl, sl, r1
 8023924:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023928:	9a03      	ldr	r2, [sp, #12]
 802392a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802392e:	fb02 5503 	mla	r5, r2, r3, r5
 8023932:	0a24      	lsrs	r4, r4, #8
 8023934:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023938:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802393c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023940:	fb04 540e 	mla	r4, r4, lr, r5
 8023944:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023948:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802394c:	4461      	add	r1, ip
 802394e:	0a09      	lsrs	r1, r1, #8
 8023950:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023954:	fb01 4100 	mla	r1, r1, r0, r4
 8023958:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802395c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023960:	fb07 f70a 	mul.w	r7, r7, sl
 8023964:	0a09      	lsrs	r1, r1, #8
 8023966:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802396a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802396e:	fb03 7101 	mla	r1, r3, r1, r7
 8023972:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023976:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802397a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802397e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023982:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8023986:	fb00 e101 	mla	r1, r0, r1, lr
 802398a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802398e:	9a00      	ldr	r2, [sp, #0]
 8023990:	b287      	uxth	r7, r0
 8023992:	437a      	muls	r2, r7
 8023994:	1c53      	adds	r3, r2, #1
 8023996:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802399a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802399e:	0a09      	lsrs	r1, r1, #8
 80239a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80239a4:	4321      	orrs	r1, r4
 80239a6:	0c0a      	lsrs	r2, r1, #16
 80239a8:	8836      	ldrh	r6, [r6, #0]
 80239aa:	fb12 f207 	smulbb	r2, r2, r7
 80239ae:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80239b2:	b2c8      	uxtb	r0, r1
 80239b4:	1235      	asrs	r5, r6, #8
 80239b6:	fb14 f407 	smulbb	r4, r4, r7
 80239ba:	fb10 f007 	smulbb	r0, r0, r7
 80239be:	b2db      	uxtb	r3, r3
 80239c0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80239c4:	fb05 2503 	mla	r5, r5, r3, r2
 80239c8:	10f2      	asrs	r2, r6, #3
 80239ca:	00f6      	lsls	r6, r6, #3
 80239cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80239d0:	b2f6      	uxtb	r6, r6
 80239d2:	fb02 4203 	mla	r2, r2, r3, r4
 80239d6:	fb06 0303 	mla	r3, r6, r3, r0
 80239da:	b2ad      	uxth	r5, r5
 80239dc:	b299      	uxth	r1, r3
 80239de:	b294      	uxth	r4, r2
 80239e0:	1c6b      	adds	r3, r5, #1
 80239e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80239e6:	1c62      	adds	r2, r4, #1
 80239e8:	1c4b      	adds	r3, r1, #1
 80239ea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80239ee:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80239f2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80239f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80239fa:	0952      	lsrs	r2, r2, #5
 80239fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023a00:	432b      	orrs	r3, r5
 8023a02:	4313      	orrs	r3, r2
 8023a04:	9a02      	ldr	r2, [sp, #8]
 8023a06:	8013      	strh	r3, [r2, #0]
 8023a08:	b005      	add	sp, #20
 8023a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a0e:	2500      	movs	r5, #0
 8023a10:	e6ef      	b.n	80237f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8023a12:	2100      	movs	r1, #0
 8023a14:	460d      	mov	r5, r1
 8023a16:	e6f7      	b.n	8023808 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023a18:	2100      	movs	r1, #0
 8023a1a:	e6f5      	b.n	8023808 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023a1c:	4631      	mov	r1, r6
 8023a1e:	e6f3      	b.n	8023808 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8023a20:	2400      	movs	r4, #0
 8023a22:	e702      	b.n	802382a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8023a24:	2200      	movs	r2, #0
 8023a26:	4614      	mov	r4, r2
 8023a28:	e70b      	b.n	8023842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023a2a:	4602      	mov	r2, r0
 8023a2c:	4604      	mov	r4, r0
 8023a2e:	e708      	b.n	8023842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023a30:	2200      	movs	r2, #0
 8023a32:	e706      	b.n	8023842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8023a34:	4632      	mov	r2, r6
 8023a36:	e704      	b.n	8023842 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08023a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a3c:	b09d      	sub	sp, #116	; 0x74
 8023a3e:	9219      	str	r2, [sp, #100]	; 0x64
 8023a40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023a42:	901b      	str	r0, [sp, #108]	; 0x6c
 8023a44:	9307      	str	r3, [sp, #28]
 8023a46:	6850      	ldr	r0, [r2, #4]
 8023a48:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023a4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8023a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8023a50:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023a54:	fb00 1303 	mla	r3, r0, r3, r1
 8023a58:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023a5c:	6812      	ldr	r2, [r2, #0]
 8023a5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a62:	930a      	str	r3, [sp, #40]	; 0x28
 8023a64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	9310      	str	r3, [sp, #64]	; 0x40
 8023a6a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a72:	2b00      	cmp	r3, #0
 8023a74:	dc03      	bgt.n	8023a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8023a76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	f340 8375 	ble.w	8024168 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023a7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a88:	1e48      	subs	r0, r1, #1
 8023a8a:	1e57      	subs	r7, r2, #1
 8023a8c:	9b07      	ldr	r3, [sp, #28]
 8023a8e:	2b00      	cmp	r3, #0
 8023a90:	f340 818e 	ble.w	8023db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023a94:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023a98:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023a9c:	d406      	bmi.n	8023aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023a9e:	4584      	cmp	ip, r0
 8023aa0:	da04      	bge.n	8023aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	db02      	blt.n	8023aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023aa6:	42bb      	cmp	r3, r7
 8023aa8:	f2c0 8183 	blt.w	8023db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023aac:	f11c 0c01 	adds.w	ip, ip, #1
 8023ab0:	f100 8173 	bmi.w	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023ab4:	4561      	cmp	r1, ip
 8023ab6:	f2c0 8170 	blt.w	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023aba:	3301      	adds	r3, #1
 8023abc:	f100 816d 	bmi.w	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023ac0:	429a      	cmp	r2, r3
 8023ac2:	f2c0 816a 	blt.w	8023d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023ac6:	9b07      	ldr	r3, [sp, #28]
 8023ac8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023aca:	9318      	str	r3, [sp, #96]	; 0x60
 8023acc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	f340 818c 	ble.w	8023dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8023ad4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023ad6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ad8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023adc:	1422      	asrs	r2, r4, #16
 8023ade:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023ae2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023ae6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023aea:	689b      	ldr	r3, [r3, #8]
 8023aec:	f100 81cd 	bmi.w	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023af0:	f103 38ff 	add.w	r8, r3, #4294967295
 8023af4:	4542      	cmp	r2, r8
 8023af6:	f280 81c8 	bge.w	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023afa:	f1bc 0f00 	cmp.w	ip, #0
 8023afe:	f2c0 81c4 	blt.w	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023b02:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023b06:	45c4      	cmp	ip, r8
 8023b08:	f280 81bf 	bge.w	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023b0c:	b21b      	sxth	r3, r3
 8023b0e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023b12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023b14:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8023b18:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023b1c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023b20:	2800      	cmp	r0, #0
 8023b22:	f000 81a9 	beq.w	8023e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8023b26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8023b2a:	950c      	str	r5, [sp, #48]	; 0x30
 8023b2c:	0e2d      	lsrs	r5, r5, #24
 8023b2e:	9513      	str	r5, [sp, #76]	; 0x4c
 8023b30:	b181      	cbz	r1, 8023b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023b36:	3b01      	subs	r3, #1
 8023b38:	009b      	lsls	r3, r3, #2
 8023b3a:	3304      	adds	r3, #4
 8023b3c:	eb08 0c03 	add.w	ip, r8, r3
 8023b40:	f858 3003 	ldr.w	r3, [r8, r3]
 8023b44:	9308      	str	r3, [sp, #32]
 8023b46:	0e1b      	lsrs	r3, r3, #24
 8023b48:	9311      	str	r3, [sp, #68]	; 0x44
 8023b4a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8023b50:	0e1b      	lsrs	r3, r3, #24
 8023b52:	9314      	str	r3, [sp, #80]	; 0x50
 8023b54:	b280      	uxth	r0, r0
 8023b56:	b289      	uxth	r1, r1
 8023b58:	fb00 f901 	mul.w	r9, r0, r1
 8023b5c:	0100      	lsls	r0, r0, #4
 8023b5e:	eba0 0809 	sub.w	r8, r0, r9
 8023b62:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023b66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b68:	fa1f f888 	uxth.w	r8, r8
 8023b6c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023b70:	fb08 f000 	mul.w	r0, r8, r0
 8023b74:	b289      	uxth	r1, r1
 8023b76:	1a5b      	subs	r3, r3, r1
 8023b78:	b29b      	uxth	r3, r3
 8023b7a:	fb03 000e 	mla	r0, r3, lr, r0
 8023b7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b80:	fb01 0005 	mla	r0, r1, r5, r0
 8023b84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023b86:	fb09 0005 	mla	r0, r9, r5, r0
 8023b8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023b8e:	2800      	cmp	r0, #0
 8023b90:	f000 80fa 	beq.w	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023b94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b98:	d01b      	beq.n	8023bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8023b9a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023b9e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023ba2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023ba6:	fb0e fe02 	mul.w	lr, lr, r2
 8023baa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023bae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bb6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023bba:	4452      	add	r2, sl
 8023bbc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023bc0:	0a12      	lsrs	r2, r2, #8
 8023bc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bc6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023bca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023bce:	ea42 020c 	orr.w	r2, r2, ip
 8023bd2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bd4:	2dff      	cmp	r5, #255	; 0xff
 8023bd6:	d021      	beq.n	8023c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8023bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023bda:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023bde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023be0:	fb05 fb0b 	mul.w	fp, r5, fp
 8023be4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023be6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bea:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023bee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bf0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bf4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023bf8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c00:	44de      	add	lr, fp
 8023c02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c16:	ea4e 050a 	orr.w	r5, lr, sl
 8023c1a:	950c      	str	r5, [sp, #48]	; 0x30
 8023c1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c1e:	2dff      	cmp	r5, #255	; 0xff
 8023c20:	d021      	beq.n	8023c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023c22:	9d08      	ldr	r5, [sp, #32]
 8023c24:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c28:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c2a:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c2e:	9d08      	ldr	r5, [sp, #32]
 8023c30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c34:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023c3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c3e:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c4a:	44de      	add	lr, fp
 8023c4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c60:	ea4e 050a 	orr.w	r5, lr, sl
 8023c64:	9508      	str	r5, [sp, #32]
 8023c66:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c68:	2dff      	cmp	r5, #255	; 0xff
 8023c6a:	d021      	beq.n	8023cb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023c6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c6e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023c72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c74:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c7e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023c82:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023c84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c88:	fb05 fa0a 	mul.w	sl, r5, sl
 8023c8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c94:	44de      	add	lr, fp
 8023c96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ca2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ca6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023caa:	ea4e 050a 	orr.w	r5, lr, sl
 8023cae:	950d      	str	r5, [sp, #52]	; 0x34
 8023cb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cb2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023cb6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023cba:	fb08 fc0c 	mul.w	ip, r8, ip
 8023cbe:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023cc2:	9d08      	ldr	r5, [sp, #32]
 8023cc4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023cc8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023ccc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023cd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023cd2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023cd8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023cdc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023ce0:	fb08 f80e 	mul.w	r8, r8, lr
 8023ce4:	fb03 8202 	mla	r2, r3, r2, r8
 8023ce8:	9b08      	ldr	r3, [sp, #32]
 8023cea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cee:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8023cf2:	fb01 220a 	mla	r2, r1, sl, r2
 8023cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023cf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cfc:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023d00:	fb09 2901 	mla	r9, r9, r1, r2
 8023d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023d06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d0a:	4342      	muls	r2, r0
 8023d0c:	1c50      	adds	r0, r2, #1
 8023d0e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023d12:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023d16:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023d1a:	ea4c 0c09 	orr.w	ip, ip, r9
 8023d1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d20:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023d24:	883b      	ldrh	r3, [r7, #0]
 8023d26:	fb12 f205 	smulbb	r2, r2, r5
 8023d2a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023d2e:	fa5f fc8c 	uxtb.w	ip, ip
 8023d32:	1219      	asrs	r1, r3, #8
 8023d34:	fb1c fc05 	smulbb	ip, ip, r5
 8023d38:	b2c0      	uxtb	r0, r0
 8023d3a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023d3e:	fb01 2100 	mla	r1, r1, r0, r2
 8023d42:	10da      	asrs	r2, r3, #3
 8023d44:	00db      	lsls	r3, r3, #3
 8023d46:	fb1e fe05 	smulbb	lr, lr, r5
 8023d4a:	b2db      	uxtb	r3, r3
 8023d4c:	fb03 c300 	mla	r3, r3, r0, ip
 8023d50:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023d54:	b289      	uxth	r1, r1
 8023d56:	fb02 e200 	mla	r2, r2, r0, lr
 8023d5a:	fa1f fc83 	uxth.w	ip, r3
 8023d5e:	1c4b      	adds	r3, r1, #1
 8023d60:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023d64:	f10c 0301 	add.w	r3, ip, #1
 8023d68:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023d6c:	b292      	uxth	r2, r2
 8023d6e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023d72:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023d76:	430b      	orrs	r3, r1
 8023d78:	1c51      	adds	r1, r2, #1
 8023d7a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023d7e:	0952      	lsrs	r2, r2, #5
 8023d80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d84:	4313      	orrs	r3, r2
 8023d86:	803b      	strh	r3, [r7, #0]
 8023d88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d8a:	3702      	adds	r7, #2
 8023d8c:	441c      	add	r4, r3
 8023d8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d90:	441e      	add	r6, r3
 8023d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d94:	3b01      	subs	r3, #1
 8023d96:	9318      	str	r3, [sp, #96]	; 0x60
 8023d98:	e698      	b.n	8023acc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023d9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d9c:	441c      	add	r4, r3
 8023d9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023da0:	441e      	add	r6, r3
 8023da2:	9b07      	ldr	r3, [sp, #28]
 8023da4:	3b01      	subs	r3, #1
 8023da6:	9307      	str	r3, [sp, #28]
 8023da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023daa:	3302      	adds	r3, #2
 8023dac:	930a      	str	r3, [sp, #40]	; 0x28
 8023dae:	e66d      	b.n	8023a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023db0:	d023      	beq.n	8023dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023db2:	9b07      	ldr	r3, [sp, #28]
 8023db4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023db6:	3b01      	subs	r3, #1
 8023db8:	fb00 4003 	mla	r0, r0, r3, r4
 8023dbc:	1400      	asrs	r0, r0, #16
 8023dbe:	f53f ae82 	bmi.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023dc2:	3901      	subs	r1, #1
 8023dc4:	4288      	cmp	r0, r1
 8023dc6:	f6bf ae7e 	bge.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023dca:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023dcc:	fb01 6303 	mla	r3, r1, r3, r6
 8023dd0:	141b      	asrs	r3, r3, #16
 8023dd2:	f53f ae78 	bmi.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023dd6:	3a01      	subs	r2, #1
 8023dd8:	4293      	cmp	r3, r2
 8023dda:	f6bf ae74 	bge.w	8023ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023dde:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023de2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023de6:	f1bb 0f00 	cmp.w	fp, #0
 8023dea:	dc6c      	bgt.n	8023ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8023dec:	9b07      	ldr	r3, [sp, #28]
 8023dee:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023df4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023df8:	930a      	str	r3, [sp, #40]	; 0x28
 8023dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	f340 81b3 	ble.w	8024168 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8023e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023e0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e16:	eef0 6a62 	vmov.f32	s13, s5
 8023e1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e22:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e2e:	ee16 4a90 	vmov	r4, s13
 8023e32:	eef0 6a43 	vmov.f32	s13, s6
 8023e36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e3a:	ee12 2a90 	vmov	r2, s5
 8023e3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e48:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e4c:	ee13 2a10 	vmov	r2, s6
 8023e50:	9329      	str	r3, [sp, #164]	; 0xa4
 8023e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e54:	ee16 6a90 	vmov	r6, s13
 8023e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e5c:	932a      	str	r3, [sp, #168]	; 0xa8
 8023e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023e62:	3b01      	subs	r3, #1
 8023e64:	9317      	str	r3, [sp, #92]	; 0x5c
 8023e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e68:	bf08      	it	eq
 8023e6a:	4613      	moveq	r3, r2
 8023e6c:	eeb0 3a67 	vmov.f32	s6, s15
 8023e70:	9307      	str	r3, [sp, #28]
 8023e72:	eef0 2a47 	vmov.f32	s5, s14
 8023e76:	e5fb      	b.n	8023a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023e78:	2900      	cmp	r1, #0
 8023e7a:	f43f ae6b 	beq.w	8023b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023e7e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023e82:	9308      	str	r3, [sp, #32]
 8023e84:	0e1b      	lsrs	r3, r3, #24
 8023e86:	9311      	str	r3, [sp, #68]	; 0x44
 8023e88:	e664      	b.n	8023b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8023e8a:	f112 0801 	adds.w	r8, r2, #1
 8023e8e:	f53f af7b 	bmi.w	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023e92:	4543      	cmp	r3, r8
 8023e94:	f6ff af78 	blt.w	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023e98:	f11c 0801 	adds.w	r8, ip, #1
 8023e9c:	f53f af74 	bmi.w	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023ea0:	45c6      	cmp	lr, r8
 8023ea2:	f6ff af71 	blt.w	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023ea6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023ea8:	9201      	str	r2, [sp, #4]
 8023eaa:	fa0f f28e 	sxth.w	r2, lr
 8023eae:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023eb2:	e9cd c002 	strd	ip, r0, [sp, #8]
 8023eb6:	9200      	str	r2, [sp, #0]
 8023eb8:	b21b      	sxth	r3, r3
 8023eba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023ebc:	4639      	mov	r1, r7
 8023ebe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023ec0:	f7ff fc79 	bl	80237b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8023ec4:	e760      	b.n	8023d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023ec6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ec8:	1427      	asrs	r7, r4, #16
 8023eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ece:	1433      	asrs	r3, r6, #16
 8023ed0:	fb01 7303 	mla	r3, r1, r3, r7
 8023ed4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023ed6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023eda:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8023ede:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023ee2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023ee6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023eea:	2a00      	cmp	r2, #0
 8023eec:	f000 8133 	beq.w	8024156 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8023ef0:	687d      	ldr	r5, [r7, #4]
 8023ef2:	950e      	str	r5, [sp, #56]	; 0x38
 8023ef4:	0e2d      	lsrs	r5, r5, #24
 8023ef6:	9515      	str	r5, [sp, #84]	; 0x54
 8023ef8:	b178      	cbz	r0, 8023f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8023efa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8023efe:	3901      	subs	r1, #1
 8023f00:	0089      	lsls	r1, r1, #2
 8023f02:	3104      	adds	r1, #4
 8023f04:	eb07 0e01 	add.w	lr, r7, r1
 8023f08:	5879      	ldr	r1, [r7, r1]
 8023f0a:	9109      	str	r1, [sp, #36]	; 0x24
 8023f0c:	0e09      	lsrs	r1, r1, #24
 8023f0e:	9112      	str	r1, [sp, #72]	; 0x48
 8023f10:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023f14:	910f      	str	r1, [sp, #60]	; 0x3c
 8023f16:	0e09      	lsrs	r1, r1, #24
 8023f18:	9116      	str	r1, [sp, #88]	; 0x58
 8023f1a:	b292      	uxth	r2, r2
 8023f1c:	b280      	uxth	r0, r0
 8023f1e:	fb02 f800 	mul.w	r8, r2, r0
 8023f22:	0112      	lsls	r2, r2, #4
 8023f24:	eba2 0e08 	sub.w	lr, r2, r8
 8023f28:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023f2a:	fa1f fe8e 	uxth.w	lr, lr
 8023f2e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023f32:	fb0e f101 	mul.w	r1, lr, r1
 8023f36:	b280      	uxth	r0, r0
 8023f38:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f3c:	1a12      	subs	r2, r2, r0
 8023f3e:	b292      	uxth	r2, r2
 8023f40:	fb02 110c 	mla	r1, r2, ip, r1
 8023f44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023f46:	fb00 1105 	mla	r1, r0, r5, r1
 8023f4a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023f4c:	fb08 1105 	mla	r1, r8, r5, r1
 8023f50:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023f54:	2900      	cmp	r1, #0
 8023f56:	f000 80f5 	beq.w	8024144 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023f5a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023f5e:	d019      	beq.n	8023f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8023f60:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023f64:	fb0c fa0a 	mul.w	sl, ip, sl
 8023f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f6c:	fb0c fc03 	mul.w	ip, ip, r3
 8023f70:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023f74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f78:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023f7c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023f80:	4453      	add	r3, sl
 8023f82:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023f86:	0a1b      	lsrs	r3, r3, #8
 8023f88:	0a3f      	lsrs	r7, r7, #8
 8023f8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f8e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f92:	433b      	orrs	r3, r7
 8023f94:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023f96:	2dff      	cmp	r5, #255	; 0xff
 8023f98:	d020      	beq.n	8023fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8023f9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023f9c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023fa0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fa2:	436f      	muls	r7, r5
 8023fa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023fa6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023faa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023fae:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023fb0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fb4:	fb05 fa0a 	mul.w	sl, r5, sl
 8023fb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fbc:	44bc      	add	ip, r7
 8023fbe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023fc2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fd6:	ea4c 050a 	orr.w	r5, ip, sl
 8023fda:	950e      	str	r5, [sp, #56]	; 0x38
 8023fdc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023fde:	2dff      	cmp	r5, #255	; 0xff
 8023fe0:	d020      	beq.n	8024024 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8023fe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023fe4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023fe8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023fea:	436f      	muls	r7, r5
 8023fec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023fee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ff2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023ff6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023ff8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023ffc:	fb05 fa0a 	mul.w	sl, r5, sl
 8024000:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024004:	44bc      	add	ip, r7
 8024006:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802400a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802400e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024016:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802401a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802401e:	ea4c 050a 	orr.w	r5, ip, sl
 8024022:	9509      	str	r5, [sp, #36]	; 0x24
 8024024:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024026:	2dff      	cmp	r5, #255	; 0xff
 8024028:	d020      	beq.n	802406c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802402a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802402c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024030:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024032:	436f      	muls	r7, r5
 8024034:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024036:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802403a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802403e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024040:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024044:	fb05 fa0a 	mul.w	sl, r5, sl
 8024048:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802404c:	44bc      	add	ip, r7
 802404e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024052:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024056:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802405a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802405e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024062:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024066:	ea4c 050a 	orr.w	r5, ip, sl
 802406a:	950f      	str	r5, [sp, #60]	; 0x3c
 802406c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802406e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024072:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024076:	fb0e f707 	mul.w	r7, lr, r7
 802407a:	fb02 770c 	mla	r7, r2, ip, r7
 802407e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024080:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024084:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024088:	fb00 770c 	mla	r7, r0, ip, r7
 802408c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802408e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024092:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024094:	fb08 770c 	mla	r7, r8, ip, r7
 8024098:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802409c:	fb0e fe0c 	mul.w	lr, lr, ip
 80240a0:	fb02 e303 	mla	r3, r2, r3, lr
 80240a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240a6:	0a3f      	lsrs	r7, r7, #8
 80240a8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80240ac:	fb00 330a 	mla	r3, r0, sl, r3
 80240b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80240b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80240b6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80240ba:	fb08 3c0c 	mla	ip, r8, ip, r3
 80240be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240c4:	4359      	muls	r1, r3
 80240c6:	1c4b      	adds	r3, r1, #1
 80240c8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80240cc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80240d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240d4:	ea47 070c 	orr.w	r7, r7, ip
 80240d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80240da:	0c3b      	lsrs	r3, r7, #16
 80240dc:	f8b9 0000 	ldrh.w	r0, [r9]
 80240e0:	fb13 f305 	smulbb	r3, r3, r5
 80240e4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80240e8:	b2ff      	uxtb	r7, r7
 80240ea:	1202      	asrs	r2, r0, #8
 80240ec:	fb17 f705 	smulbb	r7, r7, r5
 80240f0:	b2c9      	uxtb	r1, r1
 80240f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80240f6:	fb02 3201 	mla	r2, r2, r1, r3
 80240fa:	10c3      	asrs	r3, r0, #3
 80240fc:	00c0      	lsls	r0, r0, #3
 80240fe:	fb1c fc05 	smulbb	ip, ip, r5
 8024102:	b2c0      	uxtb	r0, r0
 8024104:	fb00 7001 	mla	r0, r0, r1, r7
 8024108:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802410c:	fb03 c301 	mla	r3, r3, r1, ip
 8024110:	b292      	uxth	r2, r2
 8024112:	b280      	uxth	r0, r0
 8024114:	1c51      	adds	r1, r2, #1
 8024116:	f100 0c01 	add.w	ip, r0, #1
 802411a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802411e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024122:	b29b      	uxth	r3, r3
 8024124:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024128:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802412c:	ea4c 0202 	orr.w	r2, ip, r2
 8024130:	f103 0c01 	add.w	ip, r3, #1
 8024134:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024138:	095b      	lsrs	r3, r3, #5
 802413a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802413e:	431a      	orrs	r2, r3
 8024140:	f8a9 2000 	strh.w	r2, [r9]
 8024144:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024146:	f109 0902 	add.w	r9, r9, #2
 802414a:	441c      	add	r4, r3
 802414c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802414e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024152:	441e      	add	r6, r3
 8024154:	e647      	b.n	8023de6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024156:	2800      	cmp	r0, #0
 8024158:	f43f aedf 	beq.w	8023f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802415c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024160:	9109      	str	r1, [sp, #36]	; 0x24
 8024162:	0e09      	lsrs	r1, r1, #24
 8024164:	9112      	str	r1, [sp, #72]	; 0x48
 8024166:	e6d8      	b.n	8023f1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024168:	b01d      	add	sp, #116	; 0x74
 802416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802416e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802416e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024172:	b085      	sub	sp, #20
 8024174:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024178:	9102      	str	r1, [sp, #8]
 802417a:	fb04 7103 	mla	r1, r4, r3, r7
 802417e:	2c00      	cmp	r4, #0
 8024180:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024184:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024188:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802418c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8024190:	f2c0 810c 	blt.w	80243ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024194:	45a6      	cmp	lr, r4
 8024196:	f340 8109 	ble.w	80243ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802419a:	2f00      	cmp	r7, #0
 802419c:	f2c0 8104 	blt.w	80243a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80241a0:	42bb      	cmp	r3, r7
 80241a2:	f340 8101 	ble.w	80243a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80241a6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80241aa:	1c7a      	adds	r2, r7, #1
 80241ac:	f100 8101 	bmi.w	80243b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80241b0:	4293      	cmp	r3, r2
 80241b2:	f340 80fe 	ble.w	80243b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80241b6:	2e00      	cmp	r6, #0
 80241b8:	f000 80fd 	beq.w	80243b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80241bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80241c0:	3401      	adds	r4, #1
 80241c2:	f100 80fc 	bmi.w	80243be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80241c6:	45a6      	cmp	lr, r4
 80241c8:	f340 80f9 	ble.w	80243be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80241cc:	2800      	cmp	r0, #0
 80241ce:	f000 80f9 	beq.w	80243c4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80241d2:	2f00      	cmp	r7, #0
 80241d4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80241d8:	f2c0 80ef 	blt.w	80243ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80241dc:	42bb      	cmp	r3, r7
 80241de:	f340 80ec 	ble.w	80243ba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80241e2:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80241e6:	3701      	adds	r7, #1
 80241e8:	f100 80ef 	bmi.w	80243ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80241ec:	42bb      	cmp	r3, r7
 80241ee:	f340 80ec 	ble.w	80243ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80241f2:	2e00      	cmp	r6, #0
 80241f4:	f000 80eb 	beq.w	80243ce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80241f8:	6852      	ldr	r2, [r2, #4]
 80241fa:	b2b6      	uxth	r6, r6
 80241fc:	b280      	uxth	r0, r0
 80241fe:	fb00 fe06 	mul.w	lr, r0, r6
 8024202:	0136      	lsls	r6, r6, #4
 8024204:	eba6 070e 	sub.w	r7, r6, lr
 8024208:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802420c:	b2bf      	uxth	r7, r7
 802420e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024212:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8024216:	fb07 f60a 	mul.w	r6, r7, sl
 802421a:	b280      	uxth	r0, r0
 802421c:	1a1b      	subs	r3, r3, r0
 802421e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8024222:	b29b      	uxth	r3, r3
 8024224:	fb0b 6603 	mla	r6, fp, r3, r6
 8024228:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802422c:	fb00 6609 	mla	r6, r0, r9, r6
 8024230:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024234:	fb0e 6608 	mla	r6, lr, r8, r6
 8024238:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802423c:	9600      	str	r6, [sp, #0]
 802423e:	2e00      	cmp	r6, #0
 8024240:	f000 80af 	beq.w	80243a2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8024244:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024248:	fb0b fc0c 	mul.w	ip, fp, ip
 802424c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024250:	fb0b f505 	mul.w	r5, fp, r5
 8024254:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024258:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802425c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024260:	44dc      	add	ip, fp
 8024262:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024266:	9501      	str	r5, [sp, #4]
 8024268:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802426c:	9503      	str	r5, [sp, #12]
 802426e:	9d01      	ldr	r5, [sp, #4]
 8024270:	9e02      	ldr	r6, [sp, #8]
 8024272:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024276:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802427a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802427e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024282:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024286:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802428a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802428e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024292:	4465      	add	r5, ip
 8024294:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024298:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802429c:	fb09 fc0c 	mul.w	ip, r9, ip
 80242a0:	fb09 f904 	mul.w	r9, r9, r4
 80242a4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80242a8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80242ac:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80242b0:	fb08 f404 	mul.w	r4, r8, r4
 80242b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242b8:	fb08 f802 	mul.w	r8, r8, r2
 80242bc:	0a2d      	lsrs	r5, r5, #8
 80242be:	0a22      	lsrs	r2, r4, #8
 80242c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80242c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80242c8:	437d      	muls	r5, r7
 80242ca:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80242ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80242d2:	4414      	add	r4, r2
 80242d4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80242d8:	fb0a fa01 	mul.w	sl, sl, r1
 80242dc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80242e0:	9a03      	ldr	r2, [sp, #12]
 80242e2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80242e6:	fb02 5503 	mla	r5, r2, r3, r5
 80242ea:	0a24      	lsrs	r4, r4, #8
 80242ec:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80242f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80242f4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80242f8:	fb04 540e 	mla	r4, r4, lr, r5
 80242fc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024300:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024304:	4461      	add	r1, ip
 8024306:	0a09      	lsrs	r1, r1, #8
 8024308:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802430c:	fb01 4100 	mla	r1, r1, r0, r4
 8024310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024314:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024318:	fb07 f70a 	mul.w	r7, r7, sl
 802431c:	0a09      	lsrs	r1, r1, #8
 802431e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8024322:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8024326:	fb03 7101 	mla	r1, r3, r1, r7
 802432a:	9b00      	ldr	r3, [sp, #0]
 802432c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024330:	43da      	mvns	r2, r3
 8024332:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024336:	fb0e 1e08 	mla	lr, lr, r8, r1
 802433a:	8836      	ldrh	r6, [r6, #0]
 802433c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024340:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024344:	fb00 e101 	mla	r1, r0, r1, lr
 8024348:	1233      	asrs	r3, r6, #8
 802434a:	b2d2      	uxtb	r2, r2
 802434c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024350:	4353      	muls	r3, r2
 8024352:	10f0      	asrs	r0, r6, #3
 8024354:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024358:	4350      	muls	r0, r2
 802435a:	0a09      	lsrs	r1, r1, #8
 802435c:	00f6      	lsls	r6, r6, #3
 802435e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024362:	b2f6      	uxtb	r6, r6
 8024364:	4321      	orrs	r1, r4
 8024366:	4356      	muls	r6, r2
 8024368:	1c5a      	adds	r2, r3, #1
 802436a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802436e:	0c0b      	lsrs	r3, r1, #16
 8024370:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024374:	1c42      	adds	r2, r0, #1
 8024376:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802437a:	0a0a      	lsrs	r2, r1, #8
 802437c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024380:	021b      	lsls	r3, r3, #8
 8024382:	00d2      	lsls	r2, r2, #3
 8024384:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024388:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802438c:	4313      	orrs	r3, r2
 802438e:	1c72      	adds	r2, r6, #1
 8024390:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024394:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024398:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802439c:	4319      	orrs	r1, r3
 802439e:	9b02      	ldr	r3, [sp, #8]
 80243a0:	8019      	strh	r1, [r3, #0]
 80243a2:	b005      	add	sp, #20
 80243a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243a8:	2500      	movs	r5, #0
 80243aa:	e6fe      	b.n	80241aa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80243ac:	2100      	movs	r1, #0
 80243ae:	460d      	mov	r5, r1
 80243b0:	e706      	b.n	80241c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80243b2:	2100      	movs	r1, #0
 80243b4:	e704      	b.n	80241c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80243b6:	4631      	mov	r1, r6
 80243b8:	e702      	b.n	80241c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80243ba:	2400      	movs	r4, #0
 80243bc:	e713      	b.n	80241e6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80243be:	2200      	movs	r2, #0
 80243c0:	4614      	mov	r4, r2
 80243c2:	e71a      	b.n	80241fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80243c4:	4602      	mov	r2, r0
 80243c6:	4604      	mov	r4, r0
 80243c8:	e717      	b.n	80241fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80243ca:	2200      	movs	r2, #0
 80243cc:	e715      	b.n	80241fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80243ce:	4632      	mov	r2, r6
 80243d0:	e713      	b.n	80241fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

080243d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d8:	b09b      	sub	sp, #108	; 0x6c
 80243da:	9218      	str	r2, [sp, #96]	; 0x60
 80243dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80243de:	9019      	str	r0, [sp, #100]	; 0x64
 80243e0:	6850      	ldr	r0, [r2, #4]
 80243e2:	9116      	str	r1, [sp, #88]	; 0x58
 80243e4:	9307      	str	r3, [sp, #28]
 80243e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80243ea:	fb00 1303 	mla	r3, r0, r3, r1
 80243ee:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80243f2:	6812      	ldr	r2, [r2, #0]
 80243f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80243f8:	930a      	str	r3, [sp, #40]	; 0x28
 80243fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8024400:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024402:	2b00      	cmp	r3, #0
 8024404:	dc03      	bgt.n	802440e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024406:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024408:	2b00      	cmp	r3, #0
 802440a:	f340 8387 	ble.w	8024b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802440e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024410:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024414:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024418:	1e48      	subs	r0, r1, #1
 802441a:	1e57      	subs	r7, r2, #1
 802441c:	9b07      	ldr	r3, [sp, #28]
 802441e:	2b00      	cmp	r3, #0
 8024420:	f340 8166 	ble.w	80246f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024424:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024428:	ea4f 4326 	mov.w	r3, r6, asr #16
 802442c:	d406      	bmi.n	802443c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802442e:	4584      	cmp	ip, r0
 8024430:	da04      	bge.n	802443c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024432:	2b00      	cmp	r3, #0
 8024434:	db02      	blt.n	802443c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024436:	42bb      	cmp	r3, r7
 8024438:	f2c0 815b 	blt.w	80246f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802443c:	f11c 0c01 	adds.w	ip, ip, #1
 8024440:	f100 814b 	bmi.w	80246da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024444:	4561      	cmp	r1, ip
 8024446:	f2c0 8148 	blt.w	80246da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802444a:	3301      	adds	r3, #1
 802444c:	f100 8145 	bmi.w	80246da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024450:	429a      	cmp	r2, r3
 8024452:	f2c0 8142 	blt.w	80246da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024456:	9b07      	ldr	r3, [sp, #28]
 8024458:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802445a:	9317      	str	r3, [sp, #92]	; 0x5c
 802445c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802445e:	2b00      	cmp	r3, #0
 8024460:	f340 8165 	ble.w	802472e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024464:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024466:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024468:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802446c:	1422      	asrs	r2, r4, #16
 802446e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024472:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024476:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802447a:	689b      	ldr	r3, [r3, #8]
 802447c:	f100 81d5 	bmi.w	802482a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024480:	f103 38ff 	add.w	r8, r3, #4294967295
 8024484:	4542      	cmp	r2, r8
 8024486:	f280 81d0 	bge.w	802482a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802448a:	f1bc 0f00 	cmp.w	ip, #0
 802448e:	f2c0 81cc 	blt.w	802482a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024492:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024496:	45c4      	cmp	ip, r8
 8024498:	f280 81c7 	bge.w	802482a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802449c:	b21b      	sxth	r3, r3
 802449e:	fb0c 2203 	mla	r2, ip, r3, r2
 80244a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80244a4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80244a8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80244ac:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80244b0:	2900      	cmp	r1, #0
 80244b2:	f000 8182 	beq.w	80247ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80244b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80244ba:	950b      	str	r5, [sp, #44]	; 0x2c
 80244bc:	0e2d      	lsrs	r5, r5, #24
 80244be:	9512      	str	r5, [sp, #72]	; 0x48
 80244c0:	b180      	cbz	r0, 80244e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80244c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80244c6:	3b01      	subs	r3, #1
 80244c8:	009b      	lsls	r3, r3, #2
 80244ca:	3304      	adds	r3, #4
 80244cc:	eb08 0c03 	add.w	ip, r8, r3
 80244d0:	f858 3003 	ldr.w	r3, [r8, r3]
 80244d4:	9308      	str	r3, [sp, #32]
 80244d6:	0e1b      	lsrs	r3, r3, #24
 80244d8:	9310      	str	r3, [sp, #64]	; 0x40
 80244da:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80244de:	930c      	str	r3, [sp, #48]	; 0x30
 80244e0:	0e1b      	lsrs	r3, r3, #24
 80244e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80244e4:	b289      	uxth	r1, r1
 80244e6:	b280      	uxth	r0, r0
 80244e8:	fb01 f900 	mul.w	r9, r1, r0
 80244ec:	0109      	lsls	r1, r1, #4
 80244ee:	eba1 0809 	sub.w	r8, r1, r9
 80244f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80244f4:	fa1f f888 	uxth.w	r8, r8
 80244f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80244fc:	fb08 f303 	mul.w	r3, r8, r3
 8024500:	b280      	uxth	r0, r0
 8024502:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024506:	1a09      	subs	r1, r1, r0
 8024508:	b289      	uxth	r1, r1
 802450a:	fb01 330e 	mla	r3, r1, lr, r3
 802450e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024510:	fb00 3305 	mla	r3, r0, r5, r3
 8024514:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024516:	fb09 3305 	mla	r3, r9, r5, r3
 802451a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802451e:	2b00      	cmp	r3, #0
 8024520:	f000 80d2 	beq.w	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024524:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024528:	d01b      	beq.n	8024562 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802452a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802452e:	fb0e fa0a 	mul.w	sl, lr, sl
 8024532:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024536:	fb0e fe02 	mul.w	lr, lr, r2
 802453a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802453e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024542:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024546:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802454a:	4452      	add	r2, sl
 802454c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024550:	0a12      	lsrs	r2, r2, #8
 8024552:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024556:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802455a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802455e:	ea42 020c 	orr.w	r2, r2, ip
 8024562:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024564:	2dff      	cmp	r5, #255	; 0xff
 8024566:	d021      	beq.n	80245ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024568:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802456a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802456e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024570:	fb05 fb0b 	mul.w	fp, r5, fp
 8024574:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024576:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802457a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802457e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024584:	fb05 fa0a 	mul.w	sl, r5, sl
 8024588:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802458c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024590:	44de      	add	lr, fp
 8024592:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024596:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802459a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802459e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245a6:	ea4e 050a 	orr.w	r5, lr, sl
 80245aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80245ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80245ae:	2dff      	cmp	r5, #255	; 0xff
 80245b0:	d021      	beq.n	80245f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80245b2:	9d08      	ldr	r5, [sp, #32]
 80245b4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80245b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80245ba:	fb05 fb0b 	mul.w	fp, r5, fp
 80245be:	9d08      	ldr	r5, [sp, #32]
 80245c0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80245c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80245c6:	fb05 fa0e 	mul.w	sl, r5, lr
 80245ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245da:	44de      	add	lr, fp
 80245dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245f0:	ea4e 050a 	orr.w	r5, lr, sl
 80245f4:	9508      	str	r5, [sp, #32]
 80245f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80245f8:	2dff      	cmp	r5, #255	; 0xff
 80245fa:	d021      	beq.n	8024640 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80245fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80245fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024602:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024604:	fb05 fb0b 	mul.w	fp, r5, fp
 8024608:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802460a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802460e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024612:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024614:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024618:	fb05 fa0a 	mul.w	sl, r5, sl
 802461c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024620:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024624:	44de      	add	lr, fp
 8024626:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802462a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802462e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024632:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024636:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802463a:	ea4e 050a 	orr.w	r5, lr, sl
 802463e:	950c      	str	r5, [sp, #48]	; 0x30
 8024640:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024642:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024646:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802464a:	fb08 fc0c 	mul.w	ip, r8, ip
 802464e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024652:	9d08      	ldr	r5, [sp, #32]
 8024654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024658:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802465c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024662:	2bff      	cmp	r3, #255	; 0xff
 8024664:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024668:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802466a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802466e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024672:	fb08 f80e 	mul.w	r8, r8, lr
 8024676:	fb01 8202 	mla	r2, r1, r2, r8
 802467a:	9908      	ldr	r1, [sp, #32]
 802467c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024680:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024684:	fb00 220a 	mla	r2, r0, sl, r2
 8024688:	990c      	ldr	r1, [sp, #48]	; 0x30
 802468a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802468e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024692:	fb09 2900 	mla	r9, r9, r0, r2
 8024696:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802469a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802469e:	ea4c 0c09 	orr.w	ip, ip, r9
 80246a2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80246a6:	f040 8091 	bne.w	80247cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80246aa:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80246ae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80246b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80246b6:	f022 0207 	bic.w	r2, r2, #7
 80246ba:	431a      	orrs	r2, r3
 80246bc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80246c0:	ea4c 0c02 	orr.w	ip, ip, r2
 80246c4:	f8a7 c000 	strh.w	ip, [r7]
 80246c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246ca:	3702      	adds	r7, #2
 80246cc:	441c      	add	r4, r3
 80246ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246d0:	441e      	add	r6, r3
 80246d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246d4:	3b01      	subs	r3, #1
 80246d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80246d8:	e6c0      	b.n	802445c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80246da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246dc:	441c      	add	r4, r3
 80246de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246e0:	441e      	add	r6, r3
 80246e2:	9b07      	ldr	r3, [sp, #28]
 80246e4:	3b01      	subs	r3, #1
 80246e6:	9307      	str	r3, [sp, #28]
 80246e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246ea:	3302      	adds	r3, #2
 80246ec:	930a      	str	r3, [sp, #40]	; 0x28
 80246ee:	e695      	b.n	802441c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80246f0:	d024      	beq.n	802473c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80246f2:	9b07      	ldr	r3, [sp, #28]
 80246f4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80246f6:	3b01      	subs	r3, #1
 80246f8:	fb00 4003 	mla	r0, r0, r3, r4
 80246fc:	1400      	asrs	r0, r0, #16
 80246fe:	f53f aeaa 	bmi.w	8024456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024702:	3901      	subs	r1, #1
 8024704:	4288      	cmp	r0, r1
 8024706:	f6bf aea6 	bge.w	8024456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802470a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802470c:	fb01 6303 	mla	r3, r1, r3, r6
 8024710:	141b      	asrs	r3, r3, #16
 8024712:	f53f aea0 	bmi.w	8024456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024716:	3a01      	subs	r2, #1
 8024718:	4293      	cmp	r3, r2
 802471a:	f6bf ae9c 	bge.w	8024456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802471e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024722:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8024726:	f1bb 0f00 	cmp.w	fp, #0
 802472a:	f300 809a 	bgt.w	8024862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802472e:	9b07      	ldr	r3, [sp, #28]
 8024730:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024736:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802473a:	930a      	str	r3, [sp, #40]	; 0x28
 802473c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802473e:	2b00      	cmp	r3, #0
 8024740:	f340 81ec 	ble.w	8024b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8024744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024748:	ee30 0a04 	vadd.f32	s0, s0, s8
 802474c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024750:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024754:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024758:	eef0 6a62 	vmov.f32	s13, s5
 802475c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024760:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024764:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024768:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802476c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024770:	ee16 4a90 	vmov	r4, s13
 8024774:	eef0 6a43 	vmov.f32	s13, s6
 8024778:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802477c:	ee12 2a90 	vmov	r2, s5
 8024780:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024784:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802478a:	fb92 f3f3 	sdiv	r3, r2, r3
 802478e:	ee13 2a10 	vmov	r2, s6
 8024792:	9327      	str	r3, [sp, #156]	; 0x9c
 8024794:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024796:	ee16 6a90 	vmov	r6, s13
 802479a:	fb92 f3f3 	sdiv	r3, r2, r3
 802479e:	9328      	str	r3, [sp, #160]	; 0xa0
 80247a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80247a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80247a4:	3b01      	subs	r3, #1
 80247a6:	9316      	str	r3, [sp, #88]	; 0x58
 80247a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247aa:	bf08      	it	eq
 80247ac:	4613      	moveq	r3, r2
 80247ae:	eeb0 3a67 	vmov.f32	s6, s15
 80247b2:	9307      	str	r3, [sp, #28]
 80247b4:	eef0 2a47 	vmov.f32	s5, s14
 80247b8:	e622      	b.n	8024400 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80247ba:	2800      	cmp	r0, #0
 80247bc:	f43f ae92 	beq.w	80244e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80247c0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80247c4:	9308      	str	r3, [sp, #32]
 80247c6:	0e1b      	lsrs	r3, r3, #24
 80247c8:	9310      	str	r3, [sp, #64]	; 0x40
 80247ca:	e68b      	b.n	80244e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80247cc:	43db      	mvns	r3, r3
 80247ce:	8839      	ldrh	r1, [r7, #0]
 80247d0:	fa5f f883 	uxtb.w	r8, r3
 80247d4:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80247d8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80247dc:	fb0e fe08 	mul.w	lr, lr, r8
 80247e0:	10c8      	asrs	r0, r1, #3
 80247e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80247e6:	fb00 f008 	mul.w	r0, r0, r8
 80247ea:	00cb      	lsls	r3, r1, #3
 80247ec:	f10e 0101 	add.w	r1, lr, #1
 80247f0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80247f4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80247f8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80247fc:	b2db      	uxtb	r3, r3
 80247fe:	f100 0e01 	add.w	lr, r0, #1
 8024802:	fb03 f308 	mul.w	r3, r3, r8
 8024806:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802480a:	4dc6      	ldr	r5, [pc, #792]	; (8024b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802480c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024810:	b2c9      	uxtb	r1, r1
 8024812:	00d2      	lsls	r2, r2, #3
 8024814:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8024818:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802481c:	430a      	orrs	r2, r1
 802481e:	1c59      	adds	r1, r3, #1
 8024820:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024824:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024828:	e748      	b.n	80246bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802482a:	f112 0801 	adds.w	r8, r2, #1
 802482e:	f53f af4b 	bmi.w	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024832:	4543      	cmp	r3, r8
 8024834:	f6ff af48 	blt.w	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024838:	f11c 0801 	adds.w	r8, ip, #1
 802483c:	f53f af44 	bmi.w	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024840:	45c6      	cmp	lr, r8
 8024842:	f6ff af41 	blt.w	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024846:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802484a:	fa0f f28e 	sxth.w	r2, lr
 802484e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024852:	9200      	str	r2, [sp, #0]
 8024854:	b21b      	sxth	r3, r3
 8024856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024858:	4639      	mov	r1, r7
 802485a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802485c:	f7ff fc87 	bl	802416e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024860:	e732      	b.n	80246c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024862:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024864:	1421      	asrs	r1, r4, #16
 8024866:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802486a:	1433      	asrs	r3, r6, #16
 802486c:	fb07 1303 	mla	r3, r7, r3, r1
 8024870:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024872:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024874:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024878:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802487c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024880:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024884:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024888:	2a00      	cmp	r2, #0
 802488a:	f000 8108 	beq.w	8024a9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802488e:	684d      	ldr	r5, [r1, #4]
 8024890:	950d      	str	r5, [sp, #52]	; 0x34
 8024892:	0e2d      	lsrs	r5, r5, #24
 8024894:	9514      	str	r5, [sp, #80]	; 0x50
 8024896:	b178      	cbz	r0, 80248b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024898:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802489c:	3f01      	subs	r7, #1
 802489e:	00bf      	lsls	r7, r7, #2
 80248a0:	3704      	adds	r7, #4
 80248a2:	eb01 0e07 	add.w	lr, r1, r7
 80248a6:	59c9      	ldr	r1, [r1, r7]
 80248a8:	9109      	str	r1, [sp, #36]	; 0x24
 80248aa:	0e09      	lsrs	r1, r1, #24
 80248ac:	9111      	str	r1, [sp, #68]	; 0x44
 80248ae:	f8de 1004 	ldr.w	r1, [lr, #4]
 80248b2:	910e      	str	r1, [sp, #56]	; 0x38
 80248b4:	0e09      	lsrs	r1, r1, #24
 80248b6:	9115      	str	r1, [sp, #84]	; 0x54
 80248b8:	b292      	uxth	r2, r2
 80248ba:	b280      	uxth	r0, r0
 80248bc:	fb02 f900 	mul.w	r9, r2, r0
 80248c0:	0112      	lsls	r2, r2, #4
 80248c2:	eba2 0e09 	sub.w	lr, r2, r9
 80248c6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80248ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80248cc:	fa1f fe8e 	uxth.w	lr, lr
 80248d0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80248d4:	fb0e f202 	mul.w	r2, lr, r2
 80248d8:	b280      	uxth	r0, r0
 80248da:	1a09      	subs	r1, r1, r0
 80248dc:	b289      	uxth	r1, r1
 80248de:	fb01 220c 	mla	r2, r1, ip, r2
 80248e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80248e4:	fb00 2205 	mla	r2, r0, r5, r2
 80248e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80248ea:	fb09 2205 	mla	r2, r9, r5, r2
 80248ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80248f2:	2a00      	cmp	r2, #0
 80248f4:	f000 80ca 	beq.w	8024a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80248f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80248fc:	d019      	beq.n	8024932 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80248fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024902:	fb0c fa0a 	mul.w	sl, ip, sl
 8024906:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802490a:	fb0c fc03 	mul.w	ip, ip, r3
 802490e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024912:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024916:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802491a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802491e:	4453      	add	r3, sl
 8024920:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024924:	0a1b      	lsrs	r3, r3, #8
 8024926:	0a3f      	lsrs	r7, r7, #8
 8024928:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802492c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024930:	433b      	orrs	r3, r7
 8024932:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024934:	2dff      	cmp	r5, #255	; 0xff
 8024936:	d020      	beq.n	802497a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024938:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802493a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802493e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024940:	436f      	muls	r7, r5
 8024942:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024944:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024948:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802494c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802494e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024952:	fb05 fa0a 	mul.w	sl, r5, sl
 8024956:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802495a:	44bc      	add	ip, r7
 802495c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024960:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024964:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024968:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802496c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024970:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024974:	ea4c 050a 	orr.w	r5, ip, sl
 8024978:	950d      	str	r5, [sp, #52]	; 0x34
 802497a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802497c:	2dff      	cmp	r5, #255	; 0xff
 802497e:	d020      	beq.n	80249c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8024980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024982:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024986:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024988:	436f      	muls	r7, r5
 802498a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802498c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024990:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024992:	fb05 fa0c 	mul.w	sl, r5, ip
 8024996:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802499a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802499e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249a2:	44bc      	add	ip, r7
 80249a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249bc:	ea4c 050a 	orr.w	r5, ip, sl
 80249c0:	9509      	str	r5, [sp, #36]	; 0x24
 80249c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80249c4:	2dff      	cmp	r5, #255	; 0xff
 80249c6:	d020      	beq.n	8024a0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80249c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80249ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80249ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80249d0:	436f      	muls	r7, r5
 80249d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80249d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249d8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80249dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80249de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80249e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249ea:	44bc      	add	ip, r7
 80249ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a04:	ea4c 050a 	orr.w	r5, ip, sl
 8024a08:	950e      	str	r5, [sp, #56]	; 0x38
 8024a0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a0c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024a10:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024a14:	fb0e f707 	mul.w	r7, lr, r7
 8024a18:	fb01 770c 	mla	r7, r1, ip, r7
 8024a1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a22:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024a26:	fb00 770c 	mla	r7, r0, ip, r7
 8024a2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024a2c:	2aff      	cmp	r2, #255	; 0xff
 8024a2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024a32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a34:	fb09 770c 	mla	r7, r9, ip, r7
 8024a38:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024a3c:	fb0e fe0c 	mul.w	lr, lr, ip
 8024a40:	fb01 e303 	mla	r3, r1, r3, lr
 8024a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024a46:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8024a4a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024a4e:	fb00 330a 	mla	r3, r0, sl, r3
 8024a52:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024a54:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024a58:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024a5c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024a60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a64:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a68:	ea47 070c 	orr.w	r7, r7, ip
 8024a6c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8024a70:	d11e      	bne.n	8024ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024a72:	097a      	lsrs	r2, r7, #5
 8024a74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8024a78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a7c:	f023 0307 	bic.w	r3, r3, #7
 8024a80:	4313      	orrs	r3, r2
 8024a82:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024a86:	431f      	orrs	r7, r3
 8024a88:	f8a8 7000 	strh.w	r7, [r8]
 8024a8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a8e:	f108 0802 	add.w	r8, r8, #2
 8024a92:	441c      	add	r4, r3
 8024a94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a9a:	441e      	add	r6, r3
 8024a9c:	e643      	b.n	8024726 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024a9e:	2800      	cmp	r0, #0
 8024aa0:	f43f af0a 	beq.w	80248b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024aa4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8024aaa:	0e09      	lsrs	r1, r1, #24
 8024aac:	9111      	str	r1, [sp, #68]	; 0x44
 8024aae:	e703      	b.n	80248b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024ab0:	43d2      	mvns	r2, r2
 8024ab2:	f8b8 1000 	ldrh.w	r1, [r8]
 8024ab6:	fa5f fe82 	uxtb.w	lr, r2
 8024aba:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8024abe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024ac2:	fb0c fc0e 	mul.w	ip, ip, lr
 8024ac6:	10c8      	asrs	r0, r1, #3
 8024ac8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024acc:	fb00 f00e 	mul.w	r0, r0, lr
 8024ad0:	00ca      	lsls	r2, r1, #3
 8024ad2:	f10c 0101 	add.w	r1, ip, #1
 8024ad6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024ada:	b2d2      	uxtb	r2, r2
 8024adc:	0c39      	lsrs	r1, r7, #16
 8024ade:	fb02 f20e 	mul.w	r2, r2, lr
 8024ae2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8024ae6:	490f      	ldr	r1, [pc, #60]	; (8024b24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024ae8:	fa5f fc8c 	uxtb.w	ip, ip
 8024aec:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8024af0:	1c41      	adds	r1, r0, #1
 8024af2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024af6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024afa:	1c51      	adds	r1, r2, #1
 8024afc:	00c0      	lsls	r0, r0, #3
 8024afe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024b02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024b06:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024b0a:	ea4c 0c00 	orr.w	ip, ip, r0
 8024b0e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8024b12:	ea47 0c0c 	orr.w	ip, r7, ip
 8024b16:	f8a8 c000 	strh.w	ip, [r8]
 8024b1a:	e7b7      	b.n	8024a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024b1c:	b01b      	add	sp, #108	; 0x6c
 8024b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b22:	bf00      	nop
 8024b24:	fffff800 	.word	0xfffff800

08024b28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8024b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b2c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8024b30:	2d00      	cmp	r5, #0
 8024b32:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8024b36:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024b3a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8024b3e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024b42:	fb05 0e03 	mla	lr, r5, r3, r0
 8024b46:	f2c0 808c 	blt.w	8024c62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024b4a:	45a9      	cmp	r9, r5
 8024b4c:	f340 8089 	ble.w	8024c62 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8024b50:	2800      	cmp	r0, #0
 8024b52:	f2c0 8084 	blt.w	8024c5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024b56:	4580      	cmp	r8, r0
 8024b58:	f340 8081 	ble.w	8024c5e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8024b5c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024b60:	5d16      	ldrb	r6, [r2, r4]
 8024b62:	f01e 0f01 	tst.w	lr, #1
 8024b66:	bf0c      	ite	eq
 8024b68:	f006 060f 	andeq.w	r6, r6, #15
 8024b6c:	1136      	asrne	r6, r6, #4
 8024b6e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024b72:	b2f6      	uxtb	r6, r6
 8024b74:	1c44      	adds	r4, r0, #1
 8024b76:	d477      	bmi.n	8024c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024b78:	45a0      	cmp	r8, r4
 8024b7a:	dd75      	ble.n	8024c68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8024b7c:	2f00      	cmp	r7, #0
 8024b7e:	d075      	beq.n	8024c6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8024b80:	f10e 0a01 	add.w	sl, lr, #1
 8024b84:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8024b88:	5d14      	ldrb	r4, [r2, r4]
 8024b8a:	f01a 0f01 	tst.w	sl, #1
 8024b8e:	bf0c      	ite	eq
 8024b90:	f004 040f 	andeq.w	r4, r4, #15
 8024b94:	1124      	asrne	r4, r4, #4
 8024b96:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024b9a:	b2e4      	uxtb	r4, r4
 8024b9c:	3501      	adds	r5, #1
 8024b9e:	d469      	bmi.n	8024c74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024ba0:	45a9      	cmp	r9, r5
 8024ba2:	dd67      	ble.n	8024c74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8024ba4:	f1bc 0f00 	cmp.w	ip, #0
 8024ba8:	d067      	beq.n	8024c7a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8024baa:	2800      	cmp	r0, #0
 8024bac:	db60      	blt.n	8024c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024bae:	4580      	cmp	r8, r0
 8024bb0:	dd5e      	ble.n	8024c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8024bb2:	eb03 090e 	add.w	r9, r3, lr
 8024bb6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8024bba:	5d55      	ldrb	r5, [r2, r5]
 8024bbc:	f019 0f01 	tst.w	r9, #1
 8024bc0:	bf0c      	ite	eq
 8024bc2:	f005 050f 	andeq.w	r5, r5, #15
 8024bc6:	112d      	asrne	r5, r5, #4
 8024bc8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024bcc:	b2ed      	uxtb	r5, r5
 8024bce:	3001      	adds	r0, #1
 8024bd0:	d456      	bmi.n	8024c80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024bd2:	4580      	cmp	r8, r0
 8024bd4:	dd54      	ble.n	8024c80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8024bd6:	2f00      	cmp	r7, #0
 8024bd8:	d054      	beq.n	8024c84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8024bda:	3301      	adds	r3, #1
 8024bdc:	449e      	add	lr, r3
 8024bde:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024be2:	5cd0      	ldrb	r0, [r2, r3]
 8024be4:	f01e 0f01 	tst.w	lr, #1
 8024be8:	bf0c      	ite	eq
 8024bea:	f000 000f 	andeq.w	r0, r0, #15
 8024bee:	1100      	asrne	r0, r0, #4
 8024bf0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024bf4:	b2c3      	uxtb	r3, r0
 8024bf6:	b2ba      	uxth	r2, r7
 8024bf8:	fa1f fc8c 	uxth.w	ip, ip
 8024bfc:	fb02 f00c 	mul.w	r0, r2, ip
 8024c00:	0112      	lsls	r2, r2, #4
 8024c02:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024c06:	1a12      	subs	r2, r2, r0
 8024c08:	b292      	uxth	r2, r2
 8024c0a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8024c0e:	4362      	muls	r2, r4
 8024c10:	fa1f fc8c 	uxth.w	ip, ip
 8024c14:	eba7 070c 	sub.w	r7, r7, ip
 8024c18:	b2bf      	uxth	r7, r7
 8024c1a:	fb06 2207 	mla	r2, r6, r7, r2
 8024c1e:	fb0c 2505 	mla	r5, ip, r5, r2
 8024c22:	fb00 5303 	mla	r3, r0, r3, r5
 8024c26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c2a:	b1b3      	cbz	r3, 8024c5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024c2c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8024c30:	435a      	muls	r2, r3
 8024c32:	1c53      	adds	r3, r2, #1
 8024c34:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c38:	4a2d      	ldr	r2, [pc, #180]	; (8024cf0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8024c3a:	121b      	asrs	r3, r3, #8
 8024c3c:	6812      	ldr	r2, [r2, #0]
 8024c3e:	2bff      	cmp	r3, #255	; 0xff
 8024c40:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8024c44:	d120      	bne.n	8024c88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8024c46:	4b2b      	ldr	r3, [pc, #172]	; (8024cf4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8024c48:	0950      	lsrs	r0, r2, #5
 8024c4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c4e:	4033      	ands	r3, r6
 8024c50:	4318      	orrs	r0, r3
 8024c52:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024c56:	4302      	orrs	r2, r0
 8024c58:	800a      	strh	r2, [r1, #0]
 8024c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c5e:	2600      	movs	r6, #0
 8024c60:	e788      	b.n	8024b74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8024c62:	2400      	movs	r4, #0
 8024c64:	4626      	mov	r6, r4
 8024c66:	e799      	b.n	8024b9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024c68:	2400      	movs	r4, #0
 8024c6a:	e797      	b.n	8024b9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024c6c:	463c      	mov	r4, r7
 8024c6e:	e795      	b.n	8024b9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8024c70:	2500      	movs	r5, #0
 8024c72:	e7ac      	b.n	8024bce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8024c74:	2300      	movs	r3, #0
 8024c76:	461d      	mov	r5, r3
 8024c78:	e7bd      	b.n	8024bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024c7a:	4663      	mov	r3, ip
 8024c7c:	4665      	mov	r5, ip
 8024c7e:	e7ba      	b.n	8024bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024c80:	2300      	movs	r3, #0
 8024c82:	e7b8      	b.n	8024bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024c84:	463b      	mov	r3, r7
 8024c86:	e7b6      	b.n	8024bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8024c88:	b29f      	uxth	r7, r3
 8024c8a:	43db      	mvns	r3, r3
 8024c8c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8024c90:	880d      	ldrh	r5, [r1, #0]
 8024c92:	fb10 f007 	smulbb	r0, r0, r7
 8024c96:	b2f6      	uxtb	r6, r6
 8024c98:	b2d2      	uxtb	r2, r2
 8024c9a:	122c      	asrs	r4, r5, #8
 8024c9c:	fb12 f207 	smulbb	r2, r2, r7
 8024ca0:	fb16 f607 	smulbb	r6, r6, r7
 8024ca4:	b2db      	uxtb	r3, r3
 8024ca6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024caa:	fb04 0403 	mla	r4, r4, r3, r0
 8024cae:	10e8      	asrs	r0, r5, #3
 8024cb0:	00ed      	lsls	r5, r5, #3
 8024cb2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024cb6:	b2ed      	uxtb	r5, r5
 8024cb8:	fb00 6603 	mla	r6, r0, r3, r6
 8024cbc:	fb05 2303 	mla	r3, r5, r3, r2
 8024cc0:	b2a4      	uxth	r4, r4
 8024cc2:	b29a      	uxth	r2, r3
 8024cc4:	1c63      	adds	r3, r4, #1
 8024cc6:	b2b0      	uxth	r0, r6
 8024cc8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024ccc:	1c53      	adds	r3, r2, #1
 8024cce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024cd2:	1c42      	adds	r2, r0, #1
 8024cd4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024cd8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8024cdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024ce0:	0940      	lsrs	r0, r0, #5
 8024ce2:	4323      	orrs	r3, r4
 8024ce4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024ce8:	4303      	orrs	r3, r0
 8024cea:	800b      	strh	r3, [r1, #0]
 8024cec:	e7b5      	b.n	8024c5a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8024cee:	bf00      	nop
 8024cf0:	2004f66c 	.word	0x2004f66c
 8024cf4:	00fff800 	.word	0x00fff800

08024cf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cfc:	b097      	sub	sp, #92	; 0x5c
 8024cfe:	9214      	str	r2, [sp, #80]	; 0x50
 8024d00:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024d02:	9015      	str	r0, [sp, #84]	; 0x54
 8024d04:	9309      	str	r3, [sp, #36]	; 0x24
 8024d06:	6850      	ldr	r0, [r2, #4]
 8024d08:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024d0c:	910d      	str	r1, [sp, #52]	; 0x34
 8024d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d10:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024d14:	fb00 1303 	mla	r3, r0, r3, r1
 8024d18:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024d1c:	6812      	ldr	r2, [r2, #0]
 8024d1e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024d22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d24:	689b      	ldr	r3, [r3, #8]
 8024d26:	3301      	adds	r3, #1
 8024d28:	f023 0301 	bic.w	r3, r3, #1
 8024d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8024d2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d30:	681f      	ldr	r7, [r3, #0]
 8024d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d34:	2b00      	cmp	r3, #0
 8024d36:	dc03      	bgt.n	8024d40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	f340 8287 	ble.w	802524e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024d40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d4a:	1e48      	subs	r0, r1, #1
 8024d4c:	f102 3cff 	add.w	ip, r2, #4294967295
 8024d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	f340 80c3 	ble.w	8024ede <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024d58:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024d5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024d60:	d406      	bmi.n	8024d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d62:	4586      	cmp	lr, r0
 8024d64:	da04      	bge.n	8024d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	db02      	blt.n	8024d70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024d6a:	4563      	cmp	r3, ip
 8024d6c:	f2c0 80b8 	blt.w	8024ee0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024d70:	f11e 0e01 	adds.w	lr, lr, #1
 8024d74:	f100 80a9 	bmi.w	8024eca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024d78:	4571      	cmp	r1, lr
 8024d7a:	f2c0 80a6 	blt.w	8024eca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024d7e:	3301      	adds	r3, #1
 8024d80:	f100 80a3 	bmi.w	8024eca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024d84:	429a      	cmp	r2, r3
 8024d86:	f2c0 80a0 	blt.w	8024eca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024d8a:	46c8      	mov	r8, r9
 8024d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d8e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8024d92:	930e      	str	r3, [sp, #56]	; 0x38
 8024d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	f340 80c2 	ble.w	8024f20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024d9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d9e:	1430      	asrs	r0, r6, #16
 8024da0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024da4:	1423      	asrs	r3, r4, #16
 8024da6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024daa:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024dae:	f100 814d 	bmi.w	802504c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024db2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024db6:	455b      	cmp	r3, fp
 8024db8:	f280 8148 	bge.w	802504c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024dbc:	2800      	cmp	r0, #0
 8024dbe:	f2c0 8145 	blt.w	802504c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024dc2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024dc6:	4558      	cmp	r0, fp
 8024dc8:	f280 8140 	bge.w	802504c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8024dcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024dce:	fb00 3305 	mla	r3, r0, r5, r3
 8024dd2:	0858      	lsrs	r0, r3, #1
 8024dd4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024dd8:	07dd      	lsls	r5, r3, #31
 8024dda:	bf54      	ite	pl
 8024ddc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024de0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024de4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024de8:	fa5f fc8c 	uxtb.w	ip, ip
 8024dec:	2a00      	cmp	r2, #0
 8024dee:	f000 80db 	beq.w	8024fa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8024df2:	1c58      	adds	r0, r3, #1
 8024df4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024df8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8024dfc:	07c0      	lsls	r0, r0, #31
 8024dfe:	bf54      	ite	pl
 8024e00:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024e04:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024e08:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024e0c:	fa5f f08e 	uxtb.w	r0, lr
 8024e10:	9010      	str	r0, [sp, #64]	; 0x40
 8024e12:	b1c9      	cbz	r1, 8024e48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8024e14:	4453      	add	r3, sl
 8024e16:	0858      	lsrs	r0, r3, #1
 8024e18:	5c38      	ldrb	r0, [r7, r0]
 8024e1a:	07dd      	lsls	r5, r3, #31
 8024e1c:	bf54      	ite	pl
 8024e1e:	f000 000f 	andpl.w	r0, r0, #15
 8024e22:	1100      	asrmi	r0, r0, #4
 8024e24:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024e28:	3301      	adds	r3, #1
 8024e2a:	b2c0      	uxtb	r0, r0
 8024e2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8024e2e:	0858      	lsrs	r0, r3, #1
 8024e30:	f817 e000 	ldrb.w	lr, [r7, r0]
 8024e34:	07dd      	lsls	r5, r3, #31
 8024e36:	bf54      	ite	pl
 8024e38:	f00e 030f 	andpl.w	r3, lr, #15
 8024e3c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024e40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024e44:	b2db      	uxtb	r3, r3
 8024e46:	9311      	str	r3, [sp, #68]	; 0x44
 8024e48:	b292      	uxth	r2, r2
 8024e4a:	b289      	uxth	r1, r1
 8024e4c:	fb02 f301 	mul.w	r3, r2, r1
 8024e50:	0112      	lsls	r2, r2, #4
 8024e52:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024e56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024e58:	1ad2      	subs	r2, r2, r3
 8024e5a:	b292      	uxth	r2, r2
 8024e5c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024e60:	436a      	muls	r2, r5
 8024e62:	b289      	uxth	r1, r1
 8024e64:	1a40      	subs	r0, r0, r1
 8024e66:	b280      	uxth	r0, r0
 8024e68:	fb0c 2c00 	mla	ip, ip, r0, r2
 8024e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024e6e:	fb01 c102 	mla	r1, r1, r2, ip
 8024e72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024e74:	fb03 1302 	mla	r3, r3, r2, r1
 8024e78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e7c:	b1db      	cbz	r3, 8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024e80:	4353      	muls	r3, r2
 8024e82:	1c5a      	adds	r2, r3, #1
 8024e84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024e88:	4ac6      	ldr	r2, [pc, #792]	; (80251a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8024e8a:	121b      	asrs	r3, r3, #8
 8024e8c:	6812      	ldr	r2, [r2, #0]
 8024e8e:	2bff      	cmp	r3, #255	; 0xff
 8024e90:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8024e94:	f040 8099 	bne.w	8024fca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8024e98:	0953      	lsrs	r3, r2, #5
 8024e9a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8024e9e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ea2:	f02c 0c07 	bic.w	ip, ip, #7
 8024ea6:	ea43 0c0c 	orr.w	ip, r3, ip
 8024eaa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024eae:	ea4c 0202 	orr.w	r2, ip, r2
 8024eb2:	f8a8 2000 	strh.w	r2, [r8]
 8024eb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024eb8:	f108 0802 	add.w	r8, r8, #2
 8024ebc:	441c      	add	r4, r3
 8024ebe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ec0:	441e      	add	r6, r3
 8024ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024ec4:	3b01      	subs	r3, #1
 8024ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8024ec8:	e764      	b.n	8024d94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024ecc:	f109 0902 	add.w	r9, r9, #2
 8024ed0:	441c      	add	r4, r3
 8024ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ed4:	441e      	add	r6, r3
 8024ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ed8:	3b01      	subs	r3, #1
 8024eda:	9309      	str	r3, [sp, #36]	; 0x24
 8024edc:	e738      	b.n	8024d50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024ede:	d024      	beq.n	8024f2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8024ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ee2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024ee4:	3b01      	subs	r3, #1
 8024ee6:	fb00 4003 	mla	r0, r0, r3, r4
 8024eea:	1400      	asrs	r0, r0, #16
 8024eec:	f53f af4d 	bmi.w	8024d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ef0:	3901      	subs	r1, #1
 8024ef2:	4288      	cmp	r0, r1
 8024ef4:	f6bf af49 	bge.w	8024d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024ef8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024efa:	fb01 6303 	mla	r3, r1, r3, r6
 8024efe:	141b      	asrs	r3, r3, #16
 8024f00:	f53f af43 	bmi.w	8024d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024f04:	3a01      	subs	r2, #1
 8024f06:	4293      	cmp	r3, r2
 8024f08:	f6bf af3f 	bge.w	8024d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024f0c:	46c8      	mov	r8, r9
 8024f0e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8024f12:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024f16:	930e      	str	r3, [sp, #56]	; 0x38
 8024f18:	f1bb 0f00 	cmp.w	fp, #0
 8024f1c:	f300 80b7 	bgt.w	802508e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8024f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f22:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024f26:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8024f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f2c:	2b00      	cmp	r3, #0
 8024f2e:	f340 818e 	ble.w	802524e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8024f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024f36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024f3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024f42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f46:	eef0 6a62 	vmov.f32	s13, s5
 8024f4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024f4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f5e:	ee16 4a90 	vmov	r4, s13
 8024f62:	eef0 6a43 	vmov.f32	s13, s6
 8024f66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f6a:	ee12 2a90 	vmov	r2, s5
 8024f6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f78:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f7c:	ee13 2a10 	vmov	r2, s6
 8024f80:	9323      	str	r3, [sp, #140]	; 0x8c
 8024f82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f84:	ee16 6a90 	vmov	r6, s13
 8024f88:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f8c:	9324      	str	r3, [sp, #144]	; 0x90
 8024f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024f92:	3b01      	subs	r3, #1
 8024f94:	930d      	str	r3, [sp, #52]	; 0x34
 8024f96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024f98:	bf08      	it	eq
 8024f9a:	4613      	moveq	r3, r2
 8024f9c:	eeb0 3a67 	vmov.f32	s6, s15
 8024fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8024fa2:	eef0 2a47 	vmov.f32	s5, s14
 8024fa6:	e6c4      	b.n	8024d32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024fa8:	2900      	cmp	r1, #0
 8024faa:	f43f af4d 	beq.w	8024e48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8024fae:	eb0a 0003 	add.w	r0, sl, r3
 8024fb2:	0843      	lsrs	r3, r0, #1
 8024fb4:	5cfb      	ldrb	r3, [r7, r3]
 8024fb6:	07c0      	lsls	r0, r0, #31
 8024fb8:	bf54      	ite	pl
 8024fba:	f003 030f 	andpl.w	r3, r3, #15
 8024fbe:	111b      	asrmi	r3, r3, #4
 8024fc0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024fc4:	b2db      	uxtb	r3, r3
 8024fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024fc8:	e73e      	b.n	8024e48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8024fca:	fa1f fb83 	uxth.w	fp, r3
 8024fce:	43db      	mvns	r3, r3
 8024fd0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8024fd4:	f8b8 e000 	ldrh.w	lr, [r8]
 8024fd8:	fb11 f10b 	smulbb	r1, r1, fp
 8024fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8024fe0:	b2d2      	uxtb	r2, r2
 8024fe2:	ea4f 202e 	mov.w	r0, lr, asr #8
 8024fe6:	fb1c fc0b 	smulbb	ip, ip, fp
 8024fea:	fb12 fb0b 	smulbb	fp, r2, fp
 8024fee:	b2db      	uxtb	r3, r3
 8024ff0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024ff4:	fb00 1003 	mla	r0, r0, r3, r1
 8024ff8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8024ffc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025000:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025004:	fa5f fe8e 	uxtb.w	lr, lr
 8025008:	fb01 cc03 	mla	ip, r1, r3, ip
 802500c:	fb0e bb03 	mla	fp, lr, r3, fp
 8025010:	b280      	uxth	r0, r0
 8025012:	1c43      	adds	r3, r0, #1
 8025014:	fa1f fc8c 	uxth.w	ip, ip
 8025018:	fa1f fb8b 	uxth.w	fp, fp
 802501c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025020:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8025024:	f10c 0101 	add.w	r1, ip, #1
 8025028:	f10b 0001 	add.w	r0, fp, #1
 802502c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025030:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025034:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8025038:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802503c:	4318      	orrs	r0, r3
 802503e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025042:	ea40 000c 	orr.w	r0, r0, ip
 8025046:	f8a8 0000 	strh.w	r0, [r8]
 802504a:	e734      	b.n	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802504c:	f113 0b01 	adds.w	fp, r3, #1
 8025050:	f53f af31 	bmi.w	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025054:	45dc      	cmp	ip, fp
 8025056:	f6ff af2e 	blt.w	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802505a:	f110 0b01 	adds.w	fp, r0, #1
 802505e:	f53f af2a 	bmi.w	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025062:	45de      	cmp	lr, fp
 8025064:	f6ff af27 	blt.w	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025068:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802506a:	9302      	str	r3, [sp, #8]
 802506c:	fa0f f38e 	sxth.w	r3, lr
 8025070:	9301      	str	r3, [sp, #4]
 8025072:	fa0f f38c 	sxth.w	r3, ip
 8025076:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802507a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802507e:	9300      	str	r3, [sp, #0]
 8025080:	463a      	mov	r2, r7
 8025082:	4653      	mov	r3, sl
 8025084:	4641      	mov	r1, r8
 8025086:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025088:	f7ff fd4e 	bl	8024b28 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802508c:	e713      	b.n	8024eb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802508e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025090:	1422      	asrs	r2, r4, #16
 8025092:	1433      	asrs	r3, r6, #16
 8025094:	fb05 2303 	mla	r3, r5, r3, r2
 8025098:	085a      	lsrs	r2, r3, #1
 802509a:	5cba      	ldrb	r2, [r7, r2]
 802509c:	07dd      	lsls	r5, r3, #31
 802509e:	bf54      	ite	pl
 80250a0:	f002 020f 	andpl.w	r2, r2, #15
 80250a4:	1112      	asrmi	r2, r2, #4
 80250a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80250aa:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80250ae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80250b2:	b2d2      	uxtb	r2, r2
 80250b4:	2900      	cmp	r1, #0
 80250b6:	d077      	beq.n	80251a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80250b8:	f103 0e01 	add.w	lr, r3, #1
 80250bc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80250c0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80250c4:	f01e 0f01 	tst.w	lr, #1
 80250c8:	bf0c      	ite	eq
 80250ca:	f00c 0c0f 	andeq.w	ip, ip, #15
 80250ce:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80250d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80250d6:	fa5f f58c 	uxtb.w	r5, ip
 80250da:	9512      	str	r5, [sp, #72]	; 0x48
 80250dc:	b300      	cbz	r0, 8025120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80250de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80250e0:	442b      	add	r3, r5
 80250e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80250e6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80250ea:	07dd      	lsls	r5, r3, #31
 80250ec:	bf54      	ite	pl
 80250ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 80250f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80250f6:	3301      	adds	r3, #1
 80250f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80250fc:	fa5f f58c 	uxtb.w	r5, ip
 8025100:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025104:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025108:	950c      	str	r5, [sp, #48]	; 0x30
 802510a:	07dd      	lsls	r5, r3, #31
 802510c:	bf54      	ite	pl
 802510e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025112:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025116:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802511a:	fa5f f38c 	uxtb.w	r3, ip
 802511e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025120:	b289      	uxth	r1, r1
 8025122:	b280      	uxth	r0, r0
 8025124:	fb01 f300 	mul.w	r3, r1, r0
 8025128:	0109      	lsls	r1, r1, #4
 802512a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802512e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025130:	1ac9      	subs	r1, r1, r3
 8025132:	b289      	uxth	r1, r1
 8025134:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025138:	4369      	muls	r1, r5
 802513a:	b280      	uxth	r0, r0
 802513c:	ebac 0c00 	sub.w	ip, ip, r0
 8025140:	fa1f fc8c 	uxth.w	ip, ip
 8025144:	fb02 120c 	mla	r2, r2, ip, r1
 8025148:	990c      	ldr	r1, [sp, #48]	; 0x30
 802514a:	fb00 2001 	mla	r0, r0, r1, r2
 802514e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025150:	fb03 0302 	mla	r3, r3, r2, r0
 8025154:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025158:	b1d3      	cbz	r3, 8025190 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802515a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802515c:	4353      	muls	r3, r2
 802515e:	1c5a      	adds	r2, r3, #1
 8025160:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025164:	4a0f      	ldr	r2, [pc, #60]	; (80251a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025166:	121b      	asrs	r3, r3, #8
 8025168:	6812      	ldr	r2, [r2, #0]
 802516a:	2bff      	cmp	r3, #255	; 0xff
 802516c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025170:	d12e      	bne.n	80251d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025172:	0953      	lsrs	r3, r2, #5
 8025174:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025178:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802517c:	f02c 0c07 	bic.w	ip, ip, #7
 8025180:	ea43 0c0c 	orr.w	ip, r3, ip
 8025184:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025188:	ea4c 0202 	orr.w	r2, ip, r2
 802518c:	f8a8 2000 	strh.w	r2, [r8]
 8025190:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025192:	f108 0802 	add.w	r8, r8, #2
 8025196:	441c      	add	r4, r3
 8025198:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802519a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802519e:	441e      	add	r6, r3
 80251a0:	e6ba      	b.n	8024f18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80251a2:	bf00      	nop
 80251a4:	2004f66c 	.word	0x2004f66c
 80251a8:	2800      	cmp	r0, #0
 80251aa:	d0b9      	beq.n	8025120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80251ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80251ae:	442b      	add	r3, r5
 80251b0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80251b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80251b8:	07db      	lsls	r3, r3, #31
 80251ba:	bf54      	ite	pl
 80251bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80251c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80251c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80251c8:	fa5f f38c 	uxtb.w	r3, ip
 80251cc:	930c      	str	r3, [sp, #48]	; 0x30
 80251ce:	e7a7      	b.n	8025120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80251d0:	fa1f fa83 	uxth.w	sl, r3
 80251d4:	43db      	mvns	r3, r3
 80251d6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80251da:	f8b8 e000 	ldrh.w	lr, [r8]
 80251de:	fb11 f10a 	smulbb	r1, r1, sl
 80251e2:	b2d2      	uxtb	r2, r2
 80251e4:	ea4f 202e 	mov.w	r0, lr, asr #8
 80251e8:	fb12 f20a 	smulbb	r2, r2, sl
 80251ec:	b2db      	uxtb	r3, r3
 80251ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80251f2:	fb00 1003 	mla	r0, r0, r3, r1
 80251f6:	fa5f fc8c 	uxtb.w	ip, ip
 80251fa:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80251fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025202:	fb1c fc0a 	smulbb	ip, ip, sl
 8025206:	fa5f fe8e 	uxtb.w	lr, lr
 802520a:	fb0e 2203 	mla	r2, lr, r3, r2
 802520e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025212:	fb01 cc03 	mla	ip, r1, r3, ip
 8025216:	b280      	uxth	r0, r0
 8025218:	b292      	uxth	r2, r2
 802521a:	1c43      	adds	r3, r0, #1
 802521c:	1c51      	adds	r1, r2, #1
 802521e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025222:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8025226:	fa1f fc8c 	uxth.w	ip, ip
 802522a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802522e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025232:	4308      	orrs	r0, r1
 8025234:	f10c 0101 	add.w	r1, ip, #1
 8025238:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802523c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025240:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025244:	ea40 000c 	orr.w	r0, r0, ip
 8025248:	f8a8 0000 	strh.w	r0, [r8]
 802524c:	e7a0      	b.n	8025190 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802524e:	b017      	add	sp, #92	; 0x5c
 8025250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025254 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8025254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025258:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802525c:	2d00      	cmp	r5, #0
 802525e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8025262:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025266:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802526a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802526e:	fb05 0e03 	mla	lr, r5, r3, r0
 8025272:	f2c0 80b0 	blt.w	80253d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025276:	45a9      	cmp	r9, r5
 8025278:	f340 80ad 	ble.w	80253d6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802527c:	2800      	cmp	r0, #0
 802527e:	f2c0 80a8 	blt.w	80253d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025282:	4580      	cmp	r8, r0
 8025284:	f340 80a5 	ble.w	80253d2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025288:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802528c:	5d16      	ldrb	r6, [r2, r4]
 802528e:	f01e 0f01 	tst.w	lr, #1
 8025292:	bf0c      	ite	eq
 8025294:	f006 060f 	andeq.w	r6, r6, #15
 8025298:	1136      	asrne	r6, r6, #4
 802529a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802529e:	b2f6      	uxtb	r6, r6
 80252a0:	1c44      	adds	r4, r0, #1
 80252a2:	f100 809b 	bmi.w	80253dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80252a6:	45a0      	cmp	r8, r4
 80252a8:	f340 8098 	ble.w	80253dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80252ac:	2f00      	cmp	r7, #0
 80252ae:	f000 8097 	beq.w	80253e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80252b2:	f10e 0a01 	add.w	sl, lr, #1
 80252b6:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80252ba:	5d14      	ldrb	r4, [r2, r4]
 80252bc:	f01a 0f01 	tst.w	sl, #1
 80252c0:	bf0c      	ite	eq
 80252c2:	f004 040f 	andeq.w	r4, r4, #15
 80252c6:	1124      	asrne	r4, r4, #4
 80252c8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80252cc:	b2e4      	uxtb	r4, r4
 80252ce:	3501      	adds	r5, #1
 80252d0:	f100 808a 	bmi.w	80253e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80252d4:	45a9      	cmp	r9, r5
 80252d6:	f340 8087 	ble.w	80253e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80252da:	f1bc 0f00 	cmp.w	ip, #0
 80252de:	f000 8086 	beq.w	80253ee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80252e2:	2800      	cmp	r0, #0
 80252e4:	db7e      	blt.n	80253e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80252e6:	4580      	cmp	r8, r0
 80252e8:	dd7c      	ble.n	80253e4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80252ea:	eb03 090e 	add.w	r9, r3, lr
 80252ee:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80252f2:	5d55      	ldrb	r5, [r2, r5]
 80252f4:	f019 0f01 	tst.w	r9, #1
 80252f8:	bf0c      	ite	eq
 80252fa:	f005 050f 	andeq.w	r5, r5, #15
 80252fe:	112d      	asrne	r5, r5, #4
 8025300:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025304:	b2ed      	uxtb	r5, r5
 8025306:	3001      	adds	r0, #1
 8025308:	d474      	bmi.n	80253f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802530a:	4580      	cmp	r8, r0
 802530c:	dd72      	ble.n	80253f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802530e:	2f00      	cmp	r7, #0
 8025310:	d072      	beq.n	80253f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8025312:	3301      	adds	r3, #1
 8025314:	449e      	add	lr, r3
 8025316:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802531a:	5cd0      	ldrb	r0, [r2, r3]
 802531c:	f01e 0f01 	tst.w	lr, #1
 8025320:	bf0c      	ite	eq
 8025322:	f000 000f 	andeq.w	r0, r0, #15
 8025326:	1100      	asrne	r0, r0, #4
 8025328:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802532c:	b2c3      	uxtb	r3, r0
 802532e:	b2ba      	uxth	r2, r7
 8025330:	fa1f fc8c 	uxth.w	ip, ip
 8025334:	fb02 f00c 	mul.w	r0, r2, ip
 8025338:	0112      	lsls	r2, r2, #4
 802533a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802533e:	1a12      	subs	r2, r2, r0
 8025340:	b292      	uxth	r2, r2
 8025342:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8025346:	4362      	muls	r2, r4
 8025348:	fa1f fc8c 	uxth.w	ip, ip
 802534c:	eba7 070c 	sub.w	r7, r7, ip
 8025350:	b2bf      	uxth	r7, r7
 8025352:	fb06 2207 	mla	r2, r6, r7, r2
 8025356:	fb0c 2505 	mla	r5, ip, r5, r2
 802535a:	fb00 5303 	mla	r3, r0, r3, r5
 802535e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025362:	b3a3      	cbz	r3, 80253ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8025364:	4a25      	ldr	r2, [pc, #148]	; (80253fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8025366:	880e      	ldrh	r6, [r1, #0]
 8025368:	6815      	ldr	r5, [r2, #0]
 802536a:	b29a      	uxth	r2, r3
 802536c:	43db      	mvns	r3, r3
 802536e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8025372:	fb10 f002 	smulbb	r0, r0, r2
 8025376:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802537a:	b2ed      	uxtb	r5, r5
 802537c:	1234      	asrs	r4, r6, #8
 802537e:	fb17 f702 	smulbb	r7, r7, r2
 8025382:	fb15 f202 	smulbb	r2, r5, r2
 8025386:	b2db      	uxtb	r3, r3
 8025388:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802538c:	fb04 0403 	mla	r4, r4, r3, r0
 8025390:	10f0      	asrs	r0, r6, #3
 8025392:	00f6      	lsls	r6, r6, #3
 8025394:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025398:	b2f6      	uxtb	r6, r6
 802539a:	fb00 7003 	mla	r0, r0, r3, r7
 802539e:	fb06 2303 	mla	r3, r6, r3, r2
 80253a2:	b2a4      	uxth	r4, r4
 80253a4:	b29a      	uxth	r2, r3
 80253a6:	1c63      	adds	r3, r4, #1
 80253a8:	b280      	uxth	r0, r0
 80253aa:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80253ae:	1c53      	adds	r3, r2, #1
 80253b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253b4:	1c42      	adds	r2, r0, #1
 80253b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80253ba:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80253be:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80253c2:	0940      	lsrs	r0, r0, #5
 80253c4:	4323      	orrs	r3, r4
 80253c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80253ca:	4303      	orrs	r3, r0
 80253cc:	800b      	strh	r3, [r1, #0]
 80253ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80253d2:	2600      	movs	r6, #0
 80253d4:	e764      	b.n	80252a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80253d6:	2400      	movs	r4, #0
 80253d8:	4626      	mov	r6, r4
 80253da:	e778      	b.n	80252ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80253dc:	2400      	movs	r4, #0
 80253de:	e776      	b.n	80252ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80253e0:	463c      	mov	r4, r7
 80253e2:	e774      	b.n	80252ce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80253e4:	2500      	movs	r5, #0
 80253e6:	e78e      	b.n	8025306 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80253e8:	2300      	movs	r3, #0
 80253ea:	461d      	mov	r5, r3
 80253ec:	e79f      	b.n	802532e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80253ee:	4663      	mov	r3, ip
 80253f0:	4665      	mov	r5, ip
 80253f2:	e79c      	b.n	802532e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80253f4:	2300      	movs	r3, #0
 80253f6:	e79a      	b.n	802532e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80253f8:	463b      	mov	r3, r7
 80253fa:	e798      	b.n	802532e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80253fc:	2004f66c 	.word	0x2004f66c

08025400 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025404:	b093      	sub	sp, #76	; 0x4c
 8025406:	920c      	str	r2, [sp, #48]	; 0x30
 8025408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802540a:	9011      	str	r0, [sp, #68]	; 0x44
 802540c:	6850      	ldr	r0, [r2, #4]
 802540e:	9107      	str	r1, [sp, #28]
 8025410:	461d      	mov	r5, r3
 8025412:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025416:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802541a:	fb00 1303 	mla	r3, r0, r3, r1
 802541e:	6812      	ldr	r2, [r2, #0]
 8025420:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025424:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025426:	689b      	ldr	r3, [r3, #8]
 8025428:	3301      	adds	r3, #1
 802542a:	f023 0301 	bic.w	r3, r3, #1
 802542e:	9306      	str	r3, [sp, #24]
 8025430:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025432:	681f      	ldr	r7, [r3, #0]
 8025434:	9b07      	ldr	r3, [sp, #28]
 8025436:	2b00      	cmp	r3, #0
 8025438:	dc03      	bgt.n	8025442 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802543c:	2b00      	cmp	r3, #0
 802543e:	f340 8265 	ble.w	802590c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025442:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025444:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025448:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802544c:	1e48      	subs	r0, r1, #1
 802544e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025452:	2d00      	cmp	r5, #0
 8025454:	f340 80b7 	ble.w	80255c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025458:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802545c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025460:	d406      	bmi.n	8025470 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025462:	4586      	cmp	lr, r0
 8025464:	da04      	bge.n	8025470 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025466:	2b00      	cmp	r3, #0
 8025468:	db02      	blt.n	8025470 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802546a:	4563      	cmp	r3, ip
 802546c:	f2c0 80ac 	blt.w	80255c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025470:	f11e 0e01 	adds.w	lr, lr, #1
 8025474:	f100 809f 	bmi.w	80255b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025478:	4571      	cmp	r1, lr
 802547a:	f2c0 809c 	blt.w	80255b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802547e:	3301      	adds	r3, #1
 8025480:	f100 8099 	bmi.w	80255b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025484:	429a      	cmp	r2, r3
 8025486:	f2c0 8096 	blt.w	80255b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802548a:	46c8      	mov	r8, r9
 802548c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8025490:	9509      	str	r5, [sp, #36]	; 0x24
 8025492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025494:	2b00      	cmp	r3, #0
 8025496:	f340 80b5 	ble.w	8025604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802549a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802549e:	9308      	str	r3, [sp, #32]
 80254a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254a2:	1430      	asrs	r0, r6, #16
 80254a4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80254a8:	1423      	asrs	r3, r4, #16
 80254aa:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80254ae:	f100 813e 	bmi.w	802572e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80254b2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80254b6:	455b      	cmp	r3, fp
 80254b8:	f280 8139 	bge.w	802572e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80254bc:	2800      	cmp	r0, #0
 80254be:	f2c0 8136 	blt.w	802572e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80254c2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80254c6:	4558      	cmp	r0, fp
 80254c8:	f280 8131 	bge.w	802572e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80254cc:	9a06      	ldr	r2, [sp, #24]
 80254ce:	fb00 3302 	mla	r3, r0, r2, r3
 80254d2:	0858      	lsrs	r0, r3, #1
 80254d4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80254d8:	07da      	lsls	r2, r3, #31
 80254da:	bf54      	ite	pl
 80254dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80254e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80254e4:	9a08      	ldr	r2, [sp, #32]
 80254e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80254ea:	fa5f fc8c 	uxtb.w	ip, ip
 80254ee:	2a00      	cmp	r2, #0
 80254f0:	f000 80cb 	beq.w	802568a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80254f4:	1c58      	adds	r0, r3, #1
 80254f6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80254fa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80254fe:	07c0      	lsls	r0, r0, #31
 8025500:	bf54      	ite	pl
 8025502:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025506:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802550a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802550e:	fa5f fe8e 	uxtb.w	lr, lr
 8025512:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025516:	b1b9      	cbz	r1, 8025548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025518:	4453      	add	r3, sl
 802551a:	0858      	lsrs	r0, r3, #1
 802551c:	5c38      	ldrb	r0, [r7, r0]
 802551e:	07da      	lsls	r2, r3, #31
 8025520:	bf54      	ite	pl
 8025522:	f000 000f 	andpl.w	r0, r0, #15
 8025526:	1100      	asrmi	r0, r0, #4
 8025528:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802552c:	b2c0      	uxtb	r0, r0
 802552e:	900a      	str	r0, [sp, #40]	; 0x28
 8025530:	1c58      	adds	r0, r3, #1
 8025532:	0843      	lsrs	r3, r0, #1
 8025534:	5cfb      	ldrb	r3, [r7, r3]
 8025536:	07c2      	lsls	r2, r0, #31
 8025538:	bf54      	ite	pl
 802553a:	f003 030f 	andpl.w	r3, r3, #15
 802553e:	111b      	asrmi	r3, r3, #4
 8025540:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025544:	b2db      	uxtb	r3, r3
 8025546:	930e      	str	r3, [sp, #56]	; 0x38
 8025548:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802554c:	b289      	uxth	r1, r1
 802554e:	fb02 f301 	mul.w	r3, r2, r1
 8025552:	0112      	lsls	r2, r2, #4
 8025554:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025558:	b289      	uxth	r1, r1
 802555a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802555e:	1a40      	subs	r0, r0, r1
 8025560:	fa1f fe80 	uxth.w	lr, r0
 8025564:	1ad2      	subs	r2, r2, r3
 8025566:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025568:	b292      	uxth	r2, r2
 802556a:	4342      	muls	r2, r0
 802556c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025572:	fb01 c102 	mla	r1, r1, r2, ip
 8025576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025578:	fb03 1302 	mla	r3, r3, r2, r1
 802557c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025580:	2bff      	cmp	r3, #255	; 0xff
 8025582:	f040 8093 	bne.w	80256ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8025586:	4bbe      	ldr	r3, [pc, #760]	; (8025880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025588:	681a      	ldr	r2, [r3, #0]
 802558a:	4bbe      	ldr	r3, [pc, #760]	; (8025884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802558c:	0951      	lsrs	r1, r2, #5
 802558e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025592:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025596:	430b      	orrs	r3, r1
 8025598:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802559c:	4313      	orrs	r3, r2
 802559e:	f8a8 3000 	strh.w	r3, [r8]
 80255a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80255a4:	f108 0802 	add.w	r8, r8, #2
 80255a8:	441c      	add	r4, r3
 80255aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80255ac:	441e      	add	r6, r3
 80255ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255b0:	3b01      	subs	r3, #1
 80255b2:	9309      	str	r3, [sp, #36]	; 0x24
 80255b4:	e76d      	b.n	8025492 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80255b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80255b8:	3d01      	subs	r5, #1
 80255ba:	441c      	add	r4, r3
 80255bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80255be:	f109 0902 	add.w	r9, r9, #2
 80255c2:	441e      	add	r6, r3
 80255c4:	e745      	b.n	8025452 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80255c6:	d021      	beq.n	802560c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80255c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80255ca:	1e6b      	subs	r3, r5, #1
 80255cc:	fb00 4003 	mla	r0, r0, r3, r4
 80255d0:	1400      	asrs	r0, r0, #16
 80255d2:	f53f af5a 	bmi.w	802548a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80255d6:	3901      	subs	r1, #1
 80255d8:	4288      	cmp	r0, r1
 80255da:	f6bf af56 	bge.w	802548a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80255de:	9920      	ldr	r1, [sp, #128]	; 0x80
 80255e0:	fb01 6303 	mla	r3, r1, r3, r6
 80255e4:	141b      	asrs	r3, r3, #16
 80255e6:	f53f af50 	bmi.w	802548a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80255ea:	3a01      	subs	r2, #1
 80255ec:	4293      	cmp	r3, r2
 80255ee:	f6bf af4c 	bge.w	802548a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80255f2:	46a8      	mov	r8, r5
 80255f4:	46ce      	mov	lr, r9
 80255f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80255fa:	9308      	str	r3, [sp, #32]
 80255fc:	f1b8 0f00 	cmp.w	r8, #0
 8025600:	f300 80b5 	bgt.w	802576e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025604:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025608:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802560c:	9b07      	ldr	r3, [sp, #28]
 802560e:	2b00      	cmp	r3, #0
 8025610:	f340 817c 	ble.w	802590c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025618:	ee30 0a04 	vadd.f32	s0, s0, s8
 802561c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025620:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025624:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025628:	eef0 6a62 	vmov.f32	s13, s5
 802562c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025630:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025634:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025638:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802563c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025640:	ee16 4a90 	vmov	r4, s13
 8025644:	eef0 6a43 	vmov.f32	s13, s6
 8025648:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802564c:	ee12 2a90 	vmov	r2, s5
 8025650:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025654:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025656:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802565a:	fb92 f3f3 	sdiv	r3, r2, r3
 802565e:	ee13 2a10 	vmov	r2, s6
 8025662:	931f      	str	r3, [sp, #124]	; 0x7c
 8025664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025666:	ee16 6a90 	vmov	r6, s13
 802566a:	fb92 f3f3 	sdiv	r3, r2, r3
 802566e:	9320      	str	r3, [sp, #128]	; 0x80
 8025670:	9b07      	ldr	r3, [sp, #28]
 8025672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025674:	3b01      	subs	r3, #1
 8025676:	9307      	str	r3, [sp, #28]
 8025678:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802567a:	bf0c      	ite	eq
 802567c:	4615      	moveq	r5, r2
 802567e:	461d      	movne	r5, r3
 8025680:	eeb0 3a67 	vmov.f32	s6, s15
 8025684:	eef0 2a47 	vmov.f32	s5, s14
 8025688:	e6d4      	b.n	8025434 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802568a:	2900      	cmp	r1, #0
 802568c:	f43f af5c 	beq.w	8025548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025690:	eb0a 0003 	add.w	r0, sl, r3
 8025694:	0843      	lsrs	r3, r0, #1
 8025696:	5cfb      	ldrb	r3, [r7, r3]
 8025698:	07c0      	lsls	r0, r0, #31
 802569a:	bf54      	ite	pl
 802569c:	f003 030f 	andpl.w	r3, r3, #15
 80256a0:	111b      	asrmi	r3, r3, #4
 80256a2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80256a6:	b2db      	uxtb	r3, r3
 80256a8:	930a      	str	r3, [sp, #40]	; 0x28
 80256aa:	e74d      	b.n	8025548 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	f43f af78 	beq.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80256b2:	fa1f fe83 	uxth.w	lr, r3
 80256b6:	43db      	mvns	r3, r3
 80256b8:	4a71      	ldr	r2, [pc, #452]	; (8025880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80256ba:	f8b8 c000 	ldrh.w	ip, [r8]
 80256be:	6810      	ldr	r0, [r2, #0]
 80256c0:	ea4f 212c 	mov.w	r1, ip, asr #8
 80256c4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80256c8:	fb12 f20e 	smulbb	r2, r2, lr
 80256cc:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80256d0:	b2c0      	uxtb	r0, r0
 80256d2:	fb1b fb0e 	smulbb	fp, fp, lr
 80256d6:	fb10 fe0e 	smulbb	lr, r0, lr
 80256da:	b2db      	uxtb	r3, r3
 80256dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80256e0:	fb01 2103 	mla	r1, r1, r3, r2
 80256e4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80256e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80256ec:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80256f0:	fa5f fc8c 	uxtb.w	ip, ip
 80256f4:	fb02 b203 	mla	r2, r2, r3, fp
 80256f8:	fb0c e303 	mla	r3, ip, r3, lr
 80256fc:	b289      	uxth	r1, r1
 80256fe:	1c48      	adds	r0, r1, #1
 8025700:	b292      	uxth	r2, r2
 8025702:	b29b      	uxth	r3, r3
 8025704:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025708:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802570c:	f102 0b01 	add.w	fp, r2, #1
 8025710:	1c59      	adds	r1, r3, #1
 8025712:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025716:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802571a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802571e:	0952      	lsrs	r2, r2, #5
 8025720:	4301      	orrs	r1, r0
 8025722:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025726:	4311      	orrs	r1, r2
 8025728:	f8a8 1000 	strh.w	r1, [r8]
 802572c:	e739      	b.n	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802572e:	f113 0b01 	adds.w	fp, r3, #1
 8025732:	f53f af36 	bmi.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025736:	45dc      	cmp	ip, fp
 8025738:	f6ff af33 	blt.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802573c:	f110 0b01 	adds.w	fp, r0, #1
 8025740:	f53f af2f 	bmi.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025744:	45de      	cmp	lr, fp
 8025746:	f6ff af2c 	blt.w	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802574a:	9a08      	ldr	r2, [sp, #32]
 802574c:	9302      	str	r3, [sp, #8]
 802574e:	fa0f f38e 	sxth.w	r3, lr
 8025752:	9301      	str	r3, [sp, #4]
 8025754:	fa0f f38c 	sxth.w	r3, ip
 8025758:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802575c:	9105      	str	r1, [sp, #20]
 802575e:	9300      	str	r3, [sp, #0]
 8025760:	463a      	mov	r2, r7
 8025762:	4653      	mov	r3, sl
 8025764:	4641      	mov	r1, r8
 8025766:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025768:	f7ff fd74 	bl	8025254 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802576c:	e719      	b.n	80255a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802576e:	9906      	ldr	r1, [sp, #24]
 8025770:	1422      	asrs	r2, r4, #16
 8025772:	1433      	asrs	r3, r6, #16
 8025774:	fb01 2303 	mla	r3, r1, r3, r2
 8025778:	085a      	lsrs	r2, r3, #1
 802577a:	5cba      	ldrb	r2, [r7, r2]
 802577c:	07d9      	lsls	r1, r3, #31
 802577e:	bf54      	ite	pl
 8025780:	f002 020f 	andpl.w	r2, r2, #15
 8025784:	1112      	asrmi	r2, r2, #4
 8025786:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802578a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802578e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025792:	b2d2      	uxtb	r2, r2
 8025794:	2800      	cmp	r0, #0
 8025796:	d062      	beq.n	802585e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025798:	f103 0a01 	add.w	sl, r3, #1
 802579c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80257a0:	5c79      	ldrb	r1, [r7, r1]
 80257a2:	f01a 0f01 	tst.w	sl, #1
 80257a6:	bf0c      	ite	eq
 80257a8:	f001 010f 	andeq.w	r1, r1, #15
 80257ac:	1109      	asrne	r1, r1, #4
 80257ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80257b2:	b2c9      	uxtb	r1, r1
 80257b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80257b6:	f1bc 0f00 	cmp.w	ip, #0
 80257ba:	d019      	beq.n	80257f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80257bc:	9908      	ldr	r1, [sp, #32]
 80257be:	440b      	add	r3, r1
 80257c0:	0859      	lsrs	r1, r3, #1
 80257c2:	5c79      	ldrb	r1, [r7, r1]
 80257c4:	f013 0f01 	tst.w	r3, #1
 80257c8:	bf0c      	ite	eq
 80257ca:	f001 010f 	andeq.w	r1, r1, #15
 80257ce:	1109      	asrne	r1, r1, #4
 80257d0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80257d4:	b2c9      	uxtb	r1, r1
 80257d6:	3301      	adds	r3, #1
 80257d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80257da:	0859      	lsrs	r1, r3, #1
 80257dc:	5c79      	ldrb	r1, [r7, r1]
 80257de:	07db      	lsls	r3, r3, #31
 80257e0:	bf54      	ite	pl
 80257e2:	f001 010f 	andpl.w	r1, r1, #15
 80257e6:	1109      	asrmi	r1, r1, #4
 80257e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80257ec:	b2c9      	uxtb	r1, r1
 80257ee:	9110      	str	r1, [sp, #64]	; 0x40
 80257f0:	b280      	uxth	r0, r0
 80257f2:	fa1f fc8c 	uxth.w	ip, ip
 80257f6:	fb00 f30c 	mul.w	r3, r0, ip
 80257fa:	0100      	lsls	r0, r0, #4
 80257fc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025800:	fa1f fc8c 	uxth.w	ip, ip
 8025804:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025808:	eba1 010c 	sub.w	r1, r1, ip
 802580c:	fa1f fa81 	uxth.w	sl, r1
 8025810:	1ac0      	subs	r0, r0, r3
 8025812:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025814:	b280      	uxth	r0, r0
 8025816:	4348      	muls	r0, r1
 8025818:	fb02 020a 	mla	r2, r2, sl, r0
 802581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802581e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025822:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025824:	fb03 c302 	mla	r3, r3, r2, ip
 8025828:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802582c:	2bff      	cmp	r3, #255	; 0xff
 802582e:	d12b      	bne.n	8025888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025830:	4b13      	ldr	r3, [pc, #76]	; (8025880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025832:	681a      	ldr	r2, [r3, #0]
 8025834:	4b13      	ldr	r3, [pc, #76]	; (8025884 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025836:	0951      	lsrs	r1, r2, #5
 8025838:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802583c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025840:	430b      	orrs	r3, r1
 8025842:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025846:	4313      	orrs	r3, r2
 8025848:	f8ae 3000 	strh.w	r3, [lr]
 802584c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802584e:	f10e 0e02 	add.w	lr, lr, #2
 8025852:	441c      	add	r4, r3
 8025854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025856:	f108 38ff 	add.w	r8, r8, #4294967295
 802585a:	441e      	add	r6, r3
 802585c:	e6ce      	b.n	80255fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802585e:	f1bc 0f00 	cmp.w	ip, #0
 8025862:	d0c5      	beq.n	80257f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025864:	9908      	ldr	r1, [sp, #32]
 8025866:	440b      	add	r3, r1
 8025868:	0859      	lsrs	r1, r3, #1
 802586a:	5c79      	ldrb	r1, [r7, r1]
 802586c:	07db      	lsls	r3, r3, #31
 802586e:	bf54      	ite	pl
 8025870:	f001 010f 	andpl.w	r1, r1, #15
 8025874:	1109      	asrmi	r1, r1, #4
 8025876:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802587a:	b2c9      	uxtb	r1, r1
 802587c:	910b      	str	r1, [sp, #44]	; 0x2c
 802587e:	e7b7      	b.n	80257f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025880:	2004f66c 	.word	0x2004f66c
 8025884:	fffff800 	.word	0xfffff800
 8025888:	2b00      	cmp	r3, #0
 802588a:	d0df      	beq.n	802584c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802588c:	fa1f fa83 	uxth.w	sl, r3
 8025890:	43db      	mvns	r3, r3
 8025892:	4a20      	ldr	r2, [pc, #128]	; (8025914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8025894:	f8be c000 	ldrh.w	ip, [lr]
 8025898:	6810      	ldr	r0, [r2, #0]
 802589a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802589e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80258a2:	fb12 f20a 	smulbb	r2, r2, sl
 80258a6:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80258aa:	b2c0      	uxtb	r0, r0
 80258ac:	fb10 f00a 	smulbb	r0, r0, sl
 80258b0:	b2db      	uxtb	r3, r3
 80258b2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80258b6:	fb01 2103 	mla	r1, r1, r3, r2
 80258ba:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80258be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80258c2:	fb1b fb0a 	smulbb	fp, fp, sl
 80258c6:	fa5f fc8c 	uxtb.w	ip, ip
 80258ca:	fb0c 0003 	mla	r0, ip, r3, r0
 80258ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80258d2:	fb02 b203 	mla	r2, r2, r3, fp
 80258d6:	b289      	uxth	r1, r1
 80258d8:	b280      	uxth	r0, r0
 80258da:	1c4b      	adds	r3, r1, #1
 80258dc:	f100 0b01 	add.w	fp, r0, #1
 80258e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80258e4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80258e8:	b292      	uxth	r2, r2
 80258ea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80258ee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80258f2:	ea4b 0101 	orr.w	r1, fp, r1
 80258f6:	f102 0b01 	add.w	fp, r2, #1
 80258fa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80258fe:	0952      	lsrs	r2, r2, #5
 8025900:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025904:	4311      	orrs	r1, r2
 8025906:	f8ae 1000 	strh.w	r1, [lr]
 802590a:	e79f      	b.n	802584c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802590c:	b013      	add	sp, #76	; 0x4c
 802590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025912:	bf00      	nop
 8025914:	2004f66c 	.word	0x2004f66c

08025918 <CRC_Lock>:
 8025918:	b530      	push	{r4, r5, lr}
 802591a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802591e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025922:	4a1e      	ldr	r2, [pc, #120]	; (802599c <CRC_Lock+0x84>)
 8025924:	6813      	ldr	r3, [r2, #0]
 8025926:	f023 0301 	bic.w	r3, r3, #1
 802592a:	6013      	str	r3, [r2, #0]
 802592c:	4b1c      	ldr	r3, [pc, #112]	; (80259a0 <CRC_Lock+0x88>)
 802592e:	681a      	ldr	r2, [r3, #0]
 8025930:	4022      	ands	r2, r4
 8025932:	42aa      	cmp	r2, r5
 8025934:	d005      	beq.n	8025942 <CRC_Lock+0x2a>
 8025936:	f24c 2270 	movw	r2, #49776	; 0xc270
 802593a:	681b      	ldr	r3, [r3, #0]
 802593c:	4023      	ands	r3, r4
 802593e:	4293      	cmp	r3, r2
 8025940:	d124      	bne.n	802598c <CRC_Lock+0x74>
 8025942:	4b18      	ldr	r3, [pc, #96]	; (80259a4 <CRC_Lock+0x8c>)
 8025944:	681b      	ldr	r3, [r3, #0]
 8025946:	bb0b      	cbnz	r3, 802598c <CRC_Lock+0x74>
 8025948:	4b17      	ldr	r3, [pc, #92]	; (80259a8 <CRC_Lock+0x90>)
 802594a:	681a      	ldr	r2, [r3, #0]
 802594c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025950:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025954:	d00d      	beq.n	8025972 <CRC_Lock+0x5a>
 8025956:	f240 4483 	movw	r4, #1155	; 0x483
 802595a:	681a      	ldr	r2, [r3, #0]
 802595c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025960:	42a2      	cmp	r2, r4
 8025962:	d006      	beq.n	8025972 <CRC_Lock+0x5a>
 8025964:	f240 4285 	movw	r2, #1157	; 0x485
 8025968:	681b      	ldr	r3, [r3, #0]
 802596a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802596e:	4293      	cmp	r3, r2
 8025970:	d10c      	bne.n	802598c <CRC_Lock+0x74>
 8025972:	2201      	movs	r2, #1
 8025974:	4b0d      	ldr	r3, [pc, #52]	; (80259ac <CRC_Lock+0x94>)
 8025976:	601a      	str	r2, [r3, #0]
 8025978:	681a      	ldr	r2, [r3, #0]
 802597a:	2a00      	cmp	r2, #0
 802597c:	d1fc      	bne.n	8025978 <CRC_Lock+0x60>
 802597e:	4b0c      	ldr	r3, [pc, #48]	; (80259b0 <CRC_Lock+0x98>)
 8025980:	6018      	str	r0, [r3, #0]
 8025982:	6818      	ldr	r0, [r3, #0]
 8025984:	1a43      	subs	r3, r0, r1
 8025986:	4258      	negs	r0, r3
 8025988:	4158      	adcs	r0, r3
 802598a:	bd30      	pop	{r4, r5, pc}
 802598c:	2201      	movs	r2, #1
 802598e:	4b09      	ldr	r3, [pc, #36]	; (80259b4 <CRC_Lock+0x9c>)
 8025990:	601a      	str	r2, [r3, #0]
 8025992:	681a      	ldr	r2, [r3, #0]
 8025994:	2a00      	cmp	r2, #0
 8025996:	d1fc      	bne.n	8025992 <CRC_Lock+0x7a>
 8025998:	4b07      	ldr	r3, [pc, #28]	; (80259b8 <CRC_Lock+0xa0>)
 802599a:	e7f1      	b.n	8025980 <CRC_Lock+0x68>
 802599c:	e0002000 	.word	0xe0002000
 80259a0:	e000ed00 	.word	0xe000ed00
 80259a4:	e0042000 	.word	0xe0042000
 80259a8:	5c001000 	.word	0x5c001000
 80259ac:	58024c08 	.word	0x58024c08
 80259b0:	58024c00 	.word	0x58024c00
 80259b4:	40023008 	.word	0x40023008
 80259b8:	40023000 	.word	0x40023000

080259bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80259bc:	6101      	str	r1, [r0, #16]
 80259be:	4770      	bx	lr

080259c0 <_ZN8touchgfx8Gestures4tickEv>:
 80259c0:	7b83      	ldrb	r3, [r0, #14]
 80259c2:	b14b      	cbz	r3, 80259d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80259c4:	8903      	ldrh	r3, [r0, #8]
 80259c6:	3301      	adds	r3, #1
 80259c8:	b29b      	uxth	r3, r3
 80259ca:	2b07      	cmp	r3, #7
 80259cc:	8103      	strh	r3, [r0, #8]
 80259ce:	bf81      	itttt	hi
 80259d0:	2300      	movhi	r3, #0
 80259d2:	8143      	strhhi	r3, [r0, #10]
 80259d4:	8183      	strhhi	r3, [r0, #12]
 80259d6:	7383      	strbhi	r3, [r0, #14]
 80259d8:	4770      	bx	lr
	...

080259dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80259dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80259e0:	4698      	mov	r8, r3
 80259e2:	4604      	mov	r4, r0
 80259e4:	8883      	ldrh	r3, [r0, #4]
 80259e6:	460e      	mov	r6, r1
 80259e8:	88c1      	ldrh	r1, [r0, #6]
 80259ea:	2000      	movs	r0, #0
 80259ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80259f0:	eba8 0303 	sub.w	r3, r8, r3
 80259f4:	b21b      	sxth	r3, r3
 80259f6:	4617      	mov	r7, r2
 80259f8:	4a17      	ldr	r2, [pc, #92]	; (8025a58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	bfb8      	it	lt
 80259fe:	425b      	neglt	r3, r3
 8025a00:	9200      	str	r2, [sp, #0]
 8025a02:	8aa2      	ldrh	r2, [r4, #20]
 8025a04:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025a08:	b21b      	sxth	r3, r3
 8025a0a:	4293      	cmp	r3, r2
 8025a0c:	f88d 0004 	strb.w	r0, [sp, #4]
 8025a10:	f8ad 1008 	strh.w	r1, [sp, #8]
 8025a14:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025a18:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025a1c:	dc07      	bgt.n	8025a2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8025a1e:	1a69      	subs	r1, r5, r1
 8025a20:	b209      	sxth	r1, r1
 8025a22:	2900      	cmp	r1, #0
 8025a24:	bfb8      	it	lt
 8025a26:	4249      	neglt	r1, r1
 8025a28:	b209      	sxth	r1, r1
 8025a2a:	428a      	cmp	r2, r1
 8025a2c:	da10      	bge.n	8025a50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8025a2e:	6920      	ldr	r0, [r4, #16]
 8025a30:	4669      	mov	r1, sp
 8025a32:	6803      	ldr	r3, [r0, #0]
 8025a34:	eba8 0606 	sub.w	r6, r8, r6
 8025a38:	685b      	ldr	r3, [r3, #4]
 8025a3a:	4798      	blx	r3
 8025a3c:	2300      	movs	r3, #0
 8025a3e:	2001      	movs	r0, #1
 8025a40:	1bef      	subs	r7, r5, r7
 8025a42:	8123      	strh	r3, [r4, #8]
 8025a44:	8166      	strh	r6, [r4, #10]
 8025a46:	81a7      	strh	r7, [r4, #12]
 8025a48:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025a4c:	80e5      	strh	r5, [r4, #6]
 8025a4e:	73a0      	strb	r0, [r4, #14]
 8025a50:	b004      	add	sp, #16
 8025a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a56:	bf00      	nop
 8025a58:	080294b0 	.word	0x080294b0

08025a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a5e:	461e      	mov	r6, r3
 8025a60:	1e4b      	subs	r3, r1, #1
 8025a62:	2b01      	cmp	r3, #1
 8025a64:	b085      	sub	sp, #20
 8025a66:	4604      	mov	r4, r0
 8025a68:	460d      	mov	r5, r1
 8025a6a:	4617      	mov	r7, r2
 8025a6c:	d84b      	bhi.n	8025b06 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025a6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025a72:	1cd3      	adds	r3, r2, #3
 8025a74:	b29b      	uxth	r3, r3
 8025a76:	2b06      	cmp	r3, #6
 8025a78:	d916      	bls.n	8025aa8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025a7a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025b1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025a7e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025a82:	f8cd c004 	str.w	ip, [sp, #4]
 8025a86:	f04f 0c00 	mov.w	ip, #0
 8025a8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025a8e:	6900      	ldr	r0, [r0, #16]
 8025a90:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025a94:	f88d c008 	strb.w	ip, [sp, #8]
 8025a98:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025a9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025aa0:	6803      	ldr	r3, [r0, #0]
 8025aa2:	a901      	add	r1, sp, #4
 8025aa4:	689b      	ldr	r3, [r3, #8]
 8025aa6:	4798      	blx	r3
 8025aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025aac:	1cd3      	adds	r3, r2, #3
 8025aae:	b29b      	uxth	r3, r3
 8025ab0:	2b06      	cmp	r3, #6
 8025ab2:	d916      	bls.n	8025ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025ab4:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025b1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8025ab8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025abc:	f8cd c004 	str.w	ip, [sp, #4]
 8025ac0:	f04f 0c01 	mov.w	ip, #1
 8025ac4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025ac8:	6920      	ldr	r0, [r4, #16]
 8025aca:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025ace:	f88d c008 	strb.w	ip, [sp, #8]
 8025ad2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025ad6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025ada:	6803      	ldr	r3, [r0, #0]
 8025adc:	a901      	add	r1, sp, #4
 8025ade:	689b      	ldr	r3, [r3, #8]
 8025ae0:	4798      	blx	r3
 8025ae2:	4b0d      	ldr	r3, [pc, #52]	; (8025b18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025ae4:	6920      	ldr	r0, [r4, #16]
 8025ae6:	9301      	str	r3, [sp, #4]
 8025ae8:	2300      	movs	r3, #0
 8025aea:	f88d 5008 	strb.w	r5, [sp, #8]
 8025aee:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025af2:	f8ad 600c 	strh.w	r6, [sp, #12]
 8025af6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025afa:	6803      	ldr	r3, [r0, #0]
 8025afc:	a901      	add	r1, sp, #4
 8025afe:	681b      	ldr	r3, [r3, #0]
 8025b00:	4798      	blx	r3
 8025b02:	b005      	add	sp, #20
 8025b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b06:	2900      	cmp	r1, #0
 8025b08:	d1eb      	bne.n	8025ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025b0a:	80a2      	strh	r2, [r4, #4]
 8025b0c:	80c6      	strh	r6, [r0, #6]
 8025b0e:	60a1      	str	r1, [r4, #8]
 8025b10:	81a1      	strh	r1, [r4, #12]
 8025b12:	73a1      	strb	r1, [r4, #14]
 8025b14:	e7e5      	b.n	8025ae2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8025b16:	bf00      	nop
 8025b18:	0802949c 	.word	0x0802949c
 8025b1c:	080294c4 	.word	0x080294c4

08025b20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8025b20:	10c9      	asrs	r1, r1, #3
 8025b22:	2900      	cmp	r1, #0
 8025b24:	bfb8      	it	lt
 8025b26:	4249      	neglt	r1, r1
 8025b28:	2801      	cmp	r0, #1
 8025b2a:	d108      	bne.n	8025b3e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025b2c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025b30:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025b34:	4601      	mov	r1, r0
 8025b36:	dd02      	ble.n	8025b3e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8025b38:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8025b3c:	4770      	bx	lr
 8025b3e:	29ff      	cmp	r1, #255	; 0xff
 8025b40:	bfa8      	it	ge
 8025b42:	21ff      	movge	r1, #255	; 0xff
 8025b44:	4608      	mov	r0, r1
 8025b46:	4770      	bx	lr

08025b48 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025b48:	b410      	push	{r4}
 8025b4a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8025b4e:	429c      	cmp	r4, r3
 8025b50:	d803      	bhi.n	8025b5a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8025b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b56:	f7f0 bba3 	b.w	80162a0 <_ZN8touchgfx7Outline6lineToEii>
 8025b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b5e:	4770      	bx	lr

08025b60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8025b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b64:	b08b      	sub	sp, #44	; 0x2c
 8025b66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025b6a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025b6e:	4606      	mov	r6, r0
 8025b70:	9308      	str	r3, [sp, #32]
 8025b72:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8025b76:	468a      	mov	sl, r1
 8025b78:	9309      	str	r3, [sp, #36]	; 0x24
 8025b7a:	f7f0 fcfd 	bl	8016578 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8025b7e:	68b5      	ldr	r5, [r6, #8]
 8025b80:	4604      	mov	r4, r0
 8025b82:	2d00      	cmp	r5, #0
 8025b84:	d044      	beq.n	8025c10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025b86:	6873      	ldr	r3, [r6, #4]
 8025b88:	42ab      	cmp	r3, r5
 8025b8a:	d33d      	bcc.n	8025c08 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8025b8c:	f04f 0800 	mov.w	r8, #0
 8025b90:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8025b94:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8025b98:	eb02 0b03 	add.w	fp, r2, r3
 8025b9c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025ba0:	fb02 1203 	mla	r2, r2, r3, r1
 8025ba4:	9205      	str	r2, [sp, #20]
 8025ba6:	1e6a      	subs	r2, r5, #1
 8025ba8:	9204      	str	r2, [sp, #16]
 8025baa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8025bae:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025bb2:	454b      	cmp	r3, r9
 8025bb4:	463a      	mov	r2, r7
 8025bb6:	d008      	beq.n	8025bca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8025bb8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8025bbc:	eb03 0b09 	add.w	fp, r3, r9
 8025bc0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8025bc4:	fb03 1309 	mla	r3, r3, r9, r1
 8025bc8:	9305      	str	r3, [sp, #20]
 8025bca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8025bce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8025bd2:	4498      	add	r8, r3
 8025bd4:	9b04      	ldr	r3, [sp, #16]
 8025bd6:	3b01      	subs	r3, #1
 8025bd8:	9304      	str	r3, [sp, #16]
 8025bda:	9b04      	ldr	r3, [sp, #16]
 8025bdc:	3301      	adds	r3, #1
 8025bde:	d015      	beq.n	8025c0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8025be0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025be4:	42bb      	cmp	r3, r7
 8025be6:	d117      	bne.n	8025c18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025be8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025bec:	9b04      	ldr	r3, [sp, #16]
 8025bee:	4548      	cmp	r0, r9
 8025bf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8025bf4:	d17d      	bne.n	8025cf2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025bf6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025bfa:	4401      	add	r1, r0
 8025bfc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8025c00:	4480      	add	r8, r0
 8025c02:	e7e9      	b.n	8025bd8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025c04:	461f      	mov	r7, r3
 8025c06:	e042      	b.n	8025c8e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025c08:	2000      	movs	r0, #0
 8025c0a:	e002      	b.n	8025c12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025c0c:	2900      	cmp	r1, #0
 8025c0e:	d16d      	bne.n	8025cec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8025c10:	2001      	movs	r0, #1
 8025c12:	b00b      	add	sp, #44	; 0x2c
 8025c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c18:	b379      	cbz	r1, 8025c7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025c1a:	2f00      	cmp	r7, #0
 8025c1c:	db29      	blt.n	8025c72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025c1e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025c22:	42bb      	cmp	r3, r7
 8025c24:	dd25      	ble.n	8025c72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025c26:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025c2a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025c2e:	f7ff ff77 	bl	8025b20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c34:	fb10 f003 	smulbb	r0, r0, r3
 8025c38:	b280      	uxth	r0, r0
 8025c3a:	1c41      	adds	r1, r0, #1
 8025c3c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025c40:	1209      	asrs	r1, r1, #8
 8025c42:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025c46:	d014      	beq.n	8025c72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025c48:	b2c9      	uxtb	r1, r1
 8025c4a:	9102      	str	r1, [sp, #8]
 8025c4c:	2101      	movs	r1, #1
 8025c4e:	9808      	ldr	r0, [sp, #32]
 8025c50:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025c52:	b2ba      	uxth	r2, r7
 8025c54:	4413      	add	r3, r2
 8025c56:	9101      	str	r1, [sp, #4]
 8025c58:	4402      	add	r2, r0
 8025c5a:	fa0f f18b 	sxth.w	r1, fp
 8025c5e:	f8da 0000 	ldr.w	r0, [sl]
 8025c62:	9100      	str	r1, [sp, #0]
 8025c64:	6941      	ldr	r1, [r0, #20]
 8025c66:	b21b      	sxth	r3, r3
 8025c68:	460d      	mov	r5, r1
 8025c6a:	b212      	sxth	r2, r2
 8025c6c:	9905      	ldr	r1, [sp, #20]
 8025c6e:	4650      	mov	r0, sl
 8025c70:	47a8      	blx	r5
 8025c72:	9b04      	ldr	r3, [sp, #16]
 8025c74:	1c7a      	adds	r2, r7, #1
 8025c76:	3301      	adds	r3, #1
 8025c78:	d0ca      	beq.n	8025c10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025c7a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8025c7e:	1abb      	subs	r3, r7, r2
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	dd31      	ble.n	8025ce8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025c84:	2a00      	cmp	r2, #0
 8025c86:	dabd      	bge.n	8025c04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8025c88:	2f00      	cmp	r7, #0
 8025c8a:	dd2d      	ble.n	8025ce8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025c8c:	2200      	movs	r2, #0
 8025c8e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8025c92:	19d1      	adds	r1, r2, r7
 8025c94:	4299      	cmp	r1, r3
 8025c96:	db02      	blt.n	8025c9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8025c98:	1a9f      	subs	r7, r3, r2
 8025c9a:	2f00      	cmp	r7, #0
 8025c9c:	dd24      	ble.n	8025ce8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025c9e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8025ca2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8025ca6:	f7ff ff3b 	bl	8025b20 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8025caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cac:	fb10 f003 	smulbb	r0, r0, r3
 8025cb0:	b280      	uxth	r0, r0
 8025cb2:	1c41      	adds	r1, r0, #1
 8025cb4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025cb8:	1209      	asrs	r1, r1, #8
 8025cba:	f011 0fff 	tst.w	r1, #255	; 0xff
 8025cbe:	d013      	beq.n	8025ce8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025cc0:	9808      	ldr	r0, [sp, #32]
 8025cc2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8025cc4:	b292      	uxth	r2, r2
 8025cc6:	b2c9      	uxtb	r1, r1
 8025cc8:	4413      	add	r3, r2
 8025cca:	9102      	str	r1, [sp, #8]
 8025ccc:	4402      	add	r2, r0
 8025cce:	b23f      	sxth	r7, r7
 8025cd0:	f8da 0000 	ldr.w	r0, [sl]
 8025cd4:	fa0f f18b 	sxth.w	r1, fp
 8025cd8:	9100      	str	r1, [sp, #0]
 8025cda:	9701      	str	r7, [sp, #4]
 8025cdc:	6947      	ldr	r7, [r0, #20]
 8025cde:	b21b      	sxth	r3, r3
 8025ce0:	b212      	sxth	r2, r2
 8025ce2:	9905      	ldr	r1, [sp, #20]
 8025ce4:	4650      	mov	r0, sl
 8025ce6:	47b8      	blx	r7
 8025ce8:	464b      	mov	r3, r9
 8025cea:	e75e      	b.n	8025baa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025cec:	2f00      	cmp	r7, #0
 8025cee:	da96      	bge.n	8025c1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8025cf0:	e78e      	b.n	8025c10 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025cf2:	2900      	cmp	r1, #0
 8025cf4:	d0f8      	beq.n	8025ce8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025cf6:	e790      	b.n	8025c1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025cf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8025cf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8025cfc:	2500      	movs	r5, #0
 8025cfe:	4b4b      	ldr	r3, [pc, #300]	; (8025e2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8025d00:	4604      	mov	r4, r0
 8025d02:	f100 0620 	add.w	r6, r0, #32
 8025d06:	e9c0 3100 	strd	r3, r1, [r0]
 8025d0a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025d0e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8025d12:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8025d16:	f100 0718 	add.w	r7, r0, #24
 8025d1a:	4630      	mov	r0, r6
 8025d1c:	4690      	mov	r8, r2
 8025d1e:	f7ef fdf7 	bl	8015910 <_ZN8touchgfx7OutlineC1Ev>
 8025d22:	2301      	movs	r3, #1
 8025d24:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8025d28:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8025d2c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8025d30:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8025d34:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8025d38:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8025d3c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025d40:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8025d44:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8025d48:	f9b8 2000 	ldrsh.w	r2, [r8]
 8025d4c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8025d50:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025d54:	4410      	add	r0, r2
 8025d56:	b280      	uxth	r0, r0
 8025d58:	fa0f fa80 	sxth.w	sl, r0
 8025d5c:	45aa      	cmp	sl, r5
 8025d5e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8025d62:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025d66:	9500      	str	r5, [sp, #0]
 8025d68:	dd5c      	ble.n	8025e24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025d6a:	4591      	cmp	r9, r2
 8025d6c:	dd5a      	ble.n	8025e24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025d6e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025d72:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025d76:	440b      	add	r3, r1
 8025d78:	b29b      	uxth	r3, r3
 8025d7a:	b21d      	sxth	r5, r3
 8025d7c:	2d00      	cmp	r5, #0
 8025d7e:	dd51      	ble.n	8025e24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025d80:	458e      	cmp	lr, r1
 8025d82:	dd4f      	ble.n	8025e24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8025d84:	45d1      	cmp	r9, sl
 8025d86:	bfb8      	it	lt
 8025d88:	fa1f f089 	uxthlt.w	r0, r9
 8025d8c:	45ae      	cmp	lr, r5
 8025d8e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8025d92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8025d96:	bfb8      	it	lt
 8025d98:	fa1f f38e 	uxthlt.w	r3, lr
 8025d9c:	1a80      	subs	r0, r0, r2
 8025d9e:	1a5b      	subs	r3, r3, r1
 8025da0:	f8ad 0004 	strh.w	r0, [sp, #4]
 8025da4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8025da8:	f8ad 2000 	strh.w	r2, [sp]
 8025dac:	f8ad 1002 	strh.w	r1, [sp, #2]
 8025db0:	466d      	mov	r5, sp
 8025db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025db6:	e887 0003 	stmia.w	r7, {r0, r1}
 8025dba:	f8dc 3000 	ldr.w	r3, [ip]
 8025dbe:	4660      	mov	r0, ip
 8025dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025dc2:	4639      	mov	r1, r7
 8025dc4:	4798      	blx	r3
 8025dc6:	6861      	ldr	r1, [r4, #4]
 8025dc8:	4628      	mov	r0, r5
 8025dca:	3104      	adds	r1, #4
 8025dcc:	f7f1 fae2 	bl	8017394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025dd0:	4638      	mov	r0, r7
 8025dd2:	f7f1 fab7 	bl	8017344 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025dd6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025dda:	f8bd 2000 	ldrh.w	r2, [sp]
 8025dde:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8025de2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8025de6:	4630      	mov	r0, r6
 8025de8:	f7ef fd76 	bl	80158d8 <_ZN8touchgfx7Outline5resetEv>
 8025dec:	4620      	mov	r0, r4
 8025dee:	f9bd 3000 	ldrsh.w	r3, [sp]
 8025df2:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8025df6:	015b      	lsls	r3, r3, #5
 8025df8:	60a3      	str	r3, [r4, #8]
 8025dfa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8025dfe:	015b      	lsls	r3, r3, #5
 8025e00:	60e3      	str	r3, [r4, #12]
 8025e02:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8025e06:	015b      	lsls	r3, r3, #5
 8025e08:	6123      	str	r3, [r4, #16]
 8025e0a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8025e0e:	015b      	lsls	r3, r3, #5
 8025e10:	6163      	str	r3, [r4, #20]
 8025e12:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8025e16:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8025e1a:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8025e1e:	b002      	add	sp, #8
 8025e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e24:	2300      	movs	r3, #0
 8025e26:	9301      	str	r3, [sp, #4]
 8025e28:	e7c2      	b.n	8025db0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 8025e2a:	bf00      	nop
 8025e2c:	08028f98 	.word	0x08028f98

08025e30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8025e30:	b510      	push	{r4, lr}
 8025e32:	4b07      	ldr	r3, [pc, #28]	; (8025e50 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8025e34:	781b      	ldrb	r3, [r3, #0]
 8025e36:	2b01      	cmp	r3, #1
 8025e38:	d108      	bne.n	8025e4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025e3a:	6843      	ldr	r3, [r0, #4]
 8025e3c:	6814      	ldr	r4, [r2, #0]
 8025e3e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025e42:	680b      	ldr	r3, [r1, #0]
 8025e44:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025e48:	6013      	str	r3, [r2, #0]
 8025e4a:	600c      	str	r4, [r1, #0]
 8025e4c:	bd10      	pop	{r4, pc}
 8025e4e:	bf00      	nop
 8025e50:	2004f654 	.word	0x2004f654

08025e54 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025e56:	4604      	mov	r4, r0
 8025e58:	ab02      	add	r3, sp, #8
 8025e5a:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025e5e:	461a      	mov	r2, r3
 8025e60:	9101      	str	r1, [sp, #4]
 8025e62:	a901      	add	r1, sp, #4
 8025e64:	f7ff ffe4 	bl	8025e30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025e68:	68a3      	ldr	r3, [r4, #8]
 8025e6a:	9901      	ldr	r1, [sp, #4]
 8025e6c:	9a00      	ldr	r2, [sp, #0]
 8025e6e:	1ac9      	subs	r1, r1, r3
 8025e70:	68e3      	ldr	r3, [r4, #12]
 8025e72:	9101      	str	r1, [sp, #4]
 8025e74:	1ad2      	subs	r2, r2, r3
 8025e76:	2a00      	cmp	r2, #0
 8025e78:	9200      	str	r2, [sp, #0]
 8025e7a:	db1c      	blt.n	8025eb6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8025e7c:	6963      	ldr	r3, [r4, #20]
 8025e7e:	429a      	cmp	r2, r3
 8025e80:	bfac      	ite	ge
 8025e82:	2002      	movge	r0, #2
 8025e84:	2000      	movlt	r0, #0
 8025e86:	2900      	cmp	r1, #0
 8025e88:	db17      	blt.n	8025eba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8025e8a:	6923      	ldr	r3, [r4, #16]
 8025e8c:	4299      	cmp	r1, r3
 8025e8e:	bfac      	ite	ge
 8025e90:	2308      	movge	r3, #8
 8025e92:	2300      	movlt	r3, #0
 8025e94:	4303      	orrs	r3, r0
 8025e96:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8025e9a:	b2dd      	uxtb	r5, r3
 8025e9c:	b978      	cbnz	r0, 8025ebe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025e9e:	f104 0020 	add.w	r0, r4, #32
 8025ea2:	f7ff fe51 	bl	8025b48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025ea6:	9b01      	ldr	r3, [sp, #4]
 8025ea8:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8025eac:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025eae:	9b00      	ldr	r3, [sp, #0]
 8025eb0:	6623      	str	r3, [r4, #96]	; 0x60
 8025eb2:	b002      	add	sp, #8
 8025eb4:	bd70      	pop	{r4, r5, r6, pc}
 8025eb6:	2001      	movs	r0, #1
 8025eb8:	e7e5      	b.n	8025e86 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025eba:	2304      	movs	r3, #4
 8025ebc:	e7ea      	b.n	8025e94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025ebe:	b113      	cbz	r3, 8025ec6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8025ec0:	ea10 0305 	ands.w	r3, r0, r5
 8025ec4:	d11d      	bne.n	8025f02 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8025ec6:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8025eca:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8025ece:	f104 0620 	add.w	r6, r4, #32
 8025ed2:	b193      	cbz	r3, 8025efa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8025ed4:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8025ed8:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8025edc:	4298      	cmp	r0, r3
 8025ede:	d802      	bhi.n	8025ee6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8025ee0:	4630      	mov	r0, r6
 8025ee2:	f7f0 f9f7 	bl	80162d4 <_ZN8touchgfx7Outline6moveToEii>
 8025ee6:	2300      	movs	r3, #0
 8025ee8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025eec:	2301      	movs	r3, #1
 8025eee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8025ef2:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025ef6:	4630      	mov	r0, r6
 8025ef8:	e7d3      	b.n	8025ea2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8025efa:	4630      	mov	r0, r6
 8025efc:	f7ff fe24 	bl	8025b48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025f00:	e7f7      	b.n	8025ef2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8025f02:	461d      	mov	r5, r3
 8025f04:	e7cf      	b.n	8025ea6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08025f06 <_ZN8touchgfx6Canvas5closeEv>:
 8025f06:	b538      	push	{r3, r4, r5, lr}
 8025f08:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8025f0c:	4604      	mov	r4, r0
 8025f0e:	b993      	cbnz	r3, 8025f36 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025f10:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8025f14:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8025f18:	4213      	tst	r3, r2
 8025f1a:	d10c      	bne.n	8025f36 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025f1c:	f100 0520 	add.w	r5, r0, #32
 8025f20:	b123      	cbz	r3, 8025f2c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025f22:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8025f26:	4628      	mov	r0, r5
 8025f28:	f7ff fe0e 	bl	8025b48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025f2c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8025f30:	4628      	mov	r0, r5
 8025f32:	f7ff fe09 	bl	8025b48 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025f36:	2300      	movs	r3, #0
 8025f38:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8025f3c:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8025f40:	4298      	cmp	r0, r3
 8025f42:	bf34      	ite	cc
 8025f44:	2000      	movcc	r0, #0
 8025f46:	2001      	movcs	r0, #1
 8025f48:	bd38      	pop	{r3, r4, r5, pc}
	...

08025f4c <_ZN8touchgfx6Canvas6renderEh>:
 8025f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025f50:	4604      	mov	r4, r0
 8025f52:	6840      	ldr	r0, [r0, #4]
 8025f54:	460d      	mov	r5, r1
 8025f56:	6803      	ldr	r3, [r0, #0]
 8025f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025f5a:	4798      	blx	r3
 8025f5c:	fb10 f105 	smulbb	r1, r0, r5
 8025f60:	b289      	uxth	r1, r1
 8025f62:	1c4d      	adds	r5, r1, #1
 8025f64:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025f68:	122d      	asrs	r5, r5, #8
 8025f6a:	f000 8097 	beq.w	802609c <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025f6e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	f000 8092 	beq.w	802609c <_ZN8touchgfx6Canvas6renderEh+0x150>
 8025f78:	4620      	mov	r0, r4
 8025f7a:	f7ff ffc4 	bl	8025f06 <_ZN8touchgfx6Canvas5closeEv>
 8025f7e:	4607      	mov	r7, r0
 8025f80:	2800      	cmp	r0, #0
 8025f82:	d043      	beq.n	802600c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8025f84:	6863      	ldr	r3, [r4, #4]
 8025f86:	4e46      	ldr	r6, [pc, #280]	; (80260a0 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8025f88:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8025f8a:	6837      	ldr	r7, [r6, #0]
 8025f8c:	6803      	ldr	r3, [r0, #0]
 8025f8e:	689b      	ldr	r3, [r3, #8]
 8025f90:	4798      	blx	r3
 8025f92:	4601      	mov	r1, r0
 8025f94:	4638      	mov	r0, r7
 8025f96:	f7ee fb6b 	bl	8014670 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8025f9a:	4607      	mov	r7, r0
 8025f9c:	f7e8 f88c 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8025fa0:	6803      	ldr	r3, [r0, #0]
 8025fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025fa4:	4798      	blx	r3
 8025fa6:	4680      	mov	r8, r0
 8025fa8:	f7e8 f886 	bl	800e0b8 <_ZN8touchgfx3HAL3lcdEv>
 8025fac:	6803      	ldr	r3, [r0, #0]
 8025fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025fb0:	4798      	blx	r3
 8025fb2:	280b      	cmp	r0, #11
 8025fb4:	d857      	bhi.n	8026066 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8025fb6:	e8df f000 	tbb	[pc, r0]
 8025fba:	584d      	.short	0x584d
 8025fbc:	2d560668 	.word	0x2d560668
 8025fc0:	6161613d 	.word	0x6161613d
 8025fc4:	6161      	.short	0x6161
 8025fc6:	2208      	movs	r2, #8
 8025fc8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8025fcc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8025fd0:	fb91 f2f2 	sdiv	r2, r1, r2
 8025fd4:	fb08 2303 	mla	r3, r8, r3, r2
 8025fd8:	441f      	add	r7, r3
 8025fda:	424b      	negs	r3, r1
 8025fdc:	f003 0307 	and.w	r3, r3, #7
 8025fe0:	f001 0107 	and.w	r1, r1, #7
 8025fe4:	bf58      	it	pl
 8025fe6:	4259      	negpl	r1, r3
 8025fe8:	b2c9      	uxtb	r1, r1
 8025fea:	b2ed      	uxtb	r5, r5
 8025fec:	e9cd 1500 	strd	r1, r5, [sp]
 8025ff0:	6860      	ldr	r0, [r4, #4]
 8025ff2:	fa0f f388 	sxth.w	r3, r8
 8025ff6:	463a      	mov	r2, r7
 8025ff8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8025ffa:	f104 0020 	add.w	r0, r4, #32
 8025ffe:	f7ff fdaf 	bl	8025b60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8026002:	4607      	mov	r7, r0
 8026004:	6830      	ldr	r0, [r6, #0]
 8026006:	6803      	ldr	r3, [r0, #0]
 8026008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802600a:	4798      	blx	r3
 802600c:	4638      	mov	r0, r7
 802600e:	b002      	add	sp, #8
 8026010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026014:	2204      	movs	r2, #4
 8026016:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802601a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802601e:	fb91 f2f2 	sdiv	r2, r1, r2
 8026022:	fb08 2303 	mla	r3, r8, r3, r2
 8026026:	441f      	add	r7, r3
 8026028:	424b      	negs	r3, r1
 802602a:	f003 0303 	and.w	r3, r3, #3
 802602e:	f001 0103 	and.w	r1, r1, #3
 8026032:	e7d7      	b.n	8025fe4 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8026034:	2202      	movs	r2, #2
 8026036:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802603a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802603e:	fb91 f2f2 	sdiv	r2, r1, r2
 8026042:	fb08 2303 	mla	r3, r8, r3, r2
 8026046:	2900      	cmp	r1, #0
 8026048:	f001 0101 	and.w	r1, r1, #1
 802604c:	441f      	add	r7, r3
 802604e:	bfb8      	it	lt
 8026050:	4249      	neglt	r1, r1
 8026052:	e7c9      	b.n	8025fe8 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8026054:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026058:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802605c:	fb08 f303 	mul.w	r3, r8, r3
 8026060:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026064:	441f      	add	r7, r3
 8026066:	2100      	movs	r1, #0
 8026068:	e7bf      	b.n	8025fea <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802606a:	2103      	movs	r1, #3
 802606c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026070:	fb08 f203 	mul.w	r2, r8, r3
 8026074:	8b23      	ldrh	r3, [r4, #24]
 8026076:	fb13 2301 	smlabb	r3, r3, r1, r2
 802607a:	e7f3      	b.n	8026064 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802607c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026080:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8026084:	fb08 2303 	mla	r3, r8, r3, r2
 8026088:	e7ec      	b.n	8026064 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802608a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802608e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8026092:	fb08 f303 	mul.w	r3, r8, r3
 8026096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802609a:	e7e3      	b.n	8026064 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802609c:	2701      	movs	r7, #1
 802609e:	e7b5      	b.n	802600c <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80260a0:	2004f65c 	.word	0x2004f65c

080260a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80260a4:	b513      	push	{r0, r1, r4, lr}
 80260a6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80260aa:	4604      	mov	r4, r0
 80260ac:	e9cd 2100 	strd	r2, r1, [sp]
 80260b0:	b1a3      	cbz	r3, 80260dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80260b2:	466a      	mov	r2, sp
 80260b4:	a901      	add	r1, sp, #4
 80260b6:	4620      	mov	r0, r4
 80260b8:	f7ff feba 	bl	8025e30 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80260bc:	68a3      	ldr	r3, [r4, #8]
 80260be:	9901      	ldr	r1, [sp, #4]
 80260c0:	9a00      	ldr	r2, [sp, #0]
 80260c2:	1ac9      	subs	r1, r1, r3
 80260c4:	68e3      	ldr	r3, [r4, #12]
 80260c6:	9101      	str	r1, [sp, #4]
 80260c8:	1ad2      	subs	r2, r2, r3
 80260ca:	2a00      	cmp	r2, #0
 80260cc:	9200      	str	r2, [sp, #0]
 80260ce:	da0b      	bge.n	80260e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80260d0:	2301      	movs	r3, #1
 80260d2:	2900      	cmp	r1, #0
 80260d4:	da0e      	bge.n	80260f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80260d6:	f043 0304 	orr.w	r3, r3, #4
 80260da:	e013      	b.n	8026104 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80260dc:	f7ff ff13 	bl	8025f06 <_ZN8touchgfx6Canvas5closeEv>
 80260e0:	2800      	cmp	r0, #0
 80260e2:	d1e6      	bne.n	80260b2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80260e4:	b002      	add	sp, #8
 80260e6:	bd10      	pop	{r4, pc}
 80260e8:	6963      	ldr	r3, [r4, #20]
 80260ea:	429a      	cmp	r2, r3
 80260ec:	bfac      	ite	ge
 80260ee:	2302      	movge	r3, #2
 80260f0:	2300      	movlt	r3, #0
 80260f2:	e7ee      	b.n	80260d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80260f4:	6920      	ldr	r0, [r4, #16]
 80260f6:	4281      	cmp	r1, r0
 80260f8:	bfac      	ite	ge
 80260fa:	2008      	movge	r0, #8
 80260fc:	2000      	movlt	r0, #0
 80260fe:	4318      	orrs	r0, r3
 8026100:	b2c3      	uxtb	r3, r0
 8026102:	b158      	cbz	r0, 802611c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8026104:	2201      	movs	r2, #1
 8026106:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802610a:	9901      	ldr	r1, [sp, #4]
 802610c:	9a00      	ldr	r2, [sp, #0]
 802610e:	66a1      	str	r1, [r4, #104]	; 0x68
 8026110:	66e2      	str	r2, [r4, #108]	; 0x6c
 8026112:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8026116:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802611a:	e7e3      	b.n	80260e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802611c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8026120:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8026124:	4298      	cmp	r0, r3
 8026126:	d803      	bhi.n	8026130 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8026128:	f104 0020 	add.w	r0, r4, #32
 802612c:	f7f0 f8d2 	bl	80162d4 <_ZN8touchgfx7Outline6moveToEii>
 8026130:	2300      	movs	r3, #0
 8026132:	2201      	movs	r2, #1
 8026134:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8026138:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 802613c:	e7e5      	b.n	802610a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802613e <__aeabi_atexit>:
 802613e:	460b      	mov	r3, r1
 8026140:	4601      	mov	r1, r0
 8026142:	4618      	mov	r0, r3
 8026144:	f000 b850 	b.w	80261e8 <__cxa_atexit>

08026148 <_ZdlPvj>:
 8026148:	f000 b812 	b.w	8026170 <_ZdlPv>

0802614c <__cxa_guard_acquire>:
 802614c:	6803      	ldr	r3, [r0, #0]
 802614e:	07db      	lsls	r3, r3, #31
 8026150:	d406      	bmi.n	8026160 <__cxa_guard_acquire+0x14>
 8026152:	7843      	ldrb	r3, [r0, #1]
 8026154:	b103      	cbz	r3, 8026158 <__cxa_guard_acquire+0xc>
 8026156:	deff      	udf	#255	; 0xff
 8026158:	2301      	movs	r3, #1
 802615a:	7043      	strb	r3, [r0, #1]
 802615c:	4618      	mov	r0, r3
 802615e:	4770      	bx	lr
 8026160:	2000      	movs	r0, #0
 8026162:	4770      	bx	lr

08026164 <__cxa_guard_release>:
 8026164:	2301      	movs	r3, #1
 8026166:	6003      	str	r3, [r0, #0]
 8026168:	4770      	bx	lr

0802616a <__cxa_pure_virtual>:
 802616a:	b508      	push	{r3, lr}
 802616c:	f000 f80c 	bl	8026188 <_ZSt9terminatev>

08026170 <_ZdlPv>:
 8026170:	f000 b88c 	b.w	802628c <free>

08026174 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026174:	b508      	push	{r3, lr}
 8026176:	4780      	blx	r0
 8026178:	f000 f80b 	bl	8026192 <abort>

0802617c <_ZSt13get_terminatev>:
 802617c:	4b01      	ldr	r3, [pc, #4]	; (8026184 <_ZSt13get_terminatev+0x8>)
 802617e:	e8d3 0faf 	lda	r0, [r3]
 8026182:	4770      	bx	lr
 8026184:	20025894 	.word	0x20025894

08026188 <_ZSt9terminatev>:
 8026188:	b508      	push	{r3, lr}
 802618a:	f7ff fff7 	bl	802617c <_ZSt13get_terminatev>
 802618e:	f7ff fff1 	bl	8026174 <_ZN10__cxxabiv111__terminateEPFvvE>

08026192 <abort>:
 8026192:	2006      	movs	r0, #6
 8026194:	b508      	push	{r3, lr}
 8026196:	f000 fc91 	bl	8026abc <raise>
 802619a:	2001      	movs	r0, #1
 802619c:	f7db fef2 	bl	8001f84 <_exit>

080261a0 <__assert_func>:
 80261a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80261a2:	4614      	mov	r4, r2
 80261a4:	461a      	mov	r2, r3
 80261a6:	4b09      	ldr	r3, [pc, #36]	; (80261cc <__assert_func+0x2c>)
 80261a8:	4605      	mov	r5, r0
 80261aa:	681b      	ldr	r3, [r3, #0]
 80261ac:	68d8      	ldr	r0, [r3, #12]
 80261ae:	b14c      	cbz	r4, 80261c4 <__assert_func+0x24>
 80261b0:	4b07      	ldr	r3, [pc, #28]	; (80261d0 <__assert_func+0x30>)
 80261b2:	9100      	str	r1, [sp, #0]
 80261b4:	4907      	ldr	r1, [pc, #28]	; (80261d4 <__assert_func+0x34>)
 80261b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80261ba:	462b      	mov	r3, r5
 80261bc:	f000 f828 	bl	8026210 <fiprintf>
 80261c0:	f7ff ffe7 	bl	8026192 <abort>
 80261c4:	4b04      	ldr	r3, [pc, #16]	; (80261d8 <__assert_func+0x38>)
 80261c6:	461c      	mov	r4, r3
 80261c8:	e7f3      	b.n	80261b2 <__assert_func+0x12>
 80261ca:	bf00      	nop
 80261cc:	20025898 	.word	0x20025898
 80261d0:	0802978c 	.word	0x0802978c
 80261d4:	08029799 	.word	0x08029799
 80261d8:	080297c7 	.word	0x080297c7

080261dc <atexit>:
 80261dc:	2300      	movs	r3, #0
 80261de:	4601      	mov	r1, r0
 80261e0:	461a      	mov	r2, r3
 80261e2:	4618      	mov	r0, r3
 80261e4:	f000 bd46 	b.w	8026c74 <__register_exitproc>

080261e8 <__cxa_atexit>:
 80261e8:	b510      	push	{r4, lr}
 80261ea:	4c05      	ldr	r4, [pc, #20]	; (8026200 <__cxa_atexit+0x18>)
 80261ec:	4613      	mov	r3, r2
 80261ee:	b12c      	cbz	r4, 80261fc <__cxa_atexit+0x14>
 80261f0:	460a      	mov	r2, r1
 80261f2:	4601      	mov	r1, r0
 80261f4:	2002      	movs	r0, #2
 80261f6:	f000 fd3d 	bl	8026c74 <__register_exitproc>
 80261fa:	bd10      	pop	{r4, pc}
 80261fc:	4620      	mov	r0, r4
 80261fe:	e7fc      	b.n	80261fa <__cxa_atexit+0x12>
 8026200:	08026c75 	.word	0x08026c75

08026204 <__errno>:
 8026204:	4b01      	ldr	r3, [pc, #4]	; (802620c <__errno+0x8>)
 8026206:	6818      	ldr	r0, [r3, #0]
 8026208:	4770      	bx	lr
 802620a:	bf00      	nop
 802620c:	20025898 	.word	0x20025898

08026210 <fiprintf>:
 8026210:	b40e      	push	{r1, r2, r3}
 8026212:	b503      	push	{r0, r1, lr}
 8026214:	ab03      	add	r3, sp, #12
 8026216:	4601      	mov	r1, r0
 8026218:	4805      	ldr	r0, [pc, #20]	; (8026230 <fiprintf+0x20>)
 802621a:	f853 2b04 	ldr.w	r2, [r3], #4
 802621e:	6800      	ldr	r0, [r0, #0]
 8026220:	9301      	str	r3, [sp, #4]
 8026222:	f000 f94d 	bl	80264c0 <_vfiprintf_r>
 8026226:	b002      	add	sp, #8
 8026228:	f85d eb04 	ldr.w	lr, [sp], #4
 802622c:	b003      	add	sp, #12
 802622e:	4770      	bx	lr
 8026230:	20025898 	.word	0x20025898

08026234 <__libc_init_array>:
 8026234:	b570      	push	{r4, r5, r6, lr}
 8026236:	4d0d      	ldr	r5, [pc, #52]	; (802626c <__libc_init_array+0x38>)
 8026238:	2600      	movs	r6, #0
 802623a:	4c0d      	ldr	r4, [pc, #52]	; (8026270 <__libc_init_array+0x3c>)
 802623c:	1b64      	subs	r4, r4, r5
 802623e:	10a4      	asrs	r4, r4, #2
 8026240:	42a6      	cmp	r6, r4
 8026242:	d109      	bne.n	8026258 <__libc_init_array+0x24>
 8026244:	4d0b      	ldr	r5, [pc, #44]	; (8026274 <__libc_init_array+0x40>)
 8026246:	2600      	movs	r6, #0
 8026248:	4c0b      	ldr	r4, [pc, #44]	; (8026278 <__libc_init_array+0x44>)
 802624a:	f001 f85b 	bl	8027304 <_init>
 802624e:	1b64      	subs	r4, r4, r5
 8026250:	10a4      	asrs	r4, r4, #2
 8026252:	42a6      	cmp	r6, r4
 8026254:	d105      	bne.n	8026262 <__libc_init_array+0x2e>
 8026256:	bd70      	pop	{r4, r5, r6, pc}
 8026258:	f855 3b04 	ldr.w	r3, [r5], #4
 802625c:	3601      	adds	r6, #1
 802625e:	4798      	blx	r3
 8026260:	e7ee      	b.n	8026240 <__libc_init_array+0xc>
 8026262:	f855 3b04 	ldr.w	r3, [r5], #4
 8026266:	3601      	adds	r6, #1
 8026268:	4798      	blx	r3
 802626a:	e7f2      	b.n	8026252 <__libc_init_array+0x1e>
 802626c:	0804f23c 	.word	0x0804f23c
 8026270:	0804f23c 	.word	0x0804f23c
 8026274:	0804f23c 	.word	0x0804f23c
 8026278:	0804f250 	.word	0x0804f250

0802627c <malloc>:
 802627c:	4b02      	ldr	r3, [pc, #8]	; (8026288 <malloc+0xc>)
 802627e:	4601      	mov	r1, r0
 8026280:	6818      	ldr	r0, [r3, #0]
 8026282:	f000 b87f 	b.w	8026384 <_malloc_r>
 8026286:	bf00      	nop
 8026288:	20025898 	.word	0x20025898

0802628c <free>:
 802628c:	4b02      	ldr	r3, [pc, #8]	; (8026298 <free+0xc>)
 802628e:	4601      	mov	r1, r0
 8026290:	6818      	ldr	r0, [r3, #0]
 8026292:	f000 b80b 	b.w	80262ac <_free_r>
 8026296:	bf00      	nop
 8026298:	20025898 	.word	0x20025898

0802629c <memset>:
 802629c:	4402      	add	r2, r0
 802629e:	4603      	mov	r3, r0
 80262a0:	4293      	cmp	r3, r2
 80262a2:	d100      	bne.n	80262a6 <memset+0xa>
 80262a4:	4770      	bx	lr
 80262a6:	f803 1b01 	strb.w	r1, [r3], #1
 80262aa:	e7f9      	b.n	80262a0 <memset+0x4>

080262ac <_free_r>:
 80262ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80262ae:	2900      	cmp	r1, #0
 80262b0:	d043      	beq.n	802633a <_free_r+0x8e>
 80262b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80262b6:	1f0c      	subs	r4, r1, #4
 80262b8:	9001      	str	r0, [sp, #4]
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	bfb8      	it	lt
 80262be:	18e4      	addlt	r4, r4, r3
 80262c0:	f000 ff68 	bl	8027194 <__malloc_lock>
 80262c4:	4a1e      	ldr	r2, [pc, #120]	; (8026340 <_free_r+0x94>)
 80262c6:	9801      	ldr	r0, [sp, #4]
 80262c8:	6813      	ldr	r3, [r2, #0]
 80262ca:	b933      	cbnz	r3, 80262da <_free_r+0x2e>
 80262cc:	6063      	str	r3, [r4, #4]
 80262ce:	6014      	str	r4, [r2, #0]
 80262d0:	b003      	add	sp, #12
 80262d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80262d6:	f000 bf63 	b.w	80271a0 <__malloc_unlock>
 80262da:	42a3      	cmp	r3, r4
 80262dc:	d908      	bls.n	80262f0 <_free_r+0x44>
 80262de:	6825      	ldr	r5, [r4, #0]
 80262e0:	1961      	adds	r1, r4, r5
 80262e2:	428b      	cmp	r3, r1
 80262e4:	bf01      	itttt	eq
 80262e6:	6819      	ldreq	r1, [r3, #0]
 80262e8:	685b      	ldreq	r3, [r3, #4]
 80262ea:	1949      	addeq	r1, r1, r5
 80262ec:	6021      	streq	r1, [r4, #0]
 80262ee:	e7ed      	b.n	80262cc <_free_r+0x20>
 80262f0:	461a      	mov	r2, r3
 80262f2:	685b      	ldr	r3, [r3, #4]
 80262f4:	b10b      	cbz	r3, 80262fa <_free_r+0x4e>
 80262f6:	42a3      	cmp	r3, r4
 80262f8:	d9fa      	bls.n	80262f0 <_free_r+0x44>
 80262fa:	6811      	ldr	r1, [r2, #0]
 80262fc:	1855      	adds	r5, r2, r1
 80262fe:	42a5      	cmp	r5, r4
 8026300:	d10b      	bne.n	802631a <_free_r+0x6e>
 8026302:	6824      	ldr	r4, [r4, #0]
 8026304:	4421      	add	r1, r4
 8026306:	1854      	adds	r4, r2, r1
 8026308:	6011      	str	r1, [r2, #0]
 802630a:	42a3      	cmp	r3, r4
 802630c:	d1e0      	bne.n	80262d0 <_free_r+0x24>
 802630e:	681c      	ldr	r4, [r3, #0]
 8026310:	685b      	ldr	r3, [r3, #4]
 8026312:	4421      	add	r1, r4
 8026314:	6053      	str	r3, [r2, #4]
 8026316:	6011      	str	r1, [r2, #0]
 8026318:	e7da      	b.n	80262d0 <_free_r+0x24>
 802631a:	d902      	bls.n	8026322 <_free_r+0x76>
 802631c:	230c      	movs	r3, #12
 802631e:	6003      	str	r3, [r0, #0]
 8026320:	e7d6      	b.n	80262d0 <_free_r+0x24>
 8026322:	6825      	ldr	r5, [r4, #0]
 8026324:	1961      	adds	r1, r4, r5
 8026326:	428b      	cmp	r3, r1
 8026328:	bf02      	ittt	eq
 802632a:	6819      	ldreq	r1, [r3, #0]
 802632c:	685b      	ldreq	r3, [r3, #4]
 802632e:	1949      	addeq	r1, r1, r5
 8026330:	6063      	str	r3, [r4, #4]
 8026332:	bf08      	it	eq
 8026334:	6021      	streq	r1, [r4, #0]
 8026336:	6054      	str	r4, [r2, #4]
 8026338:	e7ca      	b.n	80262d0 <_free_r+0x24>
 802633a:	b003      	add	sp, #12
 802633c:	bd30      	pop	{r4, r5, pc}
 802633e:	bf00      	nop
 8026340:	2004f760 	.word	0x2004f760

08026344 <sbrk_aligned>:
 8026344:	b570      	push	{r4, r5, r6, lr}
 8026346:	4e0e      	ldr	r6, [pc, #56]	; (8026380 <sbrk_aligned+0x3c>)
 8026348:	460c      	mov	r4, r1
 802634a:	4605      	mov	r5, r0
 802634c:	6831      	ldr	r1, [r6, #0]
 802634e:	b911      	cbnz	r1, 8026356 <sbrk_aligned+0x12>
 8026350:	f000 fb7c 	bl	8026a4c <_sbrk_r>
 8026354:	6030      	str	r0, [r6, #0]
 8026356:	4621      	mov	r1, r4
 8026358:	4628      	mov	r0, r5
 802635a:	f000 fb77 	bl	8026a4c <_sbrk_r>
 802635e:	1c43      	adds	r3, r0, #1
 8026360:	d00a      	beq.n	8026378 <sbrk_aligned+0x34>
 8026362:	1cc4      	adds	r4, r0, #3
 8026364:	f024 0403 	bic.w	r4, r4, #3
 8026368:	42a0      	cmp	r0, r4
 802636a:	d007      	beq.n	802637c <sbrk_aligned+0x38>
 802636c:	1a21      	subs	r1, r4, r0
 802636e:	4628      	mov	r0, r5
 8026370:	f000 fb6c 	bl	8026a4c <_sbrk_r>
 8026374:	3001      	adds	r0, #1
 8026376:	d101      	bne.n	802637c <sbrk_aligned+0x38>
 8026378:	f04f 34ff 	mov.w	r4, #4294967295
 802637c:	4620      	mov	r0, r4
 802637e:	bd70      	pop	{r4, r5, r6, pc}
 8026380:	2004f764 	.word	0x2004f764

08026384 <_malloc_r>:
 8026384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026388:	1ccd      	adds	r5, r1, #3
 802638a:	4607      	mov	r7, r0
 802638c:	f025 0503 	bic.w	r5, r5, #3
 8026390:	3508      	adds	r5, #8
 8026392:	2d0c      	cmp	r5, #12
 8026394:	bf38      	it	cc
 8026396:	250c      	movcc	r5, #12
 8026398:	2d00      	cmp	r5, #0
 802639a:	db01      	blt.n	80263a0 <_malloc_r+0x1c>
 802639c:	42a9      	cmp	r1, r5
 802639e:	d905      	bls.n	80263ac <_malloc_r+0x28>
 80263a0:	230c      	movs	r3, #12
 80263a2:	2600      	movs	r6, #0
 80263a4:	603b      	str	r3, [r7, #0]
 80263a6:	4630      	mov	r0, r6
 80263a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80263ac:	4e2e      	ldr	r6, [pc, #184]	; (8026468 <_malloc_r+0xe4>)
 80263ae:	f000 fef1 	bl	8027194 <__malloc_lock>
 80263b2:	6833      	ldr	r3, [r6, #0]
 80263b4:	461c      	mov	r4, r3
 80263b6:	bb34      	cbnz	r4, 8026406 <_malloc_r+0x82>
 80263b8:	4629      	mov	r1, r5
 80263ba:	4638      	mov	r0, r7
 80263bc:	f7ff ffc2 	bl	8026344 <sbrk_aligned>
 80263c0:	1c43      	adds	r3, r0, #1
 80263c2:	4604      	mov	r4, r0
 80263c4:	d14d      	bne.n	8026462 <_malloc_r+0xde>
 80263c6:	6834      	ldr	r4, [r6, #0]
 80263c8:	4626      	mov	r6, r4
 80263ca:	2e00      	cmp	r6, #0
 80263cc:	d140      	bne.n	8026450 <_malloc_r+0xcc>
 80263ce:	6823      	ldr	r3, [r4, #0]
 80263d0:	4631      	mov	r1, r6
 80263d2:	4638      	mov	r0, r7
 80263d4:	eb04 0803 	add.w	r8, r4, r3
 80263d8:	f000 fb38 	bl	8026a4c <_sbrk_r>
 80263dc:	4580      	cmp	r8, r0
 80263de:	d13a      	bne.n	8026456 <_malloc_r+0xd2>
 80263e0:	6821      	ldr	r1, [r4, #0]
 80263e2:	3503      	adds	r5, #3
 80263e4:	4638      	mov	r0, r7
 80263e6:	1a6d      	subs	r5, r5, r1
 80263e8:	f025 0503 	bic.w	r5, r5, #3
 80263ec:	3508      	adds	r5, #8
 80263ee:	2d0c      	cmp	r5, #12
 80263f0:	bf38      	it	cc
 80263f2:	250c      	movcc	r5, #12
 80263f4:	4629      	mov	r1, r5
 80263f6:	f7ff ffa5 	bl	8026344 <sbrk_aligned>
 80263fa:	3001      	adds	r0, #1
 80263fc:	d02b      	beq.n	8026456 <_malloc_r+0xd2>
 80263fe:	6823      	ldr	r3, [r4, #0]
 8026400:	442b      	add	r3, r5
 8026402:	6023      	str	r3, [r4, #0]
 8026404:	e00e      	b.n	8026424 <_malloc_r+0xa0>
 8026406:	6822      	ldr	r2, [r4, #0]
 8026408:	1b52      	subs	r2, r2, r5
 802640a:	d41e      	bmi.n	802644a <_malloc_r+0xc6>
 802640c:	2a0b      	cmp	r2, #11
 802640e:	d916      	bls.n	802643e <_malloc_r+0xba>
 8026410:	1961      	adds	r1, r4, r5
 8026412:	42a3      	cmp	r3, r4
 8026414:	6025      	str	r5, [r4, #0]
 8026416:	bf18      	it	ne
 8026418:	6059      	strne	r1, [r3, #4]
 802641a:	6863      	ldr	r3, [r4, #4]
 802641c:	bf08      	it	eq
 802641e:	6031      	streq	r1, [r6, #0]
 8026420:	5162      	str	r2, [r4, r5]
 8026422:	604b      	str	r3, [r1, #4]
 8026424:	f104 060b 	add.w	r6, r4, #11
 8026428:	4638      	mov	r0, r7
 802642a:	f000 feb9 	bl	80271a0 <__malloc_unlock>
 802642e:	1d23      	adds	r3, r4, #4
 8026430:	f026 0607 	bic.w	r6, r6, #7
 8026434:	1af2      	subs	r2, r6, r3
 8026436:	d0b6      	beq.n	80263a6 <_malloc_r+0x22>
 8026438:	1b9b      	subs	r3, r3, r6
 802643a:	50a3      	str	r3, [r4, r2]
 802643c:	e7b3      	b.n	80263a6 <_malloc_r+0x22>
 802643e:	6862      	ldr	r2, [r4, #4]
 8026440:	42a3      	cmp	r3, r4
 8026442:	bf0c      	ite	eq
 8026444:	6032      	streq	r2, [r6, #0]
 8026446:	605a      	strne	r2, [r3, #4]
 8026448:	e7ec      	b.n	8026424 <_malloc_r+0xa0>
 802644a:	4623      	mov	r3, r4
 802644c:	6864      	ldr	r4, [r4, #4]
 802644e:	e7b2      	b.n	80263b6 <_malloc_r+0x32>
 8026450:	4634      	mov	r4, r6
 8026452:	6876      	ldr	r6, [r6, #4]
 8026454:	e7b9      	b.n	80263ca <_malloc_r+0x46>
 8026456:	230c      	movs	r3, #12
 8026458:	4638      	mov	r0, r7
 802645a:	603b      	str	r3, [r7, #0]
 802645c:	f000 fea0 	bl	80271a0 <__malloc_unlock>
 8026460:	e7a1      	b.n	80263a6 <_malloc_r+0x22>
 8026462:	6025      	str	r5, [r4, #0]
 8026464:	e7de      	b.n	8026424 <_malloc_r+0xa0>
 8026466:	bf00      	nop
 8026468:	2004f760 	.word	0x2004f760

0802646c <__sfputc_r>:
 802646c:	6893      	ldr	r3, [r2, #8]
 802646e:	3b01      	subs	r3, #1
 8026470:	2b00      	cmp	r3, #0
 8026472:	6093      	str	r3, [r2, #8]
 8026474:	b410      	push	{r4}
 8026476:	da08      	bge.n	802648a <__sfputc_r+0x1e>
 8026478:	6994      	ldr	r4, [r2, #24]
 802647a:	42a3      	cmp	r3, r4
 802647c:	db01      	blt.n	8026482 <__sfputc_r+0x16>
 802647e:	290a      	cmp	r1, #10
 8026480:	d103      	bne.n	802648a <__sfputc_r+0x1e>
 8026482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026486:	f000 bb35 	b.w	8026af4 <__swbuf_r>
 802648a:	6813      	ldr	r3, [r2, #0]
 802648c:	1c58      	adds	r0, r3, #1
 802648e:	6010      	str	r0, [r2, #0]
 8026490:	4608      	mov	r0, r1
 8026492:	7019      	strb	r1, [r3, #0]
 8026494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026498:	4770      	bx	lr

0802649a <__sfputs_r>:
 802649a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802649c:	4606      	mov	r6, r0
 802649e:	460f      	mov	r7, r1
 80264a0:	4614      	mov	r4, r2
 80264a2:	18d5      	adds	r5, r2, r3
 80264a4:	42ac      	cmp	r4, r5
 80264a6:	d101      	bne.n	80264ac <__sfputs_r+0x12>
 80264a8:	2000      	movs	r0, #0
 80264aa:	e007      	b.n	80264bc <__sfputs_r+0x22>
 80264ac:	463a      	mov	r2, r7
 80264ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264b2:	4630      	mov	r0, r6
 80264b4:	f7ff ffda 	bl	802646c <__sfputc_r>
 80264b8:	1c43      	adds	r3, r0, #1
 80264ba:	d1f3      	bne.n	80264a4 <__sfputs_r+0xa>
 80264bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080264c0 <_vfiprintf_r>:
 80264c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264c4:	460d      	mov	r5, r1
 80264c6:	b09d      	sub	sp, #116	; 0x74
 80264c8:	4614      	mov	r4, r2
 80264ca:	4698      	mov	r8, r3
 80264cc:	4606      	mov	r6, r0
 80264ce:	b118      	cbz	r0, 80264d8 <_vfiprintf_r+0x18>
 80264d0:	6983      	ldr	r3, [r0, #24]
 80264d2:	b90b      	cbnz	r3, 80264d8 <_vfiprintf_r+0x18>
 80264d4:	f000 fd4a 	bl	8026f6c <__sinit>
 80264d8:	4b89      	ldr	r3, [pc, #548]	; (8026700 <_vfiprintf_r+0x240>)
 80264da:	429d      	cmp	r5, r3
 80264dc:	d11b      	bne.n	8026516 <_vfiprintf_r+0x56>
 80264de:	6875      	ldr	r5, [r6, #4]
 80264e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80264e2:	07d9      	lsls	r1, r3, #31
 80264e4:	d405      	bmi.n	80264f2 <_vfiprintf_r+0x32>
 80264e6:	89ab      	ldrh	r3, [r5, #12]
 80264e8:	059a      	lsls	r2, r3, #22
 80264ea:	d402      	bmi.n	80264f2 <_vfiprintf_r+0x32>
 80264ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80264ee:	f000 fddb 	bl	80270a8 <__retarget_lock_acquire_recursive>
 80264f2:	89ab      	ldrh	r3, [r5, #12]
 80264f4:	071b      	lsls	r3, r3, #28
 80264f6:	d501      	bpl.n	80264fc <_vfiprintf_r+0x3c>
 80264f8:	692b      	ldr	r3, [r5, #16]
 80264fa:	b9eb      	cbnz	r3, 8026538 <_vfiprintf_r+0x78>
 80264fc:	4629      	mov	r1, r5
 80264fe:	4630      	mov	r0, r6
 8026500:	f000 fb4a 	bl	8026b98 <__swsetup_r>
 8026504:	b1c0      	cbz	r0, 8026538 <_vfiprintf_r+0x78>
 8026506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026508:	07dc      	lsls	r4, r3, #31
 802650a:	d50e      	bpl.n	802652a <_vfiprintf_r+0x6a>
 802650c:	f04f 30ff 	mov.w	r0, #4294967295
 8026510:	b01d      	add	sp, #116	; 0x74
 8026512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026516:	4b7b      	ldr	r3, [pc, #492]	; (8026704 <_vfiprintf_r+0x244>)
 8026518:	429d      	cmp	r5, r3
 802651a:	d101      	bne.n	8026520 <_vfiprintf_r+0x60>
 802651c:	68b5      	ldr	r5, [r6, #8]
 802651e:	e7df      	b.n	80264e0 <_vfiprintf_r+0x20>
 8026520:	4b79      	ldr	r3, [pc, #484]	; (8026708 <_vfiprintf_r+0x248>)
 8026522:	429d      	cmp	r5, r3
 8026524:	bf08      	it	eq
 8026526:	68f5      	ldreq	r5, [r6, #12]
 8026528:	e7da      	b.n	80264e0 <_vfiprintf_r+0x20>
 802652a:	89ab      	ldrh	r3, [r5, #12]
 802652c:	0598      	lsls	r0, r3, #22
 802652e:	d4ed      	bmi.n	802650c <_vfiprintf_r+0x4c>
 8026530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026532:	f000 fdbb 	bl	80270ac <__retarget_lock_release_recursive>
 8026536:	e7e9      	b.n	802650c <_vfiprintf_r+0x4c>
 8026538:	2300      	movs	r3, #0
 802653a:	f8cd 800c 	str.w	r8, [sp, #12]
 802653e:	f04f 0901 	mov.w	r9, #1
 8026542:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 802670c <_vfiprintf_r+0x24c>
 8026546:	9309      	str	r3, [sp, #36]	; 0x24
 8026548:	2320      	movs	r3, #32
 802654a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802654e:	2330      	movs	r3, #48	; 0x30
 8026550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026554:	4623      	mov	r3, r4
 8026556:	469a      	mov	sl, r3
 8026558:	f813 2b01 	ldrb.w	r2, [r3], #1
 802655c:	b10a      	cbz	r2, 8026562 <_vfiprintf_r+0xa2>
 802655e:	2a25      	cmp	r2, #37	; 0x25
 8026560:	d1f9      	bne.n	8026556 <_vfiprintf_r+0x96>
 8026562:	ebba 0b04 	subs.w	fp, sl, r4
 8026566:	d00b      	beq.n	8026580 <_vfiprintf_r+0xc0>
 8026568:	465b      	mov	r3, fp
 802656a:	4622      	mov	r2, r4
 802656c:	4629      	mov	r1, r5
 802656e:	4630      	mov	r0, r6
 8026570:	f7ff ff93 	bl	802649a <__sfputs_r>
 8026574:	3001      	adds	r0, #1
 8026576:	f000 80aa 	beq.w	80266ce <_vfiprintf_r+0x20e>
 802657a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802657c:	445a      	add	r2, fp
 802657e:	9209      	str	r2, [sp, #36]	; 0x24
 8026580:	f89a 3000 	ldrb.w	r3, [sl]
 8026584:	2b00      	cmp	r3, #0
 8026586:	f000 80a2 	beq.w	80266ce <_vfiprintf_r+0x20e>
 802658a:	2300      	movs	r3, #0
 802658c:	f04f 32ff 	mov.w	r2, #4294967295
 8026590:	f10a 0a01 	add.w	sl, sl, #1
 8026594:	9304      	str	r3, [sp, #16]
 8026596:	9307      	str	r3, [sp, #28]
 8026598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802659c:	931a      	str	r3, [sp, #104]	; 0x68
 802659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80265a2:	4654      	mov	r4, sl
 80265a4:	2205      	movs	r2, #5
 80265a6:	4859      	ldr	r0, [pc, #356]	; (802670c <_vfiprintf_r+0x24c>)
 80265a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265ac:	f000 fde4 	bl	8027178 <memchr>
 80265b0:	9a04      	ldr	r2, [sp, #16]
 80265b2:	b9d8      	cbnz	r0, 80265ec <_vfiprintf_r+0x12c>
 80265b4:	06d1      	lsls	r1, r2, #27
 80265b6:	bf44      	itt	mi
 80265b8:	2320      	movmi	r3, #32
 80265ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80265be:	0713      	lsls	r3, r2, #28
 80265c0:	bf44      	itt	mi
 80265c2:	232b      	movmi	r3, #43	; 0x2b
 80265c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80265c8:	f89a 3000 	ldrb.w	r3, [sl]
 80265cc:	2b2a      	cmp	r3, #42	; 0x2a
 80265ce:	d015      	beq.n	80265fc <_vfiprintf_r+0x13c>
 80265d0:	9a07      	ldr	r2, [sp, #28]
 80265d2:	4654      	mov	r4, sl
 80265d4:	2000      	movs	r0, #0
 80265d6:	f04f 0c0a 	mov.w	ip, #10
 80265da:	4621      	mov	r1, r4
 80265dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80265e0:	3b30      	subs	r3, #48	; 0x30
 80265e2:	2b09      	cmp	r3, #9
 80265e4:	d94e      	bls.n	8026684 <_vfiprintf_r+0x1c4>
 80265e6:	b1b0      	cbz	r0, 8026616 <_vfiprintf_r+0x156>
 80265e8:	9207      	str	r2, [sp, #28]
 80265ea:	e014      	b.n	8026616 <_vfiprintf_r+0x156>
 80265ec:	eba0 0308 	sub.w	r3, r0, r8
 80265f0:	46a2      	mov	sl, r4
 80265f2:	fa09 f303 	lsl.w	r3, r9, r3
 80265f6:	4313      	orrs	r3, r2
 80265f8:	9304      	str	r3, [sp, #16]
 80265fa:	e7d2      	b.n	80265a2 <_vfiprintf_r+0xe2>
 80265fc:	9b03      	ldr	r3, [sp, #12]
 80265fe:	1d19      	adds	r1, r3, #4
 8026600:	681b      	ldr	r3, [r3, #0]
 8026602:	2b00      	cmp	r3, #0
 8026604:	9103      	str	r1, [sp, #12]
 8026606:	bfbb      	ittet	lt
 8026608:	425b      	neglt	r3, r3
 802660a:	f042 0202 	orrlt.w	r2, r2, #2
 802660e:	9307      	strge	r3, [sp, #28]
 8026610:	9307      	strlt	r3, [sp, #28]
 8026612:	bfb8      	it	lt
 8026614:	9204      	strlt	r2, [sp, #16]
 8026616:	7823      	ldrb	r3, [r4, #0]
 8026618:	2b2e      	cmp	r3, #46	; 0x2e
 802661a:	d10c      	bne.n	8026636 <_vfiprintf_r+0x176>
 802661c:	7863      	ldrb	r3, [r4, #1]
 802661e:	2b2a      	cmp	r3, #42	; 0x2a
 8026620:	d135      	bne.n	802668e <_vfiprintf_r+0x1ce>
 8026622:	9b03      	ldr	r3, [sp, #12]
 8026624:	3402      	adds	r4, #2
 8026626:	1d1a      	adds	r2, r3, #4
 8026628:	681b      	ldr	r3, [r3, #0]
 802662a:	2b00      	cmp	r3, #0
 802662c:	9203      	str	r2, [sp, #12]
 802662e:	bfb8      	it	lt
 8026630:	f04f 33ff 	movlt.w	r3, #4294967295
 8026634:	9305      	str	r3, [sp, #20]
 8026636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802671c <_vfiprintf_r+0x25c>
 802663a:	2203      	movs	r2, #3
 802663c:	7821      	ldrb	r1, [r4, #0]
 802663e:	4650      	mov	r0, sl
 8026640:	f000 fd9a 	bl	8027178 <memchr>
 8026644:	b140      	cbz	r0, 8026658 <_vfiprintf_r+0x198>
 8026646:	2340      	movs	r3, #64	; 0x40
 8026648:	eba0 000a 	sub.w	r0, r0, sl
 802664c:	3401      	adds	r4, #1
 802664e:	fa03 f000 	lsl.w	r0, r3, r0
 8026652:	9b04      	ldr	r3, [sp, #16]
 8026654:	4303      	orrs	r3, r0
 8026656:	9304      	str	r3, [sp, #16]
 8026658:	f814 1b01 	ldrb.w	r1, [r4], #1
 802665c:	2206      	movs	r2, #6
 802665e:	482c      	ldr	r0, [pc, #176]	; (8026710 <_vfiprintf_r+0x250>)
 8026660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026664:	f000 fd88 	bl	8027178 <memchr>
 8026668:	2800      	cmp	r0, #0
 802666a:	d03f      	beq.n	80266ec <_vfiprintf_r+0x22c>
 802666c:	4b29      	ldr	r3, [pc, #164]	; (8026714 <_vfiprintf_r+0x254>)
 802666e:	bb1b      	cbnz	r3, 80266b8 <_vfiprintf_r+0x1f8>
 8026670:	9b03      	ldr	r3, [sp, #12]
 8026672:	3307      	adds	r3, #7
 8026674:	f023 0307 	bic.w	r3, r3, #7
 8026678:	3308      	adds	r3, #8
 802667a:	9303      	str	r3, [sp, #12]
 802667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802667e:	443b      	add	r3, r7
 8026680:	9309      	str	r3, [sp, #36]	; 0x24
 8026682:	e767      	b.n	8026554 <_vfiprintf_r+0x94>
 8026684:	fb0c 3202 	mla	r2, ip, r2, r3
 8026688:	460c      	mov	r4, r1
 802668a:	2001      	movs	r0, #1
 802668c:	e7a5      	b.n	80265da <_vfiprintf_r+0x11a>
 802668e:	2300      	movs	r3, #0
 8026690:	3401      	adds	r4, #1
 8026692:	f04f 0c0a 	mov.w	ip, #10
 8026696:	4619      	mov	r1, r3
 8026698:	9305      	str	r3, [sp, #20]
 802669a:	4620      	mov	r0, r4
 802669c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80266a0:	3a30      	subs	r2, #48	; 0x30
 80266a2:	2a09      	cmp	r2, #9
 80266a4:	d903      	bls.n	80266ae <_vfiprintf_r+0x1ee>
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	d0c5      	beq.n	8026636 <_vfiprintf_r+0x176>
 80266aa:	9105      	str	r1, [sp, #20]
 80266ac:	e7c3      	b.n	8026636 <_vfiprintf_r+0x176>
 80266ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80266b2:	4604      	mov	r4, r0
 80266b4:	2301      	movs	r3, #1
 80266b6:	e7f0      	b.n	802669a <_vfiprintf_r+0x1da>
 80266b8:	ab03      	add	r3, sp, #12
 80266ba:	462a      	mov	r2, r5
 80266bc:	a904      	add	r1, sp, #16
 80266be:	4630      	mov	r0, r6
 80266c0:	9300      	str	r3, [sp, #0]
 80266c2:	4b15      	ldr	r3, [pc, #84]	; (8026718 <_vfiprintf_r+0x258>)
 80266c4:	e000      	b.n	80266c8 <_vfiprintf_r+0x208>
 80266c6:	bf00      	nop
 80266c8:	4607      	mov	r7, r0
 80266ca:	1c78      	adds	r0, r7, #1
 80266cc:	d1d6      	bne.n	802667c <_vfiprintf_r+0x1bc>
 80266ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80266d0:	07d9      	lsls	r1, r3, #31
 80266d2:	d405      	bmi.n	80266e0 <_vfiprintf_r+0x220>
 80266d4:	89ab      	ldrh	r3, [r5, #12]
 80266d6:	059a      	lsls	r2, r3, #22
 80266d8:	d402      	bmi.n	80266e0 <_vfiprintf_r+0x220>
 80266da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80266dc:	f000 fce6 	bl	80270ac <__retarget_lock_release_recursive>
 80266e0:	89ab      	ldrh	r3, [r5, #12]
 80266e2:	065b      	lsls	r3, r3, #25
 80266e4:	f53f af12 	bmi.w	802650c <_vfiprintf_r+0x4c>
 80266e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80266ea:	e711      	b.n	8026510 <_vfiprintf_r+0x50>
 80266ec:	ab03      	add	r3, sp, #12
 80266ee:	462a      	mov	r2, r5
 80266f0:	a904      	add	r1, sp, #16
 80266f2:	4630      	mov	r0, r6
 80266f4:	9300      	str	r3, [sp, #0]
 80266f6:	4b08      	ldr	r3, [pc, #32]	; (8026718 <_vfiprintf_r+0x258>)
 80266f8:	f000 f882 	bl	8026800 <_printf_i>
 80266fc:	e7e4      	b.n	80266c8 <_vfiprintf_r+0x208>
 80266fe:	bf00      	nop
 8026700:	08029824 	.word	0x08029824
 8026704:	08029844 	.word	0x08029844
 8026708:	08029804 	.word	0x08029804
 802670c:	080297cc 	.word	0x080297cc
 8026710:	080297d6 	.word	0x080297d6
 8026714:	00000000 	.word	0x00000000
 8026718:	0802649b 	.word	0x0802649b
 802671c:	080297d2 	.word	0x080297d2

08026720 <_printf_common>:
 8026720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026724:	4616      	mov	r6, r2
 8026726:	4699      	mov	r9, r3
 8026728:	688a      	ldr	r2, [r1, #8]
 802672a:	4607      	mov	r7, r0
 802672c:	690b      	ldr	r3, [r1, #16]
 802672e:	460c      	mov	r4, r1
 8026730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026734:	4293      	cmp	r3, r2
 8026736:	bfb8      	it	lt
 8026738:	4613      	movlt	r3, r2
 802673a:	6033      	str	r3, [r6, #0]
 802673c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026740:	b10a      	cbz	r2, 8026746 <_printf_common+0x26>
 8026742:	3301      	adds	r3, #1
 8026744:	6033      	str	r3, [r6, #0]
 8026746:	6823      	ldr	r3, [r4, #0]
 8026748:	0699      	lsls	r1, r3, #26
 802674a:	bf42      	ittt	mi
 802674c:	6833      	ldrmi	r3, [r6, #0]
 802674e:	3302      	addmi	r3, #2
 8026750:	6033      	strmi	r3, [r6, #0]
 8026752:	6825      	ldr	r5, [r4, #0]
 8026754:	f015 0506 	ands.w	r5, r5, #6
 8026758:	d106      	bne.n	8026768 <_printf_common+0x48>
 802675a:	f104 0a19 	add.w	sl, r4, #25
 802675e:	68e3      	ldr	r3, [r4, #12]
 8026760:	6832      	ldr	r2, [r6, #0]
 8026762:	1a9b      	subs	r3, r3, r2
 8026764:	42ab      	cmp	r3, r5
 8026766:	dc29      	bgt.n	80267bc <_printf_common+0x9c>
 8026768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802676c:	1e13      	subs	r3, r2, #0
 802676e:	6822      	ldr	r2, [r4, #0]
 8026770:	bf18      	it	ne
 8026772:	2301      	movne	r3, #1
 8026774:	0692      	lsls	r2, r2, #26
 8026776:	d42e      	bmi.n	80267d6 <_printf_common+0xb6>
 8026778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802677c:	4649      	mov	r1, r9
 802677e:	4638      	mov	r0, r7
 8026780:	47c0      	blx	r8
 8026782:	3001      	adds	r0, #1
 8026784:	d021      	beq.n	80267ca <_printf_common+0xaa>
 8026786:	6823      	ldr	r3, [r4, #0]
 8026788:	341a      	adds	r4, #26
 802678a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 802678e:	f003 0306 	and.w	r3, r3, #6
 8026792:	6832      	ldr	r2, [r6, #0]
 8026794:	2600      	movs	r6, #0
 8026796:	2b04      	cmp	r3, #4
 8026798:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802679c:	bf08      	it	eq
 802679e:	1aad      	subeq	r5, r5, r2
 80267a0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80267a4:	bf14      	ite	ne
 80267a6:	2500      	movne	r5, #0
 80267a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80267ac:	4293      	cmp	r3, r2
 80267ae:	bfc4      	itt	gt
 80267b0:	1a9b      	subgt	r3, r3, r2
 80267b2:	18ed      	addgt	r5, r5, r3
 80267b4:	42b5      	cmp	r5, r6
 80267b6:	d11a      	bne.n	80267ee <_printf_common+0xce>
 80267b8:	2000      	movs	r0, #0
 80267ba:	e008      	b.n	80267ce <_printf_common+0xae>
 80267bc:	2301      	movs	r3, #1
 80267be:	4652      	mov	r2, sl
 80267c0:	4649      	mov	r1, r9
 80267c2:	4638      	mov	r0, r7
 80267c4:	47c0      	blx	r8
 80267c6:	3001      	adds	r0, #1
 80267c8:	d103      	bne.n	80267d2 <_printf_common+0xb2>
 80267ca:	f04f 30ff 	mov.w	r0, #4294967295
 80267ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267d2:	3501      	adds	r5, #1
 80267d4:	e7c3      	b.n	802675e <_printf_common+0x3e>
 80267d6:	18e1      	adds	r1, r4, r3
 80267d8:	1c5a      	adds	r2, r3, #1
 80267da:	2030      	movs	r0, #48	; 0x30
 80267dc:	3302      	adds	r3, #2
 80267de:	4422      	add	r2, r4
 80267e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80267e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80267e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80267ec:	e7c4      	b.n	8026778 <_printf_common+0x58>
 80267ee:	2301      	movs	r3, #1
 80267f0:	4622      	mov	r2, r4
 80267f2:	4649      	mov	r1, r9
 80267f4:	4638      	mov	r0, r7
 80267f6:	47c0      	blx	r8
 80267f8:	3001      	adds	r0, #1
 80267fa:	d0e6      	beq.n	80267ca <_printf_common+0xaa>
 80267fc:	3601      	adds	r6, #1
 80267fe:	e7d9      	b.n	80267b4 <_printf_common+0x94>

08026800 <_printf_i>:
 8026800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026804:	7e0f      	ldrb	r7, [r1, #24]
 8026806:	4691      	mov	r9, r2
 8026808:	4680      	mov	r8, r0
 802680a:	460c      	mov	r4, r1
 802680c:	2f78      	cmp	r7, #120	; 0x78
 802680e:	469a      	mov	sl, r3
 8026810:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026816:	d807      	bhi.n	8026828 <_printf_i+0x28>
 8026818:	2f62      	cmp	r7, #98	; 0x62
 802681a:	d80a      	bhi.n	8026832 <_printf_i+0x32>
 802681c:	2f00      	cmp	r7, #0
 802681e:	f000 80d8 	beq.w	80269d2 <_printf_i+0x1d2>
 8026822:	2f58      	cmp	r7, #88	; 0x58
 8026824:	f000 80a3 	beq.w	802696e <_printf_i+0x16e>
 8026828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802682c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026830:	e03a      	b.n	80268a8 <_printf_i+0xa8>
 8026832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026836:	2b15      	cmp	r3, #21
 8026838:	d8f6      	bhi.n	8026828 <_printf_i+0x28>
 802683a:	a101      	add	r1, pc, #4	; (adr r1, 8026840 <_printf_i+0x40>)
 802683c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026840:	08026899 	.word	0x08026899
 8026844:	080268ad 	.word	0x080268ad
 8026848:	08026829 	.word	0x08026829
 802684c:	08026829 	.word	0x08026829
 8026850:	08026829 	.word	0x08026829
 8026854:	08026829 	.word	0x08026829
 8026858:	080268ad 	.word	0x080268ad
 802685c:	08026829 	.word	0x08026829
 8026860:	08026829 	.word	0x08026829
 8026864:	08026829 	.word	0x08026829
 8026868:	08026829 	.word	0x08026829
 802686c:	080269b9 	.word	0x080269b9
 8026870:	080268dd 	.word	0x080268dd
 8026874:	0802699b 	.word	0x0802699b
 8026878:	08026829 	.word	0x08026829
 802687c:	08026829 	.word	0x08026829
 8026880:	080269db 	.word	0x080269db
 8026884:	08026829 	.word	0x08026829
 8026888:	080268dd 	.word	0x080268dd
 802688c:	08026829 	.word	0x08026829
 8026890:	08026829 	.word	0x08026829
 8026894:	080269a3 	.word	0x080269a3
 8026898:	682b      	ldr	r3, [r5, #0]
 802689a:	1d1a      	adds	r2, r3, #4
 802689c:	681b      	ldr	r3, [r3, #0]
 802689e:	602a      	str	r2, [r5, #0]
 80268a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80268a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80268a8:	2301      	movs	r3, #1
 80268aa:	e0a3      	b.n	80269f4 <_printf_i+0x1f4>
 80268ac:	6820      	ldr	r0, [r4, #0]
 80268ae:	6829      	ldr	r1, [r5, #0]
 80268b0:	0606      	lsls	r6, r0, #24
 80268b2:	f101 0304 	add.w	r3, r1, #4
 80268b6:	d50a      	bpl.n	80268ce <_printf_i+0xce>
 80268b8:	680e      	ldr	r6, [r1, #0]
 80268ba:	602b      	str	r3, [r5, #0]
 80268bc:	2e00      	cmp	r6, #0
 80268be:	da03      	bge.n	80268c8 <_printf_i+0xc8>
 80268c0:	232d      	movs	r3, #45	; 0x2d
 80268c2:	4276      	negs	r6, r6
 80268c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80268c8:	485e      	ldr	r0, [pc, #376]	; (8026a44 <_printf_i+0x244>)
 80268ca:	230a      	movs	r3, #10
 80268cc:	e019      	b.n	8026902 <_printf_i+0x102>
 80268ce:	680e      	ldr	r6, [r1, #0]
 80268d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80268d4:	602b      	str	r3, [r5, #0]
 80268d6:	bf18      	it	ne
 80268d8:	b236      	sxthne	r6, r6
 80268da:	e7ef      	b.n	80268bc <_printf_i+0xbc>
 80268dc:	682b      	ldr	r3, [r5, #0]
 80268de:	6820      	ldr	r0, [r4, #0]
 80268e0:	1d19      	adds	r1, r3, #4
 80268e2:	6029      	str	r1, [r5, #0]
 80268e4:	0601      	lsls	r1, r0, #24
 80268e6:	d501      	bpl.n	80268ec <_printf_i+0xec>
 80268e8:	681e      	ldr	r6, [r3, #0]
 80268ea:	e002      	b.n	80268f2 <_printf_i+0xf2>
 80268ec:	0646      	lsls	r6, r0, #25
 80268ee:	d5fb      	bpl.n	80268e8 <_printf_i+0xe8>
 80268f0:	881e      	ldrh	r6, [r3, #0]
 80268f2:	2f6f      	cmp	r7, #111	; 0x6f
 80268f4:	4853      	ldr	r0, [pc, #332]	; (8026a44 <_printf_i+0x244>)
 80268f6:	bf0c      	ite	eq
 80268f8:	2308      	moveq	r3, #8
 80268fa:	230a      	movne	r3, #10
 80268fc:	2100      	movs	r1, #0
 80268fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026902:	6865      	ldr	r5, [r4, #4]
 8026904:	2d00      	cmp	r5, #0
 8026906:	60a5      	str	r5, [r4, #8]
 8026908:	bfa2      	ittt	ge
 802690a:	6821      	ldrge	r1, [r4, #0]
 802690c:	f021 0104 	bicge.w	r1, r1, #4
 8026910:	6021      	strge	r1, [r4, #0]
 8026912:	b90e      	cbnz	r6, 8026918 <_printf_i+0x118>
 8026914:	2d00      	cmp	r5, #0
 8026916:	d04d      	beq.n	80269b4 <_printf_i+0x1b4>
 8026918:	4615      	mov	r5, r2
 802691a:	fbb6 f1f3 	udiv	r1, r6, r3
 802691e:	fb03 6711 	mls	r7, r3, r1, r6
 8026922:	5dc7      	ldrb	r7, [r0, r7]
 8026924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026928:	4637      	mov	r7, r6
 802692a:	460e      	mov	r6, r1
 802692c:	42bb      	cmp	r3, r7
 802692e:	d9f4      	bls.n	802691a <_printf_i+0x11a>
 8026930:	2b08      	cmp	r3, #8
 8026932:	d10b      	bne.n	802694c <_printf_i+0x14c>
 8026934:	6823      	ldr	r3, [r4, #0]
 8026936:	07de      	lsls	r6, r3, #31
 8026938:	d508      	bpl.n	802694c <_printf_i+0x14c>
 802693a:	6923      	ldr	r3, [r4, #16]
 802693c:	6861      	ldr	r1, [r4, #4]
 802693e:	4299      	cmp	r1, r3
 8026940:	bfde      	ittt	le
 8026942:	2330      	movle	r3, #48	; 0x30
 8026944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026948:	f105 35ff 	addle.w	r5, r5, #4294967295
 802694c:	1b52      	subs	r2, r2, r5
 802694e:	6122      	str	r2, [r4, #16]
 8026950:	464b      	mov	r3, r9
 8026952:	aa03      	add	r2, sp, #12
 8026954:	4621      	mov	r1, r4
 8026956:	4640      	mov	r0, r8
 8026958:	f8cd a000 	str.w	sl, [sp]
 802695c:	f7ff fee0 	bl	8026720 <_printf_common>
 8026960:	3001      	adds	r0, #1
 8026962:	d14c      	bne.n	80269fe <_printf_i+0x1fe>
 8026964:	f04f 30ff 	mov.w	r0, #4294967295
 8026968:	b004      	add	sp, #16
 802696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802696e:	4835      	ldr	r0, [pc, #212]	; (8026a44 <_printf_i+0x244>)
 8026970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026974:	6829      	ldr	r1, [r5, #0]
 8026976:	6823      	ldr	r3, [r4, #0]
 8026978:	f851 6b04 	ldr.w	r6, [r1], #4
 802697c:	6029      	str	r1, [r5, #0]
 802697e:	061d      	lsls	r5, r3, #24
 8026980:	d514      	bpl.n	80269ac <_printf_i+0x1ac>
 8026982:	07df      	lsls	r7, r3, #31
 8026984:	bf44      	itt	mi
 8026986:	f043 0320 	orrmi.w	r3, r3, #32
 802698a:	6023      	strmi	r3, [r4, #0]
 802698c:	b91e      	cbnz	r6, 8026996 <_printf_i+0x196>
 802698e:	6823      	ldr	r3, [r4, #0]
 8026990:	f023 0320 	bic.w	r3, r3, #32
 8026994:	6023      	str	r3, [r4, #0]
 8026996:	2310      	movs	r3, #16
 8026998:	e7b0      	b.n	80268fc <_printf_i+0xfc>
 802699a:	6823      	ldr	r3, [r4, #0]
 802699c:	f043 0320 	orr.w	r3, r3, #32
 80269a0:	6023      	str	r3, [r4, #0]
 80269a2:	2378      	movs	r3, #120	; 0x78
 80269a4:	4828      	ldr	r0, [pc, #160]	; (8026a48 <_printf_i+0x248>)
 80269a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80269aa:	e7e3      	b.n	8026974 <_printf_i+0x174>
 80269ac:	0659      	lsls	r1, r3, #25
 80269ae:	bf48      	it	mi
 80269b0:	b2b6      	uxthmi	r6, r6
 80269b2:	e7e6      	b.n	8026982 <_printf_i+0x182>
 80269b4:	4615      	mov	r5, r2
 80269b6:	e7bb      	b.n	8026930 <_printf_i+0x130>
 80269b8:	682b      	ldr	r3, [r5, #0]
 80269ba:	6826      	ldr	r6, [r4, #0]
 80269bc:	1d18      	adds	r0, r3, #4
 80269be:	6961      	ldr	r1, [r4, #20]
 80269c0:	6028      	str	r0, [r5, #0]
 80269c2:	0635      	lsls	r5, r6, #24
 80269c4:	681b      	ldr	r3, [r3, #0]
 80269c6:	d501      	bpl.n	80269cc <_printf_i+0x1cc>
 80269c8:	6019      	str	r1, [r3, #0]
 80269ca:	e002      	b.n	80269d2 <_printf_i+0x1d2>
 80269cc:	0670      	lsls	r0, r6, #25
 80269ce:	d5fb      	bpl.n	80269c8 <_printf_i+0x1c8>
 80269d0:	8019      	strh	r1, [r3, #0]
 80269d2:	2300      	movs	r3, #0
 80269d4:	4615      	mov	r5, r2
 80269d6:	6123      	str	r3, [r4, #16]
 80269d8:	e7ba      	b.n	8026950 <_printf_i+0x150>
 80269da:	682b      	ldr	r3, [r5, #0]
 80269dc:	2100      	movs	r1, #0
 80269de:	1d1a      	adds	r2, r3, #4
 80269e0:	602a      	str	r2, [r5, #0]
 80269e2:	681d      	ldr	r5, [r3, #0]
 80269e4:	6862      	ldr	r2, [r4, #4]
 80269e6:	4628      	mov	r0, r5
 80269e8:	f000 fbc6 	bl	8027178 <memchr>
 80269ec:	b108      	cbz	r0, 80269f2 <_printf_i+0x1f2>
 80269ee:	1b40      	subs	r0, r0, r5
 80269f0:	6060      	str	r0, [r4, #4]
 80269f2:	6863      	ldr	r3, [r4, #4]
 80269f4:	6123      	str	r3, [r4, #16]
 80269f6:	2300      	movs	r3, #0
 80269f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80269fc:	e7a8      	b.n	8026950 <_printf_i+0x150>
 80269fe:	6923      	ldr	r3, [r4, #16]
 8026a00:	462a      	mov	r2, r5
 8026a02:	4649      	mov	r1, r9
 8026a04:	4640      	mov	r0, r8
 8026a06:	47d0      	blx	sl
 8026a08:	3001      	adds	r0, #1
 8026a0a:	d0ab      	beq.n	8026964 <_printf_i+0x164>
 8026a0c:	6823      	ldr	r3, [r4, #0]
 8026a0e:	079b      	lsls	r3, r3, #30
 8026a10:	d413      	bmi.n	8026a3a <_printf_i+0x23a>
 8026a12:	68e0      	ldr	r0, [r4, #12]
 8026a14:	9b03      	ldr	r3, [sp, #12]
 8026a16:	4298      	cmp	r0, r3
 8026a18:	bfb8      	it	lt
 8026a1a:	4618      	movlt	r0, r3
 8026a1c:	e7a4      	b.n	8026968 <_printf_i+0x168>
 8026a1e:	2301      	movs	r3, #1
 8026a20:	4632      	mov	r2, r6
 8026a22:	4649      	mov	r1, r9
 8026a24:	4640      	mov	r0, r8
 8026a26:	47d0      	blx	sl
 8026a28:	3001      	adds	r0, #1
 8026a2a:	d09b      	beq.n	8026964 <_printf_i+0x164>
 8026a2c:	3501      	adds	r5, #1
 8026a2e:	68e3      	ldr	r3, [r4, #12]
 8026a30:	9903      	ldr	r1, [sp, #12]
 8026a32:	1a5b      	subs	r3, r3, r1
 8026a34:	42ab      	cmp	r3, r5
 8026a36:	dcf2      	bgt.n	8026a1e <_printf_i+0x21e>
 8026a38:	e7eb      	b.n	8026a12 <_printf_i+0x212>
 8026a3a:	2500      	movs	r5, #0
 8026a3c:	f104 0619 	add.w	r6, r4, #25
 8026a40:	e7f5      	b.n	8026a2e <_printf_i+0x22e>
 8026a42:	bf00      	nop
 8026a44:	080297dd 	.word	0x080297dd
 8026a48:	080297ee 	.word	0x080297ee

08026a4c <_sbrk_r>:
 8026a4c:	b538      	push	{r3, r4, r5, lr}
 8026a4e:	2300      	movs	r3, #0
 8026a50:	4d05      	ldr	r5, [pc, #20]	; (8026a68 <_sbrk_r+0x1c>)
 8026a52:	4604      	mov	r4, r0
 8026a54:	4608      	mov	r0, r1
 8026a56:	602b      	str	r3, [r5, #0]
 8026a58:	f7db fb0c 	bl	8002074 <_sbrk>
 8026a5c:	1c43      	adds	r3, r0, #1
 8026a5e:	d102      	bne.n	8026a66 <_sbrk_r+0x1a>
 8026a60:	682b      	ldr	r3, [r5, #0]
 8026a62:	b103      	cbz	r3, 8026a66 <_sbrk_r+0x1a>
 8026a64:	6023      	str	r3, [r4, #0]
 8026a66:	bd38      	pop	{r3, r4, r5, pc}
 8026a68:	2004f904 	.word	0x2004f904

08026a6c <_raise_r>:
 8026a6c:	291f      	cmp	r1, #31
 8026a6e:	b538      	push	{r3, r4, r5, lr}
 8026a70:	4604      	mov	r4, r0
 8026a72:	460d      	mov	r5, r1
 8026a74:	d904      	bls.n	8026a80 <_raise_r+0x14>
 8026a76:	2316      	movs	r3, #22
 8026a78:	6003      	str	r3, [r0, #0]
 8026a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8026a7e:	bd38      	pop	{r3, r4, r5, pc}
 8026a80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026a82:	b112      	cbz	r2, 8026a8a <_raise_r+0x1e>
 8026a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a88:	b94b      	cbnz	r3, 8026a9e <_raise_r+0x32>
 8026a8a:	4620      	mov	r0, r4
 8026a8c:	f000 f830 	bl	8026af0 <_getpid_r>
 8026a90:	462a      	mov	r2, r5
 8026a92:	4601      	mov	r1, r0
 8026a94:	4620      	mov	r0, r4
 8026a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026a9a:	f000 b817 	b.w	8026acc <_kill_r>
 8026a9e:	2b01      	cmp	r3, #1
 8026aa0:	d00a      	beq.n	8026ab8 <_raise_r+0x4c>
 8026aa2:	1c59      	adds	r1, r3, #1
 8026aa4:	d103      	bne.n	8026aae <_raise_r+0x42>
 8026aa6:	2316      	movs	r3, #22
 8026aa8:	6003      	str	r3, [r0, #0]
 8026aaa:	2001      	movs	r0, #1
 8026aac:	e7e7      	b.n	8026a7e <_raise_r+0x12>
 8026aae:	2400      	movs	r4, #0
 8026ab0:	4628      	mov	r0, r5
 8026ab2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026ab6:	4798      	blx	r3
 8026ab8:	2000      	movs	r0, #0
 8026aba:	e7e0      	b.n	8026a7e <_raise_r+0x12>

08026abc <raise>:
 8026abc:	4b02      	ldr	r3, [pc, #8]	; (8026ac8 <raise+0xc>)
 8026abe:	4601      	mov	r1, r0
 8026ac0:	6818      	ldr	r0, [r3, #0]
 8026ac2:	f7ff bfd3 	b.w	8026a6c <_raise_r>
 8026ac6:	bf00      	nop
 8026ac8:	20025898 	.word	0x20025898

08026acc <_kill_r>:
 8026acc:	b538      	push	{r3, r4, r5, lr}
 8026ace:	2300      	movs	r3, #0
 8026ad0:	4d06      	ldr	r5, [pc, #24]	; (8026aec <_kill_r+0x20>)
 8026ad2:	4604      	mov	r4, r0
 8026ad4:	4608      	mov	r0, r1
 8026ad6:	4611      	mov	r1, r2
 8026ad8:	602b      	str	r3, [r5, #0]
 8026ada:	f7db fa43 	bl	8001f64 <_kill>
 8026ade:	1c43      	adds	r3, r0, #1
 8026ae0:	d102      	bne.n	8026ae8 <_kill_r+0x1c>
 8026ae2:	682b      	ldr	r3, [r5, #0]
 8026ae4:	b103      	cbz	r3, 8026ae8 <_kill_r+0x1c>
 8026ae6:	6023      	str	r3, [r4, #0]
 8026ae8:	bd38      	pop	{r3, r4, r5, pc}
 8026aea:	bf00      	nop
 8026aec:	2004f904 	.word	0x2004f904

08026af0 <_getpid_r>:
 8026af0:	f7db ba30 	b.w	8001f54 <_getpid>

08026af4 <__swbuf_r>:
 8026af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026af6:	460e      	mov	r6, r1
 8026af8:	4614      	mov	r4, r2
 8026afa:	4605      	mov	r5, r0
 8026afc:	b118      	cbz	r0, 8026b06 <__swbuf_r+0x12>
 8026afe:	6983      	ldr	r3, [r0, #24]
 8026b00:	b90b      	cbnz	r3, 8026b06 <__swbuf_r+0x12>
 8026b02:	f000 fa33 	bl	8026f6c <__sinit>
 8026b06:	4b21      	ldr	r3, [pc, #132]	; (8026b8c <__swbuf_r+0x98>)
 8026b08:	429c      	cmp	r4, r3
 8026b0a:	d12b      	bne.n	8026b64 <__swbuf_r+0x70>
 8026b0c:	686c      	ldr	r4, [r5, #4]
 8026b0e:	69a3      	ldr	r3, [r4, #24]
 8026b10:	60a3      	str	r3, [r4, #8]
 8026b12:	89a3      	ldrh	r3, [r4, #12]
 8026b14:	071a      	lsls	r2, r3, #28
 8026b16:	d52f      	bpl.n	8026b78 <__swbuf_r+0x84>
 8026b18:	6923      	ldr	r3, [r4, #16]
 8026b1a:	b36b      	cbz	r3, 8026b78 <__swbuf_r+0x84>
 8026b1c:	6923      	ldr	r3, [r4, #16]
 8026b1e:	b2f6      	uxtb	r6, r6
 8026b20:	6820      	ldr	r0, [r4, #0]
 8026b22:	4637      	mov	r7, r6
 8026b24:	1ac0      	subs	r0, r0, r3
 8026b26:	6963      	ldr	r3, [r4, #20]
 8026b28:	4283      	cmp	r3, r0
 8026b2a:	dc04      	bgt.n	8026b36 <__swbuf_r+0x42>
 8026b2c:	4621      	mov	r1, r4
 8026b2e:	4628      	mov	r0, r5
 8026b30:	f000 f988 	bl	8026e44 <_fflush_r>
 8026b34:	bb30      	cbnz	r0, 8026b84 <__swbuf_r+0x90>
 8026b36:	68a3      	ldr	r3, [r4, #8]
 8026b38:	3001      	adds	r0, #1
 8026b3a:	3b01      	subs	r3, #1
 8026b3c:	60a3      	str	r3, [r4, #8]
 8026b3e:	6823      	ldr	r3, [r4, #0]
 8026b40:	1c5a      	adds	r2, r3, #1
 8026b42:	6022      	str	r2, [r4, #0]
 8026b44:	701e      	strb	r6, [r3, #0]
 8026b46:	6963      	ldr	r3, [r4, #20]
 8026b48:	4283      	cmp	r3, r0
 8026b4a:	d004      	beq.n	8026b56 <__swbuf_r+0x62>
 8026b4c:	89a3      	ldrh	r3, [r4, #12]
 8026b4e:	07db      	lsls	r3, r3, #31
 8026b50:	d506      	bpl.n	8026b60 <__swbuf_r+0x6c>
 8026b52:	2e0a      	cmp	r6, #10
 8026b54:	d104      	bne.n	8026b60 <__swbuf_r+0x6c>
 8026b56:	4621      	mov	r1, r4
 8026b58:	4628      	mov	r0, r5
 8026b5a:	f000 f973 	bl	8026e44 <_fflush_r>
 8026b5e:	b988      	cbnz	r0, 8026b84 <__swbuf_r+0x90>
 8026b60:	4638      	mov	r0, r7
 8026b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026b64:	4b0a      	ldr	r3, [pc, #40]	; (8026b90 <__swbuf_r+0x9c>)
 8026b66:	429c      	cmp	r4, r3
 8026b68:	d101      	bne.n	8026b6e <__swbuf_r+0x7a>
 8026b6a:	68ac      	ldr	r4, [r5, #8]
 8026b6c:	e7cf      	b.n	8026b0e <__swbuf_r+0x1a>
 8026b6e:	4b09      	ldr	r3, [pc, #36]	; (8026b94 <__swbuf_r+0xa0>)
 8026b70:	429c      	cmp	r4, r3
 8026b72:	bf08      	it	eq
 8026b74:	68ec      	ldreq	r4, [r5, #12]
 8026b76:	e7ca      	b.n	8026b0e <__swbuf_r+0x1a>
 8026b78:	4621      	mov	r1, r4
 8026b7a:	4628      	mov	r0, r5
 8026b7c:	f000 f80c 	bl	8026b98 <__swsetup_r>
 8026b80:	2800      	cmp	r0, #0
 8026b82:	d0cb      	beq.n	8026b1c <__swbuf_r+0x28>
 8026b84:	f04f 37ff 	mov.w	r7, #4294967295
 8026b88:	e7ea      	b.n	8026b60 <__swbuf_r+0x6c>
 8026b8a:	bf00      	nop
 8026b8c:	08029824 	.word	0x08029824
 8026b90:	08029844 	.word	0x08029844
 8026b94:	08029804 	.word	0x08029804

08026b98 <__swsetup_r>:
 8026b98:	4b32      	ldr	r3, [pc, #200]	; (8026c64 <__swsetup_r+0xcc>)
 8026b9a:	b570      	push	{r4, r5, r6, lr}
 8026b9c:	681d      	ldr	r5, [r3, #0]
 8026b9e:	4606      	mov	r6, r0
 8026ba0:	460c      	mov	r4, r1
 8026ba2:	b125      	cbz	r5, 8026bae <__swsetup_r+0x16>
 8026ba4:	69ab      	ldr	r3, [r5, #24]
 8026ba6:	b913      	cbnz	r3, 8026bae <__swsetup_r+0x16>
 8026ba8:	4628      	mov	r0, r5
 8026baa:	f000 f9df 	bl	8026f6c <__sinit>
 8026bae:	4b2e      	ldr	r3, [pc, #184]	; (8026c68 <__swsetup_r+0xd0>)
 8026bb0:	429c      	cmp	r4, r3
 8026bb2:	d10f      	bne.n	8026bd4 <__swsetup_r+0x3c>
 8026bb4:	686c      	ldr	r4, [r5, #4]
 8026bb6:	89a3      	ldrh	r3, [r4, #12]
 8026bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026bbc:	0719      	lsls	r1, r3, #28
 8026bbe:	d42c      	bmi.n	8026c1a <__swsetup_r+0x82>
 8026bc0:	06dd      	lsls	r5, r3, #27
 8026bc2:	d411      	bmi.n	8026be8 <__swsetup_r+0x50>
 8026bc4:	2309      	movs	r3, #9
 8026bc6:	6033      	str	r3, [r6, #0]
 8026bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8026bd0:	81a3      	strh	r3, [r4, #12]
 8026bd2:	e03e      	b.n	8026c52 <__swsetup_r+0xba>
 8026bd4:	4b25      	ldr	r3, [pc, #148]	; (8026c6c <__swsetup_r+0xd4>)
 8026bd6:	429c      	cmp	r4, r3
 8026bd8:	d101      	bne.n	8026bde <__swsetup_r+0x46>
 8026bda:	68ac      	ldr	r4, [r5, #8]
 8026bdc:	e7eb      	b.n	8026bb6 <__swsetup_r+0x1e>
 8026bde:	4b24      	ldr	r3, [pc, #144]	; (8026c70 <__swsetup_r+0xd8>)
 8026be0:	429c      	cmp	r4, r3
 8026be2:	bf08      	it	eq
 8026be4:	68ec      	ldreq	r4, [r5, #12]
 8026be6:	e7e6      	b.n	8026bb6 <__swsetup_r+0x1e>
 8026be8:	0758      	lsls	r0, r3, #29
 8026bea:	d512      	bpl.n	8026c12 <__swsetup_r+0x7a>
 8026bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026bee:	b141      	cbz	r1, 8026c02 <__swsetup_r+0x6a>
 8026bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026bf4:	4299      	cmp	r1, r3
 8026bf6:	d002      	beq.n	8026bfe <__swsetup_r+0x66>
 8026bf8:	4630      	mov	r0, r6
 8026bfa:	f7ff fb57 	bl	80262ac <_free_r>
 8026bfe:	2300      	movs	r3, #0
 8026c00:	6363      	str	r3, [r4, #52]	; 0x34
 8026c02:	89a3      	ldrh	r3, [r4, #12]
 8026c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026c08:	81a3      	strh	r3, [r4, #12]
 8026c0a:	2300      	movs	r3, #0
 8026c0c:	6063      	str	r3, [r4, #4]
 8026c0e:	6923      	ldr	r3, [r4, #16]
 8026c10:	6023      	str	r3, [r4, #0]
 8026c12:	89a3      	ldrh	r3, [r4, #12]
 8026c14:	f043 0308 	orr.w	r3, r3, #8
 8026c18:	81a3      	strh	r3, [r4, #12]
 8026c1a:	6923      	ldr	r3, [r4, #16]
 8026c1c:	b94b      	cbnz	r3, 8026c32 <__swsetup_r+0x9a>
 8026c1e:	89a3      	ldrh	r3, [r4, #12]
 8026c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026c28:	d003      	beq.n	8026c32 <__swsetup_r+0x9a>
 8026c2a:	4621      	mov	r1, r4
 8026c2c:	4630      	mov	r0, r6
 8026c2e:	f000 fa63 	bl	80270f8 <__smakebuf_r>
 8026c32:	89a0      	ldrh	r0, [r4, #12]
 8026c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026c38:	f010 0301 	ands.w	r3, r0, #1
 8026c3c:	d00a      	beq.n	8026c54 <__swsetup_r+0xbc>
 8026c3e:	2300      	movs	r3, #0
 8026c40:	60a3      	str	r3, [r4, #8]
 8026c42:	6963      	ldr	r3, [r4, #20]
 8026c44:	425b      	negs	r3, r3
 8026c46:	61a3      	str	r3, [r4, #24]
 8026c48:	6923      	ldr	r3, [r4, #16]
 8026c4a:	b943      	cbnz	r3, 8026c5e <__swsetup_r+0xc6>
 8026c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026c50:	d1ba      	bne.n	8026bc8 <__swsetup_r+0x30>
 8026c52:	bd70      	pop	{r4, r5, r6, pc}
 8026c54:	0781      	lsls	r1, r0, #30
 8026c56:	bf58      	it	pl
 8026c58:	6963      	ldrpl	r3, [r4, #20]
 8026c5a:	60a3      	str	r3, [r4, #8]
 8026c5c:	e7f4      	b.n	8026c48 <__swsetup_r+0xb0>
 8026c5e:	2000      	movs	r0, #0
 8026c60:	e7f7      	b.n	8026c52 <__swsetup_r+0xba>
 8026c62:	bf00      	nop
 8026c64:	20025898 	.word	0x20025898
 8026c68:	08029824 	.word	0x08029824
 8026c6c:	08029844 	.word	0x08029844
 8026c70:	08029804 	.word	0x08029804

08026c74 <__register_exitproc>:
 8026c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c78:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8026d38 <__register_exitproc+0xc4>
 8026c7c:	4606      	mov	r6, r0
 8026c7e:	461f      	mov	r7, r3
 8026c80:	460d      	mov	r5, r1
 8026c82:	f8d8 0000 	ldr.w	r0, [r8]
 8026c86:	4691      	mov	r9, r2
 8026c88:	f000 fa0e 	bl	80270a8 <__retarget_lock_acquire_recursive>
 8026c8c:	4b26      	ldr	r3, [pc, #152]	; (8026d28 <__register_exitproc+0xb4>)
 8026c8e:	681c      	ldr	r4, [r3, #0]
 8026c90:	b934      	cbnz	r4, 8026ca0 <__register_exitproc+0x2c>
 8026c92:	4c26      	ldr	r4, [pc, #152]	; (8026d2c <__register_exitproc+0xb8>)
 8026c94:	601c      	str	r4, [r3, #0]
 8026c96:	4b26      	ldr	r3, [pc, #152]	; (8026d30 <__register_exitproc+0xbc>)
 8026c98:	b113      	cbz	r3, 8026ca0 <__register_exitproc+0x2c>
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026ca0:	6863      	ldr	r3, [r4, #4]
 8026ca2:	2b1f      	cmp	r3, #31
 8026ca4:	dd07      	ble.n	8026cb6 <__register_exitproc+0x42>
 8026ca6:	f8d8 0000 	ldr.w	r0, [r8]
 8026caa:	f000 f9ff 	bl	80270ac <__retarget_lock_release_recursive>
 8026cae:	f04f 30ff 	mov.w	r0, #4294967295
 8026cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026cb6:	b35e      	cbz	r6, 8026d10 <__register_exitproc+0x9c>
 8026cb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026cbc:	b988      	cbnz	r0, 8026ce2 <__register_exitproc+0x6e>
 8026cbe:	4b1d      	ldr	r3, [pc, #116]	; (8026d34 <__register_exitproc+0xc0>)
 8026cc0:	b923      	cbnz	r3, 8026ccc <__register_exitproc+0x58>
 8026cc2:	f8d8 0000 	ldr.w	r0, [r8]
 8026cc6:	f000 f9f0 	bl	80270aa <__retarget_lock_release>
 8026cca:	e7f0      	b.n	8026cae <__register_exitproc+0x3a>
 8026ccc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026cd0:	f7ff fad4 	bl	802627c <malloc>
 8026cd4:	2800      	cmp	r0, #0
 8026cd6:	d0f4      	beq.n	8026cc2 <__register_exitproc+0x4e>
 8026cd8:	2300      	movs	r3, #0
 8026cda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026cde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026ce2:	6863      	ldr	r3, [r4, #4]
 8026ce4:	2201      	movs	r2, #1
 8026ce6:	2e02      	cmp	r6, #2
 8026ce8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026cec:	fa02 f203 	lsl.w	r2, r2, r3
 8026cf0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026cf4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026cf8:	ea43 0302 	orr.w	r3, r3, r2
 8026cfc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026d00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026d04:	bf02      	ittt	eq
 8026d06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8026d0a:	4313      	orreq	r3, r2
 8026d0c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8026d10:	6863      	ldr	r3, [r4, #4]
 8026d12:	f8d8 0000 	ldr.w	r0, [r8]
 8026d16:	1c5a      	adds	r2, r3, #1
 8026d18:	3302      	adds	r3, #2
 8026d1a:	6062      	str	r2, [r4, #4]
 8026d1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8026d20:	f000 f9c4 	bl	80270ac <__retarget_lock_release_recursive>
 8026d24:	2000      	movs	r0, #0
 8026d26:	e7c4      	b.n	8026cb2 <__register_exitproc+0x3e>
 8026d28:	2004f8fc 	.word	0x2004f8fc
 8026d2c:	2004f870 	.word	0x2004f870
 8026d30:	08029800 	.word	0x08029800
 8026d34:	0802627d 	.word	0x0802627d
 8026d38:	200258fc 	.word	0x200258fc

08026d3c <__sflush_r>:
 8026d3c:	898a      	ldrh	r2, [r1, #12]
 8026d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d42:	4605      	mov	r5, r0
 8026d44:	0710      	lsls	r0, r2, #28
 8026d46:	460c      	mov	r4, r1
 8026d48:	d458      	bmi.n	8026dfc <__sflush_r+0xc0>
 8026d4a:	684b      	ldr	r3, [r1, #4]
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	dc05      	bgt.n	8026d5c <__sflush_r+0x20>
 8026d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026d52:	2b00      	cmp	r3, #0
 8026d54:	dc02      	bgt.n	8026d5c <__sflush_r+0x20>
 8026d56:	2000      	movs	r0, #0
 8026d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026d5e:	2e00      	cmp	r6, #0
 8026d60:	d0f9      	beq.n	8026d56 <__sflush_r+0x1a>
 8026d62:	2300      	movs	r3, #0
 8026d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026d68:	682f      	ldr	r7, [r5, #0]
 8026d6a:	602b      	str	r3, [r5, #0]
 8026d6c:	d032      	beq.n	8026dd4 <__sflush_r+0x98>
 8026d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026d70:	89a3      	ldrh	r3, [r4, #12]
 8026d72:	075a      	lsls	r2, r3, #29
 8026d74:	d505      	bpl.n	8026d82 <__sflush_r+0x46>
 8026d76:	6863      	ldr	r3, [r4, #4]
 8026d78:	1ac0      	subs	r0, r0, r3
 8026d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026d7c:	b10b      	cbz	r3, 8026d82 <__sflush_r+0x46>
 8026d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026d80:	1ac0      	subs	r0, r0, r3
 8026d82:	2300      	movs	r3, #0
 8026d84:	4602      	mov	r2, r0
 8026d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026d88:	4628      	mov	r0, r5
 8026d8a:	6a21      	ldr	r1, [r4, #32]
 8026d8c:	47b0      	blx	r6
 8026d8e:	1c43      	adds	r3, r0, #1
 8026d90:	89a3      	ldrh	r3, [r4, #12]
 8026d92:	d106      	bne.n	8026da2 <__sflush_r+0x66>
 8026d94:	6829      	ldr	r1, [r5, #0]
 8026d96:	291d      	cmp	r1, #29
 8026d98:	d82c      	bhi.n	8026df4 <__sflush_r+0xb8>
 8026d9a:	4a29      	ldr	r2, [pc, #164]	; (8026e40 <__sflush_r+0x104>)
 8026d9c:	40ca      	lsrs	r2, r1
 8026d9e:	07d6      	lsls	r6, r2, #31
 8026da0:	d528      	bpl.n	8026df4 <__sflush_r+0xb8>
 8026da2:	2200      	movs	r2, #0
 8026da4:	04d9      	lsls	r1, r3, #19
 8026da6:	6062      	str	r2, [r4, #4]
 8026da8:	6922      	ldr	r2, [r4, #16]
 8026daa:	6022      	str	r2, [r4, #0]
 8026dac:	d504      	bpl.n	8026db8 <__sflush_r+0x7c>
 8026dae:	1c42      	adds	r2, r0, #1
 8026db0:	d101      	bne.n	8026db6 <__sflush_r+0x7a>
 8026db2:	682b      	ldr	r3, [r5, #0]
 8026db4:	b903      	cbnz	r3, 8026db8 <__sflush_r+0x7c>
 8026db6:	6560      	str	r0, [r4, #84]	; 0x54
 8026db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026dba:	602f      	str	r7, [r5, #0]
 8026dbc:	2900      	cmp	r1, #0
 8026dbe:	d0ca      	beq.n	8026d56 <__sflush_r+0x1a>
 8026dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026dc4:	4299      	cmp	r1, r3
 8026dc6:	d002      	beq.n	8026dce <__sflush_r+0x92>
 8026dc8:	4628      	mov	r0, r5
 8026dca:	f7ff fa6f 	bl	80262ac <_free_r>
 8026dce:	2000      	movs	r0, #0
 8026dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8026dd2:	e7c1      	b.n	8026d58 <__sflush_r+0x1c>
 8026dd4:	6a21      	ldr	r1, [r4, #32]
 8026dd6:	2301      	movs	r3, #1
 8026dd8:	4628      	mov	r0, r5
 8026dda:	47b0      	blx	r6
 8026ddc:	1c41      	adds	r1, r0, #1
 8026dde:	d1c7      	bne.n	8026d70 <__sflush_r+0x34>
 8026de0:	682b      	ldr	r3, [r5, #0]
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	d0c4      	beq.n	8026d70 <__sflush_r+0x34>
 8026de6:	2b1d      	cmp	r3, #29
 8026de8:	d001      	beq.n	8026dee <__sflush_r+0xb2>
 8026dea:	2b16      	cmp	r3, #22
 8026dec:	d101      	bne.n	8026df2 <__sflush_r+0xb6>
 8026dee:	602f      	str	r7, [r5, #0]
 8026df0:	e7b1      	b.n	8026d56 <__sflush_r+0x1a>
 8026df2:	89a3      	ldrh	r3, [r4, #12]
 8026df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026df8:	81a3      	strh	r3, [r4, #12]
 8026dfa:	e7ad      	b.n	8026d58 <__sflush_r+0x1c>
 8026dfc:	690f      	ldr	r7, [r1, #16]
 8026dfe:	2f00      	cmp	r7, #0
 8026e00:	d0a9      	beq.n	8026d56 <__sflush_r+0x1a>
 8026e02:	0793      	lsls	r3, r2, #30
 8026e04:	680e      	ldr	r6, [r1, #0]
 8026e06:	600f      	str	r7, [r1, #0]
 8026e08:	bf0c      	ite	eq
 8026e0a:	694b      	ldreq	r3, [r1, #20]
 8026e0c:	2300      	movne	r3, #0
 8026e0e:	eba6 0807 	sub.w	r8, r6, r7
 8026e12:	608b      	str	r3, [r1, #8]
 8026e14:	f1b8 0f00 	cmp.w	r8, #0
 8026e18:	dd9d      	ble.n	8026d56 <__sflush_r+0x1a>
 8026e1a:	4643      	mov	r3, r8
 8026e1c:	463a      	mov	r2, r7
 8026e1e:	6a21      	ldr	r1, [r4, #32]
 8026e20:	4628      	mov	r0, r5
 8026e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026e24:	47b0      	blx	r6
 8026e26:	2800      	cmp	r0, #0
 8026e28:	dc06      	bgt.n	8026e38 <__sflush_r+0xfc>
 8026e2a:	89a3      	ldrh	r3, [r4, #12]
 8026e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8026e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026e34:	81a3      	strh	r3, [r4, #12]
 8026e36:	e78f      	b.n	8026d58 <__sflush_r+0x1c>
 8026e38:	4407      	add	r7, r0
 8026e3a:	eba8 0800 	sub.w	r8, r8, r0
 8026e3e:	e7e9      	b.n	8026e14 <__sflush_r+0xd8>
 8026e40:	20400001 	.word	0x20400001

08026e44 <_fflush_r>:
 8026e44:	b538      	push	{r3, r4, r5, lr}
 8026e46:	690b      	ldr	r3, [r1, #16]
 8026e48:	4605      	mov	r5, r0
 8026e4a:	460c      	mov	r4, r1
 8026e4c:	b913      	cbnz	r3, 8026e54 <_fflush_r+0x10>
 8026e4e:	2500      	movs	r5, #0
 8026e50:	4628      	mov	r0, r5
 8026e52:	bd38      	pop	{r3, r4, r5, pc}
 8026e54:	b118      	cbz	r0, 8026e5e <_fflush_r+0x1a>
 8026e56:	6983      	ldr	r3, [r0, #24]
 8026e58:	b90b      	cbnz	r3, 8026e5e <_fflush_r+0x1a>
 8026e5a:	f000 f887 	bl	8026f6c <__sinit>
 8026e5e:	4b14      	ldr	r3, [pc, #80]	; (8026eb0 <_fflush_r+0x6c>)
 8026e60:	429c      	cmp	r4, r3
 8026e62:	d11b      	bne.n	8026e9c <_fflush_r+0x58>
 8026e64:	686c      	ldr	r4, [r5, #4]
 8026e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e6a:	2b00      	cmp	r3, #0
 8026e6c:	d0ef      	beq.n	8026e4e <_fflush_r+0xa>
 8026e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026e70:	07d0      	lsls	r0, r2, #31
 8026e72:	d404      	bmi.n	8026e7e <_fflush_r+0x3a>
 8026e74:	0599      	lsls	r1, r3, #22
 8026e76:	d402      	bmi.n	8026e7e <_fflush_r+0x3a>
 8026e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026e7a:	f000 f915 	bl	80270a8 <__retarget_lock_acquire_recursive>
 8026e7e:	4628      	mov	r0, r5
 8026e80:	4621      	mov	r1, r4
 8026e82:	f7ff ff5b 	bl	8026d3c <__sflush_r>
 8026e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026e88:	4605      	mov	r5, r0
 8026e8a:	07da      	lsls	r2, r3, #31
 8026e8c:	d4e0      	bmi.n	8026e50 <_fflush_r+0xc>
 8026e8e:	89a3      	ldrh	r3, [r4, #12]
 8026e90:	059b      	lsls	r3, r3, #22
 8026e92:	d4dd      	bmi.n	8026e50 <_fflush_r+0xc>
 8026e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026e96:	f000 f909 	bl	80270ac <__retarget_lock_release_recursive>
 8026e9a:	e7d9      	b.n	8026e50 <_fflush_r+0xc>
 8026e9c:	4b05      	ldr	r3, [pc, #20]	; (8026eb4 <_fflush_r+0x70>)
 8026e9e:	429c      	cmp	r4, r3
 8026ea0:	d101      	bne.n	8026ea6 <_fflush_r+0x62>
 8026ea2:	68ac      	ldr	r4, [r5, #8]
 8026ea4:	e7df      	b.n	8026e66 <_fflush_r+0x22>
 8026ea6:	4b04      	ldr	r3, [pc, #16]	; (8026eb8 <_fflush_r+0x74>)
 8026ea8:	429c      	cmp	r4, r3
 8026eaa:	bf08      	it	eq
 8026eac:	68ec      	ldreq	r4, [r5, #12]
 8026eae:	e7da      	b.n	8026e66 <_fflush_r+0x22>
 8026eb0:	08029824 	.word	0x08029824
 8026eb4:	08029844 	.word	0x08029844
 8026eb8:	08029804 	.word	0x08029804

08026ebc <std>:
 8026ebc:	2300      	movs	r3, #0
 8026ebe:	b510      	push	{r4, lr}
 8026ec0:	4604      	mov	r4, r0
 8026ec2:	6083      	str	r3, [r0, #8]
 8026ec4:	8181      	strh	r1, [r0, #12]
 8026ec6:	4619      	mov	r1, r3
 8026ec8:	6643      	str	r3, [r0, #100]	; 0x64
 8026eca:	81c2      	strh	r2, [r0, #14]
 8026ecc:	2208      	movs	r2, #8
 8026ece:	6183      	str	r3, [r0, #24]
 8026ed0:	e9c0 3300 	strd	r3, r3, [r0]
 8026ed4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026ed8:	305c      	adds	r0, #92	; 0x5c
 8026eda:	f7ff f9df 	bl	802629c <memset>
 8026ede:	4b05      	ldr	r3, [pc, #20]	; (8026ef4 <std+0x38>)
 8026ee0:	6224      	str	r4, [r4, #32]
 8026ee2:	6263      	str	r3, [r4, #36]	; 0x24
 8026ee4:	4b04      	ldr	r3, [pc, #16]	; (8026ef8 <std+0x3c>)
 8026ee6:	62a3      	str	r3, [r4, #40]	; 0x28
 8026ee8:	4b04      	ldr	r3, [pc, #16]	; (8026efc <std+0x40>)
 8026eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026eec:	4b04      	ldr	r3, [pc, #16]	; (8026f00 <std+0x44>)
 8026eee:	6323      	str	r3, [r4, #48]	; 0x30
 8026ef0:	bd10      	pop	{r4, pc}
 8026ef2:	bf00      	nop
 8026ef4:	080271ad 	.word	0x080271ad
 8026ef8:	080271cf 	.word	0x080271cf
 8026efc:	08027207 	.word	0x08027207
 8026f00:	0802722b 	.word	0x0802722b

08026f04 <_cleanup_r>:
 8026f04:	4901      	ldr	r1, [pc, #4]	; (8026f0c <_cleanup_r+0x8>)
 8026f06:	f000 b8af 	b.w	8027068 <_fwalk_reent>
 8026f0a:	bf00      	nop
 8026f0c:	08026e45 	.word	0x08026e45

08026f10 <__sfmoreglue>:
 8026f10:	b570      	push	{r4, r5, r6, lr}
 8026f12:	2268      	movs	r2, #104	; 0x68
 8026f14:	1e4d      	subs	r5, r1, #1
 8026f16:	460e      	mov	r6, r1
 8026f18:	4355      	muls	r5, r2
 8026f1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026f1e:	f7ff fa31 	bl	8026384 <_malloc_r>
 8026f22:	4604      	mov	r4, r0
 8026f24:	b140      	cbz	r0, 8026f38 <__sfmoreglue+0x28>
 8026f26:	2100      	movs	r1, #0
 8026f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8026f30:	300c      	adds	r0, #12
 8026f32:	60a0      	str	r0, [r4, #8]
 8026f34:	f7ff f9b2 	bl	802629c <memset>
 8026f38:	4620      	mov	r0, r4
 8026f3a:	bd70      	pop	{r4, r5, r6, pc}

08026f3c <__sfp_lock_acquire>:
 8026f3c:	4801      	ldr	r0, [pc, #4]	; (8026f44 <__sfp_lock_acquire+0x8>)
 8026f3e:	f000 b8b3 	b.w	80270a8 <__retarget_lock_acquire_recursive>
 8026f42:	bf00      	nop
 8026f44:	2004f902 	.word	0x2004f902

08026f48 <__sfp_lock_release>:
 8026f48:	4801      	ldr	r0, [pc, #4]	; (8026f50 <__sfp_lock_release+0x8>)
 8026f4a:	f000 b8af 	b.w	80270ac <__retarget_lock_release_recursive>
 8026f4e:	bf00      	nop
 8026f50:	2004f902 	.word	0x2004f902

08026f54 <__sinit_lock_acquire>:
 8026f54:	4801      	ldr	r0, [pc, #4]	; (8026f5c <__sinit_lock_acquire+0x8>)
 8026f56:	f000 b8a7 	b.w	80270a8 <__retarget_lock_acquire_recursive>
 8026f5a:	bf00      	nop
 8026f5c:	2004f903 	.word	0x2004f903

08026f60 <__sinit_lock_release>:
 8026f60:	4801      	ldr	r0, [pc, #4]	; (8026f68 <__sinit_lock_release+0x8>)
 8026f62:	f000 b8a3 	b.w	80270ac <__retarget_lock_release_recursive>
 8026f66:	bf00      	nop
 8026f68:	2004f903 	.word	0x2004f903

08026f6c <__sinit>:
 8026f6c:	b510      	push	{r4, lr}
 8026f6e:	4604      	mov	r4, r0
 8026f70:	f7ff fff0 	bl	8026f54 <__sinit_lock_acquire>
 8026f74:	69a3      	ldr	r3, [r4, #24]
 8026f76:	b11b      	cbz	r3, 8026f80 <__sinit+0x14>
 8026f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026f7c:	f7ff bff0 	b.w	8026f60 <__sinit_lock_release>
 8026f80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026f84:	6523      	str	r3, [r4, #80]	; 0x50
 8026f86:	4620      	mov	r0, r4
 8026f88:	4b12      	ldr	r3, [pc, #72]	; (8026fd4 <__sinit+0x68>)
 8026f8a:	4a13      	ldr	r2, [pc, #76]	; (8026fd8 <__sinit+0x6c>)
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	62a2      	str	r2, [r4, #40]	; 0x28
 8026f90:	42a3      	cmp	r3, r4
 8026f92:	bf04      	itt	eq
 8026f94:	2301      	moveq	r3, #1
 8026f96:	61a3      	streq	r3, [r4, #24]
 8026f98:	f000 f820 	bl	8026fdc <__sfp>
 8026f9c:	6060      	str	r0, [r4, #4]
 8026f9e:	4620      	mov	r0, r4
 8026fa0:	f000 f81c 	bl	8026fdc <__sfp>
 8026fa4:	60a0      	str	r0, [r4, #8]
 8026fa6:	4620      	mov	r0, r4
 8026fa8:	f000 f818 	bl	8026fdc <__sfp>
 8026fac:	2200      	movs	r2, #0
 8026fae:	2104      	movs	r1, #4
 8026fb0:	60e0      	str	r0, [r4, #12]
 8026fb2:	6860      	ldr	r0, [r4, #4]
 8026fb4:	f7ff ff82 	bl	8026ebc <std>
 8026fb8:	2201      	movs	r2, #1
 8026fba:	2109      	movs	r1, #9
 8026fbc:	68a0      	ldr	r0, [r4, #8]
 8026fbe:	f7ff ff7d 	bl	8026ebc <std>
 8026fc2:	2202      	movs	r2, #2
 8026fc4:	2112      	movs	r1, #18
 8026fc6:	68e0      	ldr	r0, [r4, #12]
 8026fc8:	f7ff ff78 	bl	8026ebc <std>
 8026fcc:	2301      	movs	r3, #1
 8026fce:	61a3      	str	r3, [r4, #24]
 8026fd0:	e7d2      	b.n	8026f78 <__sinit+0xc>
 8026fd2:	bf00      	nop
 8026fd4:	080297c8 	.word	0x080297c8
 8026fd8:	08026f05 	.word	0x08026f05

08026fdc <__sfp>:
 8026fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026fde:	4607      	mov	r7, r0
 8026fe0:	f7ff ffac 	bl	8026f3c <__sfp_lock_acquire>
 8026fe4:	4b1e      	ldr	r3, [pc, #120]	; (8027060 <__sfp+0x84>)
 8026fe6:	681e      	ldr	r6, [r3, #0]
 8026fe8:	69b3      	ldr	r3, [r6, #24]
 8026fea:	b913      	cbnz	r3, 8026ff2 <__sfp+0x16>
 8026fec:	4630      	mov	r0, r6
 8026fee:	f7ff ffbd 	bl	8026f6c <__sinit>
 8026ff2:	3648      	adds	r6, #72	; 0x48
 8026ff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026ff8:	3b01      	subs	r3, #1
 8026ffa:	d503      	bpl.n	8027004 <__sfp+0x28>
 8026ffc:	6833      	ldr	r3, [r6, #0]
 8026ffe:	b30b      	cbz	r3, 8027044 <__sfp+0x68>
 8027000:	6836      	ldr	r6, [r6, #0]
 8027002:	e7f7      	b.n	8026ff4 <__sfp+0x18>
 8027004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027008:	b9d5      	cbnz	r5, 8027040 <__sfp+0x64>
 802700a:	4b16      	ldr	r3, [pc, #88]	; (8027064 <__sfp+0x88>)
 802700c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027010:	6665      	str	r5, [r4, #100]	; 0x64
 8027012:	60e3      	str	r3, [r4, #12]
 8027014:	f000 f847 	bl	80270a6 <__retarget_lock_init_recursive>
 8027018:	f7ff ff96 	bl	8026f48 <__sfp_lock_release>
 802701c:	2208      	movs	r2, #8
 802701e:	4629      	mov	r1, r5
 8027020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027024:	6025      	str	r5, [r4, #0]
 8027026:	61a5      	str	r5, [r4, #24]
 8027028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802702c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027030:	f7ff f934 	bl	802629c <memset>
 8027034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802703c:	4620      	mov	r0, r4
 802703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027040:	3468      	adds	r4, #104	; 0x68
 8027042:	e7d9      	b.n	8026ff8 <__sfp+0x1c>
 8027044:	2104      	movs	r1, #4
 8027046:	4638      	mov	r0, r7
 8027048:	f7ff ff62 	bl	8026f10 <__sfmoreglue>
 802704c:	4604      	mov	r4, r0
 802704e:	6030      	str	r0, [r6, #0]
 8027050:	2800      	cmp	r0, #0
 8027052:	d1d5      	bne.n	8027000 <__sfp+0x24>
 8027054:	f7ff ff78 	bl	8026f48 <__sfp_lock_release>
 8027058:	230c      	movs	r3, #12
 802705a:	603b      	str	r3, [r7, #0]
 802705c:	e7ee      	b.n	802703c <__sfp+0x60>
 802705e:	bf00      	nop
 8027060:	080297c8 	.word	0x080297c8
 8027064:	ffff0001 	.word	0xffff0001

08027068 <_fwalk_reent>:
 8027068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802706c:	4606      	mov	r6, r0
 802706e:	4688      	mov	r8, r1
 8027070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027074:	2700      	movs	r7, #0
 8027076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802707a:	f1b9 0901 	subs.w	r9, r9, #1
 802707e:	d505      	bpl.n	802708c <_fwalk_reent+0x24>
 8027080:	6824      	ldr	r4, [r4, #0]
 8027082:	2c00      	cmp	r4, #0
 8027084:	d1f7      	bne.n	8027076 <_fwalk_reent+0xe>
 8027086:	4638      	mov	r0, r7
 8027088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802708c:	89ab      	ldrh	r3, [r5, #12]
 802708e:	2b01      	cmp	r3, #1
 8027090:	d907      	bls.n	80270a2 <_fwalk_reent+0x3a>
 8027092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027096:	3301      	adds	r3, #1
 8027098:	d003      	beq.n	80270a2 <_fwalk_reent+0x3a>
 802709a:	4629      	mov	r1, r5
 802709c:	4630      	mov	r0, r6
 802709e:	47c0      	blx	r8
 80270a0:	4307      	orrs	r7, r0
 80270a2:	3568      	adds	r5, #104	; 0x68
 80270a4:	e7e9      	b.n	802707a <_fwalk_reent+0x12>

080270a6 <__retarget_lock_init_recursive>:
 80270a6:	4770      	bx	lr

080270a8 <__retarget_lock_acquire_recursive>:
 80270a8:	4770      	bx	lr

080270aa <__retarget_lock_release>:
 80270aa:	4770      	bx	lr

080270ac <__retarget_lock_release_recursive>:
 80270ac:	4770      	bx	lr

080270ae <__swhatbuf_r>:
 80270ae:	b570      	push	{r4, r5, r6, lr}
 80270b0:	460e      	mov	r6, r1
 80270b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80270b6:	b096      	sub	sp, #88	; 0x58
 80270b8:	4614      	mov	r4, r2
 80270ba:	2900      	cmp	r1, #0
 80270bc:	461d      	mov	r5, r3
 80270be:	da08      	bge.n	80270d2 <__swhatbuf_r+0x24>
 80270c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80270c4:	2200      	movs	r2, #0
 80270c6:	602a      	str	r2, [r5, #0]
 80270c8:	061a      	lsls	r2, r3, #24
 80270ca:	d410      	bmi.n	80270ee <__swhatbuf_r+0x40>
 80270cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80270d0:	e00e      	b.n	80270f0 <__swhatbuf_r+0x42>
 80270d2:	466a      	mov	r2, sp
 80270d4:	f000 f8d0 	bl	8027278 <_fstat_r>
 80270d8:	2800      	cmp	r0, #0
 80270da:	dbf1      	blt.n	80270c0 <__swhatbuf_r+0x12>
 80270dc:	9a01      	ldr	r2, [sp, #4]
 80270de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80270e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80270e6:	425a      	negs	r2, r3
 80270e8:	415a      	adcs	r2, r3
 80270ea:	602a      	str	r2, [r5, #0]
 80270ec:	e7ee      	b.n	80270cc <__swhatbuf_r+0x1e>
 80270ee:	2340      	movs	r3, #64	; 0x40
 80270f0:	2000      	movs	r0, #0
 80270f2:	6023      	str	r3, [r4, #0]
 80270f4:	b016      	add	sp, #88	; 0x58
 80270f6:	bd70      	pop	{r4, r5, r6, pc}

080270f8 <__smakebuf_r>:
 80270f8:	898b      	ldrh	r3, [r1, #12]
 80270fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80270fc:	079d      	lsls	r5, r3, #30
 80270fe:	4606      	mov	r6, r0
 8027100:	460c      	mov	r4, r1
 8027102:	d507      	bpl.n	8027114 <__smakebuf_r+0x1c>
 8027104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027108:	6023      	str	r3, [r4, #0]
 802710a:	6123      	str	r3, [r4, #16]
 802710c:	2301      	movs	r3, #1
 802710e:	6163      	str	r3, [r4, #20]
 8027110:	b002      	add	sp, #8
 8027112:	bd70      	pop	{r4, r5, r6, pc}
 8027114:	ab01      	add	r3, sp, #4
 8027116:	466a      	mov	r2, sp
 8027118:	f7ff ffc9 	bl	80270ae <__swhatbuf_r>
 802711c:	9900      	ldr	r1, [sp, #0]
 802711e:	4605      	mov	r5, r0
 8027120:	4630      	mov	r0, r6
 8027122:	f7ff f92f 	bl	8026384 <_malloc_r>
 8027126:	b948      	cbnz	r0, 802713c <__smakebuf_r+0x44>
 8027128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802712c:	059a      	lsls	r2, r3, #22
 802712e:	d4ef      	bmi.n	8027110 <__smakebuf_r+0x18>
 8027130:	f023 0303 	bic.w	r3, r3, #3
 8027134:	f043 0302 	orr.w	r3, r3, #2
 8027138:	81a3      	strh	r3, [r4, #12]
 802713a:	e7e3      	b.n	8027104 <__smakebuf_r+0xc>
 802713c:	4b0d      	ldr	r3, [pc, #52]	; (8027174 <__smakebuf_r+0x7c>)
 802713e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027140:	89a3      	ldrh	r3, [r4, #12]
 8027142:	6020      	str	r0, [r4, #0]
 8027144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027148:	6120      	str	r0, [r4, #16]
 802714a:	81a3      	strh	r3, [r4, #12]
 802714c:	9b00      	ldr	r3, [sp, #0]
 802714e:	6163      	str	r3, [r4, #20]
 8027150:	9b01      	ldr	r3, [sp, #4]
 8027152:	b15b      	cbz	r3, 802716c <__smakebuf_r+0x74>
 8027154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027158:	4630      	mov	r0, r6
 802715a:	f000 f89f 	bl	802729c <_isatty_r>
 802715e:	b128      	cbz	r0, 802716c <__smakebuf_r+0x74>
 8027160:	89a3      	ldrh	r3, [r4, #12]
 8027162:	f023 0303 	bic.w	r3, r3, #3
 8027166:	f043 0301 	orr.w	r3, r3, #1
 802716a:	81a3      	strh	r3, [r4, #12]
 802716c:	89a0      	ldrh	r0, [r4, #12]
 802716e:	4305      	orrs	r5, r0
 8027170:	81a5      	strh	r5, [r4, #12]
 8027172:	e7cd      	b.n	8027110 <__smakebuf_r+0x18>
 8027174:	08026f05 	.word	0x08026f05

08027178 <memchr>:
 8027178:	b2c9      	uxtb	r1, r1
 802717a:	4402      	add	r2, r0
 802717c:	b510      	push	{r4, lr}
 802717e:	4290      	cmp	r0, r2
 8027180:	4603      	mov	r3, r0
 8027182:	d101      	bne.n	8027188 <memchr+0x10>
 8027184:	2300      	movs	r3, #0
 8027186:	e003      	b.n	8027190 <memchr+0x18>
 8027188:	781c      	ldrb	r4, [r3, #0]
 802718a:	3001      	adds	r0, #1
 802718c:	428c      	cmp	r4, r1
 802718e:	d1f6      	bne.n	802717e <memchr+0x6>
 8027190:	4618      	mov	r0, r3
 8027192:	bd10      	pop	{r4, pc}

08027194 <__malloc_lock>:
 8027194:	4801      	ldr	r0, [pc, #4]	; (802719c <__malloc_lock+0x8>)
 8027196:	f7ff bf87 	b.w	80270a8 <__retarget_lock_acquire_recursive>
 802719a:	bf00      	nop
 802719c:	2004f901 	.word	0x2004f901

080271a0 <__malloc_unlock>:
 80271a0:	4801      	ldr	r0, [pc, #4]	; (80271a8 <__malloc_unlock+0x8>)
 80271a2:	f7ff bf83 	b.w	80270ac <__retarget_lock_release_recursive>
 80271a6:	bf00      	nop
 80271a8:	2004f901 	.word	0x2004f901

080271ac <__sread>:
 80271ac:	b510      	push	{r4, lr}
 80271ae:	460c      	mov	r4, r1
 80271b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80271b4:	f000 f894 	bl	80272e0 <_read_r>
 80271b8:	2800      	cmp	r0, #0
 80271ba:	bfab      	itete	ge
 80271bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80271be:	89a3      	ldrhlt	r3, [r4, #12]
 80271c0:	181b      	addge	r3, r3, r0
 80271c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80271c6:	bfac      	ite	ge
 80271c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80271ca:	81a3      	strhlt	r3, [r4, #12]
 80271cc:	bd10      	pop	{r4, pc}

080271ce <__swrite>:
 80271ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271d2:	461f      	mov	r7, r3
 80271d4:	898b      	ldrh	r3, [r1, #12]
 80271d6:	4605      	mov	r5, r0
 80271d8:	460c      	mov	r4, r1
 80271da:	05db      	lsls	r3, r3, #23
 80271dc:	4616      	mov	r6, r2
 80271de:	d505      	bpl.n	80271ec <__swrite+0x1e>
 80271e0:	2302      	movs	r3, #2
 80271e2:	2200      	movs	r2, #0
 80271e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80271e8:	f000 f868 	bl	80272bc <_lseek_r>
 80271ec:	89a3      	ldrh	r3, [r4, #12]
 80271ee:	4632      	mov	r2, r6
 80271f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80271f4:	4628      	mov	r0, r5
 80271f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80271fa:	81a3      	strh	r3, [r4, #12]
 80271fc:	463b      	mov	r3, r7
 80271fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027202:	f000 b817 	b.w	8027234 <_write_r>

08027206 <__sseek>:
 8027206:	b510      	push	{r4, lr}
 8027208:	460c      	mov	r4, r1
 802720a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802720e:	f000 f855 	bl	80272bc <_lseek_r>
 8027212:	1c43      	adds	r3, r0, #1
 8027214:	89a3      	ldrh	r3, [r4, #12]
 8027216:	bf15      	itete	ne
 8027218:	6560      	strne	r0, [r4, #84]	; 0x54
 802721a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802721e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027222:	81a3      	strheq	r3, [r4, #12]
 8027224:	bf18      	it	ne
 8027226:	81a3      	strhne	r3, [r4, #12]
 8027228:	bd10      	pop	{r4, pc}

0802722a <__sclose>:
 802722a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802722e:	f000 b813 	b.w	8027258 <_close_r>
	...

08027234 <_write_r>:
 8027234:	b538      	push	{r3, r4, r5, lr}
 8027236:	4604      	mov	r4, r0
 8027238:	4d06      	ldr	r5, [pc, #24]	; (8027254 <_write_r+0x20>)
 802723a:	4608      	mov	r0, r1
 802723c:	4611      	mov	r1, r2
 802723e:	2200      	movs	r2, #0
 8027240:	602a      	str	r2, [r5, #0]
 8027242:	461a      	mov	r2, r3
 8027244:	f7da fec5 	bl	8001fd2 <_write>
 8027248:	1c43      	adds	r3, r0, #1
 802724a:	d102      	bne.n	8027252 <_write_r+0x1e>
 802724c:	682b      	ldr	r3, [r5, #0]
 802724e:	b103      	cbz	r3, 8027252 <_write_r+0x1e>
 8027250:	6023      	str	r3, [r4, #0]
 8027252:	bd38      	pop	{r3, r4, r5, pc}
 8027254:	2004f904 	.word	0x2004f904

08027258 <_close_r>:
 8027258:	b538      	push	{r3, r4, r5, lr}
 802725a:	2300      	movs	r3, #0
 802725c:	4d05      	ldr	r5, [pc, #20]	; (8027274 <_close_r+0x1c>)
 802725e:	4604      	mov	r4, r0
 8027260:	4608      	mov	r0, r1
 8027262:	602b      	str	r3, [r5, #0]
 8027264:	f7da fed1 	bl	800200a <_close>
 8027268:	1c43      	adds	r3, r0, #1
 802726a:	d102      	bne.n	8027272 <_close_r+0x1a>
 802726c:	682b      	ldr	r3, [r5, #0]
 802726e:	b103      	cbz	r3, 8027272 <_close_r+0x1a>
 8027270:	6023      	str	r3, [r4, #0]
 8027272:	bd38      	pop	{r3, r4, r5, pc}
 8027274:	2004f904 	.word	0x2004f904

08027278 <_fstat_r>:
 8027278:	b538      	push	{r3, r4, r5, lr}
 802727a:	2300      	movs	r3, #0
 802727c:	4d06      	ldr	r5, [pc, #24]	; (8027298 <_fstat_r+0x20>)
 802727e:	4604      	mov	r4, r0
 8027280:	4608      	mov	r0, r1
 8027282:	4611      	mov	r1, r2
 8027284:	602b      	str	r3, [r5, #0]
 8027286:	f7da fecc 	bl	8002022 <_fstat>
 802728a:	1c43      	adds	r3, r0, #1
 802728c:	d102      	bne.n	8027294 <_fstat_r+0x1c>
 802728e:	682b      	ldr	r3, [r5, #0]
 8027290:	b103      	cbz	r3, 8027294 <_fstat_r+0x1c>
 8027292:	6023      	str	r3, [r4, #0]
 8027294:	bd38      	pop	{r3, r4, r5, pc}
 8027296:	bf00      	nop
 8027298:	2004f904 	.word	0x2004f904

0802729c <_isatty_r>:
 802729c:	b538      	push	{r3, r4, r5, lr}
 802729e:	2300      	movs	r3, #0
 80272a0:	4d05      	ldr	r5, [pc, #20]	; (80272b8 <_isatty_r+0x1c>)
 80272a2:	4604      	mov	r4, r0
 80272a4:	4608      	mov	r0, r1
 80272a6:	602b      	str	r3, [r5, #0]
 80272a8:	f7da fecb 	bl	8002042 <_isatty>
 80272ac:	1c43      	adds	r3, r0, #1
 80272ae:	d102      	bne.n	80272b6 <_isatty_r+0x1a>
 80272b0:	682b      	ldr	r3, [r5, #0]
 80272b2:	b103      	cbz	r3, 80272b6 <_isatty_r+0x1a>
 80272b4:	6023      	str	r3, [r4, #0]
 80272b6:	bd38      	pop	{r3, r4, r5, pc}
 80272b8:	2004f904 	.word	0x2004f904

080272bc <_lseek_r>:
 80272bc:	b538      	push	{r3, r4, r5, lr}
 80272be:	4604      	mov	r4, r0
 80272c0:	4d06      	ldr	r5, [pc, #24]	; (80272dc <_lseek_r+0x20>)
 80272c2:	4608      	mov	r0, r1
 80272c4:	4611      	mov	r1, r2
 80272c6:	2200      	movs	r2, #0
 80272c8:	602a      	str	r2, [r5, #0]
 80272ca:	461a      	mov	r2, r3
 80272cc:	f7da fec4 	bl	8002058 <_lseek>
 80272d0:	1c43      	adds	r3, r0, #1
 80272d2:	d102      	bne.n	80272da <_lseek_r+0x1e>
 80272d4:	682b      	ldr	r3, [r5, #0]
 80272d6:	b103      	cbz	r3, 80272da <_lseek_r+0x1e>
 80272d8:	6023      	str	r3, [r4, #0]
 80272da:	bd38      	pop	{r3, r4, r5, pc}
 80272dc:	2004f904 	.word	0x2004f904

080272e0 <_read_r>:
 80272e0:	b538      	push	{r3, r4, r5, lr}
 80272e2:	4604      	mov	r4, r0
 80272e4:	4d06      	ldr	r5, [pc, #24]	; (8027300 <_read_r+0x20>)
 80272e6:	4608      	mov	r0, r1
 80272e8:	4611      	mov	r1, r2
 80272ea:	2200      	movs	r2, #0
 80272ec:	602a      	str	r2, [r5, #0]
 80272ee:	461a      	mov	r2, r3
 80272f0:	f7da fe52 	bl	8001f98 <_read>
 80272f4:	1c43      	adds	r3, r0, #1
 80272f6:	d102      	bne.n	80272fe <_read_r+0x1e>
 80272f8:	682b      	ldr	r3, [r5, #0]
 80272fa:	b103      	cbz	r3, 80272fe <_read_r+0x1e>
 80272fc:	6023      	str	r3, [r4, #0]
 80272fe:	bd38      	pop	{r3, r4, r5, pc}
 8027300:	2004f904 	.word	0x2004f904

08027304 <_init>:
 8027304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027306:	bf00      	nop
 8027308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802730a:	bc08      	pop	{r3}
 802730c:	469e      	mov	lr, r3
 802730e:	4770      	bx	lr

08027310 <_fini>:
 8027310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027312:	bf00      	nop
 8027314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027316:	bc08      	pop	{r3}
 8027318:	469e      	mov	lr, r3
 802731a:	4770      	bx	lr
