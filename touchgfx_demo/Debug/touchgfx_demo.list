
touchgfx_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027774  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  080279a8  080279a8  000379a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08029ef0  08029ef0  00039ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802a098  0802a098  0003a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00025800  0802a0b0  0802a0b0  0003a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0804f8b0  0804f8b0  0005f8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0804f8c0  0804f8c0  0005f8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0804f8c8  0804f8c8  0005f8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0804f8dc  0804f8dc  0005f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00025900  20000000  0804f8e4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_Framebuffer 00025800  20025900  080751e4  00085900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000048a0  2004b100  0809a9e4  000ab100  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2004f9a0  0809a9e4  000af9a0  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  000ab100  2**0
                  CONTENTS, READONLY
 15 .debug_info   000bcbb6  00000000  00000000  000ab136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015387  00000000  00000000  00167cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f90  00000000  00000000  0017d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003888  00000000  00000000  00181008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00049e61  00000000  00000000  00184890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00053b04  00000000  00000000  001ce6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001977ec  00000000  00000000  002221f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  003b99e1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010a68  00000000  00000000  003b9ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2004b100 	.word	0x2004b100
 8000250:	00000000 	.word	0x00000000
 8000254:	08027990 	.word	0x08027990

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	2004b104 	.word	0x2004b104
 8000270:	08027990 	.word	0x08027990

08000274 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000274:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000276:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027a:	4917      	ldr	r1, [pc, #92]	; (80002d8 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800027c:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000282:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000284:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 8000288:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800028c:	4912      	ldr	r1, [pc, #72]	; (80002d8 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 800028e:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000290:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000298:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029a:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800029e:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a4:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002a8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ac:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b2:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002b6:	4770      	bx	lr

080002b8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002b8:	f7ff bffe 	b.w	80002b8 <__tx_BadHandler>

080002bc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002bc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c2:	4770      	bx	lr

080002c4 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002c6:	f000 f897 	bl	80003f8 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_NMIHandler>

080002d4 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002d8:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002dc:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e0:	2004cdd8 	.word	0x2004cdd8
    LDR     r1, =SYSTICK_CYCLES
 80002e4:	001869ff 	.word	0x001869ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	40ff0000 	.word	0x40ff0000

080002ec <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002ec:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f0:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f2:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f4:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002f8:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002fc:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000300:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000302:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030a:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 800030e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000312:	f3bf 8f6f 	isb	sy

08000316 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000316:	e7fe      	b.n	8000316 <__tx_wait_here>

08000318 <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000318:	4824      	ldr	r0, [pc, #144]	; (80003ac <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800031c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000320:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000322:	b191      	cbz	r1, 800034a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000324:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000326:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800032e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000332:	d101      	bne.n	8000338 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000334:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000338 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000338:	4c1e      	ldr	r4, [pc, #120]	; (80003b4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800033e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000342:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000344:	b10d      	cbz	r5, 800034a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000346:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000348:	6023      	str	r3, [r4, #0]

0800034a <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800034a:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800034c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800034e:	b1d1      	cbz	r1, 8000386 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000350:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000352:	b662      	cpsie	i

08000354 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000354:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000356:	4c17      	ldr	r4, [pc, #92]	; (80003b4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000358:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800035e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000360:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000366:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036a:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800036e:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000372:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000376:	d101      	bne.n	800037c <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000378:	ecbc 8a10 	vldmia	ip!, {s16-s31}

0800037c <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 800037c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000380:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000384:	4770      	bx	lr

08000386 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000386:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000388:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038a:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 800038c:	b909      	cbnz	r1, 8000392 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800038e:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000390:	e7f9      	b.n	8000386 <__tx_ts_wait>

08000392 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000392:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000396:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039a:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 800039e:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80003a0:	e7d8      	b.n	8000354 <__tx_ts_restore>
 80003a2:	bf00      	nop

080003a4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a4:	4770      	bx	lr
 80003a6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003a8:	2004ce74 	.word	0x2004ce74
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ac:	2004cddc 	.word	0x2004cddc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b0:	2004cde0 	.word	0x2004cde0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b4:	2004d3e0 	.word	0x2004d3e0

080003b8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003b8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ba:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003be:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c2:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003c6:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003c8:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003cc:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ce:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d0:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d2:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d4:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003d6:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003d8:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003da:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003dc:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003de:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003ec:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f2:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f4:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003f6:	4770      	bx	lr

080003f8 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003f8:	4922      	ldr	r1, [pc, #136]	; (8000484 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fa:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003fc:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000400:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000404:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000406:	b13a      	cbz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000408:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800040c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800040e:	b91a      	cbnz	r2, 8000418 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000412:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000416:	6018      	str	r0, [r3, #0]

08000418 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800041c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800041e:	b122      	cbz	r2, 800042a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000422:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000426:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000428:	e008      	b.n	800043c <__tx_timer_done>

0800042a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000430:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000432:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000434:	d101      	bne.n	800043a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000438:	6818      	ldr	r0, [r3, #0]

0800043a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043a:	6008      	str	r0, [r1, #0]

0800043c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800043e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000440:	b912      	cbnz	r2, 8000448 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000442:	4914      	ldr	r1, [pc, #80]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000444:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000446:	b1c8      	cbz	r0, 800047c <__tx_timer_nothing_expired>

08000448 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000448:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044a:	4912      	ldr	r1, [pc, #72]	; (8000494 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800044c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800044e:	b108      	cbz	r0, 8000454 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000450:	f00c fc36 	bl	800ccc0 <_tx_timer_expiration_process>

08000454 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000458:	b172      	cbz	r2, 8000478 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045a:	f00c fb13 	bl	800ca84 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800045e:	4810      	ldr	r0, [pc, #64]	; (80004a0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000460:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000462:	b949      	cbnz	r1, 8000478 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000464:	480f      	ldr	r0, [pc, #60]	; (80004a4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000466:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046a:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800046c:	480f      	ldr	r0, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000472:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000474:	d000      	beq.n	8000478 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000476:	6002      	str	r2, [r0, #0]

08000478 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800047c <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800047c:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000480:	4770      	bx	lr
 8000482:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000484:	2004ce80 	.word	0x2004ce80
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000488:	2004d3e0 	.word	0x2004d3e0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800048c:	2004ce84 	.word	0x2004ce84
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	2004cf10 	.word	0x2004cf10
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000494:	2004cf14 	.word	0x2004cf14
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000498:	2004cf0c 	.word	0x2004cf0c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049c:	2004cf08 	.word	0x2004cf08
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a0:	2004ce74 	.word	0x2004ce74
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	2004cddc 	.word	0x2004cddc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	2004cde0 	.word	0x2004cde0
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <__aeabi_uldivmod>:
 80004b0:	b953      	cbnz	r3, 80004c8 <__aeabi_uldivmod+0x18>
 80004b2:	b94a      	cbnz	r2, 80004c8 <__aeabi_uldivmod+0x18>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	bf08      	it	eq
 80004b8:	2800      	cmpeq	r0, #0
 80004ba:	bf1c      	itt	ne
 80004bc:	f04f 31ff 	movne.w	r1, #4294967295
 80004c0:	f04f 30ff 	movne.w	r0, #4294967295
 80004c4:	f000 b982 	b.w	80007cc <__aeabi_idiv0>
 80004c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004dc:	b004      	add	sp, #16
 80004de:	4770      	bx	lr

080004e0 <__udivmoddi4>:
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80004e6:	4604      	mov	r4, r0
 80004e8:	460f      	mov	r7, r1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d148      	bne.n	8000580 <__udivmoddi4+0xa0>
 80004ee:	428a      	cmp	r2, r1
 80004f0:	4694      	mov	ip, r2
 80004f2:	d961      	bls.n	80005b8 <__udivmoddi4+0xd8>
 80004f4:	fab2 f382 	clz	r3, r2
 80004f8:	b143      	cbz	r3, 800050c <__udivmoddi4+0x2c>
 80004fa:	f1c3 0120 	rsb	r1, r3, #32
 80004fe:	409f      	lsls	r7, r3
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	409c      	lsls	r4, r3
 8000506:	fa20 f101 	lsr.w	r1, r0, r1
 800050a:	430f      	orrs	r7, r1
 800050c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	fbb7 f6f1 	udiv	r6, r7, r1
 800051a:	fb01 7716 	mls	r7, r1, r6, r7
 800051e:	fb06 f00e 	mul.w	r0, r6, lr
 8000522:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000526:	4290      	cmp	r0, r2
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x5c>
 800052a:	eb1c 0202 	adds.w	r2, ip, r2
 800052e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x5a>
 8000534:	4290      	cmp	r0, r2
 8000536:	f200 8137 	bhi.w	80007a8 <__udivmoddi4+0x2c8>
 800053a:	463e      	mov	r6, r7
 800053c:	1a12      	subs	r2, r2, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb2 f0f1 	udiv	r0, r2, r1
 8000544:	fb01 2210 	mls	r2, r1, r0, r2
 8000548:	fb00 fe0e 	mul.w	lr, r0, lr
 800054c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x86>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 32ff 	add.w	r2, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x84>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 811c 	bhi.w	800079c <__udivmoddi4+0x2bc>
 8000564:	4610      	mov	r0, r2
 8000566:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056a:	eba4 040e 	sub.w	r4, r4, lr
 800056e:	2600      	movs	r6, #0
 8000570:	b11d      	cbz	r5, 800057a <__udivmoddi4+0x9a>
 8000572:	40dc      	lsrs	r4, r3
 8000574:	2300      	movs	r3, #0
 8000576:	e9c5 4300 	strd	r4, r3, [r5]
 800057a:	4631      	mov	r1, r6
 800057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	428b      	cmp	r3, r1
 8000582:	d909      	bls.n	8000598 <__udivmoddi4+0xb8>
 8000584:	2d00      	cmp	r5, #0
 8000586:	f000 80fd 	beq.w	8000784 <__udivmoddi4+0x2a4>
 800058a:	2600      	movs	r6, #0
 800058c:	e9c5 0100 	strd	r0, r1, [r5]
 8000590:	4630      	mov	r0, r6
 8000592:	4631      	mov	r1, r6
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000598:	fab3 f683 	clz	r6, r3
 800059c:	2e00      	cmp	r6, #0
 800059e:	d14b      	bne.n	8000638 <__udivmoddi4+0x158>
 80005a0:	428b      	cmp	r3, r1
 80005a2:	f0c0 80f2 	bcc.w	800078a <__udivmoddi4+0x2aa>
 80005a6:	4282      	cmp	r2, r0
 80005a8:	f240 80ef 	bls.w	800078a <__udivmoddi4+0x2aa>
 80005ac:	4630      	mov	r0, r6
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d0e3      	beq.n	800057a <__udivmoddi4+0x9a>
 80005b2:	e9c5 4700 	strd	r4, r7, [r5]
 80005b6:	e7e0      	b.n	800057a <__udivmoddi4+0x9a>
 80005b8:	b902      	cbnz	r2, 80005bc <__udivmoddi4+0xdc>
 80005ba:	deff      	udf	#255	; 0xff
 80005bc:	fab2 f382 	clz	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f040 809d 	bne.w	8000700 <__udivmoddi4+0x220>
 80005c6:	1a89      	subs	r1, r1, r2
 80005c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005cc:	b297      	uxth	r7, r2
 80005ce:	2601      	movs	r6, #1
 80005d0:	0c20      	lsrs	r0, r4, #16
 80005d2:	fbb1 f2fe 	udiv	r2, r1, lr
 80005d6:	fb0e 1112 	mls	r1, lr, r2, r1
 80005da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005de:	fb07 f002 	mul.w	r0, r7, r2
 80005e2:	4288      	cmp	r0, r1
 80005e4:	d90f      	bls.n	8000606 <__udivmoddi4+0x126>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f102 38ff 	add.w	r8, r2, #4294967295
 80005ee:	bf2c      	ite	cs
 80005f0:	f04f 0901 	movcs.w	r9, #1
 80005f4:	f04f 0900 	movcc.w	r9, #0
 80005f8:	4288      	cmp	r0, r1
 80005fa:	d903      	bls.n	8000604 <__udivmoddi4+0x124>
 80005fc:	f1b9 0f00 	cmp.w	r9, #0
 8000600:	f000 80cf 	beq.w	80007a2 <__udivmoddi4+0x2c2>
 8000604:	4642      	mov	r2, r8
 8000606:	1a09      	subs	r1, r1, r0
 8000608:	b2a4      	uxth	r4, r4
 800060a:	fbb1 f0fe 	udiv	r0, r1, lr
 800060e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000612:	fb00 f707 	mul.w	r7, r0, r7
 8000616:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800061a:	42a7      	cmp	r7, r4
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x150>
 800061e:	eb1c 0404 	adds.w	r4, ip, r4
 8000622:	f100 31ff 	add.w	r1, r0, #4294967295
 8000626:	d202      	bcs.n	800062e <__udivmoddi4+0x14e>
 8000628:	42a7      	cmp	r7, r4
 800062a:	f200 80b4 	bhi.w	8000796 <__udivmoddi4+0x2b6>
 800062e:	4608      	mov	r0, r1
 8000630:	1be4      	subs	r4, r4, r7
 8000632:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000636:	e79b      	b.n	8000570 <__udivmoddi4+0x90>
 8000638:	f1c6 0720 	rsb	r7, r6, #32
 800063c:	40b3      	lsls	r3, r6
 800063e:	fa01 f406 	lsl.w	r4, r1, r6
 8000642:	fa22 fc07 	lsr.w	ip, r2, r7
 8000646:	40f9      	lsrs	r1, r7
 8000648:	40b2      	lsls	r2, r6
 800064a:	ea4c 0c03 	orr.w	ip, ip, r3
 800064e:	fa20 f307 	lsr.w	r3, r0, r7
 8000652:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000656:	431c      	orrs	r4, r3
 8000658:	fa1f fe8c 	uxth.w	lr, ip
 800065c:	fa00 f306 	lsl.w	r3, r0, r6
 8000660:	0c20      	lsrs	r0, r4, #16
 8000662:	fbb1 f8f9 	udiv	r8, r1, r9
 8000666:	fb09 1118 	mls	r1, r9, r8, r1
 800066a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800066e:	fb08 f00e 	mul.w	r0, r8, lr
 8000672:	4288      	cmp	r0, r1
 8000674:	d90f      	bls.n	8000696 <__udivmoddi4+0x1b6>
 8000676:	eb1c 0101 	adds.w	r1, ip, r1
 800067a:	f108 3aff 	add.w	sl, r8, #4294967295
 800067e:	bf2c      	ite	cs
 8000680:	f04f 0b01 	movcs.w	fp, #1
 8000684:	f04f 0b00 	movcc.w	fp, #0
 8000688:	4288      	cmp	r0, r1
 800068a:	d903      	bls.n	8000694 <__udivmoddi4+0x1b4>
 800068c:	f1bb 0f00 	cmp.w	fp, #0
 8000690:	f000 808d 	beq.w	80007ae <__udivmoddi4+0x2ce>
 8000694:	46d0      	mov	r8, sl
 8000696:	1a09      	subs	r1, r1, r0
 8000698:	b2a4      	uxth	r4, r4
 800069a:	fbb1 f0f9 	udiv	r0, r1, r9
 800069e:	fb09 1110 	mls	r1, r9, r0, r1
 80006a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80006a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006aa:	458e      	cmp	lr, r1
 80006ac:	d907      	bls.n	80006be <__udivmoddi4+0x1de>
 80006ae:	eb1c 0101 	adds.w	r1, ip, r1
 80006b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80006b6:	d201      	bcs.n	80006bc <__udivmoddi4+0x1dc>
 80006b8:	458e      	cmp	lr, r1
 80006ba:	d87f      	bhi.n	80007bc <__udivmoddi4+0x2dc>
 80006bc:	4620      	mov	r0, r4
 80006be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006c2:	eba1 010e 	sub.w	r1, r1, lr
 80006c6:	fba0 9802 	umull	r9, r8, r0, r2
 80006ca:	4541      	cmp	r1, r8
 80006cc:	464c      	mov	r4, r9
 80006ce:	46c6      	mov	lr, r8
 80006d0:	d302      	bcc.n	80006d8 <__udivmoddi4+0x1f8>
 80006d2:	d106      	bne.n	80006e2 <__udivmoddi4+0x202>
 80006d4:	454b      	cmp	r3, r9
 80006d6:	d204      	bcs.n	80006e2 <__udivmoddi4+0x202>
 80006d8:	3801      	subs	r0, #1
 80006da:	ebb9 0402 	subs.w	r4, r9, r2
 80006de:	eb68 0e0c 	sbc.w	lr, r8, ip
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d070      	beq.n	80007c8 <__udivmoddi4+0x2e8>
 80006e6:	1b1a      	subs	r2, r3, r4
 80006e8:	eb61 010e 	sbc.w	r1, r1, lr
 80006ec:	fa22 f306 	lsr.w	r3, r2, r6
 80006f0:	fa01 f707 	lsl.w	r7, r1, r7
 80006f4:	40f1      	lsrs	r1, r6
 80006f6:	2600      	movs	r6, #0
 80006f8:	431f      	orrs	r7, r3
 80006fa:	e9c5 7100 	strd	r7, r1, [r5]
 80006fe:	e73c      	b.n	800057a <__udivmoddi4+0x9a>
 8000700:	fa02 fc03 	lsl.w	ip, r2, r3
 8000704:	f1c3 0020 	rsb	r0, r3, #32
 8000708:	fa01 f203 	lsl.w	r2, r1, r3
 800070c:	fa21 f600 	lsr.w	r6, r1, r0
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fa24 f100 	lsr.w	r1, r4, r0
 8000718:	fa1f f78c 	uxth.w	r7, ip
 800071c:	409c      	lsls	r4, r3
 800071e:	4311      	orrs	r1, r2
 8000720:	fbb6 f0fe 	udiv	r0, r6, lr
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	fb0e 6610 	mls	r6, lr, r0, r6
 800072a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800072e:	fb00 f607 	mul.w	r6, r0, r7
 8000732:	4296      	cmp	r6, r2
 8000734:	d90e      	bls.n	8000754 <__udivmoddi4+0x274>
 8000736:	eb1c 0202 	adds.w	r2, ip, r2
 800073a:	f100 38ff 	add.w	r8, r0, #4294967295
 800073e:	bf2c      	ite	cs
 8000740:	f04f 0901 	movcs.w	r9, #1
 8000744:	f04f 0900 	movcc.w	r9, #0
 8000748:	4296      	cmp	r6, r2
 800074a:	d902      	bls.n	8000752 <__udivmoddi4+0x272>
 800074c:	f1b9 0f00 	cmp.w	r9, #0
 8000750:	d031      	beq.n	80007b6 <__udivmoddi4+0x2d6>
 8000752:	4640      	mov	r0, r8
 8000754:	1b92      	subs	r2, r2, r6
 8000756:	b289      	uxth	r1, r1
 8000758:	fbb2 f6fe 	udiv	r6, r2, lr
 800075c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000760:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000764:	fb06 f207 	mul.w	r2, r6, r7
 8000768:	428a      	cmp	r2, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x29c>
 800076c:	eb1c 0101 	adds.w	r1, ip, r1
 8000770:	f106 38ff 	add.w	r8, r6, #4294967295
 8000774:	d201      	bcs.n	800077a <__udivmoddi4+0x29a>
 8000776:	428a      	cmp	r2, r1
 8000778:	d823      	bhi.n	80007c2 <__udivmoddi4+0x2e2>
 800077a:	4646      	mov	r6, r8
 800077c:	1a89      	subs	r1, r1, r2
 800077e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000782:	e725      	b.n	80005d0 <__udivmoddi4+0xf0>
 8000784:	462e      	mov	r6, r5
 8000786:	4628      	mov	r0, r5
 8000788:	e6f7      	b.n	800057a <__udivmoddi4+0x9a>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb61 0303 	sbc.w	r3, r1, r3
 8000790:	2001      	movs	r0, #1
 8000792:	461f      	mov	r7, r3
 8000794:	e70b      	b.n	80005ae <__udivmoddi4+0xce>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	e749      	b.n	8000630 <__udivmoddi4+0x150>
 800079c:	4464      	add	r4, ip
 800079e:	3802      	subs	r0, #2
 80007a0:	e6e1      	b.n	8000566 <__udivmoddi4+0x86>
 80007a2:	3a02      	subs	r2, #2
 80007a4:	4461      	add	r1, ip
 80007a6:	e72e      	b.n	8000606 <__udivmoddi4+0x126>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	4462      	add	r2, ip
 80007ac:	e6c6      	b.n	800053c <__udivmoddi4+0x5c>
 80007ae:	f1a8 0802 	sub.w	r8, r8, #2
 80007b2:	4461      	add	r1, ip
 80007b4:	e76f      	b.n	8000696 <__udivmoddi4+0x1b6>
 80007b6:	3802      	subs	r0, #2
 80007b8:	4462      	add	r2, ip
 80007ba:	e7cb      	b.n	8000754 <__udivmoddi4+0x274>
 80007bc:	3802      	subs	r0, #2
 80007be:	4461      	add	r1, ip
 80007c0:	e77d      	b.n	80006be <__udivmoddi4+0x1de>
 80007c2:	3e02      	subs	r6, #2
 80007c4:	4461      	add	r1, ip
 80007c6:	e7d9      	b.n	800077c <__udivmoddi4+0x29c>
 80007c8:	462e      	mov	r6, r5
 80007ca:	e6d6      	b.n	800057a <__udivmoddi4+0x9a>

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007dc:	2334      	movs	r3, #52	; 0x34
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <tx_application_define+0x8c>)
 80007e6:	491e      	ldr	r1, [pc, #120]	; (8000860 <tx_application_define+0x90>)
 80007e8:	481e      	ldr	r0, [pc, #120]	; (8000864 <tx_application_define+0x94>)
 80007ea:	f00c fd13 	bl	800d214 <_txe_byte_pool_create>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <tx_application_define+0x94>)
 80007f6:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f000 fbb8 	bl	8000f6e <App_ThreadX_Init>
 80007fe:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000806:	e7fe      	b.n	8000806 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <tx_application_define+0x98>)
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <tx_application_define+0x9c>)
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <tx_application_define+0xa0>)
 8000816:	f00c fcfd 	bl	800d214 <_txe_byte_pool_create>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d119      	bne.n	8000854 <tx_application_define+0x84>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <tx_application_define+0xa0>)
 8000822:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f00d f993 	bl	800db50 <MX_TouchGFX_Init>
      /* USER CODE BEGIN  MX_X-CUBE-TOUCHGFX_Init_Error */

      /* USER CODE END  MX_X-CUBE-TOUCHGFX_Init_Error */
    }
    /* USER CODE BEGIN  MX_X-CUBE-TOUCHGFX_Init_Success */
    if(!tx_timer_create(&lcd_timer, "my_lcd_timer", signalVSync_caller, 0x1234, 2, 2, TX_AUTO_ACTIVATE))
 800082a:	232c      	movs	r3, #44	; 0x2c
 800082c:	9303      	str	r3, [sp, #12]
 800082e:	2301      	movs	r3, #1
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2302      	movs	r3, #2
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	f241 2334 	movw	r3, #4660	; 0x1234
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <tx_application_define+0xa4>)
 8000840:	490d      	ldr	r1, [pc, #52]	; (8000878 <tx_application_define+0xa8>)
 8000842:	480e      	ldr	r0, [pc, #56]	; (800087c <tx_application_define+0xac>)
 8000844:	f00d f8d0 	bl	800d9e8 <_txe_timer_create>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <tx_application_define+0x84>
    {
    	tx_timer_activate(&lcd_timer);
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <tx_application_define+0xac>)
 8000850:	f00d f8ac 	bl	800d9ac <_txe_timer_activate>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2004b148 	.word	0x2004b148
 8000860:	080279a8 	.word	0x080279a8
 8000864:	2004b548 	.word	0x2004b548
 8000868:	2004b57c 	.word	0x2004b57c
 800086c:	080279bc 	.word	0x080279bc
 8000870:	2004c57c 	.word	0x2004c57c
 8000874:	08001a99 	.word	0x08001a99
 8000878:	080279d8 	.word	0x080279d8
 800087c:	2004b11c 	.word	0x2004b11c

08000880 <ST7789V_SEND_COMMAND>:

static uint8_t rotationNum=1;
static bool _cp437    = false;

void ST7789V_SEND_COMMAND(uint16_t cmd)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
    ST7789_REG = cmd;
 800088a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	8013      	strh	r3, [r2, #0]

}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ST7789V_SEND_DATA>:
void ST7789V_SEND_DATA(uint16_t data)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
    ST7789_RAM = data;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <ST7789V_SEND_DATA+0x1c>)
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	8013      	strh	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	60080000 	.word	0x60080000

080008c0 <ST7789V_writeRegister32>:
	ST7789V_SEND_COMMAND(r);
	ST7789V_SEND_DATA((d >> 8));
	ST7789V_SEND_DATA(d);
}

void ST7789V_writeRegister32(uint8_t r, uint32_t d) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
	ST7789V_SEND_COMMAND(r);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffd5 	bl	8000880 <ST7789V_SEND_COMMAND>
	ST7789V_SEND_DATA((d >> 24));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffdf 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 16));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffd9 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA((d >> 8));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffd3 	bl	80008a0 <ST7789V_SEND_DATA>
	ST7789V_SEND_DATA(d);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffce 	bl	80008a0 <ST7789V_SEND_DATA>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ST7789V_setCursorPosition>:

void ST7789V_setCursorPosition(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4604      	mov	r4, r0
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4623      	mov	r3, r4
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	4603      	mov	r3, r0
 8000920:	80bb      	strh	r3, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	807b      	strh	r3, [r7, #2]
 8000926:	4613      	mov	r3, r2
 8000928:	803b      	strh	r3, [r7, #0]
  uint32_t t;
  t = (x0 << 16) | x1;
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	041a      	lsls	r2, r3, #16
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8000934:	202c      	movs	r0, #44	; 0x2c
 8000936:	f7ff ffa3 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_CASET, t);
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	202a      	movs	r0, #42	; 0x2a
 800093e:	f7ff ffbf 	bl	80008c0 <ST7789V_writeRegister32>
  t = (y0 << 16) | y1;
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	041a      	lsls	r2, r3, #16
 8000946:	883b      	ldrh	r3, [r7, #0]
 8000948:	4313      	orrs	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 800094c:	202c      	movs	r0, #44	; 0x2c
 800094e:	f7ff ff97 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_writeRegister32(ST7789V_RASET, t);
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	202b      	movs	r0, #43	; 0x2b
 8000956:	f7ff ffb3 	bl	80008c0 <ST7789V_writeRegister32>
  ST7789V_SEND_COMMAND (ST7789V_RAMWR);
 800095a:	202c      	movs	r0, #44	; 0x2c
 800095c:	f7ff ff90 	bl	8000880 <ST7789V_SEND_COMMAND>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <ST7789V_init>:
	/* invert area */
	ST7789V_SEND_COMMAND(ST7789V_INVON);
}

void ST7789V_init(void)
 {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
   ExternalSRAMSpecStruct ST7789VSpec = {
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	f8c3 2003 	str.w	r2, [r3, #3]
 8000978:	2310      	movs	r3, #16
 800097a:	703b      	strb	r3, [r7, #0]
 800097c:	2332      	movs	r3, #50	; 0x32
 800097e:	713b      	strb	r3, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	71bb      	strb	r3, [r7, #6]
		   //.tCycWrite = 66,
		   .writeOnly = 1

   };

   FMCSRAMInit(&ST7789VSpec, ST7789V_SRAM_BANK);
 8000984:	463b      	mov	r3, r7
 8000986:	2101      	movs	r1, #1
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fb05 	bl	8000f98 <FMCSRAMInit>

   HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2104      	movs	r1, #4
 8000992:	4877      	ldr	r0, [pc, #476]	; (8000b70 <ST7789V_init+0x208>)
 8000994:	f002 fde0 	bl	8003558 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fd41 	bl	8002420 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2104      	movs	r1, #4
 80009a2:	4873      	ldr	r0, [pc, #460]	; (8000b70 <ST7789V_init+0x208>)
 80009a4:	f002 fdd8 	bl	8003558 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 fd39 	bl	8002420 <HAL_Delay>
      HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2104      	movs	r1, #4
 80009b2:	486f      	ldr	r0, [pc, #444]	; (8000b70 <ST7789V_init+0x208>)
 80009b4:	f002 fdd0 	bl	8003558 <HAL_GPIO_WritePin>
      HAL_Delay(120);
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f001 fd31 	bl	8002420 <HAL_Delay>


      ST7789V_SEND_COMMAND(ST7789V_SLPOUT);
 80009be:	2011      	movs	r0, #17
 80009c0:	f7ff ff5e 	bl	8000880 <ST7789V_SEND_COMMAND>
      HAL_Delay(120);
 80009c4:	2078      	movs	r0, #120	; 0x78
 80009c6:	f001 fd2b 	bl	8002420 <HAL_Delay>

      ST7789V_SEND_COMMAND(ST7789V_MADCTL); //Memory data acccess control
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f7ff ff58 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff65 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PORCTRL); //Porch Setting
 80009d6:	20b2      	movs	r0, #178	; 0xb2
 80009d8:	f7ff ff52 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0C);
 80009dc:	200c      	movs	r0, #12
 80009de:	f7ff ff5f 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0C);
 80009e2:	200c      	movs	r0, #12
 80009e4:	f7ff ff5c 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff ff59 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009ee:	2033      	movs	r0, #51	; 0x33
 80009f0:	f7ff ff56 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x33);
 80009f4:	2033      	movs	r0, #51	; 0x33
 80009f6:	f7ff ff53 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_GCTRL); //Gate Control
 80009fa:	20b7      	movs	r0, #183	; 0xb7
 80009fc:	f7ff ff40 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x70); //VGH, VGL
 8000a00:	2070      	movs	r0, #112	; 0x70
 8000a02:	f7ff ff4d 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VCOMS);
 8000a06:	20bb      	movs	r0, #187	; 0xbb
 8000a08:	f7ff ff3a 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x3A);
 8000a0c:	203a      	movs	r0, #58	; 0x3a
 8000a0e:	f7ff ff47 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_LCMCTRL);
 8000a12:	20c0      	movs	r0, #192	; 0xc0
 8000a14:	f7ff ff34 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x2C);
 8000a18:	202c      	movs	r0, #44	; 0x2c
 8000a1a:	f7ff ff41 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVVRHEN);
 8000a1e:	20c2      	movs	r0, #194	; 0xc2
 8000a20:	f7ff ff2e 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x01);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff ff3b 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VRHS);
 8000a2a:	20c3      	movs	r0, #195	; 0xc3
 8000a2c:	f7ff ff28 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x14);
 8000a30:	2014      	movs	r0, #20
 8000a32:	f7ff ff35 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_VDVS);
 8000a36:	20c4      	movs	r0, #196	; 0xc4
 8000a38:	f7ff ff22 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x20);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ff2f 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_FRCTRL2);
 8000a42:	20c6      	movs	r0, #198	; 0xc6
 8000a44:	f7ff ff1c 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x0F); //60Hz 0A
 8000a48:	200f      	movs	r0, #15
 8000a4a:	f7ff ff29 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PWCTRL1);
 8000a4e:	20d0      	movs	r0, #208	; 0xd0
 8000a50:	f7ff ff16 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xA4);
 8000a54:	20a4      	movs	r0, #164	; 0xa4
 8000a56:	f7ff ff23 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xA1); //AVDD VCL
 8000a5a:	20a1      	movs	r0, #161	; 0xa1
 8000a5c:	f7ff ff20 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_PVGAMCTRL);
 8000a60:	20e0      	movs	r0, #224	; 0xe0
 8000a62:	f7ff ff0d 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000a66:	20d0      	movs	r0, #208	; 0xd0
 8000a68:	f7ff ff1a 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	f7ff ff17 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000a72:	200d      	movs	r0, #13
 8000a74:	f7ff ff14 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000a78:	2009      	movs	r0, #9
 8000a7a:	f7ff ff11 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x08);
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f7ff ff0e 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000a84:	2025      	movs	r0, #37	; 0x25
 8000a86:	f7ff ff0b 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x28);
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f7ff ff08 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x53);
 8000a90:	2053      	movs	r0, #83	; 0x53
 8000a92:	f7ff ff05 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000a96:	2039      	movs	r0, #57	; 0x39
 8000a98:	f7ff ff02 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x12);
 8000a9c:	2012      	movs	r0, #18
 8000a9e:	f7ff feff 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0B);
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f7ff fefc 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000aa8:	200a      	movs	r0, #10
 8000aaa:	f7ff fef9 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x17);
 8000aae:	2017      	movs	r0, #23
 8000ab0:	f7ff fef6 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000ab4:	2034      	movs	r0, #52	; 0x34
 8000ab6:	f7ff fef3 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_NVGAMCTRL);
 8000aba:	20e1      	movs	r0, #225	; 0xe1
 8000abc:	f7ff fee0 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0xD0);
 8000ac0:	20d0      	movs	r0, #208	; 0xd0
 8000ac2:	f7ff feed 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x07);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f7ff feea 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0D);
 8000acc:	200d      	movs	r0, #13
 8000ace:	f7ff fee7 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000ad2:	2009      	movs	r0, #9
 8000ad4:	f7ff fee4 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x09);
 8000ad8:	2009      	movs	r0, #9
 8000ada:	f7ff fee1 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x25);
 8000ade:	2025      	movs	r0, #37	; 0x25
 8000ae0:	f7ff fede 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x29);
 8000ae4:	2029      	movs	r0, #41	; 0x29
 8000ae6:	f7ff fedb 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x35);
 8000aea:	2035      	movs	r0, #53	; 0x35
 8000aec:	f7ff fed8 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x39);
 8000af0:	2039      	movs	r0, #57	; 0x39
 8000af2:	f7ff fed5 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x13);
 8000af6:	2013      	movs	r0, #19
 8000af8:	f7ff fed2 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000afc:	200a      	movs	r0, #10
 8000afe:	f7ff fecf 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x0A);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f7ff fecc 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x16);
 8000b08:	2016      	movs	r0, #22
 8000b0a:	f7ff fec9 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x34);
 8000b0e:	2034      	movs	r0, #52	; 0x34
 8000b10:	f7ff fec6 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_INVON);
 8000b14:	2021      	movs	r0, #33	; 0x21
 8000b16:	f7ff feb3 	bl	8000880 <ST7789V_SEND_COMMAND>

      ST7789V_SEND_COMMAND(ST7789V_COLMOD);
 8000b1a:	203a      	movs	r0, #58	; 0x3a
 8000b1c:	f7ff feb0 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x55); //65K colors, 16 bit/px
 8000b20:	2055      	movs	r0, #85	; 0x55
 8000b22:	f7ff febd 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_CASET);
 8000b26:	202a      	movs	r0, #42	; 0x2a
 8000b28:	f7ff feaa 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff feb7 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff feb4 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff feb1 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0xEF);
 8000b3e:	20ef      	movs	r0, #239	; 0xef
 8000b40:	f7ff feae 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_RASET);
 8000b44:	202b      	movs	r0, #43	; 0x2b
 8000b46:	f7ff fe9b 	bl	8000880 <ST7789V_SEND_COMMAND>
      ST7789V_SEND_DATA(0x00);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fea8 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fea5 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x01);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fea2 	bl	80008a0 <ST7789V_SEND_DATA>
      ST7789V_SEND_DATA(0x3F);
 8000b5c:	203f      	movs	r0, #63	; 0x3f
 8000b5e:	f7ff fe9f 	bl	80008a0 <ST7789V_SEND_DATA>

      ST7789V_SEND_COMMAND(ST7789V_DISPON);
 8000b62:	2029      	movs	r0, #41	; 0x29
 8000b64:	f7ff fe8c 	bl	8000880 <ST7789V_SEND_COMMAND>
//      ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 }
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	42021000 	.word	0x42021000

08000b74 <ST7789V_drawPixel>:

void ST7789V_drawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	80bb      	strh	r3, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	807b      	strh	r3, [r7, #2]
	ST7789V_setCursorPosition(x, y, x, y);
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	88b9      	ldrh	r1, [r7, #4]
 8000b8c:	88f8      	ldrh	r0, [r7, #6]
 8000b8e:	f7ff febd 	bl	800090c <ST7789V_setCursorPosition>
	ST7789V_SEND_DATA(color);
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe83 	bl	80008a0 <ST7789V_SEND_DATA>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <ST7789V_fill>:

void ST7789V_fill(uint16_t color) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ST7789V_PIXEL_COUNT;
 8000bae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000bb2:	60fb      	str	r3, [r7, #12]
	
	if(rotationNum==1 || rotationNum==3)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d003      	beq.n	8000bc4 <ST7789V_fill+0x20>
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d107      	bne.n	8000bd4 <ST7789V_fill+0x30>
	{
		ST7789V_setCursorPosition(0, 0,   ST7789V_WIDTH -1, ST7789V_HEIGHT -1);
 8000bc4:	f240 133f 	movw	r3, #319	; 0x13f
 8000bc8:	22ef      	movs	r2, #239	; 0xef
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fe9d 	bl	800090c <ST7789V_setCursorPosition>
 8000bd2:	e00e      	b.n	8000bf2 <ST7789V_fill+0x4e>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d003      	beq.n	8000be4 <ST7789V_fill+0x40>
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <ST7789V_fill+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d106      	bne.n	8000bf2 <ST7789V_fill+0x4e>
	{
		ST7789V_setCursorPosition(0, 0, ST7789V_HEIGHT -1, ST7789V_WIDTH -1);
 8000be4:	23ef      	movs	r3, #239	; 0xef
 8000be6:	f240 123f 	movw	r2, #319	; 0x13f
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe8d 	bl	800090c <ST7789V_setCursorPosition>
	}

	while (n) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d007      	beq.n	8000c08 <ST7789V_fill+0x64>
	   n--;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
	   ST7789V_SEND_DATA(color);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe4d 	bl	80008a0 <ST7789V_SEND_DATA>
	while (n) {
 8000c06:	e7f4      	b.n	8000bf2 <ST7789V_fill+0x4e>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000004 	.word	0x20000004

08000c14 <ST7789V_drawCircle>:
			ST7789V_SEND_DATA(color);
	}
}

void ST7789V_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	f1c3 0301 	rsb	r3, r3, #1
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	461a      	mov	r2, r3
 8000c44:	03d2      	lsls	r2, r2, #15
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	81fb      	strh	r3, [r7, #14]

  ST7789V_drawPixel(x0  , y0+r, color);
 8000c56:	88ba      	ldrh	r2, [r7, #4]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b299      	uxth	r1, r3
 8000c5e:	883a      	ldrh	r2, [r7, #0]
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff86 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0  , y0-r, color);
 8000c68:	88ba      	ldrh	r2, [r7, #4]
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	883a      	ldrh	r2, [r7, #0]
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff7d 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0+r, y0  , color);
 8000c7a:	88fa      	ldrh	r2, [r7, #6]
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	883a      	ldrh	r2, [r7, #0]
 8000c84:	88b9      	ldrh	r1, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff74 	bl	8000b74 <ST7789V_drawPixel>
  ST7789V_drawPixel(x0-r, y0  , color);
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	883a      	ldrh	r2, [r7, #0]
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff6b 	bl	8000b74 <ST7789V_drawPixel>

  while (x<y) {
 8000c9e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	f280 8083 	bge.w	8000db2 <ST7789V_drawCircle+0x19e>
    if (f >= 0) {
 8000cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0e      	blt.n	8000cd2 <ST7789V_drawCircle+0xbe>
      y--;
 8000cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000cc0:	8a7b      	ldrh	r3, [r7, #18]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8000cc8:	8afa      	ldrh	r2, [r7, #22]
 8000cca:	8a7b      	ldrh	r3, [r7, #18]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000cd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8000cde:	8abb      	ldrh	r3, [r7, #20]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8000ce6:	8afa      	ldrh	r2, [r7, #22]
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	4413      	add	r3, r2
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	82fb      	strh	r3, [r7, #22]
  
    ST7789V_drawPixel(x0 + x, y0 + y, color);
 8000cf0:	8a3a      	ldrh	r2, [r7, #16]
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b298      	uxth	r0, r3
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	883a      	ldrh	r2, [r7, #0]
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff ff36 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 + y, color);
 8000d08:	8a3b      	ldrh	r3, [r7, #16]
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b298      	uxth	r0, r3
 8000d10:	89fa      	ldrh	r2, [r7, #14]
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	883a      	ldrh	r2, [r7, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff ff2a 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + x, y0 - y, color);
 8000d20:	8a3a      	ldrh	r2, [r7, #16]
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4413      	add	r3, r2
 8000d26:	b298      	uxth	r0, r3
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	88ba      	ldrh	r2, [r7, #4]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	883a      	ldrh	r2, [r7, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff ff1e 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - x, y0 - y, color);
 8000d38:	8a3b      	ldrh	r3, [r7, #16]
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	883a      	ldrh	r2, [r7, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff ff12 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 + x, color);
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4413      	add	r3, r2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	8a3a      	ldrh	r2, [r7, #16]
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	883a      	ldrh	r2, [r7, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff ff06 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 + x, color);
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b298      	uxth	r0, r3
 8000d70:	8a3a      	ldrh	r2, [r7, #16]
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	883a      	ldrh	r2, [r7, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fefa 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 + y, y0 - x, color);
 8000d80:	89fa      	ldrh	r2, [r7, #14]
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	4413      	add	r3, r2
 8000d86:	b298      	uxth	r0, r3
 8000d88:	8a3b      	ldrh	r3, [r7, #16]
 8000d8a:	88ba      	ldrh	r2, [r7, #4]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	883a      	ldrh	r2, [r7, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff feee 	bl	8000b74 <ST7789V_drawPixel>
    ST7789V_drawPixel(x0 - y, y0 - x, color);
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	8a3b      	ldrh	r3, [r7, #16]
 8000da2:	88ba      	ldrh	r2, [r7, #4]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	883a      	ldrh	r2, [r7, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fee2 	bl	8000b74 <ST7789V_drawPixel>
  while (x<y) {
 8000db0:	e775      	b.n	8000c9e <ST7789V_drawCircle+0x8a>
  }
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}

08000dba <ST7789V_drawLine>:
  ST7789V_drawFastVLine(x0, y0-r, 2*r+1, color);
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

void ST7789V_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000dba:	b590      	push	{r4, r7, lr}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4623      	mov	r3, r4
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80bb      	strh	r3, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000de4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4619      	mov	r1, r3
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bfb8      	it	lt
 8000df4:	425b      	neglt	r3, r3
 8000df6:	429a      	cmp	r2, r3
 8000df8:	bfcc      	ite	gt
 8000dfa:	2301      	movgt	r3, #1
 8000dfc:	2300      	movle	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	827b      	strh	r3, [r7, #18]
  if (steep) {
 8000e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <ST7789V_drawLine+0x68>
	std::swap(x0, y0);
 8000e0a:	1d3a      	adds	r2, r7, #4
 8000e0c:	1dbb      	adds	r3, r7, #6
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f88d 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(x1, y1);
 8000e16:	463a      	mov	r2, r7
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f887 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  if (x0 > x1) {
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d90b      	bls.n	8000e42 <ST7789V_drawLine+0x88>
	std::swap(x0, x1);
 8000e2a:	1cba      	adds	r2, r7, #2
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f87d 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	std::swap(y0, y1);
 8000e36:	463a      	mov	r2, r7
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f877 	bl	8000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }

  uint16_t dx, dy;
  dx = x1 - x0;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bfb8      	it	lt
 8000e56:	425b      	neglt	r3, r3
 8000e58:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx>>1;
 8000e5a:	8a3b      	ldrh	r3, [r7, #16]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82fb      	strh	r3, [r7, #22]
  int16_t ystep;

  if (y0 < y1) {
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d202      	bcs.n	8000e70 <ST7789V_drawLine+0xb6>
    ystep = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	82bb      	strh	r3, [r7, #20]
 8000e6e:	e002      	b.n	8000e76 <ST7789V_drawLine+0xbc>
  } else {
    ystep = -1;
 8000e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e74:	82bb      	strh	r3, [r7, #20]
  }

  for (; x0<=x1; x0++) {
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d828      	bhi.n	8000ed0 <ST7789V_drawLine+0x116>
    if (steep) {
 8000e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <ST7789V_drawLine+0xda>
      ST7789V_drawPixel(y0, x0, color);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	88f9      	ldrh	r1, [r7, #6]
 8000e8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe71 	bl	8000b74 <ST7789V_drawPixel>
 8000e92:	e005      	b.n	8000ea0 <ST7789V_drawLine+0xe6>
    } else {
      ST7789V_drawPixel(x0, y0, color);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	88b9      	ldrh	r1, [r7, #4]
 8000e98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe6a 	bl	8000b74 <ST7789V_drawPixel>
    }
    err -= dy;
 8000ea0:	8afa      	ldrh	r2, [r7, #22]
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	82fb      	strh	r3, [r7, #22]
    if (err < 0) {
 8000eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da09      	bge.n	8000ec6 <ST7789V_drawLine+0x10c>
      y0 += ystep;
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	8abb      	ldrh	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000ebc:	8afa      	ldrh	r2, [r7, #22]
 8000ebe:	8a3b      	ldrh	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	82fb      	strh	r3, [r7, #22]
  for (; x0<=x1; x0++) {
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	e7d2      	b.n	8000e76 <ST7789V_drawLine+0xbc>
    }
  }
}	
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <ST7789V_drawFastVLine>:
{
	ST7789V_drawLine(x, y, x+w-1, y, color);
}

void ST7789V_drawFastVLine(uint16_t x, uint16_t y, uint16_t h, uint16_t color)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	ST7789V_drawLine(x, y, x, y+h-1, color);
 8000ef6:	88ba      	ldrh	r2, [r7, #4]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	3b01      	subs	r3, #1
 8000f00:	b29c      	uxth	r4, r3
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	88b9      	ldrh	r1, [r7, #4]
 8000f06:	88f8      	ldrh	r0, [r7, #6]
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	f7ff ff54 	bl	8000dba <ST7789V_drawLine>
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}

08000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_ZSt4swapItENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffed 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f40:	4603      	mov	r3, r0
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	81fb      	strh	r3, [r7, #14]
      __a = _GLIBCXX_MOVE(__b);
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f7ff ffe7 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	881a      	ldrh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	801a      	strh	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000f54:	f107 030e 	add.w	r3, r7, #14
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffde 	bl	8000f1a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	801a      	strh	r2, [r3, #0]
    }
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60bb      	str	r3, [r7, #8]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000f90:	f00a fbda 	bl	800b748 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <FMCSRAMInit>:

	// set to the maximum of the two
	timing->AddressSetupTime = (addset1 > addset2) ? addset1 : addset2;
}

void FMCSRAMInit(ExternalSRAMSpecStruct * sramSpec, uint8_t bank) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a0      	sub	sp, #128	; 0x80
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	/* FMC configuration */
	SRAM_HandleTypeDef sram;
	FMC_NORSRAM_TimingTypeDef timing = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f025 fcbb 	bl	8026928 <memset>

	sram.Instance = FMC_NORSRAM_DEVICE;
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <FMCSRAMInit+0xc4>)
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sram.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <FMCSRAMInit+0xc8>)
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (bank==1) {
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <FMCSRAMInit+0x2e>
		sram.Init.NSBank = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc4:	e005      	b.n	8000fd2 <FMCSRAMInit+0x3a>
	} else {
		sram.Init.NSBank = 1 << (bank-1);
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (sramSpec -> dataSize == 8) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d102      	bne.n	8000fe0 <FMCSRAMInit+0x48>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fde:	e008      	b.n	8000ff2 <FMCSRAMInit+0x5a>
	} else if (sramSpec -> dataSize == 16) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b10      	cmp	r3, #16
 8000fe6:	d102      	bne.n	8000fee <FMCSRAMInit+0x56>
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fec:	e001      	b.n	8000ff2 <FMCSRAMInit+0x5a>
	} else {
		sram.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	sram.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
	sram.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
	sram.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
	sram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
	sram.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001002:	2300      	movs	r3, #0
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
	sram.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sram.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
	sram.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
	sram.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	65bb      	str	r3, [r7, #88]	; 0x58
	sram.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	; 0x5c
	sram.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800101c:	2300      	movs	r3, #0
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
	sram.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001024:	667b      	str	r3, [r7, #100]	; 0x64
	sram.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	66bb      	str	r3, [r7, #104]	; 0x68

	/* Timing */
	timing.BusTurnAroundDuration = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
	timing.AccessMode = FMC_ACCESS_MODE_A;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24

	timing.AddressSetupTime = 6; //MAX_ADDSET_TIME;
 8001032:	2306      	movs	r3, #6
 8001034:	60bb      	str	r3, [r7, #8]
	timing.DataSetupTime = 6;//MAX_DATAST_TIME;
 8001036:	2306      	movs	r3, #6
 8001038:	613b      	str	r3, [r7, #16]

	//FMCComputeAddsetDatast(sramSpec, &timing);

	if (HAL_SRAM_Init(&sram, &timing, NULL) != HAL_OK)
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	2200      	movs	r2, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fc19 	bl	800887c <HAL_SRAM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <FMCSRAMInit+0xbc>
	{
		FMC_Error_Handler( );
 8001050:	f000 f808 	bl	8001064 <FMC_Error_Handler>
	}

#if MEM_SWAPPING
	HAL_EnableFMCMemorySwapping();
#endif
}
 8001054:	bf00      	nop
 8001056:	3780      	adds	r7, #128	; 0x80
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	420d0400 	.word	0x420d0400
 8001060:	420d0504 	.word	0x420d0504

08001064 <FMC_Error_Handler>:

void FMC_Error_Handler() {
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800107e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001082:	4909      	ldr	r1, [pc, #36]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800108e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	46020c00 	.word	0x46020c00

080010ac <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80010ba:	4909      	ldr	r1, [pc, #36]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LL_APB1_GRP2_EnableClock+0x34>)
 80010c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	46020c00 	.word	0x46020c00

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ea:	f001 f94b 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ee:	f000 f885 	bl	80011fc <_Z18SystemClock_Configv>

  /* Configure the System Power */
  SystemPower_Config();
 80010f2:	f000 f8f6 	bl	80012e2 <_ZL18SystemPower_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 fbb5 	bl	8001864 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80010fa:	f000 f905 	bl	8001308 <_ZL12MX_ADC1_Initv>
  MX_UCPD1_Init();
 80010fe:	f000 fa7b 	bl	80015f8 <_ZL13MX_UCPD1_Initv>
  MX_USART1_UART_Init();
 8001102:	f000 faaf 	bl	8001664 <_ZL19MX_USART1_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8001106:	f000 fb0d 	bl	8001724 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_FMC_Init();
 800110a:	f000 fb3b 	bl	8001784 <_ZL11MX_FMC_Initv>
  MX_CRC_Init();
 800110e:	f000 f945 	bl	800139c <_ZL11MX_CRC_Initv>
  MX_ICACHE_Init();
 8001112:	f000 f9b3 	bl	800147c <_ZL14MX_ICACHE_Initv>
  MX_DMA2D_Init();
 8001116:	f000 f969 	bl	80013ec <_ZL13MX_DMA2D_Initv>
  MX_TIM16_Init();
 800111a:	f000 fa41 	bl	80015a0 <_ZL13MX_TIM16_Initv>
  MX_TIM3_Init();
 800111e:	f000 f9e1 	bl	80014e4 <_ZL12MX_TIM3_Initv>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001122:	f00c fd0d 	bl	800db40 <MX_TouchGFX_PreOSInit>
  	      {
  	      	Error_Handler();
  	      }
*/

  ST7789V_init();
 8001126:	f7ff fc1f 	bl	8000968 <ST7789V_init>
  ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 800112a:	202c      	movs	r0, #44	; 0x2c
 800112c:	f7ff fba8 	bl	8000880 <ST7789V_SEND_COMMAND>
  ST7789V_fill(COLOR_BLUE);
 8001130:	201f      	movs	r0, #31
 8001132:	f7ff fd37 	bl	8000ba4 <ST7789V_fill>
  HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f001 f972 	bl	8002420 <HAL_Delay>



  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800113c:	f7ff ff26 	bl	8000f8c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int round_num = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <main+0x10c>)
 8001148:	f002 fa1e 	bl	8003588 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001150:	f001 f966 	bl	8002420 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <main+0x10c>)
 8001158:	f002 fa16 	bl	8003588 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 800115c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001160:	f001 f95e 	bl	8002420 <HAL_Delay>


	  if(round_num == 0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <main+0x9e>

		  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
		  {
			  ST7789V_SEND_DATA(COLOR_RED);
		  }*/
		  ST7789V_fill(COLOR_RED);
 800116a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800116e:	f7ff fd19 	bl	8000ba4 <ST7789V_fill>
		  round_num++;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3301      	adds	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
		  HAL_Delay(500);
 8001178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800117c:	f001 f950 	bl	8002420 <HAL_Delay>
 8001180:	e013      	b.n	80011aa <main+0xc6>
	  }
	  else
	  {
		  //ST7789V_fillCircle(100, 100, 50, COLOR_BLACK);
		  ST7789V_drawCircle(100, 100, 50, COLOR_WHITE);
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001186:	2232      	movs	r2, #50	; 0x32
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f7ff fd42 	bl	8000c14 <ST7789V_drawCircle>
		  ST7789V_drawFastVLine(150, 80, 100, COLOR_WHITE);
 8001190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001194:	2264      	movs	r2, #100	; 0x64
 8001196:	2150      	movs	r1, #80	; 0x50
 8001198:	2096      	movs	r0, #150	; 0x96
 800119a:	f7ff fe9d 	bl	8000ed8 <ST7789V_drawFastVLine>
			  for(int j = 0; j<200; j++)
			  {
				  ST7789V_drawPixel(i, j, COLOR_WHITE);
			  }
		  }
*/		  HAL_Delay(500);
 800119e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a2:	f001 f93d 	bl	8002420 <HAL_Delay>
		  round_num = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
	   	  round_num = 0;
	  }
/*
	  else if(round_num == 1)
	  {
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80011b4:	da0a      	bge.n	80011cc <main+0xe8>
	   	  {
	   		  ST7789V_SEND_DATA(kuhmuh[i]);
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <main+0x110>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fb6e 	bl	80008a0 <ST7789V_SEND_DATA>
*/	  	  for(int i = 0; i<ST7789V_PIXEL_COUNT; i++)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	e7f0      	b.n	80011ae <main+0xca>
	   	  }
	  	  HAL_Delay(500);
 80011cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d0:	f001 f926 	bl	8002420 <HAL_Delay>
	  	  	  {
	  	  		 ST7789V_SEND_DATA(COLOR_BLUE);
	  	  	  }
	  	  	  */

	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011d4:	2104      	movs	r1, #4
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <main+0x114>)
 80011d8:	f002 f9d6 	bl	8003588 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80011dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e0:	f001 f91e 	bl	8002420 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80011e4:	2104      	movs	r1, #4
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <main+0x114>)
 80011e8:	f002 f9ce 	bl	8003588 <HAL_GPIO_TogglePin>

  }
 80011ec:	e7aa      	b.n	8001144 <main+0x60>
 80011ee:	bf00      	nop
 80011f0:	42020400 	.word	0x42020400
 80011f4:	20000008 	.word	0x20000008
 80011f8:	42021800 	.word	0x42021800

080011fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09e      	sub	sp, #120	; 0x78
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	2260      	movs	r2, #96	; 0x60
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f025 fb8c 	bl	8026928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001220:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001224:	f003 fb0a 	bl	800483c <HAL_PWREx_ControlVoltageScaling>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_Z18SystemClock_Configv+0x40>
  {
    Error_Handler();
 8001238:	f000 fc4c 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800123c:	2332      	movs	r3, #50	; 0x32
 800123e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124c:	2310      	movs	r3, #16
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001254:	2310      	movs	r3, #16
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001262:	2301      	movs	r3, #1
 8001264:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800126e:	2350      	movs	r3, #80	; 0x50
 8001270:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800127e:	2300      	movs	r3, #0
 8001280:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fbc8 	bl	8004a20 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf14      	ite	ne
 8001296:	2301      	movne	r3, #1
 8001298:	2300      	moveq	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80012a0:	f000 fc18 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	231f      	movs	r3, #31
 80012a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2303      	movs	r3, #3
 80012aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2104      	movs	r1, #4
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fa83 	bl	80057cc <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80012d6:	f000 fbfd 	bl	8001ad4 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3778      	adds	r7, #120	; 0x78
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZL18SystemPower_Configv>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012e6:	f003 fb8b 	bl	8004a00 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012ea:	2002      	movs	r0, #2
 80012ec:	f003 fb28 	bl	8004940 <HAL_PWREx_ConfigSupply>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf14      	ite	ne
 80012f6:	2301      	movne	r3, #1
 80012f8:	2300      	moveq	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <_ZL18SystemPower_Configv+0x22>
  {
    Error_Handler();
 8001300:	f000 fbe8 	bl	8001ad4 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <_ZL12MX_ADC1_Initv+0x90>)
 8001310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800132c:	2204      	movs	r2, #4
 800132e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001332:	2200      	movs	r2, #0
 8001334:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001340:	2201      	movs	r2, #1
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001356:	2200      	movs	r2, #0
 8001358:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800135c:	2200      	movs	r2, #0
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001362:	2200      	movs	r2, #0
 8001364:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <_ZL12MX_ADC1_Initv+0x8c>)
 8001376:	f001 f953 	bl	8002620 <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <_ZL12MX_ADC1_Initv+0x86>
  {
    Error_Handler();
 800138a:	f000 fba3 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2004c5b0 	.word	0x2004c5b0
 8001398:	42028000 	.word	0x42028000

0800139c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <_ZL11MX_CRC_Initv+0x4c>)
 80013a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <_ZL11MX_CRC_Initv+0x48>)
 80013c6:	f001 fd05 	bl	8002dd4 <HAL_CRC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80013da:	f000 fb7b 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2004c63c 	.word	0x2004c63c
 80013e8:	40023000 	.word	0x40023000

080013ec <_ZL13MX_DMA2D_Initv>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <_ZL13MX_DMA2D_Initv+0x8c>)
 80013f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 80013fe:	2202      	movs	r2, #2
 8001400:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 800141c:	2202      	movs	r2, #2
 800141e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001422:	2200      	movs	r2, #0
 8001424:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001428:	2200      	movs	r2, #0
 800142a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 800142e:	2200      	movs	r2, #0
 8001430:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001434:	2200      	movs	r2, #0
 8001436:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001438:	480e      	ldr	r0, [pc, #56]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 800143a:	f001 fdb5 	bl	8002fa8 <HAL_DMA2D_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <_ZL13MX_DMA2D_Initv+0x66>
  {
    Error_Handler();
 800144e:	f000 fb41 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001452:	2101      	movs	r1, #1
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <_ZL13MX_DMA2D_Initv+0x88>)
 8001456:	f001 fe09 	bl	800306c <HAL_DMA2D_ConfigLayer>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf14      	ite	ne
 8001460:	2301      	movne	r3, #1
 8001462:	2300      	moveq	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <_ZL13MX_DMA2D_Initv+0x82>
  {
    Error_Handler();
 800146a:	f000 fb33 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2004c660 	.word	0x2004c660
 8001478:	4002b000 	.word	0x4002b000

0800147c <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001490:	f002 f8d0 	bl	8003634 <HAL_ICACHE_Disable>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_ZL14MX_ICACHE_Initv+0x2c>
  {
    Error_Handler();
 80014a4:	f000 fb16 	bl	8001ad4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f002 f8e7 	bl	8003694 <HAL_ICACHE_EnableRemapRegion>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2301      	movne	r3, #1
 80014ce:	2300      	moveq	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <_ZL14MX_ICACHE_Initv+0x5e>
  {
    Error_Handler();
 80014d6:	f000 fafd 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <_ZL12MX_TIM3_Initv+0xb8>)
 8001506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 800150a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800150e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 160;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001518:	22a0      	movs	r2, #160	; 0xa0
 800151a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001528:	481b      	ldr	r0, [pc, #108]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 800152a:	f007 f9f7 	bl	800891c <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800153e:	f000 fac9 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001550:	f007 fc5c 	bl	8008e0c <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8001564:	f000 fab6 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <_ZL12MX_TIM3_Initv+0xb4>)
 8001576:	f007 ff09 	bl	800938c <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800158a:	f000 faa3 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2004c6c0 	.word	0x2004c6c0
 800159c:	40000400 	.word	0x40000400

080015a0 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <_ZL13MX_TIM16_Initv+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015ac:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80015b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80015be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <_ZL13MX_TIM16_Initv+0x50>)
 80015d4:	f007 f9a2 	bl	800891c <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 80015e8:	f000 fa74 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2004c70c 	.word	0x2004c70c
 80015f4:	40014400 	.word	0x40014400

080015f8 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800160e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001612:	f7ff fd4b 	bl	80010ac <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff fd2c 	bl	8001074 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fd29 	bl	8001074 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001626:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001628:	2303      	movs	r3, #3
 800162a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <_ZL13MX_UCPD1_Initv+0x64>)
 8001636:	f008 ff02 	bl	800a43e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800163a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001640:	2303      	movs	r3, #3
 8001642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <_ZL13MX_UCPD1_Initv+0x68>)
 800164e:	f008 fef6 	bl	800a43e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	42020400 	.word	0x42020400
 8001660:	42020000 	.word	0x42020000

08001664 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016ae:	f007 ff75 	bl	800959c <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80016c2:	f000 fa07 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016ca:	f008 fb47 	bl	8009d5c <HAL_UARTEx_SetTxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80016de:	f000 f9f9 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80016e6:	f008 fb77 	bl	8009dd8 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80016fa:	f000 f9eb 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001700:	f008 faf3 	bl	8009cea <HAL_UARTEx_DisableFifoMode>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001714:	f000 f9de 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2004c758 	.word	0x2004c758
 8001720:	40013800 	.word	0x40013800

08001724 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001730:	2206      	movs	r2, #6
 8001732:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001736:	2202      	movs	r2, #2
 8001738:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x58>)
 8001760:	f001 ffea 	bl	8003738 <HAL_PCD_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x54>
  {
    Error_Handler();
 8001774:	f000 f9ae 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2004c7e8 	.word	0x2004c7e8
 8001780:	42040000 	.word	0x42040000

08001784 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f025 f8c9 	bl	8026928 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <_ZL11MX_FMC_Initv+0xd8>)
 800179a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 800179e:	4a30      	ldr	r2, [pc, #192]	; (8001860 <_ZL11MX_FMC_Initv+0xdc>)
 80017a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017b6:	2210      	movs	r2, #16
 80017b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 7;
 800180e:	2307      	movs	r3, #7
 8001810:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001812:	230f      	movs	r3, #15
 8001814:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 3;
 8001816:	2303      	movs	r3, #3
 8001818:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 3;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800181e:	230f      	movs	r3, #15
 8001820:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001822:	2310      	movs	r3, #16
 8001824:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001826:	2311      	movs	r3, #17
 8001828:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <_ZL11MX_FMC_Initv+0xd4>)
 8001836:	f007 f821 	bl	800887c <HAL_SRAM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <_ZL11MX_FMC_Initv+0xca>
  {
    Error_Handler( );
 800184a:	f000 f943 	bl	8001ad4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2004ccf4 	.word	0x2004ccf4
 800185c:	420d0400 	.word	0x420d0400
 8001860:	420d0504 	.word	0x420d0504

08001864 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 800187c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001880:	4a7d      	ldr	r2, [pc, #500]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 800188c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001898:	4b77      	ldr	r3, [pc, #476]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 800189a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800189e:	4a76      	ldr	r2, [pc, #472]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018a8:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b6:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018be:	f043 0320 	orr.w	r3, r3, #32
 80018c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018c6:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018da:	4a67      	ldr	r2, [pc, #412]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018e4:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f8:	4a5f      	ldr	r2, [pc, #380]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001920:	4b55      	ldr	r3, [pc, #340]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001934:	4a50      	ldr	r2, [pc, #320]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <_ZL12MX_GPIO_Initv+0x214>)
 8001940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FMC_RESET_GPIO_Port, FMC_RESET_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2104      	movs	r1, #4
 8001950:	484a      	ldr	r0, [pc, #296]	; (8001a7c <_ZL12MX_GPIO_Initv+0x218>)
 8001952:	f001 fe01 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2104      	movs	r1, #4
 800195a:	4849      	ldr	r0, [pc, #292]	; (8001a80 <_ZL12MX_GPIO_Initv+0x21c>)
 800195c:	f001 fdfc 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	4847      	ldr	r0, [pc, #284]	; (8001a84 <_ZL12MX_GPIO_Initv+0x220>)
 8001966:	f001 fdf7 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	21a0      	movs	r1, #160	; 0xa0
 800196e:	4846      	ldr	r0, [pc, #280]	; (8001a88 <_ZL12MX_GPIO_Initv+0x224>)
 8001970:	f001 fdf2 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FMC_RESET_Pin */
  GPIO_InitStruct.Pin = FMC_RESET_Pin;
 8001974:	2304      	movs	r3, #4
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FMC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	483c      	ldr	r0, [pc, #240]	; (8001a7c <_ZL12MX_GPIO_Initv+0x218>)
 800198c:	f001 fc0c 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001996:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <_ZL12MX_GPIO_Initv+0x228>)
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4837      	ldr	r0, [pc, #220]	; (8001a84 <_ZL12MX_GPIO_Initv+0x220>)
 80019a6:	f001 fbff 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_RIGHT_Pin */
  GPIO_InitStruct.Pin = SW_RIGHT_Pin;
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <_ZL12MX_GPIO_Initv+0x22c>)
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4835      	ldr	r0, [pc, #212]	; (8001a94 <_ZL12MX_GPIO_Initv+0x230>)
 80019c0:	f001 fbf2 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80019c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	482b      	ldr	r0, [pc, #172]	; (8001a88 <_ZL12MX_GPIO_Initv+0x224>)
 80019da:	f001 fbe5 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80019de:	2304      	movs	r3, #4
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4822      	ldr	r0, [pc, #136]	; (8001a80 <_ZL12MX_GPIO_Initv+0x21c>)
 80019f6:	f001 fbd7 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a06:	2302      	movs	r3, #2
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <_ZL12MX_GPIO_Initv+0x220>)
 8001a12:	f001 fbc9 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001a16:	2320      	movs	r3, #32
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4816      	ldr	r0, [pc, #88]	; (8001a88 <_ZL12MX_GPIO_Initv+0x224>)
 8001a2e:	f001 fbbb 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <_ZL12MX_GPIO_Initv+0x224>)
 8001a4a:	f001 fbad 	bl	80031a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2013      	movs	r0, #19
 8001a54:	f001 f996 	bl	8002d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001a58:	2013      	movs	r0, #19
 8001a5a:	f001 f9ad 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2018      	movs	r0, #24
 8001a64:	f001 f98e 	bl	8002d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001a68:	2018      	movs	r0, #24
 8001a6a:	f001 f9a5 	bl	8002db8 <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3730      	adds	r7, #48	; 0x30
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	46020c00 	.word	0x46020c00
 8001a7c:	42021000 	.word	0x42021000
 8001a80:	42021800 	.word	0x42021800
 8001a84:	42020800 	.word	0x42020800
 8001a88:	42020400 	.word	0x42020400
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	10110000 	.word	0x10110000
 8001a94:	42021400 	.word	0x42021400

08001a98 <signalVSync_caller>:

/* USER CODE BEGIN 4 */

void signalVSync_caller(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <signalVSync_caller+0x14>)
 8001aa0:	f001 fd72 	bl	8003588 <HAL_GPIO_TogglePin>
	touchgfx::OSWrappers::signalVSync();
 8001aa4:	f010 fdde 	bl	8012664 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	42021800 	.word	0x42021800

08001ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ac2:	f000 fc8d 	bl	80023e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	e7fe      	b.n	8001adc <Error_Handler+0x8>
	...

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_MspInit+0x34>)
 8001ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_MspInit+0x34>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_MspInit+0x34>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001b04:	2004      	movs	r0, #4
 8001b06:	f001 f932 	bl	8002d6e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	46020c00 	.word	0x46020c00

08001b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0bc      	sub	sp, #240	; 0xf0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	22c8      	movs	r2, #200	; 0xc8
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f024 fef5 	bl	8026928 <memset>
  if(hadc->Instance==ADC1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_ADC_MspInit+0xbc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d140      	bne.n	8001bca <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fa41 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001b6c:	f7ff ffb2 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b76:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_ADC_MspInit+0xc0>)
 8001ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001bac:	2304      	movs	r3, #4
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_ADC_MspInit+0xc4>)
 8001bc6:	f001 faef 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	37f0      	adds	r7, #240	; 0xf0
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	42028000 	.word	0x42028000
 8001bd8:	46020c00 	.word	0x46020c00
 8001bdc:	42020800 	.word	0x42020800

08001be0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_CRC_MspInit+0x3c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10e      	bne.n	8001c10 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_CRC_MspInit+0x40>)
 8001bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_CRC_MspInit+0x40>)
 8001bfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_CRC_MspInit+0x40>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40023000 	.word	0x40023000
 8001c20:	46020c00 	.word	0x46020c00

08001c24 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_DMA2D_MspInit+0x3c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10e      	bne.n	8001c54 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_DMA2D_MspInit+0x40>)
 8001c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_DMA2D_MspInit+0x40>)
 8001c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_DMA2D_MspInit+0x40>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	4002b000 	.word	0x4002b000
 8001c64:	46020c00 	.word	0x46020c00

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_TIM_Base_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d117      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c80:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	202e      	movs	r0, #46	; 0x2e
 8001c9e:	f001 f871 	bl	8002d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca2:	202e      	movs	r0, #46	; 0x2e
 8001ca4:	f001 f888 	bl	8002db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ca8:	e01b      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM16)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_TIM_Base_MspInit+0x8c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d116      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_TIM_Base_MspInit+0x88>)
 8001cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2046      	movs	r0, #70	; 0x46
 8001cd8:	f001 f854 	bl	8002d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001cdc:	2046      	movs	r0, #70	; 0x46
 8001cde:	f001 f86b 	bl	8002db8 <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	46020c00 	.word	0x46020c00
 8001cf4:	40014400 	.word	0x40014400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0bc      	sub	sp, #240	; 0xf0
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	22c8      	movs	r2, #200	; 0xc8
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f024 fe05 	bl	8026928 <memset>
  if(huart->Instance==USART1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_UART_MspInit+0xc4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d145      	bne.n	8001db4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d28:	f04f 0201 	mov.w	r2, #1
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d34:	2300      	movs	r3, #0
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 f953 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d48:	f7ff fec4 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001d88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da2:	2307      	movs	r3, #7
 8001da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_UART_MspInit+0xcc>)
 8001db0:	f001 f9fa 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	37f0      	adds	r7, #240	; 0xf0
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	46020c00 	.word	0x46020c00
 8001dc4:	42020000 	.word	0x42020000

08001dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0be      	sub	sp, #248	; 0xf8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	22c8      	movs	r2, #200	; 0xc8
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f024 fd9d 	bl	8026928 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <HAL_PCD_MspInit+0x11c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d171      	bne.n	8001edc <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f8ea 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001e1a:	f7ff fe5b 	bl	8001ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e24:	4a30      	ldr	r2, [pc, #192]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e56:	230a      	movs	r3, #10
 8001e58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4822      	ldr	r0, [pc, #136]	; (8001eec <HAL_PCD_MspInit+0x124>)
 8001e64:	f001 f9a0 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d119      	bne.n	8001ec8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001eb2:	f002 fd95 	bl	80049e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_PCD_MspInit+0x120>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ec6:	e001      	b.n	8001ecc <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001ec8:	f002 fd8a 	bl	80049e0 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2049      	movs	r0, #73	; 0x49
 8001ed2:	f000 ff57 	bl	8002d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001ed6:	2049      	movs	r0, #73	; 0x49
 8001ed8:	f000 ff6e 	bl	8002db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	37f8      	adds	r7, #248	; 0xf8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	42040000 	.word	0x42040000
 8001ee8:	46020c00 	.word	0x46020c00
 8001eec:	42020000 	.word	0x42020000

08001ef0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_FMC_MspInit+0x8c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d132      	bne.n	8001f72 <HAL_FMC_MspInit+0x82>
    return;
  }
  FMC_Initialized = 1;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_FMC_MspInit+0x8c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_FMC_MspInit+0x90>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_FMC_MspInit+0x90>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_FMC_MspInit+0x90>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f30:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f42:	230c      	movs	r3, #12
 8001f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <HAL_FMC_MspInit+0x94>)
 8001f4c:	f001 f92c 	bl	80031a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001f50:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001f54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <HAL_FMC_MspInit+0x98>)
 8001f6c:	f001 f91c 	bl	80031a8 <HAL_GPIO_Init>
 8001f70:	e000      	b.n	8001f74 <HAL_FMC_MspInit+0x84>
    return;
 8001f72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2004cd4c 	.word	0x2004cd4c
 8001f80:	46020c00 	.word	0x46020c00
 8001f84:	42021000 	.word	0x42021000
 8001f88:	42020c00 	.word	0x42020c00

08001f8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f94:	f7ff ffac 	bl	8001ef0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	; 0x38
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_InitTick+0xcc>)
 8001fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fb6:	4a2d      	ldr	r2, [pc, #180]	; (800206c <HAL_InitTick+0xcc>)
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_InitTick+0xcc>)
 8001fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fce:	f107 0210 	add.w	r2, r7, #16
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 ff47 	bl	8005e6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fde:	f003 ff1d 	bl	8005e1c <HAL_RCC_GetPCLK2Freq>
 8001fe2:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	4a22      	ldr	r2, [pc, #136]	; (8002070 <HAL_InitTick+0xd0>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_InitTick+0xd4>)
 8001ff4:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_InitTick+0xd8>)
 8001ff6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_InitTick+0xd4>)
 8001ffa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ffe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_InitTick+0xd4>)
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_InitTick+0xd4>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_InitTick+0xd4>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <HAL_InitTick+0xd4>)
 8002014:	f006 fc82 	bl	800891c <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800201e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002026:	4813      	ldr	r0, [pc, #76]	; (8002074 <HAL_InitTick+0xd4>)
 8002028:	f006 fcd0 	bl	80089cc <HAL_TIM_Base_Start_IT>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d808      	bhi.n	8002052 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	202a      	movs	r0, #42	; 0x2a
 8002046:	f000 fe9d 	bl	8002d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_InitTick+0xdc>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e002      	b.n	8002058 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002058:	202a      	movs	r0, #42	; 0x2a
 800205a:	f000 fead 	bl	8002db8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800205e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002062:	4618      	mov	r0, r3
 8002064:	3738      	adds	r7, #56	; 0x38
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	46020c00 	.word	0x46020c00
 8002070:	431bde83 	.word	0x431bde83
 8002074:	2004cd50 	.word	0x2004cd50
 8002078:	40012c00 	.word	0x40012c00
 800207c:	2002580c 	.word	0x2002580c

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RIGHT_Pin);
 80020b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020b4:	f001 fa82 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */
HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <EXTI8_IRQHandler+0x18>)
 80020bc:	f001 fa64 	bl	8003588 <HAL_GPIO_TogglePin>
//signalVSync_caller();
  /* USER CODE END EXTI8_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	42020400 	.word	0x42020400

080020c8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80020cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020d0:	f001 fa74 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM1_UP_IRQHandler+0x10>)
 80020de:	f006 fd15 	bl	8008b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2004cd50 	.word	0x2004cd50

080020ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <TIM3_IRQHandler+0x18>)
 80020f2:	f006 fd0b 	bl	8008b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <TIM3_IRQHandler+0x1c>)
 80020fa:	f001 fa45 	bl	8003588 <HAL_GPIO_TogglePin>
//signalVSync_caller();
  /* USER CODE END TIM3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2004c6c0 	.word	0x2004c6c0
 8002108:	42020800 	.word	0x42020800

0800210c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM16_IRQHandler+0x10>)
 8002112:	f006 fcfb 	bl	8008b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2004c70c 	.word	0x2004c70c

08002120 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <OTG_FS_IRQHandler+0x10>)
 8002126:	f001 fc2b 	bl	8003980 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2004c7e8 	.word	0x2004c7e8

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214e:	f024 fb9f 	bl	8026890 <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
	return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002176:	e7fe      	b.n	8002176 <_exit+0x12>

08002178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e00a      	b.n	80021a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218a:	e000      	b.n	800218e <_read+0x16>
 800218c:	bf00      	nop
 800218e:	4601      	mov	r1, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf0      	blt.n	800218a <_read+0x12>
	}

return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e009      	b.n	80021d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	e000      	b.n	80021d2 <_write+0x20>
 80021d0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf1      	blt.n	80021c4 <_write+0x12>
	}
	return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_close>:

int _close(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f024 fb04 	bl	8026890 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200c0000 	.word	0x200c0000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	2004cd9c 	.word	0x2004cd9c
 80022bc:	2004f9a0 	.word	0x2004f9a0

080022c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <SystemInit+0x68>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <SystemInit+0x68>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <SystemInit+0x6c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <SystemInit+0x6c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <SystemInit+0x6c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <SystemInit+0x6c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <SystemInit+0x6c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <SystemInit+0x6c>)
 80022f2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022f6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <SystemInit+0x6c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <SystemInit+0x6c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <SystemInit+0x6c>)
 8002308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <SystemInit+0x6c>)
 8002310:	2200      	movs	r2, #0
 8002312:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SystemInit+0x68>)
 8002316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800231a:	609a      	str	r2, [r3, #8]
  #endif
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00
 800232c:	46020c00 	.word	0x46020c00

08002330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002334:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002336:	e003      	b.n	8002340 <LoopCopyDataInit>

08002338 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800233a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800233c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800233e:	3104      	adds	r1, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002344:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002346:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002348:	d3f6      	bcc.n	8002338 <CopyDataInit>
	ldr	r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopForever+0x12>)
	b	LoopFillZerobss
 800234c:	e002      	b.n	8002354 <LoopFillZerobss>

0800234e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800234e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002350:	f842 3b04 	str.w	r3, [r2], #4

08002354 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <LoopForever+0x16>)
	cmp	r2, r3
 8002356:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002358:	d3f9      	bcc.n	800234e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235a:	f7ff ffb1 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235e:	f024 faaf 	bl	80268c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002362:	f7fe febf 	bl	80010e4 <main>

08002366 <LoopForever>:

LoopForever:
    b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002368:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800236c:	0804f8e4 	.word	0x0804f8e4
	ldr	r0, =_sdata
 8002370:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002374:	20025900 	.word	0x20025900
	ldr	r2, =_sbss
 8002378:	2004b100 	.word	0x2004b100
	ldr	r3, = _ebss
 800237c:	2004f9a0 	.word	0x2004f9a0

08002380 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_IRQHandler>
	...

08002384 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_Init+0x4c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_Init+0x4c>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f000 fcea 	bl	8002d6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800239a:	f003 fc09 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <HAL_Init+0x50>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <HAL_Init+0x54>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_Init+0x58>)
 80023b2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023b4:	2007      	movs	r0, #7
 80023b6:	f7ff fdf3 	bl	8001fa0 <HAL_InitTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e002      	b.n	80023ca <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fb8c 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000
 80023d4:	46020c00 	.word	0x46020c00
 80023d8:	08028948 	.word	0x08028948
 80023dc:	20025808 	.word	0x20025808

080023e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20025810 	.word	0x20025810
 8002404:	2004cda0 	.word	0x2004cda0

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2004cda0 	.word	0x2004cda0

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20025810 	.word	0x20025810

08002468 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d002      	beq.n	80024c0 <LL_ADC_SetGainCompensation+0x32>
 80024ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024be:	e000      	b.n	80024c2 <LL_ADC_SetGainCompensation+0x34>
 80024c0:	2200      	movs	r2, #0
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2107      	movs	r1, #7
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6093      	str	r3, [r2, #8]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254a:	d101      	bne.n	8002550 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800256e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002572:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800259a:	d101      	bne.n	80025a0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsEnabled+0x18>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsEnabled+0x1a>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d101      	bne.n	80025ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b08      	cmp	r3, #8
 800260c:	d101      	bne.n	8002612 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2e3      	b.n	8002c08 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a92      	ldr	r2, [pc, #584]	; (8002898 <HAL_ADC_Init+0x278>)
 800264e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fa5d 	bl	8001b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff60 	bl	8002536 <LL_ADC_IsDeepPowerDownEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff46 	bl	8002512 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff7b 	bl	8002586 <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff5f 	bl	800255e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_ADC_Init+0x27c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <HAL_ADC_Init+0x280>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff5d 	bl	8002586 <LL_ADC_IsInternalRegulatorEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10e      	bne.n	80026f0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff6d 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 80026fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 8274 	bne.w	8002bf2 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 8270 	bne.w	8002bf2 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002716:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff41 	bl	80025ae <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d14e      	bne.n	80027d0 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_ADC_Init+0x278>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d028      	beq.n	800278e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_ADC_Init+0x284>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x13a>
 8002746:	4857      	ldr	r0, [pc, #348]	; (80028a4 <HAL_ADC_Init+0x284>)
 8002748:	f7ff ff31 	bl	80025ae <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	e008      	b.n	800276c <HAL_ADC_Init+0x14c>
 800275a:	484f      	ldr	r0, [pc, #316]	; (8002898 <HAL_ADC_Init+0x278>)
 800275c:	f7ff ff27 	bl	80025ae <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02f      	beq.n	80027d0 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_ADC_Init+0x284>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x15e>
 800277a:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <HAL_ADC_Init+0x288>)
 800277c:	e000      	b.n	8002780 <HAL_ADC_Init+0x160>
 800277e:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_ADC_Init+0x28c>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f7ff fe6e 	bl	8002468 <LL_ADC_SetCommonClock>
 800278c:	e020      	b.n	80027d0 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f023 010c 	bic.w	r1, r3, #12
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d005      	beq.n	80027b0 <HAL_ADC_Init+0x190>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	e000      	b.n	80027b2 <HAL_ADC_Init+0x192>
 80027b0:	230c      	movs	r3, #12
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80027ba:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <HAL_ADC_Init+0x28c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027ca:	4938      	ldr	r1, [pc, #224]	; (80028ac <HAL_ADC_Init+0x28c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_ADC_Init+0x278>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d010      	beq.n	80027fc <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027e6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80027ec:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027f4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80027f6:	4313      	orrs	r3, r2
 80027f8:	623b      	str	r3, [r7, #32]
 80027fa:	e030      	b.n	800285e <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7f1b      	ldrb	r3, [r3, #28]
 8002800:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002808:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800280a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002810:	2a00      	cmp	r2, #0
 8002812:	d002      	beq.n	800281a <HAL_ADC_Init+0x1fa>
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	e000      	b.n	800281c <HAL_ADC_Init+0x1fc>
 800281a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800281c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002822:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da04      	bge.n	8002836 <HAL_ADC_Init+0x216>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002834:	e001      	b.n	800283a <HAL_ADC_Init+0x21a>
 8002836:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 800283a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4918      	ldr	r1, [pc, #96]	; (80028a4 <HAL_ADC_Init+0x284>)
 8002842:	428b      	cmp	r3, r1
 8002844:	d103      	bne.n	800284e <HAL_ADC_Init+0x22e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284c:	e003      	b.n	8002856 <HAL_ADC_Init+0x236>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002854:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002856:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	4313      	orrs	r3, r2
 800285c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d12f      	bne.n	80028c8 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_ADC_Init+0x278>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	3b01      	subs	r3, #1
 8002878:	045b      	lsls	r3, r3, #17
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	4313      	orrs	r3, r2
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e022      	b.n	80028c8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	e018      	b.n	80028c8 <HAL_ADC_Init+0x2a8>
 8002896:	bf00      	nop
 8002898:	46021000 	.word	0x46021000
 800289c:	20025808 	.word	0x20025808
 80028a0:	053e2d63 	.word	0x053e2d63
 80028a4:	42028000 	.word	0x42028000
 80028a8:	42028308 	.word	0x42028308
 80028ac:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a93      	ldr	r2, [pc, #588]	; (8002b1c <HAL_ADC_Init+0x4fc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	4313      	orrs	r3, r2
 80028e8:	6a3a      	ldr	r2, [r7, #32]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b8a      	ldr	r3, [pc, #552]	; (8002b20 <HAL_ADC_Init+0x500>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]
 8002902:	e033      	b.n	800296c <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	4313      	orrs	r3, r2
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	4313      	orrs	r3, r2
 800291e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 800292a:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	430b      	orrs	r3, r1
 8002936:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_ADC_Init+0x4fc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f000 8093 	beq.w	8002a9e <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fe29 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8002982:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fe36 	bl	80025fa <LL_ADC_INJ_IsConversionOngoing>
 800298e:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d161      	bne.n	8002a5a <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d15e      	bne.n	8002a5a <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7f1b      	ldrb	r3, [r3, #28]
 80029a0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	495f      	ldr	r1, [pc, #380]	; (8002b24 <HAL_ADC_Init+0x504>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d102      	bne.n	80029b2 <HAL_ADC_Init+0x392>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_Init+0x398>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b8:	4313      	orrs	r3, r2
 80029ba:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6a39      	ldr	r1, [r7, #32]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff fd51 	bl	800248e <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d11e      	bne.n	8002a34 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <HAL_ADC_Init+0x508>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a0a:	0411      	lsls	r1, r2, #16
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a22:	0892      	lsrs	r2, r2, #2
 8002a24:	430a      	orrs	r2, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e007      	b.n	8002a44 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10c      	bne.n	8002a7c <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f023 010f 	bic.w	r1, r3, #15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7a:	e007      	b.n	8002a8c <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 020f 	bic.w	r2, r2, #15
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a90:	f023 0303 	bic.w	r3, r3, #3
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a9c:	e0b2      	b.n	8002c04 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002aa6:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8002aac:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8002ab2:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d103      	bne.n	8002acc <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_ADC_Init+0x50c>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	69f9      	ldr	r1, [r7, #28]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2100      	movs	r1, #0
 8002aec:	f7ff fcf2 	bl	80024d4 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	461a      	mov	r2, r3
 8002afa:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002afe:	f7ff fce9 	bl	80024d4 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d112      	bne.n	8002b30 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f062 020f 	orn	r2, r2, #15
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1a:	e044      	b.n	8002ba6 <HAL_ADC_Init+0x586>
 8002b1c:	46021000 	.word	0x46021000
 8002b20:	fff0c013 	.word	0xfff0c013
 8002b24:	42028000 	.word	0x42028000
 8002b28:	fc00f81e 	.word	0xfc00f81e
 8002b2c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b38:	d135      	bne.n	8002ba6 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e00d      	b.n	8002b5c <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d006      	beq.n	8002b64 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	d9ee      	bls.n	8002b40 <HAL_ADC_Init+0x520>
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8002b64:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f062 020f 	orn	r2, r2, #15
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b7c:	e013      	b.n	8002ba6 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f003 031c 	and.w	r3, r3, #28
 8002b90:	f06f 020f 	mvn.w	r2, #15
 8002b94:	fa02 f103 	lsl.w	r1, r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_ADC_Init+0x5f0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10b      	bne.n	8002bce <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc0:	f023 0303 	bic.w	r3, r3, #3
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bcc:	e01a      	b.n	8002c04 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd2:	f023 0312 	bic.w	r3, r3, #18
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bf0:	e008      	b.n	8002c04 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	833ffff3 	.word	0x833ffff3

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <__NVIC_EnableIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	; (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff4c 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d92:	f7ff ff63 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002d96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	6978      	ldr	r0, [r7, #20]
 8002d9e:	f7ff ffb3 	bl	8002d08 <NVIC_EncodePriority>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff82 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff56 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e054      	b.n	8002e90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7f5b      	ldrb	r3, [r3, #29]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fef2 	bl	8001be0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791b      	ldrb	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <HAL_CRC_Init+0xc4>)
 8002e10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0218 	bic.w	r2, r2, #24
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	e00c      	b.n	8002e3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f834 	bl	8002e9c <HAL_CRCEx_Polynomial_Set>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e028      	b.n	8002e90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4e:	611a      	str	r2, [r3, #16]
 8002e50:	e004      	b.n	8002e5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6912      	ldr	r2, [r2, #16]
 8002e5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	04c11db7 	.word	0x04c11db7

08002e9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002eac:	231f      	movs	r3, #31
 8002eae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002eb0:	bf00      	nop
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	613a      	str	r2, [r7, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b18      	cmp	r3, #24
 8002ed4:	d846      	bhi.n	8002f64 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f6b 	.word	0x08002f6b
 8002ee0:	08002f65 	.word	0x08002f65
 8002ee4:	08002f65 	.word	0x08002f65
 8002ee8:	08002f65 	.word	0x08002f65
 8002eec:	08002f65 	.word	0x08002f65
 8002ef0:	08002f65 	.word	0x08002f65
 8002ef4:	08002f65 	.word	0x08002f65
 8002ef8:	08002f65 	.word	0x08002f65
 8002efc:	08002f59 	.word	0x08002f59
 8002f00:	08002f65 	.word	0x08002f65
 8002f04:	08002f65 	.word	0x08002f65
 8002f08:	08002f65 	.word	0x08002f65
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f65 	.word	0x08002f65
 8002f1c:	08002f4d 	.word	0x08002f4d
 8002f20:	08002f65 	.word	0x08002f65
 8002f24:	08002f65 	.word	0x08002f65
 8002f28:	08002f65 	.word	0x08002f65
 8002f2c:	08002f65 	.word	0x08002f65
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f41 	.word	0x08002f41
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d913      	bls.n	8002f6e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f4a:	e010      	b.n	8002f6e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b07      	cmp	r3, #7
 8002f50:	d90f      	bls.n	8002f72 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f56:	e00c      	b.n	8002f72 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	d90b      	bls.n	8002f76 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f62:	e008      	b.n	8002f76 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e006      	b.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e004      	b.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f76:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 0118 	bic.w	r1, r3, #24
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e053      	b.n	8003062 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe fe28 	bl	8001c24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6851      	ldr	r1, [r2, #4]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	69d2      	ldr	r2, [r2, #28]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6891      	ldr	r1, [r2, #8]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6992      	ldr	r2, [r2, #24]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	0c1b      	lsrs	r3, r3, #16
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d1      	ldr	r1, [r2, #12]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	430b      	orrs	r3, r1
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	051a      	lsls	r2, r3, #20
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	055b      	lsls	r3, r3, #21
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DMA2D_ConfigLayer+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e084      	b.n	8003196 <HAL_DMA2D_ConfigLayer+0x12a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	3328      	adds	r3, #40	; 0x28
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80030c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80030cc:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <HAL_DMA2D_ConfigLayer+0x138>)
 80030ce:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b0a      	cmp	r3, #10
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA2D_ConfigLayer+0x74>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	d107      	bne.n	80030f0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e005      	b.n	80030fc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d120      	bne.n	8003144 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	ea02 0103 	and.w	r1, r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b0a      	cmp	r3, #10
 800312a:	d003      	beq.n	8003134 <HAL_DMA2D_ConfigLayer+0xc8>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d127      	bne.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
 8003142:	e01f      	b.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	ea02 0103 	and.w	r1, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	430a      	orrs	r2, r1
 800315a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d003      	beq.n	8003176 <HAL_DMA2D_ConfigLayer+0x10a>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b09      	cmp	r3, #9
 8003174:	d106      	bne.n	8003184 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003182:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	ff33000f 	.word	0xff33000f

080031a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031ba:	e1ba      	b.n	8003532 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 81aa 	beq.w	800352c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_GPIO_Init+0x188>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d15d      	bne.n	800329c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80031e6:	2201      	movs	r2, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0201 	and.w	r2, r3, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	4313      	orrs	r3, r2
 8003208:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003210:	4a48      	ldr	r2, [pc, #288]	; (8003334 <HAL_GPIO_Init+0x18c>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003218:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800321a:	4a46      	ldr	r2, [pc, #280]	; (8003334 <HAL_GPIO_Init+0x18c>)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3208      	adds	r2, #8
 800322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003232:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	4013      	ands	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220b      	movs	r2, #11
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	4313      	orrs	r3, r2
 800325c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	08da      	lsrs	r2, r3, #3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3208      	adds	r2, #8
 8003266:	69f9      	ldr	r1, [r7, #28]
 8003268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	4013      	ands	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	2202      	movs	r2, #2
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e067      	b.n	800336c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x104>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d145      	bne.n	8003338 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	4013      	ands	r3, r2
 800330e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	4313      	orrs	r3, r2
 8003324:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e01e      	b.n	800336c <HAL_GPIO_Init+0x1c4>
 800332e:	bf00      	nop
 8003330:	46020000 	.word	0x46020000
 8003334:	080289a0 	.word	0x080289a0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	4013      	ands	r3, r2
 800334e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4313      	orrs	r3, r2
 8003364:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00b      	beq.n	800338c <HAL_GPIO_Init+0x1e4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003380:	2b11      	cmp	r3, #17
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d130      	bne.n	80033ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80033c2:	2201      	movs	r2, #1
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0201 	and.w	r2, r3, #1
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d017      	beq.n	8003426 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	4013      	ands	r3, r2
 800340c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	4313      	orrs	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d07c      	beq.n	800352c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003432:	4a47      	ldr	r2, [pc, #284]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3318      	adds	r3, #24
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	4013      	ands	r3, r2
 8003454:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0a9a      	lsrs	r2, r3, #10
 800345a:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <HAL_GPIO_Init+0x3ac>)
 800345c:	4013      	ands	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	00d2      	lsls	r2, r2, #3
 8003466:	4093      	lsls	r3, r2
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800346e:	4938      	ldr	r1, [pc, #224]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3318      	adds	r3, #24
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	4013      	ands	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	4013      	ands	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003504:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	4013      	ands	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_GPIO_Init+0x3a8>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae3d 	bne.w	80031bc <HAL_GPIO_Init+0x14>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3724      	adds	r7, #36	; 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	46022000 	.word	0x46022000
 8003554:	002f7f7f 	.word	0x002f7f7f

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003568:	787b      	ldrb	r3, [r7, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003574:	e002      	b.n	800357c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43d9      	mvns	r1, r3
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	400b      	ands	r3, r1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f814 	bl	8003608 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d006      	beq.n	80035fa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80035ec:	4a05      	ldr	r2, [pc, #20]	; (8003604 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f812 	bl	800361e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	46022000 	.word	0x46022000

08003608 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_ICACHE_Disable+0x5c>)
 8003640:	2202      	movs	r2, #2
 8003642:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_ICACHE_Disable+0x5c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_ICACHE_Disable+0x5c>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003650:	f7fe feda 	bl	8002408 <HAL_GetTick>
 8003654:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003656:	e00f      	b.n	8003678 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003658:	f7fe fed6 	bl	8002408 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d908      	bls.n	8003678 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_ICACHE_Disable+0x5c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	71fb      	strb	r3, [r7, #7]
        break;
 8003676:	e005      	b.n	8003684 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_ICACHE_Disable+0x5c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e9      	bne.n	8003658 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003684:	79fb      	ldrb	r3, [r7, #7]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40030400 	.word	0x40030400

08003694 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80036a2:	4b22      	ldr	r3, [pc, #136]	; (800372c <HAL_ICACHE_EnableRemapRegion+0x98>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
 80036b2:	e034      	b.n	800371e <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 80036ba:	4413      	add	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
 80036ce:	e026      	b.n	800371e <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80036dc:	4013      	ands	r3, r2
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	425b      	negs	r3, r3
 80036ee:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80036f0:	401a      	ands	r2, r3
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	025a      	lsls	r2, r3, #9
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 800370c:	4313      	orrs	r3, r2
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 800371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40030400 	.word	0x40030400
 8003730:	40030420 	.word	0x40030420
 8003734:	07ff0000 	.word	0x07ff0000

08003738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b08f      	sub	sp, #60	; 0x3c
 800373c:	af0a      	add	r7, sp, #40	; 0x28
 800373e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e116      	b.n	8003978 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fe fb2f 	bl	8001dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f006 ffad 	bl	800a6e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	687e      	ldr	r6, [r7, #4]
 8003796:	466d      	mov	r5, sp
 8003798:	f106 0410 	add.w	r4, r6, #16
 800379c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ac:	1d33      	adds	r3, r6, #4
 80037ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f006 feca 	bl	800a54a <USB_CoreInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d7      	b.n	8003978 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f006 ff9b 	bl	800a70a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e04a      	b.n	8003870 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	333d      	adds	r3, #61	; 0x3d
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333c      	adds	r3, #60	; 0x3c
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	b298      	uxth	r0, r3
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	; 0x44
 8003816:	4602      	mov	r2, r0
 8003818:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3340      	adds	r3, #64	; 0x40
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3348      	adds	r3, #72	; 0x48
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	334c      	adds	r3, #76	; 0x4c
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3354      	adds	r3, #84	; 0x54
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3301      	adds	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3af      	bcc.n	80037da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e044      	b.n	800390a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3b5      	bcc.n	8003880 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	687e      	ldr	r6, [r7, #4]
 800391c:	466d      	mov	r5, sp
 800391e:	f106 0410 	add.w	r4, r6, #16
 8003922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800392a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800392e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003932:	1d33      	adds	r3, r6, #4
 8003934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f006 ff34 	bl	800a7a4 <USB_DevInit>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e014      	b.n	8003978 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 ff38 	bl	80047dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f007 fa47 	bl	800ae04 <USB_DevDisconnect>

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003980 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b08d      	sub	sp, #52	; 0x34
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f007 fae8 	bl	800af6c <USB_GetMode>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 84b7 	bne.w	8004312 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f007 fa4c 	bl	800ae46 <USB_ReadInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 84ad 	beq.w	8004310 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f007 fa39 	bl	800ae46 <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d107      	bne.n	80039ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f002 0202 	and.w	r2, r2, #2
 80039ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f007 fa27 	bl	800ae46 <USB_ReadInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d161      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	0c5b      	lsrs	r3, r3, #17
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d124      	bne.n	8003a88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d035      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6a38      	ldr	r0, [r7, #32]
 8003a5e:	f007 f979 	bl	800ad54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6e:	441a      	add	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a80:	441a      	add	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	621a      	str	r2, [r3, #32]
 8003a86:	e016      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	0c5b      	lsrs	r3, r3, #17
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d110      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6a38      	ldr	r0, [r7, #32]
 8003aa0:	f007 f958 	bl	800ad54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	441a      	add	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0210 	orr.w	r2, r2, #16
 8003ac4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f007 f9bb 	bl	800ae46 <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ada:	f040 80a7 	bne.w	8003c2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f007 f9c0 	bl	800ae6c <USB_ReadDevAllOutEpInterrupt>
 8003aec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003aee:	e099      	b.n	8003c24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 808e 	beq.w	8003c18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f007 f9e4 	bl	800aed4 <USB_ReadDevOutEPInterrupt>
 8003b0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fd27 	bl	8004580 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00c      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fdfd 	bl	8004750 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2310      	movs	r3, #16
 8003b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d030      	beq.n	8003bde <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d109      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	78db      	ldrb	r3, [r3, #3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fbf0 	bl	80043ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2302      	movs	r3, #2
 8003bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f47f af62 	bne.w	8003af0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f007 f908 	bl	800ae46 <USB_ReadInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c40:	f040 80db 	bne.w	8003dfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f007 f929 	bl	800aea0 <USB_ReadDevAllInEpInterrupt>
 8003c4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c54:	e0cd      	b.n	8003df2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80c2 	beq.w	8003de6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f007 f94f 	bl	800af10 <USB_ReadDevInEPInterrupt>
 8003c72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d057      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69f9      	ldr	r1, [r7, #28]
 8003c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d132      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4403      	add	r3, r0
 8003cdc:	3348      	adds	r3, #72	; 0x48
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4419      	add	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4403      	add	r3, r0
 8003cf0:	334c      	adds	r3, #76	; 0x4c
 8003cf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d113      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x3a2>
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3354      	adds	r3, #84	; 0x54
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	f007 f957 	bl	800afd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb01 	bl	8004330 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2308      	movs	r3, #8
 8003d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2310      	movs	r3, #16
 8003d64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2340      	movs	r3, #64	; 0x40
 8003d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d023      	beq.n	8003dd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d8e:	6a38      	ldr	r0, [r7, #32]
 8003d90:	f006 fe56 	bl	800aa40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	3338      	adds	r3, #56	; 0x38
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	78db      	ldrb	r3, [r3, #3]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d108      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb01 	bl	80043c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb40 	bl	8004466 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3301      	adds	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f af2e 	bne.w	8003c56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f007 f821 	bl	800ae46 <USB_ReadInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e0e:	d122      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d108      	bne.n	8003e40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e36:	2100      	movs	r1, #0
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fcf3 	bl	8004824 <HAL_PCDEx_LPM_Callback>
 8003e3e:	e002      	b.n	8003e46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 faa9 	bl	8004398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f006 fff3 	bl	800ae46 <USB_ReadInterrupts>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6a:	d112      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa81 	bl	8004384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f006 ffd5 	bl	800ae46 <USB_ReadInterrupts>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d121      	bne.n	8003eec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003eb6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d111      	bne.n	8003ee6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	f003 020f 	and.w	r2, r3, #15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003edc:	2101      	movs	r1, #1
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fca0 	bl	8004824 <HAL_PCDEx_LPM_Callback>
 8003ee4:	e002      	b.n	8003eec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa4c 	bl	8004384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f006 ffa8 	bl	800ae46 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	f040 80b7 	bne.w	8004072 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f006 fd8e 	bl	800aa40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	e046      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	461a      	mov	r2, r3
 8003f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3b3      	bcc.n	8003f2a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fee:	f043 030b 	orr.w	r3, r3, #11
 8003ff2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004004:	f043 030b 	orr.w	r3, r3, #11
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	e015      	b.n	8004038 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800401e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004022:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004032:	f043 030b 	orr.w	r3, r3, #11
 8004036:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800404a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800405c:	461a      	mov	r2, r3
 800405e:	f006 ffb7 	bl	800afd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f006 fee5 	bl	800ae46 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	d124      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f006 ff7b 	bl	800af88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f006 fd4f 	bl	800ab3a <USB_GetDevSpeed>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681c      	ldr	r4, [r3, #0]
 80040a8:	f001 fe8a 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 80040ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4620      	mov	r0, r4
 80040b8:	f006 fa74 	bl	800a5a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f957 	bl	8004370 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f006 feb5 	bl	800ae46 <USB_ReadInterrupts>
 80040dc:	4603      	mov	r3, r0
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d10a      	bne.n	80040fc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f938 	bl	800435c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f002 0208 	and.w	r2, r2, #8
 80040fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f006 fea0 	bl	800ae46 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b80      	cmp	r3, #128	; 0x80
 800410e:	d122      	bne.n	8004156 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411c:	2301      	movs	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	e014      	b.n	800414c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d105      	bne.n	8004146 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	b2db      	uxtb	r3, r3
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f95f 	bl	8004404 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	3301      	adds	r3, #1
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	429a      	cmp	r2, r3
 8004154:	d3e5      	bcc.n	8004122 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f006 fe73 	bl	800ae46 <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416a:	d13b      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e02b      	b.n	80041ca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3340      	adds	r3, #64	; 0x40
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d115      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004198:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800419a:	2b00      	cmp	r3, #0
 800419c:	da12      	bge.n	80041c4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	333f      	adds	r3, #63	; 0x3f
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f920 	bl	8004404 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	3301      	adds	r3, #1
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d3ce      	bcc.n	8004172 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f006 fe2c 	bl	800ae46 <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f8:	d155      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e045      	b.n	800428c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d12e      	bne.n	8004286 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004228:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	da2b      	bge.n	8004286 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800423a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800423e:	429a      	cmp	r2, r3
 8004240:	d121      	bne.n	8004286 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004282:	6053      	str	r3, [r2, #4]
            break;
 8004284:	e007      	b.n	8004296 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	429a      	cmp	r2, r3
 8004294:	d3b4      	bcc.n	8004200 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f006 fdcb 	bl	800ae46 <USB_ReadInterrupts>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d10a      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f88d 	bl	80043dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f006 fdb5 	bl	800ae46 <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d115      	bne.n	8004312 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f879 	bl	80043f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e000      	b.n	8004312 <HAL_PCD_IRQHandler+0x992>
      return;
 8004310:	bf00      	nop
    }
  }
}
 8004312:	3734      	adds	r7, #52	; 0x34
 8004314:	46bd      	mov	sp, r7
 8004316:	bd90      	pop	{r4, r7, pc}

08004318 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da0c      	bge.n	8004432 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	3338      	adds	r3, #56	; 0x38
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e00c      	b.n	800444c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	4618      	mov	r0, r3
 8004454:	f006 fb96 	bl	800ab84 <USB_EPStopXfer>
 8004458:	4603      	mov	r3, r0
 800445a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800445c:	7afb      	ldrb	r3, [r7, #11]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08a      	sub	sp, #40	; 0x28
 800446a:	af02      	add	r7, sp, #8
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	3338      	adds	r3, #56	; 0x38
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	3304      	adds	r3, #4
 800448c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	429a      	cmp	r2, r3
 8004498:	d901      	bls.n	800449e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06c      	b.n	8004578 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3303      	adds	r3, #3
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044c2:	e02b      	b.n	800451c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d902      	bls.n	80044e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3303      	adds	r3, #3
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6919      	ldr	r1, [r3, #16]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4603      	mov	r3, r0
 80044fe:	6978      	ldr	r0, [r7, #20]
 8004500:	f006 fbea 	bl	800acd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	b29b      	uxth	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	429a      	cmp	r2, r3
 8004530:	d809      	bhi.n	8004546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800453a:	429a      	cmp	r2, r3
 800453c:	d203      	bcs.n	8004546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1be      	bne.n	80044c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	429a      	cmp	r2, r3
 8004550:	d811      	bhi.n	8004576 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	2201      	movs	r2, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	43db      	mvns	r3, r3
 800456c:	6939      	ldr	r1, [r7, #16]
 800456e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004572:	4013      	ands	r3, r2
 8004574:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	333c      	adds	r3, #60	; 0x3c
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d17b      	bne.n	80046ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4a61      	ldr	r2, [pc, #388]	; (8004748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f240 80b9 	bls.w	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80b3 	beq.w	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e8:	6093      	str	r3, [r2, #8]
 80045ea:	e0a7      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	461a      	mov	r2, r3
 8004604:	2320      	movs	r3, #32
 8004606:	6093      	str	r3, [r2, #8]
 8004608:	e098      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8093 	bne.w	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4a4b      	ldr	r2, [pc, #300]	; (8004748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d90f      	bls.n	800463e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	461a      	mov	r2, r3
 8004636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	e07e      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	3304      	adds	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	0159      	lsls	r1, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	440b      	add	r3, r1
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	1ad2      	subs	r2, r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d114      	bne.n	80046a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004688:	461a      	mov	r2, r3
 800468a:	2101      	movs	r1, #1
 800468c:	f006 fca0 	bl	800afd0 <USB_EP0_OutStart>
 8004690:	e006      	b.n	80046a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	441a      	add	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe36 	bl	8004318 <HAL_PCD_DataOutStageCallback>
 80046ac:	e046      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d124      	bne.n	8004700 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	461a      	mov	r2, r3
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	6093      	str	r3, [r2, #8]
 80046d4:	e032      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	461a      	mov	r2, r3
 80046ee:	2320      	movs	r3, #32
 80046f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fe0d 	bl	8004318 <HAL_PCD_DataOutStageCallback>
 80046fe:	e01d      	b.n	800473c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004728:	461a      	mov	r2, r3
 800472a:	2100      	movs	r1, #0
 800472c:	f006 fc50 	bl	800afd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fdee 	bl	8004318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	4f54300a 	.word	0x4f54300a
 800474c:	4f54310a 	.word	0x4f54310a

08004750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d90e      	bls.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fdcf 	bl	8004348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d90c      	bls.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047c4:	461a      	mov	r2, r3
 80047c6:	2101      	movs	r1, #1
 80047c8:	f006 fc02 	bl	800afd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	4f54300a 	.word	0x4f54300a

080047dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	f043 0303 	orr.w	r3, r3, #3
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800484c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	429a      	cmp	r2, r3
 8004854:	d101      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e057      	b.n	800490a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d90a      	bls.n	8004878 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004862:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4313      	orrs	r3, r2
 800486e:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004874:	60d3      	str	r3, [r2, #12]
 8004876:	e007      	b.n	8004888 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004878:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004880:	4925      	ldr	r1, [pc, #148]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	2232      	movs	r2, #50	; 0x32
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048a6:	e002      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f3      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01b      	beq.n	80048fe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	2232      	movs	r2, #50	; 0x32
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048e4:	e002      	b.n	80048ec <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0xc2>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f3      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e000      	b.n	800490a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	46020800 	.word	0x46020800
 800491c:	20025808 	.word	0x20025808
 8004920:	10624dd3 	.word	0x10624dd3

08004924 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <HAL_PWREx_GetVoltageRange+0x18>)
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	46020800 	.word	0x46020800

08004940 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004948:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_PWREx_ConfigSupply+0x94>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a22      	ldr	r2, [pc, #136]	; (80049d8 <HAL_PWREx_ConfigSupply+0x98>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	2232      	movs	r2, #50	; 0x32
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <HAL_PWREx_ConfigSupply+0x98>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d113      	bne.n	8004994 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004972:	f023 0302 	bic.w	r3, r3, #2
 8004976:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004978:	e002      	b.n	8004980 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b01      	subs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d116      	bne.n	80049ba <HAL_PWREx_ConfigSupply+0x7a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f3      	bne.n	800497a <HAL_PWREx_ConfigSupply+0x3a>
 8004992:	e012      	b.n	80049ba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80049a0:	e002      	b.n	80049a8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_PWREx_ConfigSupply+0x9c>)
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <HAL_PWREx_ConfigSupply+0x7a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f3      	bne.n	80049a2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e000      	b.n	80049c6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20025808 	.word	0x20025808
 80049d8:	10624dd3 	.word	0x10624dd3
 80049dc:	46020800 	.word	0x46020800

080049e0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	4a04      	ldr	r2, [pc, #16]	; (80049fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6113      	str	r3, [r2, #16]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	46020800 	.word	0x46020800

08004a00 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a0e:	6113      	str	r3, [r2, #16]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	46020800 	.word	0x46020800

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d102      	bne.n	8004a3a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f000 bec3 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b99      	ldr	r3, [pc, #612]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8172 	beq.w	8004d40 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_RCC_OscConfig+0x52>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	f040 80e4 	bne.w	8004c32 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 80e0 	bne.w	8004c32 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a72:	4b8e      	ldr	r3, [pc, #568]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <HAL_RCC_OscConfig+0x6c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f000 be9a 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a90:	4b86      	ldr	r3, [pc, #536]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x86>
 8004a9c:	4b83      	ldr	r3, [pc, #524]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004aa4:	e005      	b.n	8004ab2 <HAL_RCC_OscConfig+0x92>
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d255      	bcs.n	8004b62 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fa0b 	bl	8005edc <RCC_SetFlashLatencyFromMSIRange>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f000 be77 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ad2:	4b76      	ldr	r3, [pc, #472]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	4a75      	ldr	r2, [pc, #468]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	4b73      	ldr	r3, [pc, #460]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	4970      	ldr	r1, [pc, #448]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004af8:	d309      	bcc.n	8004b0e <HAL_RCC_OscConfig+0xee>
 8004afa:	4b6c      	ldr	r3, [pc, #432]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 021f 	bic.w	r2, r3, #31
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4969      	ldr	r1, [pc, #420]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e07e      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da0a      	bge.n	8004b2c <HAL_RCC_OscConfig+0x10c>
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	015b      	lsls	r3, r3, #5
 8004b24:	4961      	ldr	r1, [pc, #388]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60cb      	str	r3, [r1, #12]
 8004b2a:	e06f      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d30a      	bcc.n	8004b4c <HAL_RCC_OscConfig+0x12c>
 8004b36:	4b5d      	ldr	r3, [pc, #372]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4959      	ldr	r1, [pc, #356]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60cb      	str	r3, [r1, #12]
 8004b4a:	e05f      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
 8004b4c:	4b57      	ldr	r3, [pc, #348]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	03db      	lsls	r3, r3, #15
 8004b5a:	4954      	ldr	r1, [pc, #336]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60cb      	str	r3, [r1, #12]
 8004b60:	e054      	b.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b62:	4b52      	ldr	r3, [pc, #328]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4a51      	ldr	r2, [pc, #324]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b6c:	6093      	str	r3, [r2, #8]
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	494c      	ldr	r1, [pc, #304]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b88:	d309      	bcc.n	8004b9e <HAL_RCC_OscConfig+0x17e>
 8004b8a:	4b48      	ldr	r3, [pc, #288]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 021f 	bic.w	r2, r3, #31
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4945      	ldr	r1, [pc, #276]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
 8004b9c:	e028      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1d0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da0a      	bge.n	8004bbc <HAL_RCC_OscConfig+0x19c>
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	015b      	lsls	r3, r3, #5
 8004bb4:	493d      	ldr	r1, [pc, #244]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
 8004bba:	e019      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1d0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d30a      	bcc.n	8004bdc <HAL_RCC_OscConfig+0x1bc>
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	4935      	ldr	r1, [pc, #212]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
 8004bda:	e009      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1d0>
 8004bdc:	4b33      	ldr	r3, [pc, #204]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	03db      	lsls	r3, r3, #15
 8004bea:	4930      	ldr	r1, [pc, #192]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 f96e 	bl	8005edc <RCC_SetFlashLatencyFromMSIRange>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f000 bdda 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004c0c:	f001 f8d8 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_OscConfig+0x290>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd f9c3 	bl	8001fa0 <HAL_InitTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 808a 	beq.w	8004d3e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2e:	f000 bdc7 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d066      	beq.n	8004d08 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c46:	f7fd fbdf 	bl	8002408 <HAL_GetTick>
 8004c4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c4c:	e009      	b.n	8004c62 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c4e:	f7fd fbdb 	bl	8002408 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d902      	bls.n	8004c62 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	f000 bdaf 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ef      	beq.n	8004c4e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c78:	6093      	str	r3, [r2, #8]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	4909      	ldr	r1, [pc, #36]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004c94:	d30e      	bcc.n	8004cb4 <HAL_RCC_OscConfig+0x294>
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f023 021f 	bic.w	r2, r3, #31
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4902      	ldr	r1, [pc, #8]	; (8004cac <HAL_RCC_OscConfig+0x28c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60cb      	str	r3, [r1, #12]
 8004ca8:	e04a      	b.n	8004d40 <HAL_RCC_OscConfig+0x320>
 8004caa:	bf00      	nop
 8004cac:	46020c00 	.word	0x46020c00
 8004cb0:	2002580c 	.word	0x2002580c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da0a      	bge.n	8004cd2 <HAL_RCC_OscConfig+0x2b2>
 8004cbc:	4b9b      	ldr	r3, [pc, #620]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	015b      	lsls	r3, r3, #5
 8004cca:	4998      	ldr	r1, [pc, #608]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60cb      	str	r3, [r1, #12]
 8004cd0:	e036      	b.n	8004d40 <HAL_RCC_OscConfig+0x320>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d30a      	bcc.n	8004cf2 <HAL_RCC_OscConfig+0x2d2>
 8004cdc:	4b93      	ldr	r3, [pc, #588]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	4990      	ldr	r1, [pc, #576]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60cb      	str	r3, [r1, #12]
 8004cf0:	e026      	b.n	8004d40 <HAL_RCC_OscConfig+0x320>
 8004cf2:	4b8e      	ldr	r3, [pc, #568]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	03db      	lsls	r3, r3, #15
 8004d00:	498a      	ldr	r1, [pc, #552]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
 8004d06:	e01b      	b.n	8004d40 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004d08:	4b88      	ldr	r3, [pc, #544]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a87      	ldr	r2, [pc, #540]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d14:	f7fd fb78 	bl	8002408 <HAL_GetTick>
 8004d18:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004d1a:	e009      	b.n	8004d30 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d1c:	f7fd fb74 	bl	8002408 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d902      	bls.n	8004d30 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	f000 bd48 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004d30:	4b7e      	ldr	r3, [pc, #504]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ef      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
 8004d3c:	e000      	b.n	8004d40 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8094 	beq.w	8004e76 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_OscConfig+0x340>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d110      	bne.n	8004d7c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	4b72      	ldr	r3, [pc, #456]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8083 	beq.w	8004e74 <HAL_RCC_OscConfig+0x454>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d17e      	bne.n	8004e74 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f000 bd22 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d106      	bne.n	8004d94 <HAL_RCC_OscConfig+0x374>
 8004d86:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a68      	ldr	r2, [pc, #416]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e041      	b.n	8004e18 <HAL_RCC_OscConfig+0x3f8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x3a4>
 8004d9e:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a62      	ldr	r2, [pc, #392]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	4b60      	ldr	r3, [pc, #384]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5f      	ldr	r2, [pc, #380]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004db0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e029      	b.n	8004e18 <HAL_RCC_OscConfig+0x3f8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3d4>
 8004dce:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b54      	ldr	r3, [pc, #336]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a53      	ldr	r2, [pc, #332]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b51      	ldr	r3, [pc, #324]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e011      	b.n	8004e18 <HAL_RCC_OscConfig+0x3f8>
 8004df4:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a4c      	ldr	r2, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a49      	ldr	r2, [pc, #292]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a46      	ldr	r2, [pc, #280]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d014      	beq.n	8004e4a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004e20:	f7fd faf2 	bl	8002408 <HAL_GetTick>
 8004e24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e26:	e009      	b.n	8004e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd faee 	bl	8002408 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d902      	bls.n	8004e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	f000 bcc2 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3c:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <HAL_RCC_OscConfig+0x408>
 8004e48:	e015      	b.n	8004e76 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004e4a:	f7fd fadd 	bl	8002408 <HAL_GetTick>
 8004e4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e50:	e009      	b.n	8004e66 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e52:	f7fd fad9 	bl	8002408 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	; 0x64
 8004e5e:	d902      	bls.n	8004e66 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	f000 bcad 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1ef      	bne.n	8004e52 <HAL_RCC_OscConfig+0x432>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d066      	beq.n	8004f50 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x474>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d117      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d006      	beq.n	8004eae <HAL_RCC_OscConfig+0x48e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f000 bc89 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	491b      	ldr	r1, [pc, #108]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec2:	e045      	b.n	8004f50 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d024      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ed8:	f7fd fa96 	bl	8002408 <HAL_GetTick>
 8004edc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ede:	e009      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7fd fa92 	bl	8002408 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d902      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	f000 bc66 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ef      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	4907      	ldr	r1, [pc, #28]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	610b      	str	r3, [r1, #16]
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004f16:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_RCC_OscConfig+0x50c>)
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f22:	f7fd fa71 	bl	8002408 <HAL_GetTick>
 8004f26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f28:	e00c      	b.n	8004f44 <HAL_RCC_OscConfig+0x524>
 8004f2a:	bf00      	nop
 8004f2c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fd fa6a 	bl	8002408 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d902      	bls.n	8004f44 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	f000 bc3e 	b.w	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f44:	4baf      	ldr	r3, [pc, #700]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ef      	bne.n	8004f30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80c7 	beq.w	80050ec <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f64:	4ba7      	ldr	r3, [pc, #668]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d111      	bne.n	8004f96 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f72:	4ba4      	ldr	r3, [pc, #656]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f78:	4aa2      	ldr	r2, [pc, #648]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f82:	4ba0      	ldr	r3, [pc, #640]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f96:	4b9c      	ldr	r3, [pc, #624]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d118      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004fa2:	4b99      	ldr	r3, [pc, #612]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	4a98      	ldr	r2, [pc, #608]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7fd fa2b 	bl	8002408 <HAL_GetTick>
 8004fb2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb6:	f7fd fa27 	bl	8002408 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e3fb      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05f      	beq.n	800509c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004fdc:	4b89      	ldr	r3, [pc, #548]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8004fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d037      	beq.n	8005062 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d006      	beq.n	800500a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e3da      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8005014:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800501a:	4a7a      	ldr	r2, [pc, #488]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800501c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005020:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005024:	f7fd f9f0 	bl	8002408 <HAL_GetTick>
 8005028:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502c:	f7fd f9ec 	bl	8002408 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e3c0      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800503e:	4b71      	ldr	r3, [pc, #452]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ef      	bne.n	800502c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800504c:	4b6d      	ldr	r3, [pc, #436]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800504e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	496a      	ldr	r1, [pc, #424]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005062:	4b68      	ldr	r3, [pc, #416]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005068:	4a66      	ldr	r2, [pc, #408]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800506a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005072:	f7fd f9c9 	bl	8002408 <HAL_GetTick>
 8005076:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507a:	f7fd f9c5 	bl	8002408 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e399      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800508c:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800508e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ef      	beq.n	800507a <HAL_RCC_OscConfig+0x65a>
 800509a:	e01b      	b.n	80050d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800509e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050a2:	4a58      	ldr	r2, [pc, #352]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80050a4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80050a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80050ac:	f7fd f9ac 	bl	8002408 <HAL_GetTick>
 80050b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b4:	f7fd f9a8 	bl	8002408 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e37c      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80050c6:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80050c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ef      	bne.n	80050b4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050dc:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80050de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e2:	4a48      	ldr	r2, [pc, #288]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8112 	beq.w	800531e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005100:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d111      	bne.n	8005132 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005114:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005116:	f043 0304 	orr.w	r3, r3, #4
 800511a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d118      	bne.n	8005170 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	4a31      	ldr	r2, [pc, #196]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fd f95d 	bl	8002408 <HAL_GetTick>
 800514e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005152:	f7fd f959 	bl	8002408 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e32d      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCC_OscConfig+0x7e8>)
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01f      	beq.n	80051bc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800518e:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 800519a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800519e:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051a8:	e018      	b.n	80051dc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051ba:	e00f      	b.n	80051dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d2:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <HAL_RCC_OscConfig+0x7e4>)
 80051d4:	f023 0304 	bic.w	r3, r3, #4
 80051d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d058      	beq.n	8005296 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80051e4:	f7fd f910 	bl	8002408 <HAL_GetTick>
 80051e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ea:	e00f      	b.n	800520c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fd f90c 	bl	8002408 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d906      	bls.n	800520c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e2de      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
 8005202:	bf00      	nop
 8005204:	46020c00 	.word	0x46020c00
 8005208:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	4b9c      	ldr	r3, [pc, #624]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800520e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0e8      	beq.n	80051ec <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005226:	4b96      	ldr	r3, [pc, #600]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800522c:	4a94      	ldr	r2, [pc, #592]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005236:	e00a      	b.n	800524e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7fd f8e6 	bl	8002408 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e2b8      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800524e:	4b8c      	ldr	r3, [pc, #560]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ed      	beq.n	8005238 <HAL_RCC_OscConfig+0x818>
 800525c:	e053      	b.n	8005306 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800525e:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005264:	4a86      	ldr	r2, [pc, #536]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fd f8ca 	bl	8002408 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e29c      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005286:	4b7e      	ldr	r3, [pc, #504]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800528c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ed      	bne.n	8005270 <HAL_RCC_OscConfig+0x850>
 8005294:	e037      	b.n	8005306 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005296:	f7fd f8b7 	bl	8002408 <HAL_GetTick>
 800529a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fd f8b3 	bl	8002408 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e285      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b4:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80052b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ed      	bne.n	800529e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80052c2:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80052c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01a      	beq.n	8005306 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052d0:	4b6b      	ldr	r3, [pc, #428]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80052d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052d6:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80052d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fd f891 	bl	8002408 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e263      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052f8:	4b61      	ldr	r3, [pc, #388]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ed      	bne.n	80052e2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005314:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d036      	beq.n	8005398 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005332:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800533c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800533e:	f7fd f863 	bl	8002408 <HAL_GetTick>
 8005342:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005346:	f7fd f85f 	bl	8002408 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e233      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005358:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f0      	beq.n	8005346 <HAL_RCC_OscConfig+0x926>
 8005364:	e018      	b.n	8005398 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a45      	ldr	r2, [pc, #276]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800536c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005370:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005372:	f7fd f849 	bl	8002408 <HAL_GetTick>
 8005376:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800537a:	f7fd f845 	bl	8002408 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e219      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d036      	beq.n	8005412 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80053ac:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a33      	ldr	r2, [pc, #204]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053b8:	f7fd f826 	bl	8002408 <HAL_GetTick>
 80053bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80053c0:	f7fd f822 	bl	8002408 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e1f6      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x9a0>
 80053de:	e018      	b.n	8005412 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a26      	ldr	r2, [pc, #152]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053ec:	f7fd f80c 	bl	8002408 <HAL_GetTick>
 80053f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80053f4:	f7fd f808 	bl	8002408 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e1dc      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d07f      	beq.n	800551e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d062      	beq.n	80054ec <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005426:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4a15      	ldr	r2, [pc, #84]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800542c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005430:	6093      	str	r3, [r2, #8]
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	4910      	ldr	r1, [pc, #64]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800544c:	d309      	bcc.n	8005462 <HAL_RCC_OscConfig+0xa42>
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f023 021f 	bic.w	r2, r3, #31
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4909      	ldr	r1, [pc, #36]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800545c:	4313      	orrs	r3, r2
 800545e:	60cb      	str	r3, [r1, #12]
 8005460:	e02a      	b.n	80054b8 <HAL_RCC_OscConfig+0xa98>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	da0c      	bge.n	8005484 <HAL_RCC_OscConfig+0xa64>
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	015b      	lsls	r3, r3, #5
 8005478:	4901      	ldr	r1, [pc, #4]	; (8005480 <HAL_RCC_OscConfig+0xa60>)
 800547a:	4313      	orrs	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
 800547e:	e01b      	b.n	80054b8 <HAL_RCC_OscConfig+0xa98>
 8005480:	46020c00 	.word	0x46020c00
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d30a      	bcc.n	80054a4 <HAL_RCC_OscConfig+0xa84>
 800548e:	4ba5      	ldr	r3, [pc, #660]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	49a1      	ldr	r1, [pc, #644]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	60cb      	str	r3, [r1, #12]
 80054a2:	e009      	b.n	80054b8 <HAL_RCC_OscConfig+0xa98>
 80054a4:	4b9f      	ldr	r3, [pc, #636]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	03db      	lsls	r3, r3, #15
 80054b2:	499c      	ldr	r1, [pc, #624]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80054b8:	4b9a      	ldr	r3, [pc, #616]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a99      	ldr	r2, [pc, #612]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054be:	f043 0310 	orr.w	r3, r3, #16
 80054c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054c4:	f7fc ffa0 	bl	8002408 <HAL_GetTick>
 80054c8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80054cc:	f7fc ff9c 	bl	8002408 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e170      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80054de:	4b91      	ldr	r3, [pc, #580]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0xaac>
 80054ea:	e018      	b.n	800551e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80054ec:	4b8d      	ldr	r3, [pc, #564]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a8c      	ldr	r2, [pc, #560]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054f8:	f7fc ff86 	bl	8002408 <HAL_GetTick>
 80054fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005500:	f7fc ff82 	bl	8002408 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e156      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005512:	4b84      	ldr	r3, [pc, #528]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 814b 	beq.w	80057be <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800552e:	4b7d      	ldr	r3, [pc, #500]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b0c      	cmp	r3, #12
 8005538:	f000 80fa 	beq.w	8005730 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	2b02      	cmp	r3, #2
 8005542:	f040 80cc 	bne.w	80056de <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b77      	ldr	r3, [pc, #476]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a76      	ldr	r2, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800554c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005550:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005552:	f7fc ff59 	bl	8002408 <HAL_GetTick>
 8005556:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555a:	f7fc ff55 	bl	8002408 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e129      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800556c:	4b6d      	ldr	r3, [pc, #436]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005578:	4b6a      	ldr	r3, [pc, #424]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d111      	bne.n	80055aa <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b67      	ldr	r3, [pc, #412]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005596:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80055aa:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <HAL_RCC_OscConfig+0xd08>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b6:	d102      	bne.n	80055be <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80055be:	4b5a      	ldr	r3, [pc, #360]	; (8005728 <HAL_RCC_OscConfig+0xd08>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4a59      	ldr	r2, [pc, #356]	; (8005728 <HAL_RCC_OscConfig+0xd08>)
 80055c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80055ca:	4b56      	ldr	r3, [pc, #344]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055de:	3a01      	subs	r2, #1
 80055e0:	0212      	lsls	r2, r2, #8
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055e8:	430a      	orrs	r2, r1
 80055ea:	494e      	ldr	r1, [pc, #312]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	628b      	str	r3, [r1, #40]	; 0x28
 80055f0:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80055f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f4:	4b4d      	ldr	r3, [pc, #308]	; (800572c <HAL_RCC_OscConfig+0xd0c>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055fc:	3a01      	subs	r2, #1
 80055fe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005606:	3a01      	subs	r2, #1
 8005608:	0252      	lsls	r2, r2, #9
 800560a:	b292      	uxth	r2, r2
 800560c:	4311      	orrs	r1, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005612:	3a01      	subs	r2, #1
 8005614:	0412      	lsls	r2, r2, #16
 8005616:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005620:	3a01      	subs	r2, #1
 8005622:	0612      	lsls	r2, r2, #24
 8005624:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005628:	430a      	orrs	r2, r1
 800562a:	493e      	ldr	r1, [pc, #248]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800562c:	4313      	orrs	r3, r2
 800562e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005630:	4b3c      	ldr	r3, [pc, #240]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	4a3b      	ldr	r2, [pc, #236]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005636:	f023 0310 	bic.w	r3, r3, #16
 800563a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005644:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800564c:	00d2      	lsls	r2, r2, #3
 800564e:	4935      	ldr	r1, [pc, #212]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005650:	4313      	orrs	r3, r2
 8005652:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005654:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	4a32      	ldr	r2, [pc, #200]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800565a:	f043 0310 	orr.w	r3, r3, #16
 800565e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f023 020c 	bic.w	r2, r3, #12
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	492d      	ldr	r1, [pc, #180]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 800566e:	4313      	orrs	r3, r2
 8005670:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_OscConfig+0xd08>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <HAL_RCC_OscConfig+0xd08>)
 8005680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005684:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005686:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800568a:	2b01      	cmp	r3, #1
 800568c:	d107      	bne.n	800569e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005696:	f023 0304 	bic.w	r3, r3, #4
 800569a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	4a20      	ldr	r2, [pc, #128]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80056b6:	f7fc fea7 	bl	8002408 <HAL_GetTick>
 80056ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056be:	f7fc fea3 	bl	8002408 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e077      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0xc9e>
 80056dc:	e06f      	b.n	80057be <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 80056e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80056ea:	f7fc fe8d 	bl	8002408 <HAL_GetTick>
 80056ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f2:	f7fc fe89 	bl	8002408 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e05d      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	4a03      	ldr	r2, [pc, #12]	; (8005724 <HAL_RCC_OscConfig+0xd04>)
 8005716:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	6293      	str	r3, [r2, #40]	; 0x28
 8005720:	e04d      	b.n	80057be <HAL_RCC_OscConfig+0xd9e>
 8005722:	bf00      	nop
 8005724:	46020c00 	.word	0x46020c00
 8005728:	46020800 	.word	0x46020800
 800572c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005730:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <HAL_RCC_OscConfig+0xda8>)
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <HAL_RCC_OscConfig+0xda8>)
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	2b01      	cmp	r3, #1
 8005742:	d03a      	beq.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0203 	and.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d133      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d12a      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	0b1b      	lsrs	r3, r3, #12
 8005768:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d122      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d11a      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	0a5b      	lsrs	r3, r3, #9
 8005788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d111      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d108      	bne.n	80057ba <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3738      	adds	r7, #56	; 0x38
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	46020c00 	.word	0x46020c00

080057cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e1d9      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057e0:	4b9b      	ldr	r3, [pc, #620]	; (8005a50 <HAL_RCC_ClockConfig+0x284>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d910      	bls.n	8005810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b98      	ldr	r3, [pc, #608]	; (8005a50 <HAL_RCC_ClockConfig+0x284>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 020f 	bic.w	r2, r3, #15
 80057f6:	4996      	ldr	r1, [pc, #600]	; (8005a50 <HAL_RCC_ClockConfig+0x284>)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b94      	ldr	r3, [pc, #592]	; (8005a50 <HAL_RCC_ClockConfig+0x284>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d001      	beq.n	8005810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e1c1      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	4b8c      	ldr	r3, [pc, #560]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005828:	429a      	cmp	r2, r3
 800582a:	d908      	bls.n	800583e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800582c:	4b89      	ldr	r3, [pc, #548]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	4986      	ldr	r1, [pc, #536]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800583a:	4313      	orrs	r3, r2
 800583c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	4b81      	ldr	r3, [pc, #516]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005858:	429a      	cmp	r2, r3
 800585a:	d909      	bls.n	8005870 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800585c:	4b7d      	ldr	r3, [pc, #500]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	497a      	ldr	r1, [pc, #488]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800586c:	4313      	orrs	r3, r2
 800586e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d010      	beq.n	800589e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	4b74      	ldr	r3, [pc, #464]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005888:	429a      	cmp	r2, r3
 800588a:	d908      	bls.n	800589e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800588c:	4b71      	ldr	r3, [pc, #452]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	496e      	ldr	r1, [pc, #440]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 800589a:	4313      	orrs	r3, r2
 800589c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b69      	ldr	r3, [pc, #420]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d908      	bls.n	80058cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80058ba:	4b66      	ldr	r3, [pc, #408]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 020f 	bic.w	r2, r3, #15
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	4963      	ldr	r1, [pc, #396]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80d2 	beq.w	8005a7e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d143      	bne.n	800596e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e6:	4b5b      	ldr	r3, [pc, #364]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80058f4:	4b57      	ldr	r3, [pc, #348]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fa:	4a56      	ldr	r2, [pc, #344]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005904:	4b53      	ldr	r3, [pc, #332]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005912:	2301      	movs	r3, #1
 8005914:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005916:	f7fc fd77 	bl	8002408 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800591c:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <HAL_RCC_ClockConfig+0x28c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800592a:	f7fc fd6d 	bl	8002408 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e12b      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800593c:	4b46      	ldr	r3, [pc, #280]	; (8005a58 <HAL_RCC_ClockConfig+0x28c>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800594e:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005954:	4a3f      	ldr	r2, [pc, #252]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005956:	f023 0304 	bic.w	r3, r3, #4
 800595a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800595e:	4b3d      	ldr	r3, [pc, #244]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d121      	bne.n	80059ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e112      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005976:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e106      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800598e:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0fa      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800599e:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e0f2      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b29      	ldr	r3, [pc, #164]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4926      	ldr	r1, [pc, #152]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80059c0:	f7fc fd22 	bl	8002408 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d112      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d0:	f7fc fd1a 	bl	8002408 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0d6      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059e6:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b0c      	cmp	r3, #12
 80059f0:	d1ee      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x204>
 80059f2:	e044      	b.n	8005a7e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d112      	bne.n	8005a22 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fe:	f7fc fd03 	bl	8002408 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0bf      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d1ee      	bne.n	80059fe <HAL_RCC_ClockConfig+0x232>
 8005a20:	e02d      	b.n	8005a7e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d123      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7fc fcec 	bl	8002408 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0a8      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <HAL_RCC_ClockConfig+0x288>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ee      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x260>
 8005a4e:	e016      	b.n	8005a7e <HAL_RCC_ClockConfig+0x2b2>
 8005a50:	40022000 	.word	0x40022000
 8005a54:	46020c00 	.word	0x46020c00
 8005a58:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fc fcd4 	bl	8002408 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e090      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a72:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d1ee      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	4b43      	ldr	r3, [pc, #268]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d208      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a9a:	4b40      	ldr	r3, [pc, #256]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f023 020f 	bic.w	r2, r3, #15
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	493d      	ldr	r1, [pc, #244]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aac:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <HAL_RCC_ClockConfig+0x3d4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d210      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b39      	ldr	r3, [pc, #228]	; (8005ba0 <HAL_RCC_ClockConfig+0x3d4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	4937      	ldr	r1, [pc, #220]	; (8005ba0 <HAL_RCC_ClockConfig+0x3d4>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <HAL_RCC_ClockConfig+0x3d4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e05b      	b.n	8005b94 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d208      	bcs.n	8005b0a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005af8:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4925      	ldr	r1, [pc, #148]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d012      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d209      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005b28:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4919      	ldr	r1, [pc, #100]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d010      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d208      	bcs.n	8005b6a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	490d      	ldr	r1, [pc, #52]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b6a:	f000 f821 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_RCC_ClockConfig+0x3d0>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	490a      	ldr	r1, [pc, #40]	; (8005ba4 <HAL_RCC_ClockConfig+0x3d8>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <HAL_RCC_ClockConfig+0x3dc>)
 8005b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_ClockConfig+0x3e0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fc fa09 	bl	8001fa0 <HAL_InitTick>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	08028948 	.word	0x08028948
 8005ba8:	20025808 	.word	0x20025808
 8005bac:	2002580c 	.word	0x2002580c

08005bb0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b08b      	sub	sp, #44	; 0x2c
 8005bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bbe:	4b7b      	ldr	r3, [pc, #492]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bc8:	4b78      	ldr	r3, [pc, #480]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d121      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d11e      	bne.n	8005c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005be4:	4b71      	ldr	r3, [pc, #452]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005bf0:	4b6e      	ldr	r3, [pc, #440]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf6:	0b1b      	lsrs	r3, r3, #12
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005c00:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	0f1b      	lsrs	r3, r3, #28
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c0c:	4a68      	ldr	r2, [pc, #416]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c20:	e00d      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c22:	4b62      	ldr	r3, [pc, #392]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d102      	bne.n	8005c34 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c2e:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	e004      	b.n	8005c3e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c3a:	4b5e      	ldr	r3, [pc, #376]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	f040 80ac 	bne.w	8005d9e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005c50:	4b56      	ldr	r3, [pc, #344]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c5e:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c6a:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8086 	beq.w	8005d9a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d003      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0xec>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x130>
 8005c9a:	e043      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005db8 <HAL_RCC_GetSysClockFreq+0x208>
 8005caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cae:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cbe:	ed97 6a01 	vldr	s12, [r7, #4]
 8005cc2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005dbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005cde:	e046      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005db8 <HAL_RCC_GetSysClockFreq+0x208>
 8005cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d02:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d06:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005dbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005d22:	e024      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d4c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005d50:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005dbc <HAL_RCC_GetSysClockFreq+0x20c>
 8005d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d68:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005d6c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d78:	3301      	adds	r3, #1
 8005d7a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d92:	ee17 3a90 	vmov	r3, s15
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	e001      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	372c      	adds	r7, #44	; 0x2c
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	46020c00 	.word	0x46020c00
 8005db0:	08028960 	.word	0x08028960
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	4b742400 	.word	0x4b742400
 8005dbc:	46000000 	.word	0x46000000

08005dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dc4:	f7ff fef4 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x28>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	4906      	ldr	r1, [pc, #24]	; (8005dec <HAL_RCC_GetHCLKFreq+0x2c>)
 8005dd4:	5ccb      	ldrb	r3, [r1, r3]
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	4a05      	ldr	r2, [pc, #20]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005ddc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005de0:	681b      	ldr	r3, [r3, #0]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	46020c00 	.word	0x46020c00
 8005dec:	08028948 	.word	0x08028948
 8005df0:	20025808 	.word	0x20025808

08005df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005df8:	f7ff ffe2 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	4903      	ldr	r1, [pc, #12]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0a:	5ccb      	ldrb	r3, [r1, r3]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	46020c00 	.word	0x46020c00
 8005e18:	08028958 	.word	0x08028958

08005e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005e20:	f7ff ffce 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005e24:	4602      	mov	r2, r0
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	4903      	ldr	r1, [pc, #12]	; (8005e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e32:	5ccb      	ldrb	r3, [r1, r3]
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	46020c00 	.word	0x46020c00
 8005e40:	08028958 	.word	0x08028958

08005e44 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005e48:	f7ff ffba 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	091b      	lsrs	r3, r3, #4
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005e5a:	5ccb      	ldrb	r3, [r1, r3]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	46020c00 	.word	0x46020c00
 8005e68:	08028958 	.word	0x08028958

08005e6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	221f      	movs	r2, #31
 8005e7a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005e7c:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <HAL_RCC_GetClockConfig+0x68>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f003 0203 	and.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCC_GetClockConfig+0x68>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <HAL_RCC_GetClockConfig+0x68>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <HAL_RCC_GetClockConfig+0x68>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_GetClockConfig+0x68>)
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <HAL_RCC_GetClockConfig+0x6c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	46020c00 	.word	0x46020c00
 8005ed8:	40022000 	.word	0x40022000

08005edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ee4:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ef2:	f7fe fd17 	bl	8004924 <HAL_PWREx_GetVoltageRange>
 8005ef6:	6178      	str	r0, [r7, #20]
 8005ef8:	e019      	b.n	8005f2e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f00:	4a37      	ldr	r2, [pc, #220]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f02:	f043 0304 	orr.w	r3, r3, #4
 8005f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005f0a:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f18:	f7fe fd04 	bl	8004924 <HAL_PWREx_GetVoltageRange>
 8005f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f1e:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005f26:	f023 0304 	bic.w	r3, r3, #4
 8005f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f34:	d003      	beq.n	8005f3e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f3c:	d109      	bne.n	8005f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f44:	d202      	bcs.n	8005f4c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005f46:	2301      	movs	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f4a:	e033      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005f50:	e030      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f58:	d208      	bcs.n	8005f6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f60:	d102      	bne.n	8005f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005f62:	2303      	movs	r3, #3
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	e025      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e035      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f72:	d90f      	bls.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f80:	d902      	bls.n	8005f88 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e015      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005f88:	2301      	movs	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e012      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	e00f      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f9a:	d109      	bne.n	8005fb0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d102      	bne.n	8005faa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e004      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005faa:	2302      	movs	r3, #2
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e001      	b.n	8005fb4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f023 020f 	bic.w	r2, r3, #15
 8005fbc:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d001      	beq.n	8005fd6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	46020c00 	.word	0x46020c00
 8005fe4:	40022000 	.word	0x40022000

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b0ba      	sub	sp, #232	; 0xe8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f002 0401 	and.w	r4, r2, #1
 800600c:	2500      	movs	r5, #0
 800600e:	ea54 0305 	orrs.w	r3, r4, r5
 8006012:	d00b      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006014:	4bcb      	ldr	r3, [pc, #812]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800601a:	f023 0103 	bic.w	r1, r3, #3
 800601e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	4ac7      	ldr	r2, [pc, #796]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006026:	430b      	orrs	r3, r1
 8006028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800602c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0802 	and.w	r8, r2, #2
 8006038:	f04f 0900 	mov.w	r9, #0
 800603c:	ea58 0309 	orrs.w	r3, r8, r9
 8006040:	d00b      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006042:	4bc0      	ldr	r3, [pc, #768]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006048:	f023 010c 	bic.w	r1, r3, #12
 800604c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	4abc      	ldr	r2, [pc, #752]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006054:	430b      	orrs	r3, r1
 8006056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800605a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0a04 	and.w	sl, r2, #4
 8006066:	f04f 0b00 	mov.w	fp, #0
 800606a:	ea5a 030b 	orrs.w	r3, sl, fp
 800606e:	d00b      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006070:	4bb4      	ldr	r3, [pc, #720]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006076:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800607a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	4ab0      	ldr	r2, [pc, #704]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006082:	430b      	orrs	r3, r1
 8006084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006090:	f002 0308 	and.w	r3, r2, #8
 8006094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800609e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80060a2:	460b      	mov	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80060a8:	4ba6      	ldr	r3, [pc, #664]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	4aa2      	ldr	r2, [pc, #648]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 0310 	and.w	r3, r2, #16
 80060cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d00b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80060e0:	4b98      	ldr	r3, [pc, #608]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	4a94      	ldr	r2, [pc, #592]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f002 0320 	and.w	r3, r2, #32
 8006104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800610e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d00b      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006118:	4b8a      	ldr	r3, [pc, #552]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800611a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800611e:	f023 0107 	bic.w	r1, r3, #7
 8006122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	4a86      	ldr	r2, [pc, #536]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800612a:	430b      	orrs	r3, r1
 800612c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800613c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006146:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800614a:	460b      	mov	r3, r1
 800614c:	4313      	orrs	r3, r2
 800614e:	d00b      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006150:	4b7c      	ldr	r3, [pc, #496]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006156:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800615a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800615e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006160:	4a78      	ldr	r2, [pc, #480]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006162:	430b      	orrs	r3, r1
 8006164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800617e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d00b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006188:	4b6e      	ldr	r3, [pc, #440]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800618e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006198:	4a6a      	ldr	r2, [pc, #424]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619a:	430b      	orrs	r3, r1
 800619c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80061ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4313      	orrs	r3, r2
 80061be:	d00b      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80061c0:	4b60      	ldr	r3, [pc, #384]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	4a5c      	ldr	r2, [pc, #368]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00b      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80061f8:	4b52      	ldr	r3, [pc, #328]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fe:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006208:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620a:	430b      	orrs	r3, r1
 800620c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800621c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006220:	2300      	movs	r3, #0
 8006222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006226:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800622a:	460b      	mov	r3, r1
 800622c:	4313      	orrs	r3, r2
 800622e:	d00b      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006230:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006236:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800623a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800623e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006240:	4a40      	ldr	r2, [pc, #256]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006242:	430b      	orrs	r3, r1
 8006244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006258:	2300      	movs	r3, #0
 800625a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800625e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006262:	460b      	mov	r3, r1
 8006264:	4313      	orrs	r3, r2
 8006266:	d00b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006268:	4b36      	ldr	r3, [pc, #216]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800626a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800626e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006278:	4a32      	ldr	r2, [pc, #200]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800627a:	430b      	orrs	r3, r1
 800627c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800628c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006290:	2300      	movs	r3, #0
 8006292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006296:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800629a:	460b      	mov	r3, r1
 800629c:	4313      	orrs	r3, r2
 800629e:	d00c      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b2:	4a24      	ldr	r2, [pc, #144]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80062c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80062c8:	2300      	movs	r3, #0
 80062ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062d0:	460b      	mov	r3, r1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d04f      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d02d      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d827      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062e6:	2b60      	cmp	r3, #96	; 0x60
 80062e8:	d02e      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062ea:	2b60      	cmp	r3, #96	; 0x60
 80062ec:	d823      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d006      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d81f      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x326>
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d011      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80062fe:	e01a      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006304:	4a0f      	ldr	r2, [pc, #60]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800630c:	e01d      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006312:	3308      	adds	r3, #8
 8006314:	4618      	mov	r0, r3
 8006316:	f002 f981 	bl	800861c <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006320:	e013      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006326:	332c      	adds	r3, #44	; 0x2c
 8006328:	4618      	mov	r0, r3
 800632a:	f002 fa0f 	bl	800874c <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006334:	e009      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800633c:	e005      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800633e:	bf00      	nop
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006342:	bf00      	nop
 8006344:	46020c00 	.word	0x46020c00
        break;
 8006348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006352:	4bb6      	ldr	r3, [pc, #728]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006354:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006358:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800635c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	4ab1      	ldr	r2, [pc, #708]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006366:	430b      	orrs	r3, r1
 8006368:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800636c:	e003      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006372:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006382:	673b      	str	r3, [r7, #112]	; 0x70
 8006384:	2300      	movs	r3, #0
 8006386:	677b      	str	r3, [r7, #116]	; 0x74
 8006388:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d053      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d033      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a4:	d82c      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063aa:	d02f      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80063ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b0:	d826      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063bc:	d820      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d011      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x404>
 80063c8:	e01a      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063ca:	4b98      	ldr	r3, [pc, #608]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	4a97      	ldr	r2, [pc, #604]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063d6:	e01a      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063dc:	3308      	adds	r3, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f002 f91c 	bl	800861c <RCCEx_PLL2_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063ea:	e010      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f0:	332c      	adds	r3, #44	; 0x2c
 80063f2:	4618      	mov	r0, r3
 80063f4:	f002 f9aa 	bl	800874c <RCCEx_PLL3_Config>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063fe:	e006      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006406:	e002      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800640c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006416:	4b85      	ldr	r3, [pc, #532]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006418:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800641c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006420:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006428:	4a80      	ldr	r2, [pc, #512]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800642a:	430b      	orrs	r3, r1
 800642c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006432:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006436:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800643a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006446:	66bb      	str	r3, [r7, #104]	; 0x68
 8006448:	2300      	movs	r3, #0
 800644a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800644c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d046      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800645a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800645e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006462:	d028      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006464:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006468:	d821      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800646a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800646e:	d022      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006474:	d81b      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800647a:	d01c      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800647c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006480:	d815      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006486:	d008      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648c:	d80f      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d00e      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006498:	e009      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800649a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649e:	3308      	adds	r3, #8
 80064a0:	4618      	mov	r0, r3
 80064a2:	f002 f8bb 	bl	800861c <RCCEx_PLL2_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064b4:	e000      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80064b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80064c0:	4b5a      	ldr	r3, [pc, #360]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064c6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80064ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064d2:	4a56      	ldr	r2, [pc, #344]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80064e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
 80064f2:	2300      	movs	r3, #0
 80064f4:	667b      	str	r3, [r7, #100]	; 0x64
 80064f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d03f      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	2b04      	cmp	r3, #4
 800650a:	d81e      	bhi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006553 	.word	0x08006553
 8006518:	08006529 	.word	0x08006529
 800651c:	08006537 	.word	0x08006537
 8006520:	08006553 	.word	0x08006553
 8006524:	08006553 	.word	0x08006553
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006528:	4b40      	ldr	r3, [pc, #256]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	4a3f      	ldr	r2, [pc, #252]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800652e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006532:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006534:	e00e      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800653a:	332c      	adds	r3, #44	; 0x2c
 800653c:	4618      	mov	r0, r3
 800653e:	f002 f905 	bl	800874c <RCCEx_PLL3_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006548:	e004      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006552:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006554:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10d      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800655c:	4b33      	ldr	r3, [pc, #204]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800655e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006562:	f023 0107 	bic.w	r1, r3, #7
 8006566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	4a2f      	ldr	r2, [pc, #188]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006570:	430b      	orrs	r3, r1
 8006572:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006576:	e003      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006578:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800657c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800658c:	65bb      	str	r3, [r7, #88]	; 0x58
 800658e:	2300      	movs	r3, #0
 8006590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006592:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006596:	460b      	mov	r3, r1
 8006598:	4313      	orrs	r3, r2
 800659a:	d04d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800659c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a8:	d028      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x614>
 80065aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ae:	d821      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80065b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b4:	d024      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80065b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ba:	d81b      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80065bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c0:	d00e      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c6:	d815      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d110      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065d2:	4b16      	ldr	r3, [pc, #88]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80065de:	e012      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e4:	332c      	adds	r3, #44	; 0x2c
 80065e6:	4618      	mov	r0, r3
 80065e8:	f002 f8b0 	bl	800874c <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065f2:	e008      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065fa:	e004      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80065fc:	bf00      	nop
 80065fe:	e002      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006604:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006606:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d110      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006614:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006620:	4a02      	ldr	r2, [pc, #8]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006622:	430b      	orrs	r3, r1
 8006624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800662a:	bf00      	nop
 800662c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006634:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006644:	653b      	str	r3, [r7, #80]	; 0x50
 8006646:	2300      	movs	r3, #0
 8006648:	657b      	str	r3, [r7, #84]	; 0x54
 800664a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800664e:	460b      	mov	r3, r1
 8006650:	4313      	orrs	r3, r2
 8006652:	f000 80b5 	beq.w	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800665c:	4b9d      	ldr	r3, [pc, #628]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800665e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d113      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666a:	4b9a      	ldr	r3, [pc, #616]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800666c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006670:	4a98      	ldr	r2, [pc, #608]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006672:	f043 0304 	orr.w	r3, r3, #4
 8006676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800667a:	4b96      	ldr	r3, [pc, #600]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800667c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006692:	4b91      	ldr	r3, [pc, #580]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	4a90      	ldr	r2, [pc, #576]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800669e:	f7fb feb3 	bl	8002408 <HAL_GetTick>
 80066a2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066a6:	e00b      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a8:	f7fb feae 	bl	8002408 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d903      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066be:	e005      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066c0:	4b85      	ldr	r3, [pc, #532]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ed      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80066cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d165      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066d4:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d023      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80066ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01b      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066fa:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006708:	4b72      	ldr	r3, [pc, #456]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800670a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800670e:	4a71      	ldr	r2, [pc, #452]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006718:	4b6e      	ldr	r3, [pc, #440]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800671a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800671e:	4a6d      	ldr	r2, [pc, #436]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006724:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006728:	4a6a      	ldr	r2, [pc, #424]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d019      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fb fe63 	bl	8002408 <HAL_GetTick>
 8006742:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006746:	e00d      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006748:	f7fb fe5e 	bl	8002408 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	f241 3388 	movw	r3, #5000	; 0x1388
 8006758:	429a      	cmp	r2, r3
 800675a:	d903      	bls.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006762:	e006      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006764:	4b5b      	ldr	r3, [pc, #364]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ea      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006772:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800677a:	4b56      	ldr	r3, [pc, #344]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800677c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800678c:	4a51      	ldr	r2, [pc, #324]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800678e:	430b      	orrs	r3, r1
 8006790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006794:	e008      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006796:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800679a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067a8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b0:	4b48      	ldr	r3, [pc, #288]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b6:	4a47      	ldr	r2, [pc, #284]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067b8:	f023 0304 	bic.w	r3, r3, #4
 80067bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80067c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80067cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ce:	2300      	movs	r3, #0
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d042      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80067dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067e8:	d022      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80067ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067ee:	d81b      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80067f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x832>
 80067f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067fa:	d815      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d019      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006804:	d110      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680a:	3308      	adds	r3, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f001 ff05 	bl	800861c <RCCEx_PLL2_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006818:	e00d      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006824:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006826:	e006      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800682e:	e002      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006830:	bf00      	nop
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006834:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006836:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800683e:	4b25      	ldr	r3, [pc, #148]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006844:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006850:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006852:	430b      	orrs	r3, r1
 8006854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800685e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800686e:	643b      	str	r3, [r7, #64]	; 0x40
 8006870:	2300      	movs	r3, #0
 8006872:	647b      	str	r3, [r7, #68]	; 0x44
 8006874:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d032      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800687e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688a:	d00b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d804      	bhi.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d007      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80068ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80068ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d112      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80068b6:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c8:	4a02      	ldr	r2, [pc, #8]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068ca:	430b      	orrs	r3, r1
 80068cc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80068d0:	e008      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80068d2:	bf00      	nop
 80068d4:	46020c00 	.word	0x46020c00
 80068d8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d00c      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006900:	4b98      	ldr	r3, [pc, #608]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006902:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006906:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800690a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006912:	4a94      	ldr	r2, [pc, #592]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006914:	430b      	orrs	r3, r1
 8006916:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800691a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006926:	633b      	str	r3, [r7, #48]	; 0x30
 8006928:	2300      	movs	r3, #0
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
 800692c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d019      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800693a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800693e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006942:	d105      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006944:	4b87      	ldr	r3, [pc, #540]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	4a86      	ldr	r2, [pc, #536]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006950:	4b84      	ldr	r3, [pc, #528]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006952:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006956:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800695a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006962:	4a80      	ldr	r2, [pc, #512]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006964:	430b      	orrs	r3, r1
 8006966:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800696a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d00c      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006986:	4b77      	ldr	r3, [pc, #476]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006998:	4972      	ldr	r1, [pc, #456]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80069a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
 80069b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d00c      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80069bc:	4b69      	ldr	r3, [pc, #420]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069ce:	4965      	ldr	r1, [pc, #404]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80069d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069ec:	460b      	mov	r3, r1
 80069ee:	4313      	orrs	r3, r2
 80069f0:	d00c      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80069f2:	4b5c      	ldr	r3, [pc, #368]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069f8:	f023 0218 	bic.w	r2, r3, #24
 80069fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a04:	4957      	ldr	r1, [pc, #348]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a22:	460b      	mov	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	d032      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a34:	d105      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a36:	4b4b      	ldr	r3, [pc, #300]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a40:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a4e:	d108      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a54:	3308      	adds	r3, #8
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 fde0 	bl	800861c <RCCEx_PLL2_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006a62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006a6a:	4b3e      	ldr	r3, [pc, #248]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a7c:	4939      	ldr	r1, [pc, #228]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006a84:	e003      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a8a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006a9a:	60bb      	str	r3, [r7, #8]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d03a      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006abc:	d815      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d017      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac6:	d110      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac8:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ad4:	e00e      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ada:	3308      	adds	r3, #8
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fd9d 	bl	800861c <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ae8:	e004      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006af0:	e000      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006af2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006af4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10d      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0e:	4915      	ldr	r1, [pc, #84]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006b2c:	603b      	str	r3, [r7, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	607b      	str	r3, [r7, #4]
 8006b32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d00c      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b4e:	4905      	ldr	r1, [pc, #20]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006b56:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	37e8      	adds	r7, #232	; 0xe8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b64:	46020c00 	.word	0x46020c00

08006b68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b089      	sub	sp, #36	; 0x24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006b70:	4bac      	ldr	r3, [pc, #688]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b7a:	4baa      	ldr	r3, [pc, #680]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006b84:	4ba7      	ldr	r3, [pc, #668]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	3301      	adds	r3, #1
 8006b90:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006b92:	4ba4      	ldr	r3, [pc, #656]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b9c:	4ba1      	ldr	r3, [pc, #644]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8123 	beq.w	8006e06 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d062      	beq.n	8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	f200 8081 	bhi.w	8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d024      	beq.n	8006c1e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d17a      	bne.n	8006cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bec:	4b8d      	ldr	r3, [pc, #564]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c00:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c1c:	e08f      	b.n	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c1e:	4b81      	ldr	r3, [pc, #516]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006c2a:	4b7e      	ldr	r3, [pc, #504]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	0f1b      	lsrs	r3, r3, #28
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006c36:	4b7b      	ldr	r3, [pc, #492]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	0f1b      	lsrs	r3, r3, #28
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	4a7a      	ldr	r2, [pc, #488]	; (8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8a:	e058      	b.n	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b61      	ldr	r3, [pc, #388]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	e036      	b.n	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006cd0:	4b54      	ldr	r3, [pc, #336]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006cdc:	4b51      	ldr	r3, [pc, #324]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	0f1b      	lsrs	r3, r3, #28
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	e006      	b.n	8006cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006ce8:	4b4e      	ldr	r3, [pc, #312]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	0f1b      	lsrs	r3, r3, #28
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	4a4e      	ldr	r2, [pc, #312]	; (8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d20:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d3e:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d4a:	4b36      	ldr	r3, [pc, #216]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	0a5b      	lsrs	r3, r3, #9
 8006d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d60:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d70:	ee17 2a90 	vmov	r2, s15
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e002      	b.n	8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006d80:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d017      	beq.n	8006dbc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d8c:	4b25      	ldr	r3, [pc, #148]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006da2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db2:	ee17 2a90 	vmov	r2, s15
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	e002      	b.n	8006dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006dc2:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d017      	beq.n	8006dfe <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dce:	4b15      	ldr	r3, [pc, #84]	; (8006e24 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	0e1b      	lsrs	r3, r3, #24
 8006dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006de4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df4:	ee17 2a90 	vmov	r2, s15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	e008      	b.n	8006e18 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	3724      	adds	r7, #36	; 0x24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	46020c00 	.word	0x46020c00
 8006e28:	4b742400 	.word	0x4b742400
 8006e2c:	46000000 	.word	0x46000000
 8006e30:	08028960 	.word	0x08028960

08006e34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b089      	sub	sp, #36	; 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e3c:	4bac      	ldr	r3, [pc, #688]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e46:	4baa      	ldr	r3, [pc, #680]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006e50:	4ba7      	ldr	r3, [pc, #668]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	0a1b      	lsrs	r3, r3, #8
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006e5e:	4ba4      	ldr	r3, [pc, #656]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e68:	4ba1      	ldr	r3, [pc, #644]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e80:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8123 	beq.w	80070d2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d062      	beq.n	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	f200 8081 	bhi.w	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d024      	beq.n	8006eea <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d17a      	bne.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb0:	eddf 6a90 	vldr	s13, [pc, #576]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb8:	4b8d      	ldr	r3, [pc, #564]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ecc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee8:	e08f      	b.n	800700a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006eea:	4b81      	ldr	r3, [pc, #516]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006ef6:	4b7e      	ldr	r3, [pc, #504]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0f1b      	lsrs	r3, r3, #28
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006f02:	4b7b      	ldr	r3, [pc, #492]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	0f1b      	lsrs	r3, r3, #28
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	4a7a      	ldr	r2, [pc, #488]	; (80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f3a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f56:	e058      	b.n	800700a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a64 	vldr	s13, [pc, #400]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b61      	ldr	r3, [pc, #388]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9a:	e036      	b.n	800700a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006f9c:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006fa8:	4b51      	ldr	r3, [pc, #324]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	0f1b      	lsrs	r3, r3, #28
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006fb4:	4b4e      	ldr	r3, [pc, #312]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	0f1b      	lsrs	r3, r3, #28
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	4a4e      	ldr	r2, [pc, #312]	; (80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	ee07 3a90 	vmov	s15, r3
 8006fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fec:	eddf 5a42 	vldr	s11, [pc, #264]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007008:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800700a:	4b39      	ldr	r3, [pc, #228]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007016:	4b36      	ldr	r3, [pc, #216]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	0a5b      	lsrs	r3, r3, #9
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007020:	ee07 3a90 	vmov	s15, r3
 8007024:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800702c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007030:	edd7 6a07 	vldr	s13, [r7, #28]
 8007034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703c:	ee17 2a90 	vmov	r2, s15
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e002      	b.n	800704c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800704c:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007058:	4b25      	ldr	r3, [pc, #148]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800706a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007072:	edd7 6a07 	vldr	s13, [r7, #28]
 8007076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707e:	ee17 2a90 	vmov	r2, s15
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	e002      	b.n	800708e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80070ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c0:	ee17 2a90 	vmov	r2, s15
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c8:	e00c      	b.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	609a      	str	r2, [r3, #8]
}
 80070d0:	e008      	b.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	609a      	str	r2, [r3, #8]
}
 80070e4:	bf00      	nop
 80070e6:	3724      	adds	r7, #36	; 0x24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	46020c00 	.word	0x46020c00
 80070f4:	4b742400 	.word	0x4b742400
 80070f8:	46000000 	.word	0x46000000
 80070fc:	08028960 	.word	0x08028960

08007100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007108:	4bac      	ldr	r3, [pc, #688]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007112:	4baa      	ldr	r3, [pc, #680]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800711c:	4ba7      	ldr	r3, [pc, #668]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	3301      	adds	r3, #1
 8007128:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800712a:	4ba4      	ldr	r3, [pc, #656]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007134:	4ba1      	ldr	r3, [pc, #644]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007138:	08db      	lsrs	r3, r3, #3
 800713a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8123 	beq.w	800739e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d062      	beq.n	8007224 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b03      	cmp	r3, #3
 8007162:	f200 8081 	bhi.w	8007268 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d024      	beq.n	80071b6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d17a      	bne.n	8007268 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007184:	4b8d      	ldr	r3, [pc, #564]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007194:	ed97 6a02 	vldr	s12, [r7, #8]
 8007198:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800719c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80071ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80071b4:	e08f      	b.n	80072d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071b6:	4b81      	ldr	r3, [pc, #516]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80071c2:	4b7e      	ldr	r3, [pc, #504]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	0f1b      	lsrs	r3, r3, #28
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	e006      	b.n	80071dc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80071ce:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	0f1b      	lsrs	r3, r3, #28
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	4a7a      	ldr	r2, [pc, #488]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80071de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a02 	vldr	s12, [r7, #8]
 8007206:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007222:	e058      	b.n	80072d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b61      	ldr	r3, [pc, #388]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007246:	ed97 6a02 	vldr	s12, [r7, #8]
 800724a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007266:	e036      	b.n	80072d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007268:	4b54      	ldr	r3, [pc, #336]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007274:	4b51      	ldr	r3, [pc, #324]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	0f1b      	lsrs	r3, r3, #28
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	e006      	b.n	800728e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8007280:	4b4e      	ldr	r3, [pc, #312]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007286:	041b      	lsls	r3, r3, #16
 8007288:	0f1b      	lsrs	r3, r3, #28
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	4a4e      	ldr	r2, [pc, #312]	; (80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80072b8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80072bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80072cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072d4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072d6:	4b39      	ldr	r3, [pc, #228]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072e2:	4b36      	ldr	r3, [pc, #216]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	0a5b      	lsrs	r3, r3, #9
 80072e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007318:	4b28      	ldr	r3, [pc, #160]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d017      	beq.n	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007324:	4b25      	ldr	r3, [pc, #148]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800733e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734a:	ee17 2a90 	vmov	r2, s15
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e002      	b.n	800735a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800735a:	4b18      	ldr	r3, [pc, #96]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d017      	beq.n	8007396 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007366:	4b15      	ldr	r3, [pc, #84]	; (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	0e1b      	lsrs	r3, r3, #24
 800736c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007380:	edd7 6a07 	vldr	s13, [r7, #28]
 8007384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738c:	ee17 2a90 	vmov	r2, s15
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007394:	e00c      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
}
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	609a      	str	r2, [r3, #8]
}
 80073b0:	bf00      	nop
 80073b2:	3724      	adds	r7, #36	; 0x24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	46020c00 	.word	0x46020c00
 80073c0:	4b742400 	.word	0x4b742400
 80073c4:	46000000 	.word	0x46000000
 80073c8:	08028960 	.word	0x08028960

080073cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08e      	sub	sp, #56	; 0x38
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073da:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80073de:	430b      	orrs	r3, r1
 80073e0:	d145      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073e2:	4ba7      	ldr	r3, [pc, #668]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80073ee:	4ba4      	ldr	r3, [pc, #656]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d108      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007402:	d104      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
 800740a:	f001 b8fc 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800740e:	4b9c      	ldr	r3, [pc, #624]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800741c:	d114      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d110      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007426:	4b96      	ldr	r3, [pc, #600]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800742c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007434:	d103      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007436:	23fa      	movs	r3, #250	; 0xfa
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800743a:	f001 b8e4 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800743e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007444:	f001 b8df 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007448:	4b8d      	ldr	r3, [pc, #564]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007454:	d107      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745c:	d103      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800745e:	4b89      	ldr	r3, [pc, #548]	; (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
 8007462:	f001 b8d0 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
 800746a:	f001 b8cc 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800746e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007472:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007476:	430b      	orrs	r3, r1
 8007478:	d151      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800747a:	4b81      	ldr	r3, [pc, #516]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800747c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007480:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007484:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d035      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d841      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2b60      	cmp	r3, #96	; 0x60
 8007496:	d02a      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2b60      	cmp	r3, #96	; 0x60
 800749c:	d83b      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2b40      	cmp	r3, #64	; 0x40
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d835      	bhi.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d012      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80074b6:	e02e      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fb53 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c6:	f001 b89e 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ca:	f107 0318 	add.w	r3, r7, #24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fcb0 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074d8:	f001 b895 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fe0d 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ea:	f001 b88c 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074f4:	f001 b887 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074f8:	4b61      	ldr	r3, [pc, #388]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007504:	d103      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007506:	4b60      	ldr	r3, [pc, #384]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800750a:	f001 b87c 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007512:	f001 b878 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800751a:	f001 b874 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007522:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007526:	430b      	orrs	r3, r1
 8007528:	d158      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800752a:	4b55      	ldr	r3, [pc, #340]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800752c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007534:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753c:	d03b      	beq.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007544:	d846      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754c:	d02e      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007554:	d83e      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755c:	d00b      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007564:	d836      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007572:	d012      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007574:	e02e      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff faf4 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007584:	f001 b83f 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007588:	f107 0318 	add.w	r3, r7, #24
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fc51 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007596:	f001 b836 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fdae 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a8:	f001 b82d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80075ac:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b2:	f001 b828 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075b6:	4b32      	ldr	r3, [pc, #200]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c2:	d103      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80075c4:	4b30      	ldr	r3, [pc, #192]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075c8:	f001 b81d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d0:	f001 b819 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d8:	f001 b815 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80075e4:	430b      	orrs	r3, r1
 80075e6:	d126      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007608:	4b1f      	ldr	r3, [pc, #124]	; (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800760a:	637b      	str	r3, [r7, #52]	; 0x34
 800760c:	f000 bffb 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007610:	4b1b      	ldr	r3, [pc, #108]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d107      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d103      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
 800762a:	f000 bfec 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
 8007632:	f000 bfe8 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800763e:	430b      	orrs	r3, r1
 8007640:	d164      	bne.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007642:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007648:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800764c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007654:	d03d      	beq.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800765c:	d852      	bhi.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007664:	d014      	beq.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800766c:	d84a      	bhi.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01f      	beq.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800767a:	d012      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800767c:	e042      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800767e:	bf00      	nop
 8007680:	46020c00 	.word	0x46020c00
 8007684:	0007a120 	.word	0x0007a120
 8007688:	00f42400 	.word	0x00f42400
 800768c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fa67 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769e:	f000 bfb2 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fbc4 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b0:	f000 bfa9 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80076b4:	4bab      	ldr	r3, [pc, #684]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c0:	d103      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80076c2:	4ba9      	ldr	r3, [pc, #676]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c6:	f000 bf9e 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ce:	f000 bf9a 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076d2:	4ba4      	ldr	r3, [pc, #656]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80076de:	4ba1      	ldr	r3, [pc, #644]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	0e1b      	lsrs	r3, r3, #24
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	e006      	b.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80076ea:	4b9e      	ldr	r3, [pc, #632]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076f0:	041b      	lsls	r3, r3, #16
 80076f2:	0e1b      	lsrs	r3, r3, #24
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	4a9c      	ldr	r2, [pc, #624]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80076fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007700:	f000 bf81 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007708:	f000 bf7d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800770c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007710:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007714:	430b      	orrs	r3, r1
 8007716:	d175      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007718:	4b92      	ldr	r3, [pc, #584]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800771a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800771e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007722:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	2b00      	cmp	r3, #0
 8007728:	d15b      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800772a:	4b8e      	ldr	r3, [pc, #568]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800772c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007730:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007734:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800773c:	d034      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007744:	d849      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800774c:	d00b      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d841      	bhi.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d016      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007762:	d009      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007764:	e039      	b.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff f9fc 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007774:	f000 bf47 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007778:	f107 0318 	add.w	r3, r7, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fb59 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007786:	f000 bf3e 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800778a:	4b76      	ldr	r3, [pc, #472]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007796:	d103      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007798:	4b73      	ldr	r3, [pc, #460]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800779c:	f000 bf33 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80077a4:	f000 bf2f 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077a8:	4b6e      	ldr	r3, [pc, #440]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80077b4:	4b6b      	ldr	r3, [pc, #428]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	e006      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80077c0:	4b68      	ldr	r3, [pc, #416]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	0e1b      	lsrs	r3, r3, #24
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	4a67      	ldr	r2, [pc, #412]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80077d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80077d6:	f000 bf16 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80077de:	f000 bf12 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e8:	d108      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff f9ba 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
 80077f8:	f000 bf05 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	f000 bf01 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007808:	1e51      	subs	r1, r2, #1
 800780a:	430b      	orrs	r3, r1
 800780c:	d136      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800780e:	4b55      	ldr	r3, [pc, #340]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007820:	f7fe fafc 	bl	8005e1c <HAL_RCC_GetPCLK2Freq>
 8007824:	6378      	str	r0, [r7, #52]	; 0x34
 8007826:	f000 beee 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b01      	cmp	r3, #1
 800782e:	d104      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007830:	f7fe f9be 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007834:	6378      	str	r0, [r7, #52]	; 0x34
 8007836:	f000 bee6 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800783a:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d106      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800784e:	4b48      	ldr	r3, [pc, #288]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	f000 bed8 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007856:	4b43      	ldr	r3, [pc, #268]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b02      	cmp	r3, #2
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	2b03      	cmp	r3, #3
 8007868:	d104      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800786a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	f000 bec9 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	637b      	str	r3, [r7, #52]	; 0x34
 8007878:	f000 bec5 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800787c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007880:	1e91      	subs	r1, r2, #2
 8007882:	430b      	orrs	r3, r1
 8007884:	d136      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007886:	4b37      	ldr	r3, [pc, #220]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800788c:	f003 030c 	and.w	r3, r3, #12
 8007890:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fe faac 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 800789c:	6378      	str	r0, [r7, #52]	; 0x34
 800789e:	f000 beb2 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d104      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078a8:	f7fe f982 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 80078ac:	6378      	str	r0, [r7, #52]	; 0x34
 80078ae:	f000 beaa 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80078b2:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078be:	d106      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d103      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80078c6:	4b2a      	ldr	r3, [pc, #168]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ca:	f000 be9c 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80078ce:	4b25      	ldr	r3, [pc, #148]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d107      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b0c      	cmp	r3, #12
 80078e0:	d104      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80078e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
 80078e8:	f000 be8d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
 80078f0:	f000 be89 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80078f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f8:	1f11      	subs	r1, r2, #4
 80078fa:	430b      	orrs	r3, r1
 80078fc:	d13e      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80078fe:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007904:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007908:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fe fa70 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8007914:	6378      	str	r0, [r7, #52]	; 0x34
 8007916:	f000 be76 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	2b10      	cmp	r3, #16
 800791e:	d104      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007920:	f7fe f946 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007924:	6378      	str	r0, [r7, #52]	; 0x34
 8007926:	f000 be6e 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007936:	d106      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2b20      	cmp	r3, #32
 800793c:	d103      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
 8007942:	f000 be60 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b02      	cmp	r3, #2
 8007952:	d10f      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	2b30      	cmp	r3, #48	; 0x30
 8007958:	d10c      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800795a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795e:	637b      	str	r3, [r7, #52]	; 0x34
 8007960:	f000 be51 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007964:	46020c00 	.word	0x46020c00
 8007968:	02dc6c00 	.word	0x02dc6c00
 800796c:	08028960 	.word	0x08028960
 8007970:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
 8007978:	f000 be45 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800797c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007980:	f1a2 0108 	sub.w	r1, r2, #8
 8007984:	430b      	orrs	r3, r1
 8007986:	d136      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007988:	4b9f      	ldr	r3, [pc, #636]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800798a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800798e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007992:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800799a:	f7fe fa2b 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 800799e:	6378      	str	r0, [r7, #52]	; 0x34
 80079a0:	f000 be31 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d104      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079aa:	f7fe f901 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 80079ae:	6378      	str	r0, [r7, #52]	; 0x34
 80079b0:	f000 be29 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80079b4:	4b94      	ldr	r3, [pc, #592]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d106      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d103      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80079c8:	4b90      	ldr	r3, [pc, #576]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34
 80079cc:	f000 be1b 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80079d0:	4b8d      	ldr	r3, [pc, #564]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d107      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	2bc0      	cmp	r3, #192	; 0xc0
 80079e2:	d104      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80079e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ea:	f000 be0c 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
 80079f2:	f000 be08 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80079f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079fa:	f1a2 0110 	sub.w	r1, r2, #16
 80079fe:	430b      	orrs	r3, r1
 8007a00:	d139      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a02:	4b81      	ldr	r3, [pc, #516]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a14:	f7fe f9ee 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8007a18:	6378      	str	r0, [r7, #52]	; 0x34
 8007a1a:	f000 bdf4 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a24:	d104      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a26:	f7fe f8c3 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007a2a:	6378      	str	r0, [r7, #52]	; 0x34
 8007a2c:	f000 bdeb 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007a30:	4b75      	ldr	r3, [pc, #468]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d103      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007a46:	4b71      	ldr	r3, [pc, #452]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4a:	f000 bddc 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007a4e:	4b6e      	ldr	r3, [pc, #440]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d108      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a62:	d104      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6a:	f000 bdcc 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
 8007a72:	f000 bdc8 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7a:	f1a2 0120 	sub.w	r1, r2, #32
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	d158      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007a82:	4b61      	ldr	r3, [pc, #388]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007a94:	f7fe f9d6 	bl	8005e44 <HAL_RCC_GetPCLK3Freq>
 8007a98:	6378      	str	r0, [r7, #52]	; 0x34
 8007a9a:	f000 bdb4 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d104      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007aa4:	f7fe f884 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007aa8:	6378      	str	r0, [r7, #52]	; 0x34
 8007aaa:	f000 bdac 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007aae:	4b56      	ldr	r3, [pc, #344]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aba:	d106      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d103      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007ac2:	4b52      	ldr	r3, [pc, #328]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac6:	f000 bd9e 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007aca:	4b4f      	ldr	r3, [pc, #316]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d107      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d104      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae4:	f000 bd8f 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007ae8:	4b47      	ldr	r3, [pc, #284]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d11b      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d118      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007afa:	4b43      	ldr	r3, [pc, #268]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007b06:	4b40      	ldr	r3, [pc, #256]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	0e1b      	lsrs	r3, r3, #24
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	e006      	b.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007b12:	4b3d      	ldr	r3, [pc, #244]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	0e1b      	lsrs	r3, r3, #24
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	4a3b      	ldr	r2, [pc, #236]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
 8007b28:	f000 bd6d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	f000 bd69 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b38:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	d169      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b40:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b4a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d104      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b54:	f7fe f82c 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007b58:	6378      	str	r0, [r7, #52]	; 0x34
 8007b5a:	f000 bd54 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b64:	d108      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff f962 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
 8007b74:	f000 bd47 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007b7e:	f7fe f91f 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8007b82:	6378      	str	r0, [r7, #52]	; 0x34
 8007b84:	f000 bd3f 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007b8e:	d118      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007b90:	4b1d      	ldr	r3, [pc, #116]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007b9c:	4b1a      	ldr	r3, [pc, #104]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	0f1b      	lsrs	r3, r3, #28
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	e006      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007ba8:	4b17      	ldr	r3, [pc, #92]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	0f1b      	lsrs	r3, r3, #28
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	f000 bd22 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007bc2:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bd6:	d103      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
 8007bdc:	f000 bd13 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bec:	d107      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bf4:	d103      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007bf6:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	f000 bd04 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	f000 bd00 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007c06:	bf00      	nop
 8007c08:	46020c00 	.word	0x46020c00
 8007c0c:	00f42400 	.word	0x00f42400
 8007c10:	08028960 	.word	0x08028960
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c18:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	d14e      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007c20:	4ba8      	ldr	r3, [pc, #672]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d841      	bhi.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c5f 	.word	0x08007c5f
 8007c44:	08007c7b 	.word	0x08007c7b
 8007c48:	08007c85 	.word	0x08007c85
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe ff89 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c5a:	f000 bcd4 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5e:	f107 030c 	add.w	r3, r7, #12
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fa4c 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c6c:	f000 bccb 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c70:	f7fe f8a6 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8007c74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c76:	f000 bcc6 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c80:	f000 bcc1 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c84:	4b8f      	ldr	r3, [pc, #572]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007c90:	4b8c      	ldr	r3, [pc, #560]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	e006      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007c9c:	4b89      	ldr	r3, [pc, #548]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	0e1b      	lsrs	r3, r3, #24
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	4a87      	ldr	r2, [pc, #540]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb2:	f000 bca8 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cba:	f000 bca4 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	d15d      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007cca:	4b7e      	ldr	r3, [pc, #504]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cd0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cdc:	d036      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ce4:	d84b      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cec:	d029      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cf4:	d843      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cfc:	d013      	beq.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d04:	d83b      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d12:	d134      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe ff25 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d22:	f000 bc70 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d26:	f107 030c 	add.w	r3, r7, #12
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff f9e8 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d34:	f000 bc67 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007d38:	f7fe f842 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8007d3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007d3e:	f000 bc62 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007d42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d48:	f000 bc5d 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d4c:	4b5d      	ldr	r3, [pc, #372]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007d58:	4b5a      	ldr	r3, [pc, #360]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	f003 030f 	and.w	r3, r3, #15
 8007d62:	e006      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007d64:	4b57      	ldr	r3, [pc, #348]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d6a:	041b      	lsls	r3, r3, #16
 8007d6c:	0e1b      	lsrs	r3, r3, #24
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	4a55      	ldr	r2, [pc, #340]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d7a:	f000 bc44 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d82:	f000 bc40 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	d14a      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d92:	4b4c      	ldr	r3, [pc, #304]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d104      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fe f826 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8007da8:	6378      	str	r0, [r7, #52]	; 0x34
 8007daa:	f000 bc2c 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db4:	d104      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007db6:	f7fd fefb 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007dba:	6378      	str	r0, [r7, #52]	; 0x34
 8007dbc:	f000 bc23 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007dc0:	4b40      	ldr	r3, [pc, #256]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dcc:	d107      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd4:	d103      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007dd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dda:	f000 bc14 	b.w	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007dde:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d11b      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007df0:	d117      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007df2:	4b34      	ldr	r3, [pc, #208]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007dfe:	4b31      	ldr	r3, [pc, #196]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	0e1b      	lsrs	r3, r3, #24
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	e006      	b.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	4a2b      	ldr	r2, [pc, #172]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	e3f1      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	e3ee      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007e30:	430b      	orrs	r3, r1
 8007e32:	d14d      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007e34:	4b23      	ldr	r3, [pc, #140]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fd ffd5 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8007e4a:	6378      	str	r0, [r7, #52]	; 0x34
 8007e4c:	e3db      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e54:	d103      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fd feab 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007e5a:	6378      	str	r0, [r7, #52]	; 0x34
 8007e5c:	e3d3      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007e5e:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6a:	d106      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e72:	d102      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	e3c5      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d11b      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e8c:	d117      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007e9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	0e1b      	lsrs	r3, r3, #24
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	e006      	b.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	0e1b      	lsrs	r3, r3, #24
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	4a04      	ldr	r2, [pc, #16]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebc:	e3a3      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec2:	e3a0      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007ec4:	46020c00 	.word	0x46020c00
 8007ec8:	08028960 	.word	0x08028960
 8007ecc:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	d148      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007edc:	4b9d      	ldr	r3, [pc, #628]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	2bc0      	cmp	r3, #192	; 0xc0
 8007eec:	d024      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ef2:	d839      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	d00d      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	2b80      	cmp	r3, #128	; 0x80
 8007efe:	d833      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d011      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007f0c:	e02c      	b.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007f0e:	f7fd ff99 	bl	8005e44 <HAL_RCC_GetPCLK3Freq>
 8007f12:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f14:	e377      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f16:	4b8f      	ldr	r3, [pc, #572]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d102      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007f24:	4b8c      	ldr	r3, [pc, #560]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f28:	e36d      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f2e:	e36a      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007f30:	f7fd fe3e 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007f34:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f36:	e366      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007f38:	4b86      	ldr	r3, [pc, #536]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007f44:	4b83      	ldr	r3, [pc, #524]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	0f1b      	lsrs	r3, r3, #28
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	e006      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007f50:	4b80      	ldr	r3, [pc, #512]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	0f1b      	lsrs	r3, r3, #28
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	4a7f      	ldr	r2, [pc, #508]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f66:	e34e      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f6c:	e34b      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f72:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007f76:	430b      	orrs	r3, r1
 8007f78:	d147      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007f7a:	4b76      	ldr	r3, [pc, #472]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f84:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f8c:	f7fd ff32 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8007f90:	6378      	str	r0, [r7, #52]	; 0x34
 8007f92:	e338      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f9a:	d103      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f9c:	f7fd fe08 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8007fa0:	6378      	str	r0, [r7, #52]	; 0x34
 8007fa2:	e330      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007fa4:	4b6b      	ldr	r3, [pc, #428]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb8:	d102      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007fba:	4b67      	ldr	r3, [pc, #412]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbe:	e322      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007fc0:	4b64      	ldr	r3, [pc, #400]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d11b      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fd2:	d117      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fd4:	4b5f      	ldr	r3, [pc, #380]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007fe0:	4b5c      	ldr	r3, [pc, #368]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	0e1b      	lsrs	r3, r3, #24
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	e006      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007fec:	4b59      	ldr	r3, [pc, #356]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	0e1b      	lsrs	r3, r3, #24
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	4a58      	ldr	r2, [pc, #352]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	e300      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	e2fd      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800800a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008012:	430b      	orrs	r3, r1
 8008014:	d15b      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008016:	4b4f      	ldr	r3, [pc, #316]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800801c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008020:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d117      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008028:	4b4a      	ldr	r3, [pc, #296]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8008034:	4b47      	ldr	r3, [pc, #284]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	0e1b      	lsrs	r3, r3, #24
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	e006      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8008040:	4b44      	ldr	r3, [pc, #272]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	0e1b      	lsrs	r3, r3, #24
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	4a43      	ldr	r2, [pc, #268]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
 8008056:	e2d6      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800805a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800805e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008066:	d112      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806e:	d10e      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008070:	4b38      	ldr	r3, [pc, #224]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800807a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807e:	d102      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8008080:	23fa      	movs	r3, #250	; 0xfa
 8008082:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008084:	e2bf      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008086:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800808a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800808c:	e2bb      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809a:	d106      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a2:	d102      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80080a4:	4b2c      	ldr	r3, [pc, #176]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
 80080a8:	e2ad      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80080aa:	4b2a      	ldr	r3, [pc, #168]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d107      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080be:	d103      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80080c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
 80080c6:	e29e      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
 80080cc:	e29b      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80080ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80080d6:	430b      	orrs	r3, r1
 80080d8:	d162      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080da:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d117      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080ec:	4b19      	ldr	r3, [pc, #100]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	e006      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008104:	4b13      	ldr	r3, [pc, #76]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	4a12      	ldr	r2, [pc, #72]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	e274      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800811e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800812a:	d119      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d115      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008134:	4b07      	ldr	r3, [pc, #28]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800813a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008142:	d102      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008144:	23fa      	movs	r3, #250	; 0xfa
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008148:	e25d      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800814a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800814e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008150:	e259      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008152:	bf00      	nop
 8008154:	46020c00 	.word	0x46020c00
 8008158:	00f42400 	.word	0x00f42400
 800815c:	08028960 	.word	0x08028960
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008160:	4b9d      	ldr	r3, [pc, #628]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816c:	d106      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008174:	d102      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008176:	4b99      	ldr	r3, [pc, #612]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	e244      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800817c:	4b96      	ldr	r3, [pc, #600]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800817e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b02      	cmp	r3, #2
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008190:	d103      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e235      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	e232      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80081a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80081a8:	430b      	orrs	r3, r1
 80081aa:	d147      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80081ac:	4b8a      	ldr	r3, [pc, #552]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081be:	f7fd fe19 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 80081c2:	6378      	str	r0, [r7, #52]	; 0x34
 80081c4:	e21f      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80081c6:	4b84      	ldr	r3, [pc, #528]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d4:	d112      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081dc:	d10e      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081de:	4b7e      	ldr	r3, [pc, #504]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ec:	d102      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80081ee:	23fa      	movs	r3, #250	; 0xfa
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081f2:	e208      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80081f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80081fa:	e204      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80081fc:	4b76      	ldr	r3, [pc, #472]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008208:	d106      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008210:	d102      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8008212:	4b72      	ldr	r3, [pc, #456]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	e1f6      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008218:	4b6f      	ldr	r3, [pc, #444]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800821a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b02      	cmp	r3, #2
 8008224:	d107      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800822c:	d103      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800822e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
 8008234:	e1e7      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
 800823a:	e1e4      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800823c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008240:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008244:	430b      	orrs	r3, r1
 8008246:	d12d      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008248:	4b63      	ldr	r3, [pc, #396]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800824a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800824e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008252:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008254:	4b60      	ldr	r3, [pc, #384]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008260:	d105      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008268:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800826a:	637b      	str	r3, [r7, #52]	; 0x34
 800826c:	e1cb      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008274:	d107      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fc74 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
 8008284:	e1bf      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800828c:	d107      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828e:	f107 0318 	add.w	r3, r7, #24
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fdce 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
 800829c:	e1b3      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	e1b0      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80082a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082a8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80082ac:	430b      	orrs	r3, r1
 80082ae:	d14d      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80082b0:	4b49      	ldr	r3, [pc, #292]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082ba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c2:	d028      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ca:	d83c      	bhi.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d2:	d013      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082da:	d834      	bhi.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e8:	d004      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80082ea:	e02c      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80082ec:	f7fd fd96 	bl	8005e1c <HAL_RCC_GetPCLK2Freq>
 80082f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082f2:	e188      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082f4:	f7fd fc5c 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 80082f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082fa:	e184      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082fc:	4b36      	ldr	r3, [pc, #216]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008308:	d102      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800830a:	4b34      	ldr	r3, [pc, #208]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800830e:	e17a      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008314:	e177      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008316:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8008322:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	0e1b      	lsrs	r3, r3, #24
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	e006      	b.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800832e:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	0e1b      	lsrs	r3, r3, #24
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	4a28      	ldr	r2, [pc, #160]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008344:	e15f      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800834a:	e15c      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800834c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008350:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008354:	430b      	orrs	r3, r1
 8008356:	d154      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008358:	4b1f      	ldr	r3, [pc, #124]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800835a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800835e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008362:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800836a:	d028      	beq.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008372:	d843      	bhi.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837a:	d013      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008382:	d83b      	bhi.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008390:	d004      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008392:	e033      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008394:	f7fd fd2e 	bl	8005df4 <HAL_RCC_GetPCLK1Freq>
 8008398:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800839a:	e134      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800839c:	f7fd fc08 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 80083a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80083a2:	e130      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80083b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083b6:	e126      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083bc:	e123      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80083ca:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	0e1b      	lsrs	r3, r3, #24
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	e00d      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80083d6:	bf00      	nop
 80083d8:	46020c00 	.word	0x46020c00
 80083dc:	00f42400 	.word	0x00f42400
 80083e0:	08028960 	.word	0x08028960
 80083e4:	4b8a      	ldr	r3, [pc, #552]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	4a88      	ldr	r2, [pc, #544]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80083f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083fa:	e104      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008400:	e101      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008406:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800840a:	430b      	orrs	r3, r1
 800840c:	d16e      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800840e:	4b80      	ldr	r3, [pc, #512]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008414:	f003 0318 	and.w	r3, r3, #24
 8008418:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	2b18      	cmp	r3, #24
 800841e:	d862      	bhi.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008420:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	0800848d 	.word	0x0800848d
 800842c:	080084e7 	.word	0x080084e7
 8008430:	080084e7 	.word	0x080084e7
 8008434:	080084e7 	.word	0x080084e7
 8008438:	080084e7 	.word	0x080084e7
 800843c:	080084e7 	.word	0x080084e7
 8008440:	080084e7 	.word	0x080084e7
 8008444:	080084e7 	.word	0x080084e7
 8008448:	08008495 	.word	0x08008495
 800844c:	080084e7 	.word	0x080084e7
 8008450:	080084e7 	.word	0x080084e7
 8008454:	080084e7 	.word	0x080084e7
 8008458:	080084e7 	.word	0x080084e7
 800845c:	080084e7 	.word	0x080084e7
 8008460:	080084e7 	.word	0x080084e7
 8008464:	080084e7 	.word	0x080084e7
 8008468:	0800849d 	.word	0x0800849d
 800846c:	080084e7 	.word	0x080084e7
 8008470:	080084e7 	.word	0x080084e7
 8008474:	080084e7 	.word	0x080084e7
 8008478:	080084e7 	.word	0x080084e7
 800847c:	080084e7 	.word	0x080084e7
 8008480:	080084e7 	.word	0x080084e7
 8008484:	080084e7 	.word	0x080084e7
 8008488:	080084b7 	.word	0x080084b7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800848c:	f7fd fcda 	bl	8005e44 <HAL_RCC_GetPCLK3Freq>
 8008490:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008492:	e0b8      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008494:	f7fd fb8c 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8008498:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800849a:	e0b4      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800849c:	4b5c      	ldr	r3, [pc, #368]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d102      	bne.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80084aa:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084ae:	e0aa      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084b4:	e0a7      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084b6:	4b56      	ldr	r3, [pc, #344]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80084c2:	4b53      	ldr	r3, [pc, #332]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0e1b      	lsrs	r3, r3, #24
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	e006      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80084ce:	4b50      	ldr	r3, [pc, #320]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084d4:	041b      	lsls	r3, r3, #16
 80084d6:	0e1b      	lsrs	r3, r3, #24
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	4a4d      	ldr	r2, [pc, #308]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80084de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e4:	e08f      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ea:	e08c      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80084ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80084f4:	430b      	orrs	r3, r1
 80084f6:	d14c      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80084f8:	4b45      	ldr	r3, [pc, #276]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008502:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800850a:	d013      	beq.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008512:	d83b      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800851a:	d013      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008522:	d833      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	2b00      	cmp	r3, #0
 8008528:	d014      	beq.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008530:	d014      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008532:	e02b      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008534:	f107 0318 	add.w	r3, r7, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fc7b 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008542:	e060      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fb0d 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008552:	e058      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008554:	f7fd fb2c 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8008558:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800855a:	e054      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800855c:	4b2c      	ldr	r3, [pc, #176]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008568:	4b29      	ldr	r3, [pc, #164]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	0e1b      	lsrs	r3, r3, #24
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	e006      	b.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008574:	4b26      	ldr	r3, [pc, #152]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	0e1b      	lsrs	r3, r3, #24
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	4a24      	ldr	r2, [pc, #144]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800858a:	e03c      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008590:	e039      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008596:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800859a:	430b      	orrs	r3, r1
 800859c:	d131      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800859e:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80085aa:	4b19      	ldr	r3, [pc, #100]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80085be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	e01f      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80085c6:	4b12      	ldr	r3, [pc, #72]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d4:	d112      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085dc:	d10e      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085de:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ec:	d102      	bne.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80085ee:	23fa      	movs	r3, #250	; 0xfa
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085f2:	e008      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80085f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085fa:	e004      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008600:	e001      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008608:	4618      	mov	r0, r3
 800860a:	3738      	adds	r7, #56	; 0x38
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	46020c00 	.word	0x46020c00
 8008614:	08028960 	.word	0x08028960
 8008618:	00f42400 	.word	0x00f42400

0800861c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008624:	4b47      	ldr	r3, [pc, #284]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a46      	ldr	r2, [pc, #280]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 800862a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800862e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008630:	f7f9 feea 	bl	8002408 <HAL_GetTick>
 8008634:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008636:	e008      	b.n	800864a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008638:	f7f9 fee6 	bl	8002408 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e077      	b.n	800873a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800864a:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f0      	bne.n	8008638 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008656:	4b3b      	ldr	r3, [pc, #236]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6852      	ldr	r2, [r2, #4]
 800866a:	3a01      	subs	r2, #1
 800866c:	0212      	lsls	r2, r2, #8
 800866e:	430a      	orrs	r2, r1
 8008670:	4934      	ldr	r1, [pc, #208]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008672:	4313      	orrs	r3, r2
 8008674:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008676:	4b33      	ldr	r3, [pc, #204]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800867a:	4b33      	ldr	r3, [pc, #204]	; (8008748 <RCCEx_PLL2_Config+0x12c>)
 800867c:	4013      	ands	r3, r2
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6892      	ldr	r2, [r2, #8]
 8008682:	3a01      	subs	r2, #1
 8008684:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68d2      	ldr	r2, [r2, #12]
 800868c:	3a01      	subs	r2, #1
 800868e:	0252      	lsls	r2, r2, #9
 8008690:	b292      	uxth	r2, r2
 8008692:	4311      	orrs	r1, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6912      	ldr	r2, [r2, #16]
 8008698:	3a01      	subs	r2, #1
 800869a:	0412      	lsls	r2, r2, #16
 800869c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80086a0:	4311      	orrs	r1, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6952      	ldr	r2, [r2, #20]
 80086a6:	3a01      	subs	r2, #1
 80086a8:	0612      	lsls	r2, r2, #24
 80086aa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80086ae:	430a      	orrs	r2, r1
 80086b0:	4924      	ldr	r1, [pc, #144]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80086b6:	4b23      	ldr	r3, [pc, #140]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	f023 020c 	bic.w	r2, r3, #12
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	4920      	ldr	r1, [pc, #128]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	491c      	ldr	r1, [pc, #112]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	4a1a      	ldr	r2, [pc, #104]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086e2:	4b18      	ldr	r3, [pc, #96]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	69d2      	ldr	r2, [r2, #28]
 80086f2:	00d2      	lsls	r2, r2, #3
 80086f4:	4913      	ldr	r1, [pc, #76]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008700:	f043 0310 	orr.w	r3, r3, #16
 8008704:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 800870c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008710:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008712:	f7f9 fe79 	bl	8002408 <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008718:	e008      	b.n	800872c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800871a:	f7f9 fe75 	bl	8002408 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <RCCEx_PLL2_Config+0x128>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0

}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	46020c00 	.word	0x46020c00
 8008748:	80800000 	.word	0x80800000

0800874c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008754:	4b47      	ldr	r3, [pc, #284]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a46      	ldr	r2, [pc, #280]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800875a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800875e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008760:	f7f9 fe52 	bl	8002408 <HAL_GetTick>
 8008764:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008766:	e008      	b.n	800877a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008768:	f7f9 fe4e 	bl	8002408 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e077      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800877a:	4b3e      	ldr	r3, [pc, #248]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008786:	4b3b      	ldr	r3, [pc, #236]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6811      	ldr	r1, [r2, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6852      	ldr	r2, [r2, #4]
 800879a:	3a01      	subs	r2, #1
 800879c:	0212      	lsls	r2, r2, #8
 800879e:	430a      	orrs	r2, r1
 80087a0:	4934      	ldr	r1, [pc, #208]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	630b      	str	r3, [r1, #48]	; 0x30
 80087a6:	4b33      	ldr	r3, [pc, #204]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087aa:	4b33      	ldr	r3, [pc, #204]	; (8008878 <RCCEx_PLL3_Config+0x12c>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6892      	ldr	r2, [r2, #8]
 80087b2:	3a01      	subs	r2, #1
 80087b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	68d2      	ldr	r2, [r2, #12]
 80087bc:	3a01      	subs	r2, #1
 80087be:	0252      	lsls	r2, r2, #9
 80087c0:	b292      	uxth	r2, r2
 80087c2:	4311      	orrs	r1, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6912      	ldr	r2, [r2, #16]
 80087c8:	3a01      	subs	r2, #1
 80087ca:	0412      	lsls	r2, r2, #16
 80087cc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80087d0:	4311      	orrs	r1, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6952      	ldr	r2, [r2, #20]
 80087d6:	3a01      	subs	r2, #1
 80087d8:	0612      	lsls	r2, r2, #24
 80087da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80087de:	430a      	orrs	r2, r1
 80087e0:	4924      	ldr	r1, [pc, #144]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80087e6:	4b23      	ldr	r3, [pc, #140]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f023 020c 	bic.w	r2, r3, #12
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	4920      	ldr	r1, [pc, #128]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 80087fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	491c      	ldr	r1, [pc, #112]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008802:	4313      	orrs	r3, r2
 8008804:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008806:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a1a      	ldr	r2, [pc, #104]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800880c:	f023 0310 	bic.w	r3, r3, #16
 8008810:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008812:	4b18      	ldr	r3, [pc, #96]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800881a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	69d2      	ldr	r2, [r2, #28]
 8008822:	00d2      	lsls	r2, r2, #3
 8008824:	4913      	ldr	r1, [pc, #76]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008826:	4313      	orrs	r3, r2
 8008828:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	4a11      	ldr	r2, [pc, #68]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008830:	f043 0310 	orr.w	r3, r3, #16
 8008834:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a0e      	ldr	r2, [pc, #56]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800883c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008842:	f7f9 fde1 	bl	8002408 <HAL_GetTick>
 8008846:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008848:	e008      	b.n	800885c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800884a:	f7f9 fddd 	bl	8002408 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e006      	b.n	800886a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <RCCEx_PLL3_Config+0x128>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	46020c00 	.word	0x46020c00
 8008878:	80800000 	.word	0x80800000

0800887c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e03e      	b.n	8008910 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7f9 fb70 	bl	8001f8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3308      	adds	r3, #8
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f001 fb1a 	bl	8009ef0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	461a      	mov	r2, r3
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	f001 fbe2 	bl	800a090 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6858      	ldr	r0, [r3, #4]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	f001 fc2b 	bl	800a134 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	6892      	ldr	r2, [r2, #8]
 80088e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	6892      	ldr	r2, [r2, #8]
 80088f2:	f041 0101 	orr.w	r1, r1, #1
 80088f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <HAL_SRAM_Init+0x9c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a06      	ldr	r2, [pc, #24]	; (8008918 <HAL_SRAM_Init+0x9c>)
 8008900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008904:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	420d0400 	.word	0x420d0400

0800891c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e049      	b.n	80089c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f9 f990 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f000 fb80 	bl	8009060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d001      	beq.n	80089e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e072      	b.n	8008aca <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a35      	ldr	r2, [pc, #212]	; (8008ad8 <HAL_TIM_Base_Start_IT+0x10c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d040      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a34      	ldr	r2, [pc, #208]	; (8008adc <HAL_TIM_Base_Start_IT+0x110>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d03b      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a18:	d036      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a22:	d031      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <HAL_TIM_Base_Start_IT+0x114>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d02c      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2c      	ldr	r2, [pc, #176]	; (8008ae4 <HAL_TIM_Base_Start_IT+0x118>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d027      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a2a      	ldr	r2, [pc, #168]	; (8008ae8 <HAL_TIM_Base_Start_IT+0x11c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a29      	ldr	r2, [pc, #164]	; (8008aec <HAL_TIM_Base_Start_IT+0x120>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d01d      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a27      	ldr	r2, [pc, #156]	; (8008af0 <HAL_TIM_Base_Start_IT+0x124>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <HAL_TIM_Base_Start_IT+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a24      	ldr	r2, [pc, #144]	; (8008af8 <HAL_TIM_Base_Start_IT+0x12c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a23      	ldr	r2, [pc, #140]	; (8008afc <HAL_TIM_Base_Start_IT+0x130>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a21      	ldr	r2, [pc, #132]	; (8008b00 <HAL_TIM_Base_Start_IT+0x134>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0xbc>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a20      	ldr	r2, [pc, #128]	; (8008b04 <HAL_TIM_Base_Start_IT+0x138>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d115      	bne.n	8008ab4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <HAL_TIM_Base_Start_IT+0x13c>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d015      	beq.n	8008ac6 <HAL_TIM_Base_Start_IT+0xfa>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d011      	beq.n	8008ac6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0201 	orr.w	r2, r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab2:	e008      	b.n	8008ac6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e000      	b.n	8008ac8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40012c00 	.word	0x40012c00
 8008adc:	50012c00 	.word	0x50012c00
 8008ae0:	40000400 	.word	0x40000400
 8008ae4:	50000400 	.word	0x50000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	50000800 	.word	0x50000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	50000c00 	.word	0x50000c00
 8008af8:	40013400 	.word	0x40013400
 8008afc:	50013400 	.word	0x50013400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	50014000 	.word	0x50014000
 8008b08:	00010007 	.word	0x00010007

08008b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d122      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d11b      	bne.n	8008b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0202 	mvn.w	r2, #2
 8008b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa68 	bl	8009024 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa5a 	bl	8009010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa6b 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d122      	bne.n	8008bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d11b      	bne.n	8008bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0204 	mvn.w	r2, #4
 8008b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa3e 	bl	8009024 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa30 	bl	8009010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa41 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d122      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d11b      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0208 	mvn.w	r2, #8
 8008be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2204      	movs	r2, #4
 8008be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa14 	bl	8009024 <HAL_TIM_IC_CaptureCallback>
 8008bfc:	e005      	b.n	8008c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa06 	bl	8009010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fa17 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d122      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d11b      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0210 	mvn.w	r2, #16
 8008c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9ea 	bl	8009024 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9dc 	bl	8009010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f9ed 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10e      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d107      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0201 	mvn.w	r2, #1
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7f8 ff10 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9a:	2b80      	cmp	r3, #128	; 0x80
 8008c9c:	d10e      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca8:	2b80      	cmp	r3, #128	; 0x80
 8008caa:	d107      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc34 	bl	8009524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cca:	d10e      	bne.n	8008cea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd6:	2b80      	cmp	r3, #128	; 0x80
 8008cd8:	d107      	bne.n	8008cea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc27 	bl	8009538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d10e      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d107      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f99b 	bl	800904c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0320 	and.w	r3, r3, #32
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d10e      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d107      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0220 	mvn.w	r2, #32
 8008d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fbe7 	bl	8009510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d50:	d10f      	bne.n	8008d72 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d60:	d107      	bne.n	8008d72 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fbed 	bl	800954c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d80:	d10f      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d90:	d107      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fbdf 	bl	8009560 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db0:	d10f      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dc0:	d107      	bne.n	8008dd2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fbd1 	bl	8009574 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008de0:	d10f      	bne.n	8008e02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df0:	d107      	bne.n	8008e02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fbc3 	bl	8009588 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_TIM_ConfigClockSource+0x1c>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e0e6      	b.n	8008ff6 <HAL_TIM_ConfigClockSource+0x1ea>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a67      	ldr	r2, [pc, #412]	; (8009000 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	f000 80b1 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008e68:	4a65      	ldr	r2, [pc, #404]	; (8009000 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	f200 80b6 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008e70:	4a64      	ldr	r2, [pc, #400]	; (8009004 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	f000 80a9 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008e78:	4a62      	ldr	r2, [pc, #392]	; (8009004 <HAL_TIM_ConfigClockSource+0x1f8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	f200 80ae 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008e80:	4a61      	ldr	r2, [pc, #388]	; (8009008 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	f000 80a1 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008e88:	4a5f      	ldr	r2, [pc, #380]	; (8009008 <HAL_TIM_ConfigClockSource+0x1fc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	f200 80a6 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008e90:	4a5e      	ldr	r2, [pc, #376]	; (800900c <HAL_TIM_ConfigClockSource+0x200>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	f000 8099 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008e98:	4a5c      	ldr	r2, [pc, #368]	; (800900c <HAL_TIM_ConfigClockSource+0x200>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	f200 809e 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008ea0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ea4:	f000 8091 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008ea8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008eac:	f200 8096 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eb4:	f000 8089 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ebc:	f200 808e 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec4:	d03e      	beq.n	8008f44 <HAL_TIM_ConfigClockSource+0x138>
 8008ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eca:	f200 8087 	bhi.w	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed2:	f000 8086 	beq.w	8008fe2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eda:	d87f      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008edc:	2b70      	cmp	r3, #112	; 0x70
 8008ede:	d01a      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x10a>
 8008ee0:	2b70      	cmp	r3, #112	; 0x70
 8008ee2:	d87b      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008ee4:	2b60      	cmp	r3, #96	; 0x60
 8008ee6:	d050      	beq.n	8008f8a <HAL_TIM_ConfigClockSource+0x17e>
 8008ee8:	2b60      	cmp	r3, #96	; 0x60
 8008eea:	d877      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008eec:	2b50      	cmp	r3, #80	; 0x50
 8008eee:	d03c      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x15e>
 8008ef0:	2b50      	cmp	r3, #80	; 0x50
 8008ef2:	d873      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008ef4:	2b40      	cmp	r3, #64	; 0x40
 8008ef6:	d058      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x19e>
 8008ef8:	2b40      	cmp	r3, #64	; 0x40
 8008efa:	d86f      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008efc:	2b30      	cmp	r3, #48	; 0x30
 8008efe:	d064      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008f00:	2b30      	cmp	r3, #48	; 0x30
 8008f02:	d86b      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d060      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	d867      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d05c      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d05a      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0x1be>
 8008f14:	e062      	b.n	8008fdc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6899      	ldr	r1, [r3, #8]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f000 fa11 	bl	800934c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	609a      	str	r2, [r3, #8]
      break;
 8008f42:	e04f      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6899      	ldr	r1, [r3, #8]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f000 f9fa 	bl	800934c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f66:	609a      	str	r2, [r3, #8]
      break;
 8008f68:	e03c      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	6859      	ldr	r1, [r3, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	461a      	mov	r2, r3
 8008f78:	f000 f96c 	bl	8009254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2150      	movs	r1, #80	; 0x50
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f9c5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008f88:	e02c      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	6859      	ldr	r1, [r3, #4]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f000 f98b 	bl	80092b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2160      	movs	r1, #96	; 0x60
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f9b5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008fa8:	e01c      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6859      	ldr	r1, [r3, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f000 f94c 	bl	8009254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2140      	movs	r1, #64	; 0x40
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 f9a5 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008fc8:	e00c      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f000 f99c 	bl	8009312 <TIM_ITRx_SetConfig>
      break;
 8008fda:	e003      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe0:	e000      	b.n	8008fe4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	00100070 	.word	0x00100070
 8009004:	00100040 	.word	0x00100040
 8009008:	00100030 	.word	0x00100030
 800900c:	00100020 	.word	0x00100020

08009010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a68      	ldr	r2, [pc, #416]	; (8009214 <TIM_Base_SetConfig+0x1b4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d02b      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a67      	ldr	r2, [pc, #412]	; (8009218 <TIM_Base_SetConfig+0x1b8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d027      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009086:	d023      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800908e:	d01f      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a62      	ldr	r2, [pc, #392]	; (800921c <TIM_Base_SetConfig+0x1bc>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d01b      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a61      	ldr	r2, [pc, #388]	; (8009220 <TIM_Base_SetConfig+0x1c0>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d017      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a60      	ldr	r2, [pc, #384]	; (8009224 <TIM_Base_SetConfig+0x1c4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a5f      	ldr	r2, [pc, #380]	; (8009228 <TIM_Base_SetConfig+0x1c8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a5e      	ldr	r2, [pc, #376]	; (800922c <TIM_Base_SetConfig+0x1cc>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a5d      	ldr	r2, [pc, #372]	; (8009230 <TIM_Base_SetConfig+0x1d0>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a5c      	ldr	r2, [pc, #368]	; (8009234 <TIM_Base_SetConfig+0x1d4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_Base_SetConfig+0x70>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a5b      	ldr	r2, [pc, #364]	; (8009238 <TIM_Base_SetConfig+0x1d8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d108      	bne.n	80090e2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a4b      	ldr	r2, [pc, #300]	; (8009214 <TIM_Base_SetConfig+0x1b4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d043      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a4a      	ldr	r2, [pc, #296]	; (8009218 <TIM_Base_SetConfig+0x1b8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d03f      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f8:	d03b      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009100:	d037      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a45      	ldr	r2, [pc, #276]	; (800921c <TIM_Base_SetConfig+0x1bc>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d033      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a44      	ldr	r2, [pc, #272]	; (8009220 <TIM_Base_SetConfig+0x1c0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d02f      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a43      	ldr	r2, [pc, #268]	; (8009224 <TIM_Base_SetConfig+0x1c4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02b      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a42      	ldr	r2, [pc, #264]	; (8009228 <TIM_Base_SetConfig+0x1c8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d027      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a41      	ldr	r2, [pc, #260]	; (800922c <TIM_Base_SetConfig+0x1cc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d023      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a40      	ldr	r2, [pc, #256]	; (8009230 <TIM_Base_SetConfig+0x1d0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d01f      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a3f      	ldr	r2, [pc, #252]	; (8009234 <TIM_Base_SetConfig+0x1d4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d01b      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a3e      	ldr	r2, [pc, #248]	; (8009238 <TIM_Base_SetConfig+0x1d8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d017      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a3d      	ldr	r2, [pc, #244]	; (800923c <TIM_Base_SetConfig+0x1dc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a3c      	ldr	r2, [pc, #240]	; (8009240 <TIM_Base_SetConfig+0x1e0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a3b      	ldr	r2, [pc, #236]	; (8009244 <TIM_Base_SetConfig+0x1e4>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a3a      	ldr	r2, [pc, #232]	; (8009248 <TIM_Base_SetConfig+0x1e8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a39      	ldr	r2, [pc, #228]	; (800924c <TIM_Base_SetConfig+0x1ec>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_Base_SetConfig+0x112>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a38      	ldr	r2, [pc, #224]	; (8009250 <TIM_Base_SetConfig+0x1f0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d108      	bne.n	8009184 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a1a      	ldr	r2, [pc, #104]	; (8009214 <TIM_Base_SetConfig+0x1b4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d023      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a19      	ldr	r2, [pc, #100]	; (8009218 <TIM_Base_SetConfig+0x1b8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d01f      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <TIM_Base_SetConfig+0x1d4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d01b      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1d      	ldr	r2, [pc, #116]	; (8009238 <TIM_Base_SetConfig+0x1d8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d017      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a1c      	ldr	r2, [pc, #112]	; (800923c <TIM_Base_SetConfig+0x1dc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a1b      	ldr	r2, [pc, #108]	; (8009240 <TIM_Base_SetConfig+0x1e0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00f      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a1a      	ldr	r2, [pc, #104]	; (8009244 <TIM_Base_SetConfig+0x1e4>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00b      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a19      	ldr	r2, [pc, #100]	; (8009248 <TIM_Base_SetConfig+0x1e8>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d007      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <TIM_Base_SetConfig+0x1ec>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_Base_SetConfig+0x198>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a17      	ldr	r2, [pc, #92]	; (8009250 <TIM_Base_SetConfig+0x1f0>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d103      	bne.n	8009200 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	615a      	str	r2, [r3, #20]
}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40012c00 	.word	0x40012c00
 8009218:	50012c00 	.word	0x50012c00
 800921c:	40000400 	.word	0x40000400
 8009220:	50000400 	.word	0x50000400
 8009224:	40000800 	.word	0x40000800
 8009228:	50000800 	.word	0x50000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	50000c00 	.word	0x50000c00
 8009234:	40013400 	.word	0x40013400
 8009238:	50013400 	.word	0x50013400
 800923c:	40014000 	.word	0x40014000
 8009240:	50014000 	.word	0x50014000
 8009244:	40014400 	.word	0x40014400
 8009248:	50014400 	.word	0x50014400
 800924c:	40014800 	.word	0x40014800
 8009250:	50014800 	.word	0x50014800

08009254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	f023 0201 	bic.w	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800927e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	011b      	lsls	r3, r3, #4
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f023 030a 	bic.w	r3, r3, #10
 8009290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b087      	sub	sp, #28
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	f023 0210 	bic.w	r2, r3, #16
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	031b      	lsls	r3, r3, #12
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	bf00      	nop
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	f043 0307 	orr.w	r3, r3, #7
 8009338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	609a      	str	r2, [r3, #8]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	021a      	lsls	r2, r3, #8
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	431a      	orrs	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4313      	orrs	r3, r2
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	609a      	str	r2, [r3, #8]
}
 8009380:	bf00      	nop
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e097      	b.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a45      	ldr	r2, [pc, #276]	; (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00e      	beq.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a44      	ldr	r2, [pc, #272]	; (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d009      	beq.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a42      	ldr	r2, [pc, #264]	; (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d004      	beq.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a41      	ldr	r2, [pc, #260]	; (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d108      	bne.n	80093fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a2f      	ldr	r2, [pc, #188]	; (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d040      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a2e      	ldr	r2, [pc, #184]	; (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d03b      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	d036      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009442:	d031      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d02c      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d027      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a26      	ldr	r2, [pc, #152]	; (80094f8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d022      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a25      	ldr	r2, [pc, #148]	; (80094fc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d01d      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a23      	ldr	r2, [pc, #140]	; (8009500 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d018      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a22      	ldr	r2, [pc, #136]	; (8009504 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d013      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a18      	ldr	r2, [pc, #96]	; (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00e      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a17      	ldr	r2, [pc, #92]	; (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d009      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d004      	beq.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1a      	ldr	r2, [pc, #104]	; (800950c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d10c      	bne.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	50012c00 	.word	0x50012c00
 80094e8:	40013400 	.word	0x40013400
 80094ec:	50013400 	.word	0x50013400
 80094f0:	40000400 	.word	0x40000400
 80094f4:	50000400 	.word	0x50000400
 80094f8:	40000800 	.word	0x40000800
 80094fc:	50000800 	.word	0x50000800
 8009500:	40000c00 	.word	0x40000c00
 8009504:	50000c00 	.word	0x50000c00
 8009508:	40014000 	.word	0x40014000
 800950c:	50014000 	.word	0x50014000

08009510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e042      	b.n	8009634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7f8 fb99 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2224      	movs	r2, #36	; 0x24
 80095ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0201 	bic.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f82c 	bl	800963c <UART_SetConfig>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e022      	b.n	8009634 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f9c2 	bl	8009980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800960a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800961a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0201 	orr.w	r2, r2, #1
 800962a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fa49 	bl	8009ac4 <UART_CheckIdleState>
 8009632:	4603      	mov	r3, r0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800963c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009640:	b094      	sub	sp, #80	; 0x50
 8009642:	af00      	add	r7, sp, #0
 8009644:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b7e      	ldr	r3, [pc, #504]	; (800984c <UART_SetConfig+0x210>)
 8009652:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	431a      	orrs	r2, r3
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	431a      	orrs	r2, r3
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	4313      	orrs	r3, r2
 800966a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4977      	ldr	r1, [pc, #476]	; (8009850 <UART_SetConfig+0x214>)
 8009674:	4019      	ands	r1, r3
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967c:	430b      	orrs	r3, r1
 800967e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	68d9      	ldr	r1, [r3, #12]
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	ea40 0301 	orr.w	r3, r0, r1
 8009696:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b6a      	ldr	r3, [pc, #424]	; (800984c <UART_SetConfig+0x210>)
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d009      	beq.n	80096bc <UART_SetConfig+0x80>
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b69      	ldr	r3, [pc, #420]	; (8009854 <UART_SetConfig+0x218>)
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d004      	beq.n	80096bc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	6a1a      	ldr	r2, [r3, #32]
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	4313      	orrs	r3, r2
 80096ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80096c6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	f023 000f 	bic.w	r0, r3, #15
 80096de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	ea40 0301 	orr.w	r3, r0, r1
 80096ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	4b59      	ldr	r3, [pc, #356]	; (8009858 <UART_SetConfig+0x21c>)
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d102      	bne.n	80096fc <UART_SetConfig+0xc0>
 80096f6:	2301      	movs	r3, #1
 80096f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80096fa:	e029      	b.n	8009750 <UART_SetConfig+0x114>
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	4b56      	ldr	r3, [pc, #344]	; (800985c <UART_SetConfig+0x220>)
 8009702:	429a      	cmp	r2, r3
 8009704:	d102      	bne.n	800970c <UART_SetConfig+0xd0>
 8009706:	2302      	movs	r3, #2
 8009708:	64bb      	str	r3, [r7, #72]	; 0x48
 800970a:	e021      	b.n	8009750 <UART_SetConfig+0x114>
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	4b53      	ldr	r3, [pc, #332]	; (8009860 <UART_SetConfig+0x224>)
 8009712:	429a      	cmp	r2, r3
 8009714:	d102      	bne.n	800971c <UART_SetConfig+0xe0>
 8009716:	2304      	movs	r3, #4
 8009718:	64bb      	str	r3, [r7, #72]	; 0x48
 800971a:	e019      	b.n	8009750 <UART_SetConfig+0x114>
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	4b50      	ldr	r3, [pc, #320]	; (8009864 <UART_SetConfig+0x228>)
 8009722:	429a      	cmp	r2, r3
 8009724:	d102      	bne.n	800972c <UART_SetConfig+0xf0>
 8009726:	2308      	movs	r3, #8
 8009728:	64bb      	str	r3, [r7, #72]	; 0x48
 800972a:	e011      	b.n	8009750 <UART_SetConfig+0x114>
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	4b4d      	ldr	r3, [pc, #308]	; (8009868 <UART_SetConfig+0x22c>)
 8009732:	429a      	cmp	r2, r3
 8009734:	d102      	bne.n	800973c <UART_SetConfig+0x100>
 8009736:	2310      	movs	r3, #16
 8009738:	64bb      	str	r3, [r7, #72]	; 0x48
 800973a:	e009      	b.n	8009750 <UART_SetConfig+0x114>
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	4b42      	ldr	r3, [pc, #264]	; (800984c <UART_SetConfig+0x210>)
 8009742:	429a      	cmp	r2, r3
 8009744:	d102      	bne.n	800974c <UART_SetConfig+0x110>
 8009746:	2320      	movs	r3, #32
 8009748:	64bb      	str	r3, [r7, #72]	; 0x48
 800974a:	e001      	b.n	8009750 <UART_SetConfig+0x114>
 800974c:	2300      	movs	r3, #0
 800974e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b3d      	ldr	r3, [pc, #244]	; (800984c <UART_SetConfig+0x210>)
 8009756:	429a      	cmp	r2, r3
 8009758:	d005      	beq.n	8009766 <UART_SetConfig+0x12a>
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4b3d      	ldr	r3, [pc, #244]	; (8009854 <UART_SetConfig+0x218>)
 8009760:	429a      	cmp	r2, r3
 8009762:	f040 8085 	bne.w	8009870 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009768:	2200      	movs	r2, #0
 800976a:	623b      	str	r3, [r7, #32]
 800976c:	627a      	str	r2, [r7, #36]	; 0x24
 800976e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009772:	f7fd fe2b 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 8009776:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80e8 	beq.w	8009950 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	4a39      	ldr	r2, [pc, #228]	; (800986c <UART_SetConfig+0x230>)
 8009786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978a:	461a      	mov	r2, r3
 800978c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800978e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009792:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	4613      	mov	r3, r2
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	4413      	add	r3, r2
 800979e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d305      	bcc.n	80097b0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097b6:	e048      	b.n	800984a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ba:	2200      	movs	r2, #0
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	61fa      	str	r2, [r7, #28]
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	4a29      	ldr	r2, [pc, #164]	; (800986c <UART_SetConfig+0x230>)
 80097c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	2200      	movs	r2, #0
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	617a      	str	r2, [r7, #20]
 80097d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80097d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80097da:	f7f6 fe69 	bl	80004b0 <__aeabi_uldivmod>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	4610      	mov	r0, r2
 80097e4:	4619      	mov	r1, r3
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	f04f 0300 	mov.w	r3, #0
 80097ee:	020b      	lsls	r3, r1, #8
 80097f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097f4:	0202      	lsls	r2, r0, #8
 80097f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f8:	6849      	ldr	r1, [r1, #4]
 80097fa:	0849      	lsrs	r1, r1, #1
 80097fc:	2000      	movs	r0, #0
 80097fe:	460c      	mov	r4, r1
 8009800:	4605      	mov	r5, r0
 8009802:	eb12 0804 	adds.w	r8, r2, r4
 8009806:	eb43 0905 	adc.w	r9, r3, r5
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	60bb      	str	r3, [r7, #8]
 8009812:	60fa      	str	r2, [r7, #12]
 8009814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009818:	4640      	mov	r0, r8
 800981a:	4649      	mov	r1, r9
 800981c:	f7f6 fe48 	bl	80004b0 <__aeabi_uldivmod>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4613      	mov	r3, r2
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800982e:	d308      	bcc.n	8009842 <UART_SetConfig+0x206>
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009836:	d204      	bcs.n	8009842 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800983e:	60da      	str	r2, [r3, #12]
 8009840:	e003      	b.n	800984a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009848:	e082      	b.n	8009950 <UART_SetConfig+0x314>
 800984a:	e081      	b.n	8009950 <UART_SetConfig+0x314>
 800984c:	46002400 	.word	0x46002400
 8009850:	cfff69f3 	.word	0xcfff69f3
 8009854:	56002400 	.word	0x56002400
 8009858:	40013800 	.word	0x40013800
 800985c:	40004400 	.word	0x40004400
 8009860:	40004800 	.word	0x40004800
 8009864:	40004c00 	.word	0x40004c00
 8009868:	40005000 	.word	0x40005000
 800986c:	08028a20 	.word	0x08028a20
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009878:	d13c      	bne.n	80098f4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800987a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987c:	2200      	movs	r2, #0
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	607a      	str	r2, [r7, #4]
 8009882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009886:	f7fd fda1 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800988a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800988c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d05e      	beq.n	8009950 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	4a39      	ldr	r2, [pc, #228]	; (800997c <UART_SetConfig+0x340>)
 8009898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800989c:	461a      	mov	r2, r3
 800989e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80098a4:	005a      	lsls	r2, r3, #1
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	085b      	lsrs	r3, r3, #1
 80098ac:	441a      	add	r2, r3
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d916      	bls.n	80098ec <UART_SetConfig+0x2b0>
 80098be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c4:	d212      	bcs.n	80098ec <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f023 030f 	bic.w	r3, r3, #15
 80098ce:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	b29a      	uxth	r2, r3
 80098dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80098de:	4313      	orrs	r3, r2
 80098e0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80098e8:	60da      	str	r2, [r3, #12]
 80098ea:	e031      	b.n	8009950 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098f2:	e02d      	b.n	8009950 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80098f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f6:	2200      	movs	r2, #0
 80098f8:	469a      	mov	sl, r3
 80098fa:	4693      	mov	fp, r2
 80098fc:	4650      	mov	r0, sl
 80098fe:	4659      	mov	r1, fp
 8009900:	f7fd fd64 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 8009904:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d021      	beq.n	8009950 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	4a1a      	ldr	r2, [pc, #104]	; (800997c <UART_SetConfig+0x340>)
 8009912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009916:	461a      	mov	r2, r3
 8009918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991a:	fbb3 f2f2 	udiv	r2, r3, r2
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	441a      	add	r2, r3
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	fbb2 f3f3 	udiv	r3, r2, r3
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009932:	2b0f      	cmp	r3, #15
 8009934:	d909      	bls.n	800994a <UART_SetConfig+0x30e>
 8009936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800993c:	d205      	bcs.n	800994a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800993e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009940:	b29a      	uxth	r2, r3
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60da      	str	r2, [r3, #12]
 8009948:	e002      	b.n	8009950 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	2201      	movs	r2, #1
 8009954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995a:	2201      	movs	r2, #1
 800995c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	2200      	movs	r2, #0
 8009964:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	2200      	movs	r2, #0
 800996a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800996c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009970:	4618      	mov	r0, r3
 8009972:	3750      	adds	r7, #80	; 0x50
 8009974:	46bd      	mov	sp, r7
 8009976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800997a:	bf00      	nop
 800997c:	08028a20 	.word	0x08028a20

08009980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00a      	beq.n	80099cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01a      	beq.n	8009a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a7e:	d10a      	bne.n	8009a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	605a      	str	r2, [r3, #4]
  }
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ad4:	f7f8 fc98 	bl	8002408 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0308 	and.w	r3, r3, #8
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d10e      	bne.n	8009b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f82f 	bl	8009b5a <UART_WaitOnFlagUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e025      	b.n	8009b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d10e      	bne.n	8009b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f819 	bl	8009b5a <UART_WaitOnFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e00f      	b.n	8009b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	4613      	mov	r3, r2
 8009b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b6a:	e0a9      	b.n	8009cc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b72:	f000 80a5 	beq.w	8009cc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b76:	f7f8 fc47 	bl	8002408 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d302      	bcc.n	8009b8c <UART_WaitOnFlagUntilTimeout+0x32>
 8009b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d140      	bne.n	8009c0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e6      	bne.n	8009b8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8009be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e5      	bne.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e069      	b.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d051      	beq.n	8009cc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c2a:	d149      	bne.n	8009cc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	461a      	mov	r2, r3
 8009c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
 8009c56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c5c:	e841 2300 	strex	r3, r2, [r1]
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1e6      	bne.n	8009c36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	613b      	str	r3, [r7, #16]
   return(result);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f023 0301 	bic.w	r3, r3, #1
 8009c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3308      	adds	r3, #8
 8009c86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c88:	623a      	str	r2, [r7, #32]
 8009c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	69f9      	ldr	r1, [r7, #28]
 8009c8e:	6a3a      	ldr	r2, [r7, #32]
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e5      	bne.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e010      	b.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69da      	ldr	r2, [r3, #28]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	bf0c      	ite	eq
 8009cd0:	2301      	moveq	r3, #1
 8009cd2:	2300      	movne	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	f43f af46 	beq.w	8009b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3770      	adds	r7, #112	; 0x70
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e027      	b.n	8009d50 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2224      	movs	r2, #36	; 0x24
 8009d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 0201 	bic.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2220      	movs	r2, #32
 8009d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e02d      	b.n	8009dd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	; 0x24
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0201 	bic.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f84f 	bl	8009e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e02d      	b.n	8009e4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2224      	movs	r2, #36	; 0x24
 8009dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 0201 	bic.w	r2, r2, #1
 8009e16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f811 	bl	8009e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d108      	bne.n	8009e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e74:	e031      	b.n	8009eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e76:	2308      	movs	r3, #8
 8009e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	0e5b      	lsrs	r3, r3, #25
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	0f5b      	lsrs	r3, r3, #29
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	7b3a      	ldrb	r2, [r7, #12]
 8009ea2:	4911      	ldr	r1, [pc, #68]	; (8009ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ea4:	5c8a      	ldrb	r2, [r1, r2]
 8009ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eaa:	7b3a      	ldrb	r2, [r7, #12]
 8009eac:	490f      	ldr	r1, [pc, #60]	; (8009eec <UARTEx_SetNbDataToProcess+0x98>)
 8009eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	7b7a      	ldrb	r2, [r7, #13]
 8009ec0:	4909      	ldr	r1, [pc, #36]	; (8009ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ec2:	5c8a      	ldrb	r2, [r1, r2]
 8009ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ec8:	7b7a      	ldrb	r2, [r7, #13]
 8009eca:	4908      	ldr	r1, [pc, #32]	; (8009eec <UARTEx_SetNbDataToProcess+0x98>)
 8009ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	08028a38 	.word	0x08028a38
 8009eec:	08028a40 	.word	0x08028a40

08009ef0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	6812      	ldr	r2, [r2, #0]
 8009f08:	f023 0101 	bic.w	r1, r3, #1
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d102      	bne.n	8009f20 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e001      	b.n	8009f24 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009f30:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009f36:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009f3c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009f42:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009f48:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009f4e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009f54:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009f5a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009f60:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009f66:	4313      	orrs	r3, r2
 8009f68:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009f92:	4b3e      	ldr	r3, [pc, #248]	; (800a08c <FMC_NORSRAM_Init+0x19c>)
 8009f94:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f9c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fa4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009fac:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009fb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	ea02 0103 	and.w	r1, r2, r3
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	4319      	orrs	r1, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fde:	d10c      	bne.n	8009ffa <FMC_NORSRAM_Init+0x10a>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a016:	2b01      	cmp	r3, #1
 800a018:	d12f      	bne.n	800a07a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a026:	431a      	orrs	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b04      	cmp	r3, #4
 800a032:	d014      	beq.n	800a05e <FMC_NORSRAM_Init+0x16e>
 800a034:	2b04      	cmp	r3, #4
 800a036:	d819      	bhi.n	800a06c <FMC_NORSRAM_Init+0x17c>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <FMC_NORSRAM_Init+0x152>
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d007      	beq.n	800a050 <FMC_NORSRAM_Init+0x160>
 800a040:	e014      	b.n	800a06c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	621a      	str	r2, [r3, #32]
        break;
 800a04e:	e015      	b.n	800a07c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	621a      	str	r2, [r3, #32]
        break;
 800a05c:	e00e      	b.n	800a07c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]
        break;
 800a06a:	e007      	b.n	800a07c <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	621a      	str	r2, [r3, #32]
        break;
 800a078:	e000      	b.n	800a07c <FMC_NORSRAM_Init+0x18c>
    }
  }
 800a07a:	bf00      	nop

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	0008fb7f 	.word	0x0008fb7f

0800a090 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	079b      	lsls	r3, r3, #30
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	041b      	lsls	r3, r3, #16
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	051b      	lsls	r3, r3, #20
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	3b02      	subs	r3, #2
 800a0da:	061b      	lsls	r3, r3, #24
 800a0dc:	ea42 0103 	orr.w	r1, r2, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	3201      	adds	r2, #1
 800a0e8:	4319      	orrs	r1, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fc:	d113      	bne.n	800a126 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a106:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	051b      	lsls	r3, r3, #20
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	431a      	orrs	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a148:	d121      	bne.n	800a18e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a152:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	4319      	orrs	r1, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	4319      	orrs	r1, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	079b      	lsls	r3, r3, #30
 800a170:	4319      	orrs	r1, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	4319      	orrs	r1, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	041b      	lsls	r3, r3, #16
 800a17e:	430b      	orrs	r3, r1
 800a180:	ea42 0103 	orr.w	r1, r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a18c:	e005      	b.n	800a19a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b08b      	sub	sp, #44	; 0x2c
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	fa93 f3a3 	rbit	r3, r3
 800a1c2:	613b      	str	r3, [r7, #16]
  return result;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a1ce:	2320      	movs	r3, #32
 800a1d0:	e003      	b.n	800a1da <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	fab3 f383 	clz	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	2103      	movs	r1, #3
 800a1de:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e2:	43db      	mvns	r3, r3
 800a1e4:	401a      	ands	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	fa93 f3a3 	rbit	r3, r3
 800a1f0:	61fb      	str	r3, [r7, #28]
  return result;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a1fc:	2320      	movs	r3, #32
 800a1fe:	e003      	b.n	800a208 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	fab3 f383 	clz	r3, r3
 800a206:	b2db      	uxtb	r3, r3
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	fa01 f303 	lsl.w	r3, r1, r3
 800a210:	431a      	orrs	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	372c      	adds	r7, #44	; 0x2c
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a222:	b480      	push	{r7}
 800a224:	b085      	sub	sp, #20
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	43db      	mvns	r3, r3
 800a236:	401a      	ands	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	431a      	orrs	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	605a      	str	r2, [r3, #4]
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a252:	b480      	push	{r7}
 800a254:	b08b      	sub	sp, #44	; 0x2c
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	fa93 f3a3 	rbit	r3, r3
 800a26c:	613b      	str	r3, [r7, #16]
  return result;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a278:	2320      	movs	r3, #32
 800a27a:	e003      	b.n	800a284 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	fab3 f383 	clz	r3, r3
 800a282:	b2db      	uxtb	r3, r3
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	2103      	movs	r1, #3
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	fa93 f3a3 	rbit	r3, r3
 800a29a:	61fb      	str	r3, [r7, #28]
  return result;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a2a6:	2320      	movs	r3, #32
 800a2a8:	e003      	b.n	800a2b2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	fab3 f383 	clz	r3, r3
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	6879      	ldr	r1, [r7, #4]
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a2c0:	bf00      	nop
 800a2c2:	372c      	adds	r7, #44	; 0x2c
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b08b      	sub	sp, #44	; 0x2c
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68da      	ldr	r2, [r3, #12]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	fa93 f3a3 	rbit	r3, r3
 800a2e6:	613b      	str	r3, [r7, #16]
  return result;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a2f2:	2320      	movs	r3, #32
 800a2f4:	e003      	b.n	800a2fe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	fab3 f383 	clz	r3, r3
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	2103      	movs	r1, #3
 800a302:	fa01 f303 	lsl.w	r3, r1, r3
 800a306:	43db      	mvns	r3, r3
 800a308:	401a      	ands	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	fa93 f3a3 	rbit	r3, r3
 800a314:	61fb      	str	r3, [r7, #28]
  return result;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a320:	2320      	movs	r3, #32
 800a322:	e003      	b.n	800a32c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	fab3 f383 	clz	r3, r3
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	fa01 f303 	lsl.w	r3, r1, r3
 800a334:	431a      	orrs	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	60da      	str	r2, [r3, #12]
}
 800a33a:	bf00      	nop
 800a33c:	372c      	adds	r7, #44	; 0x2c
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a346:	b480      	push	{r7}
 800a348:	b08b      	sub	sp, #44	; 0x2c
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a1a      	ldr	r2, [r3, #32]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	fa93 f3a3 	rbit	r3, r3
 800a360:	613b      	str	r3, [r7, #16]
  return result;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a36c:	2320      	movs	r3, #32
 800a36e:	e003      	b.n	800a378 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	fab3 f383 	clz	r3, r3
 800a376:	b2db      	uxtb	r3, r3
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	210f      	movs	r1, #15
 800a37c:	fa01 f303 	lsl.w	r3, r1, r3
 800a380:	43db      	mvns	r3, r3
 800a382:	401a      	ands	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	fa93 f3a3 	rbit	r3, r3
 800a38e:	61fb      	str	r3, [r7, #28]
  return result;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a39a:	2320      	movs	r3, #32
 800a39c:	e003      	b.n	800a3a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	fab3 f383 	clz	r3, r3
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a3b4:	bf00      	nop
 800a3b6:	372c      	adds	r7, #44	; 0x2c
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b08b      	sub	sp, #44	; 0x2c
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	fa93 f3a3 	rbit	r3, r3
 800a3dc:	613b      	str	r3, [r7, #16]
  return result;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	e003      	b.n	800a3f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	fab3 f383 	clz	r3, r3
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	210f      	movs	r1, #15
 800a3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	401a      	ands	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	fa93 f3a3 	rbit	r3, r3
 800a40c:	61fb      	str	r3, [r7, #28]
  return result;
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a418:	2320      	movs	r3, #32
 800a41a:	e003      	b.n	800a424 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	fab3 f383 	clz	r3, r3
 800a422:	b2db      	uxtb	r3, r3
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	fa01 f303 	lsl.w	r3, r1, r3
 800a42c:	431a      	orrs	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a432:	bf00      	nop
 800a434:	372c      	adds	r7, #44	; 0x2c
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b08a      	sub	sp, #40	; 0x28
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	fa93 f3a3 	rbit	r3, r3
 800a454:	617b      	str	r3, [r7, #20]
  return result;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <LL_GPIO_Init+0x26>
    return 32U;
 800a460:	2320      	movs	r3, #32
 800a462:	e003      	b.n	800a46c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	fab3 f383 	clz	r3, r3
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a46e:	e050      	b.n	800a512 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	2101      	movs	r1, #1
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	fa01 f303 	lsl.w	r3, r1, r3
 800a47c:	4013      	ands	r3, r2
 800a47e:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d042      	beq.n	800a50c <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6a39      	ldr	r1, [r7, #32]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fe8a 	bl	800a1a8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d003      	beq.n	800a4a4 <LL_GPIO_Init+0x66>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d106      	bne.n	800a4b2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6a39      	ldr	r1, [r7, #32]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff fed0 	bl	800a252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6a39      	ldr	r1, [r7, #32]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff ff06 	bl	800a2cc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d121      	bne.n	800a50c <LL_GPIO_Init+0xce>
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	fa93 f3a3 	rbit	r3, r3
 800a4d2:	60bb      	str	r3, [r7, #8]
  return result;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <LL_GPIO_Init+0xa4>
    return 32U;
 800a4de:	2320      	movs	r3, #32
 800a4e0:	e003      	b.n	800a4ea <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	fab3 f383 	clz	r3, r3
 800a4e8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a4ea:	2b07      	cmp	r3, #7
 800a4ec:	d807      	bhi.n	800a4fe <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6a39      	ldr	r1, [r7, #32]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff ff25 	bl	800a346 <LL_GPIO_SetAFPin_0_7>
 800a4fc:	e006      	b.n	800a50c <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	461a      	mov	r2, r3
 800a504:	6a39      	ldr	r1, [r7, #32]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff ff5a 	bl	800a3c0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	3301      	adds	r3, #1
 800a510:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1a7      	bne.n	800a470 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d003      	beq.n	800a530 <LL_GPIO_Init+0xf2>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d107      	bne.n	800a540 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	461a      	mov	r2, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff fe71 	bl	800a222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3728      	adds	r7, #40	; 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a54a:	b084      	sub	sp, #16
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	f107 001c 	add.w	r0, r7, #28
 800a558:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd8f 	bl	800b08c <USB_CoreReset>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
 800a584:	e005      	b.n	800a592 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a59e:	b004      	add	sp, #16
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d165      	bne.n	800a684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4a41      	ldr	r2, [pc, #260]	; (800a6c0 <USB_SetTurnaroundTime+0x11c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d906      	bls.n	800a5ce <USB_SetTurnaroundTime+0x2a>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4a40      	ldr	r2, [pc, #256]	; (800a6c4 <USB_SetTurnaroundTime+0x120>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d202      	bcs.n	800a5ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e062      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4a3c      	ldr	r2, [pc, #240]	; (800a6c4 <USB_SetTurnaroundTime+0x120>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d306      	bcc.n	800a5e4 <USB_SetTurnaroundTime+0x40>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4a3b      	ldr	r2, [pc, #236]	; (800a6c8 <USB_SetTurnaroundTime+0x124>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d202      	bcs.n	800a5e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5de:	230e      	movs	r3, #14
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e057      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4a38      	ldr	r2, [pc, #224]	; (800a6c8 <USB_SetTurnaroundTime+0x124>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d306      	bcc.n	800a5fa <USB_SetTurnaroundTime+0x56>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	4a37      	ldr	r2, [pc, #220]	; (800a6cc <USB_SetTurnaroundTime+0x128>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d202      	bcs.n	800a5fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	e04c      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4a33      	ldr	r2, [pc, #204]	; (800a6cc <USB_SetTurnaroundTime+0x128>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d306      	bcc.n	800a610 <USB_SetTurnaroundTime+0x6c>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4a32      	ldr	r2, [pc, #200]	; (800a6d0 <USB_SetTurnaroundTime+0x12c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d802      	bhi.n	800a610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a60a:	230c      	movs	r3, #12
 800a60c:	617b      	str	r3, [r7, #20]
 800a60e:	e041      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <USB_SetTurnaroundTime+0x12c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d906      	bls.n	800a626 <USB_SetTurnaroundTime+0x82>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	4a2e      	ldr	r2, [pc, #184]	; (800a6d4 <USB_SetTurnaroundTime+0x130>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d802      	bhi.n	800a626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a620:	230b      	movs	r3, #11
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e036      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4a2a      	ldr	r2, [pc, #168]	; (800a6d4 <USB_SetTurnaroundTime+0x130>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d906      	bls.n	800a63c <USB_SetTurnaroundTime+0x98>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	4a29      	ldr	r2, [pc, #164]	; (800a6d8 <USB_SetTurnaroundTime+0x134>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d802      	bhi.n	800a63c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a636:	230a      	movs	r3, #10
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	e02b      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4a26      	ldr	r2, [pc, #152]	; (800a6d8 <USB_SetTurnaroundTime+0x134>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d906      	bls.n	800a652 <USB_SetTurnaroundTime+0xae>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	4a25      	ldr	r2, [pc, #148]	; (800a6dc <USB_SetTurnaroundTime+0x138>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d202      	bcs.n	800a652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a64c:	2309      	movs	r3, #9
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e020      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4a21      	ldr	r2, [pc, #132]	; (800a6dc <USB_SetTurnaroundTime+0x138>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d306      	bcc.n	800a668 <USB_SetTurnaroundTime+0xc4>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <USB_SetTurnaroundTime+0x13c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d802      	bhi.n	800a668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a662:	2308      	movs	r3, #8
 800a664:	617b      	str	r3, [r7, #20]
 800a666:	e015      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4a1d      	ldr	r2, [pc, #116]	; (800a6e0 <USB_SetTurnaroundTime+0x13c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d906      	bls.n	800a67e <USB_SetTurnaroundTime+0xda>
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4a1c      	ldr	r2, [pc, #112]	; (800a6e4 <USB_SetTurnaroundTime+0x140>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d202      	bcs.n	800a67e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a678:	2307      	movs	r3, #7
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e00a      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a67e:	2306      	movs	r3, #6
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e007      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a68a:	2309      	movs	r3, #9
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e001      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a690:	2309      	movs	r3, #9
 800a692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	029b      	lsls	r3, r3, #10
 800a6a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	371c      	adds	r7, #28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	00d8acbf 	.word	0x00d8acbf
 800a6c4:	00e4e1c0 	.word	0x00e4e1c0
 800a6c8:	00f42400 	.word	0x00f42400
 800a6cc:	01067380 	.word	0x01067380
 800a6d0:	011a499f 	.word	0x011a499f
 800a6d4:	01312cff 	.word	0x01312cff
 800a6d8:	014ca43f 	.word	0x014ca43f
 800a6dc:	016e3600 	.word	0x016e3600
 800a6e0:	01a6ab1f 	.word	0x01a6ab1f
 800a6e4:	01e84800 	.word	0x01e84800

0800a6e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 0201 	bic.w	r2, r3, #1
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d115      	bne.n	800a758 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a738:	2001      	movs	r0, #1
 800a73a:	f7f7 fe71 	bl	8002420 <HAL_Delay>
      ms++;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fc11 	bl	800af6c <USB_GetMode>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d01e      	beq.n	800a78e <USB_SetCurrentMode+0x84>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b31      	cmp	r3, #49	; 0x31
 800a754:	d9f0      	bls.n	800a738 <USB_SetCurrentMode+0x2e>
 800a756:	e01a      	b.n	800a78e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d115      	bne.n	800a78a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a76a:	2001      	movs	r0, #1
 800a76c:	f7f7 fe58 	bl	8002420 <HAL_Delay>
      ms++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fbf8 	bl	800af6c <USB_GetMode>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <USB_SetCurrentMode+0x84>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b31      	cmp	r3, #49	; 0x31
 800a786:	d9f0      	bls.n	800a76a <USB_SetCurrentMode+0x60>
 800a788:	e001      	b.n	800a78e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e005      	b.n	800a79a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b32      	cmp	r3, #50	; 0x32
 800a792:	d101      	bne.n	800a798 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b086      	sub	sp, #24
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
 800a7c2:	e009      	b.n	800a7d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3340      	adds	r3, #64	; 0x40
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2b0e      	cmp	r3, #14
 800a7dc:	d9f2      	bls.n	800a7c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11c      	bne.n	800a81e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
 800a7f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	e005      	b.n	800a82a <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a830:	461a      	mov	r2, r3
 800a832:	2300      	movs	r3, #0
 800a834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83c:	4619      	mov	r1, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a844:	461a      	mov	r2, r3
 800a846:	680b      	ldr	r3, [r1, #0]
 800a848:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a84a:	2103      	movs	r1, #3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f95b 	bl	800ab08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a852:	2110      	movs	r1, #16
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f8f3 	bl	800aa40 <USB_FlushTxFifo>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f91f 	bl	800aaa8 <USB_FlushRxFifo>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	461a      	mov	r2, r3
 800a87c:	2300      	movs	r3, #0
 800a87e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	461a      	mov	r2, r3
 800a888:	2300      	movs	r3, #0
 800a88a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a898:	2300      	movs	r3, #0
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	e043      	b.n	800a926 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8b4:	d118      	bne.n	800a8e8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	e013      	b.n	800a8fa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	e008      	b.n	800a8fa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a906:	461a      	mov	r2, r3
 800a908:	2300      	movs	r3, #0
 800a90a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	461a      	mov	r2, r3
 800a91a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a91e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	3301      	adds	r3, #1
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d3b7      	bcc.n	800a89e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
 800a932:	e043      	b.n	800a9bc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a94a:	d118      	bne.n	800a97e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10a      	bne.n	800a968 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95e:	461a      	mov	r2, r3
 800a960:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	e013      	b.n	800a990 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	461a      	mov	r2, r3
 800a976:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e008      	b.n	800a990 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98a:	461a      	mov	r2, r3
 800a98c:	2300      	movs	r3, #0
 800a98e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	461a      	mov	r2, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3b7      	bcc.n	800a934 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a9e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d105      	bne.n	800a9f8 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f043 0210 	orr.w	r2, r3, #16
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	699a      	ldr	r2, [r3, #24]
 800a9fc:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <USB_DevInit+0x298>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d005      	beq.n	800aa16 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	f043 0208 	orr.w	r2, r3, #8
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d107      	bne.n	800aa2c <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa24:	f043 0304 	orr.w	r3, r3, #4
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa38:	b004      	add	sp, #16
 800aa3a:	4770      	bx	lr
 800aa3c:	803c3800 	.word	0x803c3800

0800aa40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4a13      	ldr	r2, [pc, #76]	; (800aaa4 <USB_FlushTxFifo+0x64>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d901      	bls.n	800aa60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e01b      	b.n	800aa98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	daf2      	bge.n	800aa4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	019b      	lsls	r3, r3, #6
 800aa70:	f043 0220 	orr.w	r2, r3, #32
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <USB_FlushTxFifo+0x64>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d901      	bls.n	800aa8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e006      	b.n	800aa98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0320 	and.w	r3, r3, #32
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	d0f0      	beq.n	800aa78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	00030d40 	.word	0x00030d40

0800aaa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4a11      	ldr	r2, [pc, #68]	; (800ab04 <USB_FlushRxFifo+0x5c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d901      	bls.n	800aac6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e018      	b.n	800aaf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	daf2      	bge.n	800aab4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2210      	movs	r2, #16
 800aad6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4a08      	ldr	r2, [pc, #32]	; (800ab04 <USB_FlushRxFifo+0x5c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d901      	bls.n	800aaea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e006      	b.n	800aaf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0310 	and.w	r3, r3, #16
 800aaf2:	2b10      	cmp	r3, #16
 800aaf4:	d0f0      	beq.n	800aad8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	00030d40 	.word	0x00030d40

0800ab08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b087      	sub	sp, #28
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f003 0306 	and.w	r3, r3, #6
 800ab52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	75fb      	strb	r3, [r7, #23]
 800ab5e:	e00a      	b.n	800ab76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d002      	beq.n	800ab6c <USB_GetDevSpeed+0x32>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b06      	cmp	r3, #6
 800ab6a:	d102      	bne.n	800ab72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	75fb      	strb	r3, [r7, #23]
 800ab70:	e001      	b.n	800ab76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab72:	230f      	movs	r3, #15
 800ab74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d14a      	bne.n	800ac38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abba:	f040 8086 	bne.w	800acca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	015a      	lsls	r2, r3, #5
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	7812      	ldrb	r2, [r2, #0]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abe0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	7812      	ldrb	r2, [r2, #0]
 800abf6:	0151      	lsls	r1, r2, #5
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	440a      	add	r2, r1
 800abfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d902      	bls.n	800ac1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
          break;
 800ac1a:	e056      	b.n	800acca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac34:	d0e7      	beq.n	800ac06 <USB_EPStopXfer+0x82>
 800ac36:	e048      	b.n	800acca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac50:	d13b      	bne.n	800acca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	7812      	ldrb	r2, [r2, #0]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	7812      	ldrb	r2, [r2, #0]
 800ac8a:	0151      	lsls	r1, r2, #5
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	440a      	add	r2, r1
 800ac90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f242 7210 	movw	r2, #10000	; 0x2710
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d902      	bls.n	800acb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
          break;
 800acae:	e00c      	b.n	800acca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acc8:	d0e7      	beq.n	800ac9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acd8:	b480      	push	{r7}
 800acda:	b089      	sub	sp, #36	; 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4611      	mov	r1, r2
 800ace4:	461a      	mov	r2, r3
 800ace6:	460b      	mov	r3, r1
 800ace8:	71fb      	strb	r3, [r7, #7]
 800acea:	4613      	mov	r3, r2
 800acec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800acf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d123      	bne.n	800ad46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800acfe:	88bb      	ldrh	r3, [r7, #4]
 800ad00:	3303      	adds	r3, #3
 800ad02:	089b      	lsrs	r3, r3, #2
 800ad04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad06:	2300      	movs	r3, #0
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e018      	b.n	800ad3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	031a      	lsls	r2, r3, #12
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad18:	461a      	mov	r2, r3
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3301      	adds	r3, #1
 800ad36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	61bb      	str	r3, [r7, #24]
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d3e2      	bcc.n	800ad0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3724      	adds	r7, #36	; 0x24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b08b      	sub	sp, #44	; 0x2c
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad6a:	88fb      	ldrh	r3, [r7, #6]
 800ad6c:	089b      	lsrs	r3, r3, #2
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad72:	88fb      	ldrh	r3, [r7, #6]
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	623b      	str	r3, [r7, #32]
 800ad7e:	e014      	b.n	800adaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	3301      	adds	r3, #1
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	3301      	adds	r3, #1
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	3301      	adds	r3, #1
 800ada2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	3301      	adds	r3, #1
 800ada8:	623b      	str	r3, [r7, #32]
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d3e6      	bcc.n	800ad80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800adb2:	8bfb      	ldrh	r3, [r7, #30]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01e      	beq.n	800adf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc2:	461a      	mov	r2, r3
 800adc4:	f107 0310 	add.w	r3, r7, #16
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	fa22 f303 	lsr.w	r3, r2, r3
 800add8:	b2da      	uxtb	r2, r3
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	701a      	strb	r2, [r3, #0]
      i++;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	3301      	adds	r3, #1
 800ade2:	623b      	str	r3, [r7, #32]
      pDest++;
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	3301      	adds	r3, #1
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800adea:	8bfb      	ldrh	r3, [r7, #30]
 800adec:	3b01      	subs	r3, #1
 800adee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800adf0:	8bfb      	ldrh	r3, [r7, #30]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1ea      	bne.n	800adcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	372c      	adds	r7, #44	; 0x2c
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae1e:	f023 0303 	bic.w	r3, r3, #3
 800ae22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae32:	f043 0302 	orr.w	r3, r3, #2
 800ae36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	0c1b      	lsrs	r3, r3, #16
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	4013      	ands	r3, r2
 800aec2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	b29b      	uxth	r3, r3
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	4013      	ands	r3, r2
 800af00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af02:	68bb      	ldr	r3, [r7, #8]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	fa22 f303 	lsr.w	r3, r2, r3
 800af40:	01db      	lsls	r3, r3, #7
 800af42:	b2db      	uxtb	r3, r3
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4013      	ands	r3, r2
 800af5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af5e:	68bb      	ldr	r3, [r7, #8]
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	f003 0301 	and.w	r3, r3, #1
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
	...

0800afd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	460b      	mov	r3, r1
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	333c      	adds	r3, #60	; 0x3c
 800afe6:	3304      	adds	r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	4a26      	ldr	r2, [pc, #152]	; (800b088 <USB_EP0_OutStart+0xb8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d90a      	bls.n	800b00a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b004:	d101      	bne.n	800b00a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	e037      	b.n	800b07a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	461a      	mov	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b038:	f043 0318 	orr.w	r3, r3, #24
 800b03c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b050:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b052:	7afb      	ldrb	r3, [r7, #11]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d10f      	bne.n	800b078 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b072:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	4f54300a 	.word	0x4f54300a

0800b08c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <USB_CoreReset+0x64>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d901      	bls.n	800b0aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e01b      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	daf2      	bge.n	800b098 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f043 0201 	orr.w	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <USB_CoreReset+0x64>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d901      	bls.n	800b0d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e006      	b.n	800b0e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d0f0      	beq.n	800b0c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	00030d40 	.word	0x00030d40

0800b0f4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b096      	sub	sp, #88	; 0x58
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3303      	adds	r3, #3
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b10c:	f3ef 8310 	mrs	r3, PRIMASK
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800b112:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b114:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b116:	b672      	cpsid	i
#endif
    return(int_posture);
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b11a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b11c:	4b55      	ldr	r3, [pc, #340]	; (800b274 <_tx_byte_allocate+0x180>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b12a:	621a      	str	r2, [r3, #32]
 800b12c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	f383 8810 	msr	PRIMASK, r3
}
 800b136:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 f9b2 	bl	800b4a4 <_tx_byte_pool_search>
 800b140:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b142:	f3ef 8310 	mrs	r3, PRIMASK
 800b146:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b14c:	b672      	cpsid	i
    return(int_posture);
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b150:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b15c:	e006      	b.n	800b16c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b164:	429a      	cmp	r2, r3
 800b166:	d101      	bne.n	800b16c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0d9      	beq.n	800b126 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b176:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d008      	beq.n	800b190 <_tx_byte_allocate+0x9c>
 800b17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b180:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	f383 8810 	msr	PRIMASK, r3
}
 800b188:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b18a:	2300      	movs	r3, #0
 800b18c:	653b      	str	r3, [r7, #80]	; 0x50
 800b18e:	e06c      	b.n	800b26a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d061      	beq.n	800b25a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b196:	4b38      	ldr	r3, [pc, #224]	; (800b278 <_tx_byte_allocate+0x184>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d007      	beq.n	800b1ae <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b19e:	2310      	movs	r3, #16
 800b1a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ac:	e05d      	b.n	800b26a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1b0:	4a32      	ldr	r2, [pc, #200]	; (800b27c <_tx_byte_allocate+0x188>)
 800b1b2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b1b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1ee:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1f4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1fa:	675a      	str	r2, [r3, #116]	; 0x74
 800b1fc:	e011      	b.n	800b222 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b208:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b214:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b21a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b220:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b224:	2209      	movs	r2, #9
 800b226:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22a:	2201      	movs	r2, #1
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b234:	4b10      	ldr	r3, [pc, #64]	; (800b278 <_tx_byte_allocate+0x184>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	4a0f      	ldr	r2, [pc, #60]	; (800b278 <_tx_byte_allocate+0x184>)
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b240:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	f383 8810 	msr	PRIMASK, r3
}
 800b248:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b24a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b24c:	f001 fb02 	bl	800c854 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b256:	653b      	str	r3, [r7, #80]	; 0x50
 800b258:	e007      	b.n	800b26a <_tx_byte_allocate+0x176>
 800b25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f383 8810 	msr	PRIMASK, r3
}
 800b264:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b266:	2310      	movs	r3, #16
 800b268:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3758      	adds	r7, #88	; 0x58
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	2004cddc 	.word	0x2004cddc
 800b278:	2004ce74 	.word	0x2004ce74
 800b27c:	0800b281 	.word	0x0800b281

0800b280 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08e      	sub	sp, #56	; 0x38
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b28a:	f3ef 8310 	mrs	r3, PRIMASK
 800b28e:	623b      	str	r3, [r7, #32]
    return(posture);
 800b290:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b292:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b294:	b672      	cpsid	i
    return(int_posture);
 800b296:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b298:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b29e:	4a33      	ldr	r2, [pc, #204]	; (800b36c <_tx_byte_pool_cleanup+0xec>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d158      	bne.n	800b356 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d152      	bne.n	800b356 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d04c      	beq.n	800b356 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a2b      	ldr	r2, [pc, #172]	; (800b370 <_tx_byte_pool_cleanup+0xf0>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d147      	bne.n	800b356 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d043      	beq.n	800b356 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	1e5a      	subs	r2, r3, #1
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d103      	bne.n	800b2f2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	625a      	str	r2, [r3, #36]	; 0x24
 800b2f0:	e013      	b.n	800b31a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b302:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b308:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d102      	bne.n	800b31a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b318:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d119      	bne.n	800b356 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2210      	movs	r2, #16
 800b326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b32a:	4b12      	ldr	r3, [pc, #72]	; (800b374 <_tx_byte_pool_cleanup+0xf4>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3301      	adds	r3, #1
 800b330:	4a10      	ldr	r2, [pc, #64]	; (800b374 <_tx_byte_pool_cleanup+0xf4>)
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f383 8810 	msr	PRIMASK, r3
}
 800b33e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 f987 	bl	800c654 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b346:	f3ef 8310 	mrs	r3, PRIMASK
 800b34a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b34c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b34e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b350:	b672      	cpsid	i
    return(int_posture);
 800b352:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b354:	637b      	str	r3, [r7, #52]	; 0x34
 800b356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b358:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f383 8810 	msr	PRIMASK, r3
}
 800b360:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b362:	bf00      	nop
 800b364:	3738      	adds	r7, #56	; 0x38
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	0800b281 	.word	0x0800b281
 800b370:	42595445 	.word	0x42595445
 800b374:	2004ce74 	.word	0x2004ce74

0800b378 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08e      	sub	sp, #56	; 0x38
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b386:	2234      	movs	r2, #52	; 0x34
 800b388:	2100      	movs	r1, #0
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f01b facc 	bl	8026928 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	f023 0303 	bic.w	r3, r3, #3
 800b396:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f1a3 0208 	sub.w	r2, r3, #8
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	3b04      	subs	r3, #4
 800b3d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b402:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	3304      	adds	r3, #4
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	4a1f      	ldr	r2, [pc, #124]	; (800b494 <_tx_byte_pool_create+0x11c>)
 800b416:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b41e:	f3ef 8310 	mrs	r3, PRIMASK
 800b422:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b424:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b426:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b428:	b672      	cpsid	i
    return(int_posture);
 800b42a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4a19      	ldr	r2, [pc, #100]	; (800b498 <_tx_byte_pool_create+0x120>)
 800b432:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b434:	4b19      	ldr	r3, [pc, #100]	; (800b49c <_tx_byte_pool_create+0x124>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b43c:	4a18      	ldr	r2, [pc, #96]	; (800b4a0 <_tx_byte_pool_create+0x128>)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	631a      	str	r2, [r3, #48]	; 0x30
 800b44e:	e011      	b.n	800b474 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b450:	4b13      	ldr	r3, [pc, #76]	; (800b4a0 <_tx_byte_pool_create+0x128>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a3a      	ldr	r2, [r7, #32]
 800b472:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b474:	4b09      	ldr	r3, [pc, #36]	; (800b49c <_tx_byte_pool_create+0x124>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3301      	adds	r3, #1
 800b47a:	4a08      	ldr	r2, [pc, #32]	; (800b49c <_tx_byte_pool_create+0x124>)
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f383 8810 	msr	PRIMASK, r3
}
 800b488:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3738      	adds	r7, #56	; 0x38
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	ffffeeee 	.word	0xffffeeee
 800b498:	42595445 	.word	0x42595445
 800b49c:	2004cdd0 	.word	0x2004cdd0
 800b4a0:	2004cdcc 	.word	0x2004cdcc

0800b4a4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b097      	sub	sp, #92	; 0x5c
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b4ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4bc:	b672      	cpsid	i
    return(int_posture);
 800b4be:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b4c0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	3b02      	subs	r3, #2
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d308      	bcc.n	800b4ec <_tx_byte_pool_search+0x48>
 800b4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	f383 8810 	msr	PRIMASK, r3
}
 800b4e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	653b      	str	r3, [r7, #80]	; 0x50
 800b4ea:	e0dd      	b.n	800b6a8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b4ec:	4b72      	ldr	r3, [pc, #456]	; (800b6b8 <_tx_byte_pool_search+0x214>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4f6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	3301      	adds	r3, #1
 800b504:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b506:	2300      	movs	r3, #0
 800b508:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b50c:	3304      	adds	r3, #4
 800b50e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a68      	ldr	r2, [pc, #416]	; (800b6bc <_tx_byte_pool_search+0x218>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d143      	bne.n	800b5a6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b520:	2b00      	cmp	r3, #0
 800b522:	d104      	bne.n	800b52e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b528:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b530:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b542:	3b08      	subs	r3, #8
 800b544:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d257      	bcs.n	800b5fe <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b54e:	2300      	movs	r3, #0
 800b550:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b554:	3304      	adds	r3, #4
 800b556:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a56      	ldr	r2, [pc, #344]	; (800b6bc <_tx_byte_pool_search+0x218>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d113      	bne.n	800b58e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	1e5a      	subs	r2, r3, #1
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b582:	429a      	cmp	r2, r3
 800b584:	d114      	bne.n	800b5b0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b58a:	615a      	str	r2, [r3, #20]
 800b58c:	e010      	b.n	800b5b0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d008      	beq.n	800b5b0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a4:	e004      	b.n	800b5b0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5be:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f383 8810 	msr	PRIMASK, r3
}
 800b5c6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5cc:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b5ce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b5d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5d2:	b672      	cpsid	i
    return(int_posture);
 800b5d4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b5d6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d009      	beq.n	800b5f6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5f4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d186      	bne.n	800b50a <_tx_byte_pool_search+0x66>
 800b5fc:	e000      	b.n	800b600 <_tx_byte_pool_search+0x15c>
                    break;
 800b5fe:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d048      	beq.n	800b698 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	2b13      	cmp	r3, #19
 800b60e:	d91e      	bls.n	800b64e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	3308      	adds	r3, #8
 800b614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b616:	4413      	add	r3, r2
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b620:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	3304      	adds	r3, #4
 800b62e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b636:	4a21      	ldr	r2, [pc, #132]	; (800b6bc <_tx_byte_pool_search+0x218>)
 800b638:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b648:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	3304      	adds	r3, #4
 800b652:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689a      	ldr	r2, [r3, #8]
 800b662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	f1a3 0208 	sub.w	r2, r3, #8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b674:	429a      	cmp	r2, r3
 800b676:	d105      	bne.n	800b684 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b67a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	615a      	str	r2, [r3, #20]
 800b684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b686:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f383 8810 	msr	PRIMASK, r3
}
 800b68e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b692:	3308      	adds	r3, #8
 800b694:	653b      	str	r3, [r7, #80]	; 0x50
 800b696:	e007      	b.n	800b6a8 <_tx_byte_pool_search+0x204>
 800b698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b69a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f383 8810 	msr	PRIMASK, r3
}
 800b6a2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	375c      	adds	r7, #92	; 0x5c
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	2004cddc 	.word	0x2004cddc
 800b6bc:	ffffeeee 	.word	0xffffeeee

0800b6c0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b6c4:	f000 ff04 	bl	800c4d0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b6c8:	f001 fb1c 	bl	800cd04 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b6cc:	4b12      	ldr	r3, [pc, #72]	; (800b718 <_tx_initialize_high_level+0x58>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	4b12      	ldr	r3, [pc, #72]	; (800b71c <_tx_initialize_high_level+0x5c>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b6d8:	4b11      	ldr	r3, [pc, #68]	; (800b720 <_tx_initialize_high_level+0x60>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	4b11      	ldr	r3, [pc, #68]	; (800b724 <_tx_initialize_high_level+0x64>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b6e4:	4b10      	ldr	r3, [pc, #64]	; (800b728 <_tx_initialize_high_level+0x68>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	4b10      	ldr	r3, [pc, #64]	; (800b72c <_tx_initialize_high_level+0x6c>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b6f0:	4b0f      	ldr	r3, [pc, #60]	; (800b730 <_tx_initialize_high_level+0x70>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <_tx_initialize_high_level+0x74>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b6fc:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <_tx_initialize_high_level+0x78>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <_tx_initialize_high_level+0x7c>)
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b708:	4b0d      	ldr	r3, [pc, #52]	; (800b740 <_tx_initialize_high_level+0x80>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <_tx_initialize_high_level+0x84>)
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]
#endif
}
 800b714:	bf00      	nop
 800b716:	bd80      	pop	{r7, pc}
 800b718:	2004cda4 	.word	0x2004cda4
 800b71c:	2004cda8 	.word	0x2004cda8
 800b720:	2004cdac 	.word	0x2004cdac
 800b724:	2004cdb0 	.word	0x2004cdb0
 800b728:	2004cdb4 	.word	0x2004cdb4
 800b72c:	2004cdb8 	.word	0x2004cdb8
 800b730:	2004cdc4 	.word	0x2004cdc4
 800b734:	2004cdc8 	.word	0x2004cdc8
 800b738:	2004cdcc 	.word	0x2004cdcc
 800b73c:	2004cdd0 	.word	0x2004cdd0
 800b740:	2004cdbc 	.word	0x2004cdbc
 800b744:	2004cdc0 	.word	0x2004cdc0

0800b748 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <_tx_initialize_kernel_enter+0x48>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800b754:	d00c      	beq.n	800b770 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b756:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <_tx_initialize_kernel_enter+0x48>)
 800b758:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b75c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b75e:	f7f4 fd89 	bl	8000274 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b762:	f7ff ffad 	bl	800b6c0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b766:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <_tx_initialize_kernel_enter+0x4c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3301      	adds	r3, #1
 800b76c:	4a09      	ldr	r2, [pc, #36]	; (800b794 <_tx_initialize_kernel_enter+0x4c>)
 800b76e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b770:	4b07      	ldr	r3, [pc, #28]	; (800b790 <_tx_initialize_kernel_enter+0x48>)
 800b772:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800b776:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <_tx_initialize_kernel_enter+0x50>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7f5 f827 	bl	80007d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b782:	4b03      	ldr	r3, [pc, #12]	; (800b790 <_tx_initialize_kernel_enter+0x48>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b788:	f7f4 fdb0 	bl	80002ec <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b78c:	bf00      	nop
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	20025814 	.word	0x20025814
 800b794:	2004ce74 	.word	0x2004ce74
 800b798:	2004cdd4 	.word	0x2004cdd4

0800b79c <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	; 0x38
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7aa:	623b      	str	r3, [r7, #32]
    return(posture);
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b7ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7b0:	b672      	cpsid	i
    return(int_posture);
 800b7b2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800b7b4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ba:	4a37      	ldr	r2, [pc, #220]	; (800b898 <_tx_queue_cleanup+0xfc>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d161      	bne.n	800b884 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d15b      	bne.n	800b884 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d055      	beq.n	800b884 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a2f      	ldr	r2, [pc, #188]	; (800b89c <_tx_queue_cleanup+0x100>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d150      	bne.n	800b884 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d04c      	beq.n	800b884 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	2b00      	cmp	r3, #0
 800b804:	d103      	bne.n	800b80e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	2200      	movs	r2, #0
 800b80a:	629a      	str	r2, [r3, #40]	; 0x28
 800b80c:	e013      	b.n	800b836 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b812:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b81e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b824:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d102      	bne.n	800b836 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b834:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	d122      	bne.n	800b884 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	220b      	movs	r2, #11
 800b84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b84e:	e003      	b.n	800b858 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	220a      	movs	r2, #10
 800b854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b858:	4b11      	ldr	r3, [pc, #68]	; (800b8a0 <_tx_queue_cleanup+0x104>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3301      	adds	r3, #1
 800b85e:	4a10      	ldr	r2, [pc, #64]	; (800b8a0 <_tx_queue_cleanup+0x104>)
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b864:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f383 8810 	msr	PRIMASK, r3
}
 800b86c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fef0 	bl	800c654 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b874:	f3ef 8310 	mrs	r3, PRIMASK
 800b878:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b87a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b87c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b87e:	b672      	cpsid	i
    return(int_posture);
 800b880:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b882:	637b      	str	r3, [r7, #52]	; 0x34
 800b884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b886:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b890:	bf00      	nop
 800b892:	3738      	adds	r7, #56	; 0x38
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	0800b79d 	.word	0x0800b79d
 800b89c:	51554555 	.word	0x51554555
 800b8a0:	2004ce74 	.word	0x2004ce74

0800b8a4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08c      	sub	sp, #48	; 0x30
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800b8b2:	2238      	movs	r2, #56	; 0x38
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f01b f836 	bl	8026928 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	699a      	ldr	r2, [r3, #24]
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	441a      	add	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b902:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b908:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b90a:	f3ef 8310 	mrs	r3, PRIMASK
 800b90e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b910:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b912:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b914:	b672      	cpsid	i
    return(int_posture);
 800b916:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800b918:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	4a18      	ldr	r2, [pc, #96]	; (800b980 <_tx_queue_create+0xdc>)
 800b91e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800b920:	4b18      	ldr	r3, [pc, #96]	; (800b984 <_tx_queue_create+0xe0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d109      	bne.n	800b93c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800b928:	4a17      	ldr	r2, [pc, #92]	; (800b988 <_tx_queue_create+0xe4>)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	635a      	str	r2, [r3, #52]	; 0x34
 800b93a:	e011      	b.n	800b960 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800b93c:	4b12      	ldr	r3, [pc, #72]	; (800b988 <_tx_queue_create+0xe4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a3a      	ldr	r2, [r7, #32]
 800b95e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800b960:	4b08      	ldr	r3, [pc, #32]	; (800b984 <_tx_queue_create+0xe0>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3301      	adds	r3, #1
 800b966:	4a07      	ldr	r2, [pc, #28]	; (800b984 <_tx_queue_create+0xe0>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f383 8810 	msr	PRIMASK, r3
}
 800b974:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3730      	adds	r7, #48	; 0x30
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	51554555 	.word	0x51554555
 800b984:	2004cdb0 	.word	0x2004cdb0
 800b988:	2004cdac 	.word	0x2004cdac

0800b98c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b096      	sub	sp, #88	; 0x58
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b998:	2300      	movs	r3, #0
 800b99a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b99c:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800b9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9a6:	b672      	cpsid	i
    return(int_posture);
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8136 	beq.w	800bc28 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d13c      	bne.n	800ba3c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800b9d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9d4:	1d13      	adds	r3, r2, #4
 800b9d6:	657b      	str	r3, [r7, #84]	; 0x54
 800b9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9da:	1d19      	adds	r1, r3, #4
 800b9dc:	6539      	str	r1, [r7, #80]	; 0x50
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d90e      	bls.n	800ba06 <_tx_queue_receive+0x7a>
 800b9e8:	e007      	b.n	800b9fa <_tx_queue_receive+0x6e>
 800b9ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9ec:	1d13      	adds	r3, r2, #4
 800b9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800b9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f2:	1d19      	adds	r1, r3, #4
 800b9f4:	6539      	str	r1, [r7, #80]	; 0x50
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f1      	bne.n	800b9ea <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d102      	bne.n	800ba16 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba1a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	1e5a      	subs	r2, r3, #1
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	611a      	str	r2, [r3, #16]
 800ba30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	f383 8810 	msr	PRIMASK, r3
}
 800ba3a:	e163      	b.n	800bd04 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800ba42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d153      	bne.n	800baf4 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800ba4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba50:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800ba5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba5e:	1d13      	adds	r3, r2, #4
 800ba60:	657b      	str	r3, [r7, #84]	; 0x54
 800ba62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba64:	1d19      	adds	r1, r3, #4
 800ba66:	6539      	str	r1, [r7, #80]	; 0x50
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d90e      	bls.n	800ba90 <_tx_queue_receive+0x104>
 800ba72:	e007      	b.n	800ba84 <_tx_queue_receive+0xf8>
 800ba74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba76:	1d13      	adds	r3, r2, #4
 800ba78:	657b      	str	r3, [r7, #84]	; 0x54
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba7c:	1d19      	adds	r1, r3, #4
 800ba7e:	6539      	str	r1, [r7, #80]	; 0x50
 800ba80:	6812      	ldr	r2, [r2, #0]
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba86:	3b01      	subs	r3, #1
 800ba88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1f1      	bne.n	800ba74 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800ba90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba92:	3b01      	subs	r3, #1
 800ba94:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ba96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	629a      	str	r2, [r3, #40]	; 0x28
 800baa2:	e00e      	b.n	800bac2 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800baa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa8:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baae:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baba:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800babc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bac6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baca:	2200      	movs	r2, #0
 800bacc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bad6:	4b8e      	ldr	r3, [pc, #568]	; (800bd10 <_tx_queue_receive+0x384>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	4a8c      	ldr	r2, [pc, #560]	; (800bd10 <_tx_queue_receive+0x384>)
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	f383 8810 	msr	PRIMASK, r3
}
 800baea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800baec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800baee:	f000 fdb1 	bl	800c654 <_tx_thread_system_resume>
 800baf2:	e107      	b.n	800bd04 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb06:	1d13      	adds	r3, r2, #4
 800bb08:	657b      	str	r3, [r7, #84]	; 0x54
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0c:	1d19      	adds	r1, r3, #4
 800bb0e:	6539      	str	r1, [r7, #80]	; 0x50
 800bb10:	6812      	ldr	r2, [r2, #0]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d90e      	bls.n	800bb38 <_tx_queue_receive+0x1ac>
 800bb1a:	e007      	b.n	800bb2c <_tx_queue_receive+0x1a0>
 800bb1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb1e:	1d13      	adds	r3, r2, #4
 800bb20:	657b      	str	r3, [r7, #84]	; 0x54
 800bb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb24:	1d19      	adds	r1, r3, #4
 800bb26:	6539      	str	r1, [r7, #80]	; 0x50
 800bb28:	6812      	ldr	r2, [r2, #0]
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f1      	bne.n	800bb1c <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d102      	bne.n	800bb48 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb4c:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800bb4e:	4b70      	ldr	r3, [pc, #448]	; (800bd10 <_tx_queue_receive+0x384>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3301      	adds	r3, #1
 800bb54:	4a6e      	ldr	r2, [pc, #440]	; (800bd10 <_tx_queue_receive+0x384>)
 800bb56:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800bb58:	4b6d      	ldr	r3, [pc, #436]	; (800bd10 <_tx_queue_receive+0x384>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	4a6c      	ldr	r2, [pc, #432]	; (800bd10 <_tx_queue_receive+0x384>)
 800bb60:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bb62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb66:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bb74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb76:	1d13      	adds	r3, r2, #4
 800bb78:	657b      	str	r3, [r7, #84]	; 0x54
 800bb7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb7c:	1d19      	adds	r1, r3, #4
 800bb7e:	6539      	str	r1, [r7, #80]	; 0x50
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d90e      	bls.n	800bba8 <_tx_queue_receive+0x21c>
 800bb8a:	e007      	b.n	800bb9c <_tx_queue_receive+0x210>
 800bb8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb8e:	1d13      	adds	r3, r2, #4
 800bb90:	657b      	str	r3, [r7, #84]	; 0x54
 800bb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb94:	1d19      	adds	r1, r3, #4
 800bb96:	6539      	str	r1, [r7, #80]	; 0x50
 800bb98:	6812      	ldr	r2, [r2, #0]
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1f1      	bne.n	800bb8c <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	69db      	ldr	r3, [r3, #28]
 800bbac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d102      	bne.n	800bbb8 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbbc:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800bbc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d103      	bne.n	800bbd8 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	629a      	str	r2, [r3, #40]	; 0x28
 800bbd6:	e00e      	b.n	800bbf6 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbdc:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbe2:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbee:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf4:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbfa:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfe:	2200      	movs	r2, #0
 800bc00:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc0a:	4b41      	ldr	r3, [pc, #260]	; (800bd10 <_tx_queue_receive+0x384>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	4a3f      	ldr	r2, [pc, #252]	; (800bd10 <_tx_queue_receive+0x384>)
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	f383 8810 	msr	PRIMASK, r3
}
 800bc1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800bc20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc22:	f000 fd17 	bl	800c654 <_tx_thread_system_resume>
 800bc26:	e06d      	b.n	800bd04 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d062      	beq.n	800bcf4 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bc2e:	4b38      	ldr	r3, [pc, #224]	; (800bd10 <_tx_queue_receive+0x384>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <_tx_queue_receive+0x2bc>
 800bc36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc38:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	f383 8810 	msr	PRIMASK, r3
}
 800bc40:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800bc42:	230a      	movs	r3, #10
 800bc44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc46:	e05d      	b.n	800bd04 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bc48:	4b32      	ldr	r3, [pc, #200]	; (800bd14 <_tx_queue_receive+0x388>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc50:	4a31      	ldr	r2, [pc, #196]	; (800bd18 <_tx_queue_receive+0x38c>)
 800bc52:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800bc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d109      	bne.n	800bc90 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc80:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc86:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc8c:	675a      	str	r2, [r3, #116]	; 0x74
 800bc8e:	e011      	b.n	800bcb4 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc9a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bca6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcac:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcb2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb6:	1c5a      	adds	r2, r3, #1
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcbe:	2205      	movs	r2, #5
 800bcc0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bcc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bcce:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <_tx_queue_receive+0x384>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	4a0e      	ldr	r2, [pc, #56]	; (800bd10 <_tx_queue_receive+0x384>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcda:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	f383 8810 	msr	PRIMASK, r3
}
 800bce2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bce4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bce6:	f000 fdb5 	bl	800c854 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcf2:	e007      	b.n	800bd04 <_tx_queue_receive+0x378>
 800bcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcf6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f383 8810 	msr	PRIMASK, r3
}
 800bcfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800bd00:	230a      	movs	r3, #10
 800bd02:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 800bd04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3758      	adds	r7, #88	; 0x58
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	2004ce74 	.word	0x2004ce74
 800bd14:	2004cddc 	.word	0x2004cddc
 800bd18:	0800b79d 	.word	0x0800b79d

0800bd1c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b094      	sub	sp, #80	; 0x50
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bd34:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd36:	b672      	cpsid	i
    return(int_posture);
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 809b 	beq.w	800be82 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d13c      	bne.n	800bdcc <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	1e5a      	subs	r2, r3, #1
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800bd76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd78:	1d13      	adds	r3, r2, #4
 800bd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7e:	1d19      	adds	r1, r3, #4
 800bd80:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd82:	6812      	ldr	r2, [r2, #0]
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d90e      	bls.n	800bdaa <_tx_queue_send+0x8e>
 800bd8c:	e007      	b.n	800bd9e <_tx_queue_send+0x82>
 800bd8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd90:	1d13      	adds	r3, r2, #4
 800bd92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd96:	1d19      	adds	r1, r3, #4
 800bd98:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda0:	3b01      	subs	r3, #1
 800bda2:	647b      	str	r3, [r7, #68]	; 0x44
 800bda4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f1      	bne.n	800bd8e <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	69db      	ldr	r3, [r3, #28]
 800bdae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d102      	bne.n	800bdba <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdbe:	625a      	str	r2, [r3, #36]	; 0x24
 800bdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	f383 8810 	msr	PRIMASK, r3
}
 800bdca:	e0c8      	b.n	800bf5e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd0:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d103      	bne.n	800bde6 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	629a      	str	r2, [r3, #40]	; 0x28
 800bde4:	e012      	b.n	800be0c <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800bde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf8:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be04:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be0a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be10:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800be12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be14:	2200      	movs	r2, #0
 800be16:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be20:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800be28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be2a:	1d13      	adds	r3, r2, #4
 800be2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be30:	1d19      	adds	r1, r3, #4
 800be32:	64b9      	str	r1, [r7, #72]	; 0x48
 800be34:	6812      	ldr	r2, [r2, #0]
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d90e      	bls.n	800be5c <_tx_queue_send+0x140>
 800be3e:	e007      	b.n	800be50 <_tx_queue_send+0x134>
 800be40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be42:	1d13      	adds	r3, r2, #4
 800be44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be48:	1d19      	adds	r1, r3, #4
 800be4a:	64b9      	str	r1, [r7, #72]	; 0x48
 800be4c:	6812      	ldr	r2, [r2, #0]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be52:	3b01      	subs	r3, #1
 800be54:	647b      	str	r3, [r7, #68]	; 0x44
 800be56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f1      	bne.n	800be40 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800be64:	4b40      	ldr	r3, [pc, #256]	; (800bf68 <_tx_queue_send+0x24c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	4a3f      	ldr	r2, [pc, #252]	; (800bf68 <_tx_queue_send+0x24c>)
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be70:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	f383 8810 	msr	PRIMASK, r3
}
 800be78:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800be7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be7c:	f000 fbea 	bl	800c654 <_tx_thread_system_resume>
 800be80:	e06d      	b.n	800bf5e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d062      	beq.n	800bf4e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800be88:	4b37      	ldr	r3, [pc, #220]	; (800bf68 <_tx_queue_send+0x24c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d008      	beq.n	800bea2 <_tx_queue_send+0x186>
 800be90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	f383 8810 	msr	PRIMASK, r3
}
 800be9a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800be9c:	230b      	movs	r3, #11
 800be9e:	643b      	str	r3, [r7, #64]	; 0x40
 800bea0:	e05d      	b.n	800bf5e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bea2:	4b32      	ldr	r3, [pc, #200]	; (800bf6c <_tx_queue_send+0x250>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	4a31      	ldr	r2, [pc, #196]	; (800bf70 <_tx_queue_send+0x254>)
 800beac:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800bec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800becc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d109      	bne.n	800beea <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beda:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bee0:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bee6:	675a      	str	r2, [r3, #116]	; 0x74
 800bee8:	e011      	b.n	800bf0e <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bef4:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800befa:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800befc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf00:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf06:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf0c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800bf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf18:	2205      	movs	r2, #5
 800bf1a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1e:	2201      	movs	r2, #1
 800bf20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800bf28:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <_tx_queue_send+0x24c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	4a0e      	ldr	r2, [pc, #56]	; (800bf68 <_tx_queue_send+0x24c>)
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f383 8810 	msr	PRIMASK, r3
}
 800bf3c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800bf3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf40:	f000 fc88 	bl	800c854 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800bf44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf4c:	e007      	b.n	800bf5e <_tx_queue_send+0x242>
 800bf4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf50:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f383 8810 	msr	PRIMASK, r3
}
 800bf58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800bf5a:	230b      	movs	r3, #11
 800bf5c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800bf5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3750      	adds	r7, #80	; 0x50
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	2004ce74 	.word	0x2004ce74
 800bf6c:	2004cddc 	.word	0x2004cddc
 800bf70:	0800b79d 	.word	0x0800b79d

0800bf74 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08e      	sub	sp, #56	; 0x38
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf7e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf82:	623b      	str	r3, [r7, #32]
    return(posture);
 800bf84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bf86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf88:	b672      	cpsid	i
    return(int_posture);
 800bf8a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf92:	4a33      	ldr	r2, [pc, #204]	; (800c060 <_tx_semaphore_cleanup+0xec>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d158      	bne.n	800c04a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d152      	bne.n	800c04a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d04c      	beq.n	800c04a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a2b      	ldr	r2, [pc, #172]	; (800c064 <_tx_semaphore_cleanup+0xf0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d147      	bne.n	800c04a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d043      	beq.n	800c04a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d103      	bne.n	800bfe6 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	60da      	str	r2, [r3, #12]
 800bfe4:	e013      	b.n	800c00e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfea:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bffc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d102      	bne.n	800c00e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c012:	2b06      	cmp	r3, #6
 800c014:	d119      	bne.n	800c04a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	220d      	movs	r2, #13
 800c01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <_tx_semaphore_cleanup+0xf4>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	4a10      	ldr	r2, [pc, #64]	; (800c068 <_tx_semaphore_cleanup+0xf4>)
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f383 8810 	msr	PRIMASK, r3
}
 800c032:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fb0d 	bl	800c654 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c03a:	f3ef 8310 	mrs	r3, PRIMASK
 800c03e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c040:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c042:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c044:	b672      	cpsid	i
    return(int_posture);
 800c046:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c048:	637b      	str	r3, [r7, #52]	; 0x34
 800c04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f383 8810 	msr	PRIMASK, r3
}
 800c054:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c056:	bf00      	nop
 800c058:	3738      	adds	r7, #56	; 0x38
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	0800bf75 	.word	0x0800bf75
 800c064:	53454d41 	.word	0x53454d41
 800c068:	2004ce74 	.word	0x2004ce74

0800c06c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08a      	sub	sp, #40	; 0x28
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800c078:	221c      	movs	r2, #28
 800c07a:	2100      	movs	r1, #0
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f01a fc53 	bl	8026928 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c08e:	f3ef 8310 	mrs	r3, PRIMASK
 800c092:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c094:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c096:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c098:	b672      	cpsid	i
    return(int_posture);
 800c09a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4a18      	ldr	r2, [pc, #96]	; (800c104 <_tx_semaphore_create+0x98>)
 800c0a2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800c0a4:	4b18      	ldr	r3, [pc, #96]	; (800c108 <_tx_semaphore_create+0x9c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d109      	bne.n	800c0c0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800c0ac:	4a17      	ldr	r2, [pc, #92]	; (800c10c <_tx_semaphore_create+0xa0>)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	619a      	str	r2, [r3, #24]
 800c0be:	e011      	b.n	800c0e4 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800c0c0:	4b12      	ldr	r3, [pc, #72]	; (800c10c <_tx_semaphore_create+0xa0>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	69fa      	ldr	r2, [r7, #28]
 800c0dc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6a3a      	ldr	r2, [r7, #32]
 800c0e2:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800c0e4:	4b08      	ldr	r3, [pc, #32]	; (800c108 <_tx_semaphore_create+0x9c>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	4a07      	ldr	r2, [pc, #28]	; (800c108 <_tx_semaphore_create+0x9c>)
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f383 8810 	msr	PRIMASK, r3
}
 800c0f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3728      	adds	r7, #40	; 0x28
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	53454d41 	.word	0x53454d41
 800c108:	2004cda8 	.word	0x2004cda8
 800c10c:	2004cda4 	.word	0x2004cda4

0800c110 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08e      	sub	sp, #56	; 0x38
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800c11a:	2300      	movs	r3, #0
 800c11c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c11e:	f3ef 8310 	mrs	r3, PRIMASK
 800c122:	623b      	str	r3, [r7, #32]
    return(posture);
 800c124:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c126:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c128:	b672      	cpsid	i
    return(int_posture);
 800c12a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800c12c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	1e5a      	subs	r2, r3, #1
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	609a      	str	r2, [r3, #8]
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f383 8810 	msr	PRIMASK, r3
}
 800c14a:	e068      	b.n	800c21e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d05d      	beq.n	800c20e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800c152:	4b35      	ldr	r3, [pc, #212]	; (800c228 <_tx_semaphore_get+0x118>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d008      	beq.n	800c16c <_tx_semaphore_get+0x5c>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f383 8810 	msr	PRIMASK, r3
}
 800c164:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800c166:	230d      	movs	r3, #13
 800c168:	637b      	str	r3, [r7, #52]	; 0x34
 800c16a:	e058      	b.n	800c21e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c16c:	4b2f      	ldr	r3, [pc, #188]	; (800c22c <_tx_semaphore_get+0x11c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	4a2e      	ldr	r2, [pc, #184]	; (800c230 <_tx_semaphore_get+0x120>)
 800c176:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c198:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c19e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1a4:	675a      	str	r2, [r3, #116]	; 0x74
 800c1a6:	e011      	b.n	800c1cc <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1be:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ca:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	2206      	movs	r2, #6
 800c1da:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	2201      	movs	r2, #1
 800c1e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <_tx_semaphore_get+0x118>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	4a0e      	ldr	r2, [pc, #56]	; (800c228 <_tx_semaphore_get+0x118>)
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f383 8810 	msr	PRIMASK, r3
}
 800c1fc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800c1fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c200:	f000 fb28 	bl	800c854 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c20a:	637b      	str	r3, [r7, #52]	; 0x34
 800c20c:	e007      	b.n	800c21e <_tx_semaphore_get+0x10e>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f383 8810 	msr	PRIMASK, r3
}
 800c218:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800c21a:	230d      	movs	r3, #13
 800c21c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800c21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c220:	4618      	mov	r0, r3
 800c222:	3738      	adds	r7, #56	; 0x38
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	2004ce74 	.word	0x2004ce74
 800c22c:	2004cddc 	.word	0x2004cddc
 800c230:	0800bf75 	.word	0x0800bf75

0800c234 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08c      	sub	sp, #48	; 0x30
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c23c:	f3ef 8310 	mrs	r3, PRIMASK
 800c240:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c242:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c244:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c246:	b672      	cpsid	i
    return(int_posture);
 800c248:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800c24a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	1c5a      	adds	r2, r3, #1
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	609a      	str	r2, [r3, #8]
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	f383 8810 	msr	PRIMASK, r3
}
 800c26c:	e033      	b.n	800c2d6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	3b01      	subs	r3, #1
 800c278:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	60da      	str	r2, [r3, #12]
 800c286:	e00e      	b.n	800c2a6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c28c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a3a      	ldr	r2, [r7, #32]
 800c292:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c298:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	6a3a      	ldr	r2, [r7, #32]
 800c2a4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2aa:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800c2ba:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <_tx_semaphore_put+0xac>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	4a07      	ldr	r2, [pc, #28]	; (800c2e0 <_tx_semaphore_put+0xac>)
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f383 8810 	msr	PRIMASK, r3
}
 800c2ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c2d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2d2:	f000 f9bf 	bl	800c654 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3730      	adds	r7, #48	; 0x30
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	2004ce74 	.word	0x2004ce74

0800c2e4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b092      	sub	sp, #72	; 0x48
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c2f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2f8:	21ef      	movs	r1, #239	; 0xef
 800c2fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c2fc:	f01a fb14 	bl	8026928 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c300:	22b0      	movs	r2, #176	; 0xb0
 800c302:	2100      	movs	r1, #0
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f01a fb0f 	bl	8026928 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c320:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c326:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c32c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c33a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c340:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2220      	movs	r2, #32
 800c346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c350:	3b01      	subs	r3, #1
 800c352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c354:	4413      	add	r3, r2
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c35c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c35e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c362:	429a      	cmp	r2, r3
 800c364:	d007      	beq.n	800c376 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c374:	e006      	b.n	800c384 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c37a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c380:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2203      	movs	r2, #3
 800c388:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	4a48      	ldr	r2, [pc, #288]	; (800c4b0 <_tx_thread_create+0x1cc>)
 800c38e:	655a      	str	r2, [r3, #84]	; 0x54
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c396:	4947      	ldr	r1, [pc, #284]	; (800c4b4 <_tx_thread_create+0x1d0>)
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	f7f4 f80d 	bl	80003b8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c39e:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3a8:	b672      	cpsid	i
    return(int_posture);
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c3ac:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	4a41      	ldr	r2, [pc, #260]	; (800c4b8 <_tx_thread_create+0x1d4>)
 800c3b2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c3b4:	4b41      	ldr	r3, [pc, #260]	; (800c4bc <_tx_thread_create+0x1d8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10b      	bne.n	800c3d4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c3bc:	4a40      	ldr	r2, [pc, #256]	; (800c4c0 <_tx_thread_create+0x1dc>)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c3d2:	e016      	b.n	800c402 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c3d4:	4b3a      	ldr	r3, [pc, #232]	; (800c4c0 <_tx_thread_create+0x1dc>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c402:	4b2e      	ldr	r3, [pc, #184]	; (800c4bc <_tx_thread_create+0x1d8>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3301      	adds	r3, #1
 800c408:	4a2c      	ldr	r2, [pc, #176]	; (800c4bc <_tx_thread_create+0x1d8>)
 800c40a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c40c:	4b2d      	ldr	r3, [pc, #180]	; (800c4c4 <_tx_thread_create+0x1e0>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	4a2c      	ldr	r2, [pc, #176]	; (800c4c4 <_tx_thread_create+0x1e0>)
 800c414:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800c416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d129      	bne.n	800c470 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c41c:	f3ef 8305 	mrs	r3, IPSR
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800c422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c424:	4b28      	ldr	r3, [pc, #160]	; (800c4c8 <_tx_thread_create+0x1e4>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4313      	orrs	r3, r2
 800c42a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c42e:	d30d      	bcc.n	800c44c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800c430:	4b26      	ldr	r3, [pc, #152]	; (800c4cc <_tx_thread_create+0x1e8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800c436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d009      	beq.n	800c450 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800c43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c440:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800c442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c448:	63da      	str	r2, [r3, #60]	; 0x3c
 800c44a:	e001      	b.n	800c450 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800c44c:	2300      	movs	r3, #0
 800c44e:	647b      	str	r3, [r7, #68]	; 0x44
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	f383 8810 	msr	PRIMASK, r3
}
 800c45a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f000 f8f9 	bl	800c654 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800c462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c464:	2b00      	cmp	r3, #0
 800c466:	d01e      	beq.n	800c4a6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800c468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c46a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c46c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c46e:	e01a      	b.n	800c4a6 <_tx_thread_create+0x1c2>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f383 8810 	msr	PRIMASK, r3
}
 800c47a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c47c:	f3ef 8310 	mrs	r3, PRIMASK
 800c480:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c482:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c484:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c486:	b672      	cpsid	i
    return(int_posture);
 800c488:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800c48c:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <_tx_thread_create+0x1e0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3b01      	subs	r3, #1
 800c492:	4a0c      	ldr	r2, [pc, #48]	; (800c4c4 <_tx_thread_create+0x1e0>)
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	f383 8810 	msr	PRIMASK, r3
}
 800c4a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c4a2:	f000 f89d 	bl	800c5e0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3748      	adds	r7, #72	; 0x48
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0800cb29 	.word	0x0800cb29
 800c4b4:	0800c549 	.word	0x0800c549
 800c4b8:	54485244 	.word	0x54485244
 800c4bc:	2004cde8 	.word	0x2004cde8
 800c4c0:	2004cde4 	.word	0x2004cde4
 800c4c4:	2004ce74 	.word	0x2004ce74
 800c4c8:	20025814 	.word	0x20025814
 800c4cc:	2004cde0 	.word	0x2004cde0

0800c4d0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800c4d4:	4b12      	ldr	r3, [pc, #72]	; (800c520 <_tx_thread_initialize+0x50>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <_tx_thread_initialize+0x54>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	4b11      	ldr	r3, [pc, #68]	; (800c528 <_tx_thread_initialize+0x58>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c4e6:	4b11      	ldr	r3, [pc, #68]	; (800c52c <_tx_thread_initialize+0x5c>)
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800c4ec:	2280      	movs	r2, #128	; 0x80
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	480f      	ldr	r0, [pc, #60]	; (800c530 <_tx_thread_initialize+0x60>)
 800c4f2:	f01a fa19 	bl	8026928 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <_tx_thread_initialize+0x64>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <_tx_thread_initialize+0x68>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <_tx_thread_initialize+0x6c>)
 800c504:	2200      	movs	r2, #0
 800c506:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800c508:	4b0d      	ldr	r3, [pc, #52]	; (800c540 <_tx_thread_initialize+0x70>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <_tx_thread_initialize+0x74>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800c516:	4a0b      	ldr	r2, [pc, #44]	; (800c544 <_tx_thread_initialize+0x74>)
 800c518:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800c51a:	bf00      	nop
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	2004cddc 	.word	0x2004cddc
 800c524:	2004cde0 	.word	0x2004cde0
 800c528:	2004cdec 	.word	0x2004cdec
 800c52c:	2004cdf0 	.word	0x2004cdf0
 800c530:	2004cdf4 	.word	0x2004cdf4
 800c534:	2004cde4 	.word	0x2004cde4
 800c538:	2004cde8 	.word	0x2004cde8
 800c53c:	2004ce74 	.word	0x2004ce74
 800c540:	2004ce78 	.word	0x2004ce78
 800c544:	2004ce7c 	.word	0x2004ce7c

0800c548 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c54e:	4b21      	ldr	r3, [pc, #132]	; (800c5d4 <_tx_thread_shell_entry+0x8c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c55c:	4610      	mov	r0, r2
 800c55e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800c560:	4b1d      	ldr	r3, [pc, #116]	; (800c5d8 <_tx_thread_shell_entry+0x90>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d003      	beq.n	800c570 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800c568:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <_tx_thread_shell_entry+0x90>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	69f8      	ldr	r0, [r7, #28]
 800c56e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c570:	f3ef 8310 	mrs	r3, PRIMASK
 800c574:	607b      	str	r3, [r7, #4]
    return(posture);
 800c576:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c578:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c57a:	b672      	cpsid	i
    return(int_posture);
 800c57c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800c57e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	2201      	movs	r2, #1
 800c584:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	2201      	movs	r2, #1
 800c58a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2200      	movs	r2, #0
 800c590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c592:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <_tx_thread_shell_entry+0x94>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3301      	adds	r3, #1
 800c598:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <_tx_thread_shell_entry+0x94>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	f383 8810 	msr	PRIMASK, r3
}
 800c5a6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800c5a8:	f3ef 8314 	mrs	r3, CONTROL
 800c5ac:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800c5ae:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f023 0304 	bic.w	r3, r3, #4
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f383 8814 	msr	CONTROL, r3
}
 800c5c4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800c5c6:	69f8      	ldr	r0, [r7, #28]
 800c5c8:	f000 f944 	bl	800c854 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c5cc:	bf00      	nop
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	2004cddc 	.word	0x2004cddc
 800c5d8:	2004ce78 	.word	0x2004ce78
 800c5dc:	2004ce74 	.word	0x2004ce74

0800c5e0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b089      	sub	sp, #36	; 0x24
 800c5e4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c5e6:	4b17      	ldr	r3, [pc, #92]	; (800c644 <_tx_thread_system_preempt_check+0x64>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d121      	bne.n	800c636 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c5f2:	4b15      	ldr	r3, [pc, #84]	; (800c648 <_tx_thread_system_preempt_check+0x68>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800c5f8:	4b14      	ldr	r3, [pc, #80]	; (800c64c <_tx_thread_system_preempt_check+0x6c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	429a      	cmp	r2, r3
 800c604:	d017      	beq.n	800c636 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c606:	4b12      	ldr	r3, [pc, #72]	; (800c650 <_tx_thread_system_preempt_check+0x70>)
 800c608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c60e:	f3ef 8305 	mrs	r3, IPSR
 800c612:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c614:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10c      	bne.n	800c634 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c61a:	f3ef 8310 	mrs	r3, PRIMASK
 800c61e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c620:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800c622:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c624:	b662      	cpsie	i
}
 800c626:	bf00      	nop
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f383 8810 	msr	PRIMASK, r3
}
 800c632:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800c634:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800c636:	bf00      	nop
 800c638:	3724      	adds	r7, #36	; 0x24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	2004ce74 	.word	0x2004ce74
 800c648:	2004cddc 	.word	0x2004cddc
 800c64c:	2004cde0 	.word	0x2004cde0
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b096      	sub	sp, #88	; 0x58
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c65c:	f3ef 8310 	mrs	r3, PRIMASK
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800c662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800c664:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800c666:	b672      	cpsid	i
    return(int_posture);
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c66a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c670:	2b00      	cmp	r3, #0
 800c672:	d005      	beq.n	800c680 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	334c      	adds	r3, #76	; 0x4c
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fc21 	bl	800cec0 <_tx_timer_system_deactivate>
 800c67e:	e002      	b.n	800c686 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c686:	4b6c      	ldr	r3, [pc, #432]	; (800c838 <_tx_thread_system_resume+0x1e4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	4a6a      	ldr	r2, [pc, #424]	; (800c838 <_tx_thread_system_resume+0x1e4>)
 800c68e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 8083 	bne.w	800c7a0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 8097 	beq.w	800c7d2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d172      	bne.n	800c792 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800c6b8:	4a60      	ldr	r2, [pc, #384]	; (800c83c <_tx_thread_system_resume+0x1e8>)
 800c6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800c6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d154      	bne.n	800c772 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800c6c8:	495c      	ldr	r1, [pc, #368]	; (800c83c <_tx_thread_system_resume+0x1e8>)
 800c6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800c6de:	2201      	movs	r2, #1
 800c6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800c6e8:	4b55      	ldr	r3, [pc, #340]	; (800c840 <_tx_thread_system_resume+0x1ec>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	4a53      	ldr	r2, [pc, #332]	; (800c840 <_tx_thread_system_resume+0x1ec>)
 800c6f2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800c6f4:	4b53      	ldr	r3, [pc, #332]	; (800c844 <_tx_thread_system_resume+0x1f0>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d269      	bcs.n	800c7d2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800c6fe:	4a51      	ldr	r2, [pc, #324]	; (800c844 <_tx_thread_system_resume+0x1f0>)
 800c700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c702:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c704:	4b50      	ldr	r3, [pc, #320]	; (800c848 <_tx_thread_system_resume+0x1f4>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d103      	bne.n	800c718 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c710:	4a4d      	ldr	r2, [pc, #308]	; (800c848 <_tx_thread_system_resume+0x1f4>)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	e05c      	b.n	800c7d2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c71c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c71e:	429a      	cmp	r2, r3
 800c720:	d257      	bcs.n	800c7d2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c722:	4a49      	ldr	r2, [pc, #292]	; (800c848 <_tx_thread_system_resume+0x1f4>)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c72a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	f383 8810 	msr	PRIMASK, r3
}
 800c732:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c734:	4b40      	ldr	r3, [pc, #256]	; (800c838 <_tx_thread_system_resume+0x1e4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d174      	bne.n	800c82a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c740:	4b42      	ldr	r3, [pc, #264]	; (800c84c <_tx_thread_system_resume+0x1f8>)
 800c742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c746:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c748:	f3ef 8305 	mrs	r3, IPSR
 800c74c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10c      	bne.n	800c76e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c754:	f3ef 8310 	mrs	r3, PRIMASK
 800c758:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800c75c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c75e:	b662      	cpsie	i
}
 800c760:	bf00      	nop
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	f383 8810 	msr	PRIMASK, r3
}
 800c76c:	bf00      	nop
}
 800c76e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c770:	e05b      	b.n	800c82a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c788:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c78e:	621a      	str	r2, [r3, #32]
 800c790:	e01f      	b.n	800c7d2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2203      	movs	r2, #3
 800c79c:	631a      	str	r2, [r3, #48]	; 0x30
 800c79e:	e018      	b.n	800c7d2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d014      	beq.n	800c7d2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d010      	beq.n	800c7d2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d106      	bne.n	800c7c6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800c7c4:	e005      	b.n	800c7d2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2203      	movs	r2, #3
 800c7d0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c7d2:	4b1f      	ldr	r3, [pc, #124]	; (800c850 <_tx_thread_system_resume+0x1fc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	f383 8810 	msr	PRIMASK, r3
}
 800c7e2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c7e4:	4b18      	ldr	r3, [pc, #96]	; (800c848 <_tx_thread_system_resume+0x1f4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d020      	beq.n	800c830 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c7ee:	4b12      	ldr	r3, [pc, #72]	; (800c838 <_tx_thread_system_resume+0x1e4>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800c7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d11a      	bne.n	800c830 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c7fa:	4b14      	ldr	r3, [pc, #80]	; (800c84c <_tx_thread_system_resume+0x1f8>)
 800c7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c800:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c802:	f3ef 8305 	mrs	r3, IPSR
 800c806:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c808:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10f      	bne.n	800c82e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c80e:	f3ef 8310 	mrs	r3, PRIMASK
 800c812:	613b      	str	r3, [r7, #16]
    return(posture);
 800c814:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c816:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c818:	b662      	cpsie	i
}
 800c81a:	bf00      	nop
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f383 8810 	msr	PRIMASK, r3
}
 800c826:	bf00      	nop
}
 800c828:	e001      	b.n	800c82e <_tx_thread_system_resume+0x1da>
                                return;
 800c82a:	bf00      	nop
 800c82c:	e000      	b.n	800c830 <_tx_thread_system_resume+0x1dc>
 800c82e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c830:	3758      	adds	r7, #88	; 0x58
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2004ce74 	.word	0x2004ce74
 800c83c:	2004cdf4 	.word	0x2004cdf4
 800c840:	2004cdec 	.word	0x2004cdec
 800c844:	2004cdf0 	.word	0x2004cdf0
 800c848:	2004cde0 	.word	0x2004cde0
 800c84c:	e000ed04 	.word	0xe000ed04
 800c850:	2004cddc 	.word	0x2004cddc

0800c854 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b09e      	sub	sp, #120	; 0x78
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c85c:	4b81      	ldr	r3, [pc, #516]	; (800ca64 <_tx_thread_system_suspend+0x210>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c862:	f3ef 8310 	mrs	r3, PRIMASK
 800c866:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c86a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c86c:	b672      	cpsid	i
    return(int_posture);
 800c86e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c870:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c876:	429a      	cmp	r2, r3
 800c878:	d112      	bne.n	800c8a0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c87e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d008      	beq.n	800c898 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88c:	d004      	beq.n	800c898 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	334c      	adds	r3, #76	; 0x4c
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fab2 	bl	800cdfc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	69db      	ldr	r3, [r3, #28]
 800c89c:	4a72      	ldr	r2, [pc, #456]	; (800ca68 <_tx_thread_system_suspend+0x214>)
 800c89e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c8a0:	4b72      	ldr	r3, [pc, #456]	; (800ca6c <_tx_thread_system_suspend+0x218>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	4a71      	ldr	r2, [pc, #452]	; (800ca6c <_tx_thread_system_suspend+0x218>)
 800c8a8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	f040 80a6 	bne.w	800ca00 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c8c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d015      	beq.n	800c8fa <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8d8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8de:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c8e0:	4a63      	ldr	r2, [pc, #396]	; (800ca70 <_tx_thread_system_suspend+0x21c>)
 800c8e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d157      	bne.n	800c99e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c8ee:	4960      	ldr	r1, [pc, #384]	; (800ca70 <_tx_thread_system_suspend+0x21c>)
 800c8f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c8f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8f8:	e051      	b.n	800c99e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c8fa:	4a5d      	ldr	r2, [pc, #372]	; (800ca70 <_tx_thread_system_suspend+0x21c>)
 800c8fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8fe:	2100      	movs	r1, #0
 800c900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c904:	2201      	movs	r2, #1
 800c906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c90e:	4b59      	ldr	r3, [pc, #356]	; (800ca74 <_tx_thread_system_suspend+0x220>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c914:	43db      	mvns	r3, r3
 800c916:	4013      	ands	r3, r2
 800c918:	4a56      	ldr	r2, [pc, #344]	; (800ca74 <_tx_thread_system_suspend+0x220>)
 800c91a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c91c:	2300      	movs	r3, #0
 800c91e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c920:	4b54      	ldr	r3, [pc, #336]	; (800ca74 <_tx_thread_system_suspend+0x220>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d12b      	bne.n	800c984 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c92c:	4b52      	ldr	r3, [pc, #328]	; (800ca78 <_tx_thread_system_suspend+0x224>)
 800c92e:	2220      	movs	r2, #32
 800c930:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c932:	4b52      	ldr	r3, [pc, #328]	; (800ca7c <_tx_thread_system_suspend+0x228>)
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c93a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	f383 8810 	msr	PRIMASK, r3
}
 800c942:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c944:	4b49      	ldr	r3, [pc, #292]	; (800ca6c <_tx_thread_system_suspend+0x218>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800c94a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f040 8081 	bne.w	800ca54 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c952:	4b4b      	ldr	r3, [pc, #300]	; (800ca80 <_tx_thread_system_suspend+0x22c>)
 800c954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c958:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c95a:	f3ef 8305 	mrs	r3, IPSR
 800c95e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800c960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10c      	bne.n	800c980 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c966:	f3ef 8310 	mrs	r3, PRIMASK
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800c96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800c96e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c970:	b662      	cpsie	i
}
 800c972:	bf00      	nop
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97a:	f383 8810 	msr	PRIMASK, r3
}
 800c97e:	bf00      	nop
}
 800c980:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c982:	e067      	b.n	800ca54 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c986:	fa93 f3a3 	rbit	r3, r3
 800c98a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c98e:	fab3 f383 	clz	r3, r3
 800c992:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c998:	4413      	add	r3, r2
 800c99a:	4a37      	ldr	r2, [pc, #220]	; (800ca78 <_tx_thread_system_suspend+0x224>)
 800c99c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c99e:	4b37      	ldr	r3, [pc, #220]	; (800ca7c <_tx_thread_system_suspend+0x228>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d12b      	bne.n	800ca00 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c9a8:	4b33      	ldr	r3, [pc, #204]	; (800ca78 <_tx_thread_system_suspend+0x224>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a30      	ldr	r2, [pc, #192]	; (800ca70 <_tx_thread_system_suspend+0x21c>)
 800c9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b2:	4a32      	ldr	r2, [pc, #200]	; (800ca7c <_tx_thread_system_suspend+0x228>)
 800c9b4:	6013      	str	r3, [r2, #0]
 800c9b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9b8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9bc:	f383 8810 	msr	PRIMASK, r3
}
 800c9c0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c9c2:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <_tx_thread_system_suspend+0x218>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d144      	bne.n	800ca58 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c9ce:	4b2c      	ldr	r3, [pc, #176]	; (800ca80 <_tx_thread_system_suspend+0x22c>)
 800c9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9d6:	f3ef 8305 	mrs	r3, IPSR
 800c9da:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10c      	bne.n	800c9fc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c9ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c9ec:	b662      	cpsie	i
}
 800c9ee:	bf00      	nop
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	f383 8810 	msr	PRIMASK, r3
}
 800c9fa:	bf00      	nop
}
 800c9fc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c9fe:	e02b      	b.n	800ca58 <_tx_thread_system_suspend+0x204>
 800ca00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca02:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	f383 8810 	msr	PRIMASK, r3
}
 800ca0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800ca0c:	4b1b      	ldr	r3, [pc, #108]	; (800ca7c <_tx_thread_system_suspend+0x228>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d022      	beq.n	800ca5c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ca16:	4b15      	ldr	r3, [pc, #84]	; (800ca6c <_tx_thread_system_suspend+0x218>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800ca1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d11c      	bne.n	800ca5c <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <_tx_thread_system_suspend+0x22c>)
 800ca24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca28:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca2a:	f3ef 8305 	mrs	r3, IPSR
 800ca2e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ca30:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10c      	bne.n	800ca50 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca36:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3a:	617b      	str	r3, [r7, #20]
    return(posture);
 800ca3c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800ca3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ca40:	b662      	cpsie	i
}
 800ca42:	bf00      	nop
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f383 8810 	msr	PRIMASK, r3
}
 800ca4e:	bf00      	nop
}
 800ca50:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800ca52:	e003      	b.n	800ca5c <_tx_thread_system_suspend+0x208>
                return;
 800ca54:	bf00      	nop
 800ca56:	e002      	b.n	800ca5e <_tx_thread_system_suspend+0x20a>
            return;
 800ca58:	bf00      	nop
 800ca5a:	e000      	b.n	800ca5e <_tx_thread_system_suspend+0x20a>
    return;
 800ca5c:	bf00      	nop
}
 800ca5e:	3778      	adds	r7, #120	; 0x78
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	2004cddc 	.word	0x2004cddc
 800ca68:	2004d3e0 	.word	0x2004d3e0
 800ca6c:	2004ce74 	.word	0x2004ce74
 800ca70:	2004cdf4 	.word	0x2004cdf4
 800ca74:	2004cdec 	.word	0x2004cdec
 800ca78:	2004cdf0 	.word	0x2004cdf0
 800ca7c:	2004cde0 	.word	0x2004cde0
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ca8a:	4b21      	ldr	r3, [pc, #132]	; (800cb10 <_tx_thread_time_slice+0x8c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca90:	f3ef 8310 	mrs	r3, PRIMASK
 800ca94:	60fb      	str	r3, [r7, #12]
    return(posture);
 800ca96:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800ca98:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca9a:	b672      	cpsid	i
    return(int_posture);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800ca9e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800caa0:	4b1c      	ldr	r3, [pc, #112]	; (800cb14 <_tx_thread_time_slice+0x90>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d024      	beq.n	800caf6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d120      	bne.n	800caf6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	69da      	ldr	r2, [r3, #28]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	699b      	ldr	r3, [r3, #24]
 800cac0:	4a15      	ldr	r2, [pc, #84]	; (800cb18 <_tx_thread_time_slice+0x94>)
 800cac2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	6a1b      	ldr	r3, [r3, #32]
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d013      	beq.n	800caf6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d10d      	bne.n	800caf6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	6a12      	ldr	r2, [r2, #32]
 800cae2:	490e      	ldr	r1, [pc, #56]	; (800cb1c <_tx_thread_time_slice+0x98>)
 800cae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800cae8:	4b0d      	ldr	r3, [pc, #52]	; (800cb20 <_tx_thread_time_slice+0x9c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <_tx_thread_time_slice+0x98>)
 800caee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf2:	4a0c      	ldr	r2, [pc, #48]	; (800cb24 <_tx_thread_time_slice+0xa0>)
 800caf4:	6013      	str	r3, [r2, #0]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f383 8810 	msr	PRIMASK, r3
}
 800cb00:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800cb02:	bf00      	nop
 800cb04:	371c      	adds	r7, #28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	2004cddc 	.word	0x2004cddc
 800cb14:	2004ce84 	.word	0x2004ce84
 800cb18:	2004d3e0 	.word	0x2004d3e0
 800cb1c:	2004cdf4 	.word	0x2004cdf4
 800cb20:	2004cdf0 	.word	0x2004cdf0
 800cb24:	2004cde0 	.word	0x2004cde0

0800cb28 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb34:	f3ef 8310 	mrs	r3, PRIMASK
 800cb38:	617b      	str	r3, [r7, #20]
    return(posture);
 800cb3a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cb3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb3e:	b672      	cpsid	i
    return(int_posture);
 800cb40:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800cb42:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d10e      	bne.n	800cb6a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800cb4c:	4b13      	ldr	r3, [pc, #76]	; (800cb9c <_tx_thread_timeout+0x74>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3301      	adds	r3, #1
 800cb52:	4a12      	ldr	r2, [pc, #72]	; (800cb9c <_tx_thread_timeout+0x74>)
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	6a3b      	ldr	r3, [r7, #32]
 800cb58:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f383 8810 	msr	PRIMASK, r3
}
 800cb60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800cb62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb64:	f7ff fd76 	bl	800c654 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800cb68:	e013      	b.n	800cb92 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb6e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb76:	61bb      	str	r3, [r7, #24]
 800cb78:	6a3b      	ldr	r3, [r7, #32]
 800cb7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f383 8810 	msr	PRIMASK, r3
}
 800cb82:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	69b9      	ldr	r1, [r7, #24]
 800cb8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb90:	4798      	blx	r3
}
 800cb92:	bf00      	nop
 800cb94:	3728      	adds	r7, #40	; 0x28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	2004ce74 	.word	0x2004ce74

0800cba0 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b088      	sub	sp, #32
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cba8:	f3ef 8310 	mrs	r3, PRIMASK
 800cbac:	617b      	str	r3, [r7, #20]
    return(posture);
 800cbae:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cbb0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbb2:	b672      	cpsid	i
    return(int_posture);
 800cbb4:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800cbb6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800cbc0:	2317      	movs	r3, #23
 800cbc2:	61fb      	str	r3, [r7, #28]
 800cbc4:	e00d      	b.n	800cbe2 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d102      	bne.n	800cbd4 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800cbce:	2317      	movs	r3, #23
 800cbd0:	61fb      	str	r3, [r7, #28]
 800cbd2:	e006      	b.n	800cbe2 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f90f 	bl	800cdfc <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	61fb      	str	r3, [r7, #28]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f383 8810 	msr	PRIMASK, r3
}
 800cbec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800cbee:	69fb      	ldr	r3, [r7, #28]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3720      	adds	r7, #32
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800cc06:	222c      	movs	r2, #44	; 0x2c
 800cc08:	2100      	movs	r1, #0
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f019 fe8c 	bl	8026928 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1a:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc20:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc2e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc32:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cc34:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cc36:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc38:	b672      	cpsid	i
    return(int_posture);
 800cc3a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4a1c      	ldr	r2, [pc, #112]	; (800ccb4 <_tx_timer_create+0xbc>)
 800cc42:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <_tx_timer_create+0xc0>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800cc4c:	4a1b      	ldr	r2, [pc, #108]	; (800ccbc <_tx_timer_create+0xc4>)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	629a      	str	r2, [r3, #40]	; 0x28
 800cc5e:	e011      	b.n	800cc84 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800cc60:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <_tx_timer_create+0xc4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	69fa      	ldr	r2, [r7, #28]
 800cc7c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a3a      	ldr	r2, [r7, #32]
 800cc82:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800cc84:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <_tx_timer_create+0xc0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	4a0b      	ldr	r2, [pc, #44]	; (800ccb8 <_tx_timer_create+0xc0>)
 800cc8c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d104      	bne.n	800cc9e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	3308      	adds	r3, #8
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f8af 	bl	800cdfc <_tx_timer_system_activate>
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	f383 8810 	msr	PRIMASK, r3
}
 800cca8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3728      	adds	r7, #40	; 0x28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	4154494d 	.word	0x4154494d
 800ccb8:	2004cf1c 	.word	0x2004cf1c
 800ccbc:	2004cf18 	.word	0x2004cf18

0800ccc0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccc6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccca:	607b      	str	r3, [r7, #4]
    return(posture);
 800cccc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ccce:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccd0:	b672      	cpsid	i
    return(int_posture);
 800ccd2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800ccd4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800ccd6:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <_tx_timer_expiration_process+0x3c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	4a07      	ldr	r2, [pc, #28]	; (800ccfc <_tx_timer_expiration_process+0x3c>)
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f383 8810 	msr	PRIMASK, r3
}
 800ccea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800ccec:	4804      	ldr	r0, [pc, #16]	; (800cd00 <_tx_timer_expiration_process+0x40>)
 800ccee:	f7ff fcb1 	bl	800c654 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ccf2:	bf00      	nop
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2004ce74 	.word	0x2004ce74
 800cd00:	2004cf24 	.word	0x2004cf24

0800cd04 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b089      	sub	sp, #36	; 0x24
 800cd08:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800cd0a:	4b28      	ldr	r3, [pc, #160]	; (800cdac <_tx_timer_initialize+0xa8>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800cd10:	4b27      	ldr	r3, [pc, #156]	; (800cdb0 <_tx_timer_initialize+0xac>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800cd16:	4b27      	ldr	r3, [pc, #156]	; (800cdb4 <_tx_timer_initialize+0xb0>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800cd1c:	4b26      	ldr	r3, [pc, #152]	; (800cdb8 <_tx_timer_initialize+0xb4>)
 800cd1e:	2200      	movs	r2, #0
 800cd20:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800cd22:	4b26      	ldr	r3, [pc, #152]	; (800cdbc <_tx_timer_initialize+0xb8>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800cd28:	2280      	movs	r2, #128	; 0x80
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4824      	ldr	r0, [pc, #144]	; (800cdc0 <_tx_timer_initialize+0xbc>)
 800cd2e:	f019 fdfb 	bl	8026928 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800cd32:	4b24      	ldr	r3, [pc, #144]	; (800cdc4 <_tx_timer_initialize+0xc0>)
 800cd34:	4a22      	ldr	r2, [pc, #136]	; (800cdc0 <_tx_timer_initialize+0xbc>)
 800cd36:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800cd38:	4b23      	ldr	r3, [pc, #140]	; (800cdc8 <_tx_timer_initialize+0xc4>)
 800cd3a:	4a21      	ldr	r2, [pc, #132]	; (800cdc0 <_tx_timer_initialize+0xbc>)
 800cd3c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800cd3e:	4b23      	ldr	r3, [pc, #140]	; (800cdcc <_tx_timer_initialize+0xc8>)
 800cd40:	4a23      	ldr	r2, [pc, #140]	; (800cdd0 <_tx_timer_initialize+0xcc>)
 800cd42:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800cd44:	4b21      	ldr	r3, [pc, #132]	; (800cdcc <_tx_timer_initialize+0xc8>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4a20      	ldr	r2, [pc, #128]	; (800cdcc <_tx_timer_initialize+0xc8>)
 800cd4c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800cd4e:	4b21      	ldr	r3, [pc, #132]	; (800cdd4 <_tx_timer_initialize+0xd0>)
 800cd50:	4a21      	ldr	r2, [pc, #132]	; (800cdd8 <_tx_timer_initialize+0xd4>)
 800cd52:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800cd54:	4b21      	ldr	r3, [pc, #132]	; (800cddc <_tx_timer_initialize+0xd8>)
 800cd56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd5a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800cd5c:	4b20      	ldr	r3, [pc, #128]	; (800cde0 <_tx_timer_initialize+0xdc>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800cd62:	4b1c      	ldr	r3, [pc, #112]	; (800cdd4 <_tx_timer_initialize+0xd0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a1d      	ldr	r2, [pc, #116]	; (800cddc <_tx_timer_initialize+0xd8>)
 800cd68:	6812      	ldr	r2, [r2, #0]
 800cd6a:	491d      	ldr	r1, [pc, #116]	; (800cde0 <_tx_timer_initialize+0xdc>)
 800cd6c:	6809      	ldr	r1, [r1, #0]
 800cd6e:	481c      	ldr	r0, [pc, #112]	; (800cde0 <_tx_timer_initialize+0xdc>)
 800cd70:	6800      	ldr	r0, [r0, #0]
 800cd72:	2400      	movs	r4, #0
 800cd74:	9405      	str	r4, [sp, #20]
 800cd76:	2400      	movs	r4, #0
 800cd78:	9404      	str	r4, [sp, #16]
 800cd7a:	9003      	str	r0, [sp, #12]
 800cd7c:	9102      	str	r1, [sp, #8]
 800cd7e:	9201      	str	r2, [sp, #4]
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4b18      	ldr	r3, [pc, #96]	; (800cde4 <_tx_timer_initialize+0xe0>)
 800cd84:	4a18      	ldr	r2, [pc, #96]	; (800cde8 <_tx_timer_initialize+0xe4>)
 800cd86:	4919      	ldr	r1, [pc, #100]	; (800cdec <_tx_timer_initialize+0xe8>)
 800cd88:	4819      	ldr	r0, [pc, #100]	; (800cdf0 <_tx_timer_initialize+0xec>)
 800cd8a:	f7ff faab 	bl	800c2e4 <_tx_thread_create>
 800cd8e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e5      	bne.n	800cd62 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800cd96:	4b17      	ldr	r3, [pc, #92]	; (800cdf4 <_tx_timer_initialize+0xf0>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800cd9c:	4b16      	ldr	r3, [pc, #88]	; (800cdf8 <_tx_timer_initialize+0xf4>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd90      	pop	{r4, r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	2004ce80 	.word	0x2004ce80
 800cdb0:	2004d3e0 	.word	0x2004d3e0
 800cdb4:	2004ce84 	.word	0x2004ce84
 800cdb8:	2004cf14 	.word	0x2004cf14
 800cdbc:	2004cf20 	.word	0x2004cf20
 800cdc0:	2004ce88 	.word	0x2004ce88
 800cdc4:	2004cf08 	.word	0x2004cf08
 800cdc8:	2004cf10 	.word	0x2004cf10
 800cdcc:	2004cf0c 	.word	0x2004cf0c
 800cdd0:	2004cf04 	.word	0x2004cf04
 800cdd4:	2004cfd4 	.word	0x2004cfd4
 800cdd8:	2004cfe0 	.word	0x2004cfe0
 800cddc:	2004cfd8 	.word	0x2004cfd8
 800cde0:	2004cfdc 	.word	0x2004cfdc
 800cde4:	4154494d 	.word	0x4154494d
 800cde8:	0800cf31 	.word	0x0800cf31
 800cdec:	080279e8 	.word	0x080279e8
 800cdf0:	2004cf24 	.word	0x2004cf24
 800cdf4:	2004cf18 	.word	0x2004cf18
 800cdf8:	2004cf1c 	.word	0x2004cf1c

0800cdfc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b089      	sub	sp, #36	; 0x24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d04a      	beq.n	800cea6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d046      	beq.n	800cea6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d142      	bne.n	800cea6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	2b20      	cmp	r3, #32
 800ce24:	d902      	bls.n	800ce2c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800ce26:	231f      	movs	r3, #31
 800ce28:	61bb      	str	r3, [r7, #24]
 800ce2a:	e002      	b.n	800ce32 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800ce32:	4b20      	ldr	r3, [pc, #128]	; (800ceb4 <_tx_timer_system_activate+0xb8>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800ce3e:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <_tx_timer_system_activate+0xbc>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69fa      	ldr	r2, [r7, #28]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d30b      	bcc.n	800ce60 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ce48:	4b1b      	ldr	r3, [pc, #108]	; (800ceb8 <_tx_timer_system_activate+0xbc>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	69fa      	ldr	r2, [r7, #28]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	109b      	asrs	r3, r3, #2
 800ce52:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800ce54:	4b19      	ldr	r3, [pc, #100]	; (800cebc <_tx_timer_system_activate+0xc0>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d109      	bne.n	800ce7c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	e011      	b.n	800cea0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	69fa      	ldr	r2, [r7, #28]
 800cea4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800cea6:	bf00      	nop
 800cea8:	3724      	adds	r7, #36	; 0x24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	2004cf10 	.word	0x2004cf10
 800ceb8:	2004cf0c 	.word	0x2004cf0c
 800cebc:	2004cf08 	.word	0x2004cf08

0800cec0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d026      	beq.n	800cf22 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d108      	bne.n	800cef4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d117      	bne.n	800cf1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e013      	b.n	800cf1c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d105      	bne.n	800cf1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	619a      	str	r2, [r3, #24]
    }
}
 800cf22:	bf00      	nop
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
	...

0800cf30 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b098      	sub	sp, #96	; 0x60
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800cf38:	2300      	movs	r3, #0
 800cf3a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4a73      	ldr	r2, [pc, #460]	; (800d10c <_tx_timer_thread_entry+0x1dc>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	f040 80de 	bne.w	800d102 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf46:	f3ef 8310 	mrs	r3, PRIMASK
 800cf4a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800cf4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf50:	b672      	cpsid	i
    return(int_posture);
 800cf52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800cf54:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800cf56:	4b6e      	ldr	r3, [pc, #440]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d003      	beq.n	800cf6c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f107 020c 	add.w	r2, r7, #12
 800cf6a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800cf6c:	4b68      	ldr	r3, [pc, #416]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800cf74:	4b66      	ldr	r3, [pc, #408]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4a65      	ldr	r2, [pc, #404]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf7c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800cf7e:	4b64      	ldr	r3, [pc, #400]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	4b64      	ldr	r3, [pc, #400]	; (800d114 <_tx_timer_thread_entry+0x1e4>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d103      	bne.n	800cf92 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800cf8a:	4b63      	ldr	r3, [pc, #396]	; (800d118 <_tx_timer_thread_entry+0x1e8>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a60      	ldr	r2, [pc, #384]	; (800d110 <_tx_timer_thread_entry+0x1e0>)
 800cf90:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800cf92:	4b62      	ldr	r3, [pc, #392]	; (800d11c <_tx_timer_thread_entry+0x1ec>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf9a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	f383 8810 	msr	PRIMASK, r3
}
 800cfa2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfa4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfa8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfae:	b672      	cpsid	i
    return(int_posture);
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800cfb2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800cfb4:	e07f      	b.n	800d0b6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800cfc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d102      	bne.n	800cfd2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e00e      	b.n	800cff0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800cfd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800cfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfdc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800cfde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800cfe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe6:	f107 020c 	add.w	r2, r7, #12
 800cfea:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800cfec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfee:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800cff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b20      	cmp	r3, #32
 800cff6:	d911      	bls.n	800d01c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800cff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800d000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d002:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800d004:	2300      	movs	r3, #0
 800d006:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d00a:	f107 0208 	add.w	r2, r7, #8
 800d00e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800d010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d014:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800d016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d018:	60bb      	str	r3, [r7, #8]
 800d01a:	e01a      	b.n	800d052 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800d01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800d022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800d028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800d030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d009      	beq.n	800d04c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03a:	f107 0208 	add.w	r2, r7, #8
 800d03e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800d040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d044:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800d046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d048:	60bb      	str	r3, [r7, #8]
 800d04a:	e002      	b.n	800d052 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800d04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d04e:	2200      	movs	r2, #0
 800d050:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800d052:	4a33      	ldr	r2, [pc, #204]	; (800d120 <_tx_timer_thread_entry+0x1f0>)
 800d054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	f383 8810 	msr	PRIMASK, r3
}
 800d062:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800d064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800d06a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d06c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d06e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d070:	f3ef 8310 	mrs	r3, PRIMASK
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d07a:	b672      	cpsid	i
    return(int_posture);
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d07e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800d080:	4b27      	ldr	r3, [pc, #156]	; (800d120 <_tx_timer_thread_entry+0x1f0>)
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d105      	bne.n	800d09a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800d08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d090:	2200      	movs	r2, #0
 800d092:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800d094:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d096:	f7ff feb1 	bl	800cdfc <_tx_timer_system_activate>
 800d09a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d09c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	f383 8810 	msr	PRIMASK, r3
}
 800d0a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0aa:	623b      	str	r3, [r7, #32]
    return(posture);
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d0ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0b0:	b672      	cpsid	i
    return(int_posture);
 800d0b2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f47f af7c 	bne.w	800cfb6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800d0be:	4b17      	ldr	r3, [pc, #92]	; (800d11c <_tx_timer_thread_entry+0x1ec>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d116      	bne.n	800d0f4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800d0c6:	4b17      	ldr	r3, [pc, #92]	; (800d124 <_tx_timer_thread_entry+0x1f4>)
 800d0c8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0cc:	2203      	movs	r2, #3
 800d0ce:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800d0d6:	4b14      	ldr	r3, [pc, #80]	; (800d128 <_tx_timer_thread_entry+0x1f8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	4a12      	ldr	r2, [pc, #72]	; (800d128 <_tx_timer_thread_entry+0x1f8>)
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	f383 8810 	msr	PRIMASK, r3
}
 800d0ea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d0ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d0ee:	f7ff fbb1 	bl	800c854 <_tx_thread_system_suspend>
 800d0f2:	e728      	b.n	800cf46 <_tx_timer_thread_entry+0x16>
 800d0f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	f383 8810 	msr	PRIMASK, r3
}
 800d0fe:	bf00      	nop
            TX_DISABLE
 800d100:	e721      	b.n	800cf46 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800d102:	bf00      	nop
 800d104:	3760      	adds	r7, #96	; 0x60
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	4154494d 	.word	0x4154494d
 800d110:	2004cf10 	.word	0x2004cf10
 800d114:	2004cf0c 	.word	0x2004cf0c
 800d118:	2004cf08 	.word	0x2004cf08
 800d11c:	2004cf14 	.word	0x2004cf14
 800d120:	2004cf20 	.word	0x2004cf20
 800d124:	2004cf24 	.word	0x2004cf24
 800d128:	2004ce74 	.word	0x2004ce74

0800d12c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b08a      	sub	sp, #40	; 0x28
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d13a:	2300      	movs	r3, #0
 800d13c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d102      	bne.n	800d14a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d144:	2302      	movs	r3, #2
 800d146:	627b      	str	r3, [r7, #36]	; 0x24
 800d148:	e029      	b.n	800d19e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a2d      	ldr	r2, [pc, #180]	; (800d204 <_txe_byte_allocate+0xd8>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d002      	beq.n	800d15a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d154:	2302      	movs	r3, #2
 800d156:	627b      	str	r3, [r7, #36]	; 0x24
 800d158:	e021      	b.n	800d19e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d160:	2303      	movs	r3, #3
 800d162:	627b      	str	r3, [r7, #36]	; 0x24
 800d164:	e01b      	b.n	800d19e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d102      	bne.n	800d172 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d16c:	2305      	movs	r3, #5
 800d16e:	627b      	str	r3, [r7, #36]	; 0x24
 800d170:	e015      	b.n	800d19e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d902      	bls.n	800d182 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d17c:	2305      	movs	r3, #5
 800d17e:	627b      	str	r3, [r7, #36]	; 0x24
 800d180:	e00d      	b.n	800d19e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00a      	beq.n	800d19e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d188:	f3ef 8305 	mrs	r3, IPSR
 800d18c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d18e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d190:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <_txe_byte_allocate+0xdc>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4313      	orrs	r3, r2
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d19a:	2304      	movs	r3, #4
 800d19c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d108      	bne.n	800d1b6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d1a4:	4b19      	ldr	r3, [pc, #100]	; (800d20c <_txe_byte_allocate+0xe0>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	4a18      	ldr	r2, [pc, #96]	; (800d210 <_txe_byte_allocate+0xe4>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d101      	bne.n	800d1b6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d1b2:	2313      	movs	r3, #19
 800d1b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d114      	bne.n	800d1e6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1bc:	f3ef 8305 	mrs	r3, IPSR
 800d1c0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d1c2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d1c4:	4b10      	ldr	r3, [pc, #64]	; (800d208 <_txe_byte_allocate+0xdc>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d1ce:	f3ef 8305 	mrs	r3, IPSR
 800d1d2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d1d4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <_txe_byte_allocate+0xdc>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d1e0:	d201      	bcs.n	800d1e6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d1e2:	2313      	movs	r3, #19
 800d1e4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d106      	bne.n	800d1fa <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	68b9      	ldr	r1, [r7, #8]
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7fd ff7e 	bl	800b0f4 <_tx_byte_allocate>
 800d1f8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3728      	adds	r7, #40	; 0x28
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	42595445 	.word	0x42595445
 800d208:	20025814 	.word	0x20025814
 800d20c:	2004cddc 	.word	0x2004cddc
 800d210:	2004cf24 	.word	0x2004cf24

0800d214 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b092      	sub	sp, #72	; 0x48
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d222:	2300      	movs	r3, #0
 800d224:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d22c:	2302      	movs	r3, #2
 800d22e:	647b      	str	r3, [r7, #68]	; 0x44
 800d230:	e075      	b.n	800d31e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800d232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d234:	2b34      	cmp	r3, #52	; 0x34
 800d236:	d002      	beq.n	800d23e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d238:	2302      	movs	r3, #2
 800d23a:	647b      	str	r3, [r7, #68]	; 0x44
 800d23c:	e06f      	b.n	800d31e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d23e:	f3ef 8310 	mrs	r3, PRIMASK
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d248:	b672      	cpsid	i
    return(int_posture);
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d24c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d24e:	4b3b      	ldr	r3, [pc, #236]	; (800d33c <_txe_byte_pool_create+0x128>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	4a39      	ldr	r2, [pc, #228]	; (800d33c <_txe_byte_pool_create+0x128>)
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	f383 8810 	msr	PRIMASK, r3
}
 800d262:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800d264:	4b36      	ldr	r3, [pc, #216]	; (800d340 <_txe_byte_pool_create+0x12c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d26a:	2300      	movs	r3, #0
 800d26c:	643b      	str	r3, [r7, #64]	; 0x40
 800d26e:	e009      	b.n	800d284 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d274:	429a      	cmp	r2, r3
 800d276:	d00b      	beq.n	800d290 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800d278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d280:	3301      	adds	r3, #1
 800d282:	643b      	str	r3, [r7, #64]	; 0x40
 800d284:	4b2f      	ldr	r3, [pc, #188]	; (800d344 <_txe_byte_pool_create+0x130>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d3f0      	bcc.n	800d270 <_txe_byte_pool_create+0x5c>
 800d28e:	e000      	b.n	800d292 <_txe_byte_pool_create+0x7e>
                break;
 800d290:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d292:	f3ef 8310 	mrs	r3, PRIMASK
 800d296:	623b      	str	r3, [r7, #32]
    return(posture);
 800d298:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d29a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d29c:	b672      	cpsid	i
    return(int_posture);
 800d29e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d2a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d2a2:	4b26      	ldr	r3, [pc, #152]	; (800d33c <_txe_byte_pool_create+0x128>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	4a24      	ldr	r2, [pc, #144]	; (800d33c <_txe_byte_pool_create+0x128>)
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	f383 8810 	msr	PRIMASK, r3
}
 800d2b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d2b8:	f7ff f992 	bl	800c5e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d102      	bne.n	800d2ca <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d2c8:	e029      	b.n	800d31e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2d4:	e023      	b.n	800d31e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	2b63      	cmp	r3, #99	; 0x63
 800d2da:	d802      	bhi.n	800d2e2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800d2dc:	2305      	movs	r3, #5
 800d2de:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e0:	e01d      	b.n	800d31e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d2e2:	4b19      	ldr	r3, [pc, #100]	; (800d348 <_txe_byte_pool_create+0x134>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ea:	4a18      	ldr	r2, [pc, #96]	; (800d34c <_txe_byte_pool_create+0x138>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d101      	bne.n	800d2f4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d2f0:	2313      	movs	r3, #19
 800d2f2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2f4:	f3ef 8305 	mrs	r3, IPSR
 800d2f8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d2fa:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2fc:	4b14      	ldr	r3, [pc, #80]	; (800d350 <_txe_byte_pool_create+0x13c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4313      	orrs	r3, r2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00b      	beq.n	800d31e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d306:	f3ef 8305 	mrs	r3, IPSR
 800d30a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d30c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d30e:	4b10      	ldr	r3, [pc, #64]	; (800d350 <_txe_byte_pool_create+0x13c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4313      	orrs	r3, r2
 800d314:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d318:	d201      	bcs.n	800d31e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d31a:	2313      	movs	r3, #19
 800d31c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d320:	2b00      	cmp	r3, #0
 800d322:	d106      	bne.n	800d332 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f7fe f824 	bl	800b378 <_tx_byte_pool_create>
 800d330:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d334:	4618      	mov	r0, r3
 800d336:	3748      	adds	r7, #72	; 0x48
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	2004ce74 	.word	0x2004ce74
 800d340:	2004cdcc 	.word	0x2004cdcc
 800d344:	2004cdd0 	.word	0x2004cdd0
 800d348:	2004cddc 	.word	0x2004cddc
 800d34c:	2004cf24 	.word	0x2004cf24
 800d350:	20025814 	.word	0x20025814

0800d354 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b094      	sub	sp, #80	; 0x50
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d362:	2300      	movs	r3, #0
 800d364:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d102      	bne.n	800d372 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d36c:	2309      	movs	r3, #9
 800d36e:	647b      	str	r3, [r7, #68]	; 0x44
 800d370:	e083      	b.n	800d47a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800d372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d374:	2b38      	cmp	r3, #56	; 0x38
 800d376:	d002      	beq.n	800d37e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d378:	2309      	movs	r3, #9
 800d37a:	647b      	str	r3, [r7, #68]	; 0x44
 800d37c:	e07d      	b.n	800d47a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d37e:	f3ef 8310 	mrs	r3, PRIMASK
 800d382:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d386:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d388:	b672      	cpsid	i
    return(int_posture);
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d38c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d38e:	4b43      	ldr	r3, [pc, #268]	; (800d49c <_txe_queue_create+0x148>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	3301      	adds	r3, #1
 800d394:	4a41      	ldr	r2, [pc, #260]	; (800d49c <_txe_queue_create+0x148>)
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	f383 8810 	msr	PRIMASK, r3
}
 800d3a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800d3a4:	4b3e      	ldr	r3, [pc, #248]	; (800d4a0 <_txe_queue_create+0x14c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d3ae:	e009      	b.n	800d3c4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d00b      	beq.n	800d3d0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800d3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800d3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d3c4:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <_txe_queue_create+0x150>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d3f0      	bcc.n	800d3b0 <_txe_queue_create+0x5c>
 800d3ce:	e000      	b.n	800d3d2 <_txe_queue_create+0x7e>
                break;
 800d3d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d6:	623b      	str	r3, [r7, #32]
    return(posture);
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d3da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3dc:	b672      	cpsid	i
    return(int_posture);
 800d3de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d3e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d3e2:	4b2e      	ldr	r3, [pc, #184]	; (800d49c <_txe_queue_create+0x148>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	4a2c      	ldr	r2, [pc, #176]	; (800d49c <_txe_queue_create+0x148>)
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	f383 8810 	msr	PRIMASK, r3
}
 800d3f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d3f8:	f7ff f8f2 	bl	800c5e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d400:	429a      	cmp	r2, r3
 800d402:	d102      	bne.n	800d40a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800d404:	2309      	movs	r3, #9
 800d406:	647b      	str	r3, [r7, #68]	; 0x44
 800d408:	e037      	b.n	800d47a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800d410:	2303      	movs	r3, #3
 800d412:	647b      	str	r3, [r7, #68]	; 0x44
 800d414:	e031      	b.n	800d47a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d102      	bne.n	800d422 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800d41c:	2305      	movs	r3, #5
 800d41e:	647b      	str	r3, [r7, #68]	; 0x44
 800d420:	e02b      	b.n	800d47a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b10      	cmp	r3, #16
 800d426:	d902      	bls.n	800d42e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800d428:	2305      	movs	r3, #5
 800d42a:	647b      	str	r3, [r7, #68]	; 0x44
 800d42c:	e025      	b.n	800d47a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800d42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d430:	089b      	lsrs	r3, r3, #2
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	429a      	cmp	r2, r3
 800d436:	d902      	bls.n	800d43e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800d438:	2305      	movs	r3, #5
 800d43a:	647b      	str	r3, [r7, #68]	; 0x44
 800d43c:	e01d      	b.n	800d47a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d43e:	4b1a      	ldr	r3, [pc, #104]	; (800d4a8 <_txe_queue_create+0x154>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	4a19      	ldr	r2, [pc, #100]	; (800d4ac <_txe_queue_create+0x158>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d101      	bne.n	800d450 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d44c:	2313      	movs	r3, #19
 800d44e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d450:	f3ef 8305 	mrs	r3, IPSR
 800d454:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d456:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d458:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <_txe_queue_create+0x15c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d462:	f3ef 8305 	mrs	r3, IPSR
 800d466:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d468:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d46a:	4b11      	ldr	r3, [pc, #68]	; (800d4b0 <_txe_queue_create+0x15c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4313      	orrs	r3, r2
 800d470:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d474:	d201      	bcs.n	800d47a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d476:	2313      	movs	r3, #19
 800d478:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d108      	bne.n	800d492 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800d480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	68b9      	ldr	r1, [r7, #8]
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7fe fa0a 	bl	800b8a4 <_tx_queue_create>
 800d490:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d494:	4618      	mov	r0, r3
 800d496:	3748      	adds	r7, #72	; 0x48
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	2004ce74 	.word	0x2004ce74
 800d4a0:	2004cdac 	.word	0x2004cdac
 800d4a4:	2004cdb0 	.word	0x2004cdb0
 800d4a8:	2004cddc 	.word	0x2004cddc
 800d4ac:	2004cf24 	.word	0x2004cf24
 800d4b0:	20025814 	.word	0x20025814

0800d4b4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d4ca:	2309      	movs	r3, #9
 800d4cc:	61fb      	str	r3, [r7, #28]
 800d4ce:	e025      	b.n	800d51c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a18      	ldr	r2, [pc, #96]	; (800d538 <_txe_queue_receive+0x84>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d002      	beq.n	800d4e0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d4da:	2309      	movs	r3, #9
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	e01d      	b.n	800d51c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d102      	bne.n	800d4ec <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	e017      	b.n	800d51c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d014      	beq.n	800d51c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d4f2:	f3ef 8305 	mrs	r3, IPSR
 800d4f6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d4f8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d4fa:	4b10      	ldr	r3, [pc, #64]	; (800d53c <_txe_queue_receive+0x88>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d504:	2304      	movs	r3, #4
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e008      	b.n	800d51c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d50a:	4b0d      	ldr	r3, [pc, #52]	; (800d540 <_txe_queue_receive+0x8c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	4a0c      	ldr	r2, [pc, #48]	; (800d544 <_txe_queue_receive+0x90>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d101      	bne.n	800d51c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d518:	2304      	movs	r3, #4
 800d51a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d105      	bne.n	800d52e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7fe fa30 	bl	800b98c <_tx_queue_receive>
 800d52c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d52e:	69fb      	ldr	r3, [r7, #28]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	51554555 	.word	0x51554555
 800d53c:	20025814 	.word	0x20025814
 800d540:	2004cddc 	.word	0x2004cddc
 800d544:	2004cf24 	.word	0x2004cf24

0800d548 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d102      	bne.n	800d564 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d55e:	2309      	movs	r3, #9
 800d560:	61fb      	str	r3, [r7, #28]
 800d562:	e025      	b.n	800d5b0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a18      	ldr	r2, [pc, #96]	; (800d5cc <_txe_queue_send+0x84>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d002      	beq.n	800d574 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800d56e:	2309      	movs	r3, #9
 800d570:	61fb      	str	r3, [r7, #28]
 800d572:	e01d      	b.n	800d5b0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d57a:	2303      	movs	r3, #3
 800d57c:	61fb      	str	r3, [r7, #28]
 800d57e:	e017      	b.n	800d5b0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d014      	beq.n	800d5b0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d586:	f3ef 8305 	mrs	r3, IPSR
 800d58a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d58c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d58e:	4b10      	ldr	r3, [pc, #64]	; (800d5d0 <_txe_queue_send+0x88>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4313      	orrs	r3, r2
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d598:	2304      	movs	r3, #4
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	e008      	b.n	800d5b0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d59e:	4b0d      	ldr	r3, [pc, #52]	; (800d5d4 <_txe_queue_send+0x8c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	4a0c      	ldr	r2, [pc, #48]	; (800d5d8 <_txe_queue_send+0x90>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d101      	bne.n	800d5b0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d5ac:	2304      	movs	r3, #4
 800d5ae:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d105      	bne.n	800d5c2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	68b9      	ldr	r1, [r7, #8]
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f7fe fbae 	bl	800bd1c <_tx_queue_send>
 800d5c0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d5c2:	69fb      	ldr	r3, [r7, #28]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	51554555 	.word	0x51554555
 800d5d0:	20025814 	.word	0x20025814
 800d5d4:	2004cddc 	.word	0x2004cddc
 800d5d8:	2004cf24 	.word	0x2004cf24

0800d5dc <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b092      	sub	sp, #72	; 0x48
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d102      	bne.n	800d5fa <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d5f8:	e054      	b.n	800d6a4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	2b1c      	cmp	r3, #28
 800d5fe:	d002      	beq.n	800d606 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d600:	230c      	movs	r3, #12
 800d602:	647b      	str	r3, [r7, #68]	; 0x44
 800d604:	e04e      	b.n	800d6a4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d606:	f3ef 8310 	mrs	r3, PRIMASK
 800d60a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d60e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d610:	b672      	cpsid	i
    return(int_posture);
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d614:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d616:	4b36      	ldr	r3, [pc, #216]	; (800d6f0 <_txe_semaphore_create+0x114>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3301      	adds	r3, #1
 800d61c:	4a34      	ldr	r2, [pc, #208]	; (800d6f0 <_txe_semaphore_create+0x114>)
 800d61e:	6013      	str	r3, [r2, #0]
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	f383 8810 	msr	PRIMASK, r3
}
 800d62a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800d62c:	4b31      	ldr	r3, [pc, #196]	; (800d6f4 <_txe_semaphore_create+0x118>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d632:	2300      	movs	r3, #0
 800d634:	643b      	str	r3, [r7, #64]	; 0x40
 800d636:	e009      	b.n	800d64c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d00b      	beq.n	800d658 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800d640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800d646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d648:	3301      	adds	r3, #1
 800d64a:	643b      	str	r3, [r7, #64]	; 0x40
 800d64c:	4b2a      	ldr	r3, [pc, #168]	; (800d6f8 <_txe_semaphore_create+0x11c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d652:	429a      	cmp	r2, r3
 800d654:	d3f0      	bcc.n	800d638 <_txe_semaphore_create+0x5c>
 800d656:	e000      	b.n	800d65a <_txe_semaphore_create+0x7e>
                break;
 800d658:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d65a:	f3ef 8310 	mrs	r3, PRIMASK
 800d65e:	623b      	str	r3, [r7, #32]
    return(posture);
 800d660:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d662:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d664:	b672      	cpsid	i
    return(int_posture);
 800d666:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d668:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d66a:	4b21      	ldr	r3, [pc, #132]	; (800d6f0 <_txe_semaphore_create+0x114>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3b01      	subs	r3, #1
 800d670:	4a1f      	ldr	r2, [pc, #124]	; (800d6f0 <_txe_semaphore_create+0x114>)
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	f383 8810 	msr	PRIMASK, r3
}
 800d67e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d680:	f7fe ffae 	bl	800c5e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d688:	429a      	cmp	r2, r3
 800d68a:	d102      	bne.n	800d692 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800d68c:	230c      	movs	r3, #12
 800d68e:	647b      	str	r3, [r7, #68]	; 0x44
 800d690:	e008      	b.n	800d6a4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d692:	4b1a      	ldr	r3, [pc, #104]	; (800d6fc <_txe_semaphore_create+0x120>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d69a:	4a19      	ldr	r2, [pc, #100]	; (800d700 <_txe_semaphore_create+0x124>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d101      	bne.n	800d6a4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d6a0:	2313      	movs	r3, #19
 800d6a2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d114      	bne.n	800d6d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6aa:	f3ef 8305 	mrs	r3, IPSR
 800d6ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d6b0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d6b2:	4b14      	ldr	r3, [pc, #80]	; (800d704 <_txe_semaphore_create+0x128>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00b      	beq.n	800d6d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6bc:	f3ef 8305 	mrs	r3, IPSR
 800d6c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d6c2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d6c4:	4b0f      	ldr	r3, [pc, #60]	; (800d704 <_txe_semaphore_create+0x128>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d6ce:	d201      	bcs.n	800d6d4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d6d0:	2313      	movs	r3, #19
 800d6d2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d105      	bne.n	800d6e6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	68b9      	ldr	r1, [r7, #8]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7fe fcc4 	bl	800c06c <_tx_semaphore_create>
 800d6e4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3748      	adds	r7, #72	; 0x48
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	2004ce74 	.word	0x2004ce74
 800d6f4:	2004cda4 	.word	0x2004cda4
 800d6f8:	2004cda8 	.word	0x2004cda8
 800d6fc:	2004cddc 	.word	0x2004cddc
 800d700:	2004cf24 	.word	0x2004cf24
 800d704:	20025814 	.word	0x20025814

0800d708 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d102      	bne.n	800d722 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d71c:	230c      	movs	r3, #12
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	e01f      	b.n	800d762 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a15      	ldr	r2, [pc, #84]	; (800d77c <_txe_semaphore_get+0x74>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d002      	beq.n	800d732 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d72c:	230c      	movs	r3, #12
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e017      	b.n	800d762 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d014      	beq.n	800d762 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d738:	f3ef 8305 	mrs	r3, IPSR
 800d73c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d73e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d740:	4b0f      	ldr	r3, [pc, #60]	; (800d780 <_txe_semaphore_get+0x78>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4313      	orrs	r3, r2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d74a:	2304      	movs	r3, #4
 800d74c:	617b      	str	r3, [r7, #20]
 800d74e:	e008      	b.n	800d762 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800d750:	4b0c      	ldr	r3, [pc, #48]	; (800d784 <_txe_semaphore_get+0x7c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	4a0b      	ldr	r2, [pc, #44]	; (800d788 <_txe_semaphore_get+0x80>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d101      	bne.n	800d762 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800d75e:	2304      	movs	r3, #4
 800d760:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d104      	bne.n	800d772 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7fe fcd0 	bl	800c110 <_tx_semaphore_get>
 800d770:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d772:	697b      	ldr	r3, [r7, #20]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	53454d41 	.word	0x53454d41
 800d780:	20025814 	.word	0x20025814
 800d784:	2004cddc 	.word	0x2004cddc
 800d788:	2004cf24 	.word	0x2004cf24

0800d78c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d79a:	230c      	movs	r3, #12
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e00b      	b.n	800d7b8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a07      	ldr	r2, [pc, #28]	; (800d7c4 <_txe_semaphore_put+0x38>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d002      	beq.n	800d7b0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d7aa:	230c      	movs	r3, #12
 800d7ac:	60fb      	str	r3, [r7, #12]
 800d7ae:	e003      	b.n	800d7b8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7fe fd3f 	bl	800c234 <_tx_semaphore_put>
 800d7b6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	53454d41 	.word	0x53454d41

0800d7c8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b09a      	sub	sp, #104	; 0x68
 800d7cc:	af06      	add	r7, sp, #24
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
 800d7d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d7e0:	230e      	movs	r3, #14
 800d7e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7e4:	e0bb      	b.n	800d95e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d7e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7e8:	2bb0      	cmp	r3, #176	; 0xb0
 800d7ea:	d002      	beq.n	800d7f2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d7ec:	230e      	movs	r3, #14
 800d7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7f0:	e0b5      	b.n	800d95e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7fc:	b672      	cpsid	i
    return(int_posture);
 800d7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d800:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d802:	4b64      	ldr	r3, [pc, #400]	; (800d994 <_txe_thread_create+0x1cc>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3301      	adds	r3, #1
 800d808:	4a62      	ldr	r2, [pc, #392]	; (800d994 <_txe_thread_create+0x1cc>)
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	f383 8810 	msr	PRIMASK, r3
}
 800d816:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d818:	2300      	movs	r3, #0
 800d81a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800d81c:	4b5e      	ldr	r3, [pc, #376]	; (800d998 <_txe_thread_create+0x1d0>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d824:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d828:	3b01      	subs	r3, #1
 800d82a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d82c:	4413      	add	r3, r2
 800d82e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d832:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d834:	2300      	movs	r3, #0
 800d836:	647b      	str	r3, [r7, #68]	; 0x44
 800d838:	e02b      	b.n	800d892 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83e:	429a      	cmp	r2, r3
 800d840:	d101      	bne.n	800d846 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d842:	2301      	movs	r3, #1
 800d844:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d028      	beq.n	800d89e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d852:	429a      	cmp	r2, r3
 800d854:	d308      	bcc.n	800d868 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d203      	bcs.n	800d868 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d860:	2300      	movs	r3, #0
 800d862:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d864:	2301      	movs	r3, #1
 800d866:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d86e:	429a      	cmp	r2, r3
 800d870:	d308      	bcc.n	800d884 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d878:	429a      	cmp	r2, r3
 800d87a:	d203      	bcs.n	800d884 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d880:	2301      	movs	r3, #1
 800d882:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d88a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d88e:	3301      	adds	r3, #1
 800d890:	647b      	str	r3, [r7, #68]	; 0x44
 800d892:	4b42      	ldr	r3, [pc, #264]	; (800d99c <_txe_thread_create+0x1d4>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d898:	429a      	cmp	r2, r3
 800d89a:	d3ce      	bcc.n	800d83a <_txe_thread_create+0x72>
 800d89c:	e000      	b.n	800d8a0 <_txe_thread_create+0xd8>
                break;
 800d89e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d8a4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d8a6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d8a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8aa:	b672      	cpsid	i
    return(int_posture);
 800d8ac:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d8ae:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d8b0:	4b38      	ldr	r3, [pc, #224]	; (800d994 <_txe_thread_create+0x1cc>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	4a37      	ldr	r2, [pc, #220]	; (800d994 <_txe_thread_create+0x1cc>)
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	f383 8810 	msr	PRIMASK, r3
}
 800d8c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d8c6:	f7fe fe8b 	bl	800c5e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d102      	bne.n	800d8d8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d8d2:	230e      	movs	r3, #14
 800d8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8d6:	e042      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d8d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8e2:	e03c      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ee:	e036      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f2:	2bc7      	cmp	r3, #199	; 0xc7
 800d8f4:	d802      	bhi.n	800d8fc <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d8f6:	2305      	movs	r3, #5
 800d8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8fa:	e030      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d8fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8fe:	2b1f      	cmp	r3, #31
 800d900:	d902      	bls.n	800d908 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d902:	230f      	movs	r3, #15
 800d904:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d906:	e02a      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d908:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d90a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d902      	bls.n	800d916 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d910:	2318      	movs	r3, #24
 800d912:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d914:	e023      	b.n	800d95e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d902      	bls.n	800d922 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d91c:	2310      	movs	r3, #16
 800d91e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d920:	e01d      	b.n	800d95e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d922:	4b1f      	ldr	r3, [pc, #124]	; (800d9a0 <_txe_thread_create+0x1d8>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <_txe_thread_create+0x1dc>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d101      	bne.n	800d934 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d930:	2313      	movs	r3, #19
 800d932:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d934:	f3ef 8305 	mrs	r3, IPSR
 800d938:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d93a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d93c:	4b1a      	ldr	r3, [pc, #104]	; (800d9a8 <_txe_thread_create+0x1e0>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4313      	orrs	r3, r2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00b      	beq.n	800d95e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d946:	f3ef 8305 	mrs	r3, IPSR
 800d94a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d94c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d94e:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <_txe_thread_create+0x1e0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4313      	orrs	r3, r2
 800d954:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d958:	d201      	bcs.n	800d95e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d95a:	2313      	movs	r3, #19
 800d95c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d960:	2b00      	cmp	r3, #0
 800d962:	d112      	bne.n	800d98a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d966:	9305      	str	r3, [sp, #20]
 800d968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	68b9      	ldr	r1, [r7, #8]
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f7fe fcae 	bl	800c2e4 <_tx_thread_create>
 800d988:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3750      	adds	r7, #80	; 0x50
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	2004ce74 	.word	0x2004ce74
 800d998:	2004cde4 	.word	0x2004cde4
 800d99c:	2004cde8 	.word	0x2004cde8
 800d9a0:	2004cddc 	.word	0x2004cddc
 800d9a4:	2004cf24 	.word	0x2004cf24
 800d9a8:	20025814 	.word	0x20025814

0800d9ac <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d9ba:	2315      	movs	r3, #21
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	e00b      	b.n	800d9d8 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a07      	ldr	r2, [pc, #28]	; (800d9e4 <_txe_timer_activate+0x38>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d002      	beq.n	800d9d0 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d9ca:	2315      	movs	r3, #21
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	e003      	b.n	800d9d8 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff f8e5 	bl	800cba0 <_tx_timer_activate>
 800d9d6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	4154494d 	.word	0x4154494d

0800d9e8 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b096      	sub	sp, #88	; 0x58
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800da00:	2315      	movs	r3, #21
 800da02:	647b      	str	r3, [r7, #68]	; 0x44
 800da04:	e059      	b.n	800daba <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800da06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da08:	2b2c      	cmp	r3, #44	; 0x2c
 800da0a:	d002      	beq.n	800da12 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800da0c:	2315      	movs	r3, #21
 800da0e:	647b      	str	r3, [r7, #68]	; 0x44
 800da10:	e053      	b.n	800daba <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da12:	f3ef 8310 	mrs	r3, PRIMASK
 800da16:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800da1a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800da1c:	b672      	cpsid	i
    return(int_posture);
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800da20:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800da22:	4b41      	ldr	r3, [pc, #260]	; (800db28 <_txe_timer_create+0x140>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	4a3f      	ldr	r2, [pc, #252]	; (800db28 <_txe_timer_create+0x140>)
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	f383 8810 	msr	PRIMASK, r3
}
 800da36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800da38:	4b3c      	ldr	r3, [pc, #240]	; (800db2c <_txe_timer_create+0x144>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800da3e:	2300      	movs	r3, #0
 800da40:	643b      	str	r3, [r7, #64]	; 0x40
 800da42:	e009      	b.n	800da58 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da48:	429a      	cmp	r2, r3
 800da4a:	d00b      	beq.n	800da64 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800da4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800da52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da54:	3301      	adds	r3, #1
 800da56:	643b      	str	r3, [r7, #64]	; 0x40
 800da58:	4b35      	ldr	r3, [pc, #212]	; (800db30 <_txe_timer_create+0x148>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da5e:	429a      	cmp	r2, r3
 800da60:	d3f0      	bcc.n	800da44 <_txe_timer_create+0x5c>
 800da62:	e000      	b.n	800da66 <_txe_timer_create+0x7e>
                break;
 800da64:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da66:	f3ef 8310 	mrs	r3, PRIMASK
 800da6a:	623b      	str	r3, [r7, #32]
    return(posture);
 800da6c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800da6e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da70:	b672      	cpsid	i
    return(int_posture);
 800da72:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800da74:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800da76:	4b2c      	ldr	r3, [pc, #176]	; (800db28 <_txe_timer_create+0x140>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3b01      	subs	r3, #1
 800da7c:	4a2a      	ldr	r2, [pc, #168]	; (800db28 <_txe_timer_create+0x140>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	f383 8810 	msr	PRIMASK, r3
}
 800da8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800da8c:	f7fe fda8 	bl	800c5e0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	429a      	cmp	r2, r3
 800da96:	d102      	bne.n	800da9e <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800da98:	2315      	movs	r3, #21
 800da9a:	647b      	str	r3, [r7, #68]	; 0x44
 800da9c:	e00d      	b.n	800daba <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800da9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800daa4:	2316      	movs	r3, #22
 800daa6:	647b      	str	r3, [r7, #68]	; 0x44
 800daa8:	e007      	b.n	800daba <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800daaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daac:	2b01      	cmp	r3, #1
 800daae:	d004      	beq.n	800daba <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800dab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800dab6:	2317      	movs	r3, #23
 800dab8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800daba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11d      	bne.n	800dafc <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800dac0:	4b1c      	ldr	r3, [pc, #112]	; (800db34 <_txe_timer_create+0x14c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800dac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac8:	4a1b      	ldr	r2, [pc, #108]	; (800db38 <_txe_timer_create+0x150>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d101      	bne.n	800dad2 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800dace:	2313      	movs	r3, #19
 800dad0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dad2:	f3ef 8305 	mrs	r3, IPSR
 800dad6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dad8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dada:	4b18      	ldr	r3, [pc, #96]	; (800db3c <_txe_timer_create+0x154>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4313      	orrs	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dae4:	f3ef 8305 	mrs	r3, IPSR
 800dae8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800daea:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800daec:	4b13      	ldr	r3, [pc, #76]	; (800db3c <_txe_timer_create+0x154>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800daf6:	d201      	bcs.n	800dafc <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800daf8:	2313      	movs	r3, #19
 800dafa:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10c      	bne.n	800db1c <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800db02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db04:	9302      	str	r3, [sp, #8]
 800db06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff f86f 	bl	800cbf8 <_tx_timer_create>
 800db1a:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800db1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3748      	adds	r7, #72	; 0x48
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	2004ce74 	.word	0x2004ce74
 800db2c:	2004cf18 	.word	0x2004cf18
 800db30:	2004cf1c 	.word	0x2004cf1c
 800db34:	2004cddc 	.word	0x2004cddc
 800db38:	2004cf24 	.word	0x2004cf24
 800db3c:	20025814 	.word	0x20025814

0800db40 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800db44:	f005 fd4c 	bl	80135e0 <touchgfx_components_init>
  touchgfx_init();
 800db48:	f005 fd20 	bl	801358c <touchgfx_init>
}
 800db4c:	bf00      	nop
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08c      	sub	sp, #48	; 0x30
 800db54:	af08      	add	r7, sp, #32
 800db56:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800db58:	2300      	movs	r3, #0
 800db5a:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 800db60:	f107 0108 	add.w	r1, r7, #8
 800db64:	2300      	movs	r3, #0
 800db66:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fade 	bl	800d12c <_txe_byte_allocate>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 800db76:	2302      	movs	r3, #2
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	e019      	b.n	800dbb0 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	22b0      	movs	r2, #176	; 0xb0
 800db80:	9206      	str	r2, [sp, #24]
 800db82:	2201      	movs	r2, #1
 800db84:	9205      	str	r2, [sp, #20]
 800db86:	2200      	movs	r2, #0
 800db88:	9204      	str	r2, [sp, #16]
 800db8a:	2205      	movs	r2, #5
 800db8c:	9203      	str	r2, [sp, #12]
 800db8e:	2205      	movs	r2, #5
 800db90:	9202      	str	r2, [sp, #8]
 800db92:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800db96:	9201      	str	r2, [sp, #4]
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	2300      	movs	r3, #0
 800db9c:	4a07      	ldr	r2, [pc, #28]	; (800dbbc <MX_TouchGFX_Init+0x6c>)
 800db9e:	4908      	ldr	r1, [pc, #32]	; (800dbc0 <MX_TouchGFX_Init+0x70>)
 800dba0:	4808      	ldr	r0, [pc, #32]	; (800dbc4 <MX_TouchGFX_Init+0x74>)
 800dba2:	f7ff fe11 	bl	800d7c8 <_txe_thread_create>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800dbac:	230e      	movs	r3, #14
 800dbae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	0800dbc9 	.word	0x0800dbc9
 800dbc0:	080279fc 	.word	0x080279fc
 800dbc4:	2004d3e4 	.word	0x2004d3e4

0800dbc8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800dbd0:	f005 fd0e 	bl	80135f0 <touchgfx_taskEntry>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
    {
 800dbe4:	4a04      	ldr	r2, [pc, #16]	; (800dbf8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	601a      	str	r2, [r3, #0]
    }
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4618      	mov	r0, r3
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	08028a64 	.word	0x08028a64

0800dbfc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
    }
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff ffe9 	bl	800dbdc <_ZN8touchgfx12FontProviderD1Ev>
 800dc0a:	2104      	movs	r1, #4
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f018 fde1 	bl	80267d4 <_ZdlPvj>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800dc28:	887b      	ldrh	r3, [r7, #2]
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d010      	beq.n	800dc50 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	dc13      	bgt.n	800dc5a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d005      	beq.n	800dc46 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800dc3a:	e00e      	b.n	800dc5a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800dc3c:	f003 fdce 	bl	80117dc <_ZN17TypedTextDatabase8getFontsEv>
 800dc40:	4603      	mov	r3, r0
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	e00a      	b.n	800dc5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800dc46:	f003 fdc9 	bl	80117dc <_ZN17TypedTextDatabase8getFontsEv>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	e005      	b.n	800dc5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800dc50:	f003 fdc4 	bl	80117dc <_ZN17TypedTextDatabase8getFontsEv>
 800dc54:	4603      	mov	r3, r0
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	e000      	b.n	800dc5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800dc5a:	2300      	movs	r3, #0
    }
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff ffb1 	bl	800dbdc <_ZN8touchgfx12FontProviderD1Ev>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	08028a50 	.word	0x08028a50

0800dc88 <_ZN23ApplicationFontProviderD0Ev>:
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff ffe7 	bl	800dc64 <_ZN23ApplicationFontProviderD1Ev>
 800dc96:	2104      	movs	r1, #4
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f018 fd9b 	bl	80267d4 <_ZdlPvj>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
    {
 800dcb0:	4a04      	ldr	r2, [pc, #16]	; (800dcc4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	601a      	str	r2, [r3, #0]
    }
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	08028f24 	.word	0x08028f24

0800dcc8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
    }
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff ffe9 	bl	800dca8 <_ZN8touchgfx4FontD1Ev>
 800dcd6:	2110      	movs	r1, #16
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f018 fd7b 	bl	80267d4 <_ZdlPvj>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800dcf4:	887b      	ldrh	r3, [r7, #2]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e010      	b.n	800dd20 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	681c      	ldr	r4, [r3, #0]
 800dd0e:	f107 030f 	add.w	r3, r7, #15
 800dd12:	f107 0210 	add.w	r2, r7, #16
 800dd16:	8879      	ldrh	r1, [r7, #2]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	47a0      	blx	r4
 800dd1c:	6178      	str	r0, [r7, #20]
        return glyph;
 800dd1e:	697b      	ldr	r3, [r7, #20]
    }
 800dd20:	4618      	mov	r0, r3
 800dd22:	371c      	adds	r7, #28
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd90      	pop	{r4, r7, pc}

0800dd28 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	895b      	ldrh	r3, [r3, #10]
    }
 800dd34:	4618      	mov	r0, r3
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	899b      	ldrh	r3, [r3, #12]
    }
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	889b      	ldrh	r3, [r3, #4]
    }
 800dd64:	4618      	mov	r0, r3
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	889a      	ldrh	r2, [r3, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	799b      	ldrb	r3, [r3, #6]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4413      	add	r3, r2
 800dd84:	b29b      	uxth	r3, r3
    }
 800dd86:	4618      	mov	r0, r3
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	79db      	ldrb	r3, [r3, #7]
 800dd9e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800dda2:	b2db      	uxtb	r3, r3
    }
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	79db      	ldrb	r3, [r3, #7]
 800ddbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ddc0:	b2db      	uxtb	r3, r3
    }
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
	...

0800ddd0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	4a05      	ldr	r2, [pc, #20]	; (800ddf0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff ff61 	bl	800dca8 <_ZN8touchgfx4FontD1Ev>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	08029ad0 	.word	0x08029ad0

0800ddf4 <_ZN8touchgfx9ConstFontD0Ev>:
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff ffe7 	bl	800ddd0 <_ZN8touchgfx9ConstFontD1Ev>
 800de02:	2118      	movs	r1, #24
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f018 fce5 	bl	80267d4 <_ZdlPvj>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	4a05      	ldr	r2, [pc, #20]	; (800de34 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	601a      	str	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff ffd3 	bl	800ddd0 <_ZN8touchgfx9ConstFontD1Ev>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	08028a78 	.word	0x08028a78

0800de38 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff ffe7 	bl	800de14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800de46:	2128      	movs	r1, #40	; 0x28
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f018 fcc3 	bl	80267d4 <_ZdlPvj>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4618      	mov	r0, r3
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1b      	ldr	r3, [r3, #32]
    }
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800de7c:	4618      	mov	r0, r3
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08c      	sub	sp, #48	; 0x30
 800de8c:	af08      	add	r7, sp, #32
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4611      	mov	r1, r2
 800de94:	461a      	mov	r2, r3
 800de96:	460b      	mov	r3, r1
 800de98:	80fb      	strh	r3, [r7, #6]
 800de9a:	4613      	mov	r3, r2
 800de9c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	88b9      	ldrh	r1, [r7, #4]
 800dea2:	88fa      	ldrh	r2, [r7, #6]
 800dea4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dea6:	9306      	str	r3, [sp, #24]
 800dea8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800deb6:	9303      	str	r3, [sp, #12]
 800deb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800debc:	9302      	str	r3, [sp, #8]
 800debe:	7f3b      	ldrb	r3, [r7, #28]
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	7e3b      	ldrb	r3, [r7, #24]
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	460b      	mov	r3, r1
 800dec8:	68b9      	ldr	r1, [r7, #8]
 800deca:	f00a ffbf 	bl	8018e4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800dece:	4a0a      	ldr	r2, [pc, #40]	; (800def8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ded8:	619a      	str	r2, [r3, #24]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dede:	61da      	str	r2, [r3, #28]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dee4:	621a      	str	r2, [r3, #32]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800deea:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	08028a78 	.word	0x08028a78

0800defc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	889b      	ldrh	r3, [r3, #4]
 800df10:	0adb      	lsrs	r3, r3, #11
 800df12:	b29b      	uxth	r3, r3
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4413      	add	r3, r2
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800df2e:	b480      	push	{r7}
 800df30:	b089      	sub	sp, #36	; 0x24
 800df32:	af00      	add	r7, sp, #0
 800df34:	60f8      	str	r0, [r7, #12]
 800df36:	460b      	mov	r3, r1
 800df38:	607a      	str	r2, [r7, #4]
 800df3a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7b1b      	ldrb	r3, [r3, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800df4a:	2300      	movs	r3, #0
 800df4c:	e030      	b.n	800dfb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	69da      	ldr	r2, [r3, #28]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	7b5b      	ldrb	r3, [r3, #13]
 800df5a:	021b      	lsls	r3, r3, #8
 800df5c:	b21b      	sxth	r3, r3
 800df5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df62:	b219      	sxth	r1, r3
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	7adb      	ldrb	r3, [r3, #11]
 800df68:	b21b      	sxth	r3, r3
 800df6a:	430b      	orrs	r3, r1
 800df6c:	b21b      	sxth	r3, r3
 800df6e:	b29b      	uxth	r3, r3
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7b1b      	ldrb	r3, [r3, #12]
 800df7a:	837b      	strh	r3, [r7, #26]
 800df7c:	8b7b      	ldrh	r3, [r7, #26]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d015      	beq.n	800dfae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	897a      	ldrh	r2, [r7, #10]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d103      	bne.n	800df94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800df92:	e00d      	b.n	800dfb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	897a      	ldrh	r2, [r7, #10]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d306      	bcc.n	800dfac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800df9e:	8b7b      	ldrh	r3, [r7, #26]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	837b      	strh	r3, [r7, #26]
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	61fb      	str	r3, [r7, #28]
 800dfaa:	e7e7      	b.n	800df7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800dfac:	bf00      	nop
        }
    }
    return 0;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3724      	adds	r7, #36	; 0x24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	4801      	ldr	r0, [pc, #4]	; (800dfc8 <__tcf_0+0xc>)
 800dfc2:	f7ff ff27 	bl	800de14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	2004d494 	.word	0x2004d494

0800dfcc <_Z23getFont_verdana_10_4bppv>:
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08c      	sub	sp, #48	; 0x30
 800dfd0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dfd2:	4b1f      	ldr	r3, [pc, #124]	; (800e050 <_Z23getFont_verdana_10_4bppv+0x84>)
 800dfd4:	e8d3 3f8f 	ldab	r3, [r3]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	bf0c      	ite	eq
 800dfe2:	2301      	moveq	r3, #1
 800dfe4:	2300      	movne	r3, #0
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d02c      	beq.n	800e046 <_Z23getFont_verdana_10_4bppv+0x7a>
 800dfec:	4818      	ldr	r0, [pc, #96]	; (800e050 <_Z23getFont_verdana_10_4bppv+0x84>)
 800dfee:	f018 fbf3 	bl	80267d8 <__cxa_guard_acquire>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	bf14      	ite	ne
 800dff8:	2301      	movne	r3, #1
 800dffa:	2300      	moveq	r3, #0
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d021      	beq.n	800e046 <_Z23getFont_verdana_10_4bppv+0x7a>
 800e002:	2300      	movs	r3, #0
 800e004:	930a      	str	r3, [sp, #40]	; 0x28
 800e006:	2300      	movs	r3, #0
 800e008:	9309      	str	r3, [sp, #36]	; 0x24
 800e00a:	2300      	movs	r3, #0
 800e00c:	9308      	str	r3, [sp, #32]
 800e00e:	233f      	movs	r3, #63	; 0x3f
 800e010:	9307      	str	r3, [sp, #28]
 800e012:	4b10      	ldr	r3, [pc, #64]	; (800e054 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e014:	9306      	str	r3, [sp, #24]
 800e016:	4b10      	ldr	r3, [pc, #64]	; (800e058 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e018:	9305      	str	r3, [sp, #20]
 800e01a:	2300      	movs	r3, #0
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	2300      	movs	r3, #0
 800e020:	9303      	str	r3, [sp, #12]
 800e022:	2301      	movs	r3, #1
 800e024:	9302      	str	r3, [sp, #8]
 800e026:	2304      	movs	r3, #4
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	2300      	movs	r3, #0
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	230a      	movs	r3, #10
 800e030:	2201      	movs	r2, #1
 800e032:	490a      	ldr	r1, [pc, #40]	; (800e05c <_Z23getFont_verdana_10_4bppv+0x90>)
 800e034:	480a      	ldr	r0, [pc, #40]	; (800e060 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e036:	f7ff ff27 	bl	800de88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e03a:	480a      	ldr	r0, [pc, #40]	; (800e064 <_Z23getFont_verdana_10_4bppv+0x98>)
 800e03c:	f018 fc14 	bl	8026868 <atexit>
 800e040:	4803      	ldr	r0, [pc, #12]	; (800e050 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e042:	f018 fbd5 	bl	80267f0 <__cxa_guard_release>
    return verdana_10_4bpp;
 800e046:	4b06      	ldr	r3, [pc, #24]	; (800e060 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800e048:	4618      	mov	r0, r3
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2004d4bc 	.word	0x2004d4bc
 800e054:	0802a098 	.word	0x0802a098
 800e058:	0802a0a4 	.word	0x0802a0a4
 800e05c:	0802a068 	.word	0x0802a068
 800e060:	2004d494 	.word	0x2004d494
 800e064:	0800dfbd 	.word	0x0800dfbd

0800e068 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e068:	b580      	push	{r7, lr}
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__tcf_0+0xc>)
 800e06e:	f7ff fed1 	bl	800de14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e072:	bd80      	pop	{r7, pc}
 800e074:	2004d4c0 	.word	0x2004d4c0

0800e078 <_Z23getFont_verdana_20_4bppv>:
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08c      	sub	sp, #48	; 0x30
 800e07c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e07e:	4b1f      	ldr	r3, [pc, #124]	; (800e0fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800e080:	e8d3 3f8f 	ldab	r3, [r3]
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	bf0c      	ite	eq
 800e08e:	2301      	moveq	r3, #1
 800e090:	2300      	movne	r3, #0
 800e092:	b2db      	uxtb	r3, r3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d02c      	beq.n	800e0f2 <_Z23getFont_verdana_20_4bppv+0x7a>
 800e098:	4818      	ldr	r0, [pc, #96]	; (800e0fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800e09a:	f018 fb9d 	bl	80267d8 <__cxa_guard_acquire>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bf14      	ite	ne
 800e0a4:	2301      	movne	r3, #1
 800e0a6:	2300      	moveq	r3, #0
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d021      	beq.n	800e0f2 <_Z23getFont_verdana_20_4bppv+0x7a>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9308      	str	r3, [sp, #32]
 800e0ba:	233f      	movs	r3, #63	; 0x3f
 800e0bc:	9307      	str	r3, [sp, #28]
 800e0be:	4b10      	ldr	r3, [pc, #64]	; (800e100 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e0c0:	9306      	str	r3, [sp, #24]
 800e0c2:	4b10      	ldr	r3, [pc, #64]	; (800e104 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	9303      	str	r3, [sp, #12]
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	9302      	str	r3, [sp, #8]
 800e0d2:	2304      	movs	r3, #4
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	2314      	movs	r3, #20
 800e0dc:	2201      	movs	r2, #1
 800e0de:	490a      	ldr	r1, [pc, #40]	; (800e108 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e0e0:	480a      	ldr	r0, [pc, #40]	; (800e10c <_Z23getFont_verdana_20_4bppv+0x94>)
 800e0e2:	f7ff fed1 	bl	800de88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e0e6:	480a      	ldr	r0, [pc, #40]	; (800e110 <_Z23getFont_verdana_20_4bppv+0x98>)
 800e0e8:	f018 fbbe 	bl	8026868 <atexit>
 800e0ec:	4803      	ldr	r0, [pc, #12]	; (800e0fc <_Z23getFont_verdana_20_4bppv+0x84>)
 800e0ee:	f018 fb7f 	bl	80267f0 <__cxa_guard_release>
    return verdana_20_4bpp;
 800e0f2:	4b06      	ldr	r3, [pc, #24]	; (800e10c <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2004d4e8 	.word	0x2004d4e8
 800e100:	0802a09c 	.word	0x0802a09c
 800e104:	0802a0a8 	.word	0x0802a0a8
 800e108:	0802a078 	.word	0x0802a078
 800e10c:	2004d4c0 	.word	0x2004d4c0
 800e110:	0800e069 	.word	0x0800e069

0800e114 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
 800e118:	4801      	ldr	r0, [pc, #4]	; (800e120 <__tcf_0+0xc>)
 800e11a:	f7ff fe7b 	bl	800de14 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	2004d4ec 	.word	0x2004d4ec

0800e124 <_Z23getFont_verdana_40_4bppv>:
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08c      	sub	sp, #48	; 0x30
 800e128:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e12a:	4b1f      	ldr	r3, [pc, #124]	; (800e1a8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e12c:	e8d3 3f8f 	ldab	r3, [r3]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	bf0c      	ite	eq
 800e13a:	2301      	moveq	r3, #1
 800e13c:	2300      	movne	r3, #0
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d02c      	beq.n	800e19e <_Z23getFont_verdana_40_4bppv+0x7a>
 800e144:	4818      	ldr	r0, [pc, #96]	; (800e1a8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e146:	f018 fb47 	bl	80267d8 <__cxa_guard_acquire>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	bf14      	ite	ne
 800e150:	2301      	movne	r3, #1
 800e152:	2300      	moveq	r3, #0
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b00      	cmp	r3, #0
 800e158:	d021      	beq.n	800e19e <_Z23getFont_verdana_40_4bppv+0x7a>
 800e15a:	2300      	movs	r3, #0
 800e15c:	930a      	str	r3, [sp, #40]	; 0x28
 800e15e:	2300      	movs	r3, #0
 800e160:	9309      	str	r3, [sp, #36]	; 0x24
 800e162:	2300      	movs	r3, #0
 800e164:	9308      	str	r3, [sp, #32]
 800e166:	233f      	movs	r3, #63	; 0x3f
 800e168:	9307      	str	r3, [sp, #28]
 800e16a:	4b10      	ldr	r3, [pc, #64]	; (800e1ac <_Z23getFont_verdana_40_4bppv+0x88>)
 800e16c:	9306      	str	r3, [sp, #24]
 800e16e:	4b10      	ldr	r3, [pc, #64]	; (800e1b0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e170:	9305      	str	r3, [sp, #20]
 800e172:	2300      	movs	r3, #0
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	2300      	movs	r3, #0
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	2301      	movs	r3, #1
 800e17c:	9302      	str	r3, [sp, #8]
 800e17e:	2304      	movs	r3, #4
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	2300      	movs	r3, #0
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2328      	movs	r3, #40	; 0x28
 800e188:	2201      	movs	r2, #1
 800e18a:	490a      	ldr	r1, [pc, #40]	; (800e1b4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e18c:	480a      	ldr	r0, [pc, #40]	; (800e1b8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e18e:	f7ff fe7b 	bl	800de88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e192:	480a      	ldr	r0, [pc, #40]	; (800e1bc <_Z23getFont_verdana_40_4bppv+0x98>)
 800e194:	f018 fb68 	bl	8026868 <atexit>
 800e198:	4803      	ldr	r0, [pc, #12]	; (800e1a8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e19a:	f018 fb29 	bl	80267f0 <__cxa_guard_release>
    return verdana_40_4bpp;
 800e19e:	4b06      	ldr	r3, [pc, #24]	; (800e1b8 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2004d514 	.word	0x2004d514
 800e1ac:	0802a0a0 	.word	0x0802a0a0
 800e1b0:	0802a0ac 	.word	0x0802a0ac
 800e1b4:	0802a088 	.word	0x0802a088
 800e1b8:	2004d4ec 	.word	0x2004d4ec
 800e1bc:	0800e115 	.word	0x0800e115

0800e1c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	801a      	strh	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	805a      	strh	r2, [r3, #2]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	809a      	strh	r2, [r3, #4]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	80da      	strh	r2, [r3, #6]
    {
    }
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e206:	b480      	push	{r7}
 800e208:	b085      	sub	sp, #20
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	60f8      	str	r0, [r7, #12]
 800e20e:	4608      	mov	r0, r1
 800e210:	4611      	mov	r1, r2
 800e212:	461a      	mov	r2, r3
 800e214:	4603      	mov	r3, r0
 800e216:	817b      	strh	r3, [r7, #10]
 800e218:	460b      	mov	r3, r1
 800e21a:	813b      	strh	r3, [r7, #8]
 800e21c:	4613      	mov	r3, r2
 800e21e:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	897a      	ldrh	r2, [r7, #10]
 800e224:	801a      	strh	r2, [r3, #0]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	893a      	ldrh	r2, [r7, #8]
 800e22a:	805a      	strh	r2, [r3, #2]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	88fa      	ldrh	r2, [r7, #6]
 800e230:	809a      	strh	r2, [r3, #4]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8b3a      	ldrh	r2, [r7, #24]
 800e236:	80da      	strh	r2, [r3, #6]
    {
    }
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	4618      	mov	r0, r3
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e246:	b480      	push	{r7}
 800e248:	b083      	sub	sp, #12
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e250:	bf00      	nop
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	460b      	mov	r3, r1
 800e292:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800e294:	bf00      	nop
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
    {
    }
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
    {
    }
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    {
 800e2d0:	4a04      	ldr	r2, [pc, #16]	; (800e2e4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
    }
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	08028d30 	.word	0x08028d30

0800e2e8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
    }
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff ffe9 	bl	800e2c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e2f6:	2104      	movs	r1, #4
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f018 fa6b 	bl	80267d4 <_ZdlPvj>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
    {
    }
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800e346:	6810      	ldr	r0, [r2, #0]
 800e348:	6851      	ldr	r1, [r2, #4]
 800e34a:	c303      	stmia	r3!, {r0, r1}
    }
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
    {
 800e360:	4a04      	ldr	r2, [pc, #16]	; (800e374 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	601a      	str	r2, [r3, #0]
    }
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	08028d18 	.word	0x08028d18

0800e378 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
    }
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff ffe9 	bl	800e358 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e386:	2104      	movs	r1, #4
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f018 fa23 	bl	80267d4 <_ZdlPvj>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e3a0:	4a14      	ldr	r2, [pc, #80]	; (800e3f4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff ff14 	bl	800e1d8 <_ZN8touchgfx4RectC1Ev>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	330c      	adds	r3, #12
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7ff ff0f 	bl	800e1d8 <_ZN8touchgfx4RectC1Ev>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	615a      	str	r2, [r3, #20]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	619a      	str	r2, [r3, #24]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	61da      	str	r2, [r3, #28]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	841a      	strh	r2, [r3, #32]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	845a      	strh	r2, [r3, #34]	; 0x22
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08029a68 	.word	0x08029a68

0800e3f8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
    {
 800e400:	4a04      	ldr	r2, [pc, #16]	; (800e414 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
    }
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	08029a68 	.word	0x08029a68

0800e418 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
    }
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff ffe9 	bl	800e3f8 <_ZN8touchgfx8DrawableD1Ev>
 800e426:	2128      	movs	r1, #40	; 0x28
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f018 f9d3 	bl	80267d4 <_ZdlPvj>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e446:	2b00      	cmp	r3, #0
 800e448:	d005      	beq.n	800e456 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3314      	adds	r3, #20
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
        }
    }
 800e456:	bf00      	nop
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e45e:	b480      	push	{r7}
 800e460:	b083      	sub	sp, #12
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e466:	2300      	movs	r3, #0
    }
 800e468:	4618      	mov	r0, r3
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3304      	adds	r3, #4
    }
 800e480:	4618      	mov	r0, r3
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	4608      	mov	r0, r1
 800e496:	4611      	mov	r1, r2
 800e498:	461a      	mov	r2, r3
 800e49a:	4603      	mov	r3, r0
 800e49c:	817b      	strh	r3, [r7, #10]
 800e49e:	460b      	mov	r3, r1
 800e4a0:	813b      	strh	r3, [r7, #8]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e4a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e4aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f000 f844 	bl	800e53e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e4b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e4ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f000 f898 	bl	800e5f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e4c6:	bf00      	nop
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e4dc:	4618      	mov	r0, r3
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e502:	b480      	push	{r7}
 800e504:	b083      	sub	sp, #12
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	460b      	mov	r3, r1
 800e50c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	887a      	ldrh	r2, [r7, #2]
 800e512:	809a      	strh	r2, [r3, #4]
    }
 800e514:	bf00      	nop
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	887a      	ldrh	r2, [r7, #2]
 800e530:	80da      	strh	r2, [r3, #6]
    }
 800e532:	bf00      	nop
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e53e:	b580      	push	{r7, lr}
 800e540:	b082      	sub	sp, #8
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	460b      	mov	r3, r1
 800e548:	807b      	strh	r3, [r7, #2]
 800e54a:	4613      	mov	r3, r2
 800e54c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3330      	adds	r3, #48	; 0x30
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e55a:	4611      	mov	r1, r2
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	4798      	blx	r3
        setY(y);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3334      	adds	r3, #52	; 0x34
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e56c:	4611      	mov	r1, r2
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	4798      	blx	r3
    }
 800e572:	bf00      	nop
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	460b      	mov	r3, r1
 800e584:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	887a      	ldrh	r2, [r7, #2]
 800e58a:	811a      	strh	r2, [r3, #8]
    }
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	887a      	ldrh	r2, [r7, #2]
 800e5a8:	815a      	strh	r2, [r3, #10]
    }
 800e5aa:	bf00      	nop
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr

0800e5b6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e5b6:	b480      	push	{r7}
 800e5b8:	b083      	sub	sp, #12
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
    {
    }
 800e5be:	bf00      	nop
 800e5c0:	370c      	adds	r7, #12
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e5d4:	bf00      	nop
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e5ea:	bf00      	nop
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	460b      	mov	r3, r1
 800e600:	807b      	strh	r3, [r7, #2]
 800e602:	4613      	mov	r3, r2
 800e604:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3338      	adds	r3, #56	; 0x38
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e612:	4611      	mov	r1, r2
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	4798      	blx	r3
        setHeight(height);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	333c      	adds	r3, #60	; 0x3c
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e624:	4611      	mov	r1, r2
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	4798      	blx	r3
    }
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e632:	b480      	push	{r7}
 800e634:	b083      	sub	sp, #12
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
    {
    }
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e66a:	4618      	mov	r0, r3
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e676:	b480      	push	{r7}
 800e678:	b083      	sub	sp, #12
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	807b      	strh	r3, [r7, #2]
 800e69c:	4613      	mov	r3, r2
 800e69e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3354      	adds	r3, #84	; 0x54
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	8879      	ldrh	r1, [r7, #2]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e6b0:	b292      	uxth	r2, r2
 800e6b2:	1a8a      	subs	r2, r1, r2
 800e6b4:	b292      	uxth	r2, r2
 800e6b6:	b210      	sxth	r0, r2
 800e6b8:	8839      	ldrh	r1, [r7, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e6c0:	b292      	uxth	r2, r2
 800e6c2:	1a8a      	subs	r2, r1, r2
 800e6c4:	b292      	uxth	r2, r2
 800e6c6:	b212      	sxth	r2, r2
 800e6c8:	4601      	mov	r1, r0
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	4798      	blx	r3
    }
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6e4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ec:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6f4:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e6f6:	bf00      	nop
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff ffe1 	bl	800e6d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	601a      	str	r2, [r3, #0]
    }
 800e722:	bf00      	nop
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
	...

0800e72c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
    {
        return instance;
 800e730:	4b03      	ldr	r3, [pc, #12]	; (800e740 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e732:	681b      	ldr	r3, [r3, #0]
    }
 800e734:	4618      	mov	r0, r3
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	2004f6f4 	.word	0x2004f6f4

0800e744 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e748:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e750:	2b00      	cmp	r3, #0
 800e752:	d008      	beq.n	800e766 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e754:	4b08      	ldr	r3, [pc, #32]	; (800e778 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d003      	beq.n	800e766 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e75e:	4b06      	ldr	r3, [pc, #24]	; (800e778 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e764:	e002      	b.n	800e76c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e766:	4b04      	ldr	r3, [pc, #16]	; (800e778 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	689b      	ldr	r3, [r3, #8]
    }
 800e76c:	4618      	mov	r0, r3
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	2004f6f4 	.word	0x2004f6f4

0800e77c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e784:	4a07      	ldr	r2, [pc, #28]	; (800e7a4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	605a      	str	r2, [r3, #4]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	721a      	strb	r2, [r3, #8]
    {
    }
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	08028cf4 	.word	0x08028cf4

0800e7a8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
    {
 800e7b0:	4a04      	ldr	r2, [pc, #16]	; (800e7c4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	601a      	str	r2, [r3, #0]
    }
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	370c      	adds	r7, #12
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	08028cf4 	.word	0x08028cf4

0800e7c8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
    }
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff ffe9 	bl	800e7a8 <_ZN8touchgfx10TransitionD1Ev>
 800e7d6:	210c      	movs	r1, #12
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f017 fffb 	bl	80267d4 <_ZdlPvj>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
    {
    }
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
    {
    }
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
    {
    }
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e82c:	f009 faca 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 800e830:	4603      	mov	r3, r0
 800e832:	4618      	mov	r0, r3
 800e834:	f009 fe6a 	bl	801850c <_ZN8touchgfx11Application10invalidateEv>
    }
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	605a      	str	r2, [r3, #4]
    }
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	4a05      	ldr	r2, [pc, #20]	; (800e87c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7ff fd2b 	bl	800e2c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4618      	mov	r0, r3
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	08029a1c 	.word	0x08029a1c

0800e880 <_ZN8touchgfx11ApplicationD0Ev>:
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff ffe7 	bl	800e85c <_ZN8touchgfx11ApplicationD1Ev>
 800e88e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f017 ff9e 	bl	80267d4 <_ZdlPvj>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f009 faa8 	bl	8017e04 <_ZN8touchgfx11ApplicationC1Ev>
 800e8b4:	4a09      	ldr	r2, [pc, #36]	; (800e8dc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a04      	ldr	r2, [pc, #16]	; (800e8e0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e8ce:	6013      	str	r3, [r2, #0]
    }
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	08028ca8 	.word	0x08028ca8
 800e8e0:	2004f748 	.word	0x2004f748

0800e8e4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f804 	bl	800e8fa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b082      	sub	sp, #8
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00f      	beq.n	800e92c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	330c      	adds	r3, #12
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4610      	mov	r0, r2
 800e920:	4798      	blx	r3
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e928:	2301      	movs	r3, #1
 800e92a:	e000      	b.n	800e92e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e92c:	2300      	movs	r3, #0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00e      	beq.n	800e950 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	683a      	ldr	r2, [r7, #0]
 800e966:	601a      	str	r2, [r3, #0]
    }
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	4a05      	ldr	r2, [pc, #20]	; (800e994 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	601a      	str	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff ff69 	bl	800e85c <_ZN8touchgfx11ApplicationD1Ev>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	08028ca8 	.word	0x08028ca8

0800e998 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff ffe7 	bl	800e974 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e9a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f017 ff12 	bl	80267d4 <_ZdlPvj>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	4a08      	ldr	r2, [pc, #32]	; (800e9e8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f001 f81d 	bl	800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff ffcb 	bl	800e974 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	08028c44 	.word	0x08028c44

0800e9ec <_ZN23FrontendApplicationBaseD0Ev>:
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff ffe1 	bl	800e9bc <_ZN23FrontendApplicationBaseD1Ev>
 800e9fa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f017 fee8 	bl	80267d4 <_ZdlPvj>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f8d0 	bl	800ebbc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800ea1c:	bf00      	nop
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	721a      	strb	r2, [r3, #8]
    }
 800ea32:	bf00      	nop
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	60f8      	str	r0, [r7, #12]
 800ea46:	607b      	str	r3, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	817b      	strh	r3, [r7, #10]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff fe02 	bl	800e65c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d008      	beq.n	800ea70 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff fe08 	bl	800e676 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d001      	beq.n	800ea70 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e000      	b.n	800ea72 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ea70:	2300      	movs	r3, #0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d002      	beq.n	800ea7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	601a      	str	r2, [r3, #0]
        }
    }
 800ea7c:	bf00      	nop
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	605a      	str	r2, [r3, #4]
    }
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff fc74 	bl	800e398 <_ZN8touchgfx8DrawableC1Ev>
 800eab0:	4a03      	ldr	r2, [pc, #12]	; (800eac0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	08028bb8 	.word	0x08028bb8

0800eac4 <_ZN8touchgfx6WidgetD1Ev>:
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	4a05      	ldr	r2, [pc, #20]	; (800eae4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fc8f 	bl	800e3f8 <_ZN8touchgfx8DrawableD1Ev>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	08028bb8 	.word	0x08028bb8

0800eae8 <_ZN8touchgfx6WidgetD0Ev>:
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff ffe7 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 800eaf6:	2128      	movs	r1, #40	; 0x28
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f017 fe6b 	bl	80267d4 <_ZdlPvj>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4618      	mov	r0, r3
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff fec4 	bl	800e8a4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800eb1c:	4a12      	ldr	r2, [pc, #72]	; (800eb68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f929 	bl	800ed80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800eb3e:	f7ff fdf5 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 800eb42:	4603      	mov	r3, r0
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	3208      	adds	r2, #8
 800eb48:	6812      	ldr	r2, [r2, #0]
 800eb4a:	2101      	movs	r1, #1
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800eb50:	f7ff fdf8 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 800eb54:	4603      	mov	r3, r0
 800eb56:	4618      	mov	r0, r3
 800eb58:	f010 fc31 	bl	801f3be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	08028c44 	.word	0x08028c44

0800eb6c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff ffe9 	bl	800eb6c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	605a      	str	r2, [r3, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	683a      	ldr	r2, [r7, #0]
 800eba6:	3308      	adds	r3, #8
 800eba8:	3208      	adds	r2, #8
 800ebaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebae:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800ebbc:	b590      	push	{r4, r7, lr}
 800ebbe:	b089      	sub	sp, #36	; 0x24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ebca:	4b10      	ldr	r3, [pc, #64]	; (800ec0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800ebcc:	61bb      	str	r3, [r7, #24]
 800ebce:	2300      	movs	r3, #0
 800ebd0:	61fb      	str	r3, [r7, #28]
 800ebd2:	f107 0008 	add.w	r0, r7, #8
 800ebd6:	f107 0318 	add.w	r3, r7, #24
 800ebda:	cb0c      	ldmia	r3, {r2, r3}
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	f000 f8eb 	bl	800edb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ebe2:	f107 0308 	add.w	r3, r7, #8
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f7ff ffcb 	bl	800eb84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ebee:	f107 0308 	add.w	r3, r7, #8
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 ff0c 	bl	800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ec04:	bf00      	nop
 800ec06:	3724      	adds	r7, #36	; 0x24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd90      	pop	{r4, r7, pc}
 800ec0c:	0800ec11 	.word	0x0800ec11

0800ec10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af02      	add	r7, sp, #8
 800ec16:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ec24:	461a      	mov	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	4b04      	ldr	r3, [pc, #16]	; (800ec40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800ec30:	4804      	ldr	r0, [pc, #16]	; (800ec44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ec32:	f000 f8f3 	bl	800ee1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2004f73c 	.word	0x2004f73c
 800ec44:	2004f738 	.word	0x2004f738

0800ec48 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouth()
{
 800ec48:	b590      	push	{r4, r7, lr}
 800ec4a:	b089      	sub	sp, #36	; 0x24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionSouthImpl);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ec56:	4b10      	ldr	r3, [pc, #64]	; (800ec98 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv+0x50>)
 800ec58:	61bb      	str	r3, [r7, #24]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
 800ec5e:	f107 0008 	add.w	r0, r7, #8
 800ec62:	f107 0318 	add.w	r3, r7, #24
 800ec66:	cb0c      	ldmia	r3, {r2, r3}
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	f000 f8a5 	bl	800edb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ec6e:	f107 0308 	add.w	r3, r7, #8
 800ec72:	4619      	mov	r1, r3
 800ec74:	4620      	mov	r0, r4
 800ec76:	f7ff ff85 	bl	800eb84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ec7a:	f107 0308 	add.w	r3, r7, #8
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 fec6 	bl	800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ec90:	bf00      	nop
 800ec92:	3724      	adds	r7, #36	; 0x24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd90      	pop	{r4, r7, pc}
 800ec98:	0800ec9d 	.word	0x0800ec9d

0800ec9c <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionSouthImpl()
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af02      	add	r7, sp, #8
 800eca2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	4b04      	ldr	r3, [pc, #16]	; (800eccc <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x30>)
 800ecbc:	4804      	ldr	r0, [pc, #16]	; (800ecd0 <_ZN23FrontendApplicationBase41gotoScreen1ScreenSlideTransitionSouthImplEv+0x34>)
 800ecbe:	f000 f9cb 	bl	800f058 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ecc2:	bf00      	nop
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	2004f73c 	.word	0x2004f73c
 800ecd0:	2004f738 	.word	0x2004f738

0800ecd4 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEast()
{
 800ecd4:	b590      	push	{r4, r7, lr}
 800ecd6:	b089      	sub	sp, #36	; 0x24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenWipeTransitionEastImpl);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ece2:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv+0x50>)
 800ece4:	61bb      	str	r3, [r7, #24]
 800ece6:	2300      	movs	r3, #0
 800ece8:	61fb      	str	r3, [r7, #28]
 800ecea:	f107 0008 	add.w	r0, r7, #8
 800ecee:	f107 0318 	add.w	r3, r7, #24
 800ecf2:	cb0c      	ldmia	r3, {r2, r3}
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	f000 f85f 	bl	800edb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ecfa:	f107 0308 	add.w	r3, r7, #8
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7ff ff3f 	bl	800eb84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ed06:	f107 0308 	add.w	r3, r7, #8
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f000 fe80 	bl	800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ed1c:	bf00      	nop
 800ed1e:	3724      	adds	r7, #36	; 0x24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd90      	pop	{r4, r7, pc}
 800ed24:	0800ed29 	.word	0x0800ed29

0800ed28 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenWipeTransitionEastImpl()
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af02      	add	r7, sp, #8
 800ed2e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	4b04      	ldr	r3, [pc, #16]	; (800ed58 <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x30>)
 800ed48:	4804      	ldr	r0, [pc, #16]	; (800ed5c <_ZN23FrontendApplicationBase39gotoScreen2ScreenWipeTransitionEastImplEv+0x34>)
 800ed4a:	f000 faa3 	bl	800f294 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ed4e:	bf00      	nop
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	2004f73c 	.word	0x2004f73c
 800ed5c:	2004f738 	.word	0x2004f738

0800ed60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	4a04      	ldr	r2, [pc, #16]	; (800ed7c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4618      	mov	r0, r3
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	08028d18 	.word	0x08028d18

0800ed80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff ffe8 	bl	800ed60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ed90:	4a08      	ldr	r2, [pc, #32]	; (800edb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	605a      	str	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	609a      	str	r2, [r3, #8]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	60da      	str	r2, [r3, #12]
    {
    }
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4618      	mov	r0, r3
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	08028c90 	.word	0x08028c90

0800edb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	4639      	mov	r1, r7
 800edc4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff ffc8 	bl	800ed60 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800edd0:	4a08      	ldr	r2, [pc, #32]	; (800edf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	605a      	str	r2, [r3, #4]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3308      	adds	r3, #8
 800ede0:	463a      	mov	r2, r7
 800ede2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ede6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	08028c90 	.word	0x08028c90

0800edf8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff fcba 	bl	800e77c <_ZN8touchgfx10TransitionC1Ev>
 800ee08:	4a03      	ldr	r2, [pc, #12]	; (800ee18 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	601a      	str	r2, [r3, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	08028c20 	.word	0x08028c20

0800ee1c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b08f      	sub	sp, #60	; 0x3c
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	689a      	ldr	r2, [r3, #8]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3320      	adds	r3, #32
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f241 023b 	movw	r2, #4155	; 0x103b
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d805      	bhi.n	800ee52 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ee46:	4b7f      	ldr	r3, [pc, #508]	; (800f044 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ee48:	4a7f      	ldr	r2, [pc, #508]	; (800f048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ee4a:	21a2      	movs	r1, #162	; 0xa2
 800ee4c:	487f      	ldr	r0, [pc, #508]	; (800f04c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ee4e:	f017 fced 	bl	802682c <__assert_func>
 800ee52:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3320      	adds	r3, #32
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4610      	mov	r0, r2
 800ee64:	4798      	blx	r3
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b0f      	cmp	r3, #15
 800ee6a:	d805      	bhi.n	800ee78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ee6c:	4b78      	ldr	r3, [pc, #480]	; (800f050 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ee6e:	4a76      	ldr	r2, [pc, #472]	; (800f048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ee70:	21a3      	movs	r1, #163	; 0xa3
 800ee72:	4876      	ldr	r0, [pc, #472]	; (800f04c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ee74:	f017 fcda 	bl	802682c <__assert_func>
 800ee78:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68da      	ldr	r2, [r3, #12]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3320      	adds	r3, #32
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4610      	mov	r0, r2
 800ee8a:	4798      	blx	r3
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b0b      	cmp	r3, #11
 800ee90:	d805      	bhi.n	800ee9e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ee92:	4b70      	ldr	r3, [pc, #448]	; (800f054 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ee94:	4a6c      	ldr	r2, [pc, #432]	; (800f048 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ee96:	21a4      	movs	r1, #164	; 0xa4
 800ee98:	486c      	ldr	r0, [pc, #432]	; (800f04c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ee9a:	f017 fcc7 	bl	802682c <__assert_func>
 800ee9e:	bf00      	nop
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	627b      	str	r3, [r7, #36]	; 0x24
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800eeac:	f008 ff8a 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f008 ff8c 	bl	8017dd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d008      	beq.n	800eed2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800eec0:	6a3b      	ldr	r3, [r7, #32]
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	330c      	adds	r3, #12
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4610      	mov	r0, r2
 800eed0:	4798      	blx	r3
    if (*currentTrans)
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d007      	beq.n	800eeea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	6a3b      	ldr	r3, [r7, #32]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4610      	mov	r0, r2
 800eee8:	4798      	blx	r3
    if (*currentScreen)
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d008      	beq.n	800ef04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3314      	adds	r3, #20
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4610      	mov	r0, r2
 800ef02:	4798      	blx	r3
    if (*currentPresenter)
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d008      	beq.n	800ef1e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3304      	adds	r3, #4
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4610      	mov	r0, r2
 800ef1c:	4798      	blx	r3
    if (*currentScreen)
 800ef1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d007      	beq.n	800ef36 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4610      	mov	r0, r2
 800ef34:	4798      	blx	r3
    if (*currentPresenter)
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d008      	beq.n	800ef50 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	3308      	adds	r3, #8
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
}
 800ef50:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f000 fab9 	bl	800f4d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4619      	mov	r1, r3
 800ef62:	200c      	movs	r0, #12
 800ef64:	f7ff f92c 	bl	800e1c0 <_ZnwjPv>
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff ff44 	bl	800edf8 <_ZN8touchgfx12NoTransitionC1Ev>
 800ef70:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	2100      	movs	r1, #0
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 fabc 	bl	800f4f6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	4619      	mov	r1, r3
 800ef82:	f241 003c 	movw	r0, #4156	; 0x103c
 800ef86:	f7ff f91b 	bl	800e1c0 <_ZnwjPv>
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f002 fdc1 	bl	8011b14 <_ZN11Screen1ViewC1Ev>
 800ef92:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	2100      	movs	r1, #0
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f000 fabe 	bl	800f51c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800efa0:	4603      	mov	r3, r0
 800efa2:	4619      	mov	r1, r3
 800efa4:	2010      	movs	r0, #16
 800efa6:	f7ff f90b 	bl	800e1c0 <_ZnwjPv>
 800efaa:	4604      	mov	r4, r0
 800efac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efae:	4620      	mov	r0, r4
 800efb0:	f002 fd58 	bl	8011a64 <_ZN16Screen1PresenterC1ER11Screen1View>
 800efb4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efba:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efc0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efc6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	3304      	adds	r3, #4
 800efd2:	e000      	b.n	800efd6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800efd4:	2300      	movs	r3, #0
 800efd6:	4619      	mov	r1, r3
 800efd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800efda:	f7ff fcbd 	bl	800e958 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	3304      	adds	r3, #4
 800efe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff fd4d 	bl	800ea84 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 faa7 	bl	800f542 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	61fb      	str	r3, [r7, #28]
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	61bb      	str	r3, [r7, #24]
 800effc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800effe:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	330c      	adds	r3, #12
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69f8      	ldr	r0, [r7, #28]
 800f00a:	4798      	blx	r3
    newPresenter->activate();
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	69b8      	ldr	r0, [r7, #24]
 800f014:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f016:	6979      	ldr	r1, [r7, #20]
 800f018:	69f8      	ldr	r0, [r7, #28]
 800f01a:	f00a fb37 	bl	801968c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3310      	adds	r3, #16
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6978      	ldr	r0, [r7, #20]
 800f028:	4798      	blx	r3
    newTransition->invalidate();
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	3314      	adds	r3, #20
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6978      	ldr	r0, [r7, #20]
 800f034:	4798      	blx	r3
}
 800f036:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	373c      	adds	r7, #60	; 0x3c
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd90      	pop	{r4, r7, pc}
 800f042:	bf00      	nop
 800f044:	08027a08 	.word	0x08027a08
 800f048:	08027a98 	.word	0x08027a98
 800f04c:	08027b9c 	.word	0x08027b9c
 800f050:	08027be0 	.word	0x08027be0
 800f054:	08027c84 	.word	0x08027c84

0800f058 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f058:	b590      	push	{r4, r7, lr}
 800f05a:	b08f      	sub	sp, #60	; 0x3c
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	689a      	ldr	r2, [r3, #8]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3320      	adds	r3, #32
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4610      	mov	r0, r2
 800f076:	4798      	blx	r3
 800f078:	4603      	mov	r3, r0
 800f07a:	f241 023b 	movw	r2, #4155	; 0x103b
 800f07e:	4293      	cmp	r3, r2
 800f080:	d805      	bhi.n	800f08e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f082:	4b7f      	ldr	r3, [pc, #508]	; (800f280 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f084:	4a7f      	ldr	r2, [pc, #508]	; (800f284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f086:	21a2      	movs	r1, #162	; 0xa2
 800f088:	487f      	ldr	r0, [pc, #508]	; (800f288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f08a:	f017 fbcf 	bl	802682c <__assert_func>
 800f08e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	3320      	adds	r3, #32
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4610      	mov	r0, r2
 800f0a0:	4798      	blx	r3
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b0f      	cmp	r3, #15
 800f0a6:	d805      	bhi.n	800f0b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f0a8:	4b78      	ldr	r3, [pc, #480]	; (800f28c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800f0aa:	4a76      	ldr	r2, [pc, #472]	; (800f284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f0ac:	21a3      	movs	r1, #163	; 0xa3
 800f0ae:	4876      	ldr	r0, [pc, #472]	; (800f288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f0b0:	f017 fbbc 	bl	802682c <__assert_func>
 800f0b4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	3320      	adds	r3, #32
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	4798      	blx	r3
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b53      	cmp	r3, #83	; 0x53
 800f0cc:	d805      	bhi.n	800f0da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f0ce:	4b70      	ldr	r3, [pc, #448]	; (800f290 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800f0d0:	4a6c      	ldr	r2, [pc, #432]	; (800f284 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f0d2:	21a4      	movs	r1, #164	; 0xa4
 800f0d4:	486c      	ldr	r0, [pc, #432]	; (800f288 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f0d6:	f017 fba9 	bl	802682c <__assert_func>
 800f0da:	bf00      	nop
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f0e8:	f008 fe6c 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f008 fe6e 	bl	8017dd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d008      	beq.n	800f10e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	330c      	adds	r3, #12
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4610      	mov	r0, r2
 800f10c:	4798      	blx	r3
    if (*currentTrans)
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d007      	beq.n	800f126 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	6a3b      	ldr	r3, [r7, #32]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4610      	mov	r0, r2
 800f124:	4798      	blx	r3
    if (*currentScreen)
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d008      	beq.n	800f140 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800f12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3314      	adds	r3, #20
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
    if (*currentPresenter)
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d008      	beq.n	800f15a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3304      	adds	r3, #4
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4610      	mov	r0, r2
 800f158:	4798      	blx	r3
    if (*currentScreen)
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d007      	beq.n	800f172 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800f162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4610      	mov	r0, r2
 800f170:	4798      	blx	r3
    if (*currentPresenter)
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d008      	beq.n	800f18c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3308      	adds	r3, #8
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4610      	mov	r0, r2
 800f18a:	4798      	blx	r3
}
 800f18c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	2100      	movs	r1, #0
 800f194:	4618      	mov	r0, r3
 800f196:	f000 f9e2 	bl	800f55e <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>
 800f19a:	4603      	mov	r3, r0
 800f19c:	4619      	mov	r1, r3
 800f19e:	2054      	movs	r0, #84	; 0x54
 800f1a0:	f7ff f80e 	bl	800e1c0 <_ZnwjPv>
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	2114      	movs	r1, #20
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fa2f 	bl	800f60c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>
 800f1ae:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 f99d 	bl	800f4f6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	4619      	mov	r1, r3
 800f1c0:	f241 003c 	movw	r0, #4156	; 0x103c
 800f1c4:	f7fe fffc 	bl	800e1c0 <_ZnwjPv>
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f002 fca2 	bl	8011b14 <_ZN11Screen1ViewC1Ev>
 800f1d0:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 f99f 	bl	800f51c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	2010      	movs	r0, #16
 800f1e4:	f7fe ffec 	bl	800e1c0 <_ZnwjPv>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f002 fc39 	bl	8011a64 <_ZN16Screen1PresenterC1ER11Screen1View>
 800f1f2:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1fe:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f204:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	3304      	adds	r3, #4
 800f210:	e000      	b.n	800f214 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800f212:	2300      	movs	r3, #0
 800f214:	4619      	mov	r1, r3
 800f216:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f218:	f7ff fb9e 	bl	800e958 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	3304      	adds	r3, #4
 800f220:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff fc2e 	bl	800ea84 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 f988 	bl	800f542 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	61fb      	str	r3, [r7, #28]
 800f236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f238:	61bb      	str	r3, [r7, #24]
 800f23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f23c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	330c      	adds	r3, #12
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69f8      	ldr	r0, [r7, #28]
 800f248:	4798      	blx	r3
    newPresenter->activate();
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	69b8      	ldr	r0, [r7, #24]
 800f252:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f254:	6979      	ldr	r1, [r7, #20]
 800f256:	69f8      	ldr	r0, [r7, #28]
 800f258:	f00a fa18 	bl	801968c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3310      	adds	r3, #16
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	6978      	ldr	r0, [r7, #20]
 800f266:	4798      	blx	r3
    newTransition->invalidate();
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	3314      	adds	r3, #20
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	4798      	blx	r3
}
 800f274:	bf00      	nop
    return newPresenter;
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f278:	4618      	mov	r0, r3
 800f27a:	373c      	adds	r7, #60	; 0x3c
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd90      	pop	{r4, r7, pc}
 800f280:	08027a08 	.word	0x08027a08
 800f284:	08027d28 	.word	0x08027d28
 800f288:	08027b9c 	.word	0x08027b9c
 800f28c:	08027be0 	.word	0x08027be0
 800f290:	08027c84 	.word	0x08027c84

0800f294 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f294:	b590      	push	{r4, r7, lr}
 800f296:	b08f      	sub	sp, #60	; 0x3c
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	689a      	ldr	r2, [r3, #8]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3320      	adds	r3, #32
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	4798      	blx	r3
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	f640 62a7 	movw	r2, #3751	; 0xea7
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d805      	bhi.n	800f2ca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f2be:	4b7f      	ldr	r3, [pc, #508]	; (800f4bc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f2c0:	4a7f      	ldr	r2, [pc, #508]	; (800f4c0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f2c2:	21a2      	movs	r1, #162	; 0xa2
 800f2c4:	487f      	ldr	r0, [pc, #508]	; (800f4c4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f2c6:	f017 fab1 	bl	802682c <__assert_func>
 800f2ca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3320      	adds	r3, #32
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b0f      	cmp	r3, #15
 800f2e2:	d805      	bhi.n	800f2f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f2e4:	4b78      	ldr	r3, [pc, #480]	; (800f4c8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800f2e6:	4a76      	ldr	r2, [pc, #472]	; (800f4c0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f2e8:	21a3      	movs	r1, #163	; 0xa3
 800f2ea:	4876      	ldr	r0, [pc, #472]	; (800f4c4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f2ec:	f017 fa9e 	bl	802682c <__assert_func>
 800f2f0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	68da      	ldr	r2, [r3, #12]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3320      	adds	r3, #32
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4610      	mov	r0, r2
 800f302:	4798      	blx	r3
 800f304:	4603      	mov	r3, r0
 800f306:	2b37      	cmp	r3, #55	; 0x37
 800f308:	d805      	bhi.n	800f316 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f30a:	4b70      	ldr	r3, [pc, #448]	; (800f4cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800f30c:	4a6c      	ldr	r2, [pc, #432]	; (800f4c0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f30e:	21a4      	movs	r1, #164	; 0xa4
 800f310:	486c      	ldr	r0, [pc, #432]	; (800f4c4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f312:	f017 fa8b 	bl	802682c <__assert_func>
 800f316:	bf00      	nop
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f324:	f008 fd4e 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 800f328:	4603      	mov	r3, r0
 800f32a:	4618      	mov	r0, r3
 800f32c:	f008 fd50 	bl	8017dd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d008      	beq.n	800f34a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	6a3b      	ldr	r3, [r7, #32]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	330c      	adds	r3, #12
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	4610      	mov	r0, r2
 800f348:	4798      	blx	r3
    if (*currentTrans)
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d007      	beq.n	800f362 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4610      	mov	r0, r2
 800f360:	4798      	blx	r3
    if (*currentScreen)
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d008      	beq.n	800f37c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3314      	adds	r3, #20
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4610      	mov	r0, r2
 800f37a:	4798      	blx	r3
    if (*currentPresenter)
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d008      	beq.n	800f396 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3304      	adds	r3, #4
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4610      	mov	r0, r2
 800f394:	4798      	blx	r3
    if (*currentScreen)
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d007      	beq.n	800f3ae <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	4610      	mov	r0, r2
 800f3ac:	4798      	blx	r3
    if (*currentPresenter)
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d008      	beq.n	800f3c8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4610      	mov	r0, r2
 800f3c6:	4798      	blx	r3
}
 800f3c8:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 f97f 	bl	800f6d4 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	4619      	mov	r1, r3
 800f3da:	2038      	movs	r0, #56	; 0x38
 800f3dc:	f7fe fef0 	bl	800e1c0 <_ZnwjPv>
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	2114      	movs	r1, #20
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f000 f9bd 	bl	800f764 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>
 800f3ea:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f000 f9f8 	bl	800f7e8 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	f640 60a8 	movw	r0, #3752	; 0xea8
 800f400:	f7fe fede 	bl	800e1c0 <_ZnwjPv>
 800f404:	4604      	mov	r4, r0
 800f406:	4620      	mov	r0, r4
 800f408:	f002 fc3a 	bl	8011c80 <_ZN11Screen2ViewC1Ev>
 800f40c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	2100      	movs	r1, #0
 800f414:	4618      	mov	r0, r3
 800f416:	f000 f9fa 	bl	800f80e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800f41a:	4603      	mov	r3, r0
 800f41c:	4619      	mov	r1, r3
 800f41e:	2010      	movs	r0, #16
 800f420:	f7fe fece 	bl	800e1c0 <_ZnwjPv>
 800f424:	4604      	mov	r4, r0
 800f426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f428:	4620      	mov	r0, r4
 800f42a:	f002 fbd1 	bl	8011bd0 <_ZN16Screen2PresenterC1ER11Screen2View>
 800f42e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f434:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f43a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f440:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800f448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44a:	3304      	adds	r3, #4
 800f44c:	e000      	b.n	800f450 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_14WipeTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800f44e:	2300      	movs	r3, #0
 800f450:	4619      	mov	r1, r3
 800f452:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f454:	f7ff fa80 	bl	800e958 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45a:	3304      	adds	r3, #4
 800f45c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fb10 	bl	800ea84 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 f9e3 	bl	800f834 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	61fb      	str	r3, [r7, #28]
 800f472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f478:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	330c      	adds	r3, #12
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	69f8      	ldr	r0, [r7, #28]
 800f484:	4798      	blx	r3
    newPresenter->activate();
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	69b8      	ldr	r0, [r7, #24]
 800f48e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f490:	6979      	ldr	r1, [r7, #20]
 800f492:	69f8      	ldr	r0, [r7, #28]
 800f494:	f00a f8fa 	bl	801968c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	3310      	adds	r3, #16
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6978      	ldr	r0, [r7, #20]
 800f4a2:	4798      	blx	r3
    newTransition->invalidate();
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	3314      	adds	r3, #20
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	6978      	ldr	r0, [r7, #20]
 800f4ae:	4798      	blx	r3
}
 800f4b0:	bf00      	nop
    return newPresenter;
 800f4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	373c      	adds	r7, #60	; 0x3c
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd90      	pop	{r4, r7, pc}
 800f4bc:	08027a08 	.word	0x08027a08
 800f4c0:	08027e40 	.word	0x08027e40
 800f4c4:	08027b9c 	.word	0x08027b9c
 800f4c8:	08027be0 	.word	0x08027be0
 800f4cc:	08027c84 	.word	0x08027c84

0800f4d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	3324      	adds	r3, #36	; 0x24
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	887a      	ldrh	r2, [r7, #2]
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	4798      	blx	r3
 800f4ec:	4603      	mov	r3, r0
    }
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3708      	adds	r7, #8
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
 800f4fe:	460b      	mov	r3, r1
 800f500:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3324      	adds	r3, #36	; 0x24
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	887a      	ldrh	r2, [r7, #2]
 800f50c:	4611      	mov	r1, r2
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	4798      	blx	r3
 800f512:	4603      	mov	r3, r0
    }
 800f514:	4618      	mov	r0, r3
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	460b      	mov	r3, r1
 800f526:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3324      	adds	r3, #36	; 0x24
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	887a      	ldrh	r2, [r7, #2]
 800f532:	4611      	mov	r1, r2
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	4798      	blx	r3
 800f538:	4603      	mov	r3, r0
    }
 800f53a:	4618      	mov	r0, r3
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800f542:	b480      	push	{r7}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800f55e:	b580      	push	{r7, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	460b      	mov	r3, r1
 800f568:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3324      	adds	r3, #36	; 0x24
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	887a      	ldrh	r2, [r7, #2]
 800f574:	4611      	mov	r1, r2
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	4798      	blx	r3
 800f57a:	4603      	mov	r3, r0
    }
 800f57c:	4618      	mov	r0, r3
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	4a05      	ldr	r2, [pc, #20]	; (800f5a4 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff fa95 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08029870 	.word	0x08029870

0800f5a8 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ffe7 	bl	800f584 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f5b6:	212c      	movs	r1, #44	; 0x2c
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f017 f90b 	bl	80267d4 <_ZdlPvj>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	4a05      	ldr	r2, [pc, #20]	; (800f5e8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev+0x20>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f000 f983 	bl	800f8e4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	08028afc 	.word	0x08028afc

0800f5ec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED0Ev>:
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff ffe7 	bl	800f5c8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800f5fa:	2110      	movs	r1, #16
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f017 f8e9 	bl	80267d4 <_ZdlPvj>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b087      	sub	sp, #28
 800f610:	af02      	add	r7, sp, #8
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	460b      	mov	r3, r1
 800f616:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7ff f8ae 	bl	800e77c <_ZN8touchgfx10TransitionC1Ev>
 800f620:	4a27      	ldr	r2, [pc, #156]	; (800f6c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb4>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	330c      	adds	r3, #12
 800f62a:	4618      	mov	r0, r3
 800f62c:	f006 fbc8 	bl	8015dc0 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	639a      	str	r2, [r3, #56]	; 0x38
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800f640:	4a20      	ldr	r2, [pc, #128]	; (800f6c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xb8>)
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f64a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f64e:	f107 0308 	add.w	r3, r7, #8
 800f652:	cb0c      	ldmia	r3, {r2, r3}
 800f654:	6879      	ldr	r1, [r7, #4]
 800f656:	4620      	mov	r0, r4
 800f658:	f000 f924 	bl	800f8a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	78fa      	ldrb	r2, [r7, #3]
 800f660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800f674:	4b14      	ldr	r3, [pc, #80]	; (800f6c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xbc>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01c      	beq.n	800f6b6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f103 000c 	add.w	r0, r3, #12
 800f682:	4b12      	ldr	r3, [pc, #72]	; (800f6cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc0>)
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	b21a      	sxth	r2, r3
 800f688:	4b11      	ldr	r3, [pc, #68]	; (800f6d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800f68a:	881b      	ldrh	r3, [r3, #0]
 800f68c:	b21b      	sxth	r3, r3
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	4613      	mov	r3, r2
 800f692:	2200      	movs	r2, #0
 800f694:	2100      	movs	r1, #0
 800f696:	f7fe fef9 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	330c      	adds	r3, #12
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f006 fb11 	bl	8015cc6 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                break;
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
                break;
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800f6a4:	4b0a      	ldr	r3, [pc, #40]	; (800f6d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EEC1Eh+0xc4>)
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	425b      	negs	r3, r3
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	b21a      	sxth	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800f6b4:	bf00      	nop
            }
        }
    }
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd90      	pop	{r4, r7, pc}
 800f6c0:	08028ad0 	.word	0x08028ad0
 800f6c4:	08027f58 	.word	0x08027f58
 800f6c8:	2004f6f3 	.word	0x2004f6f3
 800f6cc:	2004f6e8 	.word	0x2004f6e8
 800f6d0:	2004f6ea 	.word	0x2004f6ea

0800f6d4 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3324      	adds	r3, #36	; 0x24
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	887a      	ldrh	r2, [r7, #2]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	4798      	blx	r3
 800f6f0:	4603      	mov	r3, r0
    }
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4618      	mov	r0, r3
 800f708:	f7ff f9ca 	bl	800eaa0 <_ZN8touchgfx6WidgetC1Ev>
 800f70c:	4a03      	ldr	r2, [pc, #12]	; (800f71c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	08028b50 	.word	0x08028b50

0800f720 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	4a05      	ldr	r2, [pc, #20]	; (800f740 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f7ff f9c7 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	08028b50 	.word	0x08028b50

0800f744 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ffe7 	bl	800f720 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f752:	2128      	movs	r1, #40	; 0x28
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f017 f83d 	bl	80267d4 <_ZdlPvj>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af02      	add	r7, sp, #8
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4618      	mov	r0, r3
 800f774:	f7ff f802 	bl	800e77c <_ZN8touchgfx10TransitionC1Ev>
 800f778:	4a18      	ldr	r2, [pc, #96]	; (800f7dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x78>)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	78fa      	ldrb	r2, [r7, #3]
 800f782:	725a      	strb	r2, [r3, #9]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	729a      	strb	r2, [r3, #10]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	81da      	strh	r2, [r3, #14]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	3310      	adds	r3, #16
 800f794:	2228      	movs	r2, #40	; 0x28
 800f796:	2100      	movs	r1, #0
 800f798:	4618      	mov	r0, r3
 800f79a:	f017 f8c5 	bl	8026928 <memset>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3310      	adds	r3, #16
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff ffaa 	bl	800f6fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800f7a8:	4b0d      	ldr	r3, [pc, #52]	; (800f7e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	b21a      	sxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	819a      	strh	r2, [r3, #12]
            break;
 800f7b2:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 0010 	add.w	r0, r3, #16
 800f7ba:	4b09      	ldr	r3, [pc, #36]	; (800f7e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x7c>)
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	b21a      	sxth	r2, r3
 800f7c0:	4b08      	ldr	r3, [pc, #32]	; (800f7e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b21b      	sxth	r3, r3
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	f7fe fe5d 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	08028b2c 	.word	0x08028b2c
 800f7e0:	2004f6e8 	.word	0x2004f6e8
 800f7e4:	2004f6ea 	.word	0x2004f6ea

0800f7e8 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	3324      	adds	r3, #36	; 0x24
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	887a      	ldrh	r2, [r7, #2]
 800f7fe:	4611      	mov	r1, r2
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	4798      	blx	r3
 800f804:	4603      	mov	r3, r0
    }
 800f806:	4618      	mov	r0, r3
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	3324      	adds	r3, #36	; 0x24
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	887a      	ldrh	r2, [r7, #2]
 800f824:	4611      	mov	r1, r2
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	4798      	blx	r3
 800f82a:	4603      	mov	r3, r0
    }
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	683a      	ldr	r2, [r7, #0]
 800f842:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f844:	bf00      	nop
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d00a      	beq.n	800f87a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2a>
        case WEST:
            d.moveRelative(calculatedValue, 0);
            break;
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	3354      	adds	r3, #84	; 0x54
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800f872:	2100      	movs	r1, #0
 800f874:	6838      	ldr	r0, [r7, #0]
 800f876:	4798      	blx	r3
            break;
 800f878:	e000      	b.n	800f87c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800f87a:	bf00      	nop
        }
    }
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
	...

0800f884 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	4a04      	ldr	r2, [pc, #16]	; (800f8a0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr
 800f8a0:	08028b14 	.word	0x08028b14

0800f8a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7ff ffe4 	bl	800f884 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800f8bc:	4a08      	ldr	r2, [pc, #32]	; (800f8e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	68ba      	ldr	r2, [r7, #8]
 800f8c6:	605a      	str	r2, [r3, #4]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	3308      	adds	r3, #8
 800f8cc:	463a      	mov	r2, r7
 800f8ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	08028afc 	.word	0x08028afc

0800f8e4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
    }
 800f8ec:	4a04      	ldr	r2, [pc, #16]	; (800f900 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr
 800f900:	08028b14 	.word	0x08028b14

0800f904 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    }
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7ff ffe9 	bl	800f8e4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f912:	2104      	movs	r1, #4
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f016 ff5d 	bl	80267d4 <_ZdlPvj>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4618      	mov	r0, r3
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>:
class SlideTransition : public Transition
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	4a0a      	ldr	r2, [pc, #40]	; (800f958 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev+0x34>)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	333c      	adds	r3, #60	; 0x3c
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff fe46 	bl	800f5c8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	330c      	adds	r3, #12
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff fe1f 	bl	800f584 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fe ff2d 	bl	800e7a8 <_ZN8touchgfx10TransitionD1Ev>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	08028ad0 	.word	0x08028ad0

0800f95c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED0Ev>:
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7ff ffdd 	bl	800f924 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EED1Ev>
 800f96a:	2154      	movs	r1, #84	; 0x54
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f016 ff31 	bl	80267d4 <_ZdlPvj>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
class WipeTransition : public Transition
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	4a08      	ldr	r2, [pc, #32]	; (800f9a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	3310      	adds	r3, #16
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff fec6 	bl	800f720 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4618      	mov	r0, r3
 800f998:	f7fe ff06 	bl	800e7a8 <_ZN8touchgfx10TransitionD1Ev>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	08028b2c 	.word	0x08028b2c

0800f9ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff ffe1 	bl	800f97c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>
 800f9ba:	2138      	movs	r1, #56	; 0x38
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f016 ff09 	bl	80267d4 <_ZdlPvj>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <_ZN8touchgfx12NoTransitionD1Ev>:
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	4a05      	ldr	r2, [pc, #20]	; (800f9ec <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe fee3 	bl	800e7a8 <_ZN8touchgfx10TransitionD1Ev>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	08028c20 	.word	0x08028c20

0800f9f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffe7 	bl	800f9cc <_ZN8touchgfx12NoTransitionD1Ev>
 800f9fe:	210c      	movs	r1, #12
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f016 fee7 	bl	80267d4 <_ZdlPvj>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	4a05      	ldr	r2, [pc, #20]	; (800fa30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	601a      	str	r2, [r3, #0]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fe fc99 	bl	800e358 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	08028c90 	.word	0x08028c90

0800fa34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f7ff ffe7 	bl	800fa10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fa42:	2110      	movs	r1, #16
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f016 fec5 	bl	80267d4 <_ZdlPvj>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800fa5c:	4b40      	ldr	r3, [pc, #256]	; (800fb60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x10c>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f083 0301 	eor.w	r3, r3, #1
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d003      	beq.n	800fa72 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x1e>
            done = true;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	721a      	strb	r2, [r3, #8]
            return;
 800fa70:	e073      	b.n	800fb5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe feb7 	bl	800e7e8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fa80:	3301      	adds	r3, #1
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d82f      	bhi.n	800fafa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800faa0:	b298      	uxth	r0, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800faae:	b29b      	uxth	r3, r3
 800fab0:	2100      	movs	r1, #0
 800fab2:	f009 fdf1 	bl	8019698 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800fab6:	4603      	mov	r3, r0
 800fab8:	461a      	mov	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	f003 0301 	and.w	r3, r3, #1
 800facc:	b29b      	uxth	r3, r3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d01b      	beq.n	800fb0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800fad8:	b29b      	uxth	r3, r3
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	dd01      	ble.n	800fae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x94>
 800fae4:	2201      	movs	r2, #1
 800fae6:	e001      	b.n	800faec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x98>
 800fae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faec:	4413      	add	r3, r2
 800faee:	b29b      	uxth	r3, r3
 800faf0:	b21a      	sxth	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800faf8:	e007      	b.n	800fb0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0xb6>
            done = true;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 800fb08:	e027      	b.n	800fb5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getY();
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	330c      	adds	r3, #12
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fe fcdd 	bl	800e4ce <_ZNK8touchgfx8Drawable4getYEv>
 800fb14:	4603      	mov	r3, r0
 800fb16:	4619      	mov	r1, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	b28b      	uxth	r3, r1
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	b21a      	sxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(0, calculatedValue);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f103 000c 	add.w	r0, r3, #12
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	f009 f959 	bl	8018df4 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800fb42:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6858      	ldr	r0, [r3, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	337c      	adds	r3, #124	; 0x7c
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	323c      	adds	r2, #60	; 0x3c
 800fb56:	4611      	mov	r1, r2
 800fb58:	4798      	blx	r3
    }
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	2004f6f3 	.word	0x2004f6f3

0800fb64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv>:
    virtual void tearDown()
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800fb6c:	4b0b      	ldr	r3, [pc, #44]	; (800fb9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x38>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00e      	beq.n	800fb92 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00a      	beq.n	800fb92 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6858      	ldr	r0, [r3, #4]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3364      	adds	r3, #100	; 0x64
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	320c      	adds	r2, #12
 800fb8e:	4611      	mov	r1, r2
 800fb90:	4798      	blx	r3
    }
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	2004f6f3 	.word	0x2004f6f3

0800fba0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv>:
    virtual void init()
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800fba8:	4b1a      	ldr	r3, [pc, #104]	; (800fc14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x74>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d02d      	beq.n	800fc0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x6c>
            Transition::init();
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fe2c 	bl	800e810 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800fbb8:	4a17      	ldr	r2, [pc, #92]	; (800fc18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE4initEv+0x78>)
 800fbba:	f107 0318 	add.w	r3, r7, #24
 800fbbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbc2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbc6:	f107 0008 	add.w	r0, r7, #8
 800fbca:	f107 0318 	add.w	r3, r7, #24
 800fbce:	cb0c      	ldmia	r3, {r2, r3}
 800fbd0:	6879      	ldr	r1, [r7, #4]
 800fbd2:	f7ff fe67 	bl	800f8a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	685a      	ldr	r2, [r3, #4]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	337c      	adds	r3, #124	; 0x7c
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	f107 0108 	add.w	r1, r7, #8
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4798      	blx	r3
            screenContainer->add(snapshot);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6858      	ldr	r0, [r3, #4]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3360      	adds	r3, #96	; 0x60
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	320c      	adds	r2, #12
 800fbfe:	4611      	mov	r1, r2
 800fc00:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800fc02:	f107 0308 	add.w	r3, r7, #8
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7ff fcde 	bl	800f5c8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvED1Ev>
    }
 800fc0c:	bf00      	nop
 800fc0e:	3720      	adds	r7, #32
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	2004f6f3 	.word	0x2004f6f3
 800fc18:	08027f60 	.word	0x08027f60

0800fc1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3354      	adds	r3, #84	; 0x54
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4a05      	ldr	r2, [pc, #20]	; (800fc44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE1EE16initMoveDrawableERNS_8DrawableE+0x28>)
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	b212      	sxth	r2, r2
 800fc34:	2100      	movs	r1, #0
 800fc36:	6838      	ldr	r0, [r7, #0]
 800fc38:	4798      	blx	r3
            break;
 800fc3a:	bf00      	nop
    }
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	2004f6ea 	.word	0x2004f6ea

0800fc48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	68d2      	ldr	r2, [r2, #12]
 800fc5a:	1052      	asrs	r2, r2, #1
 800fc5c:	1898      	adds	r0, r3, r2
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d102      	bne.n	800fc70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x28>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	e00a      	b.n	800fc86 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	68d2      	ldr	r2, [r2, #12]
 800fc78:	1052      	asrs	r2, r2, #1
 800fc7a:	4413      	add	r3, r2
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	6892      	ldr	r2, [r2, #8]
 800fc82:	4413      	add	r3, r2
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	6839      	ldr	r1, [r7, #0]
 800fc88:	4798      	blx	r3
    }
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800fc92:	b480      	push	{r7}
 800fc94:	b083      	sub	sp, #12
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d010      	beq.n	800fcc4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d107      	bne.n	800fcba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	f003 0301 	and.w	r3, r3, #1
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x28>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e000      	b.n	800fcbc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d001      	beq.n	800fcc4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x32>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e000      	b.n	800fcc6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE1EEERNS_8DrawableEvvE7isValidEv+0x34>
 800fcc4:	2300      	movs	r3, #0
    }
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
	...

0800fcd4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 800fcd4:	b590      	push	{r4, r7, lr}
 800fcd6:	b093      	sub	sp, #76	; 0x4c
 800fcd8:	af02      	add	r7, sp, #8
 800fcda:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fd82 	bl	800e7e8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7a9b      	ldrb	r3, [r3, #10]
 800fce8:	3301      	adds	r3, #1
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	7a9a      	ldrb	r2, [r3, #10]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	7a5b      	ldrb	r3, [r3, #9]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d82b      	bhi.n	800fd54 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	7a9b      	ldrb	r3, [r3, #10]
 800fd00:	b298      	uxth	r0, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	7a5b      	ldrb	r3, [r3, #9]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	2100      	movs	r1, #0
 800fd10:	f009 fcc2 	bl	8019698 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461a      	mov	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d019      	beq.n	800fd62 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800fd3c:	2a00      	cmp	r2, #0
 800fd3e:	dd01      	ble.n	800fd44 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 800fd40:	2201      	movs	r2, #1
 800fd42:	e001      	b.n	800fd48 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 800fd44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd48:	4413      	add	r3, r2
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	b21a      	sxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	81da      	strh	r2, [r3, #14]
 800fd52:	e006      	b.n	800fd62 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	729a      	strb	r2, [r3, #10]
            return;
 800fd60:	e07d      	b.n	800fe5e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        switch (templateDirection)
        {
        case EAST:
            {
                // Cover must have width of remaining part
                const uint16_t prevSolidWidth = solid.getWidth();
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	3310      	adds	r3, #16
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe fbbe 	bl	800e4e8 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f103 0010 	add.w	r0, r3, #16
 800fd76:	4b3b      	ldr	r3, [pc, #236]	; (800fe64 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800fd78:	881a      	ldrh	r2, [r3, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	b21b      	sxth	r3, r3
 800fd88:	4619      	mov	r1, r3
 800fd8a:	f7fe fbf6 	bl	800e57a <_ZN8touchgfx8Drawable8setWidthEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	3310      	adds	r3, #16
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fe fba8 	bl	800e4e8 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	3310      	adds	r3, #16
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fe fb9e 	bl	800e4e8 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fdac:	4603      	mov	r3, r0
 800fdae:	4619      	mov	r1, r3
 800fdb0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800fdb4:	4b2c      	ldr	r3, [pc, #176]	; (800fe68 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	b21b      	sxth	r3, r3
 800fdba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f7fe fa1f 	bl	800e206 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3310      	adds	r3, #16
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fddc:	4611      	mov	r1, r2
 800fdde:	4798      	blx	r3
                break;
 800fde0:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	7a9b      	ldrb	r3, [r3, #10]
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d139      	bne.n	800fe5e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
 800fdea:	4b20      	ldr	r3, [pc, #128]	; (800fe6c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x198>)
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d035      	beq.n	800fe5e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3310      	adds	r3, #16
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fe fb3c 	bl	800e474 <_ZNK8touchgfx8Drawable7getRectEv>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	f107 0310 	add.w	r3, r7, #16
 800fe02:	6810      	ldr	r0, [r2, #0]
 800fe04:	6851      	ldr	r1, [r2, #4]
 800fe06:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800fe08:	f7fe fc90 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	3230      	adds	r2, #48	; 0x30
 800fe12:	6812      	ldr	r2, [r2, #0]
 800fe14:	4618      	mov	r0, r3
 800fe16:	4790      	blx	r2
 800fe18:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 800fe1a:	f107 0308 	add.w	r3, r7, #8
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe f9da 	bl	800e1d8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800fe24:	2300      	movs	r3, #0
 800fe26:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 800fe2c:	4b0d      	ldr	r3, [pc, #52]	; (800fe64 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x190>)
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	b21b      	sxth	r3, r3
 800fe32:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 800fe34:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x194>)
 800fe36:	881b      	ldrh	r3, [r3, #0]
 800fe38:	b21b      	sxth	r3, r3
 800fe3a:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800fe3c:	f7fe fc76 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 800fe40:	f7fe fc80 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 800fe44:	6803      	ldr	r3, [r0, #0]
 800fe46:	330c      	adds	r3, #12
 800fe48:	681c      	ldr	r4, [r3, #0]
 800fe4a:	f107 0310 	add.w	r3, r7, #16
 800fe4e:	f107 0208 	add.w	r2, r7, #8
 800fe52:	2100      	movs	r1, #0
 800fe54:	9101      	str	r1, [sp, #4]
 800fe56:	21ff      	movs	r1, #255	; 0xff
 800fe58:	9100      	str	r1, [sp, #0]
 800fe5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe5c:	47a0      	blx	r4
        }
    }
 800fe5e:	3744      	adds	r7, #68	; 0x44
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd90      	pop	{r4, r7, pc}
 800fe64:	2004f6e8 	.word	0x2004f6e8
 800fe68:	2004f6ea 	.word	0x2004f6ea
 800fe6c:	2004f6f2 	.word	0x2004f6f2

0800fe70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:

    virtual void tearDown()
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6858      	ldr	r0, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3364      	adds	r3, #100	; 0x64
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	3210      	adds	r2, #16
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4798      	blx	r3
    }
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fe fcb5 	bl	800e810 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6858      	ldr	r0, [r3, #4]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	3360      	adds	r3, #96	; 0x60
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	3210      	adds	r2, #16
 800feb8:	4611      	mov	r1, r2
 800feba:	4798      	blx	r3
    }
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    {
    }
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
        }
 800fee2:	bf00      	nop
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af02      	add	r7, sp, #8
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	4613      	mov	r3, r2
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7fe f97a 	bl	800e206 <_ZN8touchgfx4RectC1Essss>
        }
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	68d2      	ldr	r2, [r2, #12]
 800ff2a:	1052      	asrs	r2, r2, #1
 800ff2c:	1899      	adds	r1, r3, r2
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d102      	bne.n	800ff40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	e00a      	b.n	800ff56 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	68d2      	ldr	r2, [r2, #12]
 800ff48:	1052      	asrs	r2, r2, #1
 800ff4a:	4413      	add	r3, r2
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	6892      	ldr	r2, [r2, #8]
 800ff52:	4413      	add	r3, r2
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4608      	mov	r0, r1
 800ff58:	4798      	blx	r3
    }
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ff62:	b480      	push	{r7}
 800ff64:	b083      	sub	sp, #12
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d010      	beq.n	800ff94 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d107      	bne.n	800ff8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	f003 0301 	and.w	r3, r3, #1
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d101      	bne.n	800ff8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ff86:	2301      	movs	r3, #1
 800ff88:	e000      	b.n	800ff8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d001      	beq.n	800ff94 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ff90:	2301      	movs	r3, #1
 800ff92:	e000      	b.n	800ff96 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ff94:	2300      	movs	r3, #0
    }
 800ff96:	4618      	mov	r0, r3
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800ffa2:	b480      	push	{r7}
 800ffa4:	b083      	sub	sp, #12
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
        : color(0)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	601a      	str	r2, [r3, #0]
    }
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	370c      	adds	r7, #12
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ffbe:	b480      	push	{r7}
 800ffc0:	b083      	sub	sp, #12
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	6039      	str	r1, [r7, #0]
        : color(col)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	601a      	str	r2, [r3, #0]
    }
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
        return color;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
    }
 800ffe8:	4618      	mov	r0, r3
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8010000:	4618      	mov	r0, r3
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
    {
 8010014:	4a06      	ldr	r2, [pc, #24]	; (8010030 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	601a      	str	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	3304      	adds	r3, #4
 801001e:	4618      	mov	r0, r3
 8010020:	f000 ff84 	bl	8010f2c <_ZN8touchgfx9ContainerD1Ev>
    }
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	08029b64 	.word	0x08029b64

08010034 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
    }
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7ff ffe5 	bl	801000c <_ZN8touchgfx6ScreenD1Ev>
 8010042:	213c      	movs	r1, #60	; 0x3c
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f016 fbc5 	bl	80267d4 <_ZdlPvj>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
    {
    }
 801005c:	bf00      	nop
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
    {
    }
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
    {
    }
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
    {
    }
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	460b      	mov	r3, r1
 80100ae:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3304      	adds	r3, #4
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f003 fdaf 	bl	8013c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80100d2:	bf00      	nop
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
	...

080100dc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4618      	mov	r0, r3
 80100e8:	2326      	movs	r3, #38	; 0x26
 80100ea:	461a      	mov	r2, r3
 80100ec:	2100      	movs	r1, #0
 80100ee:	f016 fc1b 	bl	8026928 <memset>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fcd3 	bl	800eaa0 <_ZN8touchgfx6WidgetC1Ev>
 80100fa:	4a09      	ldr	r2, [pc, #36]	; (8010120 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	22ff      	movs	r2, #255	; 0xff
 8010104:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3328      	adds	r3, #40	; 0x28
 801010c:	2100      	movs	r1, #0
 801010e:	4618      	mov	r0, r3
 8010110:	f7ff ff55 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4618      	mov	r0, r3
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	080298e0 	.word	0x080298e0

08010124 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8010148:	4a06      	ldr	r2, [pc, #24]	; (8010164 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	809a      	strh	r2, [r3, #4]
    {
    }
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	08028e88 	.word	0x08028e88

08010168 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
    {
 8010170:	4a04      	ldr	r2, [pc, #16]	; (8010184 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	601a      	str	r2, [r3, #0]
    }
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4618      	mov	r0, r3
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr
 8010184:	08028e88 	.word	0x08028e88

08010188 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
    }
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7ff ffe9 	bl	8010168 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010196:	2108      	movs	r1, #8
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f016 fb1b 	bl	80267d4 <_ZdlPvj>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80101b0:	2300      	movs	r3, #0
    }
 80101b2:	4618      	mov	r0, r3
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	809a      	strh	r2, [r3, #4]
        return true;
 80101d2:	2301      	movs	r3, #1
    }
 80101d4:	4618      	mov	r0, r3
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    {
        return;
 80101e8:	bf00      	nop
    }
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr

080101f4 <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
            : v(0)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	601a      	str	r2, [r3, #0]
        {
        }
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4618      	mov	r0, r3
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
            : v(i)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	683a      	ldr	r2, [r7, #0]
 801021e:	601a      	str	r2, [r3, #0]
        {
        }
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr

0801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801022e:	b480      	push	{r7}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
        }
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 8010246:	b480      	push	{r7}
 8010248:	b083      	sub	sp, #12
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	6039      	str	r1, [r7, #0]
            : v(i)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	601a      	str	r2, [r3, #0]
        {
        }
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	683a      	ldr	r2, [r7, #0]
 8010272:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010274:	bf00      	nop
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	78fa      	ldrb	r2, [r7, #3]
 8010290:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 80102ae:	4618      	mov	r0, r3
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b082      	sub	sp, #8
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7fd ff87 	bl	800e1d8 <_ZN8touchgfx4RectC1Ev>
    }
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
	...

080102d4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
    {
 80102de:	4a08      	ldr	r2, [pc, #32]	; (8010300 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	3304      	adds	r3, #4
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7ff fe5a 	bl	800ffa2 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80102ee:	6839      	ldr	r1, [r7, #0]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 f827 	bl	8010344 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4618      	mov	r0, r3
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	08028e74 	.word	0x08028e74

08010304 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
    {
 801030c:	4a04      	ldr	r2, [pc, #16]	; (8010320 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	601a      	str	r2, [r3, #0]
    }
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4618      	mov	r0, r3
 8010316:	370c      	adds	r7, #12
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr
 8010320:	08028e74 	.word	0x08028e74

08010324 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    }
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7ff ffe9 	bl	8010304 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8010332:	2108      	movs	r1, #8
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f016 fa4d 	bl	80267d4 <_ZdlPvj>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4618      	mov	r0, r3
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	605a      	str	r2, [r3, #4]
    }
 8010354:	bf00      	nop
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff fee8 	bl	8010140 <_ZN8touchgfx15AbstractPainterC1Ev>
 8010370:	4a26      	ldr	r2, [pc, #152]	; (801040c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	601a      	str	r2, [r3, #0]
 8010376:	2300      	movs	r3, #0
 8010378:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801037a:	f7fe f9e3 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 801037e:	4603      	mov	r3, r0
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	322c      	adds	r2, #44	; 0x2c
 8010384:	6812      	ldr	r2, [r2, #0]
 8010386:	4618      	mov	r0, r3
 8010388:	4790      	blx	r2
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
 801038e:	7bfb      	ldrb	r3, [r7, #15]
 8010390:	4293      	cmp	r3, r2
 8010392:	bf0c      	ite	eq
 8010394:	2301      	moveq	r3, #1
 8010396:	2300      	movne	r3, #0
 8010398:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801039a:	f7fe f9c7 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 801039e:	4603      	mov	r3, r0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7ff fe27 	bl	800fff4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bf14      	ite	ne
 80103ac:	2301      	movne	r3, #1
 80103ae:	2300      	moveq	r3, #0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d01b      	beq.n	80103ee <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80103b6:	f7fe f9b9 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 80103ba:	4603      	mov	r3, r0
 80103bc:	4618      	mov	r0, r3
 80103be:	f7ff fe19 	bl	800fff4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80103c2:	4603      	mov	r3, r0
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	322c      	adds	r2, #44	; 0x2c
 80103c8:	6812      	ldr	r2, [r2, #0]
 80103ca:	4618      	mov	r0, r3
 80103cc:	4790      	blx	r2
 80103ce:	4603      	mov	r3, r0
 80103d0:	461a      	mov	r2, r3
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	4293      	cmp	r3, r2
 80103d6:	bf0c      	ite	eq
 80103d8:	2301      	moveq	r3, #1
 80103da:	2300      	movne	r3, #0
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	7bbb      	ldrb	r3, [r7, #14]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	bf14      	ite	ne
 80103e8:	2301      	movne	r3, #1
 80103ea:	2300      	moveq	r3, #0
 80103ec:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80103ee:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d105      	bne.n	8010400 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 80103f4:	4b06      	ldr	r3, [pc, #24]	; (8010410 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 80103f6:	4a07      	ldr	r2, [pc, #28]	; (8010414 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 80103f8:	212c      	movs	r1, #44	; 0x2c
 80103fa:	4807      	ldr	r0, [pc, #28]	; (8010418 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 80103fc:	f016 fa16 	bl	802682c <__assert_func>
 8010400:	bf00      	nop
    }
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4618      	mov	r0, r3
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	08028e54 	.word	0x08028e54
 8010410:	08027f68 	.word	0x08027f68
 8010414:	08027fc8 	.word	0x08027fc8
 8010418:	08028004 	.word	0x08028004

0801041c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	4a05      	ldr	r2, [pc, #20]	; (801043c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fe9b 	bl	8010168 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	08028e54 	.word	0x08028e54

08010440 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7ff ffe7 	bl	801041c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801044e:	2108      	movs	r1, #8
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f016 f9bf 	bl	80267d4 <_ZdlPvj>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff ff77 	bl	8010360 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3308      	adds	r3, #8
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff ff2b 	bl	80102d4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 801047e:	4a05      	ldr	r2, [pc, #20]	; (8010494 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	601a      	str	r2, [r3, #0]
 8010484:	4a04      	ldr	r2, [pc, #16]	; (8010498 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	609a      	str	r2, [r3, #8]
    {
    }
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	080295ec 	.word	0x080295ec
 8010498:	08029610 	.word	0x08029610

0801049c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b085      	sub	sp, #20
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	3308      	adds	r3, #8
 80104aa:	6839      	ldr	r1, [r7, #0]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff ff49 	bl	8010344 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 80104b8:	f107 030c 	add.w	r3, r7, #12
 80104bc:	4618      	mov	r0, r3
 80104be:	f7ff fd8d 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 80104c2:	4603      	mov	r3, r0
 80104c4:	0a1b      	lsrs	r3, r3, #8
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80104cc:	f023 0307 	bic.w	r3, r3, #7
 80104d0:	b29c      	uxth	r4, r3
 80104d2:	f107 030c 	add.w	r3, r7, #12
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7ff fd80 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 80104dc:	4603      	mov	r3, r0
 80104de:	095b      	lsrs	r3, r3, #5
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	4323      	orrs	r3, r4
 80104ea:	b29c      	uxth	r4, r3
 80104ec:	f107 030c 	add.w	r3, r7, #12
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff fd73 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 80104f6:	4603      	mov	r3, r0
 80104f8:	08db      	lsrs	r3, r3, #3
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	f003 031f 	and.w	r3, r3, #31
 8010500:	b29b      	uxth	r3, r3
 8010502:	4323      	orrs	r3, r4
 8010504:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	821a      	strh	r2, [r3, #16]
    }
 801050a:	bf00      	nop
 801050c:	3714      	adds	r7, #20
 801050e:	46bd      	mov	sp, r7
 8010510:	bd90      	pop	{r4, r7, pc}

08010512 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8010512:	f1a0 0008 	sub.w	r0, r0, #8
 8010516:	e7c1      	b.n	801049c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

08010518 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	4a05      	ldr	r2, [pc, #20]	; (8010538 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	f7ff fd6f 	bl	801000c <_ZN8touchgfx6ScreenD1Ev>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	08028e20 	.word	0x08028e20

0801053c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7ff ffe7 	bl	8010518 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801054a:	2140      	movs	r1, #64	; 0x40
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f016 f941 	bl	80267d4 <_ZdlPvj>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	4a1b      	ldr	r2, [pc, #108]	; (80105d4 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	601a      	str	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010570:	4618      	mov	r0, r3
 8010572:	f000 fd41 	bl	8010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801057c:	4618      	mov	r0, r3
 801057e:	f000 fcb3 	bl	8010ee8 <_ZN8touchgfx5ShapeILt4EED1Ev>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010588:	4618      	mov	r0, r3
 801058a:	f000 fd35 	bl	8010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	33f4      	adds	r3, #244	; 0xf4
 8010592:	4618      	mov	r0, r3
 8010594:	f000 fca8 	bl	8010ee8 <_ZN8touchgfx5ShapeILt4EED1Ev>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	33e0      	adds	r3, #224	; 0xe0
 801059c:	4618      	mov	r0, r3
 801059e:	f000 fd2b 	bl	8010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3398      	adds	r3, #152	; 0x98
 80105a6:	4618      	mov	r0, r3
 80105a8:	f000 fd04 	bl	8010fb4 <_ZN8touchgfx6CircleD1Ev>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	336c      	adds	r3, #108	; 0x6c
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 fcdd 	bl	8010f70 <_ZN8touchgfx3BoxD1Ev>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3340      	adds	r3, #64	; 0x40
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 fcd8 	bl	8010f70 <_ZN8touchgfx3BoxD1Ev>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7ff ffa8 	bl	8010518 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4618      	mov	r0, r3
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	08028d58 	.word	0x08028d58

080105d8 <_ZN15Screen1ViewBaseD0Ev>:
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff ffbb 	bl	801055c <_ZN15Screen1ViewBaseD1Ev>
 80105e6:	f241 013c 	movw	r1, #4156	; 0x103c
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f016 f8f2 	bl	80267d4 <_ZdlPvj>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b082      	sub	sp, #8
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010602:	f007 fbdf 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 8010606:	4603      	mov	r3, r0
    }
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	4a05      	ldr	r2, [pc, #20]	; (8010630 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	601a      	str	r2, [r3, #0]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4618      	mov	r0, r3
 8010622:	f7fe fa4f 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	080297f8 	.word	0x080297f8

08010634 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7ff ffe7 	bl	8010610 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010642:	212c      	movs	r1, #44	; 0x2c
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f016 f8c5 	bl	80267d4 <_ZdlPvj>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	4a05      	ldr	r2, [pc, #20]	; (8010674 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4618      	mov	r0, r3
 8010666:	f7ff ffd3 	bl	8010610 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	080296ec 	.word	0x080296ec

08010678 <_ZN8touchgfx13AbstractShapeD0Ev>:
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7ff ffe7 	bl	8010654 <_ZN8touchgfx13AbstractShapeD1Ev>
 8010686:	2148      	movs	r1, #72	; 0x48
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f016 f8a3 	bl	80267d4 <_ZdlPvj>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <_ZN8touchgfx5ShapeILt4EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8010698:	b5b0      	push	{r4, r5, r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f004 fcc0 	bl	8015028 <_ZN8touchgfx13AbstractShapeC1Ev>
 80106a8:	4a1b      	ldr	r2, [pc, #108]	; (8010718 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x80>)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	3348      	adds	r3, #72	; 0x48
 80106b2:	2403      	movs	r4, #3
 80106b4:	461d      	mov	r5, r3
 80106b6:	2c00      	cmp	r4, #0
 80106b8:	db05      	blt.n	80106c6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x2e>
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7ff fd9a 	bl	80101f4 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 80106c0:	3504      	adds	r5, #4
 80106c2:	3c01      	subs	r4, #1
 80106c4:	e7f7      	b.n	80106b6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x1e>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3358      	adds	r3, #88	; 0x58
 80106ca:	2403      	movs	r4, #3
 80106cc:	461d      	mov	r5, r3
 80106ce:	2c00      	cmp	r4, #0
 80106d0:	db05      	blt.n	80106de <_ZN8touchgfx5ShapeILt4EEC1Ev+0x46>
 80106d2:	4628      	mov	r0, r5
 80106d4:	f7ff fd8e 	bl	80101f4 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 80106d8:	3504      	adds	r5, #4
 80106da:	3c01      	subs	r4, #1
 80106dc:	e7f7      	b.n	80106ce <_ZN8touchgfx5ShapeILt4EEC1Ev+0x36>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	3368      	adds	r3, #104	; 0x68
 80106e2:	2403      	movs	r4, #3
 80106e4:	461d      	mov	r5, r3
 80106e6:	2c00      	cmp	r4, #0
 80106e8:	db05      	blt.n	80106f6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x5e>
 80106ea:	4628      	mov	r0, r5
 80106ec:	f7ff fd82 	bl	80101f4 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 80106f0:	3504      	adds	r5, #4
 80106f2:	3c01      	subs	r4, #1
 80106f4:	e7f7      	b.n	80106e6 <_ZN8touchgfx5ShapeILt4EEC1Ev+0x4e>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3378      	adds	r3, #120	; 0x78
 80106fa:	2403      	movs	r4, #3
 80106fc:	461d      	mov	r5, r3
 80106fe:	2c00      	cmp	r4, #0
 8010700:	db05      	blt.n	801070e <_ZN8touchgfx5ShapeILt4EEC1Ev+0x76>
 8010702:	4628      	mov	r0, r5
 8010704:	f7ff fd76 	bl	80101f4 <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8010708:	3504      	adds	r5, #4
 801070a:	3c01      	subs	r4, #1
 801070c:	e7f7      	b.n	80106fe <_ZN8touchgfx5ShapeILt4EEC1Ev+0x66>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4618      	mov	r0, r3
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bdb0      	pop	{r4, r5, r7, pc}
 8010718:	08028d8c 	.word	0x08028d8c

0801071c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase()
 801071c:	b5b0      	push	{r4, r5, r7, lr}
 801071e:	b0a0      	sub	sp, #128	; 0x80
 8010720:	af02      	add	r7, sp, #8
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f000 fa6a 	bl	8010c00 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 801072c:	4ae1      	ldr	r2, [pc, #900]	; (8010ab4 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	601a      	str	r2, [r3, #0]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	3340      	adds	r3, #64	; 0x40
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff fcd0 	bl	80100dc <_ZN8touchgfx3BoxC1Ev>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	336c      	adds	r3, #108	; 0x6c
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fccb 	bl	80100dc <_ZN8touchgfx3BoxC1Ev>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	3398      	adds	r3, #152	; 0x98
 801074a:	4618      	mov	r0, r3
 801074c:	f004 fd8a 	bl	8015264 <_ZN8touchgfx6CircleC1Ev>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8010756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801075a:	2100      	movs	r1, #0
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fc2e 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010762:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010764:	4620      	mov	r0, r4
 8010766:	f7ff fe7b 	bl	8010460 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	33f4      	adds	r3, #244	; 0xf4
 801076e:	4618      	mov	r0, r3
 8010770:	f7ff ff92 	bl	8010698 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 801077a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801077e:	2100      	movs	r1, #0
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fc1c 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010786:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010788:	4620      	mov	r0, r4
 801078a:	f7ff fe69 	bl	8010460 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010794:	4618      	mov	r0, r3
 8010796:	f7ff ff7f 	bl	8010698 <_ZN8touchgfx5ShapeILt4EEC1Ev>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f503 7406 	add.w	r4, r3, #536	; 0x218
 80107a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80107a4:	2100      	movs	r1, #0
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff fc09 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 80107ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107ae:	4620      	mov	r0, r4
 80107b0:	f7ff fe56 	bl	8010460 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80107ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80107be:	4618      	mov	r0, r3
 80107c0:	f006 fa54 	bl	8016c6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80107ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	23f0      	movs	r3, #240	; 0xf0
 80107d2:	2200      	movs	r2, #0
 80107d4:	2100      	movs	r1, #0
 80107d6:	f7fd fe59 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80107e0:	2300      	movs	r3, #0
 80107e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80107e6:	2300      	movs	r3, #0
 80107e8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 80107ec:	2300      	movs	r3, #0
 80107ee:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80107f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80107f6:	041b      	lsls	r3, r3, #16
 80107f8:	461a      	mov	r2, r3
 80107fa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80107fe:	021b      	lsls	r3, r3, #8
 8010800:	431a      	orrs	r2, r3
 8010802:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8010806:	4313      	orrs	r3, r2
 8010808:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801080c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010810:	4611      	mov	r1, r2
 8010812:	4618      	mov	r0, r3
 8010814:	f7ff fbd3 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801081a:	4619      	mov	r1, r3
 801081c:	4620      	mov	r0, r4
 801081e:	f7ff fc81 	bl	8010124 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 240, 320);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8010828:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	23f0      	movs	r3, #240	; 0xf0
 8010830:	2200      	movs	r2, #0
 8010832:	2100      	movs	r1, #0
 8010834:	f7fd fe2a 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801083e:	23ff      	movs	r3, #255	; 0xff
 8010840:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8010844:	23ff      	movs	r3, #255	; 0xff
 8010846:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 801084a:	23ff      	movs	r3, #255	; 0xff
 801084c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8010850:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8010854:	041b      	lsls	r3, r3, #16
 8010856:	461a      	mov	r2, r3
 8010858:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 801085c:	021b      	lsls	r3, r3, #8
 801085e:	431a      	orrs	r2, r3
 8010860:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8010864:	4313      	orrs	r3, r2
 8010866:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801086a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801086e:	4611      	mov	r1, r2
 8010870:	4618      	mov	r0, r3
 8010872:	f7ff fba4 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010878:	4619      	mov	r1, r3
 801087a:	4620      	mov	r0, r4
 801087c:	f7ff fc52 	bl	8010124 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    circle1.setPosition(80, 120, 80, 80);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8010886:	2350      	movs	r3, #80	; 0x50
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	2350      	movs	r3, #80	; 0x50
 801088c:	2278      	movs	r2, #120	; 0x78
 801088e:	2150      	movs	r1, #80	; 0x50
 8010890:	f7fd fdfc 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	3398      	adds	r3, #152	; 0x98
 8010898:	2228      	movs	r2, #40	; 0x28
 801089a:	2128      	movs	r1, #40	; 0x28
 801089c:	4618      	mov	r0, r3
 801089e:	f000 f962 	bl	8010b66 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	3398      	adds	r3, #152	; 0x98
 80108a6:	2128      	movs	r1, #40	; 0x28
 80108a8:	4618      	mov	r0, r3
 80108aa:	f000 f9bf 	bl	8010c2c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	3398      	adds	r3, #152	; 0x98
 80108b2:	2100      	movs	r1, #0
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 f9d0 	bl	8010c5a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	3398      	adds	r3, #152	; 0x98
 80108be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80108c2:	2100      	movs	r1, #0
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 f974 	bl	8010bb2 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80108d0:	2300      	movs	r3, #0
 80108d2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80108d6:	23ff      	movs	r3, #255	; 0xff
 80108d8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 80108dc:	2300      	movs	r3, #0
 80108de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80108e2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80108e6:	041b      	lsls	r3, r3, #16
 80108e8:	461a      	mov	r2, r3
 80108ea:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80108ee:	021b      	lsls	r3, r3, #8
 80108f0:	431a      	orrs	r2, r3
 80108f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108f6:	4313      	orrs	r3, r2
 80108f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80108fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010900:	4611      	mov	r1, r2
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff fb5b 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801090a:	4619      	mov	r1, r3
 801090c:	4620      	mov	r0, r4
 801090e:	f7ff fdc5 	bl	801049c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	33e0      	adds	r3, #224	; 0xe0
 801091c:	4619      	mov	r1, r3
 801091e:	4610      	mov	r0, r2
 8010920:	f7ff fca0 	bl	8010264 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    circle1.setAlpha(162);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3398      	adds	r3, #152	; 0x98
 8010928:	21a2      	movs	r1, #162	; 0xa2
 801092a:	4618      	mov	r0, r3
 801092c:	f7ff fca8 	bl	8010280 <_ZN8touchgfx12CanvasWidget8setAlphaEh>

    shape1.setPosition(80, 40, 80, 80);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8010936:	2350      	movs	r3, #80	; 0x50
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	2350      	movs	r3, #80	; 0x50
 801093c:	2228      	movs	r2, #40	; 0x28
 801093e:	2150      	movs	r1, #80	; 0x50
 8010940:	f7fd fda4 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setAlpha(95);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	33f4      	adds	r3, #244	; 0xf4
 8010948:	215f      	movs	r1, #95	; 0x5f
 801094a:	4618      	mov	r0, r3
 801094c:	f7ff fc98 	bl	8010280 <_ZN8touchgfx12CanvasWidget8setAlphaEh>
    shape1.setOrigin(0.0f, 0.0f);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	33f4      	adds	r3, #244	; 0xf4
 8010954:	eddf 0a58 	vldr	s1, [pc, #352]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010958:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 801095c:	4618      	mov	r0, r3
 801095e:	f000 f993 	bl	8010c88 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(1.0f, 1.0f);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	33f4      	adds	r3, #244	; 0xf4
 8010966:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801096a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f9ea 	bl	8010d48 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.0f);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	33f4      	adds	r3, #244	; 0xf4
 8010978:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 801097c:	4618      	mov	r0, r3
 801097e:	f000 fa27 	bl	8010dd0 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 8010988:	23ff      	movs	r3, #255	; 0xff
 801098a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 801098e:	2300      	movs	r3, #0
 8010990:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8010994:	2300      	movs	r3, #0
 8010996:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801099a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801099e:	041b      	lsls	r3, r3, #16
 80109a0:	461a      	mov	r2, r3
 80109a2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80109a6:	021b      	lsls	r3, r3, #8
 80109a8:	431a      	orrs	r2, r3
 80109aa:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80109ae:	4313      	orrs	r3, r2
 80109b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80109b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80109b8:	4611      	mov	r1, r2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7ff faff 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 80109c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109c2:	4619      	mov	r1, r3
 80109c4:	4620      	mov	r0, r4
 80109c6:	f7ff fd69 	bl	801049c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7ff fc43 	bl	8010264 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 80109de:	4b37      	ldr	r3, [pc, #220]	; (8010abc <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 80109e0:	f107 0408 	add.w	r4, r7, #8
 80109e4:	461d      	mov	r5, r3
 80109e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80109ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape1.setShape(shape1Points);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	33f4      	adds	r3, #244	; 0xf4
 80109f6:	f107 0208 	add.w	r2, r7, #8
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f000 fa1f 	bl	8010e40 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    shape2.setPosition(80, 200, 80, 80);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f503 70c8 	add.w	r0, r3, #400	; 0x190
 8010a08:	2350      	movs	r3, #80	; 0x50
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	2350      	movs	r3, #80	; 0x50
 8010a0e:	22c8      	movs	r2, #200	; 0xc8
 8010a10:	2150      	movs	r1, #80	; 0x50
 8010a12:	f7fd fd3b 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    shape2.setOrigin(0.0f, 0.0f);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010a1c:	eddf 0a26 	vldr	s1, [pc, #152]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010a20:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 f92f 	bl	8010c88 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape2.setScale(1.0f, 1.0f);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010a30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010a34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 f985 	bl	8010d48 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape2.setAngle(0.0f);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010a44:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8010ab8 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f000 f9c1 	bl	8010dd0 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape2Painter.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8010a54:	2300      	movs	r3, #0
 8010a56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8010a60:	23ff      	movs	r3, #255	; 0xff
 8010a62:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8010a66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010a6a:	041b      	lsls	r3, r3, #16
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010a72:	021b      	lsls	r3, r3, #8
 8010a74:	431a      	orrs	r2, r3
 8010a76:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff fa99 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 8010a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4620      	mov	r0, r4
 8010a92:	f7ff fd03 	bl	801049c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    shape2.setPainter(shape2Painter);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	f7ff fbdd 	bl	8010264 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape2Points[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
 8010aaa:	4b04      	ldr	r3, [pc, #16]	; (8010abc <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
 8010aac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010ab0:	e006      	b.n	8010ac0 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8010ab2:	bf00      	nop
 8010ab4:	08028d58 	.word	0x08028d58
 8010ab8:	00000000 	.word	0x00000000
 8010abc:	08028064 	.word	0x08028064
 8010ac0:	461d      	mov	r5, r3
 8010ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    shape2.setShape(shape2Points);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010ad4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ad8:	4611      	mov	r1, r2
 8010ada:	4618      	mov	r0, r3
 8010adc:	f000 f9b0 	bl	8010e40 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(__background);
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3340      	adds	r3, #64	; 0x40
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4610      	mov	r0, r2
 8010aea:	f7ff fae7 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	336c      	adds	r3, #108	; 0x6c
 8010af4:	4619      	mov	r1, r3
 8010af6:	4610      	mov	r0, r2
 8010af8:	f7ff fae0 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3398      	adds	r3, #152	; 0x98
 8010b02:	4619      	mov	r1, r3
 8010b04:	4610      	mov	r0, r2
 8010b06:	f7ff fad9 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	33f4      	adds	r3, #244	; 0xf4
 8010b10:	4619      	mov	r1, r3
 8010b12:	4610      	mov	r0, r2
 8010b14:	f7ff fad2 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape2);
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8010b20:	4619      	mov	r1, r3
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7ff faca 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3778      	adds	r7, #120	; 0x78
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bdb0      	pop	{r4, r5, r7, pc}
 8010b32:	bf00      	nop

08010b34 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]

}
 8010b3c:	bf00      	nop
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
    //Screen1to2
    //When screen transition ends change screen to Screen2
    //Go to Screen2 with screen transition towards East
    application().gotoScreen2ScreenWipeTransitionEast();
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff fd52 	bl	80105fa <_ZN15Screen1ViewBase11applicationEv>
 8010b56:	4603      	mov	r3, r0
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fe f8bb 	bl	800ecd4 <_ZN23FrontendApplicationBase35gotoScreen2ScreenWipeTransitionEastEv>
}
 8010b5e:	bf00      	nop
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b088      	sub	sp, #32
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	60b9      	str	r1, [r7, #8]
 8010b70:	607a      	str	r2, [r7, #4]
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	015a      	lsls	r2, r3, #5
 8010b7a:	f107 0314 	add.w	r3, r7, #20
 8010b7e:	4611      	mov	r1, r2
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7ff fb45 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5(x);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	61fb      	str	r3, [r7, #28]
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	015a      	lsls	r2, r3, #5
 8010b96:	f107 0310 	add.w	r3, r7, #16
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff fb37 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5(y);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010baa:	bf00      	nop
 8010bac:	3720      	adds	r7, #32
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     *
     * @note    The area containing the Circle is not invalidated.
     * @note    Angles are given in degrees, so a full circle is 360.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b088      	sub	sp, #32
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	60f8      	str	r0, [r7, #12]
 8010bba:	60b9      	str	r1, [r7, #8]
 8010bbc:	607a      	str	r2, [r7, #4]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	61bb      	str	r3, [r7, #24]
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	015a      	lsls	r2, r3, #5
 8010bc6:	f107 0314 	add.w	r3, r7, #20
 8010bca:	4611      	mov	r1, r2
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff fb1f 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5(startAngle);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	639a      	str	r2, [r3, #56]	; 0x38
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	61fb      	str	r3, [r7, #28]
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	015a      	lsls	r2, r3, #5
 8010be2:	f107 0310 	add.w	r3, r7, #16
 8010be6:	4611      	mov	r1, r2
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff fb11 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5(endAngle);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010bf6:	bf00      	nop
 8010bf8:	3720      	adds	r7, #32
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
	...

08010c00 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f008 fb92 	bl	8019334 <_ZN8touchgfx6ScreenC1Ev>
 8010c10:	4a05      	ldr	r2, [pc, #20]	; (8010c28 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	08028e20 	.word	0x08028e20

08010c2c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	015a      	lsls	r2, r3, #5
 8010c3e:	f107 0308 	add.w	r3, r7, #8
 8010c42:	4611      	mov	r1, r2
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff fae3 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5(r);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010c52:	bf00      	nop
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	015a      	lsls	r2, r3, #5
 8010c6c:	f107 0308 	add.w	r3, r7, #8
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff facc 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5(width);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010c80:	bf00      	nop
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b08b      	sub	sp, #44	; 0x2c
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	ed87 0a02 	vstr	s0, [r7, #8]
 8010c94:	edc7 0a01 	vstr	s1, [r7, #4]
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	623b      	str	r3, [r7, #32]
 8010c9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8010ca0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8010d44 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8010ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cac:	f107 031c 	add.w	r3, r7, #28
 8010cb0:	ee17 1a90 	vmov	r1, s15
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7ff faab 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010cba:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 8010cbc:	617b      	str	r3, [r7, #20]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8010cc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010cc6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010d44 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8010cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010cd2:	f107 0318 	add.w	r3, r7, #24
 8010cd6:	ee17 1a90 	vmov	r1, s15
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7ff fa98 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010ce0:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8010ce2:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	332c      	adds	r3, #44	; 0x2c
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7ff faa0 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010cee:	4604      	mov	r4, r0
 8010cf0:	f107 0314 	add.w	r3, r7, #20
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7ff fa9a 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	429c      	cmp	r4, r3
 8010cfe:	d10f      	bne.n	8010d20 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	3330      	adds	r3, #48	; 0x30
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff fa92 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	f107 0310 	add.w	r3, r7, #16
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff fa8c 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010d16:	4603      	mov	r3, r0
 8010d18:	429c      	cmp	r4, r3
 8010d1a:	d101      	bne.n	8010d20 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8010d20:	2300      	movs	r3, #0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d109      	bne.n	8010d3a <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	62da      	str	r2, [r3, #44]	; 0x2c
        dy = dyNew;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	631a      	str	r2, [r3, #48]	; 0x30

        updateAbstractShapeCache();
 8010d32:	68f8      	ldr	r0, [r7, #12]
 8010d34:	f004 f98e 	bl	8015054 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8010d38:	e000      	b.n	8010d3c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 8010d3a:	bf00      	nop
    }
 8010d3c:	372c      	adds	r7, #44	; 0x2c
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd90      	pop	{r4, r7, pc}
 8010d42:	bf00      	nop
 8010d44:	42000000 	.word	0x42000000

08010d48 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b088      	sub	sp, #32
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8010d54:	edc7 0a01 	vstr	s1, [r7, #4]
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10((int)(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8010d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d60:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010dcc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d68:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8010dcc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d74:	f107 0314 	add.w	r3, r7, #20
 8010d78:	ee17 1a90 	vmov	r1, s15
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff fa62 	bl	8010246 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	61fb      	str	r3, [r7, #28]
 8010d8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d92:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010dcc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d9a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010dcc <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8010d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010da6:	f107 0310 	add.w	r3, r7, #16
 8010daa:	ee17 1a90 	vmov	r1, s15
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ff fa49 	bl	8010246 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	63da      	str	r2, [r3, #60]	; 0x3c
        updateAbstractShapeCache();
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f004 f949 	bl	8015054 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010dc2:	bf00      	nop
 8010dc4:	3720      	adds	r7, #32
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	42000000 	.word	0x42000000

08010dd0 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 8010dd0:	b590      	push	{r4, r7, lr}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	ed87 0a00 	vstr	s0, [r7]
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	617b      	str	r3, [r7, #20]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010de4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010e3c <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 8010de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010df0:	f107 0310 	add.w	r3, r7, #16
 8010df4:	ee17 1a90 	vmov	r1, s15
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ff fa09 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010dfe:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8010e00:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3334      	adds	r3, #52	; 0x34
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ff fa11 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010e0c:	4604      	mov	r4, r0
 8010e0e:	f107 030c 	add.w	r3, r7, #12
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7ff fa0b 	bl	801022e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	429c      	cmp	r4, r3
 8010e1c:	bf14      	ite	ne
 8010e1e:	2301      	movne	r3, #1
 8010e20:	2300      	moveq	r3, #0
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d005      	beq.n	8010e34 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	635a      	str	r2, [r3, #52]	; 0x34
            updateAbstractShapeCache();
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f004 f910 	bl	8015054 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010e34:	bf00      	nop
 8010e36:	371c      	adds	r7, #28
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd90      	pop	{r4, r7, pc}
 8010e3c:	42000000 	.word	0x42000000

08010e40 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 8010e40:	b5b0      	push	{r4, r5, r7, lr}
 8010e42:	b088      	sub	sp, #32
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	3370      	adds	r3, #112	; 0x70
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	4798      	blx	r3
 8010e56:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 8010e58:	2300      	movs	r3, #0
 8010e5a:	61fb      	str	r3, [r7, #28]
 8010e5c:	69fa      	ldr	r2, [r7, #28]
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	da38      	bge.n	8010ed6 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3374      	adds	r3, #116	; 0x74
 8010e6a:	681c      	ldr	r4, [r3, #0]
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	683a      	ldr	r2, [r7, #0]
 8010e72:	4413      	add	r3, r2
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	613b      	str	r3, [r7, #16]
 8010e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8010e7c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010ee4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8010e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e88:	f107 030c 	add.w	r3, r7, #12
 8010e8c:	ee17 1a90 	vmov	r1, s15
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ff f9bd 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	461d      	mov	r5, r3
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	683a      	ldr	r2, [r7, #0]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	617b      	str	r3, [r7, #20]
 8010ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8010eaa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010ee4 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8010eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010eb6:	f107 0308 	add.w	r3, r7, #8
 8010eba:	ee17 1a90 	vmov	r1, s15
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff f9a6 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	462a      	mov	r2, r5
 8010ec8:	69f9      	ldr	r1, [r7, #28]
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	61fb      	str	r3, [r7, #28]
 8010ed4:	e7c2      	b.n	8010e5c <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f004 f8bc 	bl	8015054 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8010edc:	bf00      	nop
 8010ede:	3720      	adds	r7, #32
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ee4:	42000000 	.word	0x42000000

08010ee8 <_ZN8touchgfx5ShapeILt4EED1Ev>:
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	4a05      	ldr	r2, [pc, #20]	; (8010f08 <_ZN8touchgfx5ShapeILt4EED1Ev+0x20>)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	601a      	str	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff fbab 	bl	8010654 <_ZN8touchgfx13AbstractShapeD1Ev>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	08028d8c 	.word	0x08028d8c

08010f0c <_ZN8touchgfx5ShapeILt4EED0Ev>:
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f7ff ffe7 	bl	8010ee8 <_ZN8touchgfx5ShapeILt4EED1Ev>
 8010f1a:	2188      	movs	r1, #136	; 0x88
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f015 fc59 	bl	80267d4 <_ZdlPvj>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	4a05      	ldr	r2, [pc, #20]	; (8010f4c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fd fa5b 	bl	800e3f8 <_ZN8touchgfx8DrawableD1Ev>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	08029404 	.word	0x08029404

08010f50 <_ZN8touchgfx9ContainerD0Ev>:
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7ff ffe7 	bl	8010f2c <_ZN8touchgfx9ContainerD1Ev>
 8010f5e:	212c      	movs	r1, #44	; 0x2c
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f015 fc37 	bl	80267d4 <_ZdlPvj>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	4a05      	ldr	r2, [pc, #20]	; (8010f90 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fd fd9f 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	080298e0 	.word	0x080298e0

08010f94 <_ZN8touchgfx3BoxD0Ev>:
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7ff ffe7 	bl	8010f70 <_ZN8touchgfx3BoxD1Ev>
 8010fa2:	212c      	movs	r1, #44	; 0x2c
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f015 fc15 	bl	80267d4 <_ZdlPvj>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4618      	mov	r0, r3
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	4a05      	ldr	r2, [pc, #20]	; (8010fd4 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fb23 	bl	8010610 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	08029780 	.word	0x08029780

08010fd8 <_ZN8touchgfx6CircleD0Ev>:
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7ff ffe7 	bl	8010fb4 <_ZN8touchgfx6CircleD1Ev>
 8010fe6:	2148      	movs	r1, #72	; 0x48
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f015 fbf3 	bl	80267d4 <_ZdlPvj>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	4a09      	ldr	r2, [pc, #36]	; (8011028 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
 8011006:	4a09      	ldr	r2, [pc, #36]	; (801102c <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	609a      	str	r2, [r3, #8]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3308      	adds	r3, #8
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff f977 	bl	8010304 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4618      	mov	r0, r3
 801101a:	f7ff f9ff 	bl	801041c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	080295ec 	.word	0x080295ec
 801102c:	08029610 	.word	0x08029610

08011030 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8011030:	f1a0 0008 	sub.w	r0, r0, #8
 8011034:	e7e0      	b.n	8010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>
 8011036:	bf00      	nop

08011038 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7ff ffd9 	bl	8010ff8 <_ZN8touchgfx13PainterRGB565D1Ev>
 8011046:	2114      	movs	r1, #20
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f015 fbc3 	bl	80267d4 <_ZdlPvj>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8011058:	f1a0 0008 	sub.w	r0, r0, #8
 801105c:	e7ec      	b.n	8011038 <_ZN8touchgfx13PainterRGB565D0Ev>

0801105e <_ZNK8touchgfx5ShapeILt4EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 801105e:	b480      	push	{r7}
 8011060:	b083      	sub	sp, #12
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 8011066:	2304      	movs	r3, #4
    }
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8011074:	b480      	push	{r7}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]
 8011080:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	2b00      	cmp	r3, #0
 8011086:	db0e      	blt.n	80110a6 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	2b03      	cmp	r3, #3
 801108c:	dc0b      	bgt.n	80110a6 <_ZN8touchgfx5ShapeILt4EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCorner[i] = x, yCorner[i] = y;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	3212      	adds	r2, #18
 8011094:	6879      	ldr	r1, [r7, #4]
 8011096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	68ba      	ldr	r2, [r7, #8]
 801109e:	3216      	adds	r2, #22
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 80110a6:	bf00      	nop
 80110a8:	3714      	adds	r7, #20
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b084      	sub	sp, #16
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	db08      	blt.n	80110d4 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b03      	cmp	r3, #3
 80110c6:	dc05      	bgt.n	80110d4 <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x22>
        {
            return xCorner[i];
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	3212      	adds	r2, #18
 80110ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110d2:	e00b      	b.n	80110ec <_ZNK8touchgfx5ShapeILt4EE10getCornerXEi+0x3a>
 80110d4:	2300      	movs	r3, #0
 80110d6:	60fb      	str	r3, [r7, #12]
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	f107 0308 	add.w	r3, r7, #8
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff f894 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80110e8:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80110ea:	bf00      	nop
    }
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	db08      	blt.n	8011116 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	2b03      	cmp	r3, #3
 8011108:	dc05      	bgt.n	8011116 <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	3216      	adds	r2, #22
 8011110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011114:	e00b      	b.n	801112e <_ZNK8touchgfx5ShapeILt4EE10getCornerYEi+0x3a>
 8011116:	2300      	movs	r3, #0
 8011118:	60fb      	str	r3, [r7, #12]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	015a      	lsls	r2, r3, #5
 801111e:	f107 0308 	add.w	r3, r7, #8
 8011122:	4611      	mov	r1, r2
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff f873 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801112a:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 801112c:	bf00      	nop
    }
 801112e:	4618      	mov	r0, r3
 8011130:	3710      	adds	r7, #16
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8011136:	b480      	push	{r7}
 8011138:	b085      	sub	sp, #20
 801113a:	af00      	add	r7, sp, #0
 801113c:	60f8      	str	r0, [r7, #12]
 801113e:	60b9      	str	r1, [r7, #8]
 8011140:	607a      	str	r2, [r7, #4]
 8011142:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	db0e      	blt.n	8011168 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	2b03      	cmp	r3, #3
 801114e:	dc0b      	bgt.n	8011168 <_ZN8touchgfx5ShapeILt4EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x32>
        {
            xCache[i] = x, yCache[i] = y;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	321a      	adds	r2, #26
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	321e      	adds	r2, #30
 8011162:	6839      	ldr	r1, [r7, #0]
 8011164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8011168:	bf00      	nop
 801116a:	3714      	adds	r7, #20
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	db08      	blt.n	8011196 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	2b03      	cmp	r3, #3
 8011188:	dc05      	bgt.n	8011196 <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x22>
        {
            return xCache[i];
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	321a      	adds	r2, #26
 8011190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011194:	e00b      	b.n	80111ae <_ZNK8touchgfx5ShapeILt4EE9getCacheXEi+0x3a>
 8011196:	2300      	movs	r3, #0
 8011198:	60fb      	str	r3, [r7, #12]
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	015a      	lsls	r2, r3, #5
 801119e:	f107 0308 	add.w	r3, r7, #8
 80111a2:	4611      	mov	r1, r2
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff f833 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80111aa:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80111ac:	bf00      	nop
    }
 80111ae:	4618      	mov	r0, r3
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b084      	sub	sp, #16
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	db08      	blt.n	80111d8 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b03      	cmp	r3, #3
 80111ca:	dc05      	bgt.n	80111d8 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x22>
        {
            return yCache[i];
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	683a      	ldr	r2, [r7, #0]
 80111d0:	321e      	adds	r2, #30
 80111d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111d6:	e00b      	b.n	80111f0 <_ZNK8touchgfx5ShapeILt4EE9getCacheYEi+0x3a>
 80111d8:	2300      	movs	r3, #0
 80111da:	60fb      	str	r3, [r7, #12]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	015a      	lsls	r2, r3, #5
 80111e0:	f107 0308 	add.w	r3, r7, #8
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff f812 	bl	8010210 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80111ec:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80111ee:	bf00      	nop
    }
 80111f0:	4618      	mov	r0, r3
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	887a      	ldrh	r2, [r7, #2]
 8011208:	801a      	strh	r2, [r3, #0]
    {
    }
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	2326      	movs	r3, #38	; 0x26
 8011228:	461a      	mov	r2, r3
 801122a:	2100      	movs	r1, #0
 801122c:	f015 fb7c 	bl	8026928 <memset>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4618      	mov	r0, r3
 8011234:	f7fd fc34 	bl	800eaa0 <_ZN8touchgfx6WidgetC1Ev>
 8011238:	4a09      	ldr	r2, [pc, #36]	; (8011260 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	8812      	ldrh	r2, [r2, #0]
 8011244:	84da      	strh	r2, [r3, #38]	; 0x26
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	22ff      	movs	r2, #255	; 0xff
 801124a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 801124e:	6839      	ldr	r1, [r7, #0]
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f004 fe09 	bl	8015e68 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4618      	mov	r0, r3
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08029948 	.word	0x08029948

08011264 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	4a05      	ldr	r2, [pc, #20]	; (8011284 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	601a      	str	r2, [r3, #0]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4618      	mov	r0, r3
 8011276:	f7fe fec9 	bl	801000c <_ZN8touchgfx6ScreenD1Ev>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4618      	mov	r0, r3
 801127e:	3708      	adds	r7, #8
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	08028edc 	.word	0x08028edc

08011288 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f7ff ffe7 	bl	8011264 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8011296:	2140      	movs	r1, #64	; 0x40
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f015 fa9b 	bl	80267d4 <_ZdlPvj>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4618      	mov	r0, r3
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <_ZN15Screen2ViewBaseD1Ev+0x34>)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	336c      	adds	r3, #108	; 0x6c
 80112ba:	4618      	mov	r0, r3
 80112bc:	f000 f8d8 	bl	8011470 <_ZN8touchgfx5ImageD1Ev>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	3340      	adds	r3, #64	; 0x40
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff fe53 	bl	8010f70 <_ZN8touchgfx3BoxD1Ev>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff ffc9 	bl	8011264 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	08028ea8 	.word	0x08028ea8

080112e0 <_ZN15Screen2ViewBaseD0Ev>:
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff ffdd 	bl	80112a8 <_ZN15Screen2ViewBaseD1Ev>
 80112ee:	f640 61a8 	movw	r1, #3752	; 0xea8
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f015 fa6e 	bl	80267d4 <_ZdlPvj>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	4618      	mov	r0, r3
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
 8011302:	b580      	push	{r7, lr}
 8011304:	b082      	sub	sp, #8
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801130a:	f006 fd5b 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 801130e:	4603      	mov	r3, r0
    }
 8011310:	4618      	mov	r0, r3
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <_ZN15Screen2ViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen2ViewBase::Screen2ViewBase()
 8011318:	b590      	push	{r4, r7, lr}
 801131a:	b089      	sub	sp, #36	; 0x24
 801131c:	af02      	add	r7, sp, #8
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4618      	mov	r0, r3
 8011324:	f000 f88e 	bl	8011444 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8011328:	4a38      	ldr	r2, [pc, #224]	; (801140c <_ZN15Screen2ViewBaseC1Ev+0xf4>)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	601a      	str	r2, [r3, #0]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	3340      	adds	r3, #64	; 0x40
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fed2 	bl	80100dc <_ZN8touchgfx3BoxC1Ev>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801133e:	f107 0308 	add.w	r3, r7, #8
 8011342:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff ff56 	bl	80111f8 <_ZN8touchgfx6BitmapC1Et>
 801134c:	f107 0308 	add.w	r3, r7, #8
 8011350:	4619      	mov	r1, r3
 8011352:	4620      	mov	r0, r4
 8011354:	f7ff ff60 	bl	8011218 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3398      	adds	r3, #152	; 0x98
 801135c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8011360:	4618      	mov	r0, r3
 8011362:	f005 fc83 	bl	8016c6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 240, 320);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801136c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	23f0      	movs	r3, #240	; 0xf0
 8011374:	2200      	movs	r2, #0
 8011376:	2100      	movs	r1, #0
 8011378:	f7fd f888 	bl	800e48c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011382:	2300      	movs	r3, #0
 8011384:	75fb      	strb	r3, [r7, #23]
 8011386:	2300      	movs	r3, #0
 8011388:	75bb      	strb	r3, [r7, #22]
 801138a:	2300      	movs	r3, #0
 801138c:	757b      	strb	r3, [r7, #21]
 801138e:	7dfb      	ldrb	r3, [r7, #23]
 8011390:	041b      	lsls	r3, r3, #16
 8011392:	461a      	mov	r2, r3
 8011394:	7dbb      	ldrb	r3, [r7, #22]
 8011396:	021b      	lsls	r3, r3, #8
 8011398:	431a      	orrs	r2, r3
 801139a:	7d7b      	ldrb	r3, [r7, #21]
 801139c:	4313      	orrs	r3, r2
 801139e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80113a2:	f107 0310 	add.w	r3, r7, #16
 80113a6:	4611      	mov	r1, r2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fe fe08 	bl	800ffbe <_ZN8touchgfx9colortypeC1Em>
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	4619      	mov	r1, r3
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7fe feb6 	bl	8010124 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	336c      	adds	r3, #108	; 0x6c
 80113bc:	2200      	movs	r2, #0
 80113be:	2100      	movs	r1, #0
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fd f8bc 	bl	800e53e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_KUHMUH_VERTICAL_ID));
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80113cc:	f107 030c 	add.w	r3, r7, #12
 80113d0:	2100      	movs	r1, #0
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff ff10 	bl	80111f8 <_ZN8touchgfx6BitmapC1Et>
 80113d8:	f107 030c 	add.w	r3, r7, #12
 80113dc:	4619      	mov	r1, r3
 80113de:	4620      	mov	r0, r4
 80113e0:	f004 fd42 	bl	8015e68 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	3340      	adds	r3, #64	; 0x40
 80113ea:	4619      	mov	r1, r3
 80113ec:	4610      	mov	r0, r2
 80113ee:	f7fe fe65 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	336c      	adds	r3, #108	; 0x6c
 80113f8:	4619      	mov	r1, r3
 80113fa:	4610      	mov	r0, r2
 80113fc:	f7fe fe5e 	bl	80100bc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	4618      	mov	r0, r3
 8011404:	371c      	adds	r7, #28
 8011406:	46bd      	mov	sp, r7
 8011408:	bd90      	pop	{r4, r7, pc}
 801140a:	bf00      	nop
 801140c:	08028ea8 	.word	0x08028ea8

08011410 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]

}
 8011418:	bf00      	nop
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <_ZN15Screen2ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen2ViewBase::afterTransition()
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
    //Screen2to1
    //When screen transition ends change screen to Screen1
    //Go to Screen1 with screen transition towards South
    application().gotoScreen1ScreenSlideTransitionSouth();
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff ff68 	bl	8011302 <_ZN15Screen2ViewBase11applicationEv>
 8011432:	4603      	mov	r3, r0
 8011434:	4618      	mov	r0, r3
 8011436:	f7fd fc07 	bl	800ec48 <_ZN23FrontendApplicationBase37gotoScreen1ScreenSlideTransitionSouthEv>
}
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4618      	mov	r0, r3
 8011450:	f007 ff70 	bl	8019334 <_ZN8touchgfx6ScreenC1Ev>
 8011454:	4a05      	ldr	r2, [pc, #20]	; (801146c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	601a      	str	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2200      	movs	r2, #0
 801145e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	4618      	mov	r0, r3
 8011464:	3708      	adds	r7, #8
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	08028edc 	.word	0x08028edc

08011470 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	4a05      	ldr	r2, [pc, #20]	; (8011490 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	601a      	str	r2, [r3, #0]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4618      	mov	r0, r3
 8011482:	f7fd fb1f 	bl	800eac4 <_ZN8touchgfx6WidgetD1Ev>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	08029948 	.word	0x08029948

08011494 <_ZN8touchgfx5ImageD0Ev>:
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ffe7 	bl	8011470 <_ZN8touchgfx5ImageD1Ev>
 80114a2:	212c      	movs	r1, #44	; 0x2c
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f015 f995 	bl	80267d4 <_ZdlPvj>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80114b4:	b480      	push	{r7}
 80114b6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80114b8:	4b02      	ldr	r3, [pc, #8]	; (80114c4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	08028f08 	.word	0x08028f08

080114c8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80114c8:	b480      	push	{r7}
 80114ca:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80114cc:	2301      	movs	r3, #1
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	460b      	mov	r3, r1
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 80114e6:	2300      	movs	r3, #0
    }
 80114e8:	4618      	mov	r0, r3
 80114ea:	3714      	adds	r7, #20
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80114fc:	2300      	movs	r3, #0
    }
 80114fe:	4618      	mov	r0, r3
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011512:	2300      	movs	r3, #0
    }
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011520:	b480      	push	{r7}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	4613      	mov	r3, r2
 801152c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801152e:	4a07      	ldr	r2, [pc, #28]	; (801154c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011534:	4a06      	ldr	r2, [pc, #24]	; (8011550 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801153a:	4a06      	ldr	r2, [pc, #24]	; (8011554 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801153c:	88fb      	ldrh	r3, [r7, #6]
 801153e:	8013      	strh	r3, [r2, #0]
    }
 8011540:	bf00      	nop
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	2004f74c 	.word	0x2004f74c
 8011550:	2004f754 	.word	0x2004f754
 8011554:	2004f750 	.word	0x2004f750

08011558 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011558:	b40e      	push	{r1, r2, r3}
 801155a:	b580      	push	{r7, lr}
 801155c:	b085      	sub	sp, #20
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011562:	f107 0320 	add.w	r3, r7, #32
 8011566:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	69fa      	ldr	r2, [r7, #28]
 801156c:	2100      	movs	r1, #0
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f007 fa9e 	bl	8018ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011574:	4603      	mov	r3, r0
 8011576:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011578:	89fb      	ldrh	r3, [r7, #14]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3714      	adds	r7, #20
 801157e:	46bd      	mov	sp, r7
 8011580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011584:	b003      	add	sp, #12
 8011586:	4770      	bx	lr

08011588 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011588:	b40c      	push	{r2, r3}
 801158a:	b580      	push	{r7, lr}
 801158c:	b084      	sub	sp, #16
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	460b      	mov	r3, r1
 8011594:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011596:	f107 031c 	add.w	r3, r7, #28
 801159a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 801159c:	78f9      	ldrb	r1, [r7, #3]
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	69ba      	ldr	r2, [r7, #24]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f007 fa84 	bl	8018ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80115a8:	4603      	mov	r3, r0
 80115aa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80115ac:	89fb      	ldrh	r3, [r7, #14]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115b8:	b002      	add	sp, #8
 80115ba:	4770      	bx	lr

080115bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b08a      	sub	sp, #40	; 0x28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d016      	beq.n	80115fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	3322      	adds	r3, #34	; 0x22
 80115d4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	8adb      	ldrh	r3, [r3, #22]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d105      	bne.n	80115ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80115de:	4b43      	ldr	r3, [pc, #268]	; (80116ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80115e0:	4a43      	ldr	r2, [pc, #268]	; (80116f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80115e2:	21c0      	movs	r1, #192	; 0xc0
 80115e4:	4843      	ldr	r0, [pc, #268]	; (80116f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80115e6:	f015 f921 	bl	802682c <__assert_func>
            return buffer[pos];
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	8a9b      	ldrh	r3, [r3, #20]
 80115ee:	461a      	mov	r2, r3
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d001      	beq.n	80115fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80115fa:	2301      	movs	r3, #1
 80115fc:	e000      	b.n	8011600 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80115fe:	2300      	movs	r3, #0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d06a      	beq.n	80116da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f008 fd3c 	bl	801a082 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	3322      	adds	r3, #34	; 0x22
 801160e:	623b      	str	r3, [r7, #32]
 8011610:	2301      	movs	r3, #1
 8011612:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	8adb      	ldrh	r3, [r3, #22]
 8011618:	8bfa      	ldrh	r2, [r7, #30]
 801161a:	429a      	cmp	r2, r3
 801161c:	d305      	bcc.n	801162a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801161e:	4b36      	ldr	r3, [pc, #216]	; (80116f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011620:	4a36      	ldr	r2, [pc, #216]	; (80116fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011622:	21c5      	movs	r1, #197	; 0xc5
 8011624:	4833      	ldr	r0, [pc, #204]	; (80116f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011626:	f015 f901 	bl	802682c <__assert_func>
            const uint16_t index = pos + offset;
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	8a9a      	ldrh	r2, [r3, #20]
 801162e:	8bfb      	ldrh	r3, [r7, #30]
 8011630:	4413      	add	r3, r2
 8011632:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011634:	8bbb      	ldrh	r3, [r7, #28]
 8011636:	2b09      	cmp	r3, #9
 8011638:	d801      	bhi.n	801163e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801163a:	8bbb      	ldrh	r3, [r7, #28]
 801163c:	e001      	b.n	8011642 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801163e:	8bbb      	ldrh	r3, [r7, #28]
 8011640:	3b0a      	subs	r3, #10
 8011642:	6a3a      	ldr	r2, [r7, #32]
 8011644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011648:	f640 123f 	movw	r2, #2367	; 0x93f
 801164c:	4293      	cmp	r3, r2
 801164e:	bf0c      	ite	eq
 8011650:	2301      	moveq	r3, #1
 8011652:	2300      	movne	r3, #0
 8011654:	b2db      	uxtb	r3, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	d03f      	beq.n	80116da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3322      	adds	r3, #34	; 0x22
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	3222      	adds	r2, #34	; 0x22
 8011662:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	8ad2      	ldrh	r2, [r2, #22]
 8011668:	2a00      	cmp	r2, #0
 801166a:	d105      	bne.n	8011678 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 801166c:	4b1f      	ldr	r3, [pc, #124]	; (80116ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801166e:	4a20      	ldr	r2, [pc, #128]	; (80116f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011670:	21c0      	movs	r1, #192	; 0xc0
 8011672:	4820      	ldr	r0, [pc, #128]	; (80116f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011674:	f015 f8da 	bl	802682c <__assert_func>
            return buffer[pos];
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	8a92      	ldrh	r2, [r2, #20]
 801167c:	4611      	mov	r1, r2
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011684:	613b      	str	r3, [r7, #16]
 8011686:	4613      	mov	r3, r2
 8011688:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	8adb      	ldrh	r3, [r3, #22]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d806      	bhi.n	80116a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011692:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011694:	4a1b      	ldr	r2, [pc, #108]	; (8011704 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011696:	f240 110d 	movw	r1, #269	; 0x10d
 801169a:	4816      	ldr	r0, [pc, #88]	; (80116f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801169c:	f015 f8c6 	bl	802682c <__assert_func>
            const uint16_t index = pos + 1;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	8a9b      	ldrh	r3, [r3, #20]
 80116a4:	3301      	adds	r3, #1
 80116a6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80116a8:	89bb      	ldrh	r3, [r7, #12]
 80116aa:	2b09      	cmp	r3, #9
 80116ac:	d801      	bhi.n	80116b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80116ae:	89bb      	ldrh	r3, [r7, #12]
 80116b0:	e000      	b.n	80116b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80116b2:	2300      	movs	r3, #0
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	89f9      	ldrh	r1, [r7, #14]
 80116b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80116bc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	3322      	adds	r3, #34	; 0x22
 80116c2:	61bb      	str	r3, [r7, #24]
 80116c4:	f640 133f 	movw	r3, #2367	; 0x93f
 80116c8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	8a9b      	ldrh	r3, [r3, #20]
 80116ce:	4619      	mov	r1, r3
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	8afa      	ldrh	r2, [r7, #22]
 80116d4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80116d8:	bf00      	nop
        }
    }
    return getNextChar();
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f008 fbd4 	bl	8019e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80116e0:	4603      	mov	r3, r0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3728      	adds	r7, #40	; 0x28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	08028084 	.word	0x08028084
 80116f0:	08028090 	.word	0x08028090
 80116f4:	0802813c 	.word	0x0802813c
 80116f8:	08028184 	.word	0x08028184
 80116fc:	08028194 	.word	0x08028194
 8011700:	08028268 	.word	0x08028268
 8011704:	08028274 	.word	0x08028274

08011708 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f008 fb80 	bl	8019e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011720:	b590      	push	{r4, r7, lr}
 8011722:	b085      	sub	sp, #20
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801172a:	2300      	movs	r3, #0
 801172c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801172e:	88fb      	ldrh	r3, [r7, #6]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d127      	bne.n	8011784 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011734:	88fb      	ldrh	r3, [r7, #6]
 8011736:	4a1e      	ldr	r2, [pc, #120]	; (80117b0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d016      	beq.n	801176e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011740:	88fb      	ldrh	r3, [r7, #6]
 8011742:	4a1b      	ldr	r2, [pc, #108]	; (80117b0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011748:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	4413      	add	r3, r2
 8011752:	4a18      	ldr	r2, [pc, #96]	; (80117b4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011754:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	4413      	add	r3, r2
 801175e:	4a16      	ldr	r2, [pc, #88]	; (80117b8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011760:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	689b      	ldr	r3, [r3, #8]
 8011766:	68ba      	ldr	r2, [r7, #8]
 8011768:	4413      	add	r3, r2
 801176a:	60fb      	str	r3, [r7, #12]
 801176c:	e00a      	b.n	8011784 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801176e:	4b11      	ldr	r3, [pc, #68]	; (80117b4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011770:	4a12      	ldr	r2, [pc, #72]	; (80117bc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011772:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011774:	4a12      	ldr	r2, [pc, #72]	; (80117c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011776:	4b10      	ldr	r3, [pc, #64]	; (80117b8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011778:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801177a:	88fb      	ldrh	r3, [r7, #6]
 801177c:	4a11      	ldr	r2, [pc, #68]	; (80117c4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011782:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00d      	beq.n	80117a6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801178a:	4a0f      	ldr	r2, [pc, #60]	; (80117c8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801178c:	88fb      	ldrh	r3, [r7, #6]
 801178e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011790:	f000 f824 	bl	80117dc <_ZN17TypedTextDatabase8getFontsEv>
 8011794:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011796:	f000 f819 	bl	80117cc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801179a:	4603      	mov	r3, r0
 801179c:	461a      	mov	r2, r3
 801179e:	4621      	mov	r1, r4
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f7ff febd 	bl	8011520 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd90      	pop	{r4, r7, pc}
 80117ae:	bf00      	nop
 80117b0:	2004d518 	.word	0x2004d518
 80117b4:	2004d520 	.word	0x2004d520
 80117b8:	2004d524 	.word	0x2004d524
 80117bc:	0804f8b4 	.word	0x0804f8b4
 80117c0:	0804f8b0 	.word	0x0804f8b0
 80117c4:	0804f8bc 	.word	0x0804f8bc
 80117c8:	2004d51c 	.word	0x2004d51c

080117cc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80117cc:	b480      	push	{r7}
 80117ce:	af00      	add	r7, sp, #0
    return 0;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80117dc:	b480      	push	{r7}
 80117de:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80117e0:	4b02      	ldr	r3, [pc, #8]	; (80117ec <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr
 80117ec:	2004d528 	.word	0x2004d528

080117f0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d113      	bne.n	8011828 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011806:	4293      	cmp	r3, r2
 8011808:	d10e      	bne.n	8011828 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801180a:	f7fc fc35 	bl	800e078 <_Z23getFont_verdana_20_4bppv>
 801180e:	4603      	mov	r3, r0
};
 8011810:	4a07      	ldr	r2, [pc, #28]	; (8011830 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011812:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011814:	f7fc fc86 	bl	800e124 <_Z23getFont_verdana_40_4bppv>
 8011818:	4603      	mov	r3, r0
};
 801181a:	4a05      	ldr	r2, [pc, #20]	; (8011830 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801181c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801181e:	f7fc fbd5 	bl	800dfcc <_Z23getFont_verdana_10_4bppv>
 8011822:	4603      	mov	r3, r0
};
 8011824:	4a02      	ldr	r2, [pc, #8]	; (8011830 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011826:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}
 8011830:	2004d528 	.word	0x2004d528

08011834 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
 8011838:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801183c:	2001      	movs	r0, #1
 801183e:	f7ff ffd7 	bl	80117f0 <_Z41__static_initialization_and_destruction_0ii>
 8011842:	bd80      	pop	{r7, pc}

08011844 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	4a05      	ldr	r2, [pc, #20]	; (8011864 <_ZN19FrontendApplicationD1Ev+0x20>)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd f8b1 	bl	800e9bc <_ZN23FrontendApplicationBaseD1Ev>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4618      	mov	r0, r3
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	08028f78 	.word	0x08028f78

08011868 <_ZN19FrontendApplicationD0Ev>:
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff ffe7 	bl	8011844 <_ZN19FrontendApplicationD1Ev>
 8011876:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f014 ffaa 	bl	80267d4 <_ZdlPvj>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4618      	mov	r0, r3
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801188a:	b580      	push	{r7, lr}
 801188c:	b082      	sub	sp, #8
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011898:	4618      	mov	r0, r3
 801189a:	f000 f82d 	bl	80118f8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f006 f947 	bl	8017b34 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	68b9      	ldr	r1, [r7, #8]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fd f920 	bl	800eb08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80118c8:	4a03      	ldr	r2, [pc, #12]	; (80118d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	601a      	str	r2, [r3, #0]
{

}
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	4618      	mov	r0, r3
 80118d2:	3710      	adds	r7, #16
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	08028f78 	.word	0x08028f78

080118dc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]
{

}
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	370c      	adds	r7, #12
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr

080118f8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]

}
 8011900:	bf00      	nop
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
    {
    }
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
    {
    }
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    {
 801193c:	4a04      	ldr	r2, [pc, #16]	; (8011950 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	601a      	str	r2, [r3, #0]
    }
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr
 8011950:	08028ffc 	.word	0x08028ffc

08011954 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
    }
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff ffe9 	bl	8011934 <_ZN8touchgfx9PresenterD1Ev>
 8011962:	2104      	movs	r1, #4
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f014 ff35 	bl	80267d4 <_ZdlPvj>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4618      	mov	r0, r3
 801196e:	3708      	adds	r7, #8
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
    {
 801197c:	4a04      	ldr	r2, [pc, #16]	; (8011990 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	601a      	str	r2, [r3, #0]
    }
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	08028ffc 	.word	0x08028ffc

08011994 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	4a06      	ldr	r2, [pc, #24]	; (80119b8 <_ZN13ModelListenerC1Ev+0x24>)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2200      	movs	r2, #0
 80119a6:	605a      	str	r2, [r3, #4]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	4618      	mov	r0, r3
 80119ac:	370c      	adds	r7, #12
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop
 80119b8:	08028fec 	.word	0x08028fec

080119bc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	4a04      	ldr	r2, [pc, #16]	; (80119d8 <_ZN13ModelListenerD1Ev+0x1c>)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	370c      	adds	r7, #12
 80119d0:	46bd      	mov	sp, r7
 80119d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d6:	4770      	bx	lr
 80119d8:	08028fec 	.word	0x08028fec

080119dc <_ZN13ModelListenerD0Ev>:
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f7ff ffe9 	bl	80119bc <_ZN13ModelListenerD1Ev>
 80119ea:	2108      	movs	r1, #8
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f014 fef1 	bl	80267d4 <_ZdlPvj>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4618      	mov	r0, r3
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	4a09      	ldr	r2, [pc, #36]	; (8011a2c <_ZN16Screen1PresenterD1Ev+0x30>)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	4a09      	ldr	r2, [pc, #36]	; (8011a30 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	605a      	str	r2, [r3, #4]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	3304      	adds	r3, #4
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7ff ffd1 	bl	80119bc <_ZN13ModelListenerD1Ev>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7ff ff89 	bl	8011934 <_ZN8touchgfx9PresenterD1Ev>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	08028fc4 	.word	0x08028fc4
 8011a30:	08028fdc 	.word	0x08028fdc

08011a34 <_ZThn4_N16Screen1PresenterD1Ev>:
 8011a34:	f1a0 0004 	sub.w	r0, r0, #4
 8011a38:	e7e0      	b.n	80119fc <_ZN16Screen1PresenterD1Ev>
 8011a3a:	bf00      	nop

08011a3c <_ZN16Screen1PresenterD0Ev>:
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7ff ffd9 	bl	80119fc <_ZN16Screen1PresenterD1Ev>
 8011a4a:	2110      	movs	r1, #16
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f014 fec1 	bl	80267d4 <_ZdlPvj>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <_ZThn4_N16Screen1PresenterD0Ev>:
 8011a5c:	f1a0 0004 	sub.w	r0, r0, #4
 8011a60:	e7ec      	b.n	8011a3c <_ZN16Screen1PresenterD0Ev>
	...

08011a64 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
    : view(v)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff ff7f 	bl	8011974 <_ZN8touchgfx9PresenterC1Ev>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	3304      	adds	r3, #4
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff ff8a 	bl	8011994 <_ZN13ModelListenerC1Ev>
 8011a80:	4a06      	ldr	r2, [pc, #24]	; (8011a9c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	4a06      	ldr	r2, [pc, #24]	; (8011aa0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	605a      	str	r2, [r3, #4]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	60da      	str	r2, [r3, #12]
{

}
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	08028fc4 	.word	0x08028fc4
 8011aa0:	08028fdc 	.word	0x08028fdc

08011aa4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]

}
 8011aac:	bf00      	nop
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]

}
 8011ac0:	bf00      	nop
 8011ac2:	370c      	adds	r7, #12
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr

08011acc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	4a05      	ldr	r2, [pc, #20]	; (8011aec <_ZN11Screen1ViewD1Ev+0x20>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe fd3d 	bl	801055c <_ZN15Screen1ViewBaseD1Ev>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	08029014 	.word	0x08029014

08011af0 <_ZN11Screen1ViewD0Ev>:
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7ff ffe7 	bl	8011acc <_ZN11Screen1ViewD1Ev>
 8011afe:	f241 013c 	movw	r1, #4156	; 0x103c
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f014 fe66 	bl	80267d4 <_ZdlPvj>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
	...

08011b14 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fe fdfc 	bl	801071c <_ZN15Screen1ViewBaseC1Ev>
 8011b24:	4a03      	ldr	r2, [pc, #12]	; (8011b34 <_ZN11Screen1ViewC1Ev+0x20>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
{

}
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	08029014 	.word	0x08029014

08011b38 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fe fff6 	bl	8010b34 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8011b48:	bf00      	nop
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fe fa8e 	bl	801007c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011b60:	bf00      	nop
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	4a09      	ldr	r2, [pc, #36]	; (8011b98 <_ZN16Screen2PresenterD1Ev+0x30>)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	4a09      	ldr	r2, [pc, #36]	; (8011b9c <_ZN16Screen2PresenterD1Ev+0x34>)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	605a      	str	r2, [r3, #4]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff ff1b 	bl	80119bc <_ZN13ModelListenerD1Ev>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7ff fed3 	bl	8011934 <_ZN8touchgfx9PresenterD1Ev>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	08029048 	.word	0x08029048
 8011b9c:	08029060 	.word	0x08029060

08011ba0 <_ZThn4_N16Screen2PresenterD1Ev>:
 8011ba0:	f1a0 0004 	sub.w	r0, r0, #4
 8011ba4:	e7e0      	b.n	8011b68 <_ZN16Screen2PresenterD1Ev>
 8011ba6:	bf00      	nop

08011ba8 <_ZN16Screen2PresenterD0Ev>:
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff ffd9 	bl	8011b68 <_ZN16Screen2PresenterD1Ev>
 8011bb6:	2110      	movs	r1, #16
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f014 fe0b 	bl	80267d4 <_ZdlPvj>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3708      	adds	r7, #8
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <_ZThn4_N16Screen2PresenterD0Ev>:
 8011bc8:	f1a0 0004 	sub.w	r0, r0, #4
 8011bcc:	e7ec      	b.n	8011ba8 <_ZN16Screen2PresenterD0Ev>
	...

08011bd0 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
    : view(v)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7ff fec9 	bl	8011974 <_ZN8touchgfx9PresenterC1Ev>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7ff fed4 	bl	8011994 <_ZN13ModelListenerC1Ev>
 8011bec:	4a06      	ldr	r2, [pc, #24]	; (8011c08 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	601a      	str	r2, [r3, #0]
 8011bf2:	4a06      	ldr	r2, [pc, #24]	; (8011c0c <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	605a      	str	r2, [r3, #4]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	60da      	str	r2, [r3, #12]
{

}
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4618      	mov	r0, r3
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	08029048 	.word	0x08029048
 8011c0c:	08029060 	.word	0x08029060

08011c10 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]

}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]

}
 8011c2c:	bf00      	nop
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	4a05      	ldr	r2, [pc, #20]	; (8011c58 <_ZN11Screen2ViewD1Ev+0x20>)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	601a      	str	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7ff fb2d 	bl	80112a8 <_ZN15Screen2ViewBaseD1Ev>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	4618      	mov	r0, r3
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	08029070 	.word	0x08029070

08011c5c <_ZN11Screen2ViewD0Ev>:
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ff ffe7 	bl	8011c38 <_ZN11Screen2ViewD1Ev>
 8011c6a:	f640 61a8 	movw	r1, #3752	; 0xea8
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f014 fdb0 	bl	80267d4 <_ZdlPvj>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	4618      	mov	r0, r3
 8011c78:	3708      	adds	r7, #8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
	...

08011c80 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff fb44 	bl	8011318 <_ZN15Screen2ViewBaseC1Ev>
 8011c90:	4a03      	ldr	r2, [pc, #12]	; (8011ca0 <_ZN11Screen2ViewC1Ev+0x20>)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	601a      	str	r2, [r3, #0]
{

}
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	08029070 	.word	0x08029070

08011ca4 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ff fbae 	bl	8011410 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8011cb4:	bf00      	nop
 8011cb6:	3708      	adds	r7, #8
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fe f9d8 	bl	801007c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011ccc:	bf00      	nop
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
    {
 8011cdc:	4a04      	ldr	r2, [pc, #16]	; (8011cf0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	601a      	str	r2, [r3, #0]
    }
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr
 8011cf0:	080290bc 	.word	0x080290bc

08011cf4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
    }
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7ff ffe9 	bl	8011cd4 <_ZN8touchgfx15TouchControllerD1Ev>
 8011d02:	2104      	movs	r1, #4
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f014 fd65 	bl	80267d4 <_ZdlPvj>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011d1c:	bf00      	nop
 8011d1e:	370c      	adds	r7, #12
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b085      	sub	sp, #20
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
	...

08011d44 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	4a05      	ldr	r2, [pc, #20]	; (8011d64 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7ff ffbd 	bl	8011cd4 <_ZN8touchgfx15TouchControllerD1Ev>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	080290a4 	.word	0x080290a4

08011d68 <_ZN20STM32TouchControllerD0Ev>:
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7ff ffe7 	bl	8011d44 <_ZN20STM32TouchControllerD1Ev>
 8011d76:	2104      	movs	r1, #4
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f014 fd2b 	bl	80267d4 <_ZdlPvj>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	4618      	mov	r0, r3
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011d92:	79fb      	ldrb	r3, [r7, #7]
 8011d94:	2b03      	cmp	r3, #3
 8011d96:	d80c      	bhi.n	8011db2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011d98:	a201      	add	r2, pc, #4	; (adr r2, 8011da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d9e:	bf00      	nop
 8011da0:	08011db1 	.word	0x08011db1
 8011da4:	08011db1 	.word	0x08011db1
 8011da8:	08011db1 	.word	0x08011db1
 8011dac:	08011db1 	.word	0x08011db1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011db0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8011db2:	bf00      	nop
 8011db4:	370c      	adds	r7, #12
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop

08011dc0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011dca:	79fb      	ldrb	r3, [r7, #7]
 8011dcc:	2b03      	cmp	r3, #3
 8011dce:	d80c      	bhi.n	8011dea <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011dd0:	a201      	add	r2, pc, #4	; (adr r2, 8011dd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8011dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd6:	bf00      	nop
 8011dd8:	08011de9 	.word	0x08011de9
 8011ddc:	08011de9 	.word	0x08011de9
 8011de0:	08011de9 	.word	0x08011de9
 8011de4:	08011de9 	.word	0x08011de9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8011de8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8011dea:	bf00      	nop
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr
 8011df6:	bf00      	nop

08011df8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011e02:	79fb      	ldrb	r3, [r7, #7]
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d80c      	bhi.n	8011e22 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8011e08:	a201      	add	r2, pc, #4	; (adr r2, 8011e10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8011e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e0e:	bf00      	nop
 8011e10:	08011e21 	.word	0x08011e21
 8011e14:	08011e21 	.word	0x08011e21
 8011e18:	08011e21 	.word	0x08011e21
 8011e1c:	08011e21 	.word	0x08011e21
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011e20:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8011e22:	bf00      	nop
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop

08011e30 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011e30:	b480      	push	{r7}
 8011e32:	b083      	sub	sp, #12
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
    {
 8011e38:	4a04      	ldr	r2, [pc, #16]	; (8011e4c <_ZN8touchgfx3HALD1Ev+0x1c>)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	601a      	str	r2, [r3, #0]
    }
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4618      	mov	r0, r3
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr
 8011e4c:	080294a0 	.word	0x080294a0

08011e50 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
    }
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f7ff ffe9 	bl	8011e30 <_ZN8touchgfx3HALD1Ev>
 8011e5e:	217c      	movs	r1, #124	; 0x7c
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f014 fcb7 	bl	80267d4 <_ZdlPvj>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	460b      	mov	r3, r1
 8011e7a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	78fa      	ldrb	r2, [r7, #3]
 8011e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2201      	movs	r2, #1
 8011e88:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	807b      	strh	r3, [r7, #2]
 8011ea4:	4613      	mov	r3, r2
 8011ea6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011ea8:	4b0c      	ldr	r3, [pc, #48]	; (8011edc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	887a      	ldrh	r2, [r7, #2]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d304      	bcc.n	8011ebc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8011eb2:	4b0b      	ldr	r3, [pc, #44]	; (8011ee0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	883a      	ldrh	r2, [r7, #0]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d205      	bcs.n	8011ec8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011ebc:	4b09      	ldr	r3, [pc, #36]	; (8011ee4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8011ebe:	4a0a      	ldr	r2, [pc, #40]	; (8011ee8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8011ec0:	219e      	movs	r1, #158	; 0x9e
 8011ec2:	480a      	ldr	r0, [pc, #40]	; (8011eec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8011ec4:	f014 fcb2 	bl	802682c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8011ec8:	4a09      	ldr	r2, [pc, #36]	; (8011ef0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8011eca:	887b      	ldrh	r3, [r7, #2]
 8011ecc:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8011ece:	4a09      	ldr	r2, [pc, #36]	; (8011ef4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8011ed0:	883b      	ldrh	r3, [r7, #0]
 8011ed2:	8013      	strh	r3, [r2, #0]
    }
 8011ed4:	bf00      	nop
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	2004f6e8 	.word	0x2004f6e8
 8011ee0:	2004f6ea 	.word	0x2004f6ea
 8011ee4:	08028328 	.word	0x08028328
 8011ee8:	0802838c 	.word	0x0802838c
 8011eec:	080283d0 	.word	0x080283d0
 8011ef0:	2004f6ee 	.word	0x2004f6ee
 8011ef4:	2004f6f0 	.word	0x2004f6f0

08011ef8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d009      	beq.n	8011f1e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	685a      	ldr	r2, [r3, #4]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4610      	mov	r0, r2
 8011f18:	4798      	blx	r3
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	e000      	b.n	8011f20 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8011f1e:	2300      	movs	r3, #0
    }
 8011f20:	4618      	mov	r0, r3
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f002 fe99 	bl	8014c68 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	33ac      	adds	r3, #172	; 0xac
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	4798      	blx	r3
    }
 8011f42:	bf00      	nop
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8011f4a:	b480      	push	{r7}
 8011f4c:	b083      	sub	sp, #12
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	6078      	str	r0, [r7, #4]
 8011f52:	6039      	str	r1, [r7, #0]
        return false;
 8011f54:	2300      	movs	r3, #0
    }
 8011f56:	4618      	mov	r0, r3
 8011f58:	370c      	adds	r7, #12
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
	...

08011f64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d106      	bne.n	8011f86 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011f78:	4b0f      	ldr	r3, [pc, #60]	; (8011fb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011f7a:	4a10      	ldr	r2, [pc, #64]	; (8011fbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011f7c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8011f80:	480f      	ldr	r0, [pc, #60]	; (8011fc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8011f82:	f014 fc53 	bl	802682c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bf14      	ite	ne
 8011f98:	2301      	movne	r3, #1
 8011f9a:	2300      	moveq	r3, #0
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	4b09      	ldr	r3, [pc, #36]	; (8011fc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011fa0:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	338c      	adds	r3, #140	; 0x8c
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	6839      	ldr	r1, [r7, #0]
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	4798      	blx	r3
    }
 8011fb0:	bf00      	nop
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	08028414 	.word	0x08028414
 8011fbc:	0802844c 	.word	0x0802844c
 8011fc0:	080283d0 	.word	0x080283d0
 8011fc4:	2004f6f2 	.word	0x2004f6f2

08011fc8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	bf14      	ite	ne
 8011fde:	2301      	movne	r3, #1
 8011fe0:	2300      	moveq	r3, #0
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8011fe6:	701a      	strb	r2, [r3, #0]
    }
 8011fe8:	bf00      	nop
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	2004f6f3 	.word	0x2004f6f3

08011ff8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
        return 0;
 8012000:	2300      	movs	r3, #0
    }
 8012002:	4618      	mov	r0, r3
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801200e:	b580      	push	{r7, lr}
 8012010:	b082      	sub	sp, #8
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
 8012016:	460b      	mov	r3, r1
 8012018:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801201e:	2b00      	cmp	r3, #0
 8012020:	d004      	beq.n	801202c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012026:	887a      	ldrh	r2, [r7, #2]
 8012028:	4610      	mov	r0, r2
 801202a:	4798      	blx	r3
    }
 801202c:	bf00      	nop
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 801203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685a      	ldr	r2, [r3, #4]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	3318      	adds	r3, #24
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4610      	mov	r0, r2
 8012064:	4798      	blx	r3
 8012066:	4603      	mov	r3, r0
    }
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
    /**
     * Gets client framebuffer.
     *
     * @return The address of the framebuffer currently used by the framework to draw in.
     */
    uint16_t* getClientFrameBuffer()
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
    {
        if (USE_DOUBLE_BUFFERING && getTFTFrameBuffer() == frameBuffer0)
 8012078:	4b0e      	ldr	r3, [pc, #56]	; (80120b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x44>)
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00c      	beq.n	801209a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3330      	adds	r3, #48	; 0x30
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	4798      	blx	r3
 801208c:	4602      	mov	r2, r0
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012092:	429a      	cmp	r2, r3
 8012094:	d101      	bne.n	801209a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2a>
 8012096:	2301      	movs	r3, #1
 8012098:	e000      	b.n	801209c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x2c>
 801209a:	2300      	movs	r3, #0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x36>
        {
            return frameBuffer1;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120a4:	e001      	b.n	80120aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x3a>
        }
        return frameBuffer0;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	2004f6f2 	.word	0x2004f6f2

080120b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80120b8:	b480      	push	{r7}
 80120ba:	b085      	sub	sp, #20
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d011      	beq.n	80120f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80120d0:	4b14      	ldr	r3, [pc, #80]	; (8012124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d11e      	bne.n	8012116 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80120d8:	4b13      	ldr	r3, [pc, #76]	; (8012128 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80120da:	881b      	ldrh	r3, [r3, #0]
 80120dc:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80120de:	4b13      	ldr	r3, [pc, #76]	; (801212c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80120e0:	881a      	ldrh	r2, [r3, #0]
 80120e2:	4b11      	ldr	r3, [pc, #68]	; (8012128 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80120e4:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80120e6:	4a11      	ldr	r2, [pc, #68]	; (801212c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80120e8:	89bb      	ldrh	r3, [r7, #12]
 80120ea:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80120ec:	4b0d      	ldr	r3, [pc, #52]	; (8012124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80120ee:	2201      	movs	r2, #1
 80120f0:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80120f2:	e010      	b.n	8012116 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80120f4:	4b0b      	ldr	r3, [pc, #44]	; (8012124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00c      	beq.n	8012116 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80120fc:	4b0a      	ldr	r3, [pc, #40]	; (8012128 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8012102:	4b0a      	ldr	r3, [pc, #40]	; (801212c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012104:	881a      	ldrh	r2, [r3, #0]
 8012106:	4b08      	ldr	r3, [pc, #32]	; (8012128 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012108:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801210a:	4a08      	ldr	r2, [pc, #32]	; (801212c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801210c:	89fb      	ldrh	r3, [r7, #14]
 801210e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8012110:	4b04      	ldr	r3, [pc, #16]	; (8012124 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012112:	2200      	movs	r2, #0
 8012114:	701a      	strb	r2, [r3, #0]
    }
 8012116:	bf00      	nop
 8012118:	3714      	adds	r7, #20
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	2004f6ec 	.word	0x2004f6ec
 8012128:	2004f6ea 	.word	0x2004f6ea
 801212c:	2004f6e8 	.word	0x2004f6e8

08012130 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
    {
    }
 8012138:	bf00      	nop
 801213a:	370c      	adds	r7, #12
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
    {
    }
 801214c:	bf00      	nop
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	4618      	mov	r0, r3
 8012164:	f001 fff8 	bl	8014158 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012168:	bf00      	nop
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	4a05      	ldr	r2, [pc, #20]	; (8012190 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	601a      	str	r2, [r3, #0]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4618      	mov	r0, r3
 8012182:	f7ff fe55 	bl	8011e30 <_ZN8touchgfx3HALD1Ev>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4618      	mov	r0, r3
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	080292f8 	.word	0x080292f8

08012194 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7ff ffe7 	bl	8012170 <_ZN20TouchGFXGeneratedHALD1Ev>
 80121a2:	217c      	movs	r1, #124	; 0x7c
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f014 fb15 	bl	80267d4 <_ZdlPvj>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4618      	mov	r0, r3
 80121ae:	3708      	adds	r7, #8
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	4618      	mov	r0, r3
 80121c0:	f7ff ffca 	bl	8012158 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80121c4:	bf00      	nop
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f001 fc50 	bl	8013a7c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f001 fcac 	bl	8013b4c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80121f4:	4603      	mov	r3, r0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80121fe:	b580      	push	{r7, lr}
 8012200:	b082      	sub	sp, #8
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	4618      	mov	r0, r3
 801220e:	f001 fcab 	bl	8013b68 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012212:	bf00      	nop
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801221a:	b590      	push	{r4, r7, lr}
 801221c:	b083      	sub	sp, #12
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]
	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801222a:	b298      	uxth	r0, r3
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012232:	b299      	uxth	r1, r3
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	f9b3 3000 	ldrsh.w	r3, [r3]
 801223a:	b29a      	uxth	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012242:	b29b      	uxth	r3, r3
 8012244:	4413      	add	r3, r2
 8012246:	b29c      	uxth	r4, r3
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801224e:	b29a      	uxth	r2, r3
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012256:	b29b      	uxth	r3, r3
 8012258:	4413      	add	r3, r2
 801225a:	b29b      	uxth	r3, r3
 801225c:	4622      	mov	r2, r4
 801225e:	f7ee fb55 	bl	800090c <ST7789V_setCursorPosition>
	ST7789V_SEND_COMMAND(ST7789V_RAMWR);
 8012262:	202c      	movs	r0, #44	; 0x2c
 8012264:	f7ee fb0c 	bl	8000880 <ST7789V_SEND_COMMAND>
	this -> copyFrameBufferBlockToLCD(rect);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	33d0      	adds	r3, #208	; 0xd0
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	6839      	ldr	r1, [r7, #0]
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	4798      	blx	r3
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	4618      	mov	r0, r3
 801227c:	f001 fc7f 	bl	8013b7e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 }
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	bd90      	pop	{r4, r7, pc}

08012288 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE>:

void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)
{
 8012288:	b590      	push	{r4, r7, lr}
 801228a:	b087      	sub	sp, #28
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
	__IO uint16_t* ptr;
	uint32_t height;

	ST7789V_setCursorPosition(rect.x, rect.y, rect.x+rect.width, rect.y+rect.height);
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012298:	b298      	uxth	r0, r3
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122a0:	b299      	uxth	r1, r3
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	4413      	add	r3, r2
 80122b4:	b29c      	uxth	r4, r3
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122bc:	b29a      	uxth	r2, r3
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	4413      	add	r3, r2
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	4622      	mov	r2, r4
 80122cc:	f7ee fb1e 	bl	800090c <ST7789V_setCursorPosition>

	for(height = 0; height < rect.height; height++)
 80122d0:	2300      	movs	r3, #0
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80122da:	461a      	mov	r2, r3
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	4293      	cmp	r3, r2
 80122e0:	d236      	bcs.n	8012350 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc8>
	{
		ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff fec3 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80122ea:	4602      	mov	r2, r0
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122f2:	4618      	mov	r0, r3
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80122fa:	4619      	mov	r1, r3
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	440b      	add	r3, r1
 8012300:	4915      	ldr	r1, [pc, #84]	; (8012358 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xd0>)
 8012302:	8809      	ldrh	r1, [r1, #0]
 8012304:	fb01 f303 	mul.w	r3, r1, r3
 8012308:	4403      	add	r3, r0
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	4413      	add	r3, r2
 801230e:	60fb      	str	r3, [r7, #12]
		//LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);
		//for (uint32_t i = 0; i < Size; i++)
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8012310:	2300      	movs	r3, #0
 8012312:	613b      	str	r3, [r7, #16]
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801231a:	461a      	mov	r2, r3
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012322:	fb02 f303 	mul.w	r3, r2, r3
 8012326:	461a      	mov	r2, r3
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	4293      	cmp	r3, r2
 801232c:	d20c      	bcs.n	8012348 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0xc0>
		        {
		            //FMC_BANK1_WriteData(ptr[i]);
					ST7789V_SEND_DATA(ptr[i]);
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	4413      	add	r3, r2
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	b29b      	uxth	r3, r3
 801233a:	4618      	mov	r0, r3
 801233c:	f7ee fab0 	bl	80008a0 <ST7789V_SEND_DATA>
		for (uint32_t i = 0; i < rect.width*rect.height; i++)
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	3301      	adds	r3, #1
 8012344:	613b      	str	r3, [r7, #16]
 8012346:	e7e5      	b.n	8012314 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x8c>
	for(height = 0; height < rect.height; height++)
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	3301      	adds	r3, #1
 801234c:	617b      	str	r3, [r7, #20]
 801234e:	e7c1      	b.n	80122d4 <_ZN11TouchGFXHAL25copyFrameBufferBlockToLCDERKN8touchgfx4RectE+0x4c>
		        }
	}
}
 8012350:	bf00      	nop
 8012352:	371c      	adds	r7, #28
 8012354:	46bd      	mov	sp, r7
 8012356:	bd90      	pop	{r4, r7, pc}
 8012358:	2004f6e8 	.word	0x2004f6e8

0801235c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	68b9      	ldr	r1, [r7, #8]
 8012372:	f001 fc12 	bl	8013b9a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012376:	4603      	mov	r3, r0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4618      	mov	r0, r3
 801238c:	f001 fb98 	bl	8013ac0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012390:	bf00      	nop
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4618      	mov	r0, r3
 80123a4:	f001 fb98 	bl	8013ad8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	4618      	mov	r0, r3
 80123bc:	f001 fb97 	bl	8013aee <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80123c0:	bf00      	nop
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f001 fb96 	bl	8013b04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80123d8:	bf00      	nop
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f001 fb94 	bl	8013b18 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80123f0:	4603      	mov	r3, r0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3708      	adds	r7, #8
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b082      	sub	sp, #8
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	4618      	mov	r0, r3
 8012406:	f001 fb94 	bl	8013b32 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
	...

08012414 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	4a05      	ldr	r2, [pc, #20]	; (8012434 <_ZN11TouchGFXHALD1Ev+0x20>)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	601a      	str	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	4618      	mov	r0, r3
 8012426:	f7ff fea3 	bl	8012170 <_ZN20TouchGFXGeneratedHALD1Ev>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4618      	mov	r0, r3
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	080290d4 	.word	0x080290d4

08012438 <_ZN11TouchGFXHALD0Ev>:
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff ffe7 	bl	8012414 <_ZN11TouchGFXHALD1Ev>
 8012446:	217c      	movs	r1, #124	; 0x7c
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f014 f9c3 	bl	80267d4 <_ZdlPvj>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 801245e:	2334      	movs	r3, #52	; 0x34
 8012460:	9300      	str	r3, [sp, #0]
 8012462:	2364      	movs	r3, #100	; 0x64
 8012464:	4a2b      	ldr	r2, [pc, #172]	; (8012514 <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8012466:	492c      	ldr	r1, [pc, #176]	; (8012518 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8012468:	482c      	ldr	r0, [pc, #176]	; (801251c <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 801246a:	f7fa fed3 	bl	800d214 <_txe_byte_pool_create>
 801246e:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8012470:	2b00      	cmp	r3, #0
 8012472:	bf14      	ite	ne
 8012474:	2301      	movne	r3, #1
 8012476:	2300      	moveq	r3, #0
 8012478:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 801247a:	2b00      	cmp	r3, #0
 801247c:	d005      	beq.n	801248a <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 801247e:	4b28      	ldr	r3, [pc, #160]	; (8012520 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8012480:	4a28      	ldr	r2, [pc, #160]	; (8012524 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012482:	2138      	movs	r1, #56	; 0x38
 8012484:	4828      	ldr	r0, [pc, #160]	; (8012528 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012486:	f014 f9d1 	bl	802682c <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 801248a:	1d39      	adds	r1, r7, #4
 801248c:	2300      	movs	r3, #0
 801248e:	2204      	movs	r2, #4
 8012490:	4822      	ldr	r0, [pc, #136]	; (801251c <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8012492:	f7fa fe4b 	bl	800d12c <_txe_byte_allocate>
 8012496:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8012498:	2b00      	cmp	r3, #0
 801249a:	bf14      	ite	ne
 801249c:	2301      	movne	r3, #1
 801249e:	2300      	moveq	r3, #0
 80124a0:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d005      	beq.n	80124b2 <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80124a6:	4b21      	ldr	r3, [pc, #132]	; (801252c <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 80124a8:	4a1e      	ldr	r2, [pc, #120]	; (8012524 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80124aa:	213f      	movs	r1, #63	; 0x3f
 80124ac:	481e      	ldr	r0, [pc, #120]	; (8012528 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80124ae:	f014 f9bd 	bl	802682c <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2238      	movs	r2, #56	; 0x38
 80124b6:	9201      	str	r2, [sp, #4]
 80124b8:	2204      	movs	r2, #4
 80124ba:	9200      	str	r2, [sp, #0]
 80124bc:	2201      	movs	r2, #1
 80124be:	491c      	ldr	r1, [pc, #112]	; (8012530 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 80124c0:	481c      	ldr	r0, [pc, #112]	; (8012534 <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 80124c2:	f7fa ff47 	bl	800d354 <_txe_queue_create>
 80124c6:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	bf14      	ite	ne
 80124cc:	2301      	movne	r3, #1
 80124ce:	2300      	moveq	r3, #0
 80124d0:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d005      	beq.n	80124e2 <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80124d6:	4b18      	ldr	r3, [pc, #96]	; (8012538 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 80124d8:	4a12      	ldr	r2, [pc, #72]	; (8012524 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 80124da:	2146      	movs	r1, #70	; 0x46
 80124dc:	4812      	ldr	r0, [pc, #72]	; (8012528 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 80124de:	f014 f9a5 	bl	802682c <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80124e2:	231c      	movs	r3, #28
 80124e4:	2201      	movs	r2, #1
 80124e6:	4915      	ldr	r1, [pc, #84]	; (801253c <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 80124e8:	4815      	ldr	r0, [pc, #84]	; (8012540 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 80124ea:	f7fb f877 	bl	800d5dc <_txe_semaphore_create>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	bf14      	ite	ne
 80124f4:	2301      	movne	r3, #1
 80124f6:	2300      	moveq	r3, #0
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d005      	beq.n	801250a <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80124fe:	4b11      	ldr	r3, [pc, #68]	; (8012544 <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8012500:	4a08      	ldr	r2, [pc, #32]	; (8012524 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012502:	214c      	movs	r1, #76	; 0x4c
 8012504:	4808      	ldr	r0, [pc, #32]	; (8012528 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012506:	f014 f991 	bl	802682c <__assert_func>
    }
}
 801250a:	bf00      	nop
 801250c:	3708      	adds	r7, #8
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	2004d534 	.word	0x2004d534
 8012518:	0802849c 	.word	0x0802849c
 801251c:	2004d598 	.word	0x2004d598
 8012520:	080284b0 	.word	0x080284b0
 8012524:	080284e0 	.word	0x080284e0
 8012528:	08028510 	.word	0x08028510
 801252c:	0802853c 	.word	0x0802853c
 8012530:	0802857c 	.word	0x0802857c
 8012534:	2004d5e8 	.word	0x2004d5e8
 8012538:	08028590 	.word	0x08028590
 801253c:	080285c0 	.word	0x080285c0
 8012540:	2004d5cc 	.word	0x2004d5cc
 8012544:	080285d8 	.word	0x080285d8

08012548 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 801254c:	f04f 31ff 	mov.w	r1, #4294967295
 8012550:	4809      	ldr	r0, [pc, #36]	; (8012578 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8012552:	f7fb f8d9 	bl	800d708 <_txe_semaphore_get>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	bf14      	ite	ne
 801255c:	2301      	movne	r3, #1
 801255e:	2300      	moveq	r3, #0
 8012560:	b2db      	uxtb	r3, r3
 8012562:	2b00      	cmp	r3, #0
 8012564:	d005      	beq.n	8012572 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8012566:	4b05      	ldr	r3, [pc, #20]	; (801257c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8012568:	4a05      	ldr	r2, [pc, #20]	; (8012580 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 801256a:	2157      	movs	r1, #87	; 0x57
 801256c:	4805      	ldr	r0, [pc, #20]	; (8012584 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 801256e:	f014 f95d 	bl	802682c <__assert_func>
    }
}
 8012572:	bf00      	nop
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	2004d5cc 	.word	0x2004d5cc
 801257c:	08028608 	.word	0x08028608
 8012580:	08028634 	.word	0x08028634
 8012584:	08028510 	.word	0x08028510

08012588 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012588:	b580      	push	{r7, lr}
 801258a:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 801258c:	4b0b      	ldr	r3, [pc, #44]	; (80125bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 801258e:	689b      	ldr	r3, [r3, #8]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d110      	bne.n	80125b6 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8012594:	4809      	ldr	r0, [pc, #36]	; (80125bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8012596:	f7fb f8f9 	bl	800d78c <_txe_semaphore_put>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	bf14      	ite	ne
 80125a0:	2301      	movne	r3, #1
 80125a2:	2300      	moveq	r3, #0
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d005      	beq.n	80125b6 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80125aa:	4b05      	ldr	r3, [pc, #20]	; (80125c0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 80125ac:	4a05      	ldr	r2, [pc, #20]	; (80125c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 80125ae:	2164      	movs	r1, #100	; 0x64
 80125b0:	4805      	ldr	r0, [pc, #20]	; (80125c8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 80125b2:	f014 f93b 	bl	802682c <__assert_func>
        }
    }
}
 80125b6:	bf00      	nop
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	2004d5cc 	.word	0x2004d5cc
 80125c0:	08028674 	.word	0x08028674
 80125c4:	080286a0 	.word	0x080286a0
 80125c8:	08028510 	.word	0x08028510

080125cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 80125d0:	2100      	movs	r1, #0
 80125d2:	4803      	ldr	r0, [pc, #12]	; (80125e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80125d4:	f7fb f898 	bl	800d708 <_txe_semaphore_get>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 80125dc:	bf00      	nop
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	2004d5cc 	.word	0x2004d5cc

080125e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125ea:	f3ef 8310 	mrs	r3, PRIMASK
 80125ee:	60bb      	str	r3, [r7, #8]
    return(posture);
 80125f0:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80125f2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125f4:	b672      	cpsid	i
    return(int_posture);
 80125f6:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 80125f8:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 80125fa:	4b15      	ldr	r3, [pc, #84]	; (8012650 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	3301      	adds	r3, #1
 8012600:	4a13      	ldr	r2, [pc, #76]	; (8012650 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012602:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8012604:	4b13      	ldr	r3, [pc, #76]	; (8012654 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d110      	bne.n	801262e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 801260c:	4811      	ldr	r0, [pc, #68]	; (8012654 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 801260e:	f7fb f8bd 	bl	800d78c <_txe_semaphore_put>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	bf14      	ite	ne
 8012618:	2301      	movne	r3, #1
 801261a:	2300      	moveq	r3, #0
 801261c:	b2db      	uxtb	r3, r3
 801261e:	2b00      	cmp	r3, #0
 8012620:	d005      	beq.n	801262e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8012622:	4b0d      	ldr	r3, [pc, #52]	; (8012658 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 8012624:	4a0d      	ldr	r2, [pc, #52]	; (801265c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 8012626:	218a      	movs	r1, #138	; 0x8a
 8012628:	480d      	ldr	r0, [pc, #52]	; (8012660 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 801262a:	f014 f8ff 	bl	802682c <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 801262e:	4b08      	ldr	r3, [pc, #32]	; (8012650 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	3b01      	subs	r3, #1
 8012634:	4a06      	ldr	r2, [pc, #24]	; (8012650 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012636:	6013      	str	r3, [r2, #0]
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	f383 8810 	msr	PRIMASK, r3
}
 8012642:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 8012644:	f7f9 ffcc 	bl	800c5e0 <_tx_thread_system_preempt_check>
}
 8012648:	bf00      	nop
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	2004ce74 	.word	0x2004ce74
 8012654:	2004d5cc 	.word	0x2004d5cc
 8012658:	08028674 	.word	0x08028674
 801265c:	080286e0 	.word	0x080286e0
 8012660:	08028510 	.word	0x08028510

08012664 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d10e      	bne.n	8012690 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012672:	2200      	movs	r2, #0
 8012674:	4909      	ldr	r1, [pc, #36]	; (801269c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8012676:	4808      	ldr	r0, [pc, #32]	; (8012698 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8012678:	f7fa ff66 	bl	800d548 <_txe_queue_send>
 801267c:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d005      	beq.n	8012690 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8012684:	4b06      	ldr	r3, [pc, #24]	; (80126a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8012686:	4a07      	ldr	r2, [pc, #28]	; (80126a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012688:	21a6      	movs	r1, #166	; 0xa6
 801268a:	4807      	ldr	r0, [pc, #28]	; (80126a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801268c:	f014 f8ce 	bl	802682c <__assert_func>
        }
    }
}
 8012690:	bf00      	nop
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	2004d5e8 	.word	0x2004d5e8
 801269c:	20025818 	.word	0x20025818
 80126a0:	08028724 	.word	0x08028724
 80126a4:	08028744 	.word	0x08028744
 80126a8:	08028510 	.word	0x08028510

080126ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80126b2:	2200      	movs	r2, #0
 80126b4:	490f      	ldr	r1, [pc, #60]	; (80126f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 80126b6:	4810      	ldr	r0, [pc, #64]	; (80126f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 80126b8:	f7fa fefc 	bl	800d4b4 <_txe_queue_receive>
 80126bc:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2b0a      	cmp	r3, #10
 80126c8:	d106      	bne.n	80126d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 80126ca:	f04f 32ff 	mov.w	r2, #4294967295
 80126ce:	4909      	ldr	r1, [pc, #36]	; (80126f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 80126d0:	4809      	ldr	r0, [pc, #36]	; (80126f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 80126d2:	f7fa feef 	bl	800d4b4 <_txe_queue_receive>
 80126d6:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d005      	beq.n	80126ea <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 80126de:	4b07      	ldr	r3, [pc, #28]	; (80126fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 80126e0:	4a07      	ldr	r2, [pc, #28]	; (8012700 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 80126e2:	21c9      	movs	r1, #201	; 0xc9
 80126e4:	4807      	ldr	r0, [pc, #28]	; (8012704 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 80126e6:	f014 f8a1 	bl	802682c <__assert_func>
    }
}
 80126ea:	bf00      	nop
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	20025818 	.word	0x20025818
 80126f8:	2004d5e8 	.word	0x2004d5e8
 80126fc:	08028774 	.word	0x08028774
 8012700:	08028798 	.word	0x08028798
 8012704:	08028510 	.word	0x08028510

08012708 <__NVIC_DisableIRQ>:
{
 8012708:	b480      	push	{r7}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012716:	2b00      	cmp	r3, #0
 8012718:	db12      	blt.n	8012740 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801271a:	79fb      	ldrb	r3, [r7, #7]
 801271c:	f003 021f 	and.w	r2, r3, #31
 8012720:	490a      	ldr	r1, [pc, #40]	; (801274c <__NVIC_DisableIRQ+0x44>)
 8012722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012726:	095b      	lsrs	r3, r3, #5
 8012728:	2001      	movs	r0, #1
 801272a:	fa00 f202 	lsl.w	r2, r0, r2
 801272e:	3320      	adds	r3, #32
 8012730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012734:	f3bf 8f4f 	dsb	sy
}
 8012738:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801273a:	f3bf 8f6f 	isb	sy
}
 801273e:	bf00      	nop
}
 8012740:	bf00      	nop
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr
 801274c:	e000e100 	.word	0xe000e100

08012750 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
    {
 8012758:	4a04      	ldr	r2, [pc, #16]	; (801276c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	601a      	str	r2, [r3, #0]
    }
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	08029200 	.word	0x08029200

08012770 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
    }
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff ffe9 	bl	8012750 <_ZN8touchgfx9DMA_QueueD1Ev>
 801277e:	2104      	movs	r1, #4
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f014 f827 	bl	80267d4 <_ZdlPvj>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	3344      	adds	r3, #68	; 0x44
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	4798      	blx	r3
    }
 80127a4:	bf00      	nop
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
    {
 80127b4:	4a04      	ldr	r2, [pc, #16]	; (80127c8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	601a      	str	r2, [r3, #0]
    }
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4618      	mov	r0, r3
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr
 80127c8:	08029578 	.word	0x08029578

080127cc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
    }
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7ff ffe9 	bl	80127ac <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80127da:	210c      	movs	r1, #12
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f013 fff9 	bl	80267d4 <_ZdlPvj>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80127f6:	4a09      	ldr	r2, [pc, #36]	; (801281c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	605a      	str	r2, [r3, #4]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	721a      	strb	r2, [r3, #8]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	725a      	strb	r2, [r3, #9]
    {
    }
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	08029578 	.word	0x08029578

08012820 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012828:	2301      	movs	r3, #1
    }
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012836:	b580      	push	{r7, lr}
 8012838:	b082      	sub	sp, #8
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3328      	adds	r3, #40	; 0x28
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4610      	mov	r0, r2
 801284a:	4798      	blx	r3
    }
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	3314      	adds	r3, #20
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4610      	mov	r0, r2
 801286c:	4798      	blx	r3
    }
 801286e:	bf00      	nop
 8012870:	3708      	adds	r7, #8
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
	...

08012878 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8012878:	b580      	push	{r7, lr}
 801287a:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 801287c:	4b13      	ldr	r3, [pc, #76]	; (80128cc <DMA2D_IRQHandler+0x54>)
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	f003 0302 	and.w	r3, r3, #2
 8012884:	2b00      	cmp	r3, #0
 8012886:	bf14      	ite	ne
 8012888:	2301      	movne	r3, #1
 801288a:	2300      	moveq	r3, #0
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d019      	beq.n	80128c6 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8012892:	4b0e      	ldr	r3, [pc, #56]	; (80128cc <DMA2D_IRQHandler+0x54>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801289a:	2b00      	cmp	r3, #0
 801289c:	bf14      	ite	ne
 801289e:	2301      	movne	r3, #1
 80128a0:	2300      	moveq	r3, #0
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d00e      	beq.n	80128c6 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 80128a8:	4b08      	ldr	r3, [pc, #32]	; (80128cc <DMA2D_IRQHandler+0x54>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a07      	ldr	r2, [pc, #28]	; (80128cc <DMA2D_IRQHandler+0x54>)
 80128ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80128b2:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 80128b4:	4b05      	ldr	r3, [pc, #20]	; (80128cc <DMA2D_IRQHandler+0x54>)
 80128b6:	2202      	movs	r2, #2
 80128b8:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80128ba:	f7fb ff37 	bl	800e72c <_ZN8touchgfx3HAL11getInstanceEv>
 80128be:	4603      	mov	r3, r0
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff ffc7 	bl	8012854 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 80128c6:	bf00      	nop
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	4002b000 	.word	0x4002b000

080128d0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	330c      	adds	r3, #12
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fd fb60 	bl	800ffa2 <_ZN8touchgfx9colortypeC1Ev>
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 80128ec:	b5b0      	push	{r4, r5, r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	330c      	adds	r3, #12
 80128fa:	4619      	mov	r1, r3
 80128fc:	4610      	mov	r0, r2
 80128fe:	f7ff ff75 	bl	80127ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012902:	4a0e      	ldr	r2, [pc, #56]	; (801293c <_ZN8STM32DMAC1Ev+0x50>)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	601a      	str	r2, [r3, #0]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f103 000c 	add.w	r0, r3, #12
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3320      	adds	r3, #32
 8012912:	2260      	movs	r2, #96	; 0x60
 8012914:	4619      	mov	r1, r3
 8012916:	f002 faf9 	bl	8014f0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	3320      	adds	r3, #32
 801291e:	245f      	movs	r4, #95	; 0x5f
 8012920:	461d      	mov	r5, r3
 8012922:	2c00      	cmp	r4, #0
 8012924:	db05      	blt.n	8012932 <_ZN8STM32DMAC1Ev+0x46>
 8012926:	4628      	mov	r0, r5
 8012928:	f7ff ffd2 	bl	80128d0 <_ZN8touchgfx6BlitOpC1Ev>
 801292c:	3524      	adds	r5, #36	; 0x24
 801292e:	3c01      	subs	r4, #1
 8012930:	e7f7      	b.n	8012922 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	4618      	mov	r0, r3
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bdb0      	pop	{r4, r5, r7, pc}
 801293c:	080291b0 	.word	0x080291b0

08012940 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	4a09      	ldr	r2, [pc, #36]	; (8012970 <_ZN8STM32DMAD1Ev+0x30>)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801294e:	2076      	movs	r0, #118	; 0x76
 8012950:	f7ff feda 	bl	8012708 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	330c      	adds	r3, #12
 8012958:	4618      	mov	r0, r3
 801295a:	f000 fb31 	bl	8012fc0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	f7ff ff23 	bl	80127ac <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	080291b0 	.word	0x080291b0

08012974 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012974:	b580      	push	{r7, lr}
 8012976:	b082      	sub	sp, #8
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
}
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff ffdf 	bl	8012940 <_ZN8STM32DMAD1Ev>
 8012982:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f013 ff24 	bl	80267d4 <_ZdlPvj>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
	...

08012998 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80129a0:	4b13      	ldr	r3, [pc, #76]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129a6:	4a12      	ldr	r2, [pc, #72]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80129b0:	4b0f      	ldr	r3, [pc, #60]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129ba:	60fb      	str	r3, [r7, #12]
 80129bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80129be:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129c2:	4a0b      	ldr	r2, [pc, #44]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129c8:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80129ca:	4b09      	ldr	r3, [pc, #36]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129ce:	4a08      	ldr	r2, [pc, #32]	; (80129f0 <_ZN8STM32DMA10initializeEv+0x58>)
 80129d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129d4:	6613      	str	r3, [r2, #96]	; 0x60

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80129d6:	2200      	movs	r2, #0
 80129d8:	2105      	movs	r1, #5
 80129da:	2076      	movs	r0, #118	; 0x76
 80129dc:	f7f0 f9d2 	bl	8002d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80129e0:	2076      	movs	r0, #118	; 0x76
 80129e2:	f7f0 f9e9 	bl	8002db8 <HAL_NVIC_EnableIRQ>
}
 80129e6:	bf00      	nop
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	46020c00 	.word	0x46020c00

080129f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	460b      	mov	r3, r1
 80129fe:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012a00:	2300      	movs	r3, #0
 8012a02:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012a04:	78fb      	ldrb	r3, [r7, #3]
 8012a06:	2b0b      	cmp	r3, #11
 8012a08:	d826      	bhi.n	8012a58 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8012a0a:	a201      	add	r2, pc, #4	; (adr r2, 8012a10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a10:	08012a4d 	.word	0x08012a4d
 8012a14:	08012a47 	.word	0x08012a47
 8012a18:	08012a41 	.word	0x08012a41
 8012a1c:	08012a59 	.word	0x08012a59
 8012a20:	08012a59 	.word	0x08012a59
 8012a24:	08012a59 	.word	0x08012a59
 8012a28:	08012a59 	.word	0x08012a59
 8012a2c:	08012a53 	.word	0x08012a53
 8012a30:	08012a53 	.word	0x08012a53
 8012a34:	08012a53 	.word	0x08012a53
 8012a38:	08012a53 	.word	0x08012a53
 8012a3c:	08012a53 	.word	0x08012a53
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012a40:	2300      	movs	r3, #0
 8012a42:	60fb      	str	r3, [r7, #12]
        break;
 8012a44:	e00e      	b.n	8012a64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8012a46:	2301      	movs	r3, #1
 8012a48:	60fb      	str	r3, [r7, #12]
        break;
 8012a4a:	e00b      	b.n	8012a64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012a4c:	2302      	movs	r3, #2
 8012a4e:	60fb      	str	r3, [r7, #12]
        break;
 8012a50:	e008      	b.n	8012a64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012a52:	2305      	movs	r3, #5
 8012a54:	60fb      	str	r3, [r7, #12]
        break;
 8012a56:	e005      	b.n	8012a64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012a58:	4b05      	ldr	r3, [pc, #20]	; (8012a70 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012a5a:	4a06      	ldr	r2, [pc, #24]	; (8012a74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012a5c:	216e      	movs	r1, #110	; 0x6e
 8012a5e:	4806      	ldr	r0, [pc, #24]	; (8012a78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012a60:	f013 fee4 	bl	802682c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012a64:	68fb      	ldr	r3, [r7, #12]
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3710      	adds	r7, #16
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	080287cc 	.word	0x080287cc
 8012a74:	080287e8 	.word	0x080287e8
 8012a78:	08028834 	.word	0x08028834

08012a7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	460b      	mov	r3, r1
 8012a86:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012a8c:	78fb      	ldrb	r3, [r7, #3]
 8012a8e:	2b0a      	cmp	r3, #10
 8012a90:	d821      	bhi.n	8012ad6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012a92:	a201      	add	r2, pc, #4	; (adr r2, 8012a98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a98:	08012ad1 	.word	0x08012ad1
 8012a9c:	08012acb 	.word	0x08012acb
 8012aa0:	08012ac5 	.word	0x08012ac5
 8012aa4:	08012ad7 	.word	0x08012ad7
 8012aa8:	08012ad7 	.word	0x08012ad7
 8012aac:	08012ad7 	.word	0x08012ad7
 8012ab0:	08012ad7 	.word	0x08012ad7
 8012ab4:	08012acb 	.word	0x08012acb
 8012ab8:	08012acb 	.word	0x08012acb
 8012abc:	08012acb 	.word	0x08012acb
 8012ac0:	08012acb 	.word	0x08012acb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	60fb      	str	r3, [r7, #12]
        break;
 8012ac8:	e00b      	b.n	8012ae2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8012aca:	2301      	movs	r3, #1
 8012acc:	60fb      	str	r3, [r7, #12]
        break;
 8012ace:	e008      	b.n	8012ae2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012ad0:	2302      	movs	r3, #2
 8012ad2:	60fb      	str	r3, [r7, #12]
        break;
 8012ad4:	e005      	b.n	8012ae2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012ad6:	4b05      	ldr	r3, [pc, #20]	; (8012aec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8012ad8:	4a05      	ldr	r2, [pc, #20]	; (8012af0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8012ada:	218f      	movs	r1, #143	; 0x8f
 8012adc:	4805      	ldr	r0, [pc, #20]	; (8012af4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012ade:	f013 fea5 	bl	802682c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	080287cc 	.word	0x080287cc
 8012af0:	08028860 	.word	0x08028860
 8012af4:	08028834 	.word	0x08028834

08012af8 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012b00:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012b10:	b590      	push	{r4, r7, lr}
 8012b12:	b089      	sub	sp, #36	; 0x24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	7f5b      	ldrb	r3, [r3, #29]
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff ff67 	bl	80129f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b26:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	7f9b      	ldrb	r3, [r3, #30]
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7ff ff60 	bl	80129f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b34:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	7f9b      	ldrb	r3, [r3, #30]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7ff ff9d 	bl	8012a7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012b42:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	8b5b      	ldrh	r3, [r3, #26]
 8012b48:	461a      	mov	r2, r3
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	8a9b      	ldrh	r3, [r3, #20]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	4b95      	ldr	r3, [pc, #596]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	8b5b      	ldrh	r3, [r3, #26]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	8a9b      	ldrh	r3, [r3, #20]
 8012b5e:	1ad2      	subs	r2, r2, r3
 8012b60:	4b91      	ldr	r3, [pc, #580]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b62:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	8b1b      	ldrh	r3, [r3, #24]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	8a9b      	ldrh	r3, [r3, #20]
 8012b6e:	1ad2      	subs	r2, r2, r3
 8012b70:	4b8d      	ldr	r3, [pc, #564]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b72:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012b74:	4a8c      	ldr	r2, [pc, #560]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	8adb      	ldrh	r3, [r3, #22]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	8a9b      	ldrh	r3, [r3, #20]
 8012b84:	041b      	lsls	r3, r3, #16
 8012b86:	431a      	orrs	r2, r3
 8012b88:	4b87      	ldr	r3, [pc, #540]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	691a      	ldr	r2, [r3, #16]
 8012b90:	4b85      	ldr	r3, [pc, #532]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	685a      	ldr	r2, [r3, #4]
 8012b98:	4b83      	ldr	r3, [pc, #524]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012b9a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ba4:	d037      	beq.n	8012c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8012ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012baa:	f200 80e8 	bhi.w	8012d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bb2:	d014      	beq.n	8012bde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8012bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bb8:	f200 80e1 	bhi.w	8012d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012bbc:	2b80      	cmp	r3, #128	; 0x80
 8012bbe:	d05b      	beq.n	8012c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8012bc0:	2b80      	cmp	r3, #128	; 0x80
 8012bc2:	f200 80dc 	bhi.w	8012d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012bc6:	2b40      	cmp	r3, #64	; 0x40
 8012bc8:	f000 80c4 	beq.w	8012d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012bcc:	2b40      	cmp	r3, #64	; 0x40
 8012bce:	f200 80d6 	bhi.w	8012d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	d03b      	beq.n	8012c4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8012bd6:	2b20      	cmp	r3, #32
 8012bd8:	f000 80bc 	beq.w	8012d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8012bdc:	e0cf      	b.n	8012d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	7f1b      	ldrb	r3, [r3, #28]
 8012be2:	061b      	lsls	r3, r3, #24
 8012be4:	4a70      	ldr	r2, [pc, #448]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012bea:	f043 030a 	orr.w	r3, r3, #10
 8012bee:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	330c      	adds	r3, #12
 8012bf4:	4c6c      	ldr	r4, [pc, #432]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7fd f9f0 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c00:	4a69      	ldr	r2, [pc, #420]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	691a      	ldr	r2, [r3, #16]
 8012c0a:	4b67      	ldr	r3, [pc, #412]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c0c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012c0e:	4b66      	ldr	r3, [pc, #408]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c10:	4a66      	ldr	r2, [pc, #408]	; (8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c12:	601a      	str	r2, [r3, #0]
        break;
 8012c14:	e0d9      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	7f1b      	ldrb	r3, [r3, #28]
 8012c1a:	061b      	lsls	r3, r3, #24
 8012c1c:	4a62      	ldr	r2, [pc, #392]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c22:	f043 0309 	orr.w	r3, r3, #9
 8012c26:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	330c      	adds	r3, #12
 8012c2c:	4c5e      	ldr	r4, [pc, #376]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fd f9d4 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012c34:	4603      	mov	r3, r0
 8012c36:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c38:	4a5b      	ldr	r2, [pc, #364]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	691a      	ldr	r2, [r3, #16]
 8012c42:	4b59      	ldr	r3, [pc, #356]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c44:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012c46:	4b58      	ldr	r3, [pc, #352]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c48:	4a58      	ldr	r2, [pc, #352]	; (8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c4a:	601a      	str	r2, [r3, #0]
        break;
 8012c4c:	e0bd      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	7f1b      	ldrb	r3, [r3, #28]
 8012c52:	061b      	lsls	r3, r3, #24
 8012c54:	461a      	mov	r2, r3
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	4a53      	ldr	r2, [pc, #332]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c60:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c62:	4a51      	ldr	r2, [pc, #324]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	691a      	ldr	r2, [r3, #16]
 8012c6c:	4b4e      	ldr	r3, [pc, #312]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c6e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012c70:	4b4d      	ldr	r3, [pc, #308]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c72:	4a4e      	ldr	r2, [pc, #312]	; (8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c74:	601a      	str	r2, [r3, #0]
        break;
 8012c76:	e0a8      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	1d1a      	adds	r2, r3, #4
 8012c86:	4b48      	ldr	r3, [pc, #288]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c88:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	7f1b      	ldrb	r3, [r3, #28]
 8012c8e:	061b      	lsls	r3, r3, #24
 8012c90:	461a      	mov	r2, r3
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	4313      	orrs	r3, r2
 8012c96:	4a44      	ldr	r2, [pc, #272]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012c9c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012c9e:	4a42      	ldr	r2, [pc, #264]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	691a      	ldr	r2, [r3, #16]
 8012ca8:	4b3f      	ldr	r3, [pc, #252]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012caa:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	881b      	ldrh	r3, [r3, #0]
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d002      	beq.n	8012cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8012cb6:	2b01      	cmp	r3, #1
 8012cb8:	d00f      	beq.n	8012cda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8012cba:	e024      	b.n	8012d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012cbc:	4b3a      	ldr	r3, [pc, #232]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cbe:	69db      	ldr	r3, [r3, #28]
 8012cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012cc4:	f023 0310 	bic.w	r3, r3, #16
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	8852      	ldrh	r2, [r2, #2]
 8012ccc:	3a01      	subs	r2, #1
 8012cce:	0212      	lsls	r2, r2, #8
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	4a35      	ldr	r2, [pc, #212]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cd4:	430b      	orrs	r3, r1
 8012cd6:	61d3      	str	r3, [r2, #28]
                break;
 8012cd8:	e01c      	b.n	8012d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	7f1b      	ldrb	r3, [r3, #28]
 8012cde:	2bff      	cmp	r3, #255	; 0xff
 8012ce0:	d101      	bne.n	8012ce6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8012ce6:	4b30      	ldr	r3, [pc, #192]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012ce8:	69db      	ldr	r3, [r3, #28]
 8012cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012cee:	f023 0310 	bic.w	r3, r3, #16
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	8852      	ldrh	r2, [r2, #2]
 8012cf6:	3a01      	subs	r2, #1
 8012cf8:	0212      	lsls	r2, r2, #8
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	4a2a      	ldr	r2, [pc, #168]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012cfe:	f043 0310 	orr.w	r3, r3, #16
 8012d02:	61d3      	str	r3, [r2, #28]
                break;
 8012d04:	e006      	b.n	8012d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012d06:	4b2a      	ldr	r3, [pc, #168]	; (8012db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012d08:	4a2a      	ldr	r2, [pc, #168]	; (8012db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012d0a:	f240 1119 	movw	r1, #281	; 0x119
 8012d0e:	482a      	ldr	r0, [pc, #168]	; (8012db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8012d10:	f013 fd8c 	bl	802682c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8012d14:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d16:	69db      	ldr	r3, [r3, #28]
 8012d18:	4a23      	ldr	r2, [pc, #140]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d1a:	f043 0320 	orr.w	r3, r3, #32
 8012d1e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8012d20:	4b21      	ldr	r3, [pc, #132]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d22:	69db      	ldr	r3, [r3, #28]
 8012d24:	f003 0320 	and.w	r3, r3, #32
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	bf14      	ite	ne
 8012d2c:	2301      	movne	r3, #1
 8012d2e:	2300      	moveq	r3, #0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d000      	beq.n	8012d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8012d36:	e7f3      	b.n	8012d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012d38:	4b1b      	ldr	r3, [pc, #108]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d3a:	2210      	movs	r2, #16
 8012d3c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d003      	beq.n	8012d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012d44:	4b18      	ldr	r3, [pc, #96]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d46:	4a19      	ldr	r2, [pc, #100]	; (8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d48:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8012d4a:	e03e      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012d4c:	4b16      	ldr	r3, [pc, #88]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d4e:	4a1b      	ldr	r2, [pc, #108]	; (8012dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012d50:	601a      	str	r2, [r3, #0]
        break;
 8012d52:	e03a      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	7f1b      	ldrb	r3, [r3, #28]
 8012d58:	061b      	lsls	r3, r3, #24
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	4313      	orrs	r3, r2
 8012d60:	4a11      	ldr	r2, [pc, #68]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d66:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012d68:	4a0f      	ldr	r2, [pc, #60]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	691a      	ldr	r2, [r3, #16]
 8012d72:	4b0d      	ldr	r3, [pc, #52]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d74:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012d76:	4b0c      	ldr	r3, [pc, #48]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d78:	4a0c      	ldr	r2, [pc, #48]	; (8012dac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d7a:	601a      	str	r2, [r3, #0]
        break;
 8012d7c:	e025      	b.n	8012dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	7f1b      	ldrb	r3, [r3, #28]
 8012d82:	061b      	lsls	r3, r3, #24
 8012d84:	461a      	mov	r2, r3
 8012d86:	69bb      	ldr	r3, [r7, #24]
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	4a07      	ldr	r2, [pc, #28]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d90:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	7f5a      	ldrb	r2, [r3, #29]
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	7f9b      	ldrb	r3, [r3, #30]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d010      	beq.n	8012dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012d9e:	4b02      	ldr	r3, [pc, #8]	; (8012da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012da0:	4a06      	ldr	r2, [pc, #24]	; (8012dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8012da2:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8012da4:	e010      	b.n	8012dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8012da6:	bf00      	nop
 8012da8:	4002b000 	.word	0x4002b000
 8012dac:	00020201 	.word	0x00020201
 8012db0:	080288ac 	.word	0x080288ac
 8012db4:	080288c8 	.word	0x080288c8
 8012db8:	08028834 	.word	0x08028834
 8012dbc:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8012dc0:	4b04      	ldr	r3, [pc, #16]	; (8012dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8012dc2:	f240 2201 	movw	r2, #513	; 0x201
 8012dc6:	601a      	str	r2, [r3, #0]
        break;
 8012dc8:	bf00      	nop
    }
}
 8012dca:	bf00      	nop
 8012dcc:	3724      	adds	r7, #36	; 0x24
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd90      	pop	{r4, r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	4002b000 	.word	0x4002b000

08012dd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b085      	sub	sp, #20
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	7f9b      	ldrb	r3, [r3, #30]
 8012de6:	4619      	mov	r1, r3
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff fe47 	bl	8012a7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012dee:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012df0:	4a3b      	ldr	r2, [pc, #236]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	8adb      	ldrh	r3, [r3, #22]
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	8a9b      	ldrh	r3, [r3, #20]
 8012e00:	041b      	lsls	r3, r3, #16
 8012e02:	431a      	orrs	r2, r3
 8012e04:	4b36      	ldr	r3, [pc, #216]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	691a      	ldr	r2, [r3, #16]
 8012e0c:	4b34      	ldr	r3, [pc, #208]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	8b5b      	ldrh	r3, [r3, #26]
 8012e14:	461a      	mov	r2, r3
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	8a9b      	ldrh	r3, [r3, #20]
 8012e1a:	1ad2      	subs	r2, r2, r3
 8012e1c:	4b30      	ldr	r3, [pc, #192]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e1e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	2b08      	cmp	r3, #8
 8012e26:	d12f      	bne.n	8012e88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	8b5b      	ldrh	r3, [r3, #26]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	8a9b      	ldrh	r3, [r3, #20]
 8012e32:	1ad2      	subs	r2, r2, r3
 8012e34:	4b2a      	ldr	r3, [pc, #168]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e36:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	8b5b      	ldrh	r3, [r3, #26]
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	8a9b      	ldrh	r3, [r3, #20]
 8012e42:	1ad2      	subs	r2, r2, r3
 8012e44:	4b26      	ldr	r3, [pc, #152]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e46:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012e48:	4a25      	ldr	r2, [pc, #148]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	7f1b      	ldrb	r3, [r3, #28]
 8012e52:	061b      	lsls	r3, r3, #24
 8012e54:	4a22      	ldr	r2, [pc, #136]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e5a:	f043 0309 	orr.w	r3, r3, #9
 8012e5e:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	330c      	adds	r3, #12
 8012e64:	4c1e      	ldr	r4, [pc, #120]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fd f8b8 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	691a      	ldr	r2, [r3, #16]
 8012e74:	4b1a      	ldr	r3, [pc, #104]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e76:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	691a      	ldr	r2, [r3, #16]
 8012e7c:	4b18      	ldr	r3, [pc, #96]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e7e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012e80:	4b17      	ldr	r3, [pc, #92]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e82:	4a18      	ldr	r2, [pc, #96]	; (8012ee4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8012e84:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012e86:	e027      	b.n	8012ed8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012e88:	4a15      	ldr	r2, [pc, #84]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8012e8e:	4b14      	ldr	r3, [pc, #80]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012e90:	2200      	movs	r2, #0
 8012e92:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	330c      	adds	r3, #12
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fd f89f 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	0a1b      	lsrs	r3, r3, #8
 8012ea2:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	330c      	adds	r3, #12
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fd f896 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	095b      	lsrs	r3, r3, #5
 8012eb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8012eb8:	431c      	orrs	r4, r3
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	330c      	adds	r3, #12
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fd f88c 	bl	800ffdc <_ZNK8touchgfx9colortypecvmEv>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	08db      	lsrs	r3, r3, #3
 8012ec8:	f003 031f 	and.w	r3, r3, #31
 8012ecc:	4a04      	ldr	r2, [pc, #16]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012ece:	4323      	orrs	r3, r4
 8012ed0:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8012ed2:	4b03      	ldr	r3, [pc, #12]	; (8012ee0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8012ed4:	4a04      	ldr	r2, [pc, #16]	; (8012ee8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8012ed6:	601a      	str	r2, [r3, #0]
}
 8012ed8:	bf00      	nop
 8012eda:	3714      	adds	r7, #20
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd90      	pop	{r4, r7, pc}
 8012ee0:	4002b000 	.word	0x4002b000
 8012ee4:	00020201 	.word	0x00020201
 8012ee8:	00030201 	.word	0x00030201

08012eec <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 8012eec:	b480      	push	{r7}
 8012eee:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012ef0:	4b09      	ldr	r3, [pc, #36]	; (8012f18 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	bf14      	ite	ne
 8012efc:	2301      	movne	r3, #1
 8012efe:	2300      	moveq	r3, #0
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d000      	beq.n	8012f08 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 8012f06:	e7f3      	b.n	8012ef0 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8012f08:	4b03      	ldr	r3, [pc, #12]	; (8012f18 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 8012f0a:	2223      	movs	r2, #35	; 0x23
 8012f0c:	609a      	str	r2, [r3, #8]
    }
 8012f0e:	bf00      	nop
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	4002b000 	.word	0x4002b000

08012f1c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
 8012f28:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8012f2a:	4b22      	ldr	r3, [pc, #136]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f003 0301 	and.w	r3, r3, #1
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	bf14      	ite	ne
 8012f36:	2301      	movne	r3, #1
 8012f38:	2300      	moveq	r3, #0
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d000      	beq.n	8012f42 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 8012f40:	e7f3      	b.n	8012f2a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8012f42:	4b1c      	ldr	r3, [pc, #112]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f44:	2223      	movs	r2, #35	; 0x23
 8012f46:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8012f48:	4b1a      	ldr	r3, [pc, #104]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	041b      	lsls	r3, r3, #16
 8012f52:	4a18      	ldr	r2, [pc, #96]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f54:	f043 0301 	orr.w	r3, r3, #1
 8012f58:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8012f5a:	4a16      	ldr	r2, [pc, #88]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 8012f60:	78fb      	ldrb	r3, [r7, #3]
 8012f62:	2bff      	cmp	r3, #255	; 0xff
 8012f64:	d017      	beq.n	8012f96 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012f66:	4b13      	ldr	r3, [pc, #76]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f68:	2202      	movs	r2, #2
 8012f6a:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8012f6c:	78fb      	ldrb	r3, [r7, #3]
 8012f6e:	061b      	lsls	r3, r3, #24
 8012f70:	4a10      	ldr	r2, [pc, #64]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012f76:	f043 0309 	orr.w	r3, r3, #9
 8012f7a:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 8012f7c:	4a0d      	ldr	r2, [pc, #52]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8012f82:	4a0c      	ldr	r2, [pc, #48]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8012f88:	4a0a      	ldr	r2, [pc, #40]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012f8e:	4b09      	ldr	r3, [pc, #36]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f90:	4a09      	ldr	r2, [pc, #36]	; (8012fb8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8012f92:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8012f94:	e008      	b.n	8012fa8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012f96:	4b07      	ldr	r3, [pc, #28]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f98:	2202      	movs	r2, #2
 8012f9a:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8012f9c:	4a05      	ldr	r2, [pc, #20]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8012fa2:	4b04      	ldr	r3, [pc, #16]	; (8012fb4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8012fa4:	4a05      	ldr	r2, [pc, #20]	; (8012fbc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 8012fa6:	601a      	str	r2, [r3, #0]
    }
 8012fa8:	bf00      	nop
 8012faa:	3714      	adds	r7, #20
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr
 8012fb4:	4002b000 	.word	0x4002b000
 8012fb8:	00020001 	.word	0x00020001
 8012fbc:	00030001 	.word	0x00030001

08012fc0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	4a05      	ldr	r2, [pc, #20]	; (8012fe0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7ff fbbd 	bl	8012750 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	080295c8 	.word	0x080295c8

08012fe4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7ff ffe7 	bl	8012fc0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012ff2:	2114      	movs	r1, #20
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f013 fbed 	bl	80267d4 <_ZdlPvj>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3708      	adds	r7, #8
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013004:	b480      	push	{r7}
 8013006:	b083      	sub	sp, #12
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801300c:	4a04      	ldr	r2, [pc, #16]	; (8013020 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6013      	str	r3, [r2, #0]
    }
 8013012:	bf00      	nop
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	2004f758 	.word	0x2004f758

08013024 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
 8013030:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8013032:	4a0b      	ldr	r2, [pc, #44]	; (8013060 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	605a      	str	r2, [r3, #4]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	609a      	str	r2, [r3, #8]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	683a      	ldr	r2, [r7, #0]
 8013048:	60da      	str	r2, [r3, #12]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	69ba      	ldr	r2, [r7, #24]
 801304e:	611a      	str	r2, [r3, #16]
    {
    }
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4618      	mov	r0, r3
 8013054:	3714      	adds	r7, #20
 8013056:	46bd      	mov	sp, r7
 8013058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop
 8013060:	080292e8 	.word	0x080292e8

08013064 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8013064:	b480      	push	{r7}
 8013066:	b083      	sub	sp, #12
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
    {
 801306c:	4a04      	ldr	r2, [pc, #16]	; (8013080 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	601a      	str	r2, [r3, #0]
    }
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4618      	mov	r0, r3
 8013076:	370c      	adds	r7, #12
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr
 8013080:	080292e8 	.word	0x080292e8

08013084 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
    }
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff ffe9 	bl	8013064 <_ZN8touchgfx7MVPHeapD1Ev>
 8013092:	2114      	movs	r1, #20
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f013 fb9d 	bl	80267d4 <_ZdlPvj>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4618      	mov	r0, r3
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
    {
 80130ac:	4a04      	ldr	r2, [pc, #16]	; (80130c0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	601a      	str	r2, [r3, #0]
    }
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4618      	mov	r0, r3
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr
 80130c0:	080299c4 	.word	0x080299c4

080130c4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
    }
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7ff ffe9 	bl	80130a4 <_ZN8touchgfx3LCDD1Ev>
 80130d2:	2108      	movs	r1, #8
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f013 fb7d 	bl	80267d4 <_ZdlPvj>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	801a      	strh	r2, [r3, #0]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	805a      	strh	r2, [r3, #2]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	809a      	strh	r2, [r3, #4]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2200      	movs	r2, #0
 8013102:	80da      	strh	r2, [r3, #6]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2200      	movs	r2, #0
 8013108:	811a      	strh	r2, [r3, #8]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2200      	movs	r2, #0
 801310e:	815a      	strh	r2, [r3, #10]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	819a      	strh	r2, [r3, #12]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	739a      	strb	r2, [r3, #14]
        {
        }
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	4618      	mov	r0, r3
 8013120:	370c      	adds	r7, #12
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801312a:	b580      	push	{r7, lr}
 801312c:	b082      	sub	sp, #8
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	4618      	mov	r0, r3
 8013136:	f7ff ffd5 	bl	80130e4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2200      	movs	r2, #0
 801313e:	611a      	str	r2, [r3, #16]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	829a      	strh	r2, [r3, #20]
    {
    }
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
 801315c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801315e:	4a55      	ldr	r2, [pc, #340]	; (80132b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	601a      	str	r2, [r3, #0]
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	68ba      	ldr	r2, [r7, #8]
 8013168:	605a      	str	r2, [r3, #4]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	687a      	ldr	r2, [r7, #4]
 801316e:	609a      	str	r2, [r3, #8]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	60da      	str	r2, [r3, #12]
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2200      	movs	r2, #0
 801317a:	611a      	str	r2, [r3, #16]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2200      	movs	r2, #0
 8013180:	615a      	str	r2, [r3, #20]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2200      	movs	r2, #0
 8013186:	619a      	str	r2, [r3, #24]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	331c      	adds	r3, #28
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff ffcc 	bl	801312a <_ZN8touchgfx8GesturesC1Ev>
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2200      	movs	r2, #0
 801319e:	639a      	str	r2, [r3, #56]	; 0x38
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2200      	movs	r2, #0
 80131a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	641a      	str	r2, [r3, #64]	; 0x40
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2200      	movs	r2, #0
 80131b0:	645a      	str	r2, [r3, #68]	; 0x44
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2201      	movs	r2, #1
 80131be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2200      	movs	r2, #0
 80131ce:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	3350      	adds	r3, #80	; 0x50
 80131dc:	4618      	mov	r0, r3
 80131de:	f7fa fffb 	bl	800e1d8 <_ZN8touchgfx4RectC1Ev>
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2200      	movs	r2, #0
 80131e6:	659a      	str	r2, [r3, #88]	; 0x58
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2200      	movs	r2, #0
 80131ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	2200      	movs	r2, #0
 80131f2:	661a      	str	r2, [r3, #96]	; 0x60
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2201      	movs	r2, #1
 80131f8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	2200      	movs	r2, #0
 8013200:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2200      	movs	r2, #0
 8013208:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2201      	movs	r2, #1
 8013210:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2200      	movs	r2, #0
 8013218:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2200      	movs	r2, #0
 8013220:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2200      	movs	r2, #0
 8013228:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2200      	movs	r2, #0
 8013230:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2200      	movs	r2, #0
 8013240:	671a      	str	r2, [r3, #112]	; 0x70
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2200      	movs	r2, #0
 8013246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2200      	movs	r2, #0
 801324e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2201      	movs	r2, #1
 801325e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2201      	movs	r2, #1
 8013266:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 801326a:	4a13      	ldr	r2, [pc, #76]	; (80132b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8013270:	4a12      	ldr	r2, [pc, #72]	; (80132bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013272:	8b3b      	ldrh	r3, [r7, #24]
 8013274:	8013      	strh	r3, [r2, #0]
 8013276:	4b11      	ldr	r3, [pc, #68]	; (80132bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013278:	881a      	ldrh	r2, [r3, #0]
 801327a:	4b11      	ldr	r3, [pc, #68]	; (80132c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 801327c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801327e:	4a11      	ldr	r2, [pc, #68]	; (80132c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013280:	8bbb      	ldrh	r3, [r7, #28]
 8013282:	8013      	strh	r3, [r2, #0]
 8013284:	4b0f      	ldr	r3, [pc, #60]	; (80132c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013286:	881a      	ldrh	r2, [r3, #0]
 8013288:	4b0f      	ldr	r3, [pc, #60]	; (80132c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801328a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 801328c:	4b0f      	ldr	r3, [pc, #60]	; (80132cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801328e:	2200      	movs	r2, #0
 8013290:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013292:	8b3a      	ldrh	r2, [r7, #24]
 8013294:	8bbb      	ldrh	r3, [r7, #28]
 8013296:	429a      	cmp	r2, r3
 8013298:	bf34      	ite	cc
 801329a:	2301      	movcc	r3, #1
 801329c:	2300      	movcs	r3, #0
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	461a      	mov	r2, r3
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	4618      	mov	r0, r3
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	080294a0 	.word	0x080294a0
 80132b8:	2004f6f4 	.word	0x2004f6f4
 80132bc:	2004f6e8 	.word	0x2004f6e8
 80132c0:	2004f6ee 	.word	0x2004f6ee
 80132c4:	2004f6ea 	.word	0x2004f6ea
 80132c8:	2004f6f0 	.word	0x2004f6f0
 80132cc:	2004f6ec 	.word	0x2004f6ec

080132d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fb fc6d 	bl	800ebbc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80132e2:	bf00      	nop
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
	...

080132ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af02      	add	r7, sp, #8
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
 80132f8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	68b9      	ldr	r1, [r7, #8]
 8013306:	f7ff fe8d 	bl	8013024 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801330a:	4a04      	ldr	r2, [pc, #16]	; (801331c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	601a      	str	r2, [r3, #0]
    {

    }
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	080292d4 	.word	0x080292d4

08013320 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013320:	b580      	push	{r7, lr}
 8013322:	af00      	add	r7, sp, #0
 8013324:	4801      	ldr	r0, [pc, #4]	; (801332c <__tcf_0+0xc>)
 8013326:	f000 f96d 	bl	8013604 <_ZN12FrontendHeapD1Ev>
 801332a:	bd80      	pop	{r7, pc}
 801332c:	2004d620 	.word	0x2004d620

08013330 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013330:	b580      	push	{r7, lr}
 8013332:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013334:	4b11      	ldr	r3, [pc, #68]	; (801337c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013336:	e8d3 3f8f 	ldab	r3, [r3]
 801333a:	b2db      	uxtb	r3, r3
 801333c:	f003 0301 	and.w	r3, r3, #1
 8013340:	2b00      	cmp	r3, #0
 8013342:	bf0c      	ite	eq
 8013344:	2301      	moveq	r3, #1
 8013346:	2300      	movne	r3, #0
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	d013      	beq.n	8013376 <_ZN12FrontendHeap11getInstanceEv+0x46>
 801334e:	480b      	ldr	r0, [pc, #44]	; (801337c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013350:	f013 fa42 	bl	80267d8 <__cxa_guard_acquire>
 8013354:	4603      	mov	r3, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	bf14      	ite	ne
 801335a:	2301      	movne	r3, #1
 801335c:	2300      	moveq	r3, #0
 801335e:	b2db      	uxtb	r3, r3
 8013360:	2b00      	cmp	r3, #0
 8013362:	d008      	beq.n	8013376 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8013364:	4806      	ldr	r0, [pc, #24]	; (8013380 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013366:	f000 f867 	bl	8013438 <_ZN12FrontendHeapC1Ev>
 801336a:	4806      	ldr	r0, [pc, #24]	; (8013384 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801336c:	f013 fa7c 	bl	8026868 <atexit>
 8013370:	4802      	ldr	r0, [pc, #8]	; (801337c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013372:	f013 fa3d 	bl	80267f0 <__cxa_guard_release>
        return instance;
 8013376:	4b02      	ldr	r3, [pc, #8]	; (8013380 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013378:	4618      	mov	r0, r3
 801337a:	bd80      	pop	{r7, pc}
 801337c:	2004e848 	.word	0x2004e848
 8013380:	2004d620 	.word	0x2004d620
 8013384:	08013321 	.word	0x08013321

08013388 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	4a05      	ldr	r2, [pc, #20]	; (80133a8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	601a      	str	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	f7ff fe63 	bl	8013064 <_ZN8touchgfx7MVPHeapD1Ev>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	080292d4 	.word	0x080292d4

080133ac <_ZN16FrontendHeapBaseD0Ev>:
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff ffe7 	bl	8013388 <_ZN16FrontendHeapBaseD1Ev>
 80133ba:	2114      	movs	r1, #20
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f013 fa09 	bl	80267d4 <_ZdlPvj>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	4618      	mov	r0, r3
 80133c6:	3708      	adds	r7, #8
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}

080133cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 fc16 	bl	8013c08 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80133dc:	4a03      	ldr	r2, [pc, #12]	; (80133ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	601a      	str	r2, [r3, #0]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4618      	mov	r0, r3
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	080292a0 	.word	0x080292a0

080133f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f000 fc04 	bl	8013c08 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013400:	4a03      	ldr	r2, [pc, #12]	; (8013410 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	0802926c 	.word	0x0802926c

08013414 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	4618      	mov	r0, r3
 8013420:	f000 fbf2 	bl	8013c08 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013424:	4a03      	ldr	r2, [pc, #12]	; (8013434 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4618      	mov	r0, r3
 801342e:	3708      	adds	r7, #8
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	08029238 	.word	0x08029238

08013438 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013438:	b590      	push	{r4, r7, lr}
 801343a:	b085      	sub	sp, #20
 801343c:	af02      	add	r7, sp, #8
 801343e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f103 0114 	add.w	r1, r3, #20
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
 8013454:	3210      	adds	r2, #16
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 801345c:	3310      	adds	r3, #16
                     app(model, *this)
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	4613      	mov	r3, r2
 8013462:	4622      	mov	r2, r4
 8013464:	f7ff ff42 	bl	80132ec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013468:	4a1a      	ldr	r2, [pc, #104]	; (80134d4 <_ZN12FrontendHeapC1Ev+0x9c>)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	3314      	adds	r3, #20
 8013472:	4618      	mov	r0, r3
 8013474:	f7ff ffaa 	bl	80133cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	332c      	adds	r3, #44	; 0x2c
 801347c:	4618      	mov	r0, r3
 801347e:	f7ff ffb7 	bl	80133f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8013488:	3310      	adds	r3, #16
 801348a:	4618      	mov	r0, r3
 801348c:	f7ff ffc2 	bl	8013414 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8013496:	330c      	adds	r3, #12
 8013498:	4618      	mov	r0, r3
 801349a:	f7fe fa1f 	bl	80118dc <_ZN5ModelC1Ev>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80134a4:	3310      	adds	r3, #16
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	f502 5186 	add.w	r1, r2, #4288	; 0x10c0
 80134ac:	310c      	adds	r1, #12
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fe f9fd 	bl	80118b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80134be:	3310      	adds	r3, #16
 80134c0:	4619      	mov	r1, r3
 80134c2:	4610      	mov	r0, r2
 80134c4:	f7ff ff04 	bl	80132d0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4618      	mov	r0, r3
 80134cc:	370c      	adds	r7, #12
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd90      	pop	{r4, r7, pc}
 80134d2:	bf00      	nop
 80134d4:	08029224 	.word	0x08029224

080134d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af02      	add	r7, sp, #8
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
 80134e4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	8bbb      	ldrh	r3, [r7, #28]
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	8b3b      	ldrh	r3, [r7, #24]
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	f7ff fe2b 	bl	8013150 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80134fa:	4a04      	ldr	r2, [pc, #16]	; (801350c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	601a      	str	r2, [r3, #0]
    }
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	080292f8 	.word	0x080292f8

08013510 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013510:	b580      	push	{r7, lr}
 8013512:	b086      	sub	sp, #24
 8013514:	af02      	add	r7, sp, #8
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	607a      	str	r2, [r7, #4]
 801351c:	603b      	str	r3, [r7, #0]
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	8bbb      	ldrh	r3, [r7, #28]
 8013522:	9301      	str	r3, [sp, #4]
 8013524:	8b3b      	ldrh	r3, [r7, #24]
 8013526:	9300      	str	r3, [sp, #0]
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	68b9      	ldr	r1, [r7, #8]
 801352e:	f7ff ffd3 	bl	80134d8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013532:	4a04      	ldr	r2, [pc, #16]	; (8013544 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	601a      	str	r2, [r3, #0]
    }
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	4618      	mov	r0, r3
 801353c:	3710      	adds	r7, #16
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	080290d4 	.word	0x080290d4

08013548 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	4a04      	ldr	r2, [pc, #16]	; (8013564 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	601a      	str	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4618      	mov	r0, r3
 801355a:	370c      	adds	r7, #12
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr
 8013564:	080290bc 	.word	0x080290bc

08013568 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4618      	mov	r0, r3
 8013574:	f7ff ffe8 	bl	8013548 <_ZN8touchgfx15TouchControllerC1Ev>
 8013578:	4a03      	ldr	r2, [pc, #12]	; (8013588 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	601a      	str	r2, [r3, #0]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}
 8013588:	080290a4 	.word	0x080290a4

0801358c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 801358c:	b590      	push	{r4, r7, lr}
 801358e:	b085      	sub	sp, #20
 8013590:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013592:	f7fd ff8f 	bl	80114b4 <_ZN14BitmapDatabase11getInstanceEv>
 8013596:	4604      	mov	r4, r0
 8013598:	f7fd ff96 	bl	80114c8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801359c:	4603      	mov	r3, r0
 801359e:	4619      	mov	r1, r3
 80135a0:	2300      	movs	r3, #0
 80135a2:	9300      	str	r3, [sp, #0]
 80135a4:	2300      	movs	r3, #0
 80135a6:	2200      	movs	r2, #0
 80135a8:	4620      	mov	r0, r4
 80135aa:	f007 f83f 	bl	801a62c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80135ae:	4809      	ldr	r0, [pc, #36]	; (80135d4 <touchgfx_init+0x48>)
 80135b0:	f7ff fd28 	bl	8013004 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80135b4:	2000      	movs	r0, #0
 80135b6:	f7fe f8b3 	bl	8011720 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80135ba:	4807      	ldr	r0, [pc, #28]	; (80135d8 <touchgfx_init+0x4c>)
 80135bc:	f006 ff9e 	bl	801a4fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80135c0:	f7ff feb6 	bl	8013330 <_ZN12FrontendHeap11getInstanceEv>
 80135c4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80135c6:	4805      	ldr	r0, [pc, #20]	; (80135dc <touchgfx_init+0x50>)
 80135c8:	f7fe fe00 	bl	80121cc <_ZN11TouchGFXHAL10initializeEv>
}
 80135cc:	bf00      	nop
 80135ce:	370c      	adds	r7, #12
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd90      	pop	{r4, r7, pc}
 80135d4:	2004f668 	.word	0x2004f668
 80135d8:	2002581c 	.word	0x2002581c
 80135dc:	2004f66c 	.word	0x2004f66c

080135e0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80135e0:	b480      	push	{r7}
 80135e2:	af00      	add	r7, sp, #0
}
 80135e4:	bf00      	nop
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
	...

080135f0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80135f4:	4802      	ldr	r0, [pc, #8]	; (8013600 <touchgfx_taskEntry+0x10>)
 80135f6:	f000 fe16 	bl	8014226 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80135fa:	bf00      	nop
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	2004f66c 	.word	0x2004f66c

08013604 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	4a11      	ldr	r2, [pc, #68]	; (8013654 <_ZN12FrontendHeapD1Ev+0x50>)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	601a      	str	r2, [r3, #0]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8013618:	3310      	adds	r3, #16
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe f912 	bl	8011844 <_ZN19FrontendApplicationD1Ev>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8013626:	3310      	adds	r3, #16
 8013628:	4618      	mov	r0, r3
 801362a:	f000 f827 	bl	801367c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	332c      	adds	r3, #44	; 0x2c
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f844 	bl	80136c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	3314      	adds	r3, #20
 801363c:	4618      	mov	r0, r3
 801363e:	f000 f863 	bl	8013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	f7ff fe9f 	bl	8013388 <_ZN16FrontendHeapBaseD1Ev>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	08029224 	.word	0x08029224

08013658 <_ZN12FrontendHeapD0Ev>:
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff ffcf 	bl	8013604 <_ZN12FrontendHeapD1Ev>
 8013666:	f241 2128 	movw	r1, #4648	; 0x1228
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f013 f8b2 	bl	80267d4 <_ZdlPvj>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	4618      	mov	r0, r3
 8013674:	3708      	adds	r7, #8
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
	...

0801367c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	4a05      	ldr	r2, [pc, #20]	; (801369c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4618      	mov	r0, r3
 801368e:	f000 fab9 	bl	8013c04 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4618      	mov	r0, r3
 8013696:	3708      	adds	r7, #8
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	08029238 	.word	0x08029238

080136a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff ffe7 	bl	801367c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80136ae:	215c      	movs	r1, #92	; 0x5c
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f013 f88f 	bl	80267d4 <_ZdlPvj>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	4618      	mov	r0, r3
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	4a05      	ldr	r2, [pc, #20]	; (80136e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 fa97 	bl	8013c04 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	0802926c 	.word	0x0802926c

080136e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff ffe7 	bl	80136c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136f2:	f241 0144 	movw	r1, #4164	; 0x1044
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f013 f86c 	bl	80267d4 <_ZdlPvj>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	3708      	adds	r7, #8
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
	...

08013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	4a05      	ldr	r2, [pc, #20]	; (8013728 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4618      	mov	r0, r3
 801371a:	f000 fa73 	bl	8013c04 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	080292a0 	.word	0x080292a0

0801372c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff ffe7 	bl	8013708 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801373a:	2118      	movs	r1, #24
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f013 f849 	bl	80267d4 <_ZdlPvj>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4618      	mov	r0, r3
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	4a05      	ldr	r2, [pc, #20]	; (801376c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff fca1 	bl	80130a4 <_ZN8touchgfx3LCDD1Ev>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	08029dc8 	.word	0x08029dc8

08013770 <_ZN8touchgfx8LCD16bppD0Ev>:
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff ffe7 	bl	801374c <_ZN8touchgfx8LCD16bppD1Ev>
 801377e:	2178      	movs	r1, #120	; 0x78
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f013 f827 	bl	80267d4 <_ZdlPvj>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <_Z41__static_initialization_and_destruction_0ii>:
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af02      	add	r7, sp, #8
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b01      	cmp	r3, #1
 801379e:	d118      	bne.n	80137d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d113      	bne.n	80137d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 80137aa:	4817      	ldr	r0, [pc, #92]	; (8013808 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80137ac:	f7ff fedc 	bl	8013568 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80137b0:	4816      	ldr	r0, [pc, #88]	; (801380c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80137b2:	f7ff f89b 	bl	80128ec <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80137b6:	4816      	ldr	r0, [pc, #88]	; (8013810 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80137b8:	f00a f838 	bl	801d82c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 80137bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80137c0:	9301      	str	r3, [sp, #4]
 80137c2:	23f0      	movs	r3, #240	; 0xf0
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	4b10      	ldr	r3, [pc, #64]	; (8013808 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80137c8:	4a11      	ldr	r2, [pc, #68]	; (8013810 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80137ca:	4910      	ldr	r1, [pc, #64]	; (801380c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80137cc:	4811      	ldr	r0, [pc, #68]	; (8013814 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80137ce:	f7ff fe9f 	bl	8013510 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d113      	bne.n	8013800 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137de:	4293      	cmp	r3, r2
 80137e0:	d10e      	bne.n	8013800 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80137e2:	480c      	ldr	r0, [pc, #48]	; (8013814 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80137e4:	f7fe fe16 	bl	8012414 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80137e8:	480b      	ldr	r0, [pc, #44]	; (8013818 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80137ea:	f7fa fa3b 	bl	800dc64 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80137ee:	4808      	ldr	r0, [pc, #32]	; (8013810 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80137f0:	f7ff ffac 	bl	801374c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80137f4:	4805      	ldr	r0, [pc, #20]	; (801380c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80137f6:	f7ff f8a3 	bl	8012940 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80137fa:	4803      	ldr	r0, [pc, #12]	; (8013808 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80137fc:	f7fe faa2 	bl	8011d44 <_ZN20STM32TouchControllerD1Ev>
}
 8013800:	bf00      	nop
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	2004e84c 	.word	0x2004e84c
 801380c:	2004e850 	.word	0x2004e850
 8013810:	2004f5f0 	.word	0x2004f5f0
 8013814:	2004f66c 	.word	0x2004f66c
 8013818:	2002581c 	.word	0x2002581c

0801381c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013824:	2301      	movs	r3, #1
    }
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013832:	b480      	push	{r7}
 8013834:	b083      	sub	sp, #12
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801383a:	2354      	movs	r3, #84	; 0x54
    }
 801383c:	4618      	mov	r0, r3
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	460b      	mov	r3, r1
 8013852:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013854:	887b      	ldrh	r3, [r7, #2]
 8013856:	2254      	movs	r2, #84	; 0x54
 8013858:	fb02 f303 	mul.w	r3, r2, r3
 801385c:	3308      	adds	r3, #8
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	4413      	add	r3, r2
    }
 8013862:	4618      	mov	r0, r3
 8013864:	370c      	adds	r7, #12
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr

0801386e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801386e:	b480      	push	{r7}
 8013870:	b083      	sub	sp, #12
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
 8013876:	460b      	mov	r3, r1
 8013878:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801387a:	887b      	ldrh	r3, [r7, #2]
 801387c:	2254      	movs	r2, #84	; 0x54
 801387e:	fb02 f303 	mul.w	r3, r2, r3
 8013882:	3308      	adds	r3, #8
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	4413      	add	r3, r2
    }
 8013888:	4618      	mov	r0, r3
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801389c:	2301      	movs	r3, #1
    }
 801389e:	4618      	mov	r0, r3
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr

080138aa <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80138b2:	f241 033c 	movw	r3, #4156	; 0x103c
    }
 80138b6:	4618      	mov	r0, r3
 80138b8:	370c      	adds	r7, #12
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80138c2:	b480      	push	{r7}
 80138c4:	b083      	sub	sp, #12
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	460b      	mov	r3, r1
 80138cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138ce:	887b      	ldrh	r3, [r7, #2]
 80138d0:	f241 023c 	movw	r2, #4156	; 0x103c
 80138d4:	fb02 f303 	mul.w	r3, r2, r3
 80138d8:	3308      	adds	r3, #8
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	4413      	add	r3, r2
    }
 80138de:	4618      	mov	r0, r3
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80138ea:	b480      	push	{r7}
 80138ec:	b083      	sub	sp, #12
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
 80138f2:	460b      	mov	r3, r1
 80138f4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138f6:	887b      	ldrh	r3, [r7, #2]
 80138f8:	f241 023c 	movw	r2, #4156	; 0x103c
 80138fc:	fb02 f303 	mul.w	r3, r2, r3
 8013900:	3308      	adds	r3, #8
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	4413      	add	r3, r2
    }
 8013906:	4618      	mov	r0, r3
 8013908:	370c      	adds	r7, #12
 801390a:	46bd      	mov	sp, r7
 801390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013910:	4770      	bx	lr

08013912 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013912:	b480      	push	{r7}
 8013914:	b083      	sub	sp, #12
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801391a:	2301      	movs	r3, #1
    }
 801391c:	4618      	mov	r0, r3
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013930:	2310      	movs	r3, #16
    }
 8013932:	4618      	mov	r0, r3
 8013934:	370c      	adds	r7, #12
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr

0801393e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801393e:	b480      	push	{r7}
 8013940:	b083      	sub	sp, #12
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
 8013946:	460b      	mov	r3, r1
 8013948:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801394a:	887b      	ldrh	r3, [r7, #2]
 801394c:	011b      	lsls	r3, r3, #4
 801394e:	3308      	adds	r3, #8
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	4413      	add	r3, r2
    }
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	460b      	mov	r3, r1
 801396a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801396c:	887b      	ldrh	r3, [r7, #2]
 801396e:	011b      	lsls	r3, r3, #4
 8013970:	3308      	adds	r3, #8
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	4413      	add	r3, r2
    }
 8013976:	4618      	mov	r0, r3
 8013978:	370c      	adds	r7, #12
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <_GLOBAL__sub_I_touchgfx_init>:
 8013982:	b580      	push	{r7, lr}
 8013984:	af00      	add	r7, sp, #0
 8013986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801398a:	2001      	movs	r0, #1
 801398c:	f7ff ff00 	bl	8013790 <_Z41__static_initialization_and_destruction_0ii>
 8013990:	bd80      	pop	{r7, pc}

08013992 <_GLOBAL__sub_D_touchgfx_init>:
 8013992:	b580      	push	{r7, lr}
 8013994:	af00      	add	r7, sp, #0
 8013996:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801399a:	2000      	movs	r0, #0
 801399c:	f7ff fef8 	bl	8013790 <_Z41__static_initialization_and_destruction_0ii>
 80139a0:	bd80      	pop	{r7, pc}
	...

080139a4 <__NVIC_EnableIRQ>:
{
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	4603      	mov	r3, r0
 80139ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	db0b      	blt.n	80139ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	f003 021f 	and.w	r2, r3, #31
 80139bc:	4907      	ldr	r1, [pc, #28]	; (80139dc <__NVIC_EnableIRQ+0x38>)
 80139be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139c2:	095b      	lsrs	r3, r3, #5
 80139c4:	2001      	movs	r0, #1
 80139c6:	fa00 f202 	lsl.w	r2, r0, r2
 80139ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80139ce:	bf00      	nop
 80139d0:	370c      	adds	r7, #12
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop
 80139dc:	e000e100 	.word	0xe000e100

080139e0 <__NVIC_DisableIRQ>:
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	4603      	mov	r3, r0
 80139e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	db12      	blt.n	8013a18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80139f2:	79fb      	ldrb	r3, [r7, #7]
 80139f4:	f003 021f 	and.w	r2, r3, #31
 80139f8:	490a      	ldr	r1, [pc, #40]	; (8013a24 <__NVIC_DisableIRQ+0x44>)
 80139fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139fe:	095b      	lsrs	r3, r3, #5
 8013a00:	2001      	movs	r0, #1
 8013a02:	fa00 f202 	lsl.w	r2, r0, r2
 8013a06:	3320      	adds	r3, #32
 8013a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a0c:	f3bf 8f4f 	dsb	sy
}
 8013a10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013a12:	f3bf 8f6f 	isb	sy
}
 8013a16:	bf00      	nop
}
 8013a18:	bf00      	nop
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr
 8013a24:	e000e100 	.word	0xe000e100

08013a28 <__NVIC_SetPriority>:
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b083      	sub	sp, #12
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	4603      	mov	r3, r0
 8013a30:	6039      	str	r1, [r7, #0]
 8013a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	db0a      	blt.n	8013a52 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	b2da      	uxtb	r2, r3
 8013a40:	490c      	ldr	r1, [pc, #48]	; (8013a74 <__NVIC_SetPriority+0x4c>)
 8013a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a46:	0112      	lsls	r2, r2, #4
 8013a48:	b2d2      	uxtb	r2, r2
 8013a4a:	440b      	add	r3, r1
 8013a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013a50:	e00a      	b.n	8013a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	b2da      	uxtb	r2, r3
 8013a56:	4908      	ldr	r1, [pc, #32]	; (8013a78 <__NVIC_SetPriority+0x50>)
 8013a58:	79fb      	ldrb	r3, [r7, #7]
 8013a5a:	f003 030f 	and.w	r3, r3, #15
 8013a5e:	3b04      	subs	r3, #4
 8013a60:	0112      	lsls	r2, r2, #4
 8013a62:	b2d2      	uxtb	r2, r2
 8013a64:	440b      	add	r3, r1
 8013a66:	761a      	strb	r2, [r3, #24]
}
 8013a68:	bf00      	nop
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr
 8013a74:	e000e100 	.word	0xe000e100
 8013a78:	e000ed00 	.word	0xe000ed00

08013a7c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8013a7c:	b5b0      	push	{r4, r5, r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	4618      	mov	r0, r3
 8013a88:	f000 fbbb 	bl	8014202 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8013a8c:	687d      	ldr	r5, [r7, #4]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	3364      	adds	r3, #100	; 0x64
 8013a94:	681c      	ldr	r4, [r3, #0]
 8013a96:	f004 f995 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	4628      	mov	r0, r5
 8013aa0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	3388      	adds	r3, #136	; 0x88
 8013aaa:	681c      	ldr	r4, [r3, #0]
 8013aac:	2300      	movs	r3, #0
 8013aae:	2200      	movs	r2, #0
 8013ab0:	4902      	ldr	r1, [pc, #8]	; (8013abc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8013ab2:	47a0      	blx	r4
}
 8013ab4:	bf00      	nop
 8013ab6:	3708      	adds	r7, #8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bdb0      	pop	{r4, r5, r7, pc}
 8013abc:	20025900 	.word	0x20025900

08013ac0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013ac8:	2109      	movs	r1, #9
 8013aca:	2076      	movs	r0, #118	; 0x76
 8013acc:	f7ff ffac 	bl	8013a28 <__NVIC_SetPriority>
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013ae0:	2076      	movs	r0, #118	; 0x76
 8013ae2:	f7ff ff5f 	bl	80139a4 <__NVIC_EnableIRQ>
}
 8013ae6:	bf00      	nop
 8013ae8:	3708      	adds	r7, #8
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}

08013aee <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b082      	sub	sp, #8
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013af6:	2076      	movs	r0, #118	; 0x76
 8013af8:	f7ff ff72 	bl	80139e0 <__NVIC_DisableIRQ>
}
 8013afc:	bf00      	nop
 8013afe:	3708      	adds	r7, #8
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
}
 8013b0c:	bf00      	nop
 8013b0e:	370c      	adds	r7, #12
 8013b10:	46bd      	mov	sp, r7
 8013b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b16:	4770      	bx	lr

08013b18 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4618      	mov	r0, r3
 8013b24:	f000 fb54 	bl	80141d0 <_ZN8touchgfx3HAL10beginFrameEv>
 8013b28:	4603      	mov	r3, r0
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b082      	sub	sp, #8
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f000 fb53 	bl	80141e8 <_ZN8touchgfx3HAL8endFrameEv>
}
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
	...

08013b4c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8013b54:	4b03      	ldr	r3, [pc, #12]	; (8013b64 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	370c      	adds	r7, #12
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	20025900 	.word	0x20025900

08013b68 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8013b72:	bf00      	nop
 8013b74:	370c      	adds	r7, #12
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr

08013b7e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b082      	sub	sp, #8
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6839      	ldr	r1, [r7, #0]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f000 fae9 	bl	8014164 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013b92:	bf00      	nop
 8013b94:	3708      	adds	r7, #8
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b084      	sub	sp, #16
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	60f8      	str	r0, [r7, #12]
 8013ba2:	60b9      	str	r1, [r7, #8]
 8013ba4:	607a      	str	r2, [r7, #4]
 8013ba6:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	68b9      	ldr	r1, [r7, #8]
 8013bb0:	f000 fc41 	bl	8014436 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013bb4:	4603      	mov	r3, r0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3710      	adds	r7, #16
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}

08013bbe <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013bbe:	8880      	ldrh	r0, [r0, #4]
 8013bc0:	4770      	bx	lr

08013bc2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013bc2:	b570      	push	{r4, r5, r6, lr}
 8013bc4:	6803      	ldr	r3, [r0, #0]
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	460c      	mov	r4, r1
 8013bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bcc:	2100      	movs	r1, #0
 8013bce:	4798      	blx	r3
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	4606      	mov	r6, r0
 8013bd4:	6a1b      	ldr	r3, [r3, #32]
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	4798      	blx	r3
 8013bda:	1ba4      	subs	r4, r4, r6
 8013bdc:	b2a4      	uxth	r4, r4
 8013bde:	fbb4 f0f0 	udiv	r0, r4, r0
 8013be2:	bd70      	pop	{r4, r5, r6, pc}

08013be4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013be4:	2300      	movs	r3, #0
 8013be6:	8083      	strh	r3, [r0, #4]
 8013be8:	4770      	bx	lr

08013bea <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013bea:	b510      	push	{r4, lr}
 8013bec:	4604      	mov	r4, r0
 8013bee:	6803      	ldr	r3, [r0, #0]
 8013bf0:	8881      	ldrh	r1, [r0, #4]
 8013bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf4:	4798      	blx	r3
 8013bf6:	88a3      	ldrh	r3, [r4, #4]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	80a3      	strh	r3, [r4, #4]
 8013bfc:	bd10      	pop	{r4, pc}

08013bfe <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013bfe:	6803      	ldr	r3, [r0, #0]
 8013c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c02:	4718      	bx	r3

08013c04 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013c04:	4770      	bx	lr
	...

08013c08 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013c08:	4a02      	ldr	r2, [pc, #8]	; (8013c14 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013c0a:	6002      	str	r2, [r0, #0]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	8082      	strh	r2, [r0, #4]
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop
 8013c14:	080293d0 	.word	0x080293d0

08013c18 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013c18:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013c1a:	4770      	bx	lr

08013c1c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c1e:	2000      	movs	r0, #0
 8013c20:	b12b      	cbz	r3, 8013c2e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013c22:	b920      	cbnz	r0, 8013c2e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013c24:	1a5a      	subs	r2, r3, r1
 8013c26:	4250      	negs	r0, r2
 8013c28:	4150      	adcs	r0, r2
 8013c2a:	699b      	ldr	r3, [r3, #24]
 8013c2c:	e7f8      	b.n	8013c20 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013c2e:	4770      	bx	lr

08013c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013c30:	2300      	movs	r3, #0
 8013c32:	6148      	str	r0, [r1, #20]
 8013c34:	618b      	str	r3, [r1, #24]
 8013c36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c38:	b913      	cbnz	r3, 8013c40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013c3a:	6281      	str	r1, [r0, #40]	; 0x28
 8013c3c:	4770      	bx	lr
 8013c3e:	4613      	mov	r3, r2
 8013c40:	699a      	ldr	r2, [r3, #24]
 8013c42:	2a00      	cmp	r2, #0
 8013c44:	d1fb      	bne.n	8013c3e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013c46:	6199      	str	r1, [r3, #24]
 8013c48:	4770      	bx	lr

08013c4a <_ZN8touchgfx9Container9removeAllEv>:
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c4e:	b123      	cbz	r3, 8013c5a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013c50:	6999      	ldr	r1, [r3, #24]
 8013c52:	6281      	str	r1, [r0, #40]	; 0x28
 8013c54:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013c58:	e7f8      	b.n	8013c4c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013c5a:	4770      	bx	lr

08013c5c <_ZN8touchgfx9Container6unlinkEv>:
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	6283      	str	r3, [r0, #40]	; 0x28
 8013c60:	4770      	bx	lr

08013c62 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013c62:	2200      	movs	r2, #0
 8013c64:	8002      	strh	r2, [r0, #0]
 8013c66:	8042      	strh	r2, [r0, #2]
 8013c68:	8082      	strh	r2, [r0, #4]
 8013c6a:	80c2      	strh	r2, [r0, #6]
 8013c6c:	4770      	bx	lr

08013c6e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013c6e:	b570      	push	{r4, r5, r6, lr}
 8013c70:	460d      	mov	r5, r1
 8013c72:	4616      	mov	r6, r2
 8013c74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c76:	b13c      	cbz	r4, 8013c88 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013c78:	6823      	ldr	r3, [r4, #0]
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c7e:	4632      	mov	r2, r6
 8013c80:	4629      	mov	r1, r5
 8013c82:	4798      	blx	r3
 8013c84:	69a4      	ldr	r4, [r4, #24]
 8013c86:	e7f6      	b.n	8013c76 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013c88:	bd70      	pop	{r4, r5, r6, pc}

08013c8a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013c8a:	b538      	push	{r3, r4, r5, lr}
 8013c8c:	460d      	mov	r5, r1
 8013c8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c90:	b134      	cbz	r4, 8013ca0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013c92:	682b      	ldr	r3, [r5, #0]
 8013c94:	4621      	mov	r1, r4
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	4628      	mov	r0, r5
 8013c9a:	4798      	blx	r3
 8013c9c:	69a4      	ldr	r4, [r4, #24]
 8013c9e:	e7f7      	b.n	8013c90 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013ca0:	bd38      	pop	{r3, r4, r5, pc}

08013ca2 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013ca6:	b12c      	cbz	r4, 8013cb4 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013ca8:	6823      	ldr	r3, [r4, #0]
 8013caa:	4620      	mov	r0, r4
 8013cac:	699b      	ldr	r3, [r3, #24]
 8013cae:	4798      	blx	r3
 8013cb0:	69a4      	ldr	r4, [r4, #24]
 8013cb2:	e7f8      	b.n	8013ca6 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013cb4:	bd10      	pop	{r4, pc}

08013cb6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013cb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013cb8:	b19b      	cbz	r3, 8013ce2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013cba:	428b      	cmp	r3, r1
 8013cbc:	d109      	bne.n	8013cd2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	699a      	ldr	r2, [r3, #24]
 8013cc2:	6159      	str	r1, [r3, #20]
 8013cc4:	6282      	str	r2, [r0, #40]	; 0x28
 8013cc6:	b902      	cbnz	r2, 8013cca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013cc8:	4770      	bx	lr
 8013cca:	6199      	str	r1, [r3, #24]
 8013ccc:	4770      	bx	lr
 8013cce:	4613      	mov	r3, r2
 8013cd0:	b13a      	cbz	r2, 8013ce2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013cd2:	699a      	ldr	r2, [r3, #24]
 8013cd4:	428a      	cmp	r2, r1
 8013cd6:	d1fa      	bne.n	8013cce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013cd8:	698a      	ldr	r2, [r1, #24]
 8013cda:	619a      	str	r2, [r3, #24]
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013ce2:	4770      	bx	lr

08013ce4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013ce4:	b410      	push	{r4}
 8013ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013ce8:	4604      	mov	r4, r0
 8013cea:	b92b      	cbnz	r3, 8013cf8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013cec:	6803      	ldr	r3, [r0, #0]
 8013cee:	4611      	mov	r1, r2
 8013cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cf6:	4718      	bx	r3
 8013cf8:	b941      	cbnz	r1, 8013d0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013cfa:	6193      	str	r3, [r2, #24]
 8013cfc:	6282      	str	r2, [r0, #40]	; 0x28
 8013cfe:	6154      	str	r4, [r2, #20]
 8013d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d04:	4770      	bx	lr
 8013d06:	4603      	mov	r3, r0
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d0f9      	beq.n	8013d00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013d0c:	4299      	cmp	r1, r3
 8013d0e:	6998      	ldr	r0, [r3, #24]
 8013d10:	d1f9      	bne.n	8013d06 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013d12:	6190      	str	r0, [r2, #24]
 8013d14:	618a      	str	r2, [r1, #24]
 8013d16:	e7f2      	b.n	8013cfe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013d18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1c:	461f      	mov	r7, r3
 8013d1e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013d22:	460d      	mov	r5, r1
 8013d24:	4616      	mov	r6, r2
 8013d26:	b103      	cbz	r3, 8013d2a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013d28:	6038      	str	r0, [r7, #0]
 8013d2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d2c:	b314      	cbz	r4, 8013d74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013d2e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013d32:	b1eb      	cbz	r3, 8013d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013d38:	428d      	cmp	r5, r1
 8013d3a:	db19      	blt.n	8013d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d3c:	8923      	ldrh	r3, [r4, #8]
 8013d3e:	b289      	uxth	r1, r1
 8013d40:	440b      	add	r3, r1
 8013d42:	b21b      	sxth	r3, r3
 8013d44:	429d      	cmp	r5, r3
 8013d46:	da13      	bge.n	8013d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d48:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013d4c:	4296      	cmp	r6, r2
 8013d4e:	db0f      	blt.n	8013d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d50:	8963      	ldrh	r3, [r4, #10]
 8013d52:	b292      	uxth	r2, r2
 8013d54:	4413      	add	r3, r2
 8013d56:	b21b      	sxth	r3, r3
 8013d58:	429e      	cmp	r6, r3
 8013d5a:	da09      	bge.n	8013d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	1ab2      	subs	r2, r6, r2
 8013d60:	1a69      	subs	r1, r5, r1
 8013d62:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8013d66:	b212      	sxth	r2, r2
 8013d68:	463b      	mov	r3, r7
 8013d6a:	b209      	sxth	r1, r1
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	47c0      	blx	r8
 8013d70:	69a4      	ldr	r4, [r4, #24]
 8013d72:	e7db      	b.n	8013d2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d7c:	4c6c      	ldr	r4, [pc, #432]	; (8013f30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8013d7e:	b0a1      	sub	sp, #132	; 0x84
 8013d80:	6824      	ldr	r4, [r4, #0]
 8013d82:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013d84:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013d88:	2400      	movs	r4, #0
 8013d8a:	802c      	strh	r4, [r5, #0]
 8013d8c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013d8e:	4606      	mov	r6, r0
 8013d90:	802c      	strh	r4, [r5, #0]
 8013d92:	601c      	str	r4, [r3, #0]
 8013d94:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013d98:	9303      	str	r3, [sp, #12]
 8013d9a:	f7ff ffbd 	bl	8013d18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013d9e:	f1b9 0f03 	cmp.w	r9, #3
 8013da2:	f340 80bf 	ble.w	8013f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8013da6:	4631      	mov	r1, r6
 8013da8:	a80c      	add	r0, sp, #48	; 0x30
 8013daa:	f005 f83d 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013dae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013db2:	9306      	str	r3, [sp, #24]
 8013db4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013db8:	9307      	str	r3, [sp, #28]
 8013dba:	9b03      	ldr	r3, [sp, #12]
 8013dbc:	f8d3 a000 	ldr.w	sl, [r3]
 8013dc0:	f1ba 0f00 	cmp.w	sl, #0
 8013dc4:	f000 80b1 	beq.w	8013f2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8013dc8:	4651      	mov	r1, sl
 8013dca:	a810      	add	r0, sp, #64	; 0x40
 8013dcc:	f005 f82c 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013dd0:	2002      	movs	r0, #2
 8013dd2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013dd6:	9b01      	ldr	r3, [sp, #4]
 8013dd8:	fb91 f1f0 	sdiv	r1, r1, r0
 8013ddc:	9a06      	ldr	r2, [sp, #24]
 8013dde:	189d      	adds	r5, r3, r2
 8013de0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013de4:	9a07      	ldr	r2, [sp, #28]
 8013de6:	4419      	add	r1, r3
 8013de8:	9b02      	ldr	r3, [sp, #8]
 8013dea:	1a6d      	subs	r5, r5, r1
 8013dec:	4413      	add	r3, r2
 8013dee:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013df2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013df6:	fb92 f2f0 	sdiv	r2, r2, r0
 8013dfa:	440a      	add	r2, r1
 8013dfc:	1a9b      	subs	r3, r3, r2
 8013dfe:	435b      	muls	r3, r3
 8013e00:	fb05 3505 	mla	r5, r5, r5, r3
 8013e04:	4f4b      	ldr	r7, [pc, #300]	; (8013f34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013e06:	ac10      	add	r4, sp, #64	; 0x40
 8013e08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e14:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013e1c:	2303      	movs	r3, #3
 8013e1e:	f1b9 0f0c 	cmp.w	r9, #12
 8013e22:	bfda      	itte	le
 8013e24:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013e28:	fb92 f8f3 	sdivle	r8, r2, r3
 8013e2c:	4698      	movgt	r8, r3
 8013e2e:	2400      	movs	r4, #0
 8013e30:	f8cd 9000 	str.w	r9, [sp]
 8013e34:	1c63      	adds	r3, r4, #1
 8013e36:	9308      	str	r3, [sp, #32]
 8013e38:	9b00      	ldr	r3, [sp, #0]
 8013e3a:	f04f 0b00 	mov.w	fp, #0
 8013e3e:	fb93 f3f8 	sdiv	r3, r3, r8
 8013e42:	f004 0401 	and.w	r4, r4, #1
 8013e46:	aa10      	add	r2, sp, #64	; 0x40
 8013e48:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	3404      	adds	r4, #4
 8013e50:	9304      	str	r3, [sp, #16]
 8013e52:	9a04      	ldr	r2, [sp, #16]
 8013e54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013e58:	fb13 f302 	smulbb	r3, r3, r2
 8013e5c:	9a01      	ldr	r2, [sp, #4]
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	1899      	adds	r1, r3, r2
 8013e62:	9305      	str	r3, [sp, #20]
 8013e64:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013e68:	b209      	sxth	r1, r1
 8013e6a:	4299      	cmp	r1, r3
 8013e6c:	db4d      	blt.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013e6e:	8932      	ldrh	r2, [r6, #8]
 8013e70:	4413      	add	r3, r2
 8013e72:	b21b      	sxth	r3, r3
 8013e74:	4299      	cmp	r1, r3
 8013e76:	da48      	bge.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013e78:	9b04      	ldr	r3, [sp, #16]
 8013e7a:	6827      	ldr	r7, [r4, #0]
 8013e7c:	fb17 f703 	smulbb	r7, r7, r3
 8013e80:	9b02      	ldr	r3, [sp, #8]
 8013e82:	b2bf      	uxth	r7, r7
 8013e84:	18fa      	adds	r2, r7, r3
 8013e86:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013e8a:	b212      	sxth	r2, r2
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	db3c      	blt.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013e90:	8970      	ldrh	r0, [r6, #10]
 8013e92:	4403      	add	r3, r0
 8013e94:	b21b      	sxth	r3, r3
 8013e96:	429a      	cmp	r2, r3
 8013e98:	da37      	bge.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ea0:	ab0b      	add	r3, sp, #44	; 0x2c
 8013ea2:	f7ff ff39 	bl	8013d18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013ea8:	b37a      	cbz	r2, 8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013eaa:	4552      	cmp	r2, sl
 8013eac:	d02d      	beq.n	8013f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8013eae:	4611      	mov	r1, r2
 8013eb0:	a80e      	add	r0, sp, #56	; 0x38
 8013eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8013eb4:	f004 ffb8 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013eb8:	f04f 0e02 	mov.w	lr, #2
 8013ebc:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013ec0:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013ec4:	fb91 f1fe 	sdiv	r1, r1, lr
 8013ec8:	fb9c fcfe 	sdiv	ip, ip, lr
 8013ecc:	9a06      	ldr	r2, [sp, #24]
 8013ece:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013ed2:	9b01      	ldr	r3, [sp, #4]
 8013ed4:	4401      	add	r1, r0
 8013ed6:	4413      	add	r3, r2
 8013ed8:	1a58      	subs	r0, r3, r1
 8013eda:	9a07      	ldr	r2, [sp, #28]
 8013edc:	9b02      	ldr	r3, [sp, #8]
 8013ede:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013ee2:	4413      	add	r3, r2
 8013ee4:	448c      	add	ip, r1
 8013ee6:	eba3 030c 	sub.w	r3, r3, ip
 8013eea:	435b      	muls	r3, r3
 8013eec:	fb00 3300 	mla	r3, r0, r0, r3
 8013ef0:	42ab      	cmp	r3, r5
 8013ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ef4:	d208      	bcs.n	8013f08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013ef6:	461d      	mov	r5, r3
 8013ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013efa:	9803      	ldr	r0, [sp, #12]
 8013efc:	6001      	str	r1, [r0, #0]
 8013efe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013f00:	9805      	ldr	r0, [sp, #20]
 8013f02:	8008      	strh	r0, [r1, #0]
 8013f04:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013f06:	800f      	strh	r7, [r1, #0]
 8013f08:	4692      	mov	sl, r2
 8013f0a:	f10b 0b01 	add.w	fp, fp, #1
 8013f0e:	f1bb 0f04 	cmp.w	fp, #4
 8013f12:	f104 0408 	add.w	r4, r4, #8
 8013f16:	d19c      	bne.n	8013e52 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013f18:	9b00      	ldr	r3, [sp, #0]
 8013f1a:	9c08      	ldr	r4, [sp, #32]
 8013f1c:	444b      	add	r3, r9
 8013f1e:	4544      	cmp	r4, r8
 8013f20:	9300      	str	r3, [sp, #0]
 8013f22:	d187      	bne.n	8013e34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013f24:	b021      	add	sp, #132	; 0x84
 8013f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f2a:	f04f 35ff 	mov.w	r5, #4294967295
 8013f2e:	e769      	b.n	8013e04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013f30:	2004f6f4 	.word	0x2004f6f4
 8013f34:	08028908 	.word	0x08028908

08013f38 <_ZN8touchgfx4RectaNERKS0_>:
 8013f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f3c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013f40:	888c      	ldrh	r4, [r1, #4]
 8013f42:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013f46:	443c      	add	r4, r7
 8013f48:	b2a4      	uxth	r4, r4
 8013f4a:	fa0f f884 	sxth.w	r8, r4
 8013f4e:	45c1      	cmp	r9, r8
 8013f50:	da2f      	bge.n	8013fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f52:	8882      	ldrh	r2, [r0, #4]
 8013f54:	444a      	add	r2, r9
 8013f56:	b292      	uxth	r2, r2
 8013f58:	fa0f fe82 	sxth.w	lr, r2
 8013f5c:	4577      	cmp	r7, lr
 8013f5e:	da28      	bge.n	8013fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f60:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013f64:	88cb      	ldrh	r3, [r1, #6]
 8013f66:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013f6a:	442b      	add	r3, r5
 8013f6c:	b21b      	sxth	r3, r3
 8013f6e:	429e      	cmp	r6, r3
 8013f70:	da1f      	bge.n	8013fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f72:	88c3      	ldrh	r3, [r0, #6]
 8013f74:	4433      	add	r3, r6
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	fa0f fc83 	sxth.w	ip, r3
 8013f7c:	4565      	cmp	r5, ip
 8013f7e:	da18      	bge.n	8013fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f80:	454f      	cmp	r7, r9
 8013f82:	bfb8      	it	lt
 8013f84:	464f      	movlt	r7, r9
 8013f86:	42b5      	cmp	r5, r6
 8013f88:	bfb8      	it	lt
 8013f8a:	4635      	movlt	r5, r6
 8013f8c:	45f0      	cmp	r8, lr
 8013f8e:	bfd8      	it	le
 8013f90:	4622      	movle	r2, r4
 8013f92:	1bd2      	subs	r2, r2, r7
 8013f94:	8082      	strh	r2, [r0, #4]
 8013f96:	884a      	ldrh	r2, [r1, #2]
 8013f98:	88c9      	ldrh	r1, [r1, #6]
 8013f9a:	8007      	strh	r7, [r0, #0]
 8013f9c:	440a      	add	r2, r1
 8013f9e:	b292      	uxth	r2, r2
 8013fa0:	b211      	sxth	r1, r2
 8013fa2:	458c      	cmp	ip, r1
 8013fa4:	bfa8      	it	ge
 8013fa6:	4613      	movge	r3, r2
 8013fa8:	1b5b      	subs	r3, r3, r5
 8013faa:	80c3      	strh	r3, [r0, #6]
 8013fac:	8045      	strh	r5, [r0, #2]
 8013fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	8003      	strh	r3, [r0, #0]
 8013fb6:	8043      	strh	r3, [r0, #2]
 8013fb8:	8083      	strh	r3, [r0, #4]
 8013fba:	80c3      	strh	r3, [r0, #6]
 8013fbc:	e7f7      	b.n	8013fae <_ZN8touchgfx4RectaNERKS0_+0x76>

08013fbe <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013fbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	dd06      	ble.n	8013fd4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013fc6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	bfcc      	ite	gt
 8013fce:	2000      	movgt	r0, #0
 8013fd0:	2001      	movle	r0, #1
 8013fd2:	4770      	bx	lr
 8013fd4:	2001      	movs	r0, #1
 8013fd6:	4770      	bx	lr

08013fd8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013fd8:	2300      	movs	r3, #0
 8013fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fde:	4604      	mov	r4, r0
 8013fe0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013fe2:	8003      	strh	r3, [r0, #0]
 8013fe4:	8043      	strh	r3, [r0, #2]
 8013fe6:	8083      	strh	r3, [r0, #4]
 8013fe8:	80c3      	strh	r3, [r0, #6]
 8013fea:	2d00      	cmp	r5, #0
 8013fec:	d040      	beq.n	8014070 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013fee:	1d28      	adds	r0, r5, #4
 8013ff0:	f7ff ffe5 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ff4:	b988      	cbnz	r0, 801401a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7ff ffe1 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ffc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014000:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014004:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014008:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801400c:	b138      	cbz	r0, 801401e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801400e:	8022      	strh	r2, [r4, #0]
 8014010:	8063      	strh	r3, [r4, #2]
 8014012:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014016:	f8a4 c006 	strh.w	ip, [r4, #6]
 801401a:	69ad      	ldr	r5, [r5, #24]
 801401c:	e7e5      	b.n	8013fea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801401e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014022:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014026:	4290      	cmp	r0, r2
 8014028:	4607      	mov	r7, r0
 801402a:	bfa8      	it	ge
 801402c:	4617      	movge	r7, r2
 801402e:	4299      	cmp	r1, r3
 8014030:	460e      	mov	r6, r1
 8014032:	bfa8      	it	ge
 8014034:	461e      	movge	r6, r3
 8014036:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801403a:	4472      	add	r2, lr
 801403c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014040:	4440      	add	r0, r8
 8014042:	4471      	add	r1, lr
 8014044:	4463      	add	r3, ip
 8014046:	b200      	sxth	r0, r0
 8014048:	b212      	sxth	r2, r2
 801404a:	b209      	sxth	r1, r1
 801404c:	b21b      	sxth	r3, r3
 801404e:	4290      	cmp	r0, r2
 8014050:	bfac      	ite	ge
 8014052:	ebc7 0200 	rsbge	r2, r7, r0
 8014056:	ebc7 0202 	rsblt	r2, r7, r2
 801405a:	4299      	cmp	r1, r3
 801405c:	bfac      	ite	ge
 801405e:	ebc6 0301 	rsbge	r3, r6, r1
 8014062:	ebc6 0303 	rsblt	r3, r6, r3
 8014066:	8027      	strh	r7, [r4, #0]
 8014068:	8066      	strh	r6, [r4, #2]
 801406a:	80a2      	strh	r2, [r4, #4]
 801406c:	80e3      	strh	r3, [r4, #6]
 801406e:	e7d4      	b.n	801401a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014070:	4620      	mov	r0, r4
 8014072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801407a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801407e:	b383      	cbz	r3, 80140e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014080:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014082:	b374      	cbz	r4, 80140e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014084:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014088:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801408c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014090:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014094:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014098:	b303      	cbz	r3, 80140dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801409a:	4668      	mov	r0, sp
 801409c:	1d21      	adds	r1, r4, #4
 801409e:	f8ad 5000 	strh.w	r5, [sp]
 80140a2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80140a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80140aa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80140ae:	f7ff ff43 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 80140b2:	4668      	mov	r0, sp
 80140b4:	f7ff ff83 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80140b8:	b980      	cbnz	r0, 80140dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80140ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80140be:	88a2      	ldrh	r2, [r4, #4]
 80140c0:	4669      	mov	r1, sp
 80140c2:	1a9b      	subs	r3, r3, r2
 80140c4:	f8ad 3000 	strh.w	r3, [sp]
 80140c8:	88e2      	ldrh	r2, [r4, #6]
 80140ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80140ce:	4620      	mov	r0, r4
 80140d0:	1a9b      	subs	r3, r3, r2
 80140d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	4798      	blx	r3
 80140dc:	69a4      	ldr	r4, [r4, #24]
 80140de:	2c00      	cmp	r4, #0
 80140e0:	d1d8      	bne.n	8014094 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80140e2:	b002      	add	sp, #8
 80140e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80140e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80140ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80140ee:	460d      	mov	r5, r1
 80140f0:	4616      	mov	r6, r2
 80140f2:	b323      	cbz	r3, 801413e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80140f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80140f6:	b314      	cbz	r4, 801413e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80140f8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80140fc:	b1eb      	cbz	r3, 801413a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80140fe:	466b      	mov	r3, sp
 8014100:	6828      	ldr	r0, [r5, #0]
 8014102:	6869      	ldr	r1, [r5, #4]
 8014104:	c303      	stmia	r3!, {r0, r1}
 8014106:	4668      	mov	r0, sp
 8014108:	1d21      	adds	r1, r4, #4
 801410a:	f7ff ff15 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801410e:	4668      	mov	r0, sp
 8014110:	f7ff ff55 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8014114:	b988      	cbnz	r0, 801413a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014116:	f8bd 3000 	ldrh.w	r3, [sp]
 801411a:	88a2      	ldrh	r2, [r4, #4]
 801411c:	4669      	mov	r1, sp
 801411e:	1a9b      	subs	r3, r3, r2
 8014120:	f8ad 3000 	strh.w	r3, [sp]
 8014124:	88e2      	ldrh	r2, [r4, #6]
 8014126:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801412a:	4620      	mov	r0, r4
 801412c:	1a9b      	subs	r3, r3, r2
 801412e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014132:	6823      	ldr	r3, [r4, #0]
 8014134:	4632      	mov	r2, r6
 8014136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014138:	4798      	blx	r3
 801413a:	69a4      	ldr	r4, [r4, #24]
 801413c:	e7db      	b.n	80140f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801413e:	b002      	add	sp, #8
 8014140:	bd70      	pop	{r4, r5, r6, pc}

08014142 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014142:	b513      	push	{r0, r1, r4, lr}
 8014144:	6803      	ldr	r3, [r0, #0]
 8014146:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 801414a:	2300      	movs	r3, #0
 801414c:	e9cd 3300 	strd	r3, r3, [sp]
 8014150:	466b      	mov	r3, sp
 8014152:	47a0      	blx	r4
 8014154:	b002      	add	sp, #8
 8014156:	bd10      	pop	{r4, pc}

08014158 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014158:	2301      	movs	r3, #1
 801415a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801415e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014162:	4770      	bx	lr

08014164 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014164:	2301      	movs	r3, #1
 8014166:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801416a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801416e:	4770      	bx	lr

08014170 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014170:	2201      	movs	r2, #1
 8014172:	6843      	ldr	r3, [r0, #4]
 8014174:	725a      	strb	r2, [r3, #9]
 8014176:	6840      	ldr	r0, [r0, #4]
 8014178:	6803      	ldr	r3, [r0, #0]
 801417a:	691b      	ldr	r3, [r3, #16]
 801417c:	4718      	bx	r3

0801417e <_ZN8touchgfx3HAL8flushDMAEv>:
 801417e:	6840      	ldr	r0, [r0, #4]
 8014180:	6803      	ldr	r3, [r0, #0]
 8014182:	689b      	ldr	r3, [r3, #8]
 8014184:	4718      	bx	r3

08014186 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014186:	b530      	push	{r4, r5, lr}
 8014188:	b08b      	sub	sp, #44	; 0x2c
 801418a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801418e:	6804      	ldr	r4, [r0, #0]
 8014190:	9509      	str	r5, [sp, #36]	; 0x24
 8014192:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014196:	9508      	str	r5, [sp, #32]
 8014198:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801419c:	9507      	str	r5, [sp, #28]
 801419e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80141a2:	9506      	str	r5, [sp, #24]
 80141a4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80141a8:	9505      	str	r5, [sp, #20]
 80141aa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80141ae:	9504      	str	r5, [sp, #16]
 80141b0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80141b4:	9503      	str	r5, [sp, #12]
 80141b6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80141ba:	9502      	str	r5, [sp, #8]
 80141bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80141c0:	e9cd 3500 	strd	r3, r5, [sp]
 80141c4:	4613      	mov	r3, r2
 80141c6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80141c8:	2200      	movs	r2, #0
 80141ca:	47a0      	blx	r4
 80141cc:	b00b      	add	sp, #44	; 0x2c
 80141ce:	bd30      	pop	{r4, r5, pc}

080141d0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80141d0:	4b04      	ldr	r3, [pc, #16]	; (80141e4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	b123      	cbz	r3, 80141e0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80141d6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80141da:	f080 0001 	eor.w	r0, r0, #1
 80141de:	4770      	bx	lr
 80141e0:	2001      	movs	r0, #1
 80141e2:	4770      	bx	lr
 80141e4:	2004f6f2 	.word	0x2004f6f2

080141e8 <_ZN8touchgfx3HAL8endFrameEv>:
 80141e8:	b510      	push	{r4, lr}
 80141ea:	4604      	mov	r4, r0
 80141ec:	6840      	ldr	r0, [r0, #4]
 80141ee:	6803      	ldr	r3, [r0, #0]
 80141f0:	689b      	ldr	r3, [r3, #8]
 80141f2:	4798      	blx	r3
 80141f4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80141f8:	b113      	cbz	r3, 8014200 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80141fa:	2301      	movs	r3, #1
 80141fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014200:	bd10      	pop	{r4, pc}

08014202 <_ZN8touchgfx3HAL10initializeEv>:
 8014202:	b510      	push	{r4, lr}
 8014204:	4604      	mov	r4, r0
 8014206:	f7fe f927 	bl	8012458 <_ZN8touchgfx10OSWrappers10initializeEv>
 801420a:	6860      	ldr	r0, [r4, #4]
 801420c:	6803      	ldr	r3, [r0, #0]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	4798      	blx	r3
 8014212:	68e0      	ldr	r0, [r4, #12]
 8014214:	6803      	ldr	r3, [r0, #0]
 8014216:	689b      	ldr	r3, [r3, #8]
 8014218:	4798      	blx	r3
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	4620      	mov	r0, r4
 801421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014224:	4718      	bx	r3

08014226 <_ZN8touchgfx3HAL9taskEntryEv>:
 8014226:	4604      	mov	r4, r0
 8014228:	b508      	push	{r3, lr}
 801422a:	6803      	ldr	r3, [r0, #0]
 801422c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014230:	4798      	blx	r3
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014236:	4620      	mov	r0, r4
 8014238:	4798      	blx	r3
 801423a:	f7fe fa37 	bl	80126ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801423e:	6823      	ldr	r3, [r4, #0]
 8014240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014242:	e7f8      	b.n	8014236 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014244 <_ZN8touchgfx3HAL4tickEv>:
 8014244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014246:	6803      	ldr	r3, [r0, #0]
 8014248:	4604      	mov	r4, r0
 801424a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801424e:	4798      	blx	r3
 8014250:	4d59      	ldr	r5, [pc, #356]	; (80143b8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014252:	2800      	cmp	r0, #0
 8014254:	f000 8095 	beq.w	8014382 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014258:	2600      	movs	r6, #0
 801425a:	2001      	movs	r0, #1
 801425c:	f7fd fd94 	bl	8011d88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014260:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014264:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014268:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801426c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014270:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014274:	b133      	cbz	r3, 8014284 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	4620      	mov	r0, r4
 801427a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801427e:	4798      	blx	r3
 8014280:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014284:	2601      	movs	r6, #1
 8014286:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801428a:	6862      	ldr	r2, [r4, #4]
 801428c:	f083 0301 	eor.w	r3, r3, #1
 8014290:	7253      	strb	r3, [r2, #9]
 8014292:	702e      	strb	r6, [r5, #0]
 8014294:	f003 fd96 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 8014298:	6803      	ldr	r3, [r0, #0]
 801429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801429c:	4798      	blx	r3
 801429e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80142a2:	b90b      	cbnz	r3, 80142a8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80142a4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80142a8:	f003 fd8c 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 80142ac:	6803      	ldr	r3, [r0, #0]
 80142ae:	695b      	ldr	r3, [r3, #20]
 80142b0:	4798      	blx	r3
 80142b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142b4:	6803      	ldr	r3, [r0, #0]
 80142b6:	691b      	ldr	r3, [r3, #16]
 80142b8:	4798      	blx	r3
 80142ba:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80142be:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80142c2:	3b01      	subs	r3, #1
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80142ca:	b10a      	cbz	r2, 80142d0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d1eb      	bne.n	80142a8 <_ZN8touchgfx3HAL4tickEv+0x64>
 80142d0:	4a3a      	ldr	r2, [pc, #232]	; (80143bc <_ZN8touchgfx3HAL4tickEv+0x178>)
 80142d2:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80142d6:	7813      	ldrb	r3, [r2, #0]
 80142d8:	3301      	adds	r3, #1
 80142da:	b25b      	sxtb	r3, r3
 80142dc:	4299      	cmp	r1, r3
 80142de:	7013      	strb	r3, [r2, #0]
 80142e0:	dc10      	bgt.n	8014304 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80142e2:	2300      	movs	r3, #0
 80142e4:	68e0      	ldr	r0, [r4, #12]
 80142e6:	7013      	strb	r3, [r2, #0]
 80142e8:	6803      	ldr	r3, [r0, #0]
 80142ea:	aa03      	add	r2, sp, #12
 80142ec:	68db      	ldr	r3, [r3, #12]
 80142ee:	a902      	add	r1, sp, #8
 80142f0:	4798      	blx	r3
 80142f2:	6823      	ldr	r3, [r4, #0]
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d050      	beq.n	801439a <_ZN8touchgfx3HAL4tickEv+0x156>
 80142f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80142fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014300:	4620      	mov	r0, r4
 8014302:	4798      	blx	r3
 8014304:	2300      	movs	r3, #0
 8014306:	6960      	ldr	r0, [r4, #20]
 8014308:	f88d 3007 	strb.w	r3, [sp, #7]
 801430c:	b158      	cbz	r0, 8014326 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801430e:	6803      	ldr	r3, [r0, #0]
 8014310:	f10d 0107 	add.w	r1, sp, #7
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	4798      	blx	r3
 8014318:	b128      	cbz	r0, 8014326 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801431a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801431c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014320:	6803      	ldr	r3, [r0, #0]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	4798      	blx	r3
 8014326:	f104 001c 	add.w	r0, r4, #28
 801432a:	f011 fe8f 	bl	802604c <_ZN8touchgfx8Gestures4tickEv>
 801432e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014332:	b30b      	cbz	r3, 8014378 <_ZN8touchgfx3HAL4tickEv+0x134>
 8014334:	6920      	ldr	r0, [r4, #16]
 8014336:	6803      	ldr	r3, [r0, #0]
 8014338:	691b      	ldr	r3, [r3, #16]
 801433a:	4798      	blx	r3
 801433c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801433e:	4606      	mov	r6, r0
 8014340:	b903      	cbnz	r3, 8014344 <_ZN8touchgfx3HAL4tickEv+0x100>
 8014342:	6720      	str	r0, [r4, #112]	; 0x70
 8014344:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014346:	4a1e      	ldr	r2, [pc, #120]	; (80143c0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014348:	1af3      	subs	r3, r6, r3
 801434a:	4293      	cmp	r3, r2
 801434c:	d914      	bls.n	8014378 <_ZN8touchgfx3HAL4tickEv+0x134>
 801434e:	6920      	ldr	r0, [r4, #16]
 8014350:	6803      	ldr	r3, [r0, #0]
 8014352:	699b      	ldr	r3, [r3, #24]
 8014354:	4798      	blx	r3
 8014356:	2264      	movs	r2, #100	; 0x64
 8014358:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801435a:	1af3      	subs	r3, r6, r3
 801435c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014360:	fbb0 f0f3 	udiv	r0, r0, r3
 8014364:	2800      	cmp	r0, #0
 8014366:	dc1d      	bgt.n	80143a4 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014368:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801436c:	6920      	ldr	r0, [r4, #16]
 801436e:	2100      	movs	r1, #0
 8014370:	6803      	ldr	r3, [r0, #0]
 8014372:	69db      	ldr	r3, [r3, #28]
 8014374:	4798      	blx	r3
 8014376:	6726      	str	r6, [r4, #112]	; 0x70
 8014378:	f003 fd24 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 801437c:	6803      	ldr	r3, [r0, #0]
 801437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014380:	4798      	blx	r3
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	4620      	mov	r0, r4
 8014386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801438a:	4798      	blx	r3
 801438c:	2001      	movs	r0, #1
 801438e:	f7fd fd17 	bl	8011dc0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014392:	2300      	movs	r3, #0
 8014394:	702b      	strb	r3, [r5, #0]
 8014396:	b004      	add	sp, #16
 8014398:	bd70      	pop	{r4, r5, r6, pc}
 801439a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801439e:	4620      	mov	r0, r4
 80143a0:	4798      	blx	r3
 80143a2:	e7af      	b.n	8014304 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80143a4:	2863      	cmp	r0, #99	; 0x63
 80143a6:	bfcb      	itete	gt
 80143a8:	2300      	movgt	r3, #0
 80143aa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80143ae:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80143b2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80143b6:	e7d9      	b.n	801436c <_ZN8touchgfx3HAL4tickEv+0x128>
 80143b8:	2004f6f8 	.word	0x2004f6f8
 80143bc:	2004f6f9 	.word	0x2004f6f9
 80143c0:	05f5e100 	.word	0x05f5e100

080143c4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80143c4:	f7fe b8e0 	b.w	8012588 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080143c8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80143c8:	6581      	str	r1, [r0, #88]	; 0x58
 80143ca:	301c      	adds	r0, #28
 80143cc:	f011 be3c 	b.w	8026048 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080143d0 <_ZN8touchgfx3HAL5touchEll>:
 80143d0:	b530      	push	{r4, r5, lr}
 80143d2:	4604      	mov	r4, r0
 80143d4:	b087      	sub	sp, #28
 80143d6:	a804      	add	r0, sp, #16
 80143d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80143dc:	f003 fa78 	bl	80178d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80143e0:	9b04      	ldr	r3, [sp, #16]
 80143e2:	a906      	add	r1, sp, #24
 80143e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80143e8:	9b05      	ldr	r3, [sp, #20]
 80143ea:	a803      	add	r0, sp, #12
 80143ec:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80143f0:	f003 fac0 	bl	8017974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80143f4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80143f8:	f104 001c 	add.w	r0, r4, #28
 80143fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014400:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014404:	b189      	cbz	r1, 801442a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014406:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014410:	4613      	mov	r3, r2
 8014412:	462a      	mov	r2, r5
 8014414:	f011 fe28 	bl	8026068 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014418:	b128      	cbz	r0, 8014426 <_ZN8touchgfx3HAL5touchEll+0x56>
 801441a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801441e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014420:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014424:	6623      	str	r3, [r4, #96]	; 0x60
 8014426:	b007      	add	sp, #28
 8014428:	bd30      	pop	{r4, r5, pc}
 801442a:	f011 fe5d 	bl	80260e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801442e:	2301      	movs	r3, #1
 8014430:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014434:	e7f1      	b.n	801441a <_ZN8touchgfx3HAL5touchEll+0x4a>

08014436 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014436:	b510      	push	{r4, lr}
 8014438:	2b00      	cmp	r3, #0
 801443a:	d046      	beq.n	80144ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801443c:	ea81 0002 	eor.w	r0, r1, r2
 8014440:	07c4      	lsls	r4, r0, #31
 8014442:	d508      	bpl.n	8014456 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014444:	440b      	add	r3, r1
 8014446:	3a01      	subs	r2, #1
 8014448:	428b      	cmp	r3, r1
 801444a:	d93e      	bls.n	80144ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801444c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014450:	f801 0b01 	strb.w	r0, [r1], #1
 8014454:	e7f8      	b.n	8014448 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014456:	07d0      	lsls	r0, r2, #31
 8014458:	bf42      	ittt	mi
 801445a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801445e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014462:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014466:	2b01      	cmp	r3, #1
 8014468:	d911      	bls.n	801448e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801446a:	ea81 0402 	eor.w	r4, r1, r2
 801446e:	07a4      	lsls	r4, r4, #30
 8014470:	4610      	mov	r0, r2
 8014472:	d022      	beq.n	80144ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014474:	f023 0401 	bic.w	r4, r3, #1
 8014478:	440c      	add	r4, r1
 801447a:	428c      	cmp	r4, r1
 801447c:	4602      	mov	r2, r0
 801447e:	d904      	bls.n	801448a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014480:	8812      	ldrh	r2, [r2, #0]
 8014482:	3002      	adds	r0, #2
 8014484:	f821 2b02 	strh.w	r2, [r1], #2
 8014488:	e7f7      	b.n	801447a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801448a:	f003 0301 	and.w	r3, r3, #1
 801448e:	f023 0003 	bic.w	r0, r3, #3
 8014492:	4408      	add	r0, r1
 8014494:	4288      	cmp	r0, r1
 8014496:	4614      	mov	r4, r2
 8014498:	d904      	bls.n	80144a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801449a:	6824      	ldr	r4, [r4, #0]
 801449c:	3204      	adds	r2, #4
 801449e:	f841 4b04 	str.w	r4, [r1], #4
 80144a2:	e7f7      	b.n	8014494 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80144a4:	f003 0303 	and.w	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	3a01      	subs	r2, #1
 80144ac:	428b      	cmp	r3, r1
 80144ae:	d90c      	bls.n	80144ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80144b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80144b4:	f801 0b01 	strb.w	r0, [r1], #1
 80144b8:	e7f8      	b.n	80144ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80144ba:	0790      	lsls	r0, r2, #30
 80144bc:	d0e7      	beq.n	801448e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80144be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80144c2:	3b02      	subs	r3, #2
 80144c4:	f821 0b02 	strh.w	r0, [r1], #2
 80144c8:	e7e1      	b.n	801448e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80144ca:	2001      	movs	r0, #1
 80144cc:	bd10      	pop	{r4, pc}

080144ce <_ZN8touchgfx3HAL7noTouchEv>:
 80144ce:	b510      	push	{r4, lr}
 80144d0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80144d4:	4604      	mov	r4, r0
 80144d6:	b153      	cbz	r3, 80144ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80144d8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80144dc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80144e0:	2101      	movs	r1, #1
 80144e2:	301c      	adds	r0, #28
 80144e4:	f011 fe00 	bl	80260e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80144e8:	2300      	movs	r3, #0
 80144ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80144ee:	bd10      	pop	{r4, pc}

080144f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80144f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144f4:	4604      	mov	r4, r0
 80144f6:	2000      	movs	r0, #0
 80144f8:	b085      	sub	sp, #20
 80144fa:	ad04      	add	r5, sp, #16
 80144fc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014500:	69a0      	ldr	r0, [r4, #24]
 8014502:	4699      	mov	r9, r3
 8014504:	6806      	ldr	r6, [r0, #0]
 8014506:	9501      	str	r5, [sp, #4]
 8014508:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801450c:	460f      	mov	r7, r1
 801450e:	9500      	str	r5, [sp, #0]
 8014510:	6835      	ldr	r5, [r6, #0]
 8014512:	4690      	mov	r8, r2
 8014514:	47a8      	blx	r5
 8014516:	4d10      	ldr	r5, [pc, #64]	; (8014558 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014518:	4606      	mov	r6, r0
 801451a:	f8a5 9000 	strh.w	r9, [r5]
 801451e:	f7fa f911 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014522:	6803      	ldr	r3, [r0, #0]
 8014524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014526:	4798      	blx	r3
 8014528:	b128      	cbz	r0, 8014536 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801452a:	2801      	cmp	r0, #1
 801452c:	d00b      	beq.n	8014546 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801452e:	4630      	mov	r0, r6
 8014530:	b005      	add	sp, #20
 8014532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014536:	882b      	ldrh	r3, [r5, #0]
 8014538:	fb08 7203 	mla	r2, r8, r3, r7
 801453c:	9b03      	ldr	r3, [sp, #12]
 801453e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014542:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014544:	e7f3      	b.n	801452e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014546:	882a      	ldrh	r2, [r5, #0]
 8014548:	9b03      	ldr	r3, [sp, #12]
 801454a:	fb08 7202 	mla	r2, r8, r2, r7
 801454e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014552:	1a9a      	subs	r2, r3, r2
 8014554:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014556:	e7ea      	b.n	801452e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014558:	2004f6ee 	.word	0x2004f6ee

0801455c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801455e:	b08b      	sub	sp, #44	; 0x2c
 8014560:	4617      	mov	r7, r2
 8014562:	4604      	mov	r4, r0
 8014564:	460e      	mov	r6, r1
 8014566:	461d      	mov	r5, r3
 8014568:	f7fa f8ec 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 801456c:	6803      	ldr	r3, [r0, #0]
 801456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014570:	4798      	blx	r3
 8014572:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014576:	9007      	str	r0, [sp, #28]
 8014578:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801457c:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801457e:	6822      	ldr	r2, [r4, #0]
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	4631      	mov	r1, r6
 8014584:	9306      	str	r3, [sp, #24]
 8014586:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801458a:	4620      	mov	r0, r4
 801458c:	9305      	str	r3, [sp, #20]
 801458e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014592:	9304      	str	r3, [sp, #16]
 8014594:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014598:	9303      	str	r3, [sp, #12]
 801459a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801459e:	9302      	str	r3, [sp, #8]
 80145a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80145a4:	e9cd 5300 	strd	r5, r3, [sp]
 80145a8:	463b      	mov	r3, r7
 80145aa:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80145ac:	2200      	movs	r2, #0
 80145ae:	47a8      	blx	r5
 80145b0:	b00b      	add	sp, #44	; 0x2c
 80145b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b4:	2004f6ee 	.word	0x2004f6ee

080145b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80145b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145bc:	4698      	mov	r8, r3
 80145be:	6803      	ldr	r3, [r0, #0]
 80145c0:	b08b      	sub	sp, #44	; 0x2c
 80145c2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80145c4:	4b14      	ldr	r3, [pc, #80]	; (8014618 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80145c6:	4617      	mov	r7, r2
 80145c8:	f8b3 9000 	ldrh.w	r9, [r3]
 80145cc:	460e      	mov	r6, r1
 80145ce:	4604      	mov	r4, r0
 80145d0:	f7fa f8b8 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 80145d4:	6803      	ldr	r3, [r0, #0]
 80145d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d8:	4798      	blx	r3
 80145da:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80145de:	2200      	movs	r2, #0
 80145e0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80145e4:	2302      	movs	r3, #2
 80145e6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80145ea:	2301      	movs	r3, #1
 80145ec:	9305      	str	r3, [sp, #20]
 80145ee:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80145f2:	4631      	mov	r1, r6
 80145f4:	9304      	str	r3, [sp, #16]
 80145f6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80145fa:	4620      	mov	r0, r4
 80145fc:	9303      	str	r3, [sp, #12]
 80145fe:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014602:	9302      	str	r3, [sp, #8]
 8014604:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014608:	e9cd 8300 	strd	r8, r3, [sp]
 801460c:	463b      	mov	r3, r7
 801460e:	47a8      	blx	r5
 8014610:	b00b      	add	sp, #44	; 0x2c
 8014612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014616:	bf00      	nop
 8014618:	2004f6ee 	.word	0x2004f6ee

0801461c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801461c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014620:	4698      	mov	r8, r3
 8014622:	6803      	ldr	r3, [r0, #0]
 8014624:	b087      	sub	sp, #28
 8014626:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8014628:	4b10      	ldr	r3, [pc, #64]	; (801466c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801462a:	460e      	mov	r6, r1
 801462c:	f8b3 9000 	ldrh.w	r9, [r3]
 8014630:	4617      	mov	r7, r2
 8014632:	4604      	mov	r4, r0
 8014634:	f7fa f886 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014638:	6803      	ldr	r3, [r0, #0]
 801463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801463c:	4798      	blx	r3
 801463e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014642:	f8cd 900c 	str.w	r9, [sp, #12]
 8014646:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801464a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801464e:	463a      	mov	r2, r7
 8014650:	9302      	str	r3, [sp, #8]
 8014652:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014656:	4631      	mov	r1, r6
 8014658:	9301      	str	r3, [sp, #4]
 801465a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801465e:	4620      	mov	r0, r4
 8014660:	9300      	str	r3, [sp, #0]
 8014662:	4643      	mov	r3, r8
 8014664:	47a8      	blx	r5
 8014666:	b007      	add	sp, #28
 8014668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801466c:	2004f6ee 	.word	0x2004f6ee

08014670 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	b08f      	sub	sp, #60	; 0x3c
 8014678:	4610      	mov	r0, r2
 801467a:	460d      	mov	r5, r1
 801467c:	4691      	mov	r9, r2
 801467e:	461e      	mov	r6, r3
 8014680:	f005 ff54 	bl	801a52c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014684:	2800      	cmp	r0, #0
 8014686:	f000 809d 	beq.w	80147c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	4620      	mov	r0, r4
 801468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014690:	4798      	blx	r3
 8014692:	6823      	ldr	r3, [r4, #0]
 8014694:	f8df b190 	ldr.w	fp, [pc, #400]	; 8014828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801469a:	4620      	mov	r0, r4
 801469c:	4798      	blx	r3
 801469e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801482c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80146a2:	f8bb 3000 	ldrh.w	r3, [fp]
 80146a6:	4f5d      	ldr	r7, [pc, #372]	; (801481c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80146a8:	9301      	str	r3, [sp, #4]
 80146aa:	f8ba 3000 	ldrh.w	r3, [sl]
 80146ae:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80146b2:	9302      	str	r3, [sp, #8]
 80146b4:	883b      	ldrh	r3, [r7, #0]
 80146b6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80146ba:	9303      	str	r3, [sp, #12]
 80146bc:	4b58      	ldr	r3, [pc, #352]	; (8014820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80146be:	4640      	mov	r0, r8
 80146c0:	881a      	ldrh	r2, [r3, #0]
 80146c2:	9305      	str	r3, [sp, #20]
 80146c4:	9204      	str	r2, [sp, #16]
 80146c6:	f005 ffc5 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146ca:	8038      	strh	r0, [r7, #0]
 80146cc:	4640      	mov	r0, r8
 80146ce:	f005 fff5 	bl	801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146d2:	9b05      	ldr	r3, [sp, #20]
 80146d4:	b280      	uxth	r0, r0
 80146d6:	8018      	strh	r0, [r3, #0]
 80146d8:	4b52      	ldr	r3, [pc, #328]	; (8014824 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d174      	bne.n	80147ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80146e0:	883b      	ldrh	r3, [r7, #0]
 80146e2:	f8aa 0000 	strh.w	r0, [sl]
 80146e6:	f8ab 3000 	strh.w	r3, [fp]
 80146ea:	4648      	mov	r0, r9
 80146ec:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80146f0:	f005 ff1c 	bl	801a52c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80146f4:	2200      	movs	r2, #0
 80146f6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80146fa:	4611      	mov	r1, r2
 80146fc:	4628      	mov	r0, r5
 80146fe:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014702:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014706:	f7f9 ff1a 	bl	800e53e <_ZN8touchgfx8Drawable5setXYEss>
 801470a:	2301      	movs	r3, #1
 801470c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014710:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014714:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014718:	2b00      	cmp	r3, #0
 801471a:	dd5c      	ble.n	80147d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801471c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014720:	2b00      	cmp	r3, #0
 8014722:	dd58      	ble.n	80147d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014724:	462a      	mov	r2, r5
 8014726:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801472a:	ab0a      	add	r3, sp, #40	; 0x28
 801472c:	6851      	ldr	r1, [r2, #4]
 801472e:	c303      	stmia	r3!, {r0, r1}
 8014730:	4631      	mov	r1, r6
 8014732:	a80a      	add	r0, sp, #40	; 0x28
 8014734:	f7ff fc00 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8014738:	2100      	movs	r1, #0
 801473a:	4b38      	ldr	r3, [pc, #224]	; (801481c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801473c:	910c      	str	r1, [sp, #48]	; 0x30
 801473e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014742:	4b37      	ldr	r3, [pc, #220]	; (8014820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014744:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801474c:	aa0a      	add	r2, sp, #40	; 0x28
 801474e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014752:	ab08      	add	r3, sp, #32
 8014754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014758:	e883 0003 	stmia.w	r3, {r0, r1}
 801475c:	4618      	mov	r0, r3
 801475e:	a90c      	add	r1, sp, #48	; 0x30
 8014760:	f7ff fbea 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8014764:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014766:	2b00      	cmp	r3, #0
 8014768:	d13c      	bne.n	80147e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801476a:	2000      	movs	r0, #0
 801476c:	2600      	movs	r6, #0
 801476e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014772:	696b      	ldr	r3, [r5, #20]
 8014774:	682a      	ldr	r2, [r5, #0]
 8014776:	616e      	str	r6, [r5, #20]
 8014778:	9305      	str	r3, [sp, #20]
 801477a:	6892      	ldr	r2, [r2, #8]
 801477c:	a908      	add	r1, sp, #32
 801477e:	4628      	mov	r0, r5
 8014780:	4790      	blx	r2
 8014782:	9b05      	ldr	r3, [sp, #20]
 8014784:	4652      	mov	r2, sl
 8014786:	616b      	str	r3, [r5, #20]
 8014788:	4649      	mov	r1, r9
 801478a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801478e:	4628      	mov	r0, r5
 8014790:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014794:	f7f9 fed3 	bl	800e53e <_ZN8touchgfx8Drawable5setXYEss>
 8014798:	9a01      	ldr	r2, [sp, #4]
 801479a:	4b23      	ldr	r3, [pc, #140]	; (8014828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801479c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80147a0:	801a      	strh	r2, [r3, #0]
 80147a2:	9a02      	ldr	r2, [sp, #8]
 80147a4:	4b21      	ldr	r3, [pc, #132]	; (801482c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80147a6:	4620      	mov	r0, r4
 80147a8:	801a      	strh	r2, [r3, #0]
 80147aa:	9a03      	ldr	r2, [sp, #12]
 80147ac:	4b1b      	ldr	r3, [pc, #108]	; (801481c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80147ae:	801a      	strh	r2, [r3, #0]
 80147b0:	4b1b      	ldr	r3, [pc, #108]	; (8014820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80147b2:	9a04      	ldr	r2, [sp, #16]
 80147b4:	801a      	strh	r2, [r3, #0]
 80147b6:	6823      	ldr	r3, [r4, #0]
 80147b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ba:	4798      	blx	r3
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	4620      	mov	r0, r4
 80147c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c2:	4798      	blx	r3
 80147c4:	b00f      	add	sp, #60	; 0x3c
 80147c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ca:	883b      	ldrh	r3, [r7, #0]
 80147cc:	f8ab 0000 	strh.w	r0, [fp]
 80147d0:	f8aa 3000 	strh.w	r3, [sl]
 80147d4:	e789      	b.n	80146ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80147d6:	462a      	mov	r2, r5
 80147d8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80147dc:	ab0a      	add	r3, sp, #40	; 0x28
 80147de:	6851      	ldr	r1, [r2, #4]
 80147e0:	c303      	stmia	r3!, {r0, r1}
 80147e2:	e7a9      	b.n	8014738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80147e4:	a807      	add	r0, sp, #28
 80147e6:	f006 f8a5 	bl	801a934 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80147ea:	4606      	mov	r6, r0
 80147ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80147ee:	6803      	ldr	r3, [r0, #0]
 80147f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f2:	4798      	blx	r3
 80147f4:	4286      	cmp	r6, r0
 80147f6:	d1b8      	bne.n	801476a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80147f8:	f7f9 ffa4 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 80147fc:	6803      	ldr	r3, [r0, #0]
 80147fe:	4606      	mov	r6, r0
 8014800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014802:	a807      	add	r0, sp, #28
 8014804:	9305      	str	r3, [sp, #20]
 8014806:	f006 f895 	bl	801a934 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801480a:	9b05      	ldr	r3, [sp, #20]
 801480c:	4601      	mov	r1, r0
 801480e:	4630      	mov	r0, r6
 8014810:	4798      	blx	r3
 8014812:	f080 0001 	eor.w	r0, r0, #1
 8014816:	b2c0      	uxtb	r0, r0
 8014818:	e7a8      	b.n	801476c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801481a:	bf00      	nop
 801481c:	2004f6e8 	.word	0x2004f6e8
 8014820:	2004f6ea 	.word	0x2004f6ea
 8014824:	2004f6ec 	.word	0x2004f6ec
 8014828:	2004f6ee 	.word	0x2004f6ee
 801482c:	2004f6f0 	.word	0x2004f6f0

08014830 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014834:	461d      	mov	r5, r3
 8014836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801483a:	2400      	movs	r4, #0
 801483c:	b08a      	sub	sp, #40	; 0x28
 801483e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014842:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014846:	4690      	mov	r8, r2
 8014848:	f8ad 3018 	strh.w	r3, [sp, #24]
 801484c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014850:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014854:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014858:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801485c:	4607      	mov	r7, r0
 801485e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014862:	9404      	str	r4, [sp, #16]
 8014864:	f88d 4020 	strb.w	r4, [sp, #32]
 8014868:	f7fd fc02 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801486c:	fb06 8505 	mla	r5, r6, r5, r8
 8014870:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	9505      	str	r5, [sp, #20]
 8014878:	f8ad 601e 	strh.w	r6, [sp, #30]
 801487c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014880:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014884:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014888:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801488c:	6803      	ldr	r3, [r0, #0]
 801488e:	a901      	add	r1, sp, #4
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	4798      	blx	r3
 8014894:	b00a      	add	sp, #40	; 0x28
 8014896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801489a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801489a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801489e:	2400      	movs	r4, #0
 80148a0:	461d      	mov	r5, r3
 80148a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148a6:	4691      	mov	r9, r2
 80148a8:	b08b      	sub	sp, #44	; 0x2c
 80148aa:	4688      	mov	r8, r1
 80148ac:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80148b0:	4607      	mov	r7, r0
 80148b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148b6:	9404      	str	r4, [sp, #16]
 80148b8:	f7fd fbda 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80148bc:	fb06 9505 	mla	r5, r6, r5, r9
 80148c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80148c4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80148c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80148cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	9505      	str	r5, [sp, #20]
 80148d4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80148d8:	f8ad 401c 	strh.w	r4, [sp, #28]
 80148dc:	f8ad 601e 	strh.w	r6, [sp, #30]
 80148e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80148e4:	f8ad 4020 	strh.w	r4, [sp, #32]
 80148e8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80148ec:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80148f0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80148f4:	6803      	ldr	r3, [r0, #0]
 80148f6:	a901      	add	r1, sp, #4
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	4798      	blx	r3
 80148fc:	b00b      	add	sp, #44	; 0x2c
 80148fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014904 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014908:	4698      	mov	r8, r3
 801490a:	2300      	movs	r3, #0
 801490c:	b08a      	sub	sp, #40	; 0x28
 801490e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8014912:	4606      	mov	r6, r0
 8014914:	2d0b      	cmp	r5, #11
 8014916:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801491a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801491e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8014922:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8014926:	9304      	str	r3, [sp, #16]
 8014928:	d137      	bne.n	801499a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801492a:	2380      	movs	r3, #128	; 0x80
 801492c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014930:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014934:	f88d 0020 	strb.w	r0, [sp, #32]
 8014938:	f8ad 3018 	strh.w	r3, [sp, #24]
 801493c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014940:	4630      	mov	r0, r6
 8014942:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014946:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801494a:	9203      	str	r2, [sp, #12]
 801494c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014950:	f7fd fb8e 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014954:	2c0b      	cmp	r4, #11
 8014956:	bf8c      	ite	hi
 8014958:	2100      	movhi	r1, #0
 801495a:	4b1b      	ldrls	r3, [pc, #108]	; (80149c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801495c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014960:	bf98      	it	ls
 8014962:	5d19      	ldrbls	r1, [r3, r4]
 8014964:	fb02 8307 	mla	r3, r2, r7, r8
 8014968:	10c9      	asrs	r1, r1, #3
 801496a:	fb01 0003 	mla	r0, r1, r3, r0
 801496e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014972:	9005      	str	r0, [sp, #20]
 8014974:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014978:	2300      	movs	r3, #0
 801497a:	6870      	ldr	r0, [r6, #4]
 801497c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014980:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014984:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014988:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801498c:	6803      	ldr	r3, [r0, #0]
 801498e:	a901      	add	r1, sp, #4
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	4798      	blx	r3
 8014994:	b00a      	add	sp, #40	; 0x28
 8014996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801499a:	2d02      	cmp	r5, #2
 801499c:	d109      	bne.n	80149b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801499e:	28ff      	cmp	r0, #255	; 0xff
 80149a0:	d105      	bne.n	80149ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80149a2:	f1bc 0f00 	cmp.w	ip, #0
 80149a6:	bf14      	ite	ne
 80149a8:	2340      	movne	r3, #64	; 0x40
 80149aa:	2320      	moveq	r3, #32
 80149ac:	e7be      	b.n	801492c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149ae:	2340      	movs	r3, #64	; 0x40
 80149b0:	e7bc      	b.n	801492c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149b2:	28ff      	cmp	r0, #255	; 0xff
 80149b4:	d105      	bne.n	80149c2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80149b6:	f1bc 0f00 	cmp.w	ip, #0
 80149ba:	bf14      	ite	ne
 80149bc:	2304      	movne	r3, #4
 80149be:	2301      	moveq	r3, #1
 80149c0:	e7b4      	b.n	801492c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149c2:	2304      	movs	r3, #4
 80149c4:	e7b2      	b.n	801492c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149c6:	bf00      	nop
 80149c8:	0802948c 	.word	0x0802948c

080149cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80149cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d0:	b08b      	sub	sp, #44	; 0x2c
 80149d2:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80149d6:	461d      	mov	r5, r3
 80149d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80149dc:	bf14      	ite	ne
 80149de:	2308      	movne	r3, #8
 80149e0:	2302      	moveq	r3, #2
 80149e2:	2400      	movs	r4, #0
 80149e4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80149e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149ec:	4688      	mov	r8, r1
 80149ee:	4693      	mov	fp, r2
 80149f0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80149f4:	9404      	str	r4, [sp, #16]
 80149f6:	4607      	mov	r7, r0
 80149f8:	f7fd fb3a 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80149fc:	2e0b      	cmp	r6, #11
 80149fe:	bf98      	it	ls
 8014a00:	4b15      	ldrls	r3, [pc, #84]	; (8014a58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014a02:	fb05 b50a 	mla	r5, r5, sl, fp
 8014a06:	bf98      	it	ls
 8014a08:	5d9c      	ldrbls	r4, [r3, r6]
 8014a0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014a0e:	10e4      	asrs	r4, r4, #3
 8014a10:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a14:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014a18:	fb04 0405 	mla	r4, r4, r5, r0
 8014a1c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a20:	2300      	movs	r3, #0
 8014a22:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	9405      	str	r4, [sp, #20]
 8014a2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a2e:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014a32:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a36:	f88d 9020 	strb.w	r9, [sp, #32]
 8014a3a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014a3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014a42:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014a46:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014a4a:	6803      	ldr	r3, [r0, #0]
 8014a4c:	a901      	add	r1, sp, #4
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	4798      	blx	r3
 8014a52:	b00b      	add	sp, #44	; 0x2c
 8014a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a58:	0802948c 	.word	0x0802948c

08014a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a60:	461e      	mov	r6, r3
 8014a62:	4b0a      	ldr	r3, [pc, #40]	; (8014a8c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014a64:	460f      	mov	r7, r1
 8014a66:	881d      	ldrh	r5, [r3, #0]
 8014a68:	4690      	mov	r8, r2
 8014a6a:	f7f9 fe6b 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014a6e:	6803      	ldr	r3, [r0, #0]
 8014a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a72:	4798      	blx	r3
 8014a74:	280b      	cmp	r0, #11
 8014a76:	bf8e      	itee	hi
 8014a78:	2400      	movhi	r4, #0
 8014a7a:	4b05      	ldrls	r3, [pc, #20]	; (8014a90 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014a7c:	5c1c      	ldrbls	r4, [r3, r0]
 8014a7e:	fb08 7005 	mla	r0, r8, r5, r7
 8014a82:	10e4      	asrs	r4, r4, #3
 8014a84:	fb04 6000 	mla	r0, r4, r0, r6
 8014a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a8c:	2004f6ee 	.word	0x2004f6ee
 8014a90:	0802948c 	.word	0x0802948c

08014a94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a96:	2500      	movs	r5, #0
 8014a98:	b08b      	sub	sp, #44	; 0x2c
 8014a9a:	461f      	mov	r7, r3
 8014a9c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014aa6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014aaa:	4616      	mov	r6, r2
 8014aac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ab0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014ab4:	9504      	str	r5, [sp, #16]
 8014ab6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014aba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014abe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014ac2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014ac6:	f88d 3020 	strb.w	r3, [sp, #32]
 8014aca:	f7fd fad1 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ace:	463a      	mov	r2, r7
 8014ad0:	4631      	mov	r1, r6
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f7ff ffc1 	bl	8014a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014ada:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014adc:	9005      	str	r0, [sp, #20]
 8014ade:	881b      	ldrh	r3, [r3, #0]
 8014ae0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014ae4:	f7f9 fe2e 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014ae8:	6803      	ldr	r3, [r0, #0]
 8014aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aec:	4798      	blx	r3
 8014aee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014af0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014af4:	9304      	str	r3, [sp, #16]
 8014af6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014afa:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014afe:	6860      	ldr	r0, [r4, #4]
 8014b00:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014b04:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014b08:	6803      	ldr	r3, [r0, #0]
 8014b0a:	a901      	add	r1, sp, #4
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	4798      	blx	r3
 8014b10:	b00b      	add	sp, #44	; 0x2c
 8014b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b14:	2004f6ee 	.word	0x2004f6ee

08014b18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b1a:	b08d      	sub	sp, #52	; 0x34
 8014b1c:	466b      	mov	r3, sp
 8014b1e:	e883 0006 	stmia.w	r3, {r1, r2}
 8014b22:	2300      	movs	r3, #0
 8014b24:	2501      	movs	r5, #1
 8014b26:	9306      	str	r3, [sp, #24]
 8014b28:	6803      	ldr	r3, [r0, #0]
 8014b2a:	9503      	str	r5, [sp, #12]
 8014b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b2e:	4604      	mov	r4, r0
 8014b30:	f8bd 6000 	ldrh.w	r6, [sp]
 8014b34:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014b38:	4798      	blx	r3
 8014b3a:	463a      	mov	r2, r7
 8014b3c:	4631      	mov	r1, r6
 8014b3e:	4603      	mov	r3, r0
 8014b40:	4620      	mov	r0, r4
 8014b42:	f7ff ff8b 	bl	8014a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014b48:	9004      	str	r0, [sp, #16]
 8014b4a:	9307      	str	r3, [sp, #28]
 8014b4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014b50:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014b54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b58:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014b5c:	4b0e      	ldr	r3, [pc, #56]	; (8014b98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014b64:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014b68:	f7f9 fdec 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014b6c:	6803      	ldr	r3, [r0, #0]
 8014b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b70:	4798      	blx	r3
 8014b72:	23ff      	movs	r3, #255	; 0xff
 8014b74:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014b78:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014b7c:	6860      	ldr	r0, [r4, #4]
 8014b7e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014b82:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014b86:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014b8a:	6803      	ldr	r3, [r0, #0]
 8014b8c:	a903      	add	r1, sp, #12
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4798      	blx	r3
 8014b92:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014b94:	b00d      	add	sp, #52	; 0x34
 8014b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b98:	2004f6ee 	.word	0x2004f6ee

08014b9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba0:	b08c      	sub	sp, #48	; 0x30
 8014ba2:	466d      	mov	r5, sp
 8014ba4:	461e      	mov	r6, r3
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	e885 0006 	stmia.w	r5, {r1, r2}
 8014bac:	2501      	movs	r5, #1
 8014bae:	9306      	str	r3, [sp, #24]
 8014bb0:	6803      	ldr	r3, [r0, #0]
 8014bb2:	9503      	str	r5, [sp, #12]
 8014bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	f8bd 7000 	ldrh.w	r7, [sp]
 8014bbc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014bc0:	4798      	blx	r3
 8014bc2:	4642      	mov	r2, r8
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f7ff ff47 	bl	8014a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014bce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014bd2:	9004      	str	r0, [sp, #16]
 8014bd4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014bd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014bdc:	9607      	str	r6, [sp, #28]
 8014bde:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014be2:	4b10      	ldr	r3, [pc, #64]	; (8014c24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014bea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014bec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014bf0:	f7f9 fda8 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8014bf4:	6803      	ldr	r3, [r0, #0]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf8:	4798      	blx	r3
 8014bfa:	23ff      	movs	r3, #255	; 0xff
 8014bfc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014c00:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014c04:	6860      	ldr	r0, [r4, #4]
 8014c06:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014c0a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014c0e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014c12:	6803      	ldr	r3, [r0, #0]
 8014c14:	a903      	add	r1, sp, #12
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	4798      	blx	r3
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	b00c      	add	sp, #48	; 0x30
 8014c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c22:	bf00      	nop
 8014c24:	2004f6ee 	.word	0x2004f6ee

08014c28 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c2a:	b085      	sub	sp, #20
 8014c2c:	ac02      	add	r4, sp, #8
 8014c2e:	e884 0006 	stmia.w	r4, {r1, r2}
 8014c32:	4605      	mov	r5, r0
 8014c34:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014c38:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014c3c:	f7fd fa18 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c40:	463a      	mov	r2, r7
 8014c42:	4603      	mov	r3, r0
 8014c44:	4631      	mov	r1, r6
 8014c46:	4628      	mov	r0, r5
 8014c48:	f7ff ff08 	bl	8014a5c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014c4c:	4a05      	ldr	r2, [pc, #20]	; (8014c64 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8014c4e:	682b      	ldr	r3, [r5, #0]
 8014c50:	8812      	ldrh	r2, [r2, #0]
 8014c52:	9200      	str	r2, [sp, #0]
 8014c54:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014c56:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	47b0      	blx	r6
 8014c60:	b005      	add	sp, #20
 8014c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c64:	2004f6ee 	.word	0x2004f6ee

08014c68 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014c68:	b570      	push	{r4, r5, r6, lr}
 8014c6a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014c6e:	4604      	mov	r4, r0
 8014c70:	b19b      	cbz	r3, 8014c9a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014c72:	2002      	movs	r0, #2
 8014c74:	f7fd f8c0 	bl	8011df8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014c7e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	4620      	mov	r0, r4
 8014c86:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8014c8a:	f7fd f9f1 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c8e:	462b      	mov	r3, r5
 8014c90:	4601      	mov	r1, r0
 8014c92:	4620      	mov	r0, r4
 8014c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c98:	4718      	bx	r3
 8014c9a:	bd70      	pop	{r4, r5, r6, pc}

08014c9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	428b      	cmp	r3, r1
 8014ca6:	460d      	mov	r5, r1
 8014ca8:	d006      	beq.n	8014cb8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014caa:	6803      	ldr	r3, [r0, #0]
 8014cac:	b929      	cbnz	r1, 8014cba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014cae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014cb2:	4798      	blx	r3
 8014cb4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014cb8:	bd38      	pop	{r3, r4, r5, pc}
 8014cba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014cbe:	e7f8      	b.n	8014cb2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014cc0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014cc0:	b510      	push	{r4, lr}
 8014cc2:	4b0d      	ldr	r3, [pc, #52]	; (8014cf8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	b95b      	cbnz	r3, 8014ce2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014cca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014cce:	2b02      	cmp	r3, #2
 8014cd0:	d007      	beq.n	8014ce2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014cd2:	6840      	ldr	r0, [r0, #4]
 8014cd4:	f000 f926 	bl	8014f24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014cd8:	b118      	cbz	r0, 8014ce2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014cda:	6862      	ldr	r2, [r4, #4]
 8014cdc:	7a53      	ldrb	r3, [r2, #9]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d0fc      	beq.n	8014cdc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014ce2:	f7fd fc31 	bl	8012548 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014ce6:	4620      	mov	r0, r4
 8014ce8:	2100      	movs	r1, #0
 8014cea:	f7ff ffd7 	bl	8014c9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f7fd f9be 	bl	8012070 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014cf4:	bd10      	pop	{r4, pc}
 8014cf6:	bf00      	nop
 8014cf8:	2004f6f2 	.word	0x2004f6f2

08014cfc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8014cfc:	b570      	push	{r4, r5, r6, lr}
 8014cfe:	4604      	mov	r4, r0
 8014d00:	6803      	ldr	r3, [r0, #0]
 8014d02:	b919      	cbnz	r1, 8014d0c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8014d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d0a:	4718      	bx	r3
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8014d12:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8014d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d18:	4798      	blx	r3
 8014d1a:	4605      	mov	r5, r0
 8014d1c:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8014d20:	4620      	mov	r0, r4
 8014d22:	2101      	movs	r1, #1
 8014d24:	f7ff ffba 	bl	8014c9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014d28:	4628      	mov	r0, r5
 8014d2a:	bd70      	pop	{r4, r5, r6, pc}

08014d2c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014d2c:	4770      	bx	lr

08014d2e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014d2e:	2000      	movs	r0, #0
 8014d30:	4770      	bx	lr

08014d32 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014d32:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014d36:	1a13      	subs	r3, r2, r0
 8014d38:	4258      	negs	r0, r3
 8014d3a:	4158      	adcs	r0, r3
 8014d3c:	4770      	bx	lr

08014d3e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014d3e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	bfdc      	itt	le
 8014d48:	6882      	ldrle	r2, [r0, #8]
 8014d4a:	189b      	addle	r3, r3, r2
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	bfcc      	ite	gt
 8014d50:	2000      	movgt	r0, #0
 8014d52:	2001      	movle	r0, #1
 8014d54:	4770      	bx	lr

08014d56 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014d56:	6902      	ldr	r2, [r0, #16]
 8014d58:	6843      	ldr	r3, [r0, #4]
 8014d5a:	2024      	movs	r0, #36	; 0x24
 8014d5c:	fb00 3002 	mla	r0, r0, r2, r3
 8014d60:	4770      	bx	lr

08014d62 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014d62:	6803      	ldr	r3, [r0, #0]
 8014d64:	691b      	ldr	r3, [r3, #16]
 8014d66:	4718      	bx	r3

08014d68 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014d68:	2301      	movs	r3, #1
 8014d6a:	b570      	push	{r4, r5, r6, lr}
 8014d6c:	7203      	strb	r3, [r0, #8]
 8014d6e:	4604      	mov	r4, r0
 8014d70:	6840      	ldr	r0, [r0, #4]
 8014d72:	6803      	ldr	r3, [r0, #0]
 8014d74:	699b      	ldr	r3, [r3, #24]
 8014d76:	4798      	blx	r3
 8014d78:	6803      	ldr	r3, [r0, #0]
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	2b40      	cmp	r3, #64	; 0x40
 8014d7e:	d00c      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d80:	d810      	bhi.n	8014da4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014d82:	2b04      	cmp	r3, #4
 8014d84:	d01d      	beq.n	8014dc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014d86:	d804      	bhi.n	8014d92 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014d88:	2b01      	cmp	r3, #1
 8014d8a:	d006      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	d02c      	beq.n	8014dea <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014d90:	bd70      	pop	{r4, r5, r6, pc}
 8014d92:	2b08      	cmp	r3, #8
 8014d94:	d01d      	beq.n	8014dd2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014d96:	2b20      	cmp	r3, #32
 8014d98:	d1fa      	bne.n	8014d90 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014d9a:	6823      	ldr	r3, [r4, #0]
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014da0:	4798      	blx	r3
 8014da2:	e013      	b.n	8014dcc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014da8:	d0f7      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014daa:	d804      	bhi.n	8014db6 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014dac:	2b80      	cmp	r3, #128	; 0x80
 8014dae:	d0f4      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014db4:	e7f0      	b.n	8014d98 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014dba:	d0ee      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014dc0:	e7e5      	b.n	8014d8e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014dc2:	6823      	ldr	r3, [r4, #0]
 8014dc4:	7f01      	ldrb	r1, [r0, #28]
 8014dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dc8:	4620      	mov	r0, r4
 8014dca:	4798      	blx	r3
 8014dcc:	6823      	ldr	r3, [r4, #0]
 8014dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dd0:	e006      	b.n	8014de0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014dd2:	6823      	ldr	r3, [r4, #0]
 8014dd4:	7f01      	ldrb	r1, [r0, #28]
 8014dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dd8:	4620      	mov	r0, r4
 8014dda:	4798      	blx	r3
 8014ddc:	6823      	ldr	r3, [r4, #0]
 8014dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014de0:	4629      	mov	r1, r5
 8014de2:	4620      	mov	r0, r4
 8014de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014de8:	4718      	bx	r3
 8014dea:	6823      	ldr	r3, [r4, #0]
 8014dec:	4620      	mov	r0, r4
 8014dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014df0:	4798      	blx	r3
 8014df2:	e7f3      	b.n	8014ddc <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014df4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014df4:	4770      	bx	lr

08014df6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014df6:	4770      	bx	lr

08014df8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014df8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014dfc:	1ad2      	subs	r2, r2, r3
 8014dfe:	2a00      	cmp	r2, #0
 8014e00:	b510      	push	{r4, lr}
 8014e02:	bfdc      	itt	le
 8014e04:	6884      	ldrle	r4, [r0, #8]
 8014e06:	1912      	addle	r2, r2, r4
 8014e08:	2a01      	cmp	r2, #1
 8014e0a:	dd16      	ble.n	8014e3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014e0c:	2424      	movs	r4, #36	; 0x24
 8014e0e:	6842      	ldr	r2, [r0, #4]
 8014e10:	fb04 2303 	mla	r3, r4, r3, r2
 8014e14:	f101 0220 	add.w	r2, r1, #32
 8014e18:	f851 4b04 	ldr.w	r4, [r1], #4
 8014e1c:	4291      	cmp	r1, r2
 8014e1e:	f843 4b04 	str.w	r4, [r3], #4
 8014e22:	d1f9      	bne.n	8014e18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014e24:	780a      	ldrb	r2, [r1, #0]
 8014e26:	701a      	strb	r2, [r3, #0]
 8014e28:	68c3      	ldr	r3, [r0, #12]
 8014e2a:	6882      	ldr	r2, [r0, #8]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	bfd8      	it	le
 8014e32:	1a9b      	suble	r3, r3, r2
 8014e34:	f3bf 8f5b 	dmb	ish
 8014e38:	60c3      	str	r3, [r0, #12]
 8014e3a:	bd10      	pop	{r4, pc}

08014e3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014e3c:	6903      	ldr	r3, [r0, #16]
 8014e3e:	6882      	ldr	r2, [r0, #8]
 8014e40:	3301      	adds	r3, #1
 8014e42:	429a      	cmp	r2, r3
 8014e44:	bfd8      	it	le
 8014e46:	1a9b      	suble	r3, r3, r2
 8014e48:	f3bf 8f5b 	dmb	ish
 8014e4c:	6103      	str	r3, [r0, #16]
 8014e4e:	4770      	bx	lr

08014e50 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014e50:	b570      	push	{r4, r5, r6, lr}
 8014e52:	4604      	mov	r4, r0
 8014e54:	460e      	mov	r6, r1
 8014e56:	6860      	ldr	r0, [r4, #4]
 8014e58:	6803      	ldr	r3, [r0, #0]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4798      	blx	r3
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	d1f9      	bne.n	8014e56 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014e62:	4d0d      	ldr	r5, [pc, #52]	; (8014e98 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014e64:	6828      	ldr	r0, [r5, #0]
 8014e66:	6803      	ldr	r3, [r0, #0]
 8014e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e6a:	4798      	blx	r3
 8014e6c:	f7fd fbae 	bl	80125cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014e70:	6828      	ldr	r0, [r5, #0]
 8014e72:	2101      	movs	r1, #1
 8014e74:	f7ff ff12 	bl	8014c9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014e78:	6860      	ldr	r0, [r4, #4]
 8014e7a:	4631      	mov	r1, r6
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	689b      	ldr	r3, [r3, #8]
 8014e80:	4798      	blx	r3
 8014e82:	6823      	ldr	r3, [r4, #0]
 8014e84:	4620      	mov	r0, r4
 8014e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e88:	4798      	blx	r3
 8014e8a:	6828      	ldr	r0, [r5, #0]
 8014e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e90:	6803      	ldr	r3, [r0, #0]
 8014e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e94:	4718      	bx	r3
 8014e96:	bf00      	nop
 8014e98:	2004f6f4 	.word	0x2004f6f4

08014e9c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014e9c:	b508      	push	{r3, lr}
 8014e9e:	f7fd fb53 	bl	8012548 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014ea6:	f7fd bb6f 	b.w	8012588 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014eaa <_ZN8touchgfx13DMA_Interface5startEv>:
 8014eaa:	b510      	push	{r4, lr}
 8014eac:	4604      	mov	r4, r0
 8014eae:	6840      	ldr	r0, [r0, #4]
 8014eb0:	6803      	ldr	r3, [r0, #0]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4798      	blx	r3
 8014eb6:	b948      	cbnz	r0, 8014ecc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014eb8:	7a63      	ldrb	r3, [r4, #9]
 8014eba:	b13b      	cbz	r3, 8014ecc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ebc:	7a23      	ldrb	r3, [r4, #8]
 8014ebe:	b92b      	cbnz	r3, 8014ecc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ec0:	6823      	ldr	r3, [r4, #0]
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eca:	4718      	bx	r3
 8014ecc:	bd10      	pop	{r4, pc}

08014ece <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014ece:	b570      	push	{r4, r5, r6, lr}
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	6840      	ldr	r0, [r0, #4]
 8014ed4:	6803      	ldr	r3, [r0, #0]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4798      	blx	r3
 8014eda:	4605      	mov	r5, r0
 8014edc:	b930      	cbnz	r0, 8014eec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014ede:	7a23      	ldrb	r3, [r4, #8]
 8014ee0:	b123      	cbz	r3, 8014eec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014ee2:	6860      	ldr	r0, [r4, #4]
 8014ee4:	6803      	ldr	r3, [r0, #0]
 8014ee6:	695b      	ldr	r3, [r3, #20]
 8014ee8:	4798      	blx	r3
 8014eea:	7225      	strb	r5, [r4, #8]
 8014eec:	6860      	ldr	r0, [r4, #4]
 8014eee:	6803      	ldr	r3, [r0, #0]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	4798      	blx	r3
 8014ef4:	b928      	cbnz	r0, 8014f02 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014ef6:	6823      	ldr	r3, [r4, #0]
 8014ef8:	4620      	mov	r0, r4
 8014efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f00:	4718      	bx	r3
 8014f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f06:	f7fd bb6d 	b.w	80125e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014f0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014f0c:	6082      	str	r2, [r0, #8]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	b510      	push	{r4, lr}
 8014f12:	4c03      	ldr	r4, [pc, #12]	; (8014f20 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014f14:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014f18:	e9c0 4100 	strd	r4, r1, [r0]
 8014f1c:	bd10      	pop	{r4, pc}
 8014f1e:	bf00      	nop
 8014f20:	080295c8 	.word	0x080295c8

08014f24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014f24:	6840      	ldr	r0, [r0, #4]
 8014f26:	6803      	ldr	r3, [r0, #0]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4718      	bx	r3

08014f2c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8014f2c:	b508      	push	{r3, lr}
 8014f2e:	4b05      	ldr	r3, [pc, #20]	; (8014f44 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014f38:	4798      	blx	r3
 8014f3a:	1e43      	subs	r3, r0, #1
 8014f3c:	4258      	negs	r0, r3
 8014f3e:	4158      	adcs	r0, r3
 8014f40:	bd08      	pop	{r3, pc}
 8014f42:	bf00      	nop
 8014f44:	2004f6f4 	.word	0x2004f6f4

08014f48 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8014f48:	b430      	push	{r4, r5}
 8014f4a:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8014f4e:	8a02      	ldrh	r2, [r0, #16]
 8014f50:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8014f54:	9202      	str	r2, [sp, #8]
 8014f56:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014f5a:	68c2      	ldr	r2, [r0, #12]
 8014f5c:	4629      	mov	r1, r5
 8014f5e:	4620      	mov	r0, r4
 8014f60:	bc30      	pop	{r4, r5}
 8014f62:	f7fd bfdb 	b.w	8012f1c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08014f66 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8014f66:	f7fd bfc1 	b.w	8012eec <_ZN8touchgfx5paint6rgb5658tearDownEv>

08014f6a <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8014f70:	cb03      	ldmia	r3!, {r0, r1}
 8014f72:	6010      	str	r0, [r2, #0]
 8014f74:	6051      	str	r1, [r2, #4]
 8014f76:	4610      	mov	r0, r2
 8014f78:	4770      	bx	lr

08014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8014f7a:	b507      	push	{r0, r1, r2, lr}
 8014f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014f80:	ab01      	add	r3, sp, #4
 8014f82:	6809      	ldr	r1, [r1, #0]
 8014f84:	6800      	ldr	r0, [r0, #0]
 8014f86:	f004 f856 	bl	8019036 <_ZN8touchgfx6muldivElllRl>
 8014f8a:	b003      	add	sp, #12
 8014f8c:	f85d fb04 	ldr.w	pc, [sp], #4

08014f90 <_ZN8touchgfx7CWRUtil4sineEi>:
 8014f90:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014f94:	fb90 f2f3 	sdiv	r2, r0, r3
 8014f98:	fb02 0013 	mls	r0, r2, r3, r0
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	bfb8      	it	lt
 8014fa0:	18c0      	addlt	r0, r0, r3
 8014fa2:	285a      	cmp	r0, #90	; 0x5a
 8014fa4:	4b09      	ldr	r3, [pc, #36]	; (8014fcc <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8014fa6:	dc02      	bgt.n	8014fae <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8014fa8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014fac:	4770      	bx	lr
 8014fae:	28b4      	cmp	r0, #180	; 0xb4
 8014fb0:	dc02      	bgt.n	8014fb8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8014fb2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014fb6:	e7f7      	b.n	8014fa8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8014fb8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014fbc:	bfd4      	ite	le
 8014fbe:	38b4      	suble	r0, #180	; 0xb4
 8014fc0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014fc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014fc8:	4240      	negs	r0, r0
 8014fca:	4770      	bx	lr
 8014fcc:	0802962c 	.word	0x0802962c

08014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8014fd0:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8014fd4:	fb90 f2f3 	sdiv	r2, r0, r3
 8014fd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fda:	fb02 0013 	mls	r0, r2, r3, r0
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	bfb8      	it	lt
 8014fe2:	18c0      	addlt	r0, r0, r3
 8014fe4:	1144      	asrs	r4, r0, #5
 8014fe6:	f000 061f 	and.w	r6, r0, #31
 8014fea:	4620      	mov	r0, r4
 8014fec:	f7ff ffd0 	bl	8014f90 <_ZN8touchgfx7CWRUtil4sineEi>
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	b90e      	cbnz	r6, 8014ff8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8014ff4:	b002      	add	sp, #8
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	1c60      	adds	r0, r4, #1
 8014ffa:	f7ff ffc9 	bl	8014f90 <_ZN8touchgfx7CWRUtil4sineEi>
 8014ffe:	ab01      	add	r3, sp, #4
 8015000:	2220      	movs	r2, #32
 8015002:	4631      	mov	r1, r6
 8015004:	1b40      	subs	r0, r0, r5
 8015006:	f004 f816 	bl	8019036 <_ZN8touchgfx6muldivElllRl>
 801500a:	4428      	add	r0, r5
 801500c:	e7f2      	b.n	8014ff4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0801500e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 801500e:	b507      	push	{r0, r1, r2, lr}
 8015010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015014:	ab01      	add	r3, sp, #4
 8015016:	0140      	lsls	r0, r0, #5
 8015018:	f004 f80d 	bl	8019036 <_ZN8touchgfx6muldivElllRl>
 801501c:	2320      	movs	r3, #32
 801501e:	fb90 f0f3 	sdiv	r0, r0, r3
 8015022:	b003      	add	sp, #12
 8015024:	f85d fb04 	ldr.w	pc, [sp], #4

08015028 <_ZN8touchgfx13AbstractShapeC1Ev>:
 8015028:	b510      	push	{r4, lr}
 801502a:	4604      	mov	r4, r0
 801502c:	f000 fe28 	bl	8015c80 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015030:	4b07      	ldr	r3, [pc, #28]	; (8015050 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 8015032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015036:	6023      	str	r3, [r4, #0]
 8015038:	2300      	movs	r3, #0
 801503a:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 801503e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8015042:	6363      	str	r3, [r4, #52]	; 0x34
 8015044:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8015048:	60a3      	str	r3, [r4, #8]
 801504a:	4620      	mov	r0, r4
 801504c:	bd10      	pop	{r4, pc}
 801504e:	bf00      	nop
 8015050:	080296ec 	.word	0x080296ec

08015054 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8015054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015058:	2500      	movs	r5, #0
 801505a:	6803      	ldr	r3, [r0, #0]
 801505c:	b087      	sub	sp, #28
 801505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015060:	4604      	mov	r4, r0
 8015062:	4798      	blx	r3
 8015064:	462e      	mov	r6, r5
 8015066:	46a8      	mov	r8, r5
 8015068:	462f      	mov	r7, r5
 801506a:	46a9      	mov	r9, r5
 801506c:	9000      	str	r0, [sp, #0]
 801506e:	9b00      	ldr	r3, [sp, #0]
 8015070:	429d      	cmp	r5, r3
 8015072:	da7d      	bge.n	8015170 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x11c>
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	4629      	mov	r1, r5
 8015078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801507a:	4620      	mov	r0, r4
 801507c:	4798      	blx	r3
 801507e:	6823      	ldr	r3, [r4, #0]
 8015080:	4682      	mov	sl, r0
 8015082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015084:	4629      	mov	r1, r5
 8015086:	4620      	mov	r0, r4
 8015088:	4798      	blx	r3
 801508a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801508c:	4683      	mov	fp, r0
 801508e:	4650      	mov	r0, sl
 8015090:	f7ff ffbd 	bl	801500e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8015094:	9002      	str	r0, [sp, #8]
 8015096:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015098:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801509c:	f7ff ff98 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80150a0:	a903      	add	r1, sp, #12
 80150a2:	9003      	str	r0, [sp, #12]
 80150a4:	a802      	add	r0, sp, #8
 80150a6:	f7ff ff68 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80150ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80150ae:	4402      	add	r2, r0
 80150b0:	4658      	mov	r0, fp
 80150b2:	9201      	str	r2, [sp, #4]
 80150b4:	f7ff ffab 	bl	801500e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80150b8:	9004      	str	r0, [sp, #16]
 80150ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80150bc:	f7ff ff88 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80150c0:	a905      	add	r1, sp, #20
 80150c2:	9005      	str	r0, [sp, #20]
 80150c4:	a804      	add	r0, sp, #16
 80150c6:	f7ff ff58 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80150ca:	9a01      	ldr	r2, [sp, #4]
 80150cc:	1a12      	subs	r2, r2, r0
 80150ce:	b125      	cbz	r5, 80150da <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x86>
 80150d0:	2320      	movs	r3, #32
 80150d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80150d6:	429f      	cmp	r7, r3
 80150d8:	da03      	bge.n	80150e2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8e>
 80150da:	2720      	movs	r7, #32
 80150dc:	fb92 f7f7 	sdiv	r7, r2, r7
 80150e0:	b125      	cbz	r5, 80150ec <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x98>
 80150e2:	2320      	movs	r3, #32
 80150e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80150e8:	4599      	cmp	r9, r3
 80150ea:	dd03      	ble.n	80150f4 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa0>
 80150ec:	f04f 0920 	mov.w	r9, #32
 80150f0:	fb92 f9f9 	sdiv	r9, r2, r9
 80150f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80150f6:	4658      	mov	r0, fp
 80150f8:	9201      	str	r2, [sp, #4]
 80150fa:	f7ff ff88 	bl	801500e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80150fe:	9002      	str	r0, [sp, #8]
 8015100:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015102:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8015106:	f7ff ff63 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801510a:	a903      	add	r1, sp, #12
 801510c:	9003      	str	r0, [sp, #12]
 801510e:	a802      	add	r0, sp, #8
 8015110:	f7ff ff33 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015118:	eb00 0b03 	add.w	fp, r0, r3
 801511c:	4650      	mov	r0, sl
 801511e:	f7ff ff76 	bl	801500e <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8015122:	9004      	str	r0, [sp, #16]
 8015124:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015126:	f7ff ff53 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801512a:	a905      	add	r1, sp, #20
 801512c:	9005      	str	r0, [sp, #20]
 801512e:	a804      	add	r0, sp, #16
 8015130:	f7ff ff23 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015134:	9a01      	ldr	r2, [sp, #4]
 8015136:	eb00 030b 	add.w	r3, r0, fp
 801513a:	b125      	cbz	r5, 8015146 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf2>
 801513c:	2120      	movs	r1, #32
 801513e:	fb93 f1f1 	sdiv	r1, r3, r1
 8015142:	428e      	cmp	r6, r1
 8015144:	da03      	bge.n	801514e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfa>
 8015146:	2620      	movs	r6, #32
 8015148:	fb93 f6f6 	sdiv	r6, r3, r6
 801514c:	b125      	cbz	r5, 8015158 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x104>
 801514e:	2120      	movs	r1, #32
 8015150:	fb93 f1f1 	sdiv	r1, r3, r1
 8015154:	4588      	cmp	r8, r1
 8015156:	dd03      	ble.n	8015160 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x10c>
 8015158:	f04f 0820 	mov.w	r8, #32
 801515c:	fb93 f8f8 	sdiv	r8, r3, r8
 8015160:	6821      	ldr	r1, [r4, #0]
 8015162:	4620      	mov	r0, r4
 8015164:	f8d1 a080 	ldr.w	sl, [r1, #128]	; 0x80
 8015168:	4629      	mov	r1, r5
 801516a:	47d0      	blx	sl
 801516c:	3501      	adds	r5, #1
 801516e:	e77e      	b.n	801506e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8015170:	3701      	adds	r7, #1
 8015172:	3601      	adds	r6, #1
 8015174:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 8015178:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
 801517c:	eba7 0909 	sub.w	r9, r7, r9
 8015180:	eba6 0808 	sub.w	r8, r6, r8
 8015184:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 8015188:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 801518c:	b007      	add	sp, #28
 801518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015194 <_ZN8touchgfx6CanvasD1Ev>:
 8015194:	b510      	push	{r4, lr}
 8015196:	4604      	mov	r4, r0
 8015198:	4b03      	ldr	r3, [pc, #12]	; (80151a8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801519a:	f840 3b20 	str.w	r3, [r0], #32
 801519e:	f000 fed9 	bl	8015f54 <_ZN8touchgfx7OutlineD1Ev>
 80151a2:	4620      	mov	r0, r4
 80151a4:	bd10      	pop	{r4, pc}
 80151a6:	bf00      	nop
 80151a8:	08029624 	.word	0x08029624

080151ac <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 80151ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ae:	4604      	mov	r4, r0
 80151b0:	b09d      	sub	sp, #116	; 0x74
 80151b2:	460a      	mov	r2, r1
 80151b4:	4601      	mov	r1, r0
 80151b6:	4668      	mov	r0, sp
 80151b8:	f011 f8e4 	bl	8026384 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80151bc:	6823      	ldr	r3, [r4, #0]
 80151be:	4620      	mov	r0, r4
 80151c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151c2:	4798      	blx	r3
 80151c4:	4606      	mov	r6, r0
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d037      	beq.n	801523a <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x8e>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	2100      	movs	r1, #0
 80151ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151d2:	4620      	mov	r0, r4
 80151d4:	4798      	blx	r3
 80151d6:	6823      	ldr	r3, [r4, #0]
 80151d8:	4605      	mov	r5, r0
 80151da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80151de:	2100      	movs	r1, #0
 80151e0:	4620      	mov	r0, r4
 80151e2:	4798      	blx	r3
 80151e4:	4629      	mov	r1, r5
 80151e6:	4602      	mov	r2, r0
 80151e8:	4668      	mov	r0, sp
 80151ea:	f011 faa1 	bl	8026730 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80151ee:	2501      	movs	r5, #1
 80151f0:	42b5      	cmp	r5, r6
 80151f2:	da17      	bge.n	8015224 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x78>
 80151f4:	6823      	ldr	r3, [r4, #0]
 80151f6:	4629      	mov	r1, r5
 80151f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151fc:	4620      	mov	r0, r4
 80151fe:	4798      	blx	r3
 8015200:	6823      	ldr	r3, [r4, #0]
 8015202:	4607      	mov	r7, r0
 8015204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015208:	4629      	mov	r1, r5
 801520a:	4620      	mov	r0, r4
 801520c:	4798      	blx	r3
 801520e:	4639      	mov	r1, r7
 8015210:	4602      	mov	r2, r0
 8015212:	4668      	mov	r0, sp
 8015214:	f011 f964 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015218:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801521c:	429a      	cmp	r2, r3
 801521e:	d80e      	bhi.n	801523e <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x92>
 8015220:	3501      	adds	r5, #1
 8015222:	e7e5      	b.n	80151f0 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x44>
 8015224:	21ff      	movs	r1, #255	; 0xff
 8015226:	4668      	mov	r0, sp
 8015228:	f011 f9d6 	bl	80265d8 <_ZN8touchgfx6Canvas6renderEh>
 801522c:	4604      	mov	r4, r0
 801522e:	4668      	mov	r0, sp
 8015230:	f7ff ffb0 	bl	8015194 <_ZN8touchgfx6CanvasD1Ev>
 8015234:	4620      	mov	r0, r4
 8015236:	b01d      	add	sp, #116	; 0x74
 8015238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801523a:	2401      	movs	r4, #1
 801523c:	e7f7      	b.n	801522e <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 801523e:	2400      	movs	r4, #0
 8015240:	e7f5      	b.n	801522e <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>

08015242 <_ZN8touchgfx6CanvasD0Ev>:
 8015242:	b510      	push	{r4, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	f7ff ffa5 	bl	8015194 <_ZN8touchgfx6CanvasD1Ev>
 801524a:	4620      	mov	r0, r4
 801524c:	2170      	movs	r1, #112	; 0x70
 801524e:	f011 fac1 	bl	80267d4 <_ZdlPvj>
 8015252:	4620      	mov	r0, r4
 8015254:	bd10      	pop	{r4, pc}

08015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8015256:	b508      	push	{r3, lr}
 8015258:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801525c:	f7ff feb8 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015260:	bd08      	pop	{r3, pc}
	...

08015264 <_ZN8touchgfx6CircleC1Ev>:
 8015264:	b510      	push	{r4, lr}
 8015266:	4604      	mov	r4, r0
 8015268:	f000 fd0a 	bl	8015c80 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801526c:	4b08      	ldr	r3, [pc, #32]	; (8015290 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801526e:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8015272:	6023      	str	r3, [r4, #0]
 8015274:	2300      	movs	r3, #0
 8015276:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 801527a:	f24b 4205 	movw	r2, #46085	; 0xb405
 801527e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8015282:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8015286:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 801528a:	60a3      	str	r3, [r4, #8]
 801528c:	4620      	mov	r0, r4
 801528e:	bd10      	pop	{r4, pc}
 8015290:	08029780 	.word	0x08029780

08015294 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8015294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015298:	4680      	mov	r8, r0
 801529a:	4610      	mov	r0, r2
 801529c:	428a      	cmp	r2, r1
 801529e:	bfa8      	it	ge
 80152a0:	460a      	movge	r2, r1
 80152a2:	4699      	mov	r9, r3
 80152a4:	bfac      	ite	ge
 80152a6:	4603      	movge	r3, r0
 80152a8:	460b      	movlt	r3, r1
 80152aa:	1a99      	subs	r1, r3, r2
 80152ac:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80152b0:	bfa4      	itt	ge
 80152b2:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80152b6:	2200      	movge	r2, #0
 80152b8:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 80152bc:	b085      	sub	sp, #20
 80152be:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 80152c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80152ca:	f102 0b01 	add.w	fp, r2, #1
 80152ce:	2c00      	cmp	r4, #0
 80152d0:	f040 80af 	bne.w	8015432 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19e>
 80152d4:	4610      	mov	r0, r2
 80152d6:	9201      	str	r2, [sp, #4]
 80152d8:	f7ff fe7a 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80152dc:	a903      	add	r1, sp, #12
 80152de:	9003      	str	r0, [sp, #12]
 80152e0:	4650      	mov	r0, sl
 80152e2:	f7ff fe4a 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152e6:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80152ea:	9a01      	ldr	r2, [sp, #4]
 80152ec:	4408      	add	r0, r1
 80152ee:	f8d9 1000 	ldr.w	r1, [r9]
 80152f2:	4281      	cmp	r1, r0
 80152f4:	bfc8      	it	gt
 80152f6:	f8c9 0000 	strgt.w	r0, [r9]
 80152fa:	6839      	ldr	r1, [r7, #0]
 80152fc:	4288      	cmp	r0, r1
 80152fe:	bfc8      	it	gt
 8015300:	6038      	strgt	r0, [r7, #0]
 8015302:	4610      	mov	r0, r2
 8015304:	f7ff ffa7 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015308:	a903      	add	r1, sp, #12
 801530a:	9003      	str	r0, [sp, #12]
 801530c:	4650      	mov	r0, sl
 801530e:	f7ff fe34 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015312:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8015316:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801531a:	1a10      	subs	r0, r2, r0
 801531c:	6832      	ldr	r2, [r6, #0]
 801531e:	4282      	cmp	r2, r0
 8015320:	bfc8      	it	gt
 8015322:	6030      	strgt	r0, [r6, #0]
 8015324:	682a      	ldr	r2, [r5, #0]
 8015326:	4290      	cmp	r0, r2
 8015328:	fb9b f2f1 	sdiv	r2, fp, r1
 801532c:	fb01 b212 	mls	r2, r1, r2, fp
 8015330:	eba1 0202 	sub.w	r2, r1, r2
 8015334:	bfc8      	it	gt
 8015336:	6028      	strgt	r0, [r5, #0]
 8015338:	fb92 f0f1 	sdiv	r0, r2, r1
 801533c:	fb01 2210 	mls	r2, r1, r0, r2
 8015340:	4493      	add	fp, r2
 8015342:	9b00      	ldr	r3, [sp, #0]
 8015344:	455b      	cmp	r3, fp
 8015346:	db2a      	blt.n	801539e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10a>
 8015348:	4658      	mov	r0, fp
 801534a:	f7ff fe41 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801534e:	a903      	add	r1, sp, #12
 8015350:	9003      	str	r0, [sp, #12]
 8015352:	4650      	mov	r0, sl
 8015354:	f7ff fe11 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015358:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801535c:	4410      	add	r0, r2
 801535e:	f8d9 2000 	ldr.w	r2, [r9]
 8015362:	4282      	cmp	r2, r0
 8015364:	bfc8      	it	gt
 8015366:	f8c9 0000 	strgt.w	r0, [r9]
 801536a:	683a      	ldr	r2, [r7, #0]
 801536c:	4290      	cmp	r0, r2
 801536e:	bfc8      	it	gt
 8015370:	6038      	strgt	r0, [r7, #0]
 8015372:	4658      	mov	r0, fp
 8015374:	f7ff ff6f 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015378:	a903      	add	r1, sp, #12
 801537a:	9003      	str	r0, [sp, #12]
 801537c:	4650      	mov	r0, sl
 801537e:	f7ff fdfc 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015382:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8015386:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 801538a:	1a10      	subs	r0, r2, r0
 801538c:	6832      	ldr	r2, [r6, #0]
 801538e:	4282      	cmp	r2, r0
 8015390:	bfc8      	it	gt
 8015392:	6030      	strgt	r0, [r6, #0]
 8015394:	682a      	ldr	r2, [r5, #0]
 8015396:	4290      	cmp	r0, r2
 8015398:	bfc8      	it	gt
 801539a:	6028      	strgt	r0, [r5, #0]
 801539c:	e7d1      	b.n	8015342 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xae>
 801539e:	9b00      	ldr	r3, [sp, #0]
 80153a0:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80153a4:	455b      	cmp	r3, fp
 80153a6:	dd27      	ble.n	80153f8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x164>
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7ff fe11 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80153ae:	a903      	add	r1, sp, #12
 80153b0:	9003      	str	r0, [sp, #12]
 80153b2:	4650      	mov	r0, sl
 80153b4:	f7ff fde1 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153b8:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80153bc:	4410      	add	r0, r2
 80153be:	f8d9 2000 	ldr.w	r2, [r9]
 80153c2:	4282      	cmp	r2, r0
 80153c4:	bfc8      	it	gt
 80153c6:	f8c9 0000 	strgt.w	r0, [r9]
 80153ca:	683a      	ldr	r2, [r7, #0]
 80153cc:	4290      	cmp	r0, r2
 80153ce:	bfc8      	it	gt
 80153d0:	6038      	strgt	r0, [r7, #0]
 80153d2:	9800      	ldr	r0, [sp, #0]
 80153d4:	f7ff ff3f 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80153d8:	a903      	add	r1, sp, #12
 80153da:	9003      	str	r0, [sp, #12]
 80153dc:	4650      	mov	r0, sl
 80153de:	f7ff fdcc 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80153e2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80153e6:	1a10      	subs	r0, r2, r0
 80153e8:	6832      	ldr	r2, [r6, #0]
 80153ea:	4282      	cmp	r2, r0
 80153ec:	bfc8      	it	gt
 80153ee:	6030      	strgt	r0, [r6, #0]
 80153f0:	682a      	ldr	r2, [r5, #0]
 80153f2:	4290      	cmp	r0, r2
 80153f4:	bfc8      	it	gt
 80153f6:	6028      	strgt	r0, [r5, #0]
 80153f8:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80153fc:	f8d9 1000 	ldr.w	r1, [r9]
 8015400:	4291      	cmp	r1, r2
 8015402:	bfc8      	it	gt
 8015404:	f8c9 2000 	strgt.w	r2, [r9]
 8015408:	683a      	ldr	r2, [r7, #0]
 801540a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801540e:	429a      	cmp	r2, r3
 8015410:	bfb8      	it	lt
 8015412:	603b      	strlt	r3, [r7, #0]
 8015414:	6832      	ldr	r2, [r6, #0]
 8015416:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801541a:	429a      	cmp	r2, r3
 801541c:	bfc8      	it	gt
 801541e:	6033      	strgt	r3, [r6, #0]
 8015420:	682a      	ldr	r2, [r5, #0]
 8015422:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8015426:	429a      	cmp	r2, r3
 8015428:	da00      	bge.n	801542c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 801542a:	602b      	str	r3, [r5, #0]
 801542c:	b005      	add	sp, #20
 801542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015432:	2002      	movs	r0, #2
 8015434:	3401      	adds	r4, #1
 8015436:	fb94 f4f0 	sdiv	r4, r4, r0
 801543a:	4610      	mov	r0, r2
 801543c:	9201      	str	r2, [sp, #4]
 801543e:	f7ff fdc7 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015442:	a903      	add	r1, sp, #12
 8015444:	9003      	str	r0, [sp, #12]
 8015446:	4650      	mov	r0, sl
 8015448:	f7ff fd97 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801544c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8015450:	9a01      	ldr	r2, [sp, #4]
 8015452:	4408      	add	r0, r1
 8015454:	f8d9 1000 	ldr.w	r1, [r9]
 8015458:	1b03      	subs	r3, r0, r4
 801545a:	4299      	cmp	r1, r3
 801545c:	bfc8      	it	gt
 801545e:	f8c9 3000 	strgt.w	r3, [r9]
 8015462:	6839      	ldr	r1, [r7, #0]
 8015464:	4420      	add	r0, r4
 8015466:	428b      	cmp	r3, r1
 8015468:	bfc8      	it	gt
 801546a:	603b      	strgt	r3, [r7, #0]
 801546c:	f8d9 1000 	ldr.w	r1, [r9]
 8015470:	4281      	cmp	r1, r0
 8015472:	bfc8      	it	gt
 8015474:	f8c9 0000 	strgt.w	r0, [r9]
 8015478:	6839      	ldr	r1, [r7, #0]
 801547a:	4288      	cmp	r0, r1
 801547c:	bfc8      	it	gt
 801547e:	6038      	strgt	r0, [r7, #0]
 8015480:	4610      	mov	r0, r2
 8015482:	f7ff fee8 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015486:	a903      	add	r1, sp, #12
 8015488:	9003      	str	r0, [sp, #12]
 801548a:	4650      	mov	r0, sl
 801548c:	f7ff fd75 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015490:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8015494:	1a10      	subs	r0, r2, r0
 8015496:	6832      	ldr	r2, [r6, #0]
 8015498:	1b01      	subs	r1, r0, r4
 801549a:	428a      	cmp	r2, r1
 801549c:	bfc8      	it	gt
 801549e:	6031      	strgt	r1, [r6, #0]
 80154a0:	682a      	ldr	r2, [r5, #0]
 80154a2:	4420      	add	r0, r4
 80154a4:	4291      	cmp	r1, r2
 80154a6:	bfc8      	it	gt
 80154a8:	6029      	strgt	r1, [r5, #0]
 80154aa:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80154ae:	6832      	ldr	r2, [r6, #0]
 80154b0:	4282      	cmp	r2, r0
 80154b2:	bfc8      	it	gt
 80154b4:	6030      	strgt	r0, [r6, #0]
 80154b6:	682a      	ldr	r2, [r5, #0]
 80154b8:	4290      	cmp	r0, r2
 80154ba:	fb9b f2f1 	sdiv	r2, fp, r1
 80154be:	fb01 b212 	mls	r2, r1, r2, fp
 80154c2:	eba1 0202 	sub.w	r2, r1, r2
 80154c6:	bfc8      	it	gt
 80154c8:	6028      	strgt	r0, [r5, #0]
 80154ca:	fb92 f0f1 	sdiv	r0, r2, r1
 80154ce:	fb01 2210 	mls	r2, r1, r0, r2
 80154d2:	4493      	add	fp, r2
 80154d4:	9b00      	ldr	r3, [sp, #0]
 80154d6:	455b      	cmp	r3, fp
 80154d8:	db40      	blt.n	801555c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c8>
 80154da:	4658      	mov	r0, fp
 80154dc:	f7ff fd78 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80154e0:	a903      	add	r1, sp, #12
 80154e2:	9003      	str	r0, [sp, #12]
 80154e4:	4650      	mov	r0, sl
 80154e6:	f7ff fd48 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80154ea:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80154ee:	4410      	add	r0, r2
 80154f0:	f8d9 2000 	ldr.w	r2, [r9]
 80154f4:	1b01      	subs	r1, r0, r4
 80154f6:	428a      	cmp	r2, r1
 80154f8:	bfc8      	it	gt
 80154fa:	f8c9 1000 	strgt.w	r1, [r9]
 80154fe:	683a      	ldr	r2, [r7, #0]
 8015500:	4420      	add	r0, r4
 8015502:	4291      	cmp	r1, r2
 8015504:	bfc8      	it	gt
 8015506:	6039      	strgt	r1, [r7, #0]
 8015508:	f8d9 2000 	ldr.w	r2, [r9]
 801550c:	4282      	cmp	r2, r0
 801550e:	bfc8      	it	gt
 8015510:	f8c9 0000 	strgt.w	r0, [r9]
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	4290      	cmp	r0, r2
 8015518:	bfc8      	it	gt
 801551a:	6038      	strgt	r0, [r7, #0]
 801551c:	4658      	mov	r0, fp
 801551e:	f7ff fe9a 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015522:	a903      	add	r1, sp, #12
 8015524:	9003      	str	r0, [sp, #12]
 8015526:	4650      	mov	r0, sl
 8015528:	f7ff fd27 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801552c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8015530:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 8015534:	1a10      	subs	r0, r2, r0
 8015536:	6832      	ldr	r2, [r6, #0]
 8015538:	1b01      	subs	r1, r0, r4
 801553a:	428a      	cmp	r2, r1
 801553c:	bfc8      	it	gt
 801553e:	6031      	strgt	r1, [r6, #0]
 8015540:	682a      	ldr	r2, [r5, #0]
 8015542:	4420      	add	r0, r4
 8015544:	4291      	cmp	r1, r2
 8015546:	bfc8      	it	gt
 8015548:	6029      	strgt	r1, [r5, #0]
 801554a:	6832      	ldr	r2, [r6, #0]
 801554c:	4282      	cmp	r2, r0
 801554e:	bfc8      	it	gt
 8015550:	6030      	strgt	r0, [r6, #0]
 8015552:	682a      	ldr	r2, [r5, #0]
 8015554:	4290      	cmp	r0, r2
 8015556:	bfc8      	it	gt
 8015558:	6028      	strgt	r0, [r5, #0]
 801555a:	e7bb      	b.n	80154d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x240>
 801555c:	9b00      	ldr	r3, [sp, #0]
 801555e:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 8015562:	455b      	cmp	r3, fp
 8015564:	f77f af62 	ble.w	801542c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>
 8015568:	4618      	mov	r0, r3
 801556a:	f7ff fd31 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801556e:	a903      	add	r1, sp, #12
 8015570:	9003      	str	r0, [sp, #12]
 8015572:	4650      	mov	r0, sl
 8015574:	f7ff fd01 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015578:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801557c:	4410      	add	r0, r2
 801557e:	f8d9 2000 	ldr.w	r2, [r9]
 8015582:	1b01      	subs	r1, r0, r4
 8015584:	428a      	cmp	r2, r1
 8015586:	bfc8      	it	gt
 8015588:	f8c9 1000 	strgt.w	r1, [r9]
 801558c:	683a      	ldr	r2, [r7, #0]
 801558e:	4420      	add	r0, r4
 8015590:	4291      	cmp	r1, r2
 8015592:	bfc8      	it	gt
 8015594:	6039      	strgt	r1, [r7, #0]
 8015596:	f8d9 2000 	ldr.w	r2, [r9]
 801559a:	4282      	cmp	r2, r0
 801559c:	bfc8      	it	gt
 801559e:	f8c9 0000 	strgt.w	r0, [r9]
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	4298      	cmp	r0, r3
 80155a6:	bfc8      	it	gt
 80155a8:	6038      	strgt	r0, [r7, #0]
 80155aa:	9800      	ldr	r0, [sp, #0]
 80155ac:	f7ff fe53 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80155b0:	a903      	add	r1, sp, #12
 80155b2:	9003      	str	r0, [sp, #12]
 80155b4:	4650      	mov	r0, sl
 80155b6:	f7ff fce0 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80155ba:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80155be:	6832      	ldr	r2, [r6, #0]
 80155c0:	1a18      	subs	r0, r3, r0
 80155c2:	1b03      	subs	r3, r0, r4
 80155c4:	429a      	cmp	r2, r3
 80155c6:	bfc8      	it	gt
 80155c8:	6033      	strgt	r3, [r6, #0]
 80155ca:	682a      	ldr	r2, [r5, #0]
 80155cc:	4404      	add	r4, r0
 80155ce:	4293      	cmp	r3, r2
 80155d0:	bfc8      	it	gt
 80155d2:	602b      	strgt	r3, [r5, #0]
 80155d4:	6833      	ldr	r3, [r6, #0]
 80155d6:	42a3      	cmp	r3, r4
 80155d8:	bfc8      	it	gt
 80155da:	6034      	strgt	r4, [r6, #0]
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	429c      	cmp	r4, r3
 80155e0:	bfc8      	it	gt
 80155e2:	602c      	strgt	r4, [r5, #0]
 80155e4:	e722      	b.n	801542c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x198>

080155e6 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 80155e6:	b530      	push	{r4, r5, lr}
 80155e8:	4604      	mov	r4, r0
 80155ea:	4608      	mov	r0, r1
 80155ec:	2500      	movs	r5, #0
 80155ee:	4611      	mov	r1, r2
 80155f0:	461a      	mov	r2, r3
 80155f2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80155f6:	b089      	sub	sp, #36	; 0x24
 80155f8:	015b      	lsls	r3, r3, #5
 80155fa:	9304      	str	r3, [sp, #16]
 80155fc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015600:	9505      	str	r5, [sp, #20]
 8015602:	015b      	lsls	r3, r3, #5
 8015604:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015608:	2520      	movs	r5, #32
 801560a:	ab07      	add	r3, sp, #28
 801560c:	9302      	str	r3, [sp, #8]
 801560e:	ab06      	add	r3, sp, #24
 8015610:	9301      	str	r3, [sp, #4]
 8015612:	ab05      	add	r3, sp, #20
 8015614:	9300      	str	r3, [sp, #0]
 8015616:	ab04      	add	r3, sp, #16
 8015618:	f7ff fe3c 	bl	8015294 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 801561c:	9a04      	ldr	r2, [sp, #16]
 801561e:	9805      	ldr	r0, [sp, #20]
 8015620:	fb92 f2f5 	sdiv	r2, r2, r5
 8015624:	fb90 f0f5 	sdiv	r0, r0, r5
 8015628:	9b06      	ldr	r3, [sp, #24]
 801562a:	9907      	ldr	r1, [sp, #28]
 801562c:	b292      	uxth	r2, r2
 801562e:	fb93 f3f5 	sdiv	r3, r3, r5
 8015632:	fb91 f1f5 	sdiv	r1, r1, r5
 8015636:	3002      	adds	r0, #2
 8015638:	1a80      	subs	r0, r0, r2
 801563a:	80a0      	strh	r0, [r4, #4]
 801563c:	4620      	mov	r0, r4
 801563e:	b29b      	uxth	r3, r3
 8015640:	3102      	adds	r1, #2
 8015642:	1ac9      	subs	r1, r1, r3
 8015644:	3a01      	subs	r2, #1
 8015646:	3b01      	subs	r3, #1
 8015648:	8022      	strh	r2, [r4, #0]
 801564a:	8063      	strh	r3, [r4, #2]
 801564c:	80e1      	strh	r1, [r4, #6]
 801564e:	b009      	add	sp, #36	; 0x24
 8015650:	bd30      	pop	{r4, r5, pc}

08015652 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8015652:	b510      	push	{r4, lr}
 8015654:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8015658:	4604      	mov	r4, r0
 801565a:	f7ff ffc4 	bl	80155e6 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 801565e:	4620      	mov	r0, r4
 8015660:	bd10      	pop	{r4, pc}

08015662 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8015662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015666:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 801566a:	42b5      	cmp	r5, r6
 801566c:	bfde      	ittt	le
 801566e:	4633      	movle	r3, r6
 8015670:	462e      	movle	r6, r5
 8015672:	461d      	movle	r5, r3
 8015674:	2220      	movs	r2, #32
 8015676:	1bab      	subs	r3, r5, r6
 8015678:	468b      	mov	fp, r1
 801567a:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 801567e:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 8015682:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015684:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015688:	b0ab      	sub	sp, #172	; 0xac
 801568a:	4604      	mov	r4, r0
 801568c:	bfa4      	itt	ge
 801568e:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8015692:	2600      	movge	r6, #0
 8015694:	fb99 f9f2 	sdiv	r9, r9, r2
 8015698:	fb9a faf2 	sdiv	sl, sl, r2
 801569c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801569e:	2900      	cmp	r1, #0
 80156a0:	f000 80f4 	beq.w	801588c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80156a4:	f9bb 0000 	ldrsh.w	r0, [fp]
 80156a8:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80156ac:	eba9 0700 	sub.w	r7, r9, r0
 80156b0:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 80156b4:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80156b8:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 80156bc:	ebaa 0802 	sub.w	r8, sl, r2
 80156c0:	4407      	add	r7, r0
 80156c2:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80156c6:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80156ca:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80156ce:	b23f      	sxth	r7, r7
 80156d0:	4490      	add	r8, r2
 80156d2:	2202      	movs	r2, #2
 80156d4:	fb91 f1f2 	sdiv	r1, r1, r2
 80156d8:	eba9 0707 	sub.w	r7, r9, r7
 80156dc:	fa0f f888 	sxth.w	r8, r8
 80156e0:	ebaa 0808 	sub.w	r8, sl, r8
 80156e4:	2f00      	cmp	r7, #0
 80156e6:	bfb8      	it	lt
 80156e8:	427f      	neglt	r7, r7
 80156ea:	f1b8 0f00 	cmp.w	r8, #0
 80156ee:	bfb8      	it	lt
 80156f0:	f1c8 0800 	rsblt	r8, r8, #0
 80156f4:	45bc      	cmp	ip, r7
 80156f6:	bfcc      	ite	gt
 80156f8:	f10c 0701 	addgt.w	r7, ip, #1
 80156fc:	3701      	addle	r7, #1
 80156fe:	4540      	cmp	r0, r8
 8015700:	bfc8      	it	gt
 8015702:	f100 0801 	addgt.w	r8, r0, #1
 8015706:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801570a:	eba3 0301 	sub.w	r3, r3, r1
 801570e:	f100 0001 	add.w	r0, r0, #1
 8015712:	ea4f 0060 	mov.w	r0, r0, asr #1
 8015716:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801571a:	bfd8      	it	le
 801571c:	f108 0801 	addle.w	r8, r8, #1
 8015720:	9201      	str	r2, [sp, #4]
 8015722:	930d      	str	r3, [sp, #52]	; 0x34
 8015724:	f7ff fc34 	bl	8014f90 <_ZN8touchgfx7CWRUtil4sineEi>
 8015728:	a92a      	add	r1, sp, #168	; 0xa8
 801572a:	f841 0d70 	str.w	r0, [r1, #-112]!
 801572e:	a80d      	add	r0, sp, #52	; 0x34
 8015730:	f7ff fc23 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015734:	f04f 0c20 	mov.w	ip, #32
 8015738:	fb90 f0fc 	sdiv	r0, r0, ip
 801573c:	fb08 f808 	mul.w	r8, r8, r8
 8015740:	4340      	muls	r0, r0
 8015742:	fb07 8707 	mla	r7, r7, r7, r8
 8015746:	4287      	cmp	r7, r0
 8015748:	9a01      	ldr	r2, [sp, #4]
 801574a:	da04      	bge.n	8015756 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf4>
 801574c:	2401      	movs	r4, #1
 801574e:	4620      	mov	r0, r4
 8015750:	b02b      	add	sp, #172	; 0xac
 8015752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015756:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015758:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801575a:	fb91 f3f2 	sdiv	r3, r1, r2
 801575e:	4403      	add	r3, r0
 8015760:	fb93 f3fc 	sdiv	r3, r3, ip
 8015764:	f9bb 1000 	ldrsh.w	r1, [fp]
 8015768:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 801576c:	3301      	adds	r3, #1
 801576e:	440a      	add	r2, r1
 8015770:	b212      	sxth	r2, r2
 8015772:	454a      	cmp	r2, r9
 8015774:	bfa8      	it	ge
 8015776:	464a      	movge	r2, r9
 8015778:	428a      	cmp	r2, r1
 801577a:	bfac      	ite	ge
 801577c:	eba9 0902 	subge.w	r9, r9, r2
 8015780:	eba9 0901 	sublt.w	r9, r9, r1
 8015784:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8015788:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801578c:	435b      	muls	r3, r3
 801578e:	440a      	add	r2, r1
 8015790:	b212      	sxth	r2, r2
 8015792:	4552      	cmp	r2, sl
 8015794:	bfa8      	it	ge
 8015796:	4652      	movge	r2, sl
 8015798:	428a      	cmp	r2, r1
 801579a:	bfac      	ite	ge
 801579c:	ebaa 0a02 	subge.w	sl, sl, r2
 80157a0:	ebaa 0a01 	sublt.w	sl, sl, r1
 80157a4:	fb0a fa0a 	mul.w	sl, sl, sl
 80157a8:	fb09 a909 	mla	r9, r9, r9, sl
 80157ac:	4599      	cmp	r9, r3
 80157ae:	dccd      	bgt.n	801574c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 80157b0:	465a      	mov	r2, fp
 80157b2:	4621      	mov	r1, r4
 80157b4:	a80e      	add	r0, sp, #56	; 0x38
 80157b6:	f010 fde5 	bl	8026384 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80157ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80157bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157be:	9209      	str	r2, [sp, #36]	; 0x24
 80157c0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80157c4:	930a      	str	r3, [sp, #40]	; 0x28
 80157c6:	dd07      	ble.n	80157d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80157c8:	2102      	movs	r1, #2
 80157ca:	fb93 f3f1 	sdiv	r3, r3, r1
 80157ce:	4413      	add	r3, r2
 80157d0:	930a      	str	r3, [sp, #40]	; 0x28
 80157d2:	fb93 f3f1 	sdiv	r3, r3, r1
 80157d6:	9309      	str	r3, [sp, #36]	; 0x24
 80157d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157dc:	4630      	mov	r0, r6
 80157de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80157e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80157e4:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80157e8:	f7ff fbf2 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80157ec:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80157f0:	f849 0d74 	str.w	r0, [r9, #-116]!
 80157f4:	4649      	mov	r1, r9
 80157f6:	a80b      	add	r0, sp, #44	; 0x2c
 80157f8:	f7ff fbbf 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80157fc:	f04f 0a02 	mov.w	sl, #2
 8015800:	fb90 f0fa 	sdiv	r0, r0, sl
 8015804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015806:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801580a:	eb00 0b03 	add.w	fp, r0, r3
 801580e:	4630      	mov	r0, r6
 8015810:	f7ff fd21 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015814:	f848 0d78 	str.w	r0, [r8, #-120]!
 8015818:	4641      	mov	r1, r8
 801581a:	a80b      	add	r0, sp, #44	; 0x2c
 801581c:	f7ff fbad 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015820:	fb90 f0fa 	sdiv	r0, r0, sl
 8015824:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015826:	4659      	mov	r1, fp
 8015828:	1a12      	subs	r2, r2, r0
 801582a:	017f      	lsls	r7, r7, #5
 801582c:	a80e      	add	r0, sp, #56	; 0x38
 801582e:	f010 ff7f 	bl	8026730 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015832:	f106 0a20 	add.w	sl, r6, #32
 8015836:	bb67      	cbnz	r7, 8015892 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8015838:	46b3      	mov	fp, r6
 801583a:	45aa      	cmp	sl, r5
 801583c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801583e:	dc33      	bgt.n	80158a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x246>
 8015840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015842:	4650      	mov	r0, sl
 8015844:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8015848:	920b      	str	r2, [sp, #44]	; 0x2c
 801584a:	f7ff fbc1 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801584e:	4641      	mov	r1, r8
 8015850:	900c      	str	r0, [sp, #48]	; 0x30
 8015852:	a80b      	add	r0, sp, #44	; 0x2c
 8015854:	f7ff fb91 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015858:	2302      	movs	r3, #2
 801585a:	fb90 f0f3 	sdiv	r0, r0, r3
 801585e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015860:	eb00 0b02 	add.w	fp, r0, r2
 8015864:	4650      	mov	r0, sl
 8015866:	f7ff fcf6 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801586a:	4649      	mov	r1, r9
 801586c:	900d      	str	r0, [sp, #52]	; 0x34
 801586e:	a80b      	add	r0, sp, #44	; 0x2c
 8015870:	f7ff fb83 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015874:	2302      	movs	r3, #2
 8015876:	fb90 f0f3 	sdiv	r0, r0, r3
 801587a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801587c:	4659      	mov	r1, fp
 801587e:	1a12      	subs	r2, r2, r0
 8015880:	a80e      	add	r0, sp, #56	; 0x38
 8015882:	46d3      	mov	fp, sl
 8015884:	f010 fe2c 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015888:	44ba      	add	sl, r7
 801588a:	e7d6      	b.n	801583a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 801588c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015890:	e768      	b.n	8015764 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x102>
 8015892:	fb9a f2f7 	sdiv	r2, sl, r7
 8015896:	fb07 a212 	mls	r2, r7, r2, sl
 801589a:	1aba      	subs	r2, r7, r2
 801589c:	fb92 f1f7 	sdiv	r1, r2, r7
 80158a0:	fb07 2211 	mls	r2, r7, r1, r2
 80158a4:	4492      	add	sl, r2
 80158a6:	e7c7      	b.n	8015838 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d6>
 80158a8:	455d      	cmp	r5, fp
 80158aa:	dd23      	ble.n	80158f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x292>
 80158ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ae:	4628      	mov	r0, r5
 80158b0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80158b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80158b6:	f7ff fb8b 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80158ba:	4641      	mov	r1, r8
 80158bc:	900c      	str	r0, [sp, #48]	; 0x30
 80158be:	a80b      	add	r0, sp, #44	; 0x2c
 80158c0:	f7ff fb5b 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80158c4:	f04f 0a02 	mov.w	sl, #2
 80158c8:	fb90 f0fa 	sdiv	r0, r0, sl
 80158cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80158ce:	4403      	add	r3, r0
 80158d0:	4628      	mov	r0, r5
 80158d2:	9301      	str	r3, [sp, #4]
 80158d4:	f7ff fcbf 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80158d8:	4649      	mov	r1, r9
 80158da:	900d      	str	r0, [sp, #52]	; 0x34
 80158dc:	a80b      	add	r0, sp, #44	; 0x2c
 80158de:	f7ff fb4c 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80158e2:	fb90 f0fa 	sdiv	r0, r0, sl
 80158e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80158e8:	9b01      	ldr	r3, [sp, #4]
 80158ea:	1a12      	subs	r2, r2, r0
 80158ec:	4619      	mov	r1, r3
 80158ee:	a80e      	add	r0, sp, #56	; 0x38
 80158f0:	f010 fdf6 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80158f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158f6:	b98b      	cbnz	r3, 801591c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80158f8:	1bad      	subs	r5, r5, r6
 80158fa:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 80158fe:	da04      	bge.n	801590a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015900:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 8015904:	a80e      	add	r0, sp, #56	; 0x38
 8015906:	f010 fdeb 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801590a:	21ff      	movs	r1, #255	; 0xff
 801590c:	a80e      	add	r0, sp, #56	; 0x38
 801590e:	f010 fe63 	bl	80265d8 <_ZN8touchgfx6Canvas6renderEh>
 8015912:	4604      	mov	r4, r0
 8015914:	a80e      	add	r0, sp, #56	; 0x38
 8015916:	f7ff fc3d 	bl	8015194 <_ZN8touchgfx6CanvasD1Ev>
 801591a:	e718      	b.n	801574e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xec>
 801591c:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8015920:	429a      	cmp	r2, r3
 8015922:	f200 8107 	bhi.w	8015b34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 8015926:	1bab      	subs	r3, r5, r6
 8015928:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 801592c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015930:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8015934:	9301      	str	r3, [sp, #4]
 8015936:	da43      	bge.n	80159c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8015938:	4628      	mov	r0, r5
 801593a:	f7ff fb49 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801593e:	4649      	mov	r1, r9
 8015940:	900d      	str	r0, [sp, #52]	; 0x34
 8015942:	a809      	add	r0, sp, #36	; 0x24
 8015944:	f7ff fb19 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801594a:	18c3      	adds	r3, r0, r3
 801594c:	4628      	mov	r0, r5
 801594e:	9303      	str	r3, [sp, #12]
 8015950:	f7ff fc81 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015954:	4649      	mov	r1, r9
 8015956:	900d      	str	r0, [sp, #52]	; 0x34
 8015958:	a809      	add	r0, sp, #36	; 0x24
 801595a:	f7ff fb0e 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801595e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015960:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8015964:	1a1b      	subs	r3, r3, r0
 8015966:	9302      	str	r3, [sp, #8]
 8015968:	9204      	str	r2, [sp, #16]
 801596a:	eb05 030a 	add.w	r3, r5, sl
 801596e:	9a04      	ldr	r2, [sp, #16]
 8015970:	4293      	cmp	r3, r2
 8015972:	da25      	bge.n	80159c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8015974:	4618      	mov	r0, r3
 8015976:	9306      	str	r3, [sp, #24]
 8015978:	f7ff fb2a 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801597c:	4649      	mov	r1, r9
 801597e:	900d      	str	r0, [sp, #52]	; 0x34
 8015980:	a80a      	add	r0, sp, #40	; 0x28
 8015982:	f7ff fafa 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015986:	2202      	movs	r2, #2
 8015988:	fb90 f0f2 	sdiv	r0, r0, r2
 801598c:	9b03      	ldr	r3, [sp, #12]
 801598e:	9207      	str	r2, [sp, #28]
 8015990:	18c3      	adds	r3, r0, r3
 8015992:	9305      	str	r3, [sp, #20]
 8015994:	9b06      	ldr	r3, [sp, #24]
 8015996:	4618      	mov	r0, r3
 8015998:	f7ff fc5d 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801599c:	a92a      	add	r1, sp, #168	; 0xa8
 801599e:	f841 0d78 	str.w	r0, [r1, #-120]!
 80159a2:	a80a      	add	r0, sp, #40	; 0x28
 80159a4:	f7ff fae9 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80159a8:	9a07      	ldr	r2, [sp, #28]
 80159aa:	9b02      	ldr	r3, [sp, #8]
 80159ac:	fb90 f2f2 	sdiv	r2, r0, r2
 80159b0:	9905      	ldr	r1, [sp, #20]
 80159b2:	1a9a      	subs	r2, r3, r2
 80159b4:	a80e      	add	r0, sp, #56	; 0x38
 80159b6:	f010 fd93 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80159ba:	9b06      	ldr	r3, [sp, #24]
 80159bc:	4453      	add	r3, sl
 80159be:	e7d6      	b.n	801596e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 80159c0:	455d      	cmp	r5, fp
 80159c2:	dd25      	ble.n	8015a10 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 80159c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159c8:	4628      	mov	r0, r5
 80159ca:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80159ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80159d0:	f7ff fafe 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80159d4:	4641      	mov	r1, r8
 80159d6:	900c      	str	r0, [sp, #48]	; 0x30
 80159d8:	a80b      	add	r0, sp, #44	; 0x2c
 80159da:	f7ff face 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80159de:	2202      	movs	r2, #2
 80159e0:	fb90 f0f2 	sdiv	r0, r0, r2
 80159e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80159e6:	9202      	str	r2, [sp, #8]
 80159e8:	eb00 0903 	add.w	r9, r0, r3
 80159ec:	4628      	mov	r0, r5
 80159ee:	f7ff fc32 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80159f2:	a92a      	add	r1, sp, #168	; 0xa8
 80159f4:	f841 0d74 	str.w	r0, [r1, #-116]!
 80159f8:	a80b      	add	r0, sp, #44	; 0x2c
 80159fa:	f7ff fabe 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80159fe:	9a02      	ldr	r2, [sp, #8]
 8015a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a02:	fb90 f2f2 	sdiv	r2, r0, r2
 8015a06:	4649      	mov	r1, r9
 8015a08:	1a9a      	subs	r2, r3, r2
 8015a0a:	a80e      	add	r0, sp, #56	; 0x38
 8015a0c:	f010 fd68 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015a10:	46d9      	mov	r9, fp
 8015a12:	2502      	movs	r5, #2
 8015a14:	45b1      	cmp	r9, r6
 8015a16:	db25      	blt.n	8015a64 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 8015a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a1c:	4648      	mov	r0, r9
 8015a1e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a24:	f7ff fad4 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a28:	4641      	mov	r1, r8
 8015a2a:	900c      	str	r0, [sp, #48]	; 0x30
 8015a2c:	a80b      	add	r0, sp, #44	; 0x2c
 8015a2e:	f7ff faa4 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a32:	fb90 f0f5 	sdiv	r0, r0, r5
 8015a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015a38:	eb00 0b03 	add.w	fp, r0, r3
 8015a3c:	4648      	mov	r0, r9
 8015a3e:	f7ff fc0a 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015a42:	a90d      	add	r1, sp, #52	; 0x34
 8015a44:	900d      	str	r0, [sp, #52]	; 0x34
 8015a46:	a80b      	add	r0, sp, #44	; 0x2c
 8015a48:	f7ff fa97 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a4c:	fb90 f0f5 	sdiv	r0, r0, r5
 8015a50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015a52:	4659      	mov	r1, fp
 8015a54:	1a12      	subs	r2, r2, r0
 8015a56:	a80e      	add	r0, sp, #56	; 0x38
 8015a58:	46cb      	mov	fp, r9
 8015a5a:	f010 fd41 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015a5e:	eba9 0907 	sub.w	r9, r9, r7
 8015a62:	e7d7      	b.n	8015a14 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 8015a64:	455e      	cmp	r6, fp
 8015a66:	da22      	bge.n	8015aae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 8015a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a6c:	4630      	mov	r0, r6
 8015a6e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a74:	f7ff faac 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015a78:	4641      	mov	r1, r8
 8015a7a:	900c      	str	r0, [sp, #48]	; 0x30
 8015a7c:	a80b      	add	r0, sp, #44	; 0x2c
 8015a7e:	f7ff fa7c 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a82:	2502      	movs	r5, #2
 8015a84:	fb90 f0f5 	sdiv	r0, r0, r5
 8015a88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015a8a:	4407      	add	r7, r0
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f7ff fbe2 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015a92:	a92a      	add	r1, sp, #168	; 0xa8
 8015a94:	f841 0d74 	str.w	r0, [r1, #-116]!
 8015a98:	a80b      	add	r0, sp, #44	; 0x2c
 8015a9a:	f7ff fa6e 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015a9e:	fb90 f0f5 	sdiv	r0, r0, r5
 8015aa2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015aa4:	4639      	mov	r1, r7
 8015aa6:	1a12      	subs	r2, r2, r0
 8015aa8:	a80e      	add	r0, sp, #56	; 0x38
 8015aaa:	f010 fd19 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015aae:	9b01      	ldr	r3, [sp, #4]
 8015ab0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015ab4:	f6bf af29 	bge.w	801590a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f7ff fa89 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015abe:	ad2a      	add	r5, sp, #168	; 0xa8
 8015ac0:	f845 0d74 	str.w	r0, [r5, #-116]!
 8015ac4:	4629      	mov	r1, r5
 8015ac6:	a809      	add	r0, sp, #36	; 0x24
 8015ac8:	f7ff fa57 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015ace:	f04f 0b02 	mov.w	fp, #2
 8015ad2:	eb00 0903 	add.w	r9, r0, r3
 8015ad6:	4630      	mov	r0, r6
 8015ad8:	f7ff fbbd 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015adc:	4629      	mov	r1, r5
 8015ade:	900d      	str	r0, [sp, #52]	; 0x34
 8015ae0:	a809      	add	r0, sp, #36	; 0x24
 8015ae2:	f7ff fa4a 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ae8:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8015aec:	eba3 0800 	sub.w	r8, r3, r0
 8015af0:	4454      	add	r4, sl
 8015af2:	42b4      	cmp	r4, r6
 8015af4:	f6bf af09 	bge.w	801590a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a8>
 8015af8:	4620      	mov	r0, r4
 8015afa:	f7ff fa69 	bl	8014fd0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015afe:	4629      	mov	r1, r5
 8015b00:	900d      	str	r0, [sp, #52]	; 0x34
 8015b02:	a80a      	add	r0, sp, #40	; 0x28
 8015b04:	f7ff fa39 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b08:	fb90 f0fb 	sdiv	r0, r0, fp
 8015b0c:	eb00 0709 	add.w	r7, r0, r9
 8015b10:	4620      	mov	r0, r4
 8015b12:	f7ff fba0 	bl	8015256 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015b16:	a90c      	add	r1, sp, #48	; 0x30
 8015b18:	900c      	str	r0, [sp, #48]	; 0x30
 8015b1a:	a80a      	add	r0, sp, #40	; 0x28
 8015b1c:	f7ff fa2d 	bl	8014f7a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015b20:	fb90 f2fb 	sdiv	r2, r0, fp
 8015b24:	4639      	mov	r1, r7
 8015b26:	eba8 0202 	sub.w	r2, r8, r2
 8015b2a:	a80e      	add	r0, sp, #56	; 0x38
 8015b2c:	f010 fcd8 	bl	80264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015b30:	4454      	add	r4, sl
 8015b32:	e7de      	b.n	8015af2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 8015b34:	2400      	movs	r4, #0
 8015b36:	e6ed      	b.n	8015914 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08015b38 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8015b38:	2200      	movs	r2, #0
 8015b3a:	b510      	push	{r4, lr}
 8015b3c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015b40:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015b44:	8002      	strh	r2, [r0, #0]
 8015b46:	8042      	strh	r2, [r0, #2]
 8015b48:	8084      	strh	r4, [r0, #4]
 8015b4a:	80c1      	strh	r1, [r0, #6]
 8015b4c:	bd10      	pop	{r4, pc}
	...

08015b50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015b52:	6803      	ldr	r3, [r0, #0]
 8015b54:	460d      	mov	r5, r1
 8015b56:	4604      	mov	r4, r0
 8015b58:	4601      	mov	r1, r0
 8015b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015b5c:	a802      	add	r0, sp, #8
 8015b5e:	4798      	blx	r3
 8015b60:	466b      	mov	r3, sp
 8015b62:	6828      	ldr	r0, [r5, #0]
 8015b64:	6869      	ldr	r1, [r5, #4]
 8015b66:	c303      	stmia	r3!, {r0, r1}
 8015b68:	4668      	mov	r0, sp
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	f7fe f9e4 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8015b70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015b72:	b1a8      	cbz	r0, 8015ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015b74:	6803      	ldr	r3, [r0, #0]
 8015b76:	1d21      	adds	r1, r4, #4
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	4798      	blx	r3
 8015b7c:	b180      	cbz	r0, 8015ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015b7e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	dd0c      	ble.n	8015ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015b86:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8015b8a:	2d00      	cmp	r5, #0
 8015b8c:	dd08      	ble.n	8015ba0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8015b8e:	4a2d      	ldr	r2, [pc, #180]	; (8015c44 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8015b90:	7812      	ldrb	r2, [r2, #0]
 8015b92:	b13a      	cbz	r2, 8015ba4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8015b94:	2a01      	cmp	r2, #1
 8015b96:	d02d      	beq.n	8015bf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8015b98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015b9a:	6803      	ldr	r3, [r0, #0]
 8015b9c:	691b      	ldr	r3, [r3, #16]
 8015b9e:	4798      	blx	r3
 8015ba0:	b004      	add	sp, #16
 8015ba2:	bd70      	pop	{r4, r5, r6, pc}
 8015ba4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015ba8:	441d      	add	r5, r3
 8015baa:	b2ad      	uxth	r5, r5
 8015bac:	b22e      	sxth	r6, r5
 8015bae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015bb2:	42b3      	cmp	r3, r6
 8015bb4:	daf0      	bge.n	8015b98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	4669      	mov	r1, sp
 8015bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	4798      	blx	r3
 8015bc0:	b940      	cbnz	r0, 8015bd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8015bc2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015bc6:	2b01      	cmp	r3, #1
 8015bc8:	d004      	beq.n	8015bd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8015bca:	3301      	adds	r3, #1
 8015bcc:	105b      	asrs	r3, r3, #1
 8015bce:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015bd2:	e7f0      	b.n	8015bb6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8015bd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015bd8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015bdc:	4413      	add	r3, r2
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	441a      	add	r2, r3
 8015be2:	b212      	sxth	r2, r2
 8015be4:	4296      	cmp	r6, r2
 8015be6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015bea:	dae0      	bge.n	8015bae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015bec:	1aeb      	subs	r3, r5, r3
 8015bee:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015bf2:	e7dc      	b.n	8015bae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8015bf4:	f8bd 5000 	ldrh.w	r5, [sp]
 8015bf8:	441d      	add	r5, r3
 8015bfa:	b2ad      	uxth	r5, r5
 8015bfc:	b22e      	sxth	r6, r5
 8015bfe:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015c02:	42b3      	cmp	r3, r6
 8015c04:	dac8      	bge.n	8015b98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015c06:	6823      	ldr	r3, [r4, #0]
 8015c08:	4669      	mov	r1, sp
 8015c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c0c:	4620      	mov	r0, r4
 8015c0e:	4798      	blx	r3
 8015c10:	b940      	cbnz	r0, 8015c24 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8015c12:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015c16:	2b01      	cmp	r3, #1
 8015c18:	d004      	beq.n	8015c24 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	105b      	asrs	r3, r3, #1
 8015c1e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015c22:	e7f0      	b.n	8015c06 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8015c24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	441a      	add	r2, r3
 8015c32:	b212      	sxth	r2, r2
 8015c34:	4296      	cmp	r6, r2
 8015c36:	f8ad 3000 	strh.w	r3, [sp]
 8015c3a:	dae0      	bge.n	8015bfe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8015c3c:	1aeb      	subs	r3, r5, r3
 8015c3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015c42:	e7dc      	b.n	8015bfe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8015c44:	2004f6ec 	.word	0x2004f6ec

08015c48 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015c4a:	6803      	ldr	r3, [r0, #0]
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	4601      	mov	r1, r0
 8015c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c52:	4668      	mov	r0, sp
 8015c54:	4798      	blx	r3
 8015c56:	2100      	movs	r1, #0
 8015c58:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015c5c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015c60:	9102      	str	r1, [sp, #8]
 8015c62:	4668      	mov	r0, sp
 8015c64:	a902      	add	r1, sp, #8
 8015c66:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015c6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015c6e:	f7fe f963 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8015c72:	6823      	ldr	r3, [r4, #0]
 8015c74:	4669      	mov	r1, sp
 8015c76:	691b      	ldr	r3, [r3, #16]
 8015c78:	4620      	mov	r0, r4
 8015c7a:	4798      	blx	r3
 8015c7c:	b004      	add	sp, #16
 8015c7e:	bd10      	pop	{r4, pc}

08015c80 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015c80:	2101      	movs	r1, #1
 8015c82:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015c86:	490b      	ldr	r1, [pc, #44]	; (8015cb4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8015c88:	2200      	movs	r2, #0
 8015c8a:	6001      	str	r1, [r0, #0]
 8015c8c:	21ff      	movs	r1, #255	; 0xff
 8015c8e:	8082      	strh	r2, [r0, #4]
 8015c90:	80c2      	strh	r2, [r0, #6]
 8015c92:	8102      	strh	r2, [r0, #8]
 8015c94:	8142      	strh	r2, [r0, #10]
 8015c96:	8182      	strh	r2, [r0, #12]
 8015c98:	81c2      	strh	r2, [r0, #14]
 8015c9a:	8202      	strh	r2, [r0, #16]
 8015c9c:	8242      	strh	r2, [r0, #18]
 8015c9e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015ca2:	61c2      	str	r2, [r0, #28]
 8015ca4:	8402      	strh	r2, [r0, #32]
 8015ca6:	8442      	strh	r2, [r0, #34]	; 0x22
 8015ca8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015cac:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8015cb0:	6282      	str	r2, [r0, #40]	; 0x28
 8015cb2:	4770      	bx	lr
 8015cb4:	080297f8 	.word	0x080297f8

08015cb8 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8015cb8:	b508      	push	{r3, lr}
 8015cba:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8015cbe:	b10b      	cbz	r3, 8015cc4 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8015cc0:	f7f8 fbba 	bl	800e438 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8015cc4:	bd08      	pop	{r3, pc}

08015cc6 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8015cc6:	6803      	ldr	r3, [r0, #0]
 8015cc8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8015ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015cce:	4718      	bx	r3

08015cd0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8015cd0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015cd4:	b510      	push	{r4, lr}
 8015cd6:	2bff      	cmp	r3, #255	; 0xff
 8015cd8:	d104      	bne.n	8015ce4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8015cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cde:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d105      	bne.n	8015cf0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	8003      	strh	r3, [r0, #0]
 8015ce8:	8043      	strh	r3, [r0, #2]
 8015cea:	8083      	strh	r3, [r0, #4]
 8015cec:	80c3      	strh	r3, [r0, #6]
 8015cee:	bd10      	pop	{r4, pc}
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015cf6:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8015cfa:	8003      	strh	r3, [r0, #0]
 8015cfc:	8043      	strh	r3, [r0, #2]
 8015cfe:	8084      	strh	r4, [r0, #4]
 8015d00:	80c2      	strh	r2, [r0, #6]
 8015d02:	e7f4      	b.n	8015cee <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08015d04 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8015d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d08:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8015d0c:	b087      	sub	sp, #28
 8015d0e:	4604      	mov	r4, r0
 8015d10:	4689      	mov	r9, r1
 8015d12:	b363      	cbz	r3, 8015d6e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8015d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d18:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d027      	beq.n	8015d6e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8015d1e:	ad06      	add	r5, sp, #24
 8015d20:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8015d24:	4628      	mov	r0, r5
 8015d26:	f004 fc95 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d2a:	2700      	movs	r7, #0
 8015d2c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015d30:	a904      	add	r1, sp, #16
 8015d32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d36:	6823      	ldr	r3, [r4, #0]
 8015d38:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3e:	4620      	mov	r0, r4
 8015d40:	9704      	str	r7, [sp, #16]
 8015d42:	4798      	blx	r3
 8015d44:	f7f8 fcfe 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8015d48:	6803      	ldr	r3, [r0, #0]
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8015d50:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8015d52:	4628      	mov	r0, r5
 8015d54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015d58:	f004 fd68 	bl	801a82c <_ZNK8touchgfx6Bitmap7getDataEv>
 8015d5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015d60:	4601      	mov	r1, r0
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	9701      	str	r7, [sp, #4]
 8015d66:	464b      	mov	r3, r9
 8015d68:	aa04      	add	r2, sp, #16
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	47c0      	blx	r8
 8015d6e:	b007      	add	sp, #28
 8015d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015d74 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8015d74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015d76:	460d      	mov	r5, r1
 8015d78:	2100      	movs	r1, #0
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015d80:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015d88:	6803      	ldr	r3, [r0, #0]
 8015d8a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d90:	9100      	str	r1, [sp, #0]
 8015d92:	4669      	mov	r1, sp
 8015d94:	4798      	blx	r3
 8015d96:	4621      	mov	r1, r4
 8015d98:	a802      	add	r0, sp, #8
 8015d9a:	f003 f845 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015d9e:	f7f8 fcd1 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8015da2:	6803      	ldr	r3, [r0, #0]
 8015da4:	aa02      	add	r2, sp, #8
 8015da6:	695e      	ldr	r6, [r3, #20]
 8015da8:	4669      	mov	r1, sp
 8015daa:	462b      	mov	r3, r5
 8015dac:	47b0      	blx	r6
 8015dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015db2:	2800      	cmp	r0, #0
 8015db4:	bf08      	it	eq
 8015db6:	461d      	moveq	r5, r3
 8015db8:	84e5      	strh	r5, [r4, #38]	; 0x26
 8015dba:	b004      	add	sp, #16
 8015dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08015dc0 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	8082      	strh	r2, [r0, #4]
 8015dc4:	80c2      	strh	r2, [r0, #6]
 8015dc6:	8102      	strh	r2, [r0, #8]
 8015dc8:	8142      	strh	r2, [r0, #10]
 8015dca:	8182      	strh	r2, [r0, #12]
 8015dcc:	81c2      	strh	r2, [r0, #14]
 8015dce:	8202      	strh	r2, [r0, #16]
 8015dd0:	8242      	strh	r2, [r0, #18]
 8015dd2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015dd6:	61c2      	str	r2, [r0, #28]
 8015dd8:	8402      	strh	r2, [r0, #32]
 8015dda:	8442      	strh	r2, [r0, #34]	; 0x22
 8015ddc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015de0:	2201      	movs	r2, #1
 8015de2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8015de6:	4a04      	ldr	r2, [pc, #16]	; (8015df8 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8015de8:	6002      	str	r2, [r0, #0]
 8015dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015dee:	84c2      	strh	r2, [r0, #38]	; 0x26
 8015df0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8015df4:	4770      	bx	lr
 8015df6:	bf00      	nop
 8015df8:	08029870 	.word	0x08029870

08015dfc <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	8083      	strh	r3, [r0, #4]
 8015e00:	80c3      	strh	r3, [r0, #6]
 8015e02:	8003      	strh	r3, [r0, #0]
 8015e04:	8043      	strh	r3, [r0, #2]
 8015e06:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015e0a:	2bff      	cmp	r3, #255	; 0xff
 8015e0c:	bf01      	itttt	eq
 8015e0e:	890b      	ldrheq	r3, [r1, #8]
 8015e10:	8083      	strheq	r3, [r0, #4]
 8015e12:	894b      	ldrheq	r3, [r1, #10]
 8015e14:	80c3      	strheq	r3, [r0, #6]
 8015e16:	4770      	bx	lr

08015e18 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	466b      	mov	r3, sp
 8015e1e:	6808      	ldr	r0, [r1, #0]
 8015e20:	6849      	ldr	r1, [r1, #4]
 8015e22:	c303      	stmia	r3!, {r0, r1}
 8015e24:	6823      	ldr	r3, [r4, #0]
 8015e26:	4669      	mov	r1, sp
 8015e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	4798      	blx	r3
 8015e2e:	4b08      	ldr	r3, [pc, #32]	; (8015e50 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015e36:	b10a      	cbz	r2, 8015e3c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015e38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015e3a:	b900      	cbnz	r0, 8015e3e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015e3c:	6898      	ldr	r0, [r3, #8]
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015e42:	6a1d      	ldr	r5, [r3, #32]
 8015e44:	4669      	mov	r1, sp
 8015e46:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015e4a:	47a8      	blx	r5
 8015e4c:	b003      	add	sp, #12
 8015e4e:	bd30      	pop	{r4, r5, pc}
 8015e50:	2004f6f4 	.word	0x2004f6f4

08015e54 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015e54:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8015e58:	b12a      	cbz	r2, 8015e66 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015e5a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015e5e:	b112      	cbz	r2, 8015e66 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015e60:	6803      	ldr	r3, [r0, #0]
 8015e62:	695b      	ldr	r3, [r3, #20]
 8015e64:	4718      	bx	r3
 8015e66:	4770      	bx	lr

08015e68 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015e68:	b570      	push	{r4, r5, r6, lr}
 8015e6a:	880b      	ldrh	r3, [r1, #0]
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015e70:	4608      	mov	r0, r1
 8015e72:	460d      	mov	r5, r1
 8015e74:	f004 fbee 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015e78:	4606      	mov	r6, r0
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	f004 fc1e 	bl	801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015e80:	4605      	mov	r5, r0
 8015e82:	6823      	ldr	r3, [r4, #0]
 8015e84:	4631      	mov	r1, r6
 8015e86:	4620      	mov	r0, r4
 8015e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e8a:	4798      	blx	r3
 8015e8c:	6823      	ldr	r3, [r4, #0]
 8015e8e:	4629      	mov	r1, r5
 8015e90:	4620      	mov	r0, r4
 8015e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e98:	4718      	bx	r3

08015e9a <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015e9a:	b510      	push	{r4, lr}
 8015e9c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	2bff      	cmp	r3, #255	; 0xff
 8015ea4:	d006      	beq.n	8015eb4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	8003      	strh	r3, [r0, #0]
 8015eaa:	8043      	strh	r3, [r0, #2]
 8015eac:	8083      	strh	r3, [r0, #4]
 8015eae:	80c3      	strh	r3, [r0, #6]
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	bd10      	pop	{r4, pc}
 8015eb4:	3126      	adds	r1, #38	; 0x26
 8015eb6:	f004 fc35 	bl	801a724 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015eba:	e7f9      	b.n	8015eb0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015ebc <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015ebc:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015ec0:	b12a      	cbz	r2, 8015ece <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015ec2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015ec6:	b112      	cbz	r2, 8015ece <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015ec8:	6803      	ldr	r3, [r0, #0]
 8015eca:	695b      	ldr	r3, [r3, #20]
 8015ecc:	4718      	bx	r3
 8015ece:	4770      	bx	lr

08015ed0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	2500      	movs	r5, #0
 8015ed8:	f854 3b26 	ldr.w	r3, [r4], #38
 8015edc:	b088      	sub	sp, #32
 8015ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ee0:	460f      	mov	r7, r1
 8015ee2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015ee6:	a904      	add	r1, sp, #16
 8015ee8:	4606      	mov	r6, r0
 8015eea:	4798      	blx	r3
 8015eec:	4620      	mov	r0, r4
 8015eee:	f004 fbb1 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ef2:	4680      	mov	r8, r0
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f004 fbe1 	bl	801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015efa:	9506      	str	r5, [sp, #24]
 8015efc:	ad06      	add	r5, sp, #24
 8015efe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015f02:	4639      	mov	r1, r7
 8015f04:	4628      	mov	r0, r5
 8015f06:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015f0a:	f7fe f815 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8015f0e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	dd19      	ble.n	8015f4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015f16:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	dd15      	ble.n	8015f4a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015f1e:	4b0c      	ldr	r3, [pc, #48]	; (8015f50 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015f26:	b10a      	cbz	r2, 8015f2c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015f28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015f2a:	b900      	cbnz	r0, 8015f2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015f2c:	6898      	ldr	r0, [r3, #8]
 8015f2e:	2701      	movs	r7, #1
 8015f30:	6801      	ldr	r1, [r0, #0]
 8015f32:	9702      	str	r7, [sp, #8]
 8015f34:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015f38:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015f3c:	e9cd 5600 	strd	r5, r6, [sp]
 8015f40:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015f44:	688d      	ldr	r5, [r1, #8]
 8015f46:	4621      	mov	r1, r4
 8015f48:	47a8      	blx	r5
 8015f4a:	b008      	add	sp, #32
 8015f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f50:	2004f6f4 	.word	0x2004f6f4

08015f54 <_ZN8touchgfx7OutlineD1Ev>:
 8015f54:	4770      	bx	lr

08015f56 <_ZN8touchgfx7OutlineD0Ev>:
 8015f56:	b510      	push	{r4, lr}
 8015f58:	4604      	mov	r4, r0
 8015f5a:	2130      	movs	r1, #48	; 0x30
 8015f5c:	f010 fc3a 	bl	80267d4 <_ZdlPvj>
 8015f60:	4620      	mov	r0, r4
 8015f62:	bd10      	pop	{r4, pc}

08015f64 <_ZN8touchgfx7Outline5resetEv>:
 8015f64:	b510      	push	{r4, lr}
 8015f66:	4604      	mov	r4, r0
 8015f68:	f000 fe8a 	bl	8016c80 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015f6c:	60e0      	str	r0, [r4, #12]
 8015f6e:	f000 fe8d 	bl	8016c8c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015f72:	2200      	movs	r2, #0
 8015f74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8015f78:	68e3      	ldr	r3, [r4, #12]
 8015f7a:	08c0      	lsrs	r0, r0, #3
 8015f7c:	3801      	subs	r0, #1
 8015f7e:	6123      	str	r3, [r4, #16]
 8015f80:	6060      	str	r0, [r4, #4]
 8015f82:	60a2      	str	r2, [r4, #8]
 8015f84:	8019      	strh	r1, [r3, #0]
 8015f86:	8059      	strh	r1, [r3, #2]
 8015f88:	809a      	strh	r2, [r3, #4]
 8015f8a:	80da      	strh	r2, [r3, #6]
 8015f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f8e:	f023 0301 	bic.w	r3, r3, #1
 8015f92:	f043 0302 	orr.w	r3, r3, #2
 8015f96:	6263      	str	r3, [r4, #36]	; 0x24
 8015f98:	bd10      	pop	{r4, pc}
	...

08015f9c <_ZN8touchgfx7OutlineC1Ev>:
 8015f9c:	4b0a      	ldr	r3, [pc, #40]	; (8015fc8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015f9e:	b510      	push	{r4, lr}
 8015fa0:	6003      	str	r3, [r0, #0]
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015fac:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015fb0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015fb4:	6243      	str	r3, [r0, #36]	; 0x24
 8015fb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015fba:	4604      	mov	r4, r0
 8015fbc:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8015fc0:	f7ff ffd0 	bl	8015f64 <_ZN8touchgfx7Outline5resetEv>
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	bd10      	pop	{r4, pc}
 8015fc8:	080299b4 	.word	0x080299b4

08015fcc <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd0:	b093      	sub	sp, #76	; 0x4c
 8015fd2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015fd4:	9305      	str	r3, [sp, #20]
 8015fd6:	f004 051f 	and.w	r5, r4, #31
 8015fda:	1153      	asrs	r3, r2, #5
 8015fdc:	9504      	str	r5, [sp, #16]
 8015fde:	1156      	asrs	r6, r2, #5
 8015fe0:	1165      	asrs	r5, r4, #5
 8015fe2:	9303      	str	r3, [sp, #12]
 8015fe4:	42ae      	cmp	r6, r5
 8015fe6:	ea4f 1364 	mov.w	r3, r4, asr #5
 8015fea:	9306      	str	r3, [sp, #24]
 8015fec:	f002 031f 	and.w	r3, r2, #31
 8015ff0:	f040 80f8 	bne.w	80161e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8015ff4:	9c04      	ldr	r4, [sp, #16]
 8015ff6:	9a05      	ldr	r2, [sp, #20]
 8015ff8:	42a3      	cmp	r3, r4
 8015ffa:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015ffe:	6902      	ldr	r2, [r0, #16]
 8016000:	d125      	bne.n	801604e <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8016002:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016006:	459e      	cmp	lr, r3
 8016008:	d103      	bne.n	8016012 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801600a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801600e:	429e      	cmp	r6, r3
 8016010:	d035      	beq.n	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016012:	88d1      	ldrh	r1, [r2, #6]
 8016014:	8893      	ldrh	r3, [r2, #4]
 8016016:	430b      	orrs	r3, r1
 8016018:	d010      	beq.n	801603c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801601a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801601e:	2b00      	cmp	r3, #0
 8016020:	db0c      	blt.n	801603c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016022:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016024:	428b      	cmp	r3, r1
 8016026:	da09      	bge.n	801603c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016028:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801602c:	428b      	cmp	r3, r1
 801602e:	bf38      	it	cc
 8016030:	3208      	addcc	r2, #8
 8016032:	f103 0301 	add.w	r3, r3, #1
 8016036:	bf38      	it	cc
 8016038:	6102      	strcc	r2, [r0, #16]
 801603a:	6083      	str	r3, [r0, #8]
 801603c:	6903      	ldr	r3, [r0, #16]
 801603e:	9a03      	ldr	r2, [sp, #12]
 8016040:	f8a3 e000 	strh.w	lr, [r3]
 8016044:	805a      	strh	r2, [r3, #2]
 8016046:	2200      	movs	r2, #0
 8016048:	809a      	strh	r2, [r3, #4]
 801604a:	80da      	strh	r2, [r3, #6]
 801604c:	e017      	b.n	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801604e:	9c05      	ldr	r4, [sp, #20]
 8016050:	114e      	asrs	r6, r1, #5
 8016052:	f004 041f 	and.w	r4, r4, #31
 8016056:	9402      	str	r4, [sp, #8]
 8016058:	9c04      	ldr	r4, [sp, #16]
 801605a:	4576      	cmp	r6, lr
 801605c:	f001 0c1f 	and.w	ip, r1, #31
 8016060:	eba4 0403 	sub.w	r4, r4, r3
 8016064:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8016068:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801606c:	d10a      	bne.n	8016084 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801606e:	9b02      	ldr	r3, [sp, #8]
 8016070:	44a0      	add	r8, r4
 8016072:	449c      	add	ip, r3
 8016074:	fb04 a40c 	mla	r4, r4, ip, sl
 8016078:	f8a2 8004 	strh.w	r8, [r2, #4]
 801607c:	80d4      	strh	r4, [r2, #6]
 801607e:	b013      	add	sp, #76	; 0x4c
 8016080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016084:	9d05      	ldr	r5, [sp, #20]
 8016086:	1a69      	subs	r1, r5, r1
 8016088:	bf5b      	ittet	pl
 801608a:	f1cc 0520 	rsbpl	r5, ip, #32
 801608e:	436c      	mulpl	r4, r5
 8016090:	2500      	movmi	r5, #0
 8016092:	2520      	movpl	r5, #32
 8016094:	bf44      	itt	mi
 8016096:	fb04 f40c 	mulmi.w	r4, r4, ip
 801609a:	4249      	negmi	r1, r1
 801609c:	9501      	str	r5, [sp, #4]
 801609e:	fb94 f5f1 	sdiv	r5, r4, r1
 80160a2:	bf54      	ite	pl
 80160a4:	f04f 0901 	movpl.w	r9, #1
 80160a8:	f04f 39ff 	movmi.w	r9, #4294967295
 80160ac:	fb01 4415 	mls	r4, r1, r5, r4
 80160b0:	9f01      	ldr	r7, [sp, #4]
 80160b2:	2c00      	cmp	r4, #0
 80160b4:	bfb8      	it	lt
 80160b6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80160ba:	44bc      	add	ip, r7
 80160bc:	fb05 ac0c 	mla	ip, r5, ip, sl
 80160c0:	44a8      	add	r8, r5
 80160c2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80160c6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80160ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80160ce:	bfb8      	it	lt
 80160d0:	1864      	addlt	r4, r4, r1
 80160d2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80160d6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80160da:	444e      	add	r6, r9
 80160dc:	ea58 0202 	orrs.w	r2, r8, r2
 80160e0:	d011      	beq.n	8016106 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80160e2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80160e6:	f1b8 0f00 	cmp.w	r8, #0
 80160ea:	db0c      	blt.n	8016106 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80160ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80160ee:	4590      	cmp	r8, r2
 80160f0:	da09      	bge.n	8016106 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80160f2:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80160f6:	4590      	cmp	r8, r2
 80160f8:	bf3c      	itt	cc
 80160fa:	f10c 0208 	addcc.w	r2, ip, #8
 80160fe:	6102      	strcc	r2, [r0, #16]
 8016100:	f108 0201 	add.w	r2, r8, #1
 8016104:	6082      	str	r2, [r0, #8]
 8016106:	2700      	movs	r7, #0
 8016108:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801610c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016110:	45b6      	cmp	lr, r6
 8016112:	f8ac 6000 	strh.w	r6, [ip]
 8016116:	f8ac 2002 	strh.w	r2, [ip, #2]
 801611a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801611e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016122:	442b      	add	r3, r5
 8016124:	d04d      	beq.n	80161c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 8016126:	9f04      	ldr	r7, [sp, #16]
 8016128:	f04f 0a00 	mov.w	sl, #0
 801612c:	1aff      	subs	r7, r7, r3
 801612e:	443d      	add	r5, r7
 8016130:	016d      	lsls	r5, r5, #5
 8016132:	fb95 f8f1 	sdiv	r8, r5, r1
 8016136:	fb01 5518 	mls	r5, r1, r8, r5
 801613a:	2d00      	cmp	r5, #0
 801613c:	bfb8      	it	lt
 801613e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016142:	f108 0701 	add.w	r7, r8, #1
 8016146:	bfb8      	it	lt
 8016148:	186d      	addlt	r5, r5, r1
 801614a:	1a64      	subs	r4, r4, r1
 801614c:	9703      	str	r7, [sp, #12]
 801614e:	1964      	adds	r4, r4, r5
 8016150:	bf48      	it	mi
 8016152:	4647      	movmi	r7, r8
 8016154:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016158:	bf58      	it	pl
 801615a:	9f03      	ldrpl	r7, [sp, #12]
 801615c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016160:	443b      	add	r3, r7
 8016162:	44bb      	add	fp, r7
 8016164:	f8ac b004 	strh.w	fp, [ip, #4]
 8016168:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801616c:	bf58      	it	pl
 801616e:	1a64      	subpl	r4, r4, r1
 8016170:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016174:	f8ac b006 	strh.w	fp, [ip, #6]
 8016178:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801617c:	444e      	add	r6, r9
 801617e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016182:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016186:	ea5b 0707 	orrs.w	r7, fp, r7
 801618a:	d011      	beq.n	80161b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801618c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016190:	f1bb 0f00 	cmp.w	fp, #0
 8016194:	db0c      	blt.n	80161b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8016196:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016198:	45bb      	cmp	fp, r7
 801619a:	da09      	bge.n	80161b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801619c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80161a0:	45bb      	cmp	fp, r7
 80161a2:	bf3c      	itt	cc
 80161a4:	f10c 0708 	addcc.w	r7, ip, #8
 80161a8:	6107      	strcc	r7, [r0, #16]
 80161aa:	f10b 0701 	add.w	r7, fp, #1
 80161ae:	6087      	str	r7, [r0, #8]
 80161b0:	6907      	ldr	r7, [r0, #16]
 80161b2:	45b6      	cmp	lr, r6
 80161b4:	803e      	strh	r6, [r7, #0]
 80161b6:	807a      	strh	r2, [r7, #2]
 80161b8:	f8a7 a004 	strh.w	sl, [r7, #4]
 80161bc:	f8a7 a006 	strh.w	sl, [r7, #6]
 80161c0:	d1c5      	bne.n	801614e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 80161c2:	9a04      	ldr	r2, [sp, #16]
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	6902      	ldr	r2, [r0, #16]
 80161c8:	8891      	ldrh	r1, [r2, #4]
 80161ca:	88d6      	ldrh	r6, [r2, #6]
 80161cc:	4419      	add	r1, r3
 80161ce:	8091      	strh	r1, [r2, #4]
 80161d0:	9902      	ldr	r1, [sp, #8]
 80161d2:	f101 0c20 	add.w	ip, r1, #32
 80161d6:	9901      	ldr	r1, [sp, #4]
 80161d8:	ebac 0c01 	sub.w	ip, ip, r1
 80161dc:	fb03 630c 	mla	r3, r3, ip, r6
 80161e0:	80d3      	strh	r3, [r2, #6]
 80161e2:	e74c      	b.n	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80161e4:	9d05      	ldr	r5, [sp, #20]
 80161e6:	1aa2      	subs	r2, r4, r2
 80161e8:	eba5 0501 	sub.w	r5, r5, r1
 80161ec:	9508      	str	r5, [sp, #32]
 80161ee:	9202      	str	r2, [sp, #8]
 80161f0:	f140 8128 	bpl.w	8016444 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 80161f4:	9a03      	ldr	r2, [sp, #12]
 80161f6:	2a00      	cmp	r2, #0
 80161f8:	f6ff af41 	blt.w	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80161fc:	f04f 34ff 	mov.w	r4, #4294967295
 8016200:	9a02      	ldr	r2, [sp, #8]
 8016202:	940b      	str	r4, [sp, #44]	; 0x2c
 8016204:	4252      	negs	r2, r2
 8016206:	9202      	str	r2, [sp, #8]
 8016208:	9a06      	ldr	r2, [sp, #24]
 801620a:	2400      	movs	r4, #0
 801620c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8016210:	9206      	str	r2, [sp, #24]
 8016212:	462a      	mov	r2, r5
 8016214:	435a      	muls	r2, r3
 8016216:	9401      	str	r4, [sp, #4]
 8016218:	9c02      	ldr	r4, [sp, #8]
 801621a:	9d02      	ldr	r5, [sp, #8]
 801621c:	fb92 f4f4 	sdiv	r4, r2, r4
 8016220:	fb05 2214 	mls	r2, r5, r4, r2
 8016224:	2a00      	cmp	r2, #0
 8016226:	9207      	str	r2, [sp, #28]
 8016228:	bfbc      	itt	lt
 801622a:	1952      	addlt	r2, r2, r5
 801622c:	9207      	strlt	r2, [sp, #28]
 801622e:	9a01      	ldr	r2, [sp, #4]
 8016230:	bfb8      	it	lt
 8016232:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8016236:	eb04 0901 	add.w	r9, r4, r1
 801623a:	429a      	cmp	r2, r3
 801623c:	ea4f 1669 	mov.w	r6, r9, asr #5
 8016240:	6905      	ldr	r5, [r0, #16]
 8016242:	f040 8112 	bne.w	801646a <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8016246:	f9b5 3000 	ldrsh.w	r3, [r5]
 801624a:	429e      	cmp	r6, r3
 801624c:	d104      	bne.n	8016258 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801624e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016252:	9a03      	ldr	r2, [sp, #12]
 8016254:	429a      	cmp	r2, r3
 8016256:	d01b      	beq.n	8016290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016258:	88ea      	ldrh	r2, [r5, #6]
 801625a:	88ab      	ldrh	r3, [r5, #4]
 801625c:	4313      	orrs	r3, r2
 801625e:	d010      	beq.n	8016282 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016260:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016264:	2a00      	cmp	r2, #0
 8016266:	db0c      	blt.n	8016282 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016268:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801626a:	429a      	cmp	r2, r3
 801626c:	da09      	bge.n	8016282 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801626e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8016272:	429a      	cmp	r2, r3
 8016274:	bf38      	it	cc
 8016276:	3508      	addcc	r5, #8
 8016278:	f102 0201 	add.w	r2, r2, #1
 801627c:	bf38      	it	cc
 801627e:	6105      	strcc	r5, [r0, #16]
 8016280:	6082      	str	r2, [r0, #8]
 8016282:	6903      	ldr	r3, [r0, #16]
 8016284:	9a03      	ldr	r2, [sp, #12]
 8016286:	801e      	strh	r6, [r3, #0]
 8016288:	805a      	strh	r2, [r3, #2]
 801628a:	2200      	movs	r2, #0
 801628c:	809a      	strh	r2, [r3, #4]
 801628e:	80da      	strh	r2, [r3, #6]
 8016290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016292:	9a03      	ldr	r2, [sp, #12]
 8016294:	6901      	ldr	r1, [r0, #16]
 8016296:	441a      	add	r2, r3
 8016298:	f9b1 3000 	ldrsh.w	r3, [r1]
 801629c:	42b3      	cmp	r3, r6
 801629e:	d103      	bne.n	80162a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 80162a0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d01a      	beq.n	80162de <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 80162a8:	88cc      	ldrh	r4, [r1, #6]
 80162aa:	888b      	ldrh	r3, [r1, #4]
 80162ac:	4323      	orrs	r3, r4
 80162ae:	d010      	beq.n	80162d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80162b0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80162b4:	2c00      	cmp	r4, #0
 80162b6:	db0c      	blt.n	80162d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80162b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80162ba:	429c      	cmp	r4, r3
 80162bc:	da09      	bge.n	80162d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80162be:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80162c2:	429c      	cmp	r4, r3
 80162c4:	bf38      	it	cc
 80162c6:	3108      	addcc	r1, #8
 80162c8:	f104 0401 	add.w	r4, r4, #1
 80162cc:	bf38      	it	cc
 80162ce:	6101      	strcc	r1, [r0, #16]
 80162d0:	6084      	str	r4, [r0, #8]
 80162d2:	2100      	movs	r1, #0
 80162d4:	6903      	ldr	r3, [r0, #16]
 80162d6:	801e      	strh	r6, [r3, #0]
 80162d8:	805a      	strh	r2, [r3, #2]
 80162da:	8099      	strh	r1, [r3, #4]
 80162dc:	80d9      	strh	r1, [r3, #6]
 80162de:	9b06      	ldr	r3, [sp, #24]
 80162e0:	4293      	cmp	r3, r2
 80162e2:	f000 8082 	beq.w	80163ea <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 80162e6:	9b08      	ldr	r3, [sp, #32]
 80162e8:	9902      	ldr	r1, [sp, #8]
 80162ea:	015b      	lsls	r3, r3, #5
 80162ec:	fb93 f1f1 	sdiv	r1, r3, r1
 80162f0:	9c02      	ldr	r4, [sp, #8]
 80162f2:	9103      	str	r1, [sp, #12]
 80162f4:	fb04 3311 	mls	r3, r4, r1, r3
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	9308      	str	r3, [sp, #32]
 80162fc:	da04      	bge.n	8016308 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 80162fe:	1e4b      	subs	r3, r1, #1
 8016300:	9303      	str	r3, [sp, #12]
 8016302:	9b08      	ldr	r3, [sp, #32]
 8016304:	4423      	add	r3, r4
 8016306:	9308      	str	r3, [sp, #32]
 8016308:	464f      	mov	r7, r9
 801630a:	2600      	movs	r6, #0
 801630c:	9b07      	ldr	r3, [sp, #28]
 801630e:	9902      	ldr	r1, [sp, #8]
 8016310:	1a5b      	subs	r3, r3, r1
 8016312:	9307      	str	r3, [sp, #28]
 8016314:	9b01      	ldr	r3, [sp, #4]
 8016316:	f1c3 0320 	rsb	r3, r3, #32
 801631a:	930e      	str	r3, [sp, #56]	; 0x38
 801631c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801631e:	9b01      	ldr	r3, [sp, #4]
 8016320:	1a5b      	subs	r3, r3, r1
 8016322:	930a      	str	r3, [sp, #40]	; 0x28
 8016324:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8016328:	185b      	adds	r3, r3, r1
 801632a:	bf58      	it	pl
 801632c:	9902      	ldrpl	r1, [sp, #8]
 801632e:	9307      	str	r3, [sp, #28]
 8016330:	bf5d      	ittte	pl
 8016332:	1a5b      	subpl	r3, r3, r1
 8016334:	9307      	strpl	r3, [sp, #28]
 8016336:	9b03      	ldrpl	r3, [sp, #12]
 8016338:	9903      	ldrmi	r1, [sp, #12]
 801633a:	bf58      	it	pl
 801633c:	1c59      	addpl	r1, r3, #1
 801633e:	4489      	add	r9, r1
 8016340:	2a00      	cmp	r2, #0
 8016342:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8016346:	db2e      	blt.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016348:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801634a:	4293      	cmp	r3, r2
 801634c:	dd2b      	ble.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801634e:	9c01      	ldr	r4, [sp, #4]
 8016350:	6905      	ldr	r5, [r0, #16]
 8016352:	46a0      	mov	r8, r4
 8016354:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016356:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801635a:	45a0      	cmp	r8, r4
 801635c:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8016360:	f040 8150 	bne.w	8016604 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8016364:	f9b5 1000 	ldrsh.w	r1, [r5]
 8016368:	4551      	cmp	r1, sl
 801636a:	d103      	bne.n	8016374 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 801636c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8016370:	4291      	cmp	r1, r2
 8016372:	d018      	beq.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016374:	ea5c 010e 	orrs.w	r1, ip, lr
 8016378:	d00f      	beq.n	801639a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801637a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801637e:	2900      	cmp	r1, #0
 8016380:	db0b      	blt.n	801639a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8016382:	428b      	cmp	r3, r1
 8016384:	dd09      	ble.n	801639a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8016386:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801638a:	4299      	cmp	r1, r3
 801638c:	bf38      	it	cc
 801638e:	3508      	addcc	r5, #8
 8016390:	f101 0101 	add.w	r1, r1, #1
 8016394:	bf38      	it	cc
 8016396:	6105      	strcc	r5, [r0, #16]
 8016398:	6081      	str	r1, [r0, #8]
 801639a:	6903      	ldr	r3, [r0, #16]
 801639c:	f8a3 a000 	strh.w	sl, [r3]
 80163a0:	805a      	strh	r2, [r3, #2]
 80163a2:	809e      	strh	r6, [r3, #4]
 80163a4:	80de      	strh	r6, [r3, #6]
 80163a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163a8:	6901      	ldr	r1, [r0, #16]
 80163aa:	441a      	add	r2, r3
 80163ac:	88cc      	ldrh	r4, [r1, #6]
 80163ae:	888b      	ldrh	r3, [r1, #4]
 80163b0:	4323      	orrs	r3, r4
 80163b2:	d010      	beq.n	80163d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80163b4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80163b8:	2c00      	cmp	r4, #0
 80163ba:	db0c      	blt.n	80163d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80163bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80163be:	429c      	cmp	r4, r3
 80163c0:	da09      	bge.n	80163d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80163c2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80163c6:	429c      	cmp	r4, r3
 80163c8:	bf38      	it	cc
 80163ca:	3108      	addcc	r1, #8
 80163cc:	f104 0401 	add.w	r4, r4, #1
 80163d0:	bf38      	it	cc
 80163d2:	6101      	strcc	r1, [r0, #16]
 80163d4:	6084      	str	r4, [r0, #8]
 80163d6:	6903      	ldr	r3, [r0, #16]
 80163d8:	464f      	mov	r7, r9
 80163da:	f8a3 a000 	strh.w	sl, [r3]
 80163de:	805a      	strh	r2, [r3, #2]
 80163e0:	809e      	strh	r6, [r3, #4]
 80163e2:	80de      	strh	r6, [r3, #6]
 80163e4:	9b06      	ldr	r3, [sp, #24]
 80163e6:	4293      	cmp	r3, r2
 80163e8:	d19c      	bne.n	8016324 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 80163ea:	9b01      	ldr	r3, [sp, #4]
 80163ec:	6907      	ldr	r7, [r0, #16]
 80163ee:	f1c3 0620 	rsb	r6, r3, #32
 80163f2:	9b05      	ldr	r3, [sp, #20]
 80163f4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80163f8:	9b04      	ldr	r3, [sp, #16]
 80163fa:	429e      	cmp	r6, r3
 80163fc:	f040 81cc 	bne.w	8016798 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8016400:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016404:	459e      	cmp	lr, r3
 8016406:	d104      	bne.n	8016412 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 8016408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801640c:	429a      	cmp	r2, r3
 801640e:	f43f ae36 	beq.w	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016412:	88f9      	ldrh	r1, [r7, #6]
 8016414:	88bb      	ldrh	r3, [r7, #4]
 8016416:	430b      	orrs	r3, r1
 8016418:	d010      	beq.n	801643c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801641a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801641e:	2b00      	cmp	r3, #0
 8016420:	db0c      	blt.n	801643c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016422:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016424:	428b      	cmp	r3, r1
 8016426:	da09      	bge.n	801643c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016428:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801642c:	428b      	cmp	r3, r1
 801642e:	bf38      	it	cc
 8016430:	3708      	addcc	r7, #8
 8016432:	f103 0301 	add.w	r3, r3, #1
 8016436:	bf38      	it	cc
 8016438:	6107      	strcc	r7, [r0, #16]
 801643a:	6083      	str	r3, [r0, #8]
 801643c:	6903      	ldr	r3, [r0, #16]
 801643e:	f8a3 e000 	strh.w	lr, [r3]
 8016442:	e5ff      	b.n	8016044 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8016444:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8016446:	9c03      	ldr	r4, [sp, #12]
 8016448:	42a2      	cmp	r2, r4
 801644a:	f6ff ae18 	blt.w	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801644e:	9c06      	ldr	r4, [sp, #24]
 8016450:	42a2      	cmp	r2, r4
 8016452:	bfb8      	it	lt
 8016454:	3201      	addlt	r2, #1
 8016456:	9c08      	ldr	r4, [sp, #32]
 8016458:	bfb8      	it	lt
 801645a:	9206      	strlt	r2, [sp, #24]
 801645c:	f1c3 0220 	rsb	r2, r3, #32
 8016460:	4362      	muls	r2, r4
 8016462:	2401      	movs	r4, #1
 8016464:	940b      	str	r4, [sp, #44]	; 0x2c
 8016466:	2420      	movs	r4, #32
 8016468:	e6d5      	b.n	8016216 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801646a:	f009 021f 	and.w	r2, r9, #31
 801646e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8016472:	920c      	str	r2, [sp, #48]	; 0x30
 8016474:	9a01      	ldr	r2, [sp, #4]
 8016476:	45b0      	cmp	r8, r6
 8016478:	f001 011f 	and.w	r1, r1, #31
 801647c:	eba2 0203 	sub.w	r2, r2, r3
 8016480:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8016484:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8016488:	d108      	bne.n	801649c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801648a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801648c:	4496      	add	lr, r2
 801648e:	4419      	add	r1, r3
 8016490:	fb02 a101 	mla	r1, r2, r1, sl
 8016494:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016498:	80e9      	strh	r1, [r5, #6]
 801649a:	e6f9      	b.n	8016290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801649c:	2c00      	cmp	r4, #0
 801649e:	f2c0 80aa 	blt.w	80165f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 80164a2:	2701      	movs	r7, #1
 80164a4:	970a      	str	r7, [sp, #40]	; 0x28
 80164a6:	2720      	movs	r7, #32
 80164a8:	f1c1 0c20 	rsb	ip, r1, #32
 80164ac:	fb02 f20c 	mul.w	r2, r2, ip
 80164b0:	fb92 fcf4 	sdiv	ip, r2, r4
 80164b4:	fb04 221c 	mls	r2, r4, ip, r2
 80164b8:	9709      	str	r7, [sp, #36]	; 0x24
 80164ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80164bc:	2a00      	cmp	r2, #0
 80164be:	bfb8      	it	lt
 80164c0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80164c4:	4439      	add	r1, r7
 80164c6:	fb0c a101 	mla	r1, ip, r1, sl
 80164ca:	44e6      	add	lr, ip
 80164cc:	80e9      	strh	r1, [r5, #6]
 80164ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80164d0:	f8a5 e004 	strh.w	lr, [r5, #4]
 80164d4:	eb08 0501 	add.w	r5, r8, r1
 80164d8:	6901      	ldr	r1, [r0, #16]
 80164da:	bfb8      	it	lt
 80164dc:	1912      	addlt	r2, r2, r4
 80164de:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80164e2:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80164e6:	ea58 070e 	orrs.w	r7, r8, lr
 80164ea:	d010      	beq.n	801650e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80164ec:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80164f0:	f1be 0f00 	cmp.w	lr, #0
 80164f4:	db0b      	blt.n	801650e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80164f6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80164f8:	45be      	cmp	lr, r7
 80164fa:	da08      	bge.n	801650e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80164fc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016500:	45be      	cmp	lr, r7
 8016502:	bf3c      	itt	cc
 8016504:	3108      	addcc	r1, #8
 8016506:	6101      	strcc	r1, [r0, #16]
 8016508:	f10e 0101 	add.w	r1, lr, #1
 801650c:	6081      	str	r1, [r0, #8]
 801650e:	f04f 0e00 	mov.w	lr, #0
 8016512:	6901      	ldr	r1, [r0, #16]
 8016514:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8016518:	42ae      	cmp	r6, r5
 801651a:	800d      	strh	r5, [r1, #0]
 801651c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8016520:	f8a1 e004 	strh.w	lr, [r1, #4]
 8016524:	f8a1 e006 	strh.w	lr, [r1, #6]
 8016528:	4463      	add	r3, ip
 801652a:	d055      	beq.n	80165d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 801652c:	9901      	ldr	r1, [sp, #4]
 801652e:	1b12      	subs	r2, r2, r4
 8016530:	1ac9      	subs	r1, r1, r3
 8016532:	4461      	add	r1, ip
 8016534:	0149      	lsls	r1, r1, #5
 8016536:	fb91 fef4 	sdiv	lr, r1, r4
 801653a:	fb04 111e 	mls	r1, r4, lr, r1
 801653e:	2900      	cmp	r1, #0
 8016540:	bfb8      	it	lt
 8016542:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8016546:	f10e 0701 	add.w	r7, lr, #1
 801654a:	bfb8      	it	lt
 801654c:	1909      	addlt	r1, r1, r4
 801654e:	970d      	str	r7, [sp, #52]	; 0x34
 8016550:	1852      	adds	r2, r2, r1
 8016552:	bf48      	it	mi
 8016554:	46f4      	movmi	ip, lr
 8016556:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801655a:	bf58      	it	pl
 801655c:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8016560:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8016564:	4463      	add	r3, ip
 8016566:	44e3      	add	fp, ip
 8016568:	f8aa b004 	strh.w	fp, [sl, #4]
 801656c:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8016570:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016572:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8016576:	f8aa b006 	strh.w	fp, [sl, #6]
 801657a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801657e:	bf58      	it	pl
 8016580:	1b12      	subpl	r2, r2, r4
 8016582:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016586:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801658a:	443d      	add	r5, r7
 801658c:	ea5b 070a 	orrs.w	r7, fp, sl
 8016590:	d014      	beq.n	80165bc <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8016592:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8016596:	f1ba 0f00 	cmp.w	sl, #0
 801659a:	db0f      	blt.n	80165bc <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801659c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801659e:	45ba      	cmp	sl, r7
 80165a0:	da0c      	bge.n	80165bc <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 80165a2:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80165a6:	45ba      	cmp	sl, r7
 80165a8:	bf38      	it	cc
 80165aa:	f10c 0c08 	addcc.w	ip, ip, #8
 80165ae:	f10a 0a01 	add.w	sl, sl, #1
 80165b2:	bf38      	it	cc
 80165b4:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80165b8:	f8c0 a008 	str.w	sl, [r0, #8]
 80165bc:	f04f 0700 	mov.w	r7, #0
 80165c0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80165c4:	42ae      	cmp	r6, r5
 80165c6:	f8ac 5000 	strh.w	r5, [ip]
 80165ca:	f8ac 8002 	strh.w	r8, [ip, #2]
 80165ce:	f8ac 7004 	strh.w	r7, [ip, #4]
 80165d2:	f8ac 7006 	strh.w	r7, [ip, #6]
 80165d6:	d1bb      	bne.n	8016550 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 80165d8:	6904      	ldr	r4, [r0, #16]
 80165da:	9a01      	ldr	r2, [sp, #4]
 80165dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	88a2      	ldrh	r2, [r4, #4]
 80165e2:	3120      	adds	r1, #32
 80165e4:	441a      	add	r2, r3
 80165e6:	80a2      	strh	r2, [r4, #4]
 80165e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165ea:	1a89      	subs	r1, r1, r2
 80165ec:	88e2      	ldrh	r2, [r4, #6]
 80165ee:	fb03 2301 	mla	r3, r3, r1, r2
 80165f2:	80e3      	strh	r3, [r4, #6]
 80165f4:	e64c      	b.n	8016290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80165f6:	f04f 37ff 	mov.w	r7, #4294967295
 80165fa:	434a      	muls	r2, r1
 80165fc:	970a      	str	r7, [sp, #40]	; 0x28
 80165fe:	4264      	negs	r4, r4
 8016600:	2700      	movs	r7, #0
 8016602:	e755      	b.n	80164b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8016604:	ea4f 1867 	mov.w	r8, r7, asr #5
 8016608:	f009 031f 	and.w	r3, r9, #31
 801660c:	45d0      	cmp	r8, sl
 801660e:	f007 071f 	and.w	r7, r7, #31
 8016612:	930f      	str	r3, [sp, #60]	; 0x3c
 8016614:	fa1f fc8c 	uxth.w	ip, ip
 8016618:	fa1f fe8e 	uxth.w	lr, lr
 801661c:	d10a      	bne.n	8016634 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 801661e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016620:	449c      	add	ip, r3
 8016622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016624:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016628:	441f      	add	r7, r3
 801662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801662c:	fb03 e707 	mla	r7, r3, r7, lr
 8016630:	80ef      	strh	r7, [r5, #6]
 8016632:	e6b8      	b.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016634:	2900      	cmp	r1, #0
 8016636:	f2c0 80a7 	blt.w	8016788 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801663a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801663c:	f1c7 0320 	rsb	r3, r7, #32
 8016640:	4363      	muls	r3, r4
 8016642:	2401      	movs	r4, #1
 8016644:	940d      	str	r4, [sp, #52]	; 0x34
 8016646:	2420      	movs	r4, #32
 8016648:	940c      	str	r4, [sp, #48]	; 0x30
 801664a:	fb93 f4f1 	sdiv	r4, r3, r1
 801664e:	fb01 3b14 	mls	fp, r1, r4, r3
 8016652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016654:	f1bb 0f00 	cmp.w	fp, #0
 8016658:	bfb8      	it	lt
 801665a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801665e:	441f      	add	r7, r3
 8016660:	fb04 e707 	mla	r7, r4, r7, lr
 8016664:	44a4      	add	ip, r4
 8016666:	f8a5 c004 	strh.w	ip, [r5, #4]
 801666a:	80ef      	strh	r7, [r5, #6]
 801666c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016672:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8016676:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801667a:	bfb8      	it	lt
 801667c:	448b      	addlt	fp, r1
 801667e:	eb08 0503 	add.w	r5, r8, r3
 8016682:	ea5e 0307 	orrs.w	r3, lr, r7
 8016686:	d011      	beq.n	80166ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016688:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801668c:	f1be 0f00 	cmp.w	lr, #0
 8016690:	db0c      	blt.n	80166ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016692:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016694:	45be      	cmp	lr, r7
 8016696:	da09      	bge.n	80166ac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8016698:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801669c:	45be      	cmp	lr, r7
 801669e:	bf3c      	itt	cc
 80166a0:	f10c 0708 	addcc.w	r7, ip, #8
 80166a4:	6107      	strcc	r7, [r0, #16]
 80166a6:	f10e 0701 	add.w	r7, lr, #1
 80166aa:	6087      	str	r7, [r0, #8]
 80166ac:	6907      	ldr	r7, [r0, #16]
 80166ae:	b213      	sxth	r3, r2
 80166b0:	9310      	str	r3, [sp, #64]	; 0x40
 80166b2:	807b      	strh	r3, [r7, #2]
 80166b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166b6:	4555      	cmp	r5, sl
 80166b8:	803d      	strh	r5, [r7, #0]
 80166ba:	80be      	strh	r6, [r7, #4]
 80166bc:	80fe      	strh	r6, [r7, #6]
 80166be:	eb04 0c03 	add.w	ip, r4, r3
 80166c2:	d050      	beq.n	8016766 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 80166c4:	9b01      	ldr	r3, [sp, #4]
 80166c6:	eba3 070c 	sub.w	r7, r3, ip
 80166ca:	443c      	add	r4, r7
 80166cc:	0164      	lsls	r4, r4, #5
 80166ce:	fb94 f8f1 	sdiv	r8, r4, r1
 80166d2:	fb01 4418 	mls	r4, r1, r8, r4
 80166d6:	2c00      	cmp	r4, #0
 80166d8:	bfb8      	it	lt
 80166da:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80166de:	ebab 0301 	sub.w	r3, fp, r1
 80166e2:	f108 0701 	add.w	r7, r8, #1
 80166e6:	bfb8      	it	lt
 80166e8:	1864      	addlt	r4, r4, r1
 80166ea:	9309      	str	r3, [sp, #36]	; 0x24
 80166ec:	9711      	str	r7, [sp, #68]	; 0x44
 80166ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80166f4:	191b      	adds	r3, r3, r4
 80166f6:	bf4c      	ite	mi
 80166f8:	4647      	movmi	r7, r8
 80166fa:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80166fc:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016700:	44bc      	add	ip, r7
 8016702:	44bb      	add	fp, r7
 8016704:	f8ae b004 	strh.w	fp, [lr, #4]
 8016708:	f8be b006 	ldrh.w	fp, [lr, #6]
 801670c:	9309      	str	r3, [sp, #36]	; 0x24
 801670e:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016712:	f8ae b006 	strh.w	fp, [lr, #6]
 8016716:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016718:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801671c:	443d      	add	r5, r7
 801671e:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016722:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8016726:	bf5c      	itt	pl
 8016728:	1a5b      	subpl	r3, r3, r1
 801672a:	9309      	strpl	r3, [sp, #36]	; 0x24
 801672c:	ea5b 0307 	orrs.w	r3, fp, r7
 8016730:	d011      	beq.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8016732:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8016736:	f1bb 0f00 	cmp.w	fp, #0
 801673a:	db0c      	blt.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801673c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801673e:	45bb      	cmp	fp, r7
 8016740:	da09      	bge.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8016742:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016746:	45bb      	cmp	fp, r7
 8016748:	bf3c      	itt	cc
 801674a:	f10e 0708 	addcc.w	r7, lr, #8
 801674e:	6107      	strcc	r7, [r0, #16]
 8016750:	f10b 0701 	add.w	r7, fp, #1
 8016754:	6087      	str	r7, [r0, #8]
 8016756:	6907      	ldr	r7, [r0, #16]
 8016758:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801675a:	4555      	cmp	r5, sl
 801675c:	803d      	strh	r5, [r7, #0]
 801675e:	807b      	strh	r3, [r7, #2]
 8016760:	80be      	strh	r6, [r7, #4]
 8016762:	80fe      	strh	r6, [r7, #6]
 8016764:	d1c3      	bne.n	80166ee <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 8016766:	9b01      	ldr	r3, [sp, #4]
 8016768:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801676a:	eba3 0c0c 	sub.w	ip, r3, ip
 801676e:	6903      	ldr	r3, [r0, #16]
 8016770:	3720      	adds	r7, #32
 8016772:	8899      	ldrh	r1, [r3, #4]
 8016774:	4461      	add	r1, ip
 8016776:	8099      	strh	r1, [r3, #4]
 8016778:	990c      	ldr	r1, [sp, #48]	; 0x30
 801677a:	1a7f      	subs	r7, r7, r1
 801677c:	88d9      	ldrh	r1, [r3, #6]
 801677e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8016782:	f8a3 c006 	strh.w	ip, [r3, #6]
 8016786:	e60e      	b.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016788:	f04f 34ff 	mov.w	r4, #4294967295
 801678c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801678e:	940d      	str	r4, [sp, #52]	; 0x34
 8016790:	437b      	muls	r3, r7
 8016792:	4249      	negs	r1, r1
 8016794:	2400      	movs	r4, #0
 8016796:	e757      	b.n	8016648 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8016798:	9905      	ldr	r1, [sp, #20]
 801679a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801679e:	f001 011f 	and.w	r1, r1, #31
 80167a2:	9102      	str	r1, [sp, #8]
 80167a4:	9904      	ldr	r1, [sp, #16]
 80167a6:	45f3      	cmp	fp, lr
 80167a8:	f009 0c1f 	and.w	ip, r9, #31
 80167ac:	eba1 0406 	sub.w	r4, r1, r6
 80167b0:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80167b4:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80167b8:	d108      	bne.n	80167cc <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 80167ba:	9b02      	ldr	r3, [sp, #8]
 80167bc:	44a0      	add	r8, r4
 80167be:	449c      	add	ip, r3
 80167c0:	fb04 a40c 	mla	r4, r4, ip, sl
 80167c4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80167c8:	80fc      	strh	r4, [r7, #6]
 80167ca:	e458      	b.n	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80167cc:	9905      	ldr	r1, [sp, #20]
 80167ce:	ebb1 0109 	subs.w	r1, r1, r9
 80167d2:	bf5b      	ittet	pl
 80167d4:	f1cc 0520 	rsbpl	r5, ip, #32
 80167d8:	436c      	mulpl	r4, r5
 80167da:	2500      	movmi	r5, #0
 80167dc:	2520      	movpl	r5, #32
 80167de:	bf44      	itt	mi
 80167e0:	fb04 f40c 	mulmi.w	r4, r4, ip
 80167e4:	4249      	negmi	r1, r1
 80167e6:	9501      	str	r5, [sp, #4]
 80167e8:	fb94 f5f1 	sdiv	r5, r4, r1
 80167ec:	bf54      	ite	pl
 80167ee:	f04f 0901 	movpl.w	r9, #1
 80167f2:	f04f 39ff 	movmi.w	r9, #4294967295
 80167f6:	fb01 4415 	mls	r4, r1, r5, r4
 80167fa:	9b01      	ldr	r3, [sp, #4]
 80167fc:	2c00      	cmp	r4, #0
 80167fe:	bfb8      	it	lt
 8016800:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016804:	449c      	add	ip, r3
 8016806:	fb05 ac0c 	mla	ip, r5, ip, sl
 801680a:	44a8      	add	r8, r5
 801680c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016810:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016814:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016818:	bfb8      	it	lt
 801681a:	1864      	addlt	r4, r4, r1
 801681c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016820:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016824:	eb0b 0309 	add.w	r3, fp, r9
 8016828:	ea58 0707 	orrs.w	r7, r8, r7
 801682c:	d011      	beq.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801682e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016832:	f1b8 0f00 	cmp.w	r8, #0
 8016836:	db0c      	blt.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8016838:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801683a:	45b8      	cmp	r8, r7
 801683c:	da09      	bge.n	8016852 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801683e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8016842:	45b8      	cmp	r8, r7
 8016844:	bf3c      	itt	cc
 8016846:	f10c 0708 	addcc.w	r7, ip, #8
 801684a:	6107      	strcc	r7, [r0, #16]
 801684c:	f108 0701 	add.w	r7, r8, #1
 8016850:	6087      	str	r7, [r0, #8]
 8016852:	f04f 0c00 	mov.w	ip, #0
 8016856:	6907      	ldr	r7, [r0, #16]
 8016858:	b212      	sxth	r2, r2
 801685a:	459e      	cmp	lr, r3
 801685c:	803b      	strh	r3, [r7, #0]
 801685e:	807a      	strh	r2, [r7, #2]
 8016860:	f8a7 c004 	strh.w	ip, [r7, #4]
 8016864:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016868:	442e      	add	r6, r5
 801686a:	d04d      	beq.n	8016908 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801686c:	9f04      	ldr	r7, [sp, #16]
 801686e:	f04f 0a00 	mov.w	sl, #0
 8016872:	1bbf      	subs	r7, r7, r6
 8016874:	443d      	add	r5, r7
 8016876:	016d      	lsls	r5, r5, #5
 8016878:	fb95 f8f1 	sdiv	r8, r5, r1
 801687c:	fb01 5518 	mls	r5, r1, r8, r5
 8016880:	4565      	cmp	r5, ip
 8016882:	bfb8      	it	lt
 8016884:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016888:	f108 0701 	add.w	r7, r8, #1
 801688c:	bfb8      	it	lt
 801688e:	186d      	addlt	r5, r5, r1
 8016890:	1a64      	subs	r4, r4, r1
 8016892:	9703      	str	r7, [sp, #12]
 8016894:	1964      	adds	r4, r4, r5
 8016896:	bf48      	it	mi
 8016898:	4647      	movmi	r7, r8
 801689a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801689e:	bf58      	it	pl
 80168a0:	9f03      	ldrpl	r7, [sp, #12]
 80168a2:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80168a6:	443e      	add	r6, r7
 80168a8:	44bb      	add	fp, r7
 80168aa:	f8ac b004 	strh.w	fp, [ip, #4]
 80168ae:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80168b2:	bf58      	it	pl
 80168b4:	1a64      	subpl	r4, r4, r1
 80168b6:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80168ba:	f8ac b006 	strh.w	fp, [ip, #6]
 80168be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80168c2:	444b      	add	r3, r9
 80168c4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80168c8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80168cc:	ea5b 0707 	orrs.w	r7, fp, r7
 80168d0:	d011      	beq.n	80168f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80168d2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80168d6:	f1bb 0f00 	cmp.w	fp, #0
 80168da:	db0c      	blt.n	80168f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80168dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80168de:	45bb      	cmp	fp, r7
 80168e0:	da09      	bge.n	80168f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 80168e2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80168e6:	45bb      	cmp	fp, r7
 80168e8:	bf3c      	itt	cc
 80168ea:	f10c 0708 	addcc.w	r7, ip, #8
 80168ee:	6107      	strcc	r7, [r0, #16]
 80168f0:	f10b 0701 	add.w	r7, fp, #1
 80168f4:	6087      	str	r7, [r0, #8]
 80168f6:	6907      	ldr	r7, [r0, #16]
 80168f8:	459e      	cmp	lr, r3
 80168fa:	803b      	strh	r3, [r7, #0]
 80168fc:	807a      	strh	r2, [r7, #2]
 80168fe:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016902:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016906:	d1c5      	bne.n	8016894 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8016908:	9b04      	ldr	r3, [sp, #16]
 801690a:	1b9e      	subs	r6, r3, r6
 801690c:	6903      	ldr	r3, [r0, #16]
 801690e:	889a      	ldrh	r2, [r3, #4]
 8016910:	4432      	add	r2, r6
 8016912:	809a      	strh	r2, [r3, #4]
 8016914:	9a02      	ldr	r2, [sp, #8]
 8016916:	f102 0c20 	add.w	ip, r2, #32
 801691a:	9a01      	ldr	r2, [sp, #4]
 801691c:	ebac 0c02 	sub.w	ip, ip, r2
 8016920:	88da      	ldrh	r2, [r3, #6]
 8016922:	fb06 260c 	mla	r6, r6, ip, r2
 8016926:	80de      	strh	r6, [r3, #6]
 8016928:	f7ff bba9 	b.w	801607e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

0801692c <_ZN8touchgfx7Outline6lineToEii>:
 801692c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801692e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016930:	079b      	lsls	r3, r3, #30
 8016932:	460e      	mov	r6, r1
 8016934:	4615      	mov	r5, r2
 8016936:	d511      	bpl.n	801695c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016938:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801693c:	ea86 0701 	eor.w	r7, r6, r1
 8016940:	ea85 0302 	eor.w	r3, r5, r2
 8016944:	433b      	orrs	r3, r7
 8016946:	d009      	beq.n	801695c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016948:	4633      	mov	r3, r6
 801694a:	9500      	str	r5, [sp, #0]
 801694c:	f7ff fb3e 	bl	8015fcc <_ZN8touchgfx7Outline10renderLineEiiii>
 8016950:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016952:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8016956:	f043 0301 	orr.w	r3, r3, #1
 801695a:	6243      	str	r3, [r0, #36]	; 0x24
 801695c:	b003      	add	sp, #12
 801695e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016960 <_ZN8touchgfx7Outline6moveToEii>:
 8016960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016962:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016964:	4615      	mov	r5, r2
 8016966:	079a      	lsls	r2, r3, #30
 8016968:	4604      	mov	r4, r0
 801696a:	460e      	mov	r6, r1
 801696c:	d401      	bmi.n	8016972 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801696e:	f7ff faf9 	bl	8015f64 <_ZN8touchgfx7Outline5resetEv>
 8016972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016974:	07db      	lsls	r3, r3, #31
 8016976:	d504      	bpl.n	8016982 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016978:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801697c:	4620      	mov	r0, r4
 801697e:	f7ff ffd5 	bl	801692c <_ZN8touchgfx7Outline6lineToEii>
 8016982:	6923      	ldr	r3, [r4, #16]
 8016984:	1170      	asrs	r0, r6, #5
 8016986:	f9b3 2000 	ldrsh.w	r2, [r3]
 801698a:	1169      	asrs	r1, r5, #5
 801698c:	4290      	cmp	r0, r2
 801698e:	d103      	bne.n	8016998 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8016990:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016994:	4291      	cmp	r1, r2
 8016996:	d01a      	beq.n	80169ce <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8016998:	88df      	ldrh	r7, [r3, #6]
 801699a:	889a      	ldrh	r2, [r3, #4]
 801699c:	433a      	orrs	r2, r7
 801699e:	d010      	beq.n	80169c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80169a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80169a4:	2a00      	cmp	r2, #0
 80169a6:	db0c      	blt.n	80169c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80169a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80169aa:	42ba      	cmp	r2, r7
 80169ac:	da09      	bge.n	80169c2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 80169ae:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80169b2:	42ba      	cmp	r2, r7
 80169b4:	bf38      	it	cc
 80169b6:	3308      	addcc	r3, #8
 80169b8:	f102 0201 	add.w	r2, r2, #1
 80169bc:	bf38      	it	cc
 80169be:	6123      	strcc	r3, [r4, #16]
 80169c0:	60a2      	str	r2, [r4, #8]
 80169c2:	2200      	movs	r2, #0
 80169c4:	6923      	ldr	r3, [r4, #16]
 80169c6:	8018      	strh	r0, [r3, #0]
 80169c8:	8059      	strh	r1, [r3, #2]
 80169ca:	809a      	strh	r2, [r3, #4]
 80169cc:	80da      	strh	r2, [r3, #6]
 80169ce:	6166      	str	r6, [r4, #20]
 80169d0:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80169d4:	6225      	str	r5, [r4, #32]
 80169d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080169d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80169d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169dc:	b0d0      	sub	sp, #320	; 0x140
 80169de:	466c      	mov	r4, sp
 80169e0:	4627      	mov	r7, r4
 80169e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80169e6:	1a0d      	subs	r5, r1, r0
 80169e8:	2d48      	cmp	r5, #72	; 0x48
 80169ea:	f100 0308 	add.w	r3, r0, #8
 80169ee:	f340 80d5 	ble.w	8016b9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80169f2:	112d      	asrs	r5, r5, #4
 80169f4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80169f8:	6816      	ldr	r6, [r2, #0]
 80169fa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80169fe:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016a02:	6006      	str	r6, [r0, #0]
 8016a04:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016a08:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016a0c:	6856      	ldr	r6, [r2, #4]
 8016a0e:	6046      	str	r6, [r0, #4]
 8016a10:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016a14:	f8a2 8002 	strh.w	r8, [r2, #2]
 8016a18:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016a1c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016a20:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016a24:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8016a28:	f1a1 0208 	sub.w	r2, r1, #8
 8016a2c:	4565      	cmp	r5, ip
 8016a2e:	db06      	blt.n	8016a3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8016a30:	d119      	bne.n	8016a66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016a32:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8016a36:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8016a3a:	42ae      	cmp	r6, r5
 8016a3c:	dd13      	ble.n	8016a66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016a3e:	460e      	mov	r6, r1
 8016a40:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016a44:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8016a48:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8016a4c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8016a50:	601d      	str	r5, [r3, #0]
 8016a52:	6875      	ldr	r5, [r6, #4]
 8016a54:	605d      	str	r5, [r3, #4]
 8016a56:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016a5a:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016a5e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016a62:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016a66:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016a6a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8016a6e:	42ae      	cmp	r6, r5
 8016a70:	db06      	blt.n	8016a80 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8016a72:	d116      	bne.n	8016aa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016a74:	f9b0 c000 	ldrsh.w	ip, [r0]
 8016a78:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8016a7c:	45ac      	cmp	ip, r5
 8016a7e:	da10      	bge.n	8016aa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016a80:	681d      	ldr	r5, [r3, #0]
 8016a82:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016a86:	6005      	str	r5, [r0, #0]
 8016a88:	685d      	ldr	r5, [r3, #4]
 8016a8a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016a8e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016a92:	f8a0 8008 	strh.w	r8, [r0, #8]
 8016a96:	6045      	str	r5, [r0, #4]
 8016a98:	8146      	strh	r6, [r0, #10]
 8016a9a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8016a9e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016aa2:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016aa6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016aaa:	4565      	cmp	r5, ip
 8016aac:	db06      	blt.n	8016abc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016aae:	d119      	bne.n	8016ae4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016ab0:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016ab4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016ab8:	42ae      	cmp	r6, r5
 8016aba:	da13      	bge.n	8016ae4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016abc:	460e      	mov	r6, r1
 8016abe:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016ac2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016ac6:	6005      	str	r5, [r0, #0]
 8016ac8:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016acc:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016ad0:	6875      	ldr	r5, [r6, #4]
 8016ad2:	6045      	str	r5, [r0, #4]
 8016ad4:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016ad8:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016adc:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016ae0:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8016aea:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016aee:	45e6      	cmp	lr, ip
 8016af0:	dbf8      	blt.n	8016ae4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016af2:	d105      	bne.n	8016b00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016af4:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016af8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016afc:	42ae      	cmp	r6, r5
 8016afe:	dbf1      	blt.n	8016ae4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016b00:	4615      	mov	r5, r2
 8016b02:	3a08      	subs	r2, #8
 8016b04:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8016b08:	45b4      	cmp	ip, r6
 8016b0a:	dbf9      	blt.n	8016b00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016b0c:	d105      	bne.n	8016b1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8016b0e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016b12:	f9b2 6000 	ldrsh.w	r6, [r2]
 8016b16:	45b0      	cmp	r8, r6
 8016b18:	dbf2      	blt.n	8016b00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016b1a:	4293      	cmp	r3, r2
 8016b1c:	f1a5 0608 	sub.w	r6, r5, #8
 8016b20:	d816      	bhi.n	8016b50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8016b22:	f8d6 c000 	ldr.w	ip, [r6]
 8016b26:	f9b3 a000 	ldrsh.w	sl, [r3]
 8016b2a:	f8c3 c000 	str.w	ip, [r3]
 8016b2e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8016b32:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8016b36:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8016b3a:	f8c3 c004 	str.w	ip, [r3, #4]
 8016b3e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016b42:	f825 ec06 	strh.w	lr, [r5, #-6]
 8016b46:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016b4a:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016b4e:	e7c9      	b.n	8016ae4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016b50:	f8d6 e000 	ldr.w	lr, [r6]
 8016b54:	f9b0 a000 	ldrsh.w	sl, [r0]
 8016b58:	f8c0 e000 	str.w	lr, [r0]
 8016b5c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016b60:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8016b64:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016b68:	1a16      	subs	r6, r2, r0
 8016b6a:	f8c0 e004 	str.w	lr, [r0, #4]
 8016b6e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016b72:	f825 cc06 	strh.w	ip, [r5, #-6]
 8016b76:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016b7a:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016b7e:	1acd      	subs	r5, r1, r3
 8016b80:	10ed      	asrs	r5, r5, #3
 8016b82:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016b86:	bfb5      	itete	lt
 8016b88:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016b8c:	e9c4 3100 	strdge	r3, r1, [r4]
 8016b90:	460a      	movlt	r2, r1
 8016b92:	4603      	movge	r3, r0
 8016b94:	3408      	adds	r4, #8
 8016b96:	4618      	mov	r0, r3
 8016b98:	4611      	mov	r1, r2
 8016b9a:	e724      	b.n	80169e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016b9c:	4299      	cmp	r1, r3
 8016b9e:	d928      	bls.n	8016bf2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8016ba0:	f1a3 0210 	sub.w	r2, r3, #16
 8016ba4:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016ba8:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016bac:	45ac      	cmp	ip, r5
 8016bae:	db06      	blt.n	8016bbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016bb0:	d11d      	bne.n	8016bee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016bb2:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016bb6:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016bba:	42ae      	cmp	r6, r5
 8016bbc:	da17      	bge.n	8016bee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016bbe:	4615      	mov	r5, r2
 8016bc0:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016bc4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016bc8:	6116      	str	r6, [r2, #16]
 8016bca:	686e      	ldr	r6, [r5, #4]
 8016bcc:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016bd0:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8016bd4:	42a8      	cmp	r0, r5
 8016bd6:	6156      	str	r6, [r2, #20]
 8016bd8:	f8a2 9008 	strh.w	r9, [r2, #8]
 8016bdc:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8016be0:	f8a2 800c 	strh.w	r8, [r2, #12]
 8016be4:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8016be8:	f1a2 0208 	sub.w	r2, r2, #8
 8016bec:	d1da      	bne.n	8016ba4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8016bee:	3308      	adds	r3, #8
 8016bf0:	e7d4      	b.n	8016b9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016bf2:	42bc      	cmp	r4, r7
 8016bf4:	d903      	bls.n	8016bfe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8016bf6:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8016bfa:	3c08      	subs	r4, #8
 8016bfc:	e6f3      	b.n	80169e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016bfe:	b050      	add	sp, #320	; 0x140
 8016c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016c04 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8016c04:	b510      	push	{r4, lr}
 8016c06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016c08:	4604      	mov	r4, r0
 8016c0a:	07da      	lsls	r2, r3, #31
 8016c0c:	d507      	bpl.n	8016c1e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8016c0e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8016c12:	f7ff fe8b 	bl	801692c <_ZN8touchgfx7Outline6lineToEii>
 8016c16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016c18:	f023 0301 	bic.w	r3, r3, #1
 8016c1c:	6243      	str	r3, [r0, #36]	; 0x24
 8016c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c20:	079b      	lsls	r3, r3, #30
 8016c22:	d521      	bpl.n	8016c68 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8016c24:	6923      	ldr	r3, [r4, #16]
 8016c26:	88d9      	ldrh	r1, [r3, #6]
 8016c28:	889a      	ldrh	r2, [r3, #4]
 8016c2a:	430a      	orrs	r2, r1
 8016c2c:	d010      	beq.n	8016c50 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016c2e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016c32:	2a00      	cmp	r2, #0
 8016c34:	db0c      	blt.n	8016c50 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016c36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016c38:	428a      	cmp	r2, r1
 8016c3a:	da09      	bge.n	8016c50 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016c3c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8016c40:	4291      	cmp	r1, r2
 8016c42:	bf88      	it	hi
 8016c44:	3308      	addhi	r3, #8
 8016c46:	f102 0201 	add.w	r2, r2, #1
 8016c4a:	bf88      	it	hi
 8016c4c:	6123      	strhi	r3, [r4, #16]
 8016c4e:	60a2      	str	r2, [r4, #8]
 8016c50:	68a1      	ldr	r1, [r4, #8]
 8016c52:	b129      	cbz	r1, 8016c60 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016c54:	6863      	ldr	r3, [r4, #4]
 8016c56:	4299      	cmp	r1, r3
 8016c58:	d802      	bhi.n	8016c60 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016c5a:	68e0      	ldr	r0, [r4, #12]
 8016c5c:	f7ff febc 	bl	80169d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8016c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c62:	f023 0302 	bic.w	r3, r3, #2
 8016c66:	6263      	str	r3, [r4, #36]	; 0x24
 8016c68:	68e0      	ldr	r0, [r4, #12]
 8016c6a:	bd10      	pop	{r4, pc}

08016c6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016c6c:	4b02      	ldr	r3, [pc, #8]	; (8016c78 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016c6e:	6018      	str	r0, [r3, #0]
 8016c70:	4b02      	ldr	r3, [pc, #8]	; (8016c7c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016c72:	6019      	str	r1, [r3, #0]
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	2004f6fc 	.word	0x2004f6fc
 8016c7c:	2004f700 	.word	0x2004f700

08016c80 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016c80:	4b01      	ldr	r3, [pc, #4]	; (8016c88 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016c82:	6818      	ldr	r0, [r3, #0]
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop
 8016c88:	2004f6fc 	.word	0x2004f6fc

08016c8c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016c8c:	4b01      	ldr	r3, [pc, #4]	; (8016c94 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016c8e:	6818      	ldr	r0, [r3, #0]
 8016c90:	4770      	bx	lr
 8016c92:	bf00      	nop
 8016c94:	2004f700 	.word	0x2004f700

08016c98 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016c98:	b510      	push	{r4, lr}
 8016c9a:	6803      	ldr	r3, [r0, #0]
 8016c9c:	460c      	mov	r4, r1
 8016c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca0:	4798      	blx	r3
 8016ca2:	1b03      	subs	r3, r0, r4
 8016ca4:	4258      	negs	r0, r3
 8016ca6:	4158      	adcs	r0, r3
 8016ca8:	bd10      	pop	{r4, pc}
	...

08016cac <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016cac:	4b01      	ldr	r3, [pc, #4]	; (8016cb4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016cae:	6019      	str	r1, [r3, #0]
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	2004f704 	.word	0x2004f704

08016cb8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cbc:	4696      	mov	lr, r2
 8016cbe:	4614      	mov	r4, r2
 8016cc0:	4605      	mov	r5, r0
 8016cc2:	460e      	mov	r6, r1
 8016cc4:	461f      	mov	r7, r3
 8016cc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016cca:	b097      	sub	sp, #92	; 0x5c
 8016ccc:	f10d 0c1c 	add.w	ip, sp, #28
 8016cd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cd4:	f8de 3000 	ldr.w	r3, [lr]
 8016cd8:	f104 0e14 	add.w	lr, r4, #20
 8016cdc:	f8cc 3000 	str.w	r3, [ip]
 8016ce0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016ce4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ce8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cec:	f8de 3000 	ldr.w	r3, [lr]
 8016cf0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016cf4:	f8cc 3000 	str.w	r3, [ip]
 8016cf8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016cfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d04:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016d08:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016d0c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016d10:	f8de 3000 	ldr.w	r3, [lr]
 8016d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d16:	f8cc 3000 	str.w	r3, [ip]
 8016d1a:	9201      	str	r2, [sp, #4]
 8016d1c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016d20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d22:	682b      	ldr	r3, [r5, #0]
 8016d24:	9200      	str	r2, [sp, #0]
 8016d26:	f8cd 8008 	str.w	r8, [sp, #8]
 8016d2a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016d2e:	aa07      	add	r2, sp, #28
 8016d30:	463b      	mov	r3, r7
 8016d32:	4631      	mov	r1, r6
 8016d34:	4628      	mov	r0, r5
 8016d36:	47d8      	blx	fp
 8016d38:	46a6      	mov	lr, r4
 8016d3a:	f10d 0c1c 	add.w	ip, sp, #28
 8016d3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d46:	f8de 3000 	ldr.w	r3, [lr]
 8016d4a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016d4e:	f8cc 3000 	str.w	r3, [ip]
 8016d52:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016d56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d5e:	f8de 3000 	ldr.w	r3, [lr]
 8016d62:	343c      	adds	r4, #60	; 0x3c
 8016d64:	f8cc 3000 	str.w	r3, [ip]
 8016d68:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d72:	6823      	ldr	r3, [r4, #0]
 8016d74:	4631      	mov	r1, r6
 8016d76:	f8cc 3000 	str.w	r3, [ip]
 8016d7a:	682b      	ldr	r3, [r5, #0]
 8016d7c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016d80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d82:	f8cd 8008 	str.w	r8, [sp, #8]
 8016d86:	9201      	str	r2, [sp, #4]
 8016d88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d8a:	4628      	mov	r0, r5
 8016d8c:	9200      	str	r2, [sp, #0]
 8016d8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016d90:	aa07      	add	r2, sp, #28
 8016d92:	463b      	mov	r3, r7
 8016d94:	47a0      	blx	r4
 8016d96:	b017      	add	sp, #92	; 0x5c
 8016d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d9c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016d9c:	2000      	movs	r0, #0
 8016d9e:	4770      	bx	lr

08016da0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da4:	b08d      	sub	sp, #52	; 0x34
 8016da6:	4688      	mov	r8, r1
 8016da8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016daa:	f8d3 c000 	ldr.w	ip, [r3]
 8016dae:	680f      	ldr	r7, [r1, #0]
 8016db0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016db4:	eba7 070c 	sub.w	r7, r7, ip
 8016db8:	42bc      	cmp	r4, r7
 8016dba:	bfa8      	it	ge
 8016dbc:	463c      	movge	r4, r7
 8016dbe:	ee07 4a90 	vmov	s15, r4
 8016dc2:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016dc6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016dca:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016dce:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016dd2:	edd3 6a07 	vldr	s13, [r3, #28]
 8016dd6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016dda:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016dde:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016de6:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016dea:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016dee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016df2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016df4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016df8:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016dfc:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016e00:	eb09 0e0c 	add.w	lr, r9, ip
 8016e04:	4571      	cmp	r1, lr
 8016e06:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016e0a:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016e0e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016e12:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016e16:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016e1a:	f340 808c 	ble.w	8016f36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016e1e:	eba1 060e 	sub.w	r6, r1, lr
 8016e22:	fb96 f5f4 	sdiv	r5, r6, r4
 8016e26:	ee07 5a10 	vmov	s14, r5
 8016e2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e2e:	2d00      	cmp	r5, #0
 8016e30:	fb04 6615 	mls	r6, r4, r5, r6
 8016e34:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016e38:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016e3c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016e40:	dd12      	ble.n	8016e68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016e42:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016e46:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e4e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016e52:	bf14      	ite	ne
 8016e54:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016e58:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016e5c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016e60:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016e64:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016e68:	fb05 f204 	mul.w	r2, r5, r4
 8016e6c:	1abf      	subs	r7, r7, r2
 8016e6e:	4494      	add	ip, r2
 8016e70:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016e74:	4411      	add	r1, r2
 8016e76:	eb09 020c 	add.w	r2, r9, ip
 8016e7a:	443a      	add	r2, r7
 8016e7c:	b209      	sxth	r1, r1
 8016e7e:	428a      	cmp	r2, r1
 8016e80:	bfc4      	itt	gt
 8016e82:	eba1 0209 	subgt.w	r2, r1, r9
 8016e86:	eba2 070c 	subgt.w	r7, r2, ip
 8016e8a:	2f00      	cmp	r7, #0
 8016e8c:	dd50      	ble.n	8016f30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016e8e:	fb97 f1f4 	sdiv	r1, r7, r4
 8016e92:	fb04 7211 	mls	r2, r4, r1, r7
 8016e96:	b90a      	cbnz	r2, 8016e9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016e98:	4622      	mov	r2, r4
 8016e9a:	3901      	subs	r1, #1
 8016e9c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016ea0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016ea4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016ea8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016eac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016eb0:	ee17 7a90 	vmov	r7, s15
 8016eb4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016eb8:	eef0 6a42 	vmov.f32	s13, s4
 8016ebc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016ec0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016ec4:	ee17 ca90 	vmov	ip, s15
 8016ec8:	eeb0 7a61 	vmov.f32	s14, s3
 8016ecc:	6840      	ldr	r0, [r0, #4]
 8016ece:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016ed2:	f8d0 a000 	ldr.w	sl, [r0]
 8016ed6:	900b      	str	r0, [sp, #44]	; 0x2c
 8016ed8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016eda:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016ede:	9008      	str	r0, [sp, #32]
 8016ee0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016ee2:	695b      	ldr	r3, [r3, #20]
 8016ee4:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016ee8:	fb9c fcf4 	sdiv	ip, ip, r4
 8016eec:	445b      	add	r3, fp
 8016eee:	9307      	str	r3, [sp, #28]
 8016ef0:	ee16 3a90 	vmov	r3, s13
 8016ef4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016ef8:	fb0c 3306 	mla	r3, ip, r6, r3
 8016efc:	fb97 f7f4 	sdiv	r7, r7, r4
 8016f00:	9302      	str	r3, [sp, #8]
 8016f02:	ee17 3a10 	vmov	r3, s14
 8016f06:	2900      	cmp	r1, #0
 8016f08:	bfcc      	ite	gt
 8016f0a:	46a1      	movgt	r9, r4
 8016f0c:	4691      	movle	r9, r2
 8016f0e:	44b6      	add	lr, r6
 8016f10:	fb04 e505 	mla	r5, r4, r5, lr
 8016f14:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016f18:	fb07 3706 	mla	r7, r7, r6, r3
 8016f1c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016f20:	e9cd 4700 	strd	r4, r7, [sp]
 8016f24:	eba9 0306 	sub.w	r3, r9, r6
 8016f28:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016f2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016f2e:	47a0      	blx	r4
 8016f30:	b00d      	add	sp, #52	; 0x34
 8016f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f36:	2500      	movs	r5, #0
 8016f38:	462e      	mov	r6, r5
 8016f3a:	e799      	b.n	8016e70 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f40:	461d      	mov	r5, r3
 8016f42:	b0db      	sub	sp, #364	; 0x16c
 8016f44:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016f48:	910f      	str	r1, [sp, #60]	; 0x3c
 8016f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f4c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016f50:	9009      	str	r0, [sp, #36]	; 0x24
 8016f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f54:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016f58:	4614      	mov	r4, r2
 8016f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8016f5c:	6803      	ldr	r3, [r0, #0]
 8016f5e:	4629      	mov	r1, r5
 8016f60:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016f62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016f66:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016f6a:	47b8      	blx	r7
 8016f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f6e:	6058      	str	r0, [r3, #4]
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f000 83a1 	beq.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f76:	ed94 7a02 	vldr	s14, [r4, #8]
 8016f7a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f82:	682b      	ldr	r3, [r5, #0]
 8016f84:	9314      	str	r3, [sp, #80]	; 0x50
 8016f86:	686b      	ldr	r3, [r5, #4]
 8016f88:	9315      	str	r3, [sp, #84]	; 0x54
 8016f8a:	4bc1      	ldr	r3, [pc, #772]	; (8017290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016f8c:	7819      	ldrb	r1, [r3, #0]
 8016f8e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016f92:	2900      	cmp	r1, #0
 8016f94:	bf16      	itet	ne
 8016f96:	4619      	movne	r1, r3
 8016f98:	4611      	moveq	r1, r2
 8016f9a:	4613      	movne	r3, r2
 8016f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa0:	9116      	str	r1, [sp, #88]	; 0x58
 8016fa2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016fa6:	f240 8387 	bls.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016faa:	ed94 7a07 	vldr	s14, [r4, #28]
 8016fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb6:	f240 837f 	bls.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016fba:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc6:	f240 8377 	bls.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016fca:	6822      	ldr	r2, [r4, #0]
 8016fcc:	4bb1      	ldr	r3, [pc, #708]	; (8017294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	f2c0 8372 	blt.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016fd4:	49b0      	ldr	r1, [pc, #704]	; (8017298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016fd6:	6963      	ldr	r3, [r4, #20]
 8016fd8:	428a      	cmp	r2, r1
 8016fda:	f300 836d 	bgt.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016fde:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016fe2:	48ae      	ldr	r0, [pc, #696]	; (801729c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016fe4:	33ff      	adds	r3, #255	; 0xff
 8016fe6:	4283      	cmp	r3, r0
 8016fe8:	f200 8366 	bhi.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016fee:	4dac      	ldr	r5, [pc, #688]	; (80172a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016ff0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016ff4:	33ff      	adds	r3, #255	; 0xff
 8016ff6:	42ab      	cmp	r3, r5
 8016ff8:	f200 835e 	bhi.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016ffc:	6862      	ldr	r2, [r4, #4]
 8016ffe:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017002:	33ff      	adds	r3, #255	; 0xff
 8017004:	4283      	cmp	r3, r0
 8017006:	f200 8357 	bhi.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801700a:	69a1      	ldr	r1, [r4, #24]
 801700c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017010:	33ff      	adds	r3, #255	; 0xff
 8017012:	4283      	cmp	r3, r0
 8017014:	f200 8350 	bhi.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801701a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801701e:	30ff      	adds	r0, #255	; 0xff
 8017020:	42a8      	cmp	r0, r5
 8017022:	f200 8349 	bhi.w	80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017026:	428a      	cmp	r2, r1
 8017028:	f280 8110 	bge.w	801724c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801702c:	429a      	cmp	r2, r3
 801702e:	f300 8119 	bgt.w	8017264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017032:	4299      	cmp	r1, r3
 8017034:	f280 811d 	bge.w	8017272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017038:	2502      	movs	r5, #2
 801703a:	2701      	movs	r7, #1
 801703c:	46a9      	mov	r9, r5
 801703e:	46b8      	mov	r8, r7
 8017040:	f04f 0a00 	mov.w	sl, #0
 8017044:	4621      	mov	r1, r4
 8017046:	a849      	add	r0, sp, #292	; 0x124
 8017048:	f003 f83a 	bl	801a0c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801704c:	4622      	mov	r2, r4
 801704e:	4653      	mov	r3, sl
 8017050:	a949      	add	r1, sp, #292	; 0x124
 8017052:	f8cd 9000 	str.w	r9, [sp]
 8017056:	a819      	add	r0, sp, #100	; 0x64
 8017058:	f003 f964 	bl	801a324 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801705c:	4622      	mov	r2, r4
 801705e:	4653      	mov	r3, sl
 8017060:	a949      	add	r1, sp, #292	; 0x124
 8017062:	f8cd 8000 	str.w	r8, [sp]
 8017066:	a829      	add	r0, sp, #164	; 0xa4
 8017068:	f003 f95c 	bl	801a324 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801706c:	4643      	mov	r3, r8
 801706e:	4622      	mov	r2, r4
 8017070:	a949      	add	r1, sp, #292	; 0x124
 8017072:	f8cd 9000 	str.w	r9, [sp]
 8017076:	a839      	add	r0, sp, #228	; 0xe4
 8017078:	f003 f954 	bl	801a324 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801707c:	42af      	cmp	r7, r5
 801707e:	bfb5      	itete	lt
 8017080:	2300      	movlt	r3, #0
 8017082:	2301      	movge	r3, #1
 8017084:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017086:	930e      	strge	r3, [sp, #56]	; 0x38
 8017088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801708a:	af12      	add	r7, sp, #72	; 0x48
 801708c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017090:	bfb9      	ittee	lt
 8017092:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017094:	ac19      	addlt	r4, sp, #100	; 0x64
 8017096:	ad19      	addge	r5, sp, #100	; 0x64
 8017098:	ac29      	addge	r4, sp, #164	; 0xa4
 801709a:	e887 0003 	stmia.w	r7, {r0, r1}
 801709e:	b928      	cbnz	r0, 80170ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80170a0:	4b80      	ldr	r3, [pc, #512]	; (80172a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80170a2:	6818      	ldr	r0, [r3, #0]
 80170a4:	6803      	ldr	r3, [r0, #0]
 80170a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170a8:	4798      	blx	r3
 80170aa:	6038      	str	r0, [r7, #0]
 80170ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80170ae:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80170b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170b6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80170b8:	930c      	str	r3, [sp, #48]	; 0x30
 80170ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170bc:	6963      	ldr	r3, [r4, #20]
 80170be:	440b      	add	r3, r1
 80170c0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80170c4:	4408      	add	r0, r1
 80170c6:	b200      	sxth	r0, r0
 80170c8:	4283      	cmp	r3, r0
 80170ca:	900d      	str	r0, [sp, #52]	; 0x34
 80170cc:	f280 80dd 	bge.w	801728a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80170d0:	428b      	cmp	r3, r1
 80170d2:	da08      	bge.n	80170e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80170d4:	2a00      	cmp	r2, #0
 80170d6:	dd06      	ble.n	80170e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80170d8:	1acb      	subs	r3, r1, r3
 80170da:	429a      	cmp	r2, r3
 80170dc:	f2c0 80e4 	blt.w	80172a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f300 80e2 	bgt.w	80172aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80170e6:	6967      	ldr	r7, [r4, #20]
 80170e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ea:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80170ee:	443b      	add	r3, r7
 80170f0:	461f      	mov	r7, r3
 80170f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170f4:	1bdf      	subs	r7, r3, r7
 80170f6:	4297      	cmp	r7, r2
 80170f8:	bfa8      	it	ge
 80170fa:	4617      	movge	r7, r2
 80170fc:	2f00      	cmp	r7, #0
 80170fe:	f340 8166 	ble.w	80173ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017102:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017104:	6829      	ldr	r1, [r5, #0]
 8017106:	f9b3 2000 	ldrsh.w	r2, [r3]
 801710a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801710e:	4411      	add	r1, r2
 8017110:	4299      	cmp	r1, r3
 8017112:	6820      	ldr	r0, [r4, #0]
 8017114:	dd1a      	ble.n	801714c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017116:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801711a:	4402      	add	r2, r0
 801711c:	440b      	add	r3, r1
 801711e:	b21b      	sxth	r3, r3
 8017120:	429a      	cmp	r2, r3
 8017122:	dc13      	bgt.n	801714c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017128:	a912      	add	r1, sp, #72	; 0x48
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	9206      	str	r2, [sp, #24]
 801712e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017130:	9500      	str	r5, [sp, #0]
 8017132:	9205      	str	r2, [sp, #20]
 8017134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017138:	e9cd b203 	strd	fp, r2, [sp, #12]
 801713c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801713e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017142:	aa49      	add	r2, sp, #292	; 0x124
 8017144:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017148:	4623      	mov	r3, r4
 801714a:	47c8      	blx	r9
 801714c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017150:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017154:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017158:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801715c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017160:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017164:	ed94 6a08 	vldr	s12, [r4, #32]
 8017168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801716c:	edd4 6a07 	vldr	s13, [r4, #28]
 8017170:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017174:	441a      	add	r2, r3
 8017176:	6963      	ldr	r3, [r4, #20]
 8017178:	68a1      	ldr	r1, [r4, #8]
 801717a:	3301      	adds	r3, #1
 801717c:	6163      	str	r3, [r4, #20]
 801717e:	69a3      	ldr	r3, [r4, #24]
 8017180:	6022      	str	r2, [r4, #0]
 8017182:	3b01      	subs	r3, #1
 8017184:	61a3      	str	r3, [r4, #24]
 8017186:	6923      	ldr	r3, [r4, #16]
 8017188:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801718c:	440b      	add	r3, r1
 801718e:	68e1      	ldr	r1, [r4, #12]
 8017190:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017194:	428b      	cmp	r3, r1
 8017196:	edc4 6a07 	vstr	s13, [r4, #28]
 801719a:	6123      	str	r3, [r4, #16]
 801719c:	db15      	blt.n	80171ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801719e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80171a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80171a6:	edc4 6a07 	vstr	s13, [r4, #28]
 80171aa:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80171ae:	ee36 7a87 	vadd.f32	s14, s13, s14
 80171b2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80171b6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80171ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171be:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80171c2:	3201      	adds	r2, #1
 80171c4:	1a5b      	subs	r3, r3, r1
 80171c6:	6022      	str	r2, [r4, #0]
 80171c8:	6123      	str	r3, [r4, #16]
 80171ca:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80171ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171d2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80171d6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80171da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80171de:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80171e2:	ed95 6a08 	vldr	s12, [r5, #32]
 80171e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80171ea:	edd5 6a07 	vldr	s13, [r5, #28]
 80171ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 80171f2:	441a      	add	r2, r3
 80171f4:	696b      	ldr	r3, [r5, #20]
 80171f6:	68a9      	ldr	r1, [r5, #8]
 80171f8:	3301      	adds	r3, #1
 80171fa:	616b      	str	r3, [r5, #20]
 80171fc:	69ab      	ldr	r3, [r5, #24]
 80171fe:	602a      	str	r2, [r5, #0]
 8017200:	3b01      	subs	r3, #1
 8017202:	61ab      	str	r3, [r5, #24]
 8017204:	692b      	ldr	r3, [r5, #16]
 8017206:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801720a:	440b      	add	r3, r1
 801720c:	68e9      	ldr	r1, [r5, #12]
 801720e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017212:	428b      	cmp	r3, r1
 8017214:	edc5 6a07 	vstr	s13, [r5, #28]
 8017218:	612b      	str	r3, [r5, #16]
 801721a:	db15      	blt.n	8017248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801721c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017220:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017224:	edc5 6a07 	vstr	s13, [r5, #28]
 8017228:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801722c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017230:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017234:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017238:	ee77 7a27 	vadd.f32	s15, s14, s15
 801723c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017240:	3201      	adds	r2, #1
 8017242:	1a5b      	subs	r3, r3, r1
 8017244:	602a      	str	r2, [r5, #0]
 8017246:	612b      	str	r3, [r5, #16]
 8017248:	3f01      	subs	r7, #1
 801724a:	e757      	b.n	80170fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801724c:	4299      	cmp	r1, r3
 801724e:	dc13      	bgt.n	8017278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017250:	429a      	cmp	r2, r3
 8017252:	da14      	bge.n	801727e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017254:	2502      	movs	r5, #2
 8017256:	2703      	movs	r7, #3
 8017258:	46a9      	mov	r9, r5
 801725a:	f04f 0800 	mov.w	r8, #0
 801725e:	f04f 0a01 	mov.w	sl, #1
 8017262:	e6ef      	b.n	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017264:	2501      	movs	r5, #1
 8017266:	2700      	movs	r7, #0
 8017268:	46a9      	mov	r9, r5
 801726a:	46b8      	mov	r8, r7
 801726c:	f04f 0a02 	mov.w	sl, #2
 8017270:	e6e8      	b.n	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017272:	2501      	movs	r5, #1
 8017274:	2702      	movs	r7, #2
 8017276:	e6e1      	b.n	801703c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017278:	2500      	movs	r5, #0
 801727a:	2701      	movs	r7, #1
 801727c:	e7f4      	b.n	8017268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801727e:	2702      	movs	r7, #2
 8017280:	2503      	movs	r5, #3
 8017282:	f04f 0900 	mov.w	r9, #0
 8017286:	46b8      	mov	r8, r7
 8017288:	e7e9      	b.n	801725e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801728a:	4613      	mov	r3, r2
 801728c:	e728      	b.n	80170e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801728e:	bf00      	nop
 8017290:	2004f6ec 	.word	0x2004f6ec
 8017294:	fffd8f01 	.word	0xfffd8f01
 8017298:	00027100 	.word	0x00027100
 801729c:	0004e1ff 	.word	0x0004e1ff
 80172a0:	0004e1fe 	.word	0x0004e1fe
 80172a4:	2004f6f4 	.word	0x2004f6f4
 80172a8:	4613      	mov	r3, r2
 80172aa:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80172ae:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80172b2:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80172b6:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80172ba:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80172be:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80172c2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80172c6:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80172ca:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80172ce:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80172d2:	469e      	mov	lr, r3
 80172d4:	469c      	mov	ip, r3
 80172d6:	f04f 0900 	mov.w	r9, #0
 80172da:	992b      	ldr	r1, [sp, #172]	; 0xac
 80172dc:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80172de:	9111      	str	r1, [sp, #68]	; 0x44
 80172e0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80172e4:	f1bc 0f00 	cmp.w	ip, #0
 80172e8:	d147      	bne.n	801737a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80172ea:	eb03 0c07 	add.w	ip, r3, r7
 80172ee:	1ad7      	subs	r7, r2, r3
 80172f0:	f1b9 0f00 	cmp.w	r9, #0
 80172f4:	d009      	beq.n	801730a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80172f6:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80172fa:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80172fe:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017302:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017306:	9029      	str	r0, [sp, #164]	; 0xa4
 8017308:	912d      	str	r1, [sp, #180]	; 0xb4
 801730a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801730e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017312:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017316:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801731a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801731e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017322:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017326:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801732a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801732e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017332:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017336:	f04f 0800 	mov.w	r8, #0
 801733a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801733c:	9111      	str	r1, [sp, #68]	; 0x44
 801733e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017342:	f1be 0f00 	cmp.w	lr, #0
 8017346:	d031      	beq.n	80173ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017348:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801734a:	4450      	add	r0, sl
 801734c:	4431      	add	r1, r6
 801734e:	4549      	cmp	r1, r9
 8017350:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017354:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017358:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801735c:	db08      	blt.n	8017370 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801735e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017362:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017366:	ee37 7a06 	vadd.f32	s14, s14, s12
 801736a:	3001      	adds	r0, #1
 801736c:	eba1 0109 	sub.w	r1, r1, r9
 8017370:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017374:	f04f 0801 	mov.w	r8, #1
 8017378:	e7e3      	b.n	8017342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801737a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801737c:	4450      	add	r0, sl
 801737e:	4431      	add	r1, r6
 8017380:	4541      	cmp	r1, r8
 8017382:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017386:	ee77 7a84 	vadd.f32	s15, s15, s8
 801738a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801738e:	db08      	blt.n	80173a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017390:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017394:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017398:	ee77 7a86 	vadd.f32	s15, s15, s12
 801739c:	3001      	adds	r0, #1
 801739e:	eba1 0108 	sub.w	r1, r1, r8
 80173a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80173a6:	f04f 0901 	mov.w	r9, #1
 80173aa:	e79b      	b.n	80172e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80173ac:	449c      	add	ip, r3
 80173ae:	1aff      	subs	r7, r7, r3
 80173b0:	f1b8 0f00 	cmp.w	r8, #0
 80173b4:	d009      	beq.n	80173ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80173b6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80173ba:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80173be:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80173c2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80173c6:	9019      	str	r0, [sp, #100]	; 0x64
 80173c8:	911d      	str	r1, [sp, #116]	; 0x74
 80173ca:	1ad2      	subs	r2, r2, r3
 80173cc:	e68b      	b.n	80170e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80173ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173d0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	f000 80d1 	beq.w	801757a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80173d8:	ad19      	add	r5, sp, #100	; 0x64
 80173da:	ac39      	add	r4, sp, #228	; 0xe4
 80173dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80173de:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80173e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80173e6:	930c      	str	r3, [sp, #48]	; 0x30
 80173e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80173ea:	6963      	ldr	r3, [r4, #20]
 80173ec:	440b      	add	r3, r1
 80173ee:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80173f2:	4408      	add	r0, r1
 80173f4:	b200      	sxth	r0, r0
 80173f6:	4283      	cmp	r3, r0
 80173f8:	900d      	str	r0, [sp, #52]	; 0x34
 80173fa:	f280 80c1 	bge.w	8017580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80173fe:	428b      	cmp	r3, r1
 8017400:	da08      	bge.n	8017414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017402:	2a00      	cmp	r2, #0
 8017404:	dd06      	ble.n	8017414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017406:	1acb      	subs	r3, r1, r3
 8017408:	429a      	cmp	r2, r3
 801740a:	f2c0 80bb 	blt.w	8017584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801740e:	2b00      	cmp	r3, #0
 8017410:	f300 80b9 	bgt.w	8017586 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017414:	6967      	ldr	r7, [r4, #20]
 8017416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017418:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801741c:	443b      	add	r3, r7
 801741e:	461f      	mov	r7, r3
 8017420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017422:	1bdf      	subs	r7, r3, r7
 8017424:	4297      	cmp	r7, r2
 8017426:	bfa8      	it	ge
 8017428:	4617      	movge	r7, r2
 801742a:	2f00      	cmp	r7, #0
 801742c:	f340 813c 	ble.w	80176a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017430:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017432:	6829      	ldr	r1, [r5, #0]
 8017434:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017438:	f9bb 3000 	ldrsh.w	r3, [fp]
 801743c:	4411      	add	r1, r2
 801743e:	4299      	cmp	r1, r3
 8017440:	6820      	ldr	r0, [r4, #0]
 8017442:	dd1a      	ble.n	801747a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017444:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017448:	4402      	add	r2, r0
 801744a:	440b      	add	r3, r1
 801744c:	b21b      	sxth	r3, r3
 801744e:	429a      	cmp	r2, r3
 8017450:	dc13      	bgt.n	801747a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017452:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017456:	a912      	add	r1, sp, #72	; 0x48
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	9206      	str	r2, [sp, #24]
 801745c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801745e:	9500      	str	r5, [sp, #0]
 8017460:	9205      	str	r2, [sp, #20]
 8017462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017466:	e9cd b203 	strd	fp, r2, [sp, #12]
 801746a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801746c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017470:	aa49      	add	r2, sp, #292	; 0x124
 8017472:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017476:	4623      	mov	r3, r4
 8017478:	47c8      	blx	r9
 801747a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801747e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017482:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017486:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801748a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801748e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017492:	ed94 6a08 	vldr	s12, [r4, #32]
 8017496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801749a:	edd4 6a07 	vldr	s13, [r4, #28]
 801749e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80174a2:	441a      	add	r2, r3
 80174a4:	6963      	ldr	r3, [r4, #20]
 80174a6:	68a1      	ldr	r1, [r4, #8]
 80174a8:	3301      	adds	r3, #1
 80174aa:	6163      	str	r3, [r4, #20]
 80174ac:	69a3      	ldr	r3, [r4, #24]
 80174ae:	6022      	str	r2, [r4, #0]
 80174b0:	3b01      	subs	r3, #1
 80174b2:	61a3      	str	r3, [r4, #24]
 80174b4:	6923      	ldr	r3, [r4, #16]
 80174b6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80174ba:	440b      	add	r3, r1
 80174bc:	68e1      	ldr	r1, [r4, #12]
 80174be:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80174c2:	428b      	cmp	r3, r1
 80174c4:	edc4 6a07 	vstr	s13, [r4, #28]
 80174c8:	6123      	str	r3, [r4, #16]
 80174ca:	db15      	blt.n	80174f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80174cc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80174d0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80174d4:	edc4 6a07 	vstr	s13, [r4, #28]
 80174d8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80174dc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80174e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80174e4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80174e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80174ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80174f0:	3201      	adds	r2, #1
 80174f2:	1a5b      	subs	r3, r3, r1
 80174f4:	6022      	str	r2, [r4, #0]
 80174f6:	6123      	str	r3, [r4, #16]
 80174f8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80174fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017500:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017504:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017508:	ee37 7a27 	vadd.f32	s14, s14, s15
 801750c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017510:	ed95 6a08 	vldr	s12, [r5, #32]
 8017514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017518:	edd5 6a07 	vldr	s13, [r5, #28]
 801751c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017520:	441a      	add	r2, r3
 8017522:	696b      	ldr	r3, [r5, #20]
 8017524:	68a9      	ldr	r1, [r5, #8]
 8017526:	3301      	adds	r3, #1
 8017528:	616b      	str	r3, [r5, #20]
 801752a:	69ab      	ldr	r3, [r5, #24]
 801752c:	602a      	str	r2, [r5, #0]
 801752e:	3b01      	subs	r3, #1
 8017530:	61ab      	str	r3, [r5, #24]
 8017532:	692b      	ldr	r3, [r5, #16]
 8017534:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017538:	440b      	add	r3, r1
 801753a:	68e9      	ldr	r1, [r5, #12]
 801753c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017540:	428b      	cmp	r3, r1
 8017542:	edc5 6a07 	vstr	s13, [r5, #28]
 8017546:	612b      	str	r3, [r5, #16]
 8017548:	db15      	blt.n	8017576 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801754a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801754e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017552:	edc5 6a07 	vstr	s13, [r5, #28]
 8017556:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801755a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801755e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017562:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017566:	ee77 7a27 	vadd.f32	s15, s14, s15
 801756a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801756e:	3201      	adds	r2, #1
 8017570:	1a5b      	subs	r3, r3, r1
 8017572:	602a      	str	r2, [r5, #0]
 8017574:	612b      	str	r3, [r5, #16]
 8017576:	3f01      	subs	r7, #1
 8017578:	e757      	b.n	801742a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801757a:	ad39      	add	r5, sp, #228	; 0xe4
 801757c:	ac19      	add	r4, sp, #100	; 0x64
 801757e:	e72d      	b.n	80173dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017580:	4613      	mov	r3, r2
 8017582:	e744      	b.n	801740e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017584:	4613      	mov	r3, r2
 8017586:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801758a:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801758e:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017592:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017596:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801759a:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801759e:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80175a2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80175a6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80175aa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80175ae:	469e      	mov	lr, r3
 80175b0:	461f      	mov	r7, r3
 80175b2:	f04f 0900 	mov.w	r9, #0
 80175b6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80175b8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80175bc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80175be:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80175c2:	960e      	str	r6, [sp, #56]	; 0x38
 80175c4:	2f00      	cmp	r7, #0
 80175c6:	d146      	bne.n	8017656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80175c8:	449c      	add	ip, r3
 80175ca:	1ad7      	subs	r7, r2, r3
 80175cc:	f1b9 0f00 	cmp.w	r9, #0
 80175d0:	d009      	beq.n	80175e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80175d2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80175d6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80175da:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80175de:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80175e2:	9039      	str	r0, [sp, #228]	; 0xe4
 80175e4:	913d      	str	r1, [sp, #244]	; 0xf4
 80175e6:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80175ea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80175ee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80175f2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80175f6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80175fa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80175fe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017602:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017606:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801760a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801760e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017612:	f04f 0800 	mov.w	r8, #0
 8017616:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017618:	910e      	str	r1, [sp, #56]	; 0x38
 801761a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801761e:	f1be 0f00 	cmp.w	lr, #0
 8017622:	d030      	beq.n	8017686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017624:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017626:	4450      	add	r0, sl
 8017628:	4431      	add	r1, r6
 801762a:	4549      	cmp	r1, r9
 801762c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017630:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017634:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017638:	db08      	blt.n	801764c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801763a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801763e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017642:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017646:	3001      	adds	r0, #1
 8017648:	eba1 0109 	sub.w	r1, r1, r9
 801764c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017650:	f04f 0801 	mov.w	r8, #1
 8017654:	e7e3      	b.n	801761e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017656:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017658:	4450      	add	r0, sl
 801765a:	4431      	add	r1, r6
 801765c:	4541      	cmp	r1, r8
 801765e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017662:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017666:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801766a:	db08      	blt.n	801767e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801766c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017670:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017674:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017678:	3001      	adds	r0, #1
 801767a:	eba1 0108 	sub.w	r1, r1, r8
 801767e:	3f01      	subs	r7, #1
 8017680:	f04f 0901 	mov.w	r9, #1
 8017684:	e79e      	b.n	80175c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017686:	449c      	add	ip, r3
 8017688:	1aff      	subs	r7, r7, r3
 801768a:	f1b8 0f00 	cmp.w	r8, #0
 801768e:	d009      	beq.n	80176a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017690:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017694:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017698:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801769c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80176a0:	9019      	str	r0, [sp, #100]	; 0x64
 80176a2:	911d      	str	r1, [sp, #116]	; 0x74
 80176a4:	1ad2      	subs	r2, r2, r3
 80176a6:	e6b5      	b.n	8017414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80176a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	b923      	cbnz	r3, 80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176ae:	4b04      	ldr	r3, [pc, #16]	; (80176c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80176b0:	6818      	ldr	r0, [r3, #0]
 80176b2:	6803      	ldr	r3, [r0, #0]
 80176b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176b6:	4798      	blx	r3
 80176b8:	b05b      	add	sp, #364	; 0x16c
 80176ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176be:	bf00      	nop
 80176c0:	2004f6f4 	.word	0x2004f6f4

080176c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80176c4:	2b03      	cmp	r3, #3
 80176c6:	d818      	bhi.n	80176fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80176c8:	e8df f003 	tbb	[pc, r3]
 80176cc:	130d0602 	.word	0x130d0602
 80176d0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80176d4:	1850      	adds	r0, r2, r1
 80176d6:	4770      	bx	lr
 80176d8:	8803      	ldrh	r3, [r0, #0]
 80176da:	8880      	ldrh	r0, [r0, #4]
 80176dc:	4418      	add	r0, r3
 80176de:	b200      	sxth	r0, r0
 80176e0:	1a80      	subs	r0, r0, r2
 80176e2:	3801      	subs	r0, #1
 80176e4:	4770      	bx	lr
 80176e6:	8803      	ldrh	r3, [r0, #0]
 80176e8:	8880      	ldrh	r0, [r0, #4]
 80176ea:	4418      	add	r0, r3
 80176ec:	b200      	sxth	r0, r0
 80176ee:	1a40      	subs	r0, r0, r1
 80176f0:	e7f7      	b.n	80176e2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80176f2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80176f6:	4410      	add	r0, r2
 80176f8:	4770      	bx	lr
 80176fa:	2000      	movs	r0, #0
 80176fc:	4770      	bx	lr

080176fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80176fe:	2b03      	cmp	r3, #3
 8017700:	d817      	bhi.n	8017732 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017702:	e8df f003 	tbb	[pc, r3]
 8017706:	0602      	.short	0x0602
 8017708:	1009      	.short	0x1009
 801770a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801770e:	1850      	adds	r0, r2, r1
 8017710:	4770      	bx	lr
 8017712:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017716:	e7fa      	b.n	801770e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017718:	8843      	ldrh	r3, [r0, #2]
 801771a:	88c0      	ldrh	r0, [r0, #6]
 801771c:	4418      	add	r0, r3
 801771e:	b200      	sxth	r0, r0
 8017720:	1a80      	subs	r0, r0, r2
 8017722:	3801      	subs	r0, #1
 8017724:	4770      	bx	lr
 8017726:	8843      	ldrh	r3, [r0, #2]
 8017728:	88c0      	ldrh	r0, [r0, #6]
 801772a:	4418      	add	r0, r3
 801772c:	b200      	sxth	r0, r0
 801772e:	1a40      	subs	r0, r0, r1
 8017730:	e7f7      	b.n	8017722 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017732:	2000      	movs	r0, #0
 8017734:	4770      	bx	lr
	...

08017738 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017738:	2200      	movs	r2, #0
 801773a:	4b01      	ldr	r3, [pc, #4]	; (8017740 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801773c:	601a      	str	r2, [r3, #0]
 801773e:	4770      	bx	lr
 8017740:	2004f704 	.word	0x2004f704

08017744 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017744:	4603      	mov	r3, r0
 8017746:	b1c8      	cbz	r0, 801777c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017748:	0c02      	lsrs	r2, r0, #16
 801774a:	0412      	lsls	r2, r2, #16
 801774c:	b9a2      	cbnz	r2, 8017778 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801774e:	0403      	lsls	r3, r0, #16
 8017750:	2010      	movs	r0, #16
 8017752:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017756:	bf04      	itt	eq
 8017758:	021b      	lsleq	r3, r3, #8
 801775a:	3008      	addeq	r0, #8
 801775c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017760:	bf04      	itt	eq
 8017762:	011b      	lsleq	r3, r3, #4
 8017764:	3004      	addeq	r0, #4
 8017766:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801776a:	bf04      	itt	eq
 801776c:	009b      	lsleq	r3, r3, #2
 801776e:	3002      	addeq	r0, #2
 8017770:	2b00      	cmp	r3, #0
 8017772:	db04      	blt.n	801777e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017774:	3001      	adds	r0, #1
 8017776:	4770      	bx	lr
 8017778:	2000      	movs	r0, #0
 801777a:	e7ea      	b.n	8017752 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801777c:	2020      	movs	r0, #32
 801777e:	4770      	bx	lr

08017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017784:	b087      	sub	sp, #28
 8017786:	4681      	mov	r9, r0
 8017788:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801778c:	4610      	mov	r0, r2
 801778e:	4698      	mov	r8, r3
 8017790:	460d      	mov	r5, r1
 8017792:	b981      	cbnz	r1, 80177b6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017794:	b14b      	cbz	r3, 80177aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017796:	460b      	mov	r3, r1
 8017798:	e9cd 4700 	strd	r4, r7, [sp]
 801779c:	464a      	mov	r2, r9
 801779e:	4641      	mov	r1, r8
 80177a0:	f7ff ffee 	bl	8017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80177a4:	b007      	add	sp, #28
 80177a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177aa:	f04f 33ff 	mov.w	r3, #4294967295
 80177ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80177b2:	603b      	str	r3, [r7, #0]
 80177b4:	e7f6      	b.n	80177a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80177b6:	fa32 fa01 	lsrs.w	sl, r2, r1
 80177ba:	d107      	bne.n	80177cc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80177bc:	fb09 f602 	mul.w	r6, r9, r2
 80177c0:	fbb6 f0f4 	udiv	r0, r6, r4
 80177c4:	fb04 6610 	mls	r6, r4, r0, r6
 80177c8:	603e      	str	r6, [r7, #0]
 80177ca:	e7eb      	b.n	80177a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80177cc:	fa09 fb01 	lsl.w	fp, r9, r1
 80177d0:	fbbb f3f4 	udiv	r3, fp, r4
 80177d4:	2601      	movs	r6, #1
 80177d6:	9302      	str	r3, [sp, #8]
 80177d8:	408e      	lsls	r6, r1
 80177da:	fb0a f303 	mul.w	r3, sl, r3
 80177de:	3e01      	subs	r6, #1
 80177e0:	4016      	ands	r6, r2
 80177e2:	4630      	mov	r0, r6
 80177e4:	9303      	str	r3, [sp, #12]
 80177e6:	f7ff ffad 	bl	8017744 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80177ea:	464a      	mov	r2, r9
 80177ec:	460b      	mov	r3, r1
 80177ee:	e9cd 4700 	strd	r4, r7, [sp]
 80177f2:	4601      	mov	r1, r0
 80177f4:	4630      	mov	r0, r6
 80177f6:	f7ff ffc3 	bl	8017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80177fa:	9b02      	ldr	r3, [sp, #8]
 80177fc:	4606      	mov	r6, r0
 80177fe:	fb04 bb13 	mls	fp, r4, r3, fp
 8017802:	4658      	mov	r0, fp
 8017804:	eb05 0108 	add.w	r1, r5, r8
 8017808:	f7ff ff9c 	bl	8017744 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801780c:	ab05      	add	r3, sp, #20
 801780e:	e9cd 4300 	strd	r4, r3, [sp]
 8017812:	465a      	mov	r2, fp
 8017814:	4603      	mov	r3, r0
 8017816:	4650      	mov	r0, sl
 8017818:	f7ff ffb2 	bl	8017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801781c:	6839      	ldr	r1, [r7, #0]
 801781e:	9a05      	ldr	r2, [sp, #20]
 8017820:	9b03      	ldr	r3, [sp, #12]
 8017822:	4411      	add	r1, r2
 8017824:	fbb1 f2f4 	udiv	r2, r1, r4
 8017828:	fb04 1412 	mls	r4, r4, r2, r1
 801782c:	18d3      	adds	r3, r2, r3
 801782e:	441e      	add	r6, r3
 8017830:	4430      	add	r0, r6
 8017832:	603c      	str	r4, [r7, #0]
 8017834:	e7b6      	b.n	80177a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017836 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801783a:	b085      	sub	sp, #20
 801783c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801783e:	f1b0 0900 	subs.w	r9, r0, #0
 8017842:	461d      	mov	r5, r3
 8017844:	bfbf      	itttt	lt
 8017846:	6823      	ldrlt	r3, [r4, #0]
 8017848:	f1c9 0900 	rsblt	r9, r9, #0
 801784c:	425b      	neglt	r3, r3
 801784e:	6023      	strlt	r3, [r4, #0]
 8017850:	bfb4      	ite	lt
 8017852:	f04f 36ff 	movlt.w	r6, #4294967295
 8017856:	2601      	movge	r6, #1
 8017858:	2a00      	cmp	r2, #0
 801785a:	4617      	mov	r7, r2
 801785c:	da04      	bge.n	8017868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	4257      	negs	r7, r2
 8017862:	425b      	negs	r3, r3
 8017864:	4276      	negs	r6, r6
 8017866:	6023      	str	r3, [r4, #0]
 8017868:	2d00      	cmp	r5, #0
 801786a:	4638      	mov	r0, r7
 801786c:	bfba      	itte	lt
 801786e:	426d      	neglt	r5, r5
 8017870:	f04f 38ff 	movlt.w	r8, #4294967295
 8017874:	f04f 0801 	movge.w	r8, #1
 8017878:	f7ff ff64 	bl	8017744 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801787c:	ab03      	add	r3, sp, #12
 801787e:	e9cd 5300 	strd	r5, r3, [sp]
 8017882:	463a      	mov	r2, r7
 8017884:	4603      	mov	r3, r0
 8017886:	4648      	mov	r0, r9
 8017888:	f7ff ff7a 	bl	8017780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	9a03      	ldr	r2, [sp, #12]
 8017890:	4546      	cmp	r6, r8
 8017892:	441a      	add	r2, r3
 8017894:	fb92 f3f5 	sdiv	r3, r2, r5
 8017898:	4418      	add	r0, r3
 801789a:	fb05 2313 	mls	r3, r5, r3, r2
 801789e:	bf18      	it	ne
 80178a0:	4240      	negne	r0, r0
 80178a2:	1c72      	adds	r2, r6, #1
 80178a4:	6023      	str	r3, [r4, #0]
 80178a6:	d105      	bne.n	80178b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	f1c3 0200 	rsb	r2, r3, #0
 80178ae:	db0b      	blt.n	80178c8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80178b0:	6022      	str	r2, [r4, #0]
 80178b2:	e006      	b.n	80178c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80178b4:	2e01      	cmp	r6, #1
 80178b6:	d104      	bne.n	80178c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	da02      	bge.n	80178c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80178bc:	442b      	add	r3, r5
 80178be:	3801      	subs	r0, #1
 80178c0:	6023      	str	r3, [r4, #0]
 80178c2:	b005      	add	sp, #20
 80178c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c8:	3801      	subs	r0, #1
 80178ca:	1b52      	subs	r2, r2, r5
 80178cc:	e7f0      	b.n	80178b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080178d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80178d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80178d4:	4c1c      	ldr	r4, [pc, #112]	; (8017948 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80178d6:	4605      	mov	r5, r0
 80178d8:	69a3      	ldr	r3, [r4, #24]
 80178da:	6807      	ldr	r7, [r0, #0]
 80178dc:	b92b      	cbnz	r3, 80178ea <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80178de:	6840      	ldr	r0, [r0, #4]
 80178e0:	e9c5 7000 	strd	r7, r0, [r5]
 80178e4:	b004      	add	sp, #16
 80178e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178ea:	f04f 0802 	mov.w	r8, #2
 80178ee:	fb93 f1f8 	sdiv	r1, r3, r8
 80178f2:	68a2      	ldr	r2, [r4, #8]
 80178f4:	ae04      	add	r6, sp, #16
 80178f6:	440a      	add	r2, r1
 80178f8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80178fc:	69e1      	ldr	r1, [r4, #28]
 80178fe:	463a      	mov	r2, r7
 8017900:	9600      	str	r6, [sp, #0]
 8017902:	6820      	ldr	r0, [r4, #0]
 8017904:	f7ff ff97 	bl	8017836 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017908:	69a3      	ldr	r3, [r4, #24]
 801790a:	4607      	mov	r7, r0
 801790c:	686a      	ldr	r2, [r5, #4]
 801790e:	6a21      	ldr	r1, [r4, #32]
 8017910:	9600      	str	r6, [sp, #0]
 8017912:	6860      	ldr	r0, [r4, #4]
 8017914:	f7ff ff8f 	bl	8017836 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017918:	69a3      	ldr	r3, [r4, #24]
 801791a:	6962      	ldr	r2, [r4, #20]
 801791c:	fb93 f8f8 	sdiv	r8, r3, r8
 8017920:	4442      	add	r2, r8
 8017922:	9203      	str	r2, [sp, #12]
 8017924:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017926:	682a      	ldr	r2, [r5, #0]
 8017928:	4407      	add	r7, r0
 801792a:	9600      	str	r6, [sp, #0]
 801792c:	68e0      	ldr	r0, [r4, #12]
 801792e:	f7ff ff82 	bl	8017836 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017932:	9600      	str	r6, [sp, #0]
 8017934:	4680      	mov	r8, r0
 8017936:	69a3      	ldr	r3, [r4, #24]
 8017938:	686a      	ldr	r2, [r5, #4]
 801793a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801793c:	6920      	ldr	r0, [r4, #16]
 801793e:	f7ff ff7a 	bl	8017836 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017942:	4440      	add	r0, r8
 8017944:	e7cc      	b.n	80178e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017946:	bf00      	nop
 8017948:	2004f708 	.word	0x2004f708

0801794c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801794c:	4b07      	ldr	r3, [pc, #28]	; (801796c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	2b01      	cmp	r3, #1
 8017952:	d109      	bne.n	8017968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017954:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017958:	f9b0 2000 	ldrsh.w	r2, [r0]
 801795c:	8003      	strh	r3, [r0, #0]
 801795e:	4b04      	ldr	r3, [pc, #16]	; (8017970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017960:	881b      	ldrh	r3, [r3, #0]
 8017962:	3b01      	subs	r3, #1
 8017964:	1a9b      	subs	r3, r3, r2
 8017966:	800b      	strh	r3, [r1, #0]
 8017968:	4770      	bx	lr
 801796a:	bf00      	nop
 801796c:	2004f6ec 	.word	0x2004f6ec
 8017970:	2004f6e8 	.word	0x2004f6e8

08017974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017974:	b510      	push	{r4, lr}
 8017976:	4b07      	ldr	r3, [pc, #28]	; (8017994 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	2b01      	cmp	r3, #1
 801797c:	d108      	bne.n	8017990 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801797e:	4b06      	ldr	r3, [pc, #24]	; (8017998 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017980:	880c      	ldrh	r4, [r1, #0]
 8017982:	881b      	ldrh	r3, [r3, #0]
 8017984:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017988:	3b01      	subs	r3, #1
 801798a:	1b1b      	subs	r3, r3, r4
 801798c:	8003      	strh	r3, [r0, #0]
 801798e:	800a      	strh	r2, [r1, #0]
 8017990:	bd10      	pop	{r4, pc}
 8017992:	bf00      	nop
 8017994:	2004f6ec 	.word	0x2004f6ec
 8017998:	2004f6e8 	.word	0x2004f6e8

0801799c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801799c:	b510      	push	{r4, lr}
 801799e:	4b0a      	ldr	r3, [pc, #40]	; (80179c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	2b01      	cmp	r3, #1
 80179a4:	d10e      	bne.n	80179c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80179a6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80179aa:	8843      	ldrh	r3, [r0, #2]
 80179ac:	f9b0 4000 	ldrsh.w	r4, [r0]
 80179b0:	18ca      	adds	r2, r1, r3
 80179b2:	4b06      	ldr	r3, [pc, #24]	; (80179cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80179b4:	8044      	strh	r4, [r0, #2]
 80179b6:	881b      	ldrh	r3, [r3, #0]
 80179b8:	1a9b      	subs	r3, r3, r2
 80179ba:	8003      	strh	r3, [r0, #0]
 80179bc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80179c0:	8081      	strh	r1, [r0, #4]
 80179c2:	80c3      	strh	r3, [r0, #6]
 80179c4:	bd10      	pop	{r4, pc}
 80179c6:	bf00      	nop
 80179c8:	2004f6ec 	.word	0x2004f6ec
 80179cc:	2004f6e8 	.word	0x2004f6e8

080179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80179d0:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	2b01      	cmp	r3, #1
 80179d6:	d10c      	bne.n	80179f2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80179d8:	8803      	ldrh	r3, [r0, #0]
 80179da:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80179de:	8842      	ldrh	r2, [r0, #2]
 80179e0:	8002      	strh	r2, [r0, #0]
 80179e2:	185a      	adds	r2, r3, r1
 80179e4:	4b04      	ldr	r3, [pc, #16]	; (80179f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	1a9b      	subs	r3, r3, r2
 80179ea:	8043      	strh	r3, [r0, #2]
 80179ec:	88c3      	ldrh	r3, [r0, #6]
 80179ee:	80c1      	strh	r1, [r0, #6]
 80179f0:	8083      	strh	r3, [r0, #4]
 80179f2:	4770      	bx	lr
 80179f4:	2004f6ec 	.word	0x2004f6ec
 80179f8:	2004f6e8 	.word	0x2004f6e8

080179fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80179fc:	b510      	push	{r4, lr}
 80179fe:	4b07      	ldr	r3, [pc, #28]	; (8017a1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	2b01      	cmp	r3, #1
 8017a04:	d108      	bne.n	8017a18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017a06:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017a0a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017a0e:	8003      	strh	r3, [r0, #0]
 8017a10:	8893      	ldrh	r3, [r2, #4]
 8017a12:	3b01      	subs	r3, #1
 8017a14:	1b1b      	subs	r3, r3, r4
 8017a16:	800b      	strh	r3, [r1, #0]
 8017a18:	bd10      	pop	{r4, pc}
 8017a1a:	bf00      	nop
 8017a1c:	2004f6ec 	.word	0x2004f6ec

08017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017a20:	b510      	push	{r4, lr}
 8017a22:	4b0a      	ldr	r3, [pc, #40]	; (8017a4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017a24:	460a      	mov	r2, r1
 8017a26:	781b      	ldrb	r3, [r3, #0]
 8017a28:	2b01      	cmp	r3, #1
 8017a2a:	d10d      	bne.n	8017a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017a2c:	8881      	ldrh	r1, [r0, #4]
 8017a2e:	8803      	ldrh	r3, [r0, #0]
 8017a30:	440b      	add	r3, r1
 8017a32:	4601      	mov	r1, r0
 8017a34:	3b01      	subs	r3, #1
 8017a36:	f821 3b02 	strh.w	r3, [r1], #2
 8017a3a:	f7ff ffdf 	bl	80179fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017a3e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a42:	88c2      	ldrh	r2, [r0, #6]
 8017a44:	80c3      	strh	r3, [r0, #6]
 8017a46:	8082      	strh	r2, [r0, #4]
 8017a48:	bd10      	pop	{r4, pc}
 8017a4a:	bf00      	nop
 8017a4c:	2004f6ec 	.word	0x2004f6ec

08017a50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017a50:	2300      	movs	r3, #0
 8017a52:	b570      	push	{r4, r5, r6, lr}
 8017a54:	4c0a      	ldr	r4, [pc, #40]	; (8017a80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017a56:	4605      	mov	r5, r0
 8017a58:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017a5c:	6820      	ldr	r0, [r4, #0]
 8017a5e:	460e      	mov	r6, r1
 8017a60:	b110      	cbz	r0, 8017a68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	695b      	ldr	r3, [r3, #20]
 8017a66:	4798      	blx	r3
 8017a68:	6026      	str	r6, [r4, #0]
 8017a6a:	6833      	ldr	r3, [r6, #0]
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	68db      	ldr	r3, [r3, #12]
 8017a70:	4798      	blx	r3
 8017a72:	682b      	ldr	r3, [r5, #0]
 8017a74:	4628      	mov	r0, r5
 8017a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a7c:	4718      	bx	r3
 8017a7e:	bf00      	nop
 8017a80:	2004f738 	.word	0x2004f738

08017a84 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017a84:	2100      	movs	r1, #0
 8017a86:	4b06      	ldr	r3, [pc, #24]	; (8017aa0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017a88:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017a8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a90:	4b04      	ldr	r3, [pc, #16]	; (8017aa4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017a92:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a9a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017a9e:	4770      	bx	lr
 8017aa0:	2004f6e8 	.word	0x2004f6e8
 8017aa4:	2004f6ea 	.word	0x2004f6ea

08017aa8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017aa8:	4b03      	ldr	r3, [pc, #12]	; (8017ab8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017aaa:	6818      	ldr	r0, [r3, #0]
 8017aac:	b110      	cbz	r0, 8017ab4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017aae:	6803      	ldr	r3, [r0, #0]
 8017ab0:	699b      	ldr	r3, [r3, #24]
 8017ab2:	4718      	bx	r3
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop
 8017ab8:	2004f738 	.word	0x2004f738

08017abc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017abc:	4770      	bx	lr
	...

08017ac0 <_ZN8touchgfx11Application4drawEv>:
 8017ac0:	b507      	push	{r0, r1, r2, lr}
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	4b08      	ldr	r3, [pc, #32]	; (8017ae8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017ac6:	9100      	str	r1, [sp, #0]
 8017ac8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017acc:	4b07      	ldr	r3, [pc, #28]	; (8017aec <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017ace:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ad6:	4669      	mov	r1, sp
 8017ad8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017adc:	6803      	ldr	r3, [r0, #0]
 8017ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ae0:	4798      	blx	r3
 8017ae2:	b003      	add	sp, #12
 8017ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ae8:	2004f6e8 	.word	0x2004f6e8
 8017aec:	2004f6ea 	.word	0x2004f6ea

08017af0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017af0:	4b03      	ldr	r3, [pc, #12]	; (8017b00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017af2:	6818      	ldr	r0, [r3, #0]
 8017af4:	b110      	cbz	r0, 8017afc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	69db      	ldr	r3, [r3, #28]
 8017afa:	4718      	bx	r3
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	2004f738 	.word	0x2004f738

08017b04 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017b04:	4b03      	ldr	r3, [pc, #12]	; (8017b14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017b06:	6818      	ldr	r0, [r3, #0]
 8017b08:	b110      	cbz	r0, 8017b10 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017b0a:	6803      	ldr	r3, [r0, #0]
 8017b0c:	6a1b      	ldr	r3, [r3, #32]
 8017b0e:	4718      	bx	r3
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	2004f738 	.word	0x2004f738

08017b18 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017b18:	2300      	movs	r3, #0
 8017b1a:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017b1e:	4770      	bx	lr

08017b20 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017b20:	4b03      	ldr	r3, [pc, #12]	; (8017b30 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017b22:	6818      	ldr	r0, [r3, #0]
 8017b24:	b110      	cbz	r0, 8017b2c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017b26:	6803      	ldr	r3, [r0, #0]
 8017b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b2a:	4718      	bx	r3
 8017b2c:	4770      	bx	lr
 8017b2e:	bf00      	nop
 8017b30:	2004f738 	.word	0x2004f738

08017b34 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017b34:	b570      	push	{r4, r5, r6, lr}
 8017b36:	4d32      	ldr	r5, [pc, #200]	; (8017c00 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8017b38:	4604      	mov	r4, r0
 8017b3a:	6828      	ldr	r0, [r5, #0]
 8017b3c:	b140      	cbz	r0, 8017b50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b3e:	7a03      	ldrb	r3, [r0, #8]
 8017b40:	b933      	cbnz	r3, 8017b50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017b42:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017b46:	6803      	ldr	r3, [r0, #0]
 8017b48:	689b      	ldr	r3, [r3, #8]
 8017b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b4e:	4718      	bx	r3
 8017b50:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8017b54:	b97b      	cbnz	r3, 8017b76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b56:	b170      	cbz	r0, 8017b76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b58:	7a03      	ldrb	r3, [r0, #8]
 8017b5a:	b163      	cbz	r3, 8017b76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b5c:	4b29      	ldr	r3, [pc, #164]	; (8017c04 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017b5e:	6818      	ldr	r0, [r3, #0]
 8017b60:	b110      	cbz	r0, 8017b68 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017b62:	6803      	ldr	r3, [r0, #0]
 8017b64:	691b      	ldr	r3, [r3, #16]
 8017b66:	4798      	blx	r3
 8017b68:	6828      	ldr	r0, [r5, #0]
 8017b6a:	6803      	ldr	r3, [r0, #0]
 8017b6c:	68db      	ldr	r3, [r3, #12]
 8017b6e:	4798      	blx	r3
 8017b70:	2301      	movs	r3, #1
 8017b72:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017b76:	2500      	movs	r5, #0
 8017b78:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017b7c:	42a8      	cmp	r0, r5
 8017b7e:	dd0c      	ble.n	8017b9a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017b80:	1963      	adds	r3, r4, r5
 8017b82:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017b86:	b132      	cbz	r2, 8017b96 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017b88:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017b8c:	4413      	add	r3, r2
 8017b8e:	6858      	ldr	r0, [r3, #4]
 8017b90:	6803      	ldr	r3, [r0, #0]
 8017b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b94:	4798      	blx	r3
 8017b96:	3501      	adds	r5, #1
 8017b98:	e7ee      	b.n	8017b78 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	461a      	mov	r2, r3
 8017b9e:	4298      	cmp	r0, r3
 8017ba0:	d015      	beq.n	8017bce <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017ba2:	18e1      	adds	r1, r4, r3
 8017ba4:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017ba8:	b16d      	cbz	r5, 8017bc6 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d00a      	beq.n	8017bc4 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8017bae:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017bb2:	4431      	add	r1, r6
 8017bb4:	684e      	ldr	r6, [r1, #4]
 8017bb6:	b291      	uxth	r1, r2
 8017bb8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017bbc:	604e      	str	r6, [r1, #4]
 8017bbe:	18a1      	adds	r1, r4, r2
 8017bc0:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017bc4:	3201      	adds	r2, #1
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	e7e9      	b.n	8017b9e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017bca:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017bce:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017bd2:	4295      	cmp	r5, r2
 8017bd4:	dd0d      	ble.n	8017bf2 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8017bd6:	1e6b      	subs	r3, r5, #1
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	4618      	mov	r0, r3
 8017bdc:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8017be0:	3104      	adds	r1, #4
 8017be2:	4285      	cmp	r5, r0
 8017be4:	ddf1      	ble.n	8017bca <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8017be6:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8017bea:	3001      	adds	r0, #1
 8017bec:	f841 6c04 	str.w	r6, [r1, #-4]
 8017bf0:	e7f7      	b.n	8017be2 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017bf2:	4b04      	ldr	r3, [pc, #16]	; (8017c04 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017bf4:	6818      	ldr	r0, [r3, #0]
 8017bf6:	b110      	cbz	r0, 8017bfe <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017bf8:	6803      	ldr	r3, [r0, #0]
 8017bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bfc:	e7a5      	b.n	8017b4a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017bfe:	bd70      	pop	{r4, r5, r6, pc}
 8017c00:	2004f73c 	.word	0x2004f73c
 8017c04:	2004f738 	.word	0x2004f738

08017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017c08:	b510      	push	{r4, lr}
 8017c0a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017c0e:	888a      	ldrh	r2, [r1, #4]
 8017c10:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017c14:	4422      	add	r2, r4
 8017c16:	b212      	sxth	r2, r2
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	da15      	bge.n	8017c48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017c1c:	8882      	ldrh	r2, [r0, #4]
 8017c1e:	4413      	add	r3, r2
 8017c20:	b21b      	sxth	r3, r3
 8017c22:	429c      	cmp	r4, r3
 8017c24:	da10      	bge.n	8017c48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017c26:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017c2a:	88c9      	ldrh	r1, [r1, #6]
 8017c2c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017c30:	4419      	add	r1, r3
 8017c32:	b209      	sxth	r1, r1
 8017c34:	428a      	cmp	r2, r1
 8017c36:	da07      	bge.n	8017c48 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017c38:	88c0      	ldrh	r0, [r0, #6]
 8017c3a:	4410      	add	r0, r2
 8017c3c:	b200      	sxth	r0, r0
 8017c3e:	4283      	cmp	r3, r0
 8017c40:	bfac      	ite	ge
 8017c42:	2000      	movge	r0, #0
 8017c44:	2001      	movlt	r0, #1
 8017c46:	bd10      	pop	{r4, pc}
 8017c48:	2000      	movs	r0, #0
 8017c4a:	e7fc      	b.n	8017c46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017c4c <_ZN8touchgfx4Rect10restrictToEss>:
 8017c4c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017c50:	b510      	push	{r4, lr}
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	da04      	bge.n	8017c60 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017c56:	8884      	ldrh	r4, [r0, #4]
 8017c58:	4423      	add	r3, r4
 8017c5a:	8083      	strh	r3, [r0, #4]
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	8003      	strh	r3, [r0, #0]
 8017c60:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017c64:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017c68:	1b09      	subs	r1, r1, r4
 8017c6a:	428b      	cmp	r3, r1
 8017c6c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017c70:	bfc8      	it	gt
 8017c72:	8081      	strhgt	r1, [r0, #4]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	da04      	bge.n	8017c82 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017c78:	88c1      	ldrh	r1, [r0, #6]
 8017c7a:	440b      	add	r3, r1
 8017c7c:	80c3      	strh	r3, [r0, #6]
 8017c7e:	2300      	movs	r3, #0
 8017c80:	8043      	strh	r3, [r0, #2]
 8017c82:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017c86:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017c8a:	1a52      	subs	r2, r2, r1
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	bfc8      	it	gt
 8017c90:	80c2      	strhgt	r2, [r0, #6]
 8017c92:	bd10      	pop	{r4, pc}

08017c94 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017c94:	b510      	push	{r4, lr}
 8017c96:	460c      	mov	r4, r1
 8017c98:	4b0f      	ldr	r3, [pc, #60]	; (8017cd8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ca0:	4b0e      	ldr	r3, [pc, #56]	; (8017cdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017ca2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017ca6:	f7ff ffd1 	bl	8017c4c <_ZN8touchgfx4Rect10restrictToEss>
 8017caa:	4b0d      	ldr	r3, [pc, #52]	; (8017ce0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017cac:	6818      	ldr	r0, [r3, #0]
 8017cae:	b190      	cbz	r0, 8017cd6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017cb0:	6803      	ldr	r3, [r0, #0]
 8017cb2:	4621      	mov	r1, r4
 8017cb4:	689b      	ldr	r3, [r3, #8]
 8017cb6:	4798      	blx	r3
 8017cb8:	4b0a      	ldr	r3, [pc, #40]	; (8017ce4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017cba:	6818      	ldr	r0, [r3, #0]
 8017cbc:	b118      	cbz	r0, 8017cc6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017cbe:	6803      	ldr	r3, [r0, #0]
 8017cc0:	4621      	mov	r1, r4
 8017cc2:	689b      	ldr	r3, [r3, #8]
 8017cc4:	4798      	blx	r3
 8017cc6:	4b08      	ldr	r3, [pc, #32]	; (8017ce8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017cc8:	4621      	mov	r1, r4
 8017cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cce:	6818      	ldr	r0, [r3, #0]
 8017cd0:	6803      	ldr	r3, [r0, #0]
 8017cd2:	69db      	ldr	r3, [r3, #28]
 8017cd4:	4718      	bx	r3
 8017cd6:	bd10      	pop	{r4, pc}
 8017cd8:	2004f6ea 	.word	0x2004f6ea
 8017cdc:	2004f6e8 	.word	0x2004f6e8
 8017ce0:	2004f738 	.word	0x2004f738
 8017ce4:	2004f734 	.word	0x2004f734
 8017ce8:	2004f6f4 	.word	0x2004f6f4

08017cec <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cee:	4606      	mov	r6, r0
 8017cf0:	4608      	mov	r0, r1
 8017cf2:	460f      	mov	r7, r1
 8017cf4:	f7fc f963 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cf8:	b9e8      	cbnz	r0, 8017d36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017cfa:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017cfe:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017d02:	42a5      	cmp	r5, r4
 8017d04:	db17      	blt.n	8017d36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017d0a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	db11      	blt.n	8017d36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d12:	88b9      	ldrh	r1, [r7, #4]
 8017d14:	440d      	add	r5, r1
 8017d16:	88b1      	ldrh	r1, [r6, #4]
 8017d18:	b22d      	sxth	r5, r5
 8017d1a:	440c      	add	r4, r1
 8017d1c:	b224      	sxth	r4, r4
 8017d1e:	42a5      	cmp	r5, r4
 8017d20:	dc09      	bgt.n	8017d36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017d22:	88f8      	ldrh	r0, [r7, #6]
 8017d24:	4410      	add	r0, r2
 8017d26:	88f2      	ldrh	r2, [r6, #6]
 8017d28:	b200      	sxth	r0, r0
 8017d2a:	4413      	add	r3, r2
 8017d2c:	b21b      	sxth	r3, r3
 8017d2e:	4298      	cmp	r0, r3
 8017d30:	bfcc      	ite	gt
 8017d32:	2000      	movgt	r0, #0
 8017d34:	2001      	movle	r0, #1
 8017d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017d38 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d3a:	4604      	mov	r4, r0
 8017d3c:	4608      	mov	r0, r1
 8017d3e:	460d      	mov	r5, r1
 8017d40:	f7fc f93d 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d44:	b978      	cbnz	r0, 8017d66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017d46:	4620      	mov	r0, r4
 8017d48:	f7fc f939 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d4c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017d50:	b150      	cbz	r0, 8017d68 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017d52:	8026      	strh	r6, [r4, #0]
 8017d54:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017d58:	8063      	strh	r3, [r4, #2]
 8017d5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017d5e:	80a3      	strh	r3, [r4, #4]
 8017d60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017d64:	80e3      	strh	r3, [r4, #6]
 8017d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d68:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017d6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017d70:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017d74:	42b1      	cmp	r1, r6
 8017d76:	460f      	mov	r7, r1
 8017d78:	bfa8      	it	ge
 8017d7a:	4637      	movge	r7, r6
 8017d7c:	4293      	cmp	r3, r2
 8017d7e:	4618      	mov	r0, r3
 8017d80:	bfa8      	it	ge
 8017d82:	4610      	movge	r0, r2
 8017d84:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017d88:	88ed      	ldrh	r5, [r5, #6]
 8017d8a:	4466      	add	r6, ip
 8017d8c:	442a      	add	r2, r5
 8017d8e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017d92:	88e5      	ldrh	r5, [r4, #6]
 8017d94:	4461      	add	r1, ip
 8017d96:	442b      	add	r3, r5
 8017d98:	b236      	sxth	r6, r6
 8017d9a:	b209      	sxth	r1, r1
 8017d9c:	b212      	sxth	r2, r2
 8017d9e:	b21b      	sxth	r3, r3
 8017da0:	428e      	cmp	r6, r1
 8017da2:	bfac      	ite	ge
 8017da4:	ebc7 0106 	rsbge	r1, r7, r6
 8017da8:	ebc7 0101 	rsblt	r1, r7, r1
 8017dac:	429a      	cmp	r2, r3
 8017dae:	bfac      	ite	ge
 8017db0:	ebc0 0202 	rsbge	r2, r0, r2
 8017db4:	ebc0 0203 	rsblt	r2, r0, r3
 8017db8:	8027      	strh	r7, [r4, #0]
 8017dba:	8060      	strh	r0, [r4, #2]
 8017dbc:	80a1      	strh	r1, [r4, #4]
 8017dbe:	80e2      	strh	r2, [r4, #6]
 8017dc0:	e7d1      	b.n	8017d66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017dc4 <_ZN8touchgfx11Application11getInstanceEv>:
 8017dc4:	4b01      	ldr	r3, [pc, #4]	; (8017dcc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017dc6:	6818      	ldr	r0, [r3, #0]
 8017dc8:	4770      	bx	lr
 8017dca:	bf00      	nop
 8017dcc:	2004f748 	.word	0x2004f748

08017dd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017dd6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017dda:	30a8      	adds	r0, #168	; 0xa8
 8017ddc:	f802 3b01 	strb.w	r3, [r2], #1
 8017de0:	4282      	cmp	r2, r0
 8017de2:	d1fb      	bne.n	8017ddc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017de4:	4770      	bx	lr

08017de6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017de6:	4603      	mov	r3, r0
 8017de8:	2200      	movs	r2, #0
 8017dea:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017dee:	801a      	strh	r2, [r3, #0]
 8017df0:	805a      	strh	r2, [r3, #2]
 8017df2:	809a      	strh	r2, [r3, #4]
 8017df4:	80da      	strh	r2, [r3, #6]
 8017df6:	3308      	adds	r3, #8
 8017df8:	428b      	cmp	r3, r1
 8017dfa:	d1f8      	bne.n	8017dee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017dfc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017e00:	4770      	bx	lr
	...

08017e04 <_ZN8touchgfx11ApplicationC1Ev>:
 8017e04:	b570      	push	{r4, r5, r6, lr}
 8017e06:	2500      	movs	r5, #0
 8017e08:	4604      	mov	r4, r0
 8017e0a:	4b18      	ldr	r3, [pc, #96]	; (8017e6c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8017e0c:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8017e10:	6003      	str	r3, [r0, #0]
 8017e12:	30a8      	adds	r0, #168	; 0xa8
 8017e14:	f7ff ffe7 	bl	8017de6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017e18:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017e1c:	f7ff ffe3 	bl	8017de6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017e20:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017e24:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017e28:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017e2c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017e30:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017e34:	490e      	ldr	r1, [pc, #56]	; (8017e70 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017e36:	480f      	ldr	r0, [pc, #60]	; (8017e74 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017e38:	f00e f8b4 	bl	8025fa4 <CRC_Lock>
 8017e3c:	4e0e      	ldr	r6, [pc, #56]	; (8017e78 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017e3e:	4b0f      	ldr	r3, [pc, #60]	; (8017e7c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017e40:	b158      	cbz	r0, 8017e5a <_ZN8touchgfx11ApplicationC1Ev+0x56>
 8017e42:	801d      	strh	r5, [r3, #0]
 8017e44:	2300      	movs	r3, #0
 8017e46:	4a0e      	ldr	r2, [pc, #56]	; (8017e80 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017e48:	4620      	mov	r0, r4
 8017e4a:	6013      	str	r3, [r2, #0]
 8017e4c:	4a0d      	ldr	r2, [pc, #52]	; (8017e84 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017e4e:	6033      	str	r3, [r6, #0]
 8017e50:	6013      	str	r3, [r2, #0]
 8017e52:	f7ff ffbd 	bl	8017dd0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017e56:	4620      	mov	r0, r4
 8017e58:	bd70      	pop	{r4, r5, r6, pc}
 8017e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e5e:	2002      	movs	r0, #2
 8017e60:	801a      	strh	r2, [r3, #0]
 8017e62:	6030      	str	r0, [r6, #0]
 8017e64:	f001 fa9e 	bl	80193a4 <_ZN8touchgfx6Screen4drawEv>
 8017e68:	e7ec      	b.n	8017e44 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 8017e6a:	bf00      	nop
 8017e6c:	08029a1c 	.word	0x08029a1c
 8017e70:	b5e8b5cd 	.word	0xb5e8b5cd
 8017e74:	f407a5c2 	.word	0xf407a5c2
 8017e78:	2004f738 	.word	0x2004f738
 8017e7c:	20025820 	.word	0x20025820
 8017e80:	2004f748 	.word	0x2004f748
 8017e84:	2004f73c 	.word	0x2004f73c

08017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017e88:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017e8c:	b510      	push	{r4, lr}
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	b29b      	uxth	r3, r3
 8017e92:	428b      	cmp	r3, r1
 8017e94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017e98:	d908      	bls.n	8017eac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017e9a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017e9e:	681a      	ldr	r2, [r3, #0]
 8017ea0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017ea4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017ea8:	685a      	ldr	r2, [r3, #4]
 8017eaa:	6062      	str	r2, [r4, #4]
 8017eac:	bd10      	pop	{r4, pc}
	...

08017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb4:	4b94      	ldr	r3, [pc, #592]	; (8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8017eb6:	b08f      	sub	sp, #60	; 0x3c
 8017eb8:	ac0a      	add	r4, sp, #40	; 0x28
 8017eba:	e884 0006 	stmia.w	r4, {r1, r2}
 8017ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ec2:	4b92      	ldr	r3, [pc, #584]	; (801810c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8017ec4:	4683      	mov	fp, r0
 8017ec6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7ff febe 	bl	8017c4c <_ZN8touchgfx4Rect10restrictToEss>
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f7fc f874 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ed6:	2800      	cmp	r0, #0
 8017ed8:	d16a      	bne.n	8017fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017eda:	9403      	str	r4, [sp, #12]
 8017edc:	2400      	movs	r4, #0
 8017ede:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017ee2:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017ee6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017eea:	9301      	str	r3, [sp, #4]
 8017eec:	36a0      	adds	r6, #160	; 0xa0
 8017eee:	42a5      	cmp	r5, r4
 8017ef0:	d00d      	beq.n	8017f0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8017ef2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017ef6:	9803      	ldr	r0, [sp, #12]
 8017ef8:	f7ff fef8 	bl	8017cec <_ZNK8touchgfx4Rect8includesERKS0_>
 8017efc:	b128      	cbz	r0, 8017f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017efe:	1e69      	subs	r1, r5, #1
 8017f00:	1b09      	subs	r1, r1, r4
 8017f02:	b289      	uxth	r1, r1
 8017f04:	9801      	ldr	r0, [sp, #4]
 8017f06:	f7ff ffbf 	bl	8017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f0a:	3401      	adds	r4, #1
 8017f0c:	e7ef      	b.n	8017eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8017f0e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017f12:	1e7b      	subs	r3, r7, #1
 8017f14:	9302      	str	r3, [sp, #8]
 8017f16:	9704      	str	r7, [sp, #16]
 8017f18:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017f1c:	2400      	movs	r4, #0
 8017f1e:	4655      	mov	r5, sl
 8017f20:	4626      	mov	r6, r4
 8017f22:	9705      	str	r7, [sp, #20]
 8017f24:	9b05      	ldr	r3, [sp, #20]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d078      	beq.n	801801c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8017f2a:	9903      	ldr	r1, [sp, #12]
 8017f2c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017f30:	f7ff fe6a 	bl	8017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f34:	b360      	cbz	r0, 8017f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017f36:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017f3a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8017f3e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8017f42:	45e6      	cmp	lr, ip
 8017f44:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017f48:	db35      	blt.n	8017fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017f4a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017f4e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017f52:	4472      	add	r2, lr
 8017f54:	4463      	add	r3, ip
 8017f56:	b212      	sxth	r2, r2
 8017f58:	b21b      	sxth	r3, r3
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	dc2b      	bgt.n	8017fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017f5e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017f62:	fa1f f288 	uxth.w	r2, r8
 8017f66:	4413      	add	r3, r2
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	45c1      	cmp	r9, r8
 8017f6c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017f70:	fa0f fe83 	sxth.w	lr, r3
 8017f74:	fa1f fc89 	uxth.w	ip, r9
 8017f78:	db0f      	blt.n	8017f9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017f7a:	eba3 030c 	sub.w	r3, r3, ip
 8017f7e:	1ac9      	subs	r1, r1, r3
 8017f80:	b209      	sxth	r1, r1
 8017f82:	2900      	cmp	r1, #0
 8017f84:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017f88:	dd12      	ble.n	8017fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017f8a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017f8e:	4604      	mov	r4, r0
 8017f90:	9b05      	ldr	r3, [sp, #20]
 8017f92:	3d08      	subs	r5, #8
 8017f94:	3b01      	subs	r3, #1
 8017f96:	9305      	str	r3, [sp, #20]
 8017f98:	e7c4      	b.n	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8017f9a:	4461      	add	r1, ip
 8017f9c:	b209      	sxth	r1, r1
 8017f9e:	4571      	cmp	r1, lr
 8017fa0:	dc3a      	bgt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017fa2:	eba2 020c 	sub.w	r2, r2, ip
 8017fa6:	b212      	sxth	r2, r2
 8017fa8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017fac:	2a00      	cmp	r2, #0
 8017fae:	dcee      	bgt.n	8017f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017fb0:	b00f      	add	sp, #60	; 0x3c
 8017fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb6:	45c1      	cmp	r9, r8
 8017fb8:	db2e      	blt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017fba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017fbe:	4499      	add	r9, r3
 8017fc0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017fc4:	fa0f f989 	sxth.w	r9, r9
 8017fc8:	4498      	add	r8, r3
 8017fca:	fa0f f888 	sxth.w	r8, r8
 8017fce:	45c1      	cmp	r9, r8
 8017fd0:	dc22      	bgt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017fd2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017fd6:	fa1f f28c 	uxth.w	r2, ip
 8017fda:	4413      	add	r3, r2
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	45e6      	cmp	lr, ip
 8017fe0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017fe4:	fa1f f88e 	uxth.w	r8, lr
 8017fe8:	fa0f f983 	sxth.w	r9, r3
 8017fec:	db0a      	blt.n	8018004 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8017fee:	eba3 0308 	sub.w	r3, r3, r8
 8017ff2:	1ac9      	subs	r1, r1, r3
 8017ff4:	b209      	sxth	r1, r1
 8017ff6:	2900      	cmp	r1, #0
 8017ff8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017ffc:	ddd8      	ble.n	8017fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017ffe:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8018002:	e7c4      	b.n	8017f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018004:	4441      	add	r1, r8
 8018006:	b209      	sxth	r1, r1
 8018008:	4549      	cmp	r1, r9
 801800a:	dc05      	bgt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801800c:	eba2 0208 	sub.w	r2, r2, r8
 8018010:	b212      	sxth	r2, r2
 8018012:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018016:	e7c9      	b.n	8017fac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018018:	4606      	mov	r6, r0
 801801a:	e7b9      	b.n	8017f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801801c:	2c00      	cmp	r4, #0
 801801e:	f47f af7d 	bne.w	8017f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8018022:	2e00      	cmp	r6, #0
 8018024:	f000 81e2 	beq.w	80183ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8018028:	4655      	mov	r5, sl
 801802a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801802e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018032:	b2b9      	uxth	r1, r7
 8018034:	9105      	str	r1, [sp, #20]
 8018036:	9805      	ldr	r0, [sp, #20]
 8018038:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801803c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018040:	4401      	add	r1, r0
 8018042:	b2b3      	uxth	r3, r6
 8018044:	b289      	uxth	r1, r1
 8018046:	441a      	add	r2, r3
 8018048:	9106      	str	r1, [sp, #24]
 801804a:	b292      	uxth	r2, r2
 801804c:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8018050:	fa0f f882 	sxth.w	r8, r2
 8018054:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018058:	9b04      	ldr	r3, [sp, #16]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d058      	beq.n	8018110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801805e:	9903      	ldr	r1, [sp, #12]
 8018060:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018064:	f7ff fdd0 	bl	8017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018068:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801806c:	b1d8      	cbz	r0, 80180a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801806e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018072:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018076:	4576      	cmp	r6, lr
 8018078:	dc26      	bgt.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801807a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801807e:	44f4      	add	ip, lr
 8018080:	fa0f fc8c 	sxth.w	ip, ip
 8018084:	45e0      	cmp	r8, ip
 8018086:	db1f      	blt.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018088:	428f      	cmp	r7, r1
 801808a:	fa1f fc81 	uxth.w	ip, r1
 801808e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018092:	dc0f      	bgt.n	80180b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8018094:	9806      	ldr	r0, [sp, #24]
 8018096:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801809a:	eba0 0c0c 	sub.w	ip, r0, ip
 801809e:	eba1 010c 	sub.w	r1, r1, ip
 80180a2:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80180a6:	4620      	mov	r0, r4
 80180a8:	9904      	ldr	r1, [sp, #16]
 80180aa:	3d08      	subs	r5, #8
 80180ac:	3901      	subs	r1, #1
 80180ae:	9104      	str	r1, [sp, #16]
 80180b0:	4604      	mov	r4, r0
 80180b2:	e7cf      	b.n	8018054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 80180b4:	4461      	add	r1, ip
 80180b6:	b209      	sxth	r1, r1
 80180b8:	4549      	cmp	r1, r9
 80180ba:	dcf5      	bgt.n	80180a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80180bc:	9905      	ldr	r1, [sp, #20]
 80180be:	eba1 0c0c 	sub.w	ip, r1, ip
 80180c2:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80180c6:	e7ee      	b.n	80180a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80180c8:	428f      	cmp	r7, r1
 80180ca:	dced      	bgt.n	80180a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80180cc:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80180d0:	4461      	add	r1, ip
 80180d2:	b209      	sxth	r1, r1
 80180d4:	4589      	cmp	r9, r1
 80180d6:	dbe7      	blt.n	80180a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80180d8:	4576      	cmp	r6, lr
 80180da:	fa1f fc8e 	uxth.w	ip, lr
 80180de:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80180e2:	dc08      	bgt.n	80180f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80180e4:	eba2 0c0c 	sub.w	ip, r2, ip
 80180e8:	eba1 010c 	sub.w	r1, r1, ip
 80180ec:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80180f0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80180f4:	e7d7      	b.n	80180a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80180f6:	4461      	add	r1, ip
 80180f8:	b209      	sxth	r1, r1
 80180fa:	4588      	cmp	r8, r1
 80180fc:	dbd4      	blt.n	80180a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80180fe:	eba3 0c0c 	sub.w	ip, r3, ip
 8018102:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018106:	e7ce      	b.n	80180a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8018108:	2004f6ea 	.word	0x2004f6ea
 801810c:	2004f6e8 	.word	0x2004f6e8
 8018110:	2c00      	cmp	r4, #0
 8018112:	f000 816b 	beq.w	80183ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8018116:	9b02      	ldr	r3, [sp, #8]
 8018118:	3301      	adds	r3, #1
 801811a:	f000 8167 	beq.w	80183ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801811e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8018122:	4621      	mov	r1, r4
 8018124:	9803      	ldr	r0, [sp, #12]
 8018126:	f7ff fde1 	bl	8017cec <_ZNK8touchgfx4Rect8includesERKS0_>
 801812a:	b120      	cbz	r0, 8018136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801812c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018130:	9801      	ldr	r0, [sp, #4]
 8018132:	f7ff fea9 	bl	8017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018136:	9903      	ldr	r1, [sp, #12]
 8018138:	4620      	mov	r0, r4
 801813a:	f7ff fd65 	bl	8017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801813e:	2800      	cmp	r0, #0
 8018140:	f000 809b 	beq.w	801827a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8018144:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8018148:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801814c:	b281      	uxth	r1, r0
 801814e:	eb01 0c03 	add.w	ip, r1, r3
 8018152:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8018156:	fa1f f98c 	uxth.w	r9, ip
 801815a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801815e:	9309      	str	r3, [sp, #36]	; 0x24
 8018160:	b2ab      	uxth	r3, r5
 8018162:	eb03 040c 	add.w	r4, r3, ip
 8018166:	b2a4      	uxth	r4, r4
 8018168:	9405      	str	r4, [sp, #20]
 801816a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801816e:	4285      	cmp	r5, r0
 8018170:	9404      	str	r4, [sp, #16]
 8018172:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8018176:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801817a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801817e:	f340 809a 	ble.w	80182b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8018182:	1a5b      	subs	r3, r3, r1
 8018184:	b29b      	uxth	r3, r3
 8018186:	4596      	cmp	lr, r2
 8018188:	fa0f f589 	sxth.w	r5, r9
 801818c:	b21e      	sxth	r6, r3
 801818e:	dd2e      	ble.n	80181ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8018190:	9f02      	ldr	r7, [sp, #8]
 8018192:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8018196:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801819a:	9f04      	ldr	r7, [sp, #16]
 801819c:	fa1f fe8e 	uxth.w	lr, lr
 80181a0:	1b7f      	subs	r7, r7, r5
 80181a2:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 80181a6:	b292      	uxth	r2, r2
 80181a8:	ebae 0102 	sub.w	r1, lr, r2
 80181ac:	4486      	add	lr, r0
 80181ae:	442a      	add	r2, r5
 80181b0:	b289      	uxth	r1, r1
 80181b2:	fa0f fe8e 	sxth.w	lr, lr
 80181b6:	b212      	sxth	r2, r2
 80181b8:	b20c      	sxth	r4, r1
 80181ba:	ebae 0202 	sub.w	r2, lr, r2
 80181be:	4367      	muls	r7, r4
 80181c0:	4372      	muls	r2, r6
 80181c2:	4297      	cmp	r7, r2
 80181c4:	db09      	blt.n	80181da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 80181c6:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 80181ca:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80181ce:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80181d2:	449c      	add	ip, r3
 80181d4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80181d8:	e680      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80181da:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80181de:	4401      	add	r1, r0
 80181e0:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 80181e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80181e8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80181ec:	e676      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80181ee:	9f04      	ldr	r7, [sp, #16]
 80181f0:	42bd      	cmp	r5, r7
 80181f2:	da27      	bge.n	8018244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80181f4:	9902      	ldr	r1, [sp, #8]
 80181f6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80181fa:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80181fe:	eb04 010e 	add.w	r1, r4, lr
 8018202:	fa1f f881 	uxth.w	r8, r1
 8018206:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801820a:	fa0f f988 	sxth.w	r9, r8
 801820e:	4411      	add	r1, r2
 8018210:	eba1 0108 	sub.w	r1, r1, r8
 8018214:	b289      	uxth	r1, r1
 8018216:	fa0f f881 	sxth.w	r8, r1
 801821a:	eba2 020e 	sub.w	r2, r2, lr
 801821e:	1b7f      	subs	r7, r7, r5
 8018220:	4372      	muls	r2, r6
 8018222:	fb08 f707 	mul.w	r7, r8, r7
 8018226:	42ba      	cmp	r2, r7
 8018228:	dc06      	bgt.n	8018238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801822a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801822e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8018232:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8018236:	e7ca      	b.n	80181ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018238:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801823c:	4421      	add	r1, r4
 801823e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018242:	e64b      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018244:	9d05      	ldr	r5, [sp, #20]
 8018246:	2c06      	cmp	r4, #6
 8018248:	eba9 0505 	sub.w	r5, r9, r5
 801824c:	b2ad      	uxth	r5, r5
 801824e:	fa0f fe85 	sxth.w	lr, r5
 8018252:	d818      	bhi.n	8018286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8018254:	9b04      	ldr	r3, [sp, #16]
 8018256:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801825a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801825e:	1c63      	adds	r3, r4, #1
 8018260:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8018264:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	9d01      	ldr	r5, [sp, #4]
 801826c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018270:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8018274:	805a      	strh	r2, [r3, #2]
 8018276:	809e      	strh	r6, [r3, #4]
 8018278:	80d9      	strh	r1, [r3, #6]
 801827a:	9b02      	ldr	r3, [sp, #8]
 801827c:	f1aa 0a08 	sub.w	sl, sl, #8
 8018280:	3b01      	subs	r3, #1
 8018282:	9302      	str	r3, [sp, #8]
 8018284:	e747      	b.n	8018116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8018286:	9a02      	ldr	r2, [sp, #8]
 8018288:	45b6      	cmp	lr, r6
 801828a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801828e:	db0d      	blt.n	80182ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8018290:	449c      	add	ip, r3
 8018292:	fa1f fc8c 	uxth.w	ip, ip
 8018296:	445a      	add	r2, fp
 8018298:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801829c:	448c      	add	ip, r1
 801829e:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80182a2:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 80182a6:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 80182aa:	e617      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80182ac:	445a      	add	r2, fp
 80182ae:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 80182b2:	44ac      	add	ip, r5
 80182b4:	e78e      	b.n	80181d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80182b6:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80182ba:	fa1f f18e 	uxth.w	r1, lr
 80182be:	eb01 0806 	add.w	r8, r1, r6
 80182c2:	b293      	uxth	r3, r2
 80182c4:	fa1f f888 	uxth.w	r8, r8
 80182c8:	9306      	str	r3, [sp, #24]
 80182ca:	fa0f f388 	sxth.w	r3, r8
 80182ce:	9307      	str	r3, [sp, #28]
 80182d0:	9f06      	ldr	r7, [sp, #24]
 80182d2:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80182d6:	4596      	cmp	lr, r2
 80182d8:	443b      	add	r3, r7
 80182da:	b29b      	uxth	r3, r3
 80182dc:	9308      	str	r3, [sp, #32]
 80182de:	da25      	bge.n	801832c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80182e0:	9905      	ldr	r1, [sp, #20]
 80182e2:	eba3 0308 	sub.w	r3, r3, r8
 80182e6:	eba9 0401 	sub.w	r4, r9, r1
 80182ea:	b2a4      	uxth	r4, r4
 80182ec:	b29b      	uxth	r3, r3
 80182ee:	fa0f f984 	sxth.w	r9, r4
 80182f2:	b219      	sxth	r1, r3
 80182f4:	eba2 020e 	sub.w	r2, r2, lr
 80182f8:	1b40      	subs	r0, r0, r5
 80182fa:	fb09 f202 	mul.w	r2, r9, r2
 80182fe:	4348      	muls	r0, r1
 8018300:	4282      	cmp	r2, r0
 8018302:	9a02      	ldr	r2, [sp, #8]
 8018304:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018308:	445a      	add	r2, fp
 801830a:	dc06      	bgt.n	801831a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801830c:	9b07      	ldr	r3, [sp, #28]
 801830e:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8018312:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8018316:	44a4      	add	ip, r4
 8018318:	e75c      	b.n	80181d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801831a:	9904      	ldr	r1, [sp, #16]
 801831c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8018320:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8018324:	4433      	add	r3, r6
 8018326:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801832a:	e5d7      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801832c:	9f06      	ldr	r7, [sp, #24]
 801832e:	9b04      	ldr	r3, [sp, #16]
 8018330:	1bc9      	subs	r1, r1, r7
 8018332:	fa0f f789 	sxth.w	r7, r9
 8018336:	b289      	uxth	r1, r1
 8018338:	429f      	cmp	r7, r3
 801833a:	fa0f fe81 	sxth.w	lr, r1
 801833e:	dd23      	ble.n	8018388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8018340:	9a05      	ldr	r2, [sp, #20]
 8018342:	1b40      	subs	r0, r0, r5
 8018344:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018348:	eba9 0202 	sub.w	r2, r9, r2
 801834c:	9d07      	ldr	r5, [sp, #28]
 801834e:	b292      	uxth	r2, r2
 8018350:	eba5 0a03 	sub.w	sl, r5, r3
 8018354:	b214      	sxth	r4, r2
 8018356:	fb0e f000 	mul.w	r0, lr, r0
 801835a:	fb04 fa0a 	mul.w	sl, r4, sl
 801835e:	9b02      	ldr	r3, [sp, #8]
 8018360:	4550      	cmp	r0, sl
 8018362:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018366:	445b      	add	r3, fp
 8018368:	db03      	blt.n	8018372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 801836a:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801836e:	4494      	add	ip, r2
 8018370:	e730      	b.n	80181d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8018372:	9a04      	ldr	r2, [sp, #16]
 8018374:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8018378:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801837c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8018380:	4431      	add	r1, r6
 8018382:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018386:	e75a      	b.n	801823e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8018388:	9b08      	ldr	r3, [sp, #32]
 801838a:	2c06      	cmp	r4, #6
 801838c:	eba3 0308 	sub.w	r3, r3, r8
 8018390:	b29b      	uxth	r3, r3
 8018392:	b21d      	sxth	r5, r3
 8018394:	d813      	bhi.n	80183be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8018396:	9b07      	ldr	r3, [sp, #28]
 8018398:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801839c:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80183a0:	1c63      	adds	r3, r4, #1
 80183a2:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80183a6:	9b01      	ldr	r3, [sp, #4]
 80183a8:	9901      	ldr	r1, [sp, #4]
 80183aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80183ae:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 80183b2:	805a      	strh	r2, [r3, #2]
 80183b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183b6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80183ba:	809a      	strh	r2, [r3, #4]
 80183bc:	e75d      	b.n	801827a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80183be:	9802      	ldr	r0, [sp, #8]
 80183c0:	4575      	cmp	r5, lr
 80183c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80183c6:	db0d      	blt.n	80183e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80183c8:	4431      	add	r1, r6
 80183ca:	9b06      	ldr	r3, [sp, #24]
 80183cc:	b289      	uxth	r1, r1
 80183ce:	4458      	add	r0, fp
 80183d0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80183d4:	4419      	add	r1, r3
 80183d6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80183da:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 80183de:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 80183e2:	e57b      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80183e4:	4458      	add	r0, fp
 80183e6:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 80183ea:	e79b      	b.n	8018324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80183ec:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 80183f0:	2e07      	cmp	r6, #7
 80183f2:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80183f6:	d812      	bhi.n	801841e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56e>
 80183f8:	1c75      	adds	r5, r6, #1
 80183fa:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80183fe:	9d01      	ldr	r5, [sp, #4]
 8018400:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018404:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8018408:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801840c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018410:	442c      	add	r4, r5
 8018412:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018416:	8061      	strh	r1, [r4, #2]
 8018418:	80a2      	strh	r2, [r4, #4]
 801841a:	80e3      	strh	r3, [r4, #6]
 801841c:	e5c8      	b.n	8017fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801841e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018422:	f04f 37ff 	mov.w	r7, #4294967295
 8018426:	2500      	movs	r5, #0
 8018428:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801842c:	3e01      	subs	r6, #1
 801842e:	445c      	add	r4, fp
 8018430:	9305      	str	r3, [sp, #20]
 8018432:	1e72      	subs	r2, r6, #1
 8018434:	4691      	mov	r9, r2
 8018436:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801843a:	9302      	str	r3, [sp, #8]
 801843c:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8018440:	9304      	str	r3, [sp, #16]
 8018442:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8018446:	f1b9 3fff 	cmp.w	r9, #4294967295
 801844a:	bf16      	itet	ne
 801844c:	9905      	ldrne	r1, [sp, #20]
 801844e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018452:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018456:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801845a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801845e:	6818      	ldr	r0, [r3, #0]
 8018460:	fb18 f801 	smulbb	r8, r8, r1
 8018464:	6859      	ldr	r1, [r3, #4]
 8018466:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801846a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801846e:	4671      	mov	r1, lr
 8018470:	a80c      	add	r0, sp, #48	; 0x30
 8018472:	9207      	str	r2, [sp, #28]
 8018474:	9306      	str	r3, [sp, #24]
 8018476:	f7ff fc5f 	bl	8017d38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801847a:	f04f 0c08 	mov.w	ip, #8
 801847e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018482:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018486:	9b04      	ldr	r3, [sp, #16]
 8018488:	9a02      	ldr	r2, [sp, #8]
 801848a:	fb10 f001 	smulbb	r0, r0, r1
 801848e:	fb02 8803 	mla	r8, r2, r3, r8
 8018492:	eba0 0108 	sub.w	r1, r0, r8
 8018496:	fb90 f0fc 	sdiv	r0, r0, ip
 801849a:	4288      	cmp	r0, r1
 801849c:	dc20      	bgt.n	80184e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801849e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80184a2:	4551      	cmp	r1, sl
 80184a4:	da03      	bge.n	80184ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 80184a6:	b1d9      	cbz	r1, 80184e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 80184a8:	468a      	mov	sl, r1
 80184aa:	464f      	mov	r7, r9
 80184ac:	4635      	mov	r5, r6
 80184ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80184b2:	f119 0f02 	cmn.w	r9, #2
 80184b6:	d1c6      	bne.n	8018446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80184b8:	4616      	mov	r6, r2
 80184ba:	3201      	adds	r2, #1
 80184bc:	f1a4 0408 	sub.w	r4, r4, #8
 80184c0:	d1b7      	bne.n	8018432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x582>
 80184c2:	9b01      	ldr	r3, [sp, #4]
 80184c4:	b2ac      	uxth	r4, r5
 80184c6:	00ed      	lsls	r5, r5, #3
 80184c8:	1958      	adds	r0, r3, r5
 80184ca:	1c7b      	adds	r3, r7, #1
 80184cc:	d10b      	bne.n	80184e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 80184ce:	4601      	mov	r1, r0
 80184d0:	9803      	ldr	r0, [sp, #12]
 80184d2:	f7ff fc31 	bl	8017d38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80184d6:	4621      	mov	r1, r4
 80184d8:	9801      	ldr	r0, [sp, #4]
 80184da:	f7ff fcd5 	bl	8017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80184de:	e4fd      	b.n	8017edc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80184e0:	464f      	mov	r7, r9
 80184e2:	4635      	mov	r5, r6
 80184e4:	e7ed      	b.n	80184c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 80184e6:	9b01      	ldr	r3, [sp, #4]
 80184e8:	00ff      	lsls	r7, r7, #3
 80184ea:	19d9      	adds	r1, r3, r7
 80184ec:	f7ff fc24 	bl	8017d38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80184f0:	9b03      	ldr	r3, [sp, #12]
 80184f2:	445f      	add	r7, fp
 80184f4:	cb03      	ldmia	r3!, {r0, r1}
 80184f6:	445d      	add	r5, fp
 80184f8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80184fc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8018500:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8018504:	9b03      	ldr	r3, [sp, #12]
 8018506:	6869      	ldr	r1, [r5, #4]
 8018508:	c303      	stmia	r3!, {r0, r1}
 801850a:	e7e4      	b.n	80184d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

0801850c <_ZN8touchgfx11Application10invalidateEv>:
 801850c:	2100      	movs	r1, #0
 801850e:	4b09      	ldr	r3, [pc, #36]	; (8018534 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018510:	b082      	sub	sp, #8
 8018512:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018516:	4b08      	ldr	r3, [pc, #32]	; (8018538 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018518:	9100      	str	r1, [sp, #0]
 801851a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801851e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018522:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018526:	ab02      	add	r3, sp, #8
 8018528:	e913 0006 	ldmdb	r3, {r1, r2}
 801852c:	b002      	add	sp, #8
 801852e:	f7ff bcbf 	b.w	8017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018532:	bf00      	nop
 8018534:	2004f6e8 	.word	0x2004f6e8
 8018538:	2004f6ea 	.word	0x2004f6ea

0801853c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018540:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018544:	b09b      	sub	sp, #108	; 0x6c
 8018546:	4604      	mov	r4, r0
 8018548:	4630      	mov	r0, r6
 801854a:	f7fb fd38 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801854e:	4605      	mov	r5, r0
 8018550:	b940      	cbnz	r0, 8018564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8018552:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018556:	4620      	mov	r0, r4
 8018558:	f7ff fcaa 	bl	8017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801855c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8018560:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018564:	4bc9      	ldr	r3, [pc, #804]	; (801888c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d03e      	beq.n	80185ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801856c:	4dc8      	ldr	r5, [pc, #800]	; (8018890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801856e:	4628      	mov	r0, r5
 8018570:	f7fb fd25 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8018574:	4606      	mov	r6, r0
 8018576:	2800      	cmp	r0, #0
 8018578:	d137      	bne.n	80185ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801857a:	4628      	mov	r0, r5
 801857c:	f7ff fa0e 	bl	801799c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018580:	6829      	ldr	r1, [r5, #0]
 8018582:	686a      	ldr	r2, [r5, #4]
 8018584:	4620      	mov	r0, r4
 8018586:	f7ff fc93 	bl	8017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801858a:	802e      	strh	r6, [r5, #0]
 801858c:	806e      	strh	r6, [r5, #2]
 801858e:	80ae      	strh	r6, [r5, #4]
 8018590:	80ee      	strh	r6, [r5, #6]
 8018592:	ae09      	add	r6, sp, #36	; 0x24
 8018594:	4630      	mov	r0, r6
 8018596:	f7ff fc26 	bl	8017de6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801859a:	4abe      	ldr	r2, [pc, #760]	; (8018894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801859c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80185a0:	8815      	ldrh	r5, [r2, #0]
 80185a2:	9202      	str	r2, [sp, #8]
 80185a4:	462b      	mov	r3, r5
 80185a6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80185aa:	429f      	cmp	r7, r3
 80185ac:	d924      	bls.n	80185f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80185ae:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80185b2:	2907      	cmp	r1, #7
 80185b4:	d816      	bhi.n	80185e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80185b6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80185ba:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80185be:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80185c2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80185c6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80185ca:	1c4a      	adds	r2, r1, #1
 80185cc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80185d0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80185d4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80185d8:	f8a2 9002 	strh.w	r9, [r2, #2]
 80185dc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80185e0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80185e4:	3301      	adds	r3, #1
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	e7df      	b.n	80185aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80185ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d1cf      	bne.n	8018592 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80185f2:	b01b      	add	sp, #108	; 0x6c
 80185f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f8:	462f      	mov	r7, r5
 80185fa:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80185fe:	42bb      	cmp	r3, r7
 8018600:	d90b      	bls.n	801861a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8018602:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8018606:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801860a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801860e:	4620      	mov	r0, r4
 8018610:	3701      	adds	r7, #1
 8018612:	f7ff fc4d 	bl	8017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018616:	b2bf      	uxth	r7, r7
 8018618:	e7ef      	b.n	80185fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801861a:	4a9f      	ldr	r2, [pc, #636]	; (8018898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801861c:	6813      	ldr	r3, [r2, #0]
 801861e:	4690      	mov	r8, r2
 8018620:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018624:	2b01      	cmp	r3, #1
 8018626:	f040 80e6 	bne.w	80187f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801862a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801862e:	4629      	mov	r1, r5
 8018630:	2500      	movs	r5, #0
 8018632:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018636:	33aa      	adds	r3, #170	; 0xaa
 8018638:	428f      	cmp	r7, r1
 801863a:	f103 0308 	add.w	r3, r3, #8
 801863e:	dd0a      	ble.n	8018656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8018640:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018644:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018648:	3101      	adds	r1, #1
 801864a:	4402      	add	r2, r0
 801864c:	b212      	sxth	r2, r2
 801864e:	4295      	cmp	r5, r2
 8018650:	bfb8      	it	lt
 8018652:	4615      	movlt	r5, r2
 8018654:	e7f0      	b.n	8018638 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018656:	4b91      	ldr	r3, [pc, #580]	; (801889c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018658:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8018898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801865c:	881b      	ldrh	r3, [r3, #0]
 801865e:	46d8      	mov	r8, fp
 8018660:	2b0f      	cmp	r3, #15
 8018662:	bf88      	it	hi
 8018664:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018668:	f04f 0300 	mov.w	r3, #0
 801866c:	bf98      	it	ls
 801866e:	f04f 0a01 	movls.w	sl, #1
 8018672:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018676:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801867a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801867e:	4438      	add	r0, r7
 8018680:	b207      	sxth	r7, r0
 8018682:	f8db 0000 	ldr.w	r0, [fp]
 8018686:	42bd      	cmp	r5, r7
 8018688:	6803      	ldr	r3, [r0, #0]
 801868a:	f340 8084 	ble.w	8018796 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801868e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018692:	4798      	blx	r3
 8018694:	eb07 030a 	add.w	r3, r7, sl
 8018698:	4298      	cmp	r0, r3
 801869a:	da07      	bge.n	80186ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801869c:	4285      	cmp	r5, r0
 801869e:	dd05      	ble.n	80186ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80186a0:	4287      	cmp	r7, r0
 80186a2:	dd6d      	ble.n	8018780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80186a4:	2f00      	cmp	r7, #0
 80186a6:	dd6b      	ble.n	8018780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80186a8:	4628      	mov	r0, r5
 80186aa:	e004      	b.n	80186b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 80186ac:	4287      	cmp	r7, r0
 80186ae:	dcfb      	bgt.n	80186a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80186b0:	42a8      	cmp	r0, r5
 80186b2:	bfa8      	it	ge
 80186b4:	4628      	movge	r0, r5
 80186b6:	2200      	movs	r2, #0
 80186b8:	4b79      	ldr	r3, [pc, #484]	; (80188a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80186ba:	1bc0      	subs	r0, r0, r7
 80186bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186c0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80186c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80186c8:	9b02      	ldr	r3, [sp, #8]
 80186ca:	f8ad 2014 	strh.w	r2, [sp, #20]
 80186ce:	881f      	ldrh	r7, [r3, #0]
 80186d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80186d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80186d8:	42bb      	cmp	r3, r7
 80186da:	d9cc      	bls.n	8018676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80186dc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80186e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80186e4:	ab07      	add	r3, sp, #28
 80186e6:	6851      	ldr	r1, [r2, #4]
 80186e8:	c303      	stmia	r3!, {r0, r1}
 80186ea:	a905      	add	r1, sp, #20
 80186ec:	a807      	add	r0, sp, #28
 80186ee:	f7ff fa8b 	bl	8017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d04c      	beq.n	8018790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80186f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80186fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80186fe:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8018702:	4686      	mov	lr, r0
 8018704:	4290      	cmp	r0, r2
 8018706:	4448      	add	r0, r9
 8018708:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801870c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018710:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018714:	bfb8      	it	lt
 8018716:	4696      	movlt	lr, r2
 8018718:	444a      	add	r2, r9
 801871a:	4299      	cmp	r1, r3
 801871c:	b280      	uxth	r0, r0
 801871e:	b292      	uxth	r2, r2
 8018720:	468c      	mov	ip, r1
 8018722:	9303      	str	r3, [sp, #12]
 8018724:	bfb8      	it	lt
 8018726:	469c      	movlt	ip, r3
 8018728:	fa0f f982 	sxth.w	r9, r2
 801872c:	b203      	sxth	r3, r0
 801872e:	454b      	cmp	r3, r9
 8018730:	bfb8      	it	lt
 8018732:	4602      	movlt	r2, r0
 8018734:	eba2 020e 	sub.w	r2, r2, lr
 8018738:	f8ad 2020 	strh.w	r2, [sp, #32]
 801873c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018740:	9b03      	ldr	r3, [sp, #12]
 8018742:	4411      	add	r1, r2
 8018744:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018748:	b289      	uxth	r1, r1
 801874a:	4413      	add	r3, r2
 801874c:	b29b      	uxth	r3, r3
 801874e:	b208      	sxth	r0, r1
 8018750:	b21a      	sxth	r2, r3
 8018752:	4290      	cmp	r0, r2
 8018754:	bfb8      	it	lt
 8018756:	460b      	movlt	r3, r1
 8018758:	eba3 030c 	sub.w	r3, r3, ip
 801875c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018760:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018764:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018768:	a807      	add	r0, sp, #28
 801876a:	f7fb fc28 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801876e:	b920      	cbnz	r0, 801877a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8018770:	6823      	ldr	r3, [r4, #0]
 8018772:	a907      	add	r1, sp, #28
 8018774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018776:	4620      	mov	r0, r4
 8018778:	4798      	blx	r3
 801877a:	3701      	adds	r7, #1
 801877c:	b2bf      	uxth	r7, r7
 801877e:	e7a9      	b.n	80186d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8018780:	f8d8 0000 	ldr.w	r0, [r8]
 8018784:	2101      	movs	r1, #1
 8018786:	6803      	ldr	r3, [r0, #0]
 8018788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801878c:	4798      	blx	r3
 801878e:	e772      	b.n	8018676 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018790:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018794:	e7e8      	b.n	8018768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8018796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018798:	4798      	blx	r3
 801879a:	4b42      	ldr	r3, [pc, #264]	; (80188a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	f43f af27 	beq.w	80185f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80187a4:	2300      	movs	r3, #0
 80187a6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80187aa:	9b02      	ldr	r3, [sp, #8]
 80187ac:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80187b0:	881b      	ldrh	r3, [r3, #0]
 80187b2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80187b6:	429d      	cmp	r5, r3
 80187b8:	f67f af1b 	bls.w	80185f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80187bc:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80187c0:	2907      	cmp	r1, #7
 80187c2:	d815      	bhi.n	80187f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 80187c4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80187c8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80187cc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80187d0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80187d4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80187d8:	1c4a      	adds	r2, r1, #1
 80187da:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80187de:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80187e2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80187e6:	f8a2 e002 	strh.w	lr, [r2, #2]
 80187ea:	f8a2 c004 	strh.w	ip, [r2, #4]
 80187ee:	80d7      	strh	r7, [r2, #6]
 80187f0:	3301      	adds	r3, #1
 80187f2:	b29b      	uxth	r3, r3
 80187f4:	e7df      	b.n	80187b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 80187f6:	2b02      	cmp	r3, #2
 80187f8:	f040 8136 	bne.w	8018a68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80187fc:	4b2a      	ldr	r3, [pc, #168]	; (80188a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 80187fe:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	2b01      	cmp	r3, #1
 8018806:	f000 809c 	beq.w	8018942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801880a:	9b02      	ldr	r3, [sp, #8]
 801880c:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8018810:	f8b3 b000 	ldrh.w	fp, [r3]
 8018814:	f10b 0b01 	add.w	fp, fp, #1
 8018818:	fa1f fb8b 	uxth.w	fp, fp
 801881c:	2a00      	cmp	r2, #0
 801881e:	d0bc      	beq.n	801879a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018820:	4659      	mov	r1, fp
 8018822:	f04f 0800 	mov.w	r8, #0
 8018826:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801882a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801882e:	441d      	add	r5, r3
 8018830:	b22d      	sxth	r5, r5
 8018832:	b28b      	uxth	r3, r1
 8018834:	429a      	cmp	r2, r3
 8018836:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801883a:	f240 80c1 	bls.w	80189c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801883e:	4427      	add	r7, r4
 8018840:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018844:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018848:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801884c:	4608      	mov	r0, r1
 801884e:	4563      	cmp	r3, ip
 8018850:	f340 80a3 	ble.w	801899a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8018854:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8018858:	4465      	add	r5, ip
 801885a:	b22d      	sxth	r5, r5
 801885c:	429d      	cmp	r5, r3
 801885e:	bfa8      	it	ge
 8018860:	461d      	movge	r5, r3
 8018862:	3101      	adds	r1, #1
 8018864:	4680      	mov	r8, r0
 8018866:	e7e4      	b.n	8018832 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8018868:	d10b      	bne.n	8018882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801886a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801886e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018872:	458c      	cmp	ip, r1
 8018874:	bfb4      	ite	lt
 8018876:	469c      	movlt	ip, r3
 8018878:	46bc      	movge	ip, r7
 801887a:	4572      	cmp	r2, lr
 801887c:	bfb8      	it	lt
 801887e:	4672      	movlt	r2, lr
 8018880:	e088      	b.n	8018994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018882:	428a      	cmp	r2, r1
 8018884:	bfb8      	it	lt
 8018886:	460a      	movlt	r2, r1
 8018888:	46bc      	mov	ip, r7
 801888a:	e083      	b.n	8018994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801888c:	2004f734 	.word	0x2004f734
 8018890:	2004f740 	.word	0x2004f740
 8018894:	20025820 	.word	0x20025820
 8018898:	2004f6f4 	.word	0x2004f6f4
 801889c:	2004f6ea 	.word	0x2004f6ea
 80188a0:	2004f6e8 	.word	0x2004f6e8
 80188a4:	2004f6f2 	.word	0x2004f6f2
 80188a8:	2004f6ec 	.word	0x2004f6ec
 80188ac:	1961      	adds	r1, r4, r5
 80188ae:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80188b2:	ab07      	add	r3, sp, #28
 80188b4:	6849      	ldr	r1, [r1, #4]
 80188b6:	c303      	stmia	r3!, {r0, r1}
 80188b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80188bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80188c0:	2b13      	cmp	r3, #19
 80188c2:	bfd8      	it	le
 80188c4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80188c8:	440b      	add	r3, r1
 80188ca:	1a9b      	subs	r3, r3, r2
 80188cc:	a807      	add	r0, sp, #28
 80188ce:	f8ad 3020 	strh.w	r3, [sp, #32]
 80188d2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80188d6:	f7ff f87b 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80188da:	a807      	add	r0, sp, #28
 80188dc:	f7fb fb6f 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80188e0:	bb78      	cbnz	r0, 8018942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80188e2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80188e6:	f8d8 0000 	ldr.w	r0, [r8]
 80188ea:	f1bc 0f14 	cmp.w	ip, #20
 80188ee:	bfa8      	it	ge
 80188f0:	f04f 0c14 	movge.w	ip, #20
 80188f4:	f8d0 e000 	ldr.w	lr, [r0]
 80188f8:	fa1f fc8c 	uxth.w	ip, ip
 80188fc:	f8cd c000 	str.w	ip, [sp]
 8018900:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018904:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018908:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801890c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018910:	47d0      	blx	sl
 8018912:	4682      	mov	sl, r0
 8018914:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018918:	a807      	add	r0, sp, #28
 801891a:	f7ff f83f 	bl	801799c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801891e:	6823      	ldr	r3, [r4, #0]
 8018920:	4620      	mov	r0, r4
 8018922:	4425      	add	r5, r4
 8018924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018926:	a907      	add	r1, sp, #28
 8018928:	4798      	blx	r3
 801892a:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801892e:	eba0 000a 	sub.w	r0, r0, sl
 8018932:	b200      	sxth	r0, r0
 8018934:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018938:	b918      	cbnz	r0, 8018942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801893a:	b2b9      	uxth	r1, r7
 801893c:	4648      	mov	r0, r9
 801893e:	f7ff faa3 	bl	8017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018942:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018946:	f1bb 0f00 	cmp.w	fp, #0
 801894a:	f43f af26 	beq.w	801879a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801894e:	2700      	movs	r7, #0
 8018950:	9b02      	ldr	r3, [sp, #8]
 8018952:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018956:	881b      	ldrh	r3, [r3, #0]
 8018958:	3301      	adds	r3, #1
 801895a:	b29b      	uxth	r3, r3
 801895c:	b299      	uxth	r1, r3
 801895e:	458b      	cmp	fp, r1
 8018960:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8018964:	d9a2      	bls.n	80188ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8018966:	4425      	add	r5, r4
 8018968:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801896c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018970:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018974:	4408      	add	r0, r1
 8018976:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801897a:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801897e:	b200      	sxth	r0, r0
 8018980:	4471      	add	r1, lr
 8018982:	b209      	sxth	r1, r1
 8018984:	4288      	cmp	r0, r1
 8018986:	469c      	mov	ip, r3
 8018988:	f6bf af6e 	bge.w	8018868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801898c:	4586      	cmp	lr, r0
 801898e:	4672      	mov	r2, lr
 8018990:	bfb8      	it	lt
 8018992:	4602      	movlt	r2, r0
 8018994:	3301      	adds	r3, #1
 8018996:	4667      	mov	r7, ip
 8018998:	e7e0      	b.n	801895c <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801899a:	d10c      	bne.n	80189b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801899c:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 80189a0:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 80189a4:	4287      	cmp	r7, r0
 80189a6:	bfb4      	ite	lt
 80189a8:	4608      	movlt	r0, r1
 80189aa:	4640      	movge	r0, r8
 80189ac:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 80189b0:	443b      	add	r3, r7
 80189b2:	b21b      	sxth	r3, r3
 80189b4:	e752      	b.n	801885c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80189b6:	4565      	cmp	r5, ip
 80189b8:	bfa8      	it	ge
 80189ba:	4665      	movge	r5, ip
 80189bc:	4640      	mov	r0, r8
 80189be:	e750      	b.n	8018862 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 80189c0:	eb09 0007 	add.w	r0, r9, r7
 80189c4:	4427      	add	r7, r4
 80189c6:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 80189ca:	9203      	str	r2, [sp, #12]
 80189cc:	f1ba 0f13 	cmp.w	sl, #19
 80189d0:	bfde      	ittt	le
 80189d2:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 80189d6:	4455      	addle	r5, sl
 80189d8:	b22d      	sxthle	r5, r5
 80189da:	f7fb faf0 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80189de:	9a03      	ldr	r2, [sp, #12]
 80189e0:	2800      	cmp	r0, #0
 80189e2:	f47f af1b 	bne.w	801881c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 80189e6:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80189ea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80189ee:	1aad      	subs	r5, r5, r2
 80189f0:	2d14      	cmp	r5, #20
 80189f2:	bfa8      	it	ge
 80189f4:	2514      	movge	r5, #20
 80189f6:	4828      	ldr	r0, [pc, #160]	; (8018a98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 80189f8:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 80189fc:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8018a00:	6800      	ldr	r0, [r0, #0]
 8018a02:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018a06:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018a0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018a0e:	f8d0 c000 	ldr.w	ip, [r0]
 8018a12:	b2ad      	uxth	r5, r5
 8018a14:	fa1f fa8a 	uxth.w	sl, sl
 8018a18:	4555      	cmp	r5, sl
 8018a1a:	bf94      	ite	ls
 8018a1c:	9500      	strls	r5, [sp, #0]
 8018a1e:	f8cd a000 	strhi.w	sl, [sp]
 8018a22:	b292      	uxth	r2, r2
 8018a24:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	b289      	uxth	r1, r1
 8018a2c:	47a8      	blx	r5
 8018a2e:	6823      	ldr	r3, [r4, #0]
 8018a30:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a36:	a907      	add	r1, sp, #28
 8018a38:	4620      	mov	r0, r4
 8018a3a:	4798      	blx	r3
 8018a3c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018a40:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018a44:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018a48:	1a5b      	subs	r3, r3, r1
 8018a4a:	440a      	add	r2, r1
 8018a4c:	b21b      	sxth	r3, r3
 8018a4e:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8018a52:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	f47f aed7 	bne.w	801880a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018a5c:	fa1f f188 	uxth.w	r1, r8
 8018a60:	4648      	mov	r0, r9
 8018a62:	f7ff fa11 	bl	8017e88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018a66:	e6d0      	b.n	801880a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8018a68:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a6c:	42ab      	cmp	r3, r5
 8018a6e:	f67f ae94 	bls.w	801879a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018a72:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018a76:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018a7a:	ab07      	add	r3, sp, #28
 8018a7c:	6851      	ldr	r1, [r2, #4]
 8018a7e:	c303      	stmia	r3!, {r0, r1}
 8018a80:	a807      	add	r0, sp, #28
 8018a82:	f7fb fa9c 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a86:	b920      	cbnz	r0, 8018a92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8018a88:	6823      	ldr	r3, [r4, #0]
 8018a8a:	a907      	add	r1, sp, #28
 8018a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a8e:	4620      	mov	r0, r4
 8018a90:	4798      	blx	r3
 8018a92:	3501      	adds	r5, #1
 8018a94:	b2ad      	uxth	r5, r5
 8018a96:	e7e7      	b.n	8018a68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018a98:	2004f6f4 	.word	0x2004f6f4

08018a9c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	4b03      	ldr	r3, [pc, #12]	; (8018aac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018aa0:	801a      	strh	r2, [r3, #0]
 8018aa2:	805a      	strh	r2, [r3, #2]
 8018aa4:	809a      	strh	r2, [r3, #4]
 8018aa6:	80da      	strh	r2, [r3, #6]
 8018aa8:	4770      	bx	lr
 8018aaa:	bf00      	nop
 8018aac:	2004f740 	.word	0x2004f740

08018ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab4:	4606      	mov	r6, r0
 8018ab6:	b09d      	sub	sp, #116	; 0x74
 8018ab8:	a803      	add	r0, sp, #12
 8018aba:	4614      	mov	r4, r2
 8018abc:	468a      	mov	sl, r1
 8018abe:	461d      	mov	r5, r3
 8018ac0:	f000 fe1d 	bl	80196fe <_ZN8touchgfx12TextProviderC1Ev>
 8018ac4:	6833      	ldr	r3, [r6, #0]
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aca:	4798      	blx	r3
 8018acc:	6833      	ldr	r3, [r6, #0]
 8018ace:	4607      	mov	r7, r0
 8018ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ad2:	4630      	mov	r0, r6
 8018ad4:	4798      	blx	r3
 8018ad6:	462a      	mov	r2, r5
 8018ad8:	2500      	movs	r5, #0
 8018ada:	9000      	str	r0, [sp, #0]
 8018adc:	4621      	mov	r1, r4
 8018ade:	463b      	mov	r3, r7
 8018ae0:	a803      	add	r0, sp, #12
 8018ae2:	f000 fe5f 	bl	80197a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ae6:	462c      	mov	r4, r5
 8018ae8:	46a9      	mov	r9, r5
 8018aea:	46a8      	mov	r8, r5
 8018aec:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018af0:	2300      	movs	r3, #0
 8018af2:	9302      	str	r3, [sp, #8]
 8018af4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018af8:	429c      	cmp	r4, r3
 8018afa:	d002      	beq.n	8018b02 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018afc:	455c      	cmp	r4, fp
 8018afe:	bf18      	it	ne
 8018b00:	4625      	movne	r5, r4
 8018b02:	ab02      	add	r3, sp, #8
 8018b04:	4632      	mov	r2, r6
 8018b06:	4651      	mov	r1, sl
 8018b08:	a803      	add	r0, sp, #12
 8018b0a:	f001 f93b 	bl	8019d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018b0e:	4604      	mov	r4, r0
 8018b10:	b108      	cbz	r0, 8018b16 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018b12:	280a      	cmp	r0, #10
 8018b14:	d10a      	bne.n	8018b2c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018b16:	45c1      	cmp	r9, r8
 8018b18:	bf38      	it	cc
 8018b1a:	46c1      	movcc	r9, r8
 8018b1c:	f04f 0800 	mov.w	r8, #0
 8018b20:	2c00      	cmp	r4, #0
 8018b22:	d1e5      	bne.n	8018af0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018b24:	4648      	mov	r0, r9
 8018b26:	b01d      	add	sp, #116	; 0x74
 8018b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b2c:	9a02      	ldr	r2, [sp, #8]
 8018b2e:	2a00      	cmp	r2, #0
 8018b30:	d0de      	beq.n	8018af0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018b32:	7b57      	ldrb	r7, [r2, #13]
 8018b34:	6833      	ldr	r3, [r6, #0]
 8018b36:	007f      	lsls	r7, r7, #1
 8018b38:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018b3c:	7a97      	ldrb	r7, [r2, #10]
 8018b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b40:	4307      	orrs	r7, r0
 8018b42:	4629      	mov	r1, r5
 8018b44:	4630      	mov	r0, r6
 8018b46:	8894      	ldrh	r4, [r2, #4]
 8018b48:	4798      	blx	r3
 8018b4a:	4438      	add	r0, r7
 8018b4c:	4480      	add	r8, r0
 8018b4e:	fa1f f888 	uxth.w	r8, r8
 8018b52:	e7e5      	b.n	8018b20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018b54 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018b54:	b508      	push	{r3, lr}
 8018b56:	6803      	ldr	r3, [r0, #0]
 8018b58:	68db      	ldr	r3, [r3, #12]
 8018b5a:	4798      	blx	r3
 8018b5c:	b128      	cbz	r0, 8018b6a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018b5e:	7b43      	ldrb	r3, [r0, #13]
 8018b60:	7a80      	ldrb	r0, [r0, #10]
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b68:	4318      	orrs	r0, r3
 8018b6a:	bd08      	pop	{r3, pc}

08018b6c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018b6c:	b40e      	push	{r1, r2, r3}
 8018b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b70:	4605      	mov	r5, r0
 8018b72:	b09e      	sub	sp, #120	; 0x78
 8018b74:	ab23      	add	r3, sp, #140	; 0x8c
 8018b76:	f853 4b04 	ldr.w	r4, [r3], #4
 8018b7a:	a805      	add	r0, sp, #20
 8018b7c:	9303      	str	r3, [sp, #12]
 8018b7e:	f000 fdbe 	bl	80196fe <_ZN8touchgfx12TextProviderC1Ev>
 8018b82:	682b      	ldr	r3, [r5, #0]
 8018b84:	4628      	mov	r0, r5
 8018b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b88:	4798      	blx	r3
 8018b8a:	682b      	ldr	r3, [r5, #0]
 8018b8c:	4606      	mov	r6, r0
 8018b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b90:	4628      	mov	r0, r5
 8018b92:	4798      	blx	r3
 8018b94:	4621      	mov	r1, r4
 8018b96:	2400      	movs	r4, #0
 8018b98:	4633      	mov	r3, r6
 8018b9a:	9000      	str	r0, [sp, #0]
 8018b9c:	9a03      	ldr	r2, [sp, #12]
 8018b9e:	ae1e      	add	r6, sp, #120	; 0x78
 8018ba0:	a805      	add	r0, sp, #20
 8018ba2:	f000 fdff 	bl	80197a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ba6:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018baa:	4633      	mov	r3, r6
 8018bac:	462a      	mov	r2, r5
 8018bae:	4621      	mov	r1, r4
 8018bb0:	a805      	add	r0, sp, #20
 8018bb2:	f001 f8e7 	bl	8019d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018bb6:	b1f0      	cbz	r0, 8018bf6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8018bb8:	280a      	cmp	r0, #10
 8018bba:	d018      	beq.n	8018bee <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018bbc:	9f04      	ldr	r7, [sp, #16]
 8018bbe:	b1b7      	cbz	r7, 8018bee <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018bc0:	7b78      	ldrb	r0, [r7, #13]
 8018bc2:	7a3b      	ldrb	r3, [r7, #8]
 8018bc4:	00c1      	lsls	r1, r0, #3
 8018bc6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018bca:	4319      	orrs	r1, r3
 8018bcc:	0643      	lsls	r3, r0, #25
 8018bce:	bf44      	itt	mi
 8018bd0:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018bd4:	b219      	sxthmi	r1, r3
 8018bd6:	0100      	lsls	r0, r0, #4
 8018bd8:	79fb      	ldrb	r3, [r7, #7]
 8018bda:	88aa      	ldrh	r2, [r5, #4]
 8018bdc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018be0:	4303      	orrs	r3, r0
 8018be2:	4413      	add	r3, r2
 8018be4:	1a5b      	subs	r3, r3, r1
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	42a3      	cmp	r3, r4
 8018bea:	bfc8      	it	gt
 8018bec:	b21c      	sxthgt	r4, r3
 8018bee:	4633      	mov	r3, r6
 8018bf0:	462a      	mov	r2, r5
 8018bf2:	2100      	movs	r1, #0
 8018bf4:	e7dc      	b.n	8018bb0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018bf6:	b2a0      	uxth	r0, r4
 8018bf8:	b01e      	add	sp, #120	; 0x78
 8018bfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018bfe:	b003      	add	sp, #12
 8018c00:	4770      	bx	lr

08018c02 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018c02:	b40e      	push	{r1, r2, r3}
 8018c04:	b570      	push	{r4, r5, r6, lr}
 8018c06:	4604      	mov	r4, r0
 8018c08:	b09d      	sub	sp, #116	; 0x74
 8018c0a:	ab21      	add	r3, sp, #132	; 0x84
 8018c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c10:	a803      	add	r0, sp, #12
 8018c12:	9302      	str	r3, [sp, #8]
 8018c14:	f000 fd73 	bl	80196fe <_ZN8touchgfx12TextProviderC1Ev>
 8018c18:	6823      	ldr	r3, [r4, #0]
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c1e:	4798      	blx	r3
 8018c20:	6823      	ldr	r3, [r4, #0]
 8018c22:	4606      	mov	r6, r0
 8018c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c26:	4620      	mov	r0, r4
 8018c28:	4798      	blx	r3
 8018c2a:	4633      	mov	r3, r6
 8018c2c:	9000      	str	r0, [sp, #0]
 8018c2e:	9a02      	ldr	r2, [sp, #8]
 8018c30:	4629      	mov	r1, r5
 8018c32:	a803      	add	r0, sp, #12
 8018c34:	f000 fdb6 	bl	80197a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018c38:	a803      	add	r0, sp, #12
 8018c3a:	f001 f925 	bl	8019e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c3e:	2401      	movs	r4, #1
 8018c40:	b2a3      	uxth	r3, r4
 8018c42:	b140      	cbz	r0, 8018c56 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8018c44:	280a      	cmp	r0, #10
 8018c46:	bf08      	it	eq
 8018c48:	3301      	addeq	r3, #1
 8018c4a:	a803      	add	r0, sp, #12
 8018c4c:	bf08      	it	eq
 8018c4e:	b21c      	sxtheq	r4, r3
 8018c50:	f001 f91a 	bl	8019e88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c54:	e7f4      	b.n	8018c40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018c56:	4618      	mov	r0, r3
 8018c58:	b01d      	add	sp, #116	; 0x74
 8018c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c5e:	b003      	add	sp, #12
 8018c60:	4770      	bx	lr

08018c62 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018c62:	b40e      	push	{r1, r2, r3}
 8018c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	b09e      	sub	sp, #120	; 0x78
 8018c6a:	ab23      	add	r3, sp, #140	; 0x8c
 8018c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c70:	a805      	add	r0, sp, #20
 8018c72:	9303      	str	r3, [sp, #12]
 8018c74:	f000 fd43 	bl	80196fe <_ZN8touchgfx12TextProviderC1Ev>
 8018c78:	6823      	ldr	r3, [r4, #0]
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c7e:	4798      	blx	r3
 8018c80:	6823      	ldr	r3, [r4, #0]
 8018c82:	4606      	mov	r6, r0
 8018c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c86:	4620      	mov	r0, r4
 8018c88:	4798      	blx	r3
 8018c8a:	4633      	mov	r3, r6
 8018c8c:	4629      	mov	r1, r5
 8018c8e:	9000      	str	r0, [sp, #0]
 8018c90:	9a03      	ldr	r2, [sp, #12]
 8018c92:	a805      	add	r0, sp, #20
 8018c94:	f000 fd86 	bl	80197a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018c98:	2100      	movs	r1, #0
 8018c9a:	ad1e      	add	r5, sp, #120	; 0x78
 8018c9c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018ca0:	462b      	mov	r3, r5
 8018ca2:	4622      	mov	r2, r4
 8018ca4:	a805      	add	r0, sp, #20
 8018ca6:	f001 f86d 	bl	8019d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018caa:	26ff      	movs	r6, #255	; 0xff
 8018cac:	b1d8      	cbz	r0, 8018ce6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8018cae:	280a      	cmp	r0, #10
 8018cb0:	d012      	beq.n	8018cd8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018cb2:	9804      	ldr	r0, [sp, #16]
 8018cb4:	b180      	cbz	r0, 8018cd8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018cb6:	7b47      	ldrb	r7, [r0, #13]
 8018cb8:	7922      	ldrb	r2, [r4, #4]
 8018cba:	00fb      	lsls	r3, r7, #3
 8018cbc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018cc0:	7a03      	ldrb	r3, [r0, #8]
 8018cc2:	430b      	orrs	r3, r1
 8018cc4:	0679      	lsls	r1, r7, #25
 8018cc6:	bf44      	itt	mi
 8018cc8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018ccc:	b21b      	sxthmi	r3, r3
 8018cce:	1ad3      	subs	r3, r2, r3
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	429e      	cmp	r6, r3
 8018cd4:	bf28      	it	cs
 8018cd6:	461e      	movcs	r6, r3
 8018cd8:	462b      	mov	r3, r5
 8018cda:	4622      	mov	r2, r4
 8018cdc:	2100      	movs	r1, #0
 8018cde:	a805      	add	r0, sp, #20
 8018ce0:	f001 f850 	bl	8019d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ce4:	e7e2      	b.n	8018cac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8018ce6:	4630      	mov	r0, r6
 8018ce8:	b01e      	add	sp, #120	; 0x78
 8018cea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018cee:	b003      	add	sp, #12
 8018cf0:	4770      	bx	lr

08018cf2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018cf2:	b513      	push	{r0, r1, r4, lr}
 8018cf4:	2400      	movs	r4, #0
 8018cf6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018cfa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018cfe:	6803      	ldr	r3, [r0, #0]
 8018d00:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018d04:	9400      	str	r4, [sp, #0]
 8018d06:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018d0a:	691b      	ldr	r3, [r3, #16]
 8018d0c:	4669      	mov	r1, sp
 8018d0e:	4798      	blx	r3
 8018d10:	b002      	add	sp, #8
 8018d12:	bd10      	pop	{r4, pc}

08018d14 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018d14:	b538      	push	{r3, r4, r5, lr}
 8018d16:	460c      	mov	r4, r1
 8018d18:	4605      	mov	r5, r0
 8018d1a:	680b      	ldr	r3, [r1, #0]
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	4798      	blx	r3
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	4620      	mov	r0, r4
 8018d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d26:	4629      	mov	r1, r5
 8018d28:	4798      	blx	r3
 8018d2a:	4628      	mov	r0, r5
 8018d2c:	bd38      	pop	{r3, r4, r5, pc}

08018d2e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018d2e:	b410      	push	{r4}
 8018d30:	880a      	ldrh	r2, [r1, #0]
 8018d32:	8884      	ldrh	r4, [r0, #4]
 8018d34:	4422      	add	r2, r4
 8018d36:	800a      	strh	r2, [r1, #0]
 8018d38:	88c4      	ldrh	r4, [r0, #6]
 8018d3a:	884a      	ldrh	r2, [r1, #2]
 8018d3c:	4422      	add	r2, r4
 8018d3e:	804a      	strh	r2, [r1, #2]
 8018d40:	6940      	ldr	r0, [r0, #20]
 8018d42:	b120      	cbz	r0, 8018d4e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018d44:	6803      	ldr	r3, [r0, #0]
 8018d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d4c:	4718      	bx	r3
 8018d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d52:	4770      	bx	lr

08018d54 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018d54:	b570      	push	{r4, r5, r6, lr}
 8018d56:	460c      	mov	r4, r1
 8018d58:	8882      	ldrh	r2, [r0, #4]
 8018d5a:	880b      	ldrh	r3, [r1, #0]
 8018d5c:	4605      	mov	r5, r0
 8018d5e:	4413      	add	r3, r2
 8018d60:	800b      	strh	r3, [r1, #0]
 8018d62:	88c2      	ldrh	r2, [r0, #6]
 8018d64:	884b      	ldrh	r3, [r1, #2]
 8018d66:	4413      	add	r3, r2
 8018d68:	804b      	strh	r3, [r1, #2]
 8018d6a:	1d01      	adds	r1, r0, #4
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f7fb f8e3 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8018d72:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	dd0b      	ble.n	8018d92 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018d7a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	dd07      	ble.n	8018d92 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018d82:	6968      	ldr	r0, [r5, #20]
 8018d84:	b128      	cbz	r0, 8018d92 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018d86:	6803      	ldr	r3, [r0, #0]
 8018d88:	4621      	mov	r1, r4
 8018d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d90:	4718      	bx	r3
 8018d92:	bd70      	pop	{r4, r5, r6, pc}

08018d94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018d94:	b570      	push	{r4, r5, r6, lr}
 8018d96:	460c      	mov	r4, r1
 8018d98:	8882      	ldrh	r2, [r0, #4]
 8018d9a:	880b      	ldrh	r3, [r1, #0]
 8018d9c:	4605      	mov	r5, r0
 8018d9e:	4413      	add	r3, r2
 8018da0:	800b      	strh	r3, [r1, #0]
 8018da2:	88c2      	ldrh	r2, [r0, #6]
 8018da4:	884b      	ldrh	r3, [r1, #2]
 8018da6:	4413      	add	r3, r2
 8018da8:	804b      	strh	r3, [r1, #2]
 8018daa:	1d01      	adds	r1, r0, #4
 8018dac:	4620      	mov	r0, r4
 8018dae:	f7fb f8c3 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8018db2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	dd18      	ble.n	8018dec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018dba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	dd14      	ble.n	8018dec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018dc2:	6968      	ldr	r0, [r5, #20]
 8018dc4:	b128      	cbz	r0, 8018dd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018dc6:	6803      	ldr	r3, [r0, #0]
 8018dc8:	4621      	mov	r1, r4
 8018dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dce:	691b      	ldr	r3, [r3, #16]
 8018dd0:	4718      	bx	r3
 8018dd2:	4b07      	ldr	r3, [pc, #28]	; (8018df0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	3304      	adds	r3, #4
 8018dd8:	429d      	cmp	r5, r3
 8018dda:	d107      	bne.n	8018dec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018ddc:	f7fe fff2 	bl	8017dc4 <_ZN8touchgfx11Application11getInstanceEv>
 8018de0:	6821      	ldr	r1, [r4, #0]
 8018de2:	6862      	ldr	r2, [r4, #4]
 8018de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018de8:	f7ff b862 	b.w	8017eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018dec:	bd70      	pop	{r4, r5, r6, pc}
 8018dee:	bf00      	nop
 8018df0:	2004f738 	.word	0x2004f738

08018df4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	4604      	mov	r4, r0
 8018df8:	4616      	mov	r6, r2
 8018dfa:	460d      	mov	r5, r1
 8018dfc:	b901      	cbnz	r1, 8018e00 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018dfe:	b192      	cbz	r2, 8018e26 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018e00:	6823      	ldr	r3, [r4, #0]
 8018e02:	4620      	mov	r0, r4
 8018e04:	699b      	ldr	r3, [r3, #24]
 8018e06:	4798      	blx	r3
 8018e08:	88e2      	ldrh	r2, [r4, #6]
 8018e0a:	88a1      	ldrh	r1, [r4, #4]
 8018e0c:	4432      	add	r2, r6
 8018e0e:	4429      	add	r1, r5
 8018e10:	4620      	mov	r0, r4
 8018e12:	b212      	sxth	r2, r2
 8018e14:	b209      	sxth	r1, r1
 8018e16:	f7f5 fb92 	bl	800e53e <_ZN8touchgfx8Drawable5setXYEss>
 8018e1a:	6823      	ldr	r3, [r4, #0]
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e22:	699b      	ldr	r3, [r3, #24]
 8018e24:	4718      	bx	r3
 8018e26:	bd70      	pop	{r4, r5, r6, pc}

08018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018e28:	b510      	push	{r4, lr}
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	4608      	mov	r0, r1
 8018e30:	8023      	strh	r3, [r4, #0]
 8018e32:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018e36:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018e3a:	8063      	strh	r3, [r4, #2]
 8018e3c:	6803      	ldr	r3, [r0, #0]
 8018e3e:	80a1      	strh	r1, [r4, #4]
 8018e40:	80e2      	strh	r2, [r4, #6]
 8018e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e44:	4621      	mov	r1, r4
 8018e46:	4798      	blx	r3
 8018e48:	4620      	mov	r0, r4
 8018e4a:	bd10      	pop	{r4, pc}

08018e4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018e4c:	b530      	push	{r4, r5, lr}
 8018e4e:	8083      	strh	r3, [r0, #4]
 8018e50:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018e54:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018e58:	7183      	strb	r3, [r0, #6]
 8018e5a:	79c3      	ldrb	r3, [r0, #7]
 8018e5c:	6101      	str	r1, [r0, #16]
 8018e5e:	f365 0306 	bfi	r3, r5, #0, #7
 8018e62:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018e66:	8282      	strh	r2, [r0, #20]
 8018e68:	f365 13c7 	bfi	r3, r5, #7, #1
 8018e6c:	71c3      	strb	r3, [r0, #7]
 8018e6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018e72:	7203      	strb	r3, [r0, #8]
 8018e74:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018e78:	7243      	strb	r3, [r0, #9]
 8018e7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018e7e:	8143      	strh	r3, [r0, #10]
 8018e80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018e84:	8183      	strh	r3, [r0, #12]
 8018e86:	4b01      	ldr	r3, [pc, #4]	; (8018e8c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018e88:	6003      	str	r3, [r0, #0]
 8018e8a:	bd30      	pop	{r4, r5, pc}
 8018e8c:	08029ad0 	.word	0x08029ad0

08018e90 <_ZNK8touchgfx9ConstFont4findEt>:
 8018e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e92:	6904      	ldr	r4, [r0, #16]
 8018e94:	b3bc      	cbz	r4, 8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e96:	88a3      	ldrh	r3, [r4, #4]
 8018e98:	8a82      	ldrh	r2, [r0, #20]
 8018e9a:	1acb      	subs	r3, r1, r3
 8018e9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018ea0:	d431      	bmi.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ea2:	4293      	cmp	r3, r2
 8018ea4:	dd0c      	ble.n	8018ec0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018ea6:	230e      	movs	r3, #14
 8018ea8:	fb03 4302 	mla	r3, r3, r2, r4
 8018eac:	889b      	ldrh	r3, [r3, #4]
 8018eae:	1a5b      	subs	r3, r3, r1
 8018eb0:	1ad3      	subs	r3, r2, r3
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	db27      	blt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	bfbc      	itt	lt
 8018eba:	2302      	movlt	r3, #2
 8018ebc:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018ec0:	2500      	movs	r5, #0
 8018ec2:	260e      	movs	r6, #14
 8018ec4:	4295      	cmp	r5, r2
 8018ec6:	dc1e      	bgt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ec8:	fb06 4003 	mla	r0, r6, r3, r4
 8018ecc:	8887      	ldrh	r7, [r0, #4]
 8018ece:	42b9      	cmp	r1, r7
 8018ed0:	d01a      	beq.n	8018f08 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018ed2:	d20d      	bcs.n	8018ef0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018ed4:	1e5a      	subs	r2, r3, #1
 8018ed6:	4295      	cmp	r5, r2
 8018ed8:	dc15      	bgt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018eda:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018ede:	1a5b      	subs	r3, r3, r1
 8018ee0:	1ad3      	subs	r3, r2, r3
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	db0f      	blt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ee6:	429d      	cmp	r5, r3
 8018ee8:	ddec      	ble.n	8018ec4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018eea:	1953      	adds	r3, r2, r5
 8018eec:	105b      	asrs	r3, r3, #1
 8018eee:	e7e9      	b.n	8018ec4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018ef0:	1c5d      	adds	r5, r3, #1
 8018ef2:	42aa      	cmp	r2, r5
 8018ef4:	db07      	blt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ef6:	8a43      	ldrh	r3, [r0, #18]
 8018ef8:	1acb      	subs	r3, r1, r3
 8018efa:	442b      	add	r3, r5
 8018efc:	429d      	cmp	r5, r3
 8018efe:	dc02      	bgt.n	8018f06 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018f00:	429a      	cmp	r2, r3
 8018f02:	dadf      	bge.n	8018ec4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018f04:	e7f1      	b.n	8018eea <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018f06:	2000      	movs	r0, #0
 8018f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018f0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	4617      	mov	r7, r2
 8018f10:	461e      	mov	r6, r3
 8018f12:	b911      	cbnz	r1, 8018f1a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018f14:	2500      	movs	r5, #0
 8018f16:	4628      	mov	r0, r5
 8018f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f1a:	290a      	cmp	r1, #10
 8018f1c:	d0fa      	beq.n	8018f14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f1e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018f22:	4291      	cmp	r1, r2
 8018f24:	d0f6      	beq.n	8018f14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f26:	f242 020b 	movw	r2, #8203	; 0x200b
 8018f2a:	4291      	cmp	r1, r2
 8018f2c:	d0f2      	beq.n	8018f14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f2e:	f7ff ffaf 	bl	8018e90 <_ZNK8touchgfx9ConstFont4findEt>
 8018f32:	4605      	mov	r5, r0
 8018f34:	b950      	cbnz	r0, 8018f4c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018f36:	6823      	ldr	r3, [r4, #0]
 8018f38:	4620      	mov	r0, r4
 8018f3a:	691b      	ldr	r3, [r3, #16]
 8018f3c:	4798      	blx	r3
 8018f3e:	4601      	mov	r1, r0
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7ff ffa5 	bl	8018e90 <_ZNK8touchgfx9ConstFont4findEt>
 8018f46:	4605      	mov	r5, r0
 8018f48:	2800      	cmp	r0, #0
 8018f4a:	d0e3      	beq.n	8018f14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f4c:	6823      	ldr	r3, [r4, #0]
 8018f4e:	4629      	mov	r1, r5
 8018f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f52:	4620      	mov	r0, r4
 8018f54:	4798      	blx	r3
 8018f56:	6038      	str	r0, [r7, #0]
 8018f58:	6823      	ldr	r3, [r4, #0]
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f5e:	4798      	blx	r3
 8018f60:	7030      	strb	r0, [r6, #0]
 8018f62:	e7d8      	b.n	8018f16 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018f64 <_ZN8touchgfx4clzuEm>:
 8018f64:	4603      	mov	r3, r0
 8018f66:	b1c8      	cbz	r0, 8018f9c <_ZN8touchgfx4clzuEm+0x38>
 8018f68:	0c02      	lsrs	r2, r0, #16
 8018f6a:	0412      	lsls	r2, r2, #16
 8018f6c:	b9a2      	cbnz	r2, 8018f98 <_ZN8touchgfx4clzuEm+0x34>
 8018f6e:	0403      	lsls	r3, r0, #16
 8018f70:	2010      	movs	r0, #16
 8018f72:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018f76:	bf04      	itt	eq
 8018f78:	021b      	lsleq	r3, r3, #8
 8018f7a:	3008      	addeq	r0, #8
 8018f7c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018f80:	bf04      	itt	eq
 8018f82:	011b      	lsleq	r3, r3, #4
 8018f84:	3004      	addeq	r0, #4
 8018f86:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018f8a:	bf04      	itt	eq
 8018f8c:	009b      	lsleq	r3, r3, #2
 8018f8e:	3002      	addeq	r0, #2
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	db04      	blt.n	8018f9e <_ZN8touchgfx4clzuEm+0x3a>
 8018f94:	3001      	adds	r0, #1
 8018f96:	4770      	bx	lr
 8018f98:	2000      	movs	r0, #0
 8018f9a:	e7ea      	b.n	8018f72 <_ZN8touchgfx4clzuEm+0xe>
 8018f9c:	2020      	movs	r0, #32
 8018f9e:	4770      	bx	lr

08018fa0 <_ZN8touchgfx7muldivuEmmmRm>:
 8018fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa4:	4680      	mov	r8, r0
 8018fa6:	460f      	mov	r7, r1
 8018fa8:	4615      	mov	r5, r2
 8018faa:	461e      	mov	r6, r3
 8018fac:	f7ff ffda 	bl	8018f64 <_ZN8touchgfx4clzuEm>
 8018fb0:	b998      	cbnz	r0, 8018fda <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8018fb2:	4608      	mov	r0, r1
 8018fb4:	f7ff ffd6 	bl	8018f64 <_ZN8touchgfx4clzuEm>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	dd08      	ble.n	8018fce <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018fbc:	4633      	mov	r3, r6
 8018fbe:	462a      	mov	r2, r5
 8018fc0:	4641      	mov	r1, r8
 8018fc2:	4638      	mov	r0, r7
 8018fc4:	f7ff ffec 	bl	8018fa0 <_ZN8touchgfx7muldivuEmmmRm>
 8018fc8:	b003      	add	sp, #12
 8018fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fce:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018fd6:	6033      	str	r3, [r6, #0]
 8018fd8:	e7f6      	b.n	8018fc8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018fda:	fa31 f900 	lsrs.w	r9, r1, r0
 8018fde:	fb01 f308 	mul.w	r3, r1, r8
 8018fe2:	d105      	bne.n	8018ff0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8018fe4:	fbb3 f0f5 	udiv	r0, r3, r5
 8018fe8:	fb05 3510 	mls	r5, r5, r0, r3
 8018fec:	6035      	str	r5, [r6, #0]
 8018fee:	e7eb      	b.n	8018fc8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	fa08 fb00 	lsl.w	fp, r8, r0
 8018ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8018ffa:	3801      	subs	r0, #1
 8018ffc:	462a      	mov	r2, r5
 8018ffe:	4633      	mov	r3, r6
 8019000:	4641      	mov	r1, r8
 8019002:	4038      	ands	r0, r7
 8019004:	f7ff ffcc 	bl	8018fa0 <_ZN8touchgfx7muldivuEmmmRm>
 8019008:	fbbb faf5 	udiv	sl, fp, r5
 801900c:	462a      	mov	r2, r5
 801900e:	4607      	mov	r7, r0
 8019010:	ab01      	add	r3, sp, #4
 8019012:	fb05 b11a 	mls	r1, r5, sl, fp
 8019016:	4648      	mov	r0, r9
 8019018:	f7ff ffc2 	bl	8018fa0 <_ZN8touchgfx7muldivuEmmmRm>
 801901c:	9b01      	ldr	r3, [sp, #4]
 801901e:	6832      	ldr	r2, [r6, #0]
 8019020:	fb09 f40a 	mul.w	r4, r9, sl
 8019024:	441a      	add	r2, r3
 8019026:	fbb2 f3f5 	udiv	r3, r2, r5
 801902a:	441c      	add	r4, r3
 801902c:	443c      	add	r4, r7
 801902e:	4420      	add	r0, r4
 8019030:	fb05 2513 	mls	r5, r5, r3, r2
 8019034:	e7da      	b.n	8018fec <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08019036 <_ZN8touchgfx6muldivElllRl>:
 8019036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019038:	2800      	cmp	r0, #0
 801903a:	bfb6      	itet	lt
 801903c:	f04f 34ff 	movlt.w	r4, #4294967295
 8019040:	2401      	movge	r4, #1
 8019042:	4240      	neglt	r0, r0
 8019044:	2900      	cmp	r1, #0
 8019046:	bfbc      	itt	lt
 8019048:	4249      	neglt	r1, r1
 801904a:	4264      	neglt	r4, r4
 801904c:	2a00      	cmp	r2, #0
 801904e:	bfb6      	itet	lt
 8019050:	4265      	neglt	r5, r4
 8019052:	4625      	movge	r5, r4
 8019054:	4252      	neglt	r2, r2
 8019056:	4288      	cmp	r0, r1
 8019058:	461e      	mov	r6, r3
 801905a:	bfc2      	ittt	gt
 801905c:	4603      	movgt	r3, r0
 801905e:	4608      	movgt	r0, r1
 8019060:	4619      	movgt	r1, r3
 8019062:	ab01      	add	r3, sp, #4
 8019064:	f7ff ff9c 	bl	8018fa0 <_ZN8touchgfx7muldivuEmmmRm>
 8019068:	9b01      	ldr	r3, [sp, #4]
 801906a:	4368      	muls	r0, r5
 801906c:	435c      	muls	r4, r3
 801906e:	6034      	str	r4, [r6, #0]
 8019070:	b002      	add	sp, #8
 8019072:	bd70      	pop	{r4, r5, r6, pc}

08019074 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019074:	2000      	movs	r0, #0
 8019076:	4770      	bx	lr

08019078 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019078:	2001      	movs	r0, #1
 801907a:	4770      	bx	lr

0801907c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801907c:	2002      	movs	r0, #2
 801907e:	4770      	bx	lr

08019080 <_ZN8touchgfx12GestureEventD1Ev>:
 8019080:	4770      	bx	lr

08019082 <_ZN8touchgfx9DragEventD1Ev>:
 8019082:	4770      	bx	lr

08019084 <_ZN8touchgfx10ClickEventD1Ev>:
 8019084:	4770      	bx	lr

08019086 <_ZN8touchgfx10ClickEventD0Ev>:
 8019086:	b510      	push	{r4, lr}
 8019088:	4604      	mov	r4, r0
 801908a:	210c      	movs	r1, #12
 801908c:	f00d fba2 	bl	80267d4 <_ZdlPvj>
 8019090:	4620      	mov	r0, r4
 8019092:	bd10      	pop	{r4, pc}

08019094 <_ZN8touchgfx9DragEventD0Ev>:
 8019094:	b510      	push	{r4, lr}
 8019096:	4604      	mov	r4, r0
 8019098:	2110      	movs	r1, #16
 801909a:	f00d fb9b 	bl	80267d4 <_ZdlPvj>
 801909e:	4620      	mov	r0, r4
 80190a0:	bd10      	pop	{r4, pc}

080190a2 <_ZN8touchgfx12GestureEventD0Ev>:
 80190a2:	b510      	push	{r4, lr}
 80190a4:	4604      	mov	r4, r0
 80190a6:	210c      	movs	r1, #12
 80190a8:	f00d fb94 	bl	80267d4 <_ZdlPvj>
 80190ac:	4620      	mov	r0, r4
 80190ae:	bd10      	pop	{r4, pc}

080190b0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80190b0:	b530      	push	{r4, r5, lr}
 80190b2:	460d      	mov	r5, r1
 80190b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80190b6:	b087      	sub	sp, #28
 80190b8:	4604      	mov	r4, r0
 80190ba:	b301      	cbz	r1, 80190fe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80190bc:	a801      	add	r0, sp, #4
 80190be:	f7ff feb3 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80190c2:	892a      	ldrh	r2, [r5, #8]
 80190c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80190c8:	7928      	ldrb	r0, [r5, #4]
 80190ca:	1ad2      	subs	r2, r2, r3
 80190cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80190ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80190d2:	441a      	add	r2, r3
 80190d4:	896b      	ldrh	r3, [r5, #10]
 80190d6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80190da:	f88d 0010 	strb.w	r0, [sp, #16]
 80190de:	1b5b      	subs	r3, r3, r5
 80190e0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80190e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80190e4:	442b      	add	r3, r5
 80190e6:	4d07      	ldr	r5, [pc, #28]	; (8019104 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80190e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80190ec:	9503      	str	r5, [sp, #12]
 80190ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 80190f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80190f6:	6803      	ldr	r3, [r0, #0]
 80190f8:	a903      	add	r1, sp, #12
 80190fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80190fc:	4798      	blx	r3
 80190fe:	b007      	add	sp, #28
 8019100:	bd30      	pop	{r4, r5, pc}
 8019102:	bf00      	nop
 8019104:	08029b50 	.word	0x08029b50

08019108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801910c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801910e:	b08a      	sub	sp, #40	; 0x28
 8019110:	4604      	mov	r4, r0
 8019112:	460d      	mov	r5, r1
 8019114:	b113      	cbz	r3, 801911c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019116:	790b      	ldrb	r3, [r1, #4]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d044      	beq.n	80191a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801911c:	f104 0804 	add.w	r8, r4, #4
 8019120:	4641      	mov	r1, r8
 8019122:	a803      	add	r0, sp, #12
 8019124:	f7ff fe80 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019128:	792b      	ldrb	r3, [r5, #4]
 801912a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801912e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019132:	b983      	cbnz	r3, 8019156 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019134:	892a      	ldrh	r2, [r5, #8]
 8019136:	88e9      	ldrh	r1, [r5, #6]
 8019138:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801913c:	1b92      	subs	r2, r2, r6
 801913e:	1bc9      	subs	r1, r1, r7
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8019146:	9300      	str	r3, [sp, #0]
 8019148:	b212      	sxth	r2, r2
 801914a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801914e:	b209      	sxth	r1, r1
 8019150:	4640      	mov	r0, r8
 8019152:	f7fa fe11 	bl	8013d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019158:	b329      	cbz	r1, 80191a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801915a:	a805      	add	r0, sp, #20
 801915c:	f7ff fe64 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019160:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019164:	792b      	ldrb	r3, [r5, #4]
 8019166:	1abf      	subs	r7, r7, r2
 8019168:	88ea      	ldrh	r2, [r5, #6]
 801916a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801916c:	4417      	add	r7, r2
 801916e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8019170:	f88d 3020 	strb.w	r3, [sp, #32]
 8019174:	4417      	add	r7, r2
 8019176:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801917a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801917e:	1ab6      	subs	r6, r6, r2
 8019180:	892a      	ldrh	r2, [r5, #8]
 8019182:	a907      	add	r1, sp, #28
 8019184:	4416      	add	r6, r2
 8019186:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019188:	4416      	add	r6, r2
 801918a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801918e:	2600      	movs	r6, #0
 8019190:	4a06      	ldr	r2, [pc, #24]	; (80191ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019192:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019196:	9207      	str	r2, [sp, #28]
 8019198:	6803      	ldr	r3, [r0, #0]
 801919a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801919c:	4798      	blx	r3
 801919e:	792b      	ldrb	r3, [r5, #4]
 80191a0:	b10b      	cbz	r3, 80191a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80191a2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80191a6:	b00a      	add	sp, #40	; 0x28
 80191a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ac:	08029b28 	.word	0x08029b28

080191b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80191b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b4:	460c      	mov	r4, r1
 80191b6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80191b8:	b088      	sub	sp, #32
 80191ba:	4605      	mov	r5, r0
 80191bc:	2900      	cmp	r1, #0
 80191be:	d06d      	beq.n	801929c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80191c0:	4668      	mov	r0, sp
 80191c2:	f7ff fe31 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191c6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80191c8:	88e3      	ldrh	r3, [r4, #6]
 80191ca:	f9bd 8000 	ldrsh.w	r8, [sp]
 80191ce:	440b      	add	r3, r1
 80191d0:	b21b      	sxth	r3, r3
 80191d2:	4543      	cmp	r3, r8
 80191d4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80191d8:	db31      	blt.n	801923e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80191da:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80191de:	44c4      	add	ip, r8
 80191e0:	fa0f fc8c 	sxth.w	ip, ip
 80191e4:	4563      	cmp	r3, ip
 80191e6:	da2a      	bge.n	801923e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80191e8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80191ea:	8926      	ldrh	r6, [r4, #8]
 80191ec:	4416      	add	r6, r2
 80191ee:	b236      	sxth	r6, r6
 80191f0:	42be      	cmp	r6, r7
 80191f2:	db24      	blt.n	801923e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80191f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80191f8:	4438      	add	r0, r7
 80191fa:	b200      	sxth	r0, r0
 80191fc:	4286      	cmp	r6, r0
 80191fe:	da1e      	bge.n	801923e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019200:	8963      	ldrh	r3, [r4, #10]
 8019202:	4419      	add	r1, r3
 8019204:	b209      	sxth	r1, r1
 8019206:	4541      	cmp	r1, r8
 8019208:	db08      	blt.n	801921c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801920a:	4561      	cmp	r1, ip
 801920c:	da06      	bge.n	801921c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801920e:	89a3      	ldrh	r3, [r4, #12]
 8019210:	441a      	add	r2, r3
 8019212:	b212      	sxth	r2, r2
 8019214:	42ba      	cmp	r2, r7
 8019216:	db01      	blt.n	801921c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019218:	4282      	cmp	r2, r0
 801921a:	db10      	blt.n	801923e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801921c:	4b21      	ldr	r3, [pc, #132]	; (80192a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801921e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019220:	9304      	str	r3, [sp, #16]
 8019222:	2302      	movs	r3, #2
 8019224:	f88d 3014 	strb.w	r3, [sp, #20]
 8019228:	2300      	movs	r3, #0
 801922a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801922e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019232:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019236:	6803      	ldr	r3, [r0, #0]
 8019238:	a904      	add	r1, sp, #16
 801923a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801923c:	4798      	blx	r3
 801923e:	1d29      	adds	r1, r5, #4
 8019240:	a802      	add	r0, sp, #8
 8019242:	f7ff fdf1 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019246:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801924a:	88e0      	ldrh	r0, [r4, #6]
 801924c:	eba3 0808 	sub.w	r8, r3, r8
 8019250:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019254:	7921      	ldrb	r1, [r4, #4]
 8019256:	1bdf      	subs	r7, r3, r7
 8019258:	b2bb      	uxth	r3, r7
 801925a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801925e:	fa1f f888 	uxth.w	r8, r8
 8019262:	8922      	ldrh	r2, [r4, #8]
 8019264:	8967      	ldrh	r7, [r4, #10]
 8019266:	89a4      	ldrh	r4, [r4, #12]
 8019268:	4440      	add	r0, r8
 801926a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801926c:	4460      	add	r0, ip
 801926e:	441a      	add	r2, r3
 8019270:	44b8      	add	r8, r7
 8019272:	4423      	add	r3, r4
 8019274:	4c0c      	ldr	r4, [pc, #48]	; (80192a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019276:	f8ad 0016 	strh.w	r0, [sp, #22]
 801927a:	4433      	add	r3, r6
 801927c:	4432      	add	r2, r6
 801927e:	44e0      	add	r8, ip
 8019280:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019282:	f88d 1014 	strb.w	r1, [sp, #20]
 8019286:	9404      	str	r4, [sp, #16]
 8019288:	f8ad 2018 	strh.w	r2, [sp, #24]
 801928c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019290:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019294:	6803      	ldr	r3, [r0, #0]
 8019296:	a904      	add	r1, sp, #16
 8019298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801929a:	4798      	blx	r3
 801929c:	b008      	add	sp, #32
 801929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192a2:	bf00      	nop
 80192a4:	08029b28 	.word	0x08029b28
 80192a8:	08029b3c 	.word	0x08029b3c

080192ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80192ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192ae:	4604      	mov	r4, r0
 80192b0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80192b4:	3201      	adds	r2, #1
 80192b6:	d112      	bne.n	80192de <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80192b8:	2500      	movs	r5, #0
 80192ba:	9500      	str	r5, [sp, #0]
 80192bc:	466d      	mov	r5, sp
 80192be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80192c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80192c6:	6803      	ldr	r3, [r0, #0]
 80192c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80192cc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80192d0:	4629      	mov	r1, r5
 80192d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d4:	4798      	blx	r3
 80192d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80192da:	e884 0003 	stmia.w	r4, {r0, r1}
 80192de:	4620      	mov	r0, r4
 80192e0:	b003      	add	sp, #12
 80192e2:	bd30      	pop	{r4, r5, pc}

080192e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80192e4:	b513      	push	{r0, r1, r4, lr}
 80192e6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80192ea:	4604      	mov	r4, r0
 80192ec:	3301      	adds	r3, #1
 80192ee:	d109      	bne.n	8019304 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80192f0:	4601      	mov	r1, r0
 80192f2:	4668      	mov	r0, sp
 80192f4:	f7ff fd98 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80192fc:	8423      	strh	r3, [r4, #32]
 80192fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019302:	8463      	strh	r3, [r4, #34]	; 0x22
 8019304:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019308:	b002      	add	sp, #8
 801930a:	bd10      	pop	{r4, pc}

0801930c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801930c:	b513      	push	{r0, r1, r4, lr}
 801930e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019312:	4604      	mov	r4, r0
 8019314:	3301      	adds	r3, #1
 8019316:	d109      	bne.n	801932c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019318:	4601      	mov	r1, r0
 801931a:	4668      	mov	r0, sp
 801931c:	f7ff fd84 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019320:	f8bd 3000 	ldrh.w	r3, [sp]
 8019324:	8423      	strh	r3, [r4, #32]
 8019326:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801932a:	8463      	strh	r3, [r4, #34]	; 0x22
 801932c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019330:	b002      	add	sp, #8
 8019332:	bd10      	pop	{r4, pc}

08019334 <_ZN8touchgfx6ScreenC1Ev>:
 8019334:	b570      	push	{r4, r5, r6, lr}
 8019336:	4605      	mov	r5, r0
 8019338:	4b16      	ldr	r3, [pc, #88]	; (8019394 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801933a:	2101      	movs	r1, #1
 801933c:	f845 3b04 	str.w	r3, [r5], #4
 8019340:	2300      	movs	r3, #0
 8019342:	4604      	mov	r4, r0
 8019344:	8103      	strh	r3, [r0, #8]
 8019346:	8143      	strh	r3, [r0, #10]
 8019348:	8183      	strh	r3, [r0, #12]
 801934a:	81c3      	strh	r3, [r0, #14]
 801934c:	8203      	strh	r3, [r0, #16]
 801934e:	8243      	strh	r3, [r0, #18]
 8019350:	8283      	strh	r3, [r0, #20]
 8019352:	82c3      	strh	r3, [r0, #22]
 8019354:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019358:	6203      	str	r3, [r0, #32]
 801935a:	8483      	strh	r3, [r0, #36]	; 0x24
 801935c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801935e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8019362:	4a0d      	ldr	r2, [pc, #52]	; (8019398 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019364:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019368:	6343      	str	r3, [r0, #52]	; 0x34
 801936a:	4b0c      	ldr	r3, [pc, #48]	; (801939c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801936c:	6042      	str	r2, [r0, #4]
 801936e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019372:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019374:	4a0a      	ldr	r2, [pc, #40]	; (80193a0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019376:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801937a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801937e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019382:	4628      	mov	r0, r5
 8019384:	4798      	blx	r3
 8019386:	6863      	ldr	r3, [r4, #4]
 8019388:	4628      	mov	r0, r5
 801938a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801938c:	4631      	mov	r1, r6
 801938e:	4798      	blx	r3
 8019390:	4620      	mov	r0, r4
 8019392:	bd70      	pop	{r4, r5, r6, pc}
 8019394:	08029b64 	.word	0x08029b64
 8019398:	08029404 	.word	0x08029404
 801939c:	2004f6ea 	.word	0x2004f6ea
 80193a0:	2004f6e8 	.word	0x2004f6e8

080193a4 <_ZN8touchgfx6Screen4drawEv>:
 80193a4:	b507      	push	{r0, r1, r2, lr}
 80193a6:	2100      	movs	r1, #0
 80193a8:	4b08      	ldr	r3, [pc, #32]	; (80193cc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80193aa:	9100      	str	r1, [sp, #0]
 80193ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193b0:	4b07      	ldr	r3, [pc, #28]	; (80193d0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80193b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80193b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193ba:	4669      	mov	r1, sp
 80193bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193c0:	6803      	ldr	r3, [r0, #0]
 80193c2:	689b      	ldr	r3, [r3, #8]
 80193c4:	4798      	blx	r3
 80193c6:	b003      	add	sp, #12
 80193c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80193cc:	2004f6e8 	.word	0x2004f6e8
 80193d0:	2004f6ea 	.word	0x2004f6ea

080193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80193d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80193dc:	b089      	sub	sp, #36	; 0x24
 80193de:	2b00      	cmp	r3, #0
 80193e0:	4680      	mov	r8, r0
 80193e2:	460c      	mov	r4, r1
 80193e4:	4615      	mov	r5, r2
 80193e6:	dd0e      	ble.n	8019406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80193e8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	dd0a      	ble.n	8019406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80193f0:	4628      	mov	r0, r5
 80193f2:	f7ff ff5b 	bl	80192ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80193f6:	4621      	mov	r1, r4
 80193f8:	f7fe fc06 	bl	8017c08 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80193fc:	69eb      	ldr	r3, [r5, #28]
 80193fe:	b928      	cbnz	r0, 801940c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019400:	461d      	mov	r5, r3
 8019402:	2b00      	cmp	r3, #0
 8019404:	d1f4      	bne.n	80193f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8019406:	b009      	add	sp, #36	; 0x24
 8019408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940c:	ae04      	add	r6, sp, #16
 801940e:	2b00      	cmp	r3, #0
 8019410:	f000 80b5 	beq.w	801957e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019414:	682b      	ldr	r3, [r5, #0]
 8019416:	4629      	mov	r1, r5
 8019418:	68db      	ldr	r3, [r3, #12]
 801941a:	a802      	add	r0, sp, #8
 801941c:	4798      	blx	r3
 801941e:	4628      	mov	r0, r5
 8019420:	f7ff ff60 	bl	80192e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019424:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019428:	4407      	add	r7, r0
 801942a:	4628      	mov	r0, r5
 801942c:	f7ff ff6e 	bl	801930c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019430:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019434:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019438:	4418      	add	r0, r3
 801943a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801943e:	4621      	mov	r1, r4
 8019440:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019444:	b23f      	sxth	r7, r7
 8019446:	4630      	mov	r0, r6
 8019448:	f8ad 2014 	strh.w	r2, [sp, #20]
 801944c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019450:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019454:	f7fa fd70 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8019458:	4628      	mov	r0, r5
 801945a:	f7ff ff27 	bl	80192ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801945e:	4602      	mov	r2, r0
 8019460:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019464:	ab06      	add	r3, sp, #24
 8019466:	e883 0003 	stmia.w	r3, {r0, r1}
 801946a:	4611      	mov	r1, r2
 801946c:	4618      	mov	r0, r3
 801946e:	f7fa fd63 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8019472:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019476:	f9b4 1000 	ldrsh.w	r1, [r4]
 801947a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801947e:	4299      	cmp	r1, r3
 8019480:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019484:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019488:	d10b      	bne.n	80194a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801948a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801948e:	4552      	cmp	r2, sl
 8019490:	d107      	bne.n	80194a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019492:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019496:	455a      	cmp	r2, fp
 8019498:	d103      	bne.n	80194a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801949a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801949e:	454a      	cmp	r2, r9
 80194a0:	d06d      	beq.n	801957e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80194a2:	f1bb 0f00 	cmp.w	fp, #0
 80194a6:	dd65      	ble.n	8019574 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80194a8:	f1b9 0f00 	cmp.w	r9, #0
 80194ac:	dd62      	ble.n	8019574 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80194ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80194b2:	fa1f f08a 	uxth.w	r0, sl
 80194b6:	4552      	cmp	r2, sl
 80194b8:	9000      	str	r0, [sp, #0]
 80194ba:	da12      	bge.n	80194e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80194bc:	9301      	str	r3, [sp, #4]
 80194be:	9b00      	ldr	r3, [sp, #0]
 80194c0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80194c4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80194c8:	1a9a      	subs	r2, r3, r2
 80194ca:	f8ad 1010 	strh.w	r1, [sp, #16]
 80194ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 80194d2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80194d6:	69ea      	ldr	r2, [r5, #28]
 80194d8:	4631      	mov	r1, r6
 80194da:	4640      	mov	r0, r8
 80194dc:	f7ff ff7a 	bl	80193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80194e0:	9b01      	ldr	r3, [sp, #4]
 80194e2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80194e6:	b29f      	uxth	r7, r3
 80194e8:	429a      	cmp	r2, r3
 80194ea:	da0d      	bge.n	8019508 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80194ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 80194f0:	1aba      	subs	r2, r7, r2
 80194f2:	f8ad a012 	strh.w	sl, [sp, #18]
 80194f6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80194fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80194fe:	69ea      	ldr	r2, [r5, #28]
 8019500:	4631      	mov	r1, r6
 8019502:	4640      	mov	r0, r8
 8019504:	f7ff ff66 	bl	80193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019508:	8822      	ldrh	r2, [r4, #0]
 801950a:	88a3      	ldrh	r3, [r4, #4]
 801950c:	445f      	add	r7, fp
 801950e:	4413      	add	r3, r2
 8019510:	b29b      	uxth	r3, r3
 8019512:	b2bf      	uxth	r7, r7
 8019514:	b23a      	sxth	r2, r7
 8019516:	b219      	sxth	r1, r3
 8019518:	4291      	cmp	r1, r2
 801951a:	dd0d      	ble.n	8019538 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801951c:	1bdb      	subs	r3, r3, r7
 801951e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019522:	f8ad a012 	strh.w	sl, [sp, #18]
 8019526:	f8ad 3014 	strh.w	r3, [sp, #20]
 801952a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801952e:	69ea      	ldr	r2, [r5, #28]
 8019530:	4631      	mov	r1, r6
 8019532:	4640      	mov	r0, r8
 8019534:	f7ff ff4e 	bl	80193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019538:	88e2      	ldrh	r2, [r4, #6]
 801953a:	8863      	ldrh	r3, [r4, #2]
 801953c:	4413      	add	r3, r2
 801953e:	9a00      	ldr	r2, [sp, #0]
 8019540:	b29b      	uxth	r3, r3
 8019542:	444a      	add	r2, r9
 8019544:	fa1f f982 	uxth.w	r9, r2
 8019548:	fa0f f289 	sxth.w	r2, r9
 801954c:	b219      	sxth	r1, r3
 801954e:	428a      	cmp	r2, r1
 8019550:	da15      	bge.n	801957e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019552:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019556:	f9b4 0000 	ldrsh.w	r0, [r4]
 801955a:	eba3 0309 	sub.w	r3, r3, r9
 801955e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019562:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019566:	f8ad 2012 	strh.w	r2, [sp, #18]
 801956a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801956e:	69ea      	ldr	r2, [r5, #28]
 8019570:	4631      	mov	r1, r6
 8019572:	e001      	b.n	8019578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019574:	4621      	mov	r1, r4
 8019576:	69ea      	ldr	r2, [r5, #28]
 8019578:	4640      	mov	r0, r8
 801957a:	f7ff ff2b 	bl	80193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801957e:	4628      	mov	r0, r5
 8019580:	f7ff fe94 	bl	80192ac <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019584:	4633      	mov	r3, r6
 8019586:	4602      	mov	r2, r0
 8019588:	6861      	ldr	r1, [r4, #4]
 801958a:	6820      	ldr	r0, [r4, #0]
 801958c:	c303      	stmia	r3!, {r0, r1}
 801958e:	4611      	mov	r1, r2
 8019590:	4630      	mov	r0, r6
 8019592:	f7fa fcd1 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 8019596:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801959a:	2b00      	cmp	r3, #0
 801959c:	f77f af33 	ble.w	8019406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80195a0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	f77f af2e 	ble.w	8019406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80195aa:	4628      	mov	r0, r5
 80195ac:	f7ff fe9a 	bl	80192e4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80195b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80195b4:	1a18      	subs	r0, r3, r0
 80195b6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80195ba:	4628      	mov	r0, r5
 80195bc:	f7ff fea6 	bl	801930c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80195c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80195c4:	4631      	mov	r1, r6
 80195c6:	1a18      	subs	r0, r3, r0
 80195c8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80195cc:	682b      	ldr	r3, [r5, #0]
 80195ce:	4628      	mov	r0, r5
 80195d0:	689b      	ldr	r3, [r3, #8]
 80195d2:	4798      	blx	r3
 80195d4:	e717      	b.n	8019406 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080195d6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80195d6:	b570      	push	{r4, r5, r6, lr}
 80195d8:	2300      	movs	r3, #0
 80195da:	460c      	mov	r4, r1
 80195dc:	b086      	sub	sp, #24
 80195de:	1d06      	adds	r6, r0, #4
 80195e0:	4631      	mov	r1, r6
 80195e2:	4605      	mov	r5, r0
 80195e4:	a802      	add	r0, sp, #8
 80195e6:	9301      	str	r3, [sp, #4]
 80195e8:	f7ff fc1e 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80195f0:	8822      	ldrh	r2, [r4, #0]
 80195f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80195f6:	1ad2      	subs	r2, r2, r3
 80195f8:	8863      	ldrh	r3, [r4, #2]
 80195fa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80195fe:	1a5b      	subs	r3, r3, r1
 8019600:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019604:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019608:	f8ad 0014 	strh.w	r0, [sp, #20]
 801960c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019610:	aa01      	add	r2, sp, #4
 8019612:	a904      	add	r1, sp, #16
 8019614:	4630      	mov	r0, r6
 8019616:	f8ad 3012 	strh.w	r3, [sp, #18]
 801961a:	f7fa fd65 	bl	80140e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801961e:	9a01      	ldr	r2, [sp, #4]
 8019620:	b11a      	cbz	r2, 801962a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019622:	4621      	mov	r1, r4
 8019624:	4628      	mov	r0, r5
 8019626:	f7ff fed5 	bl	80193d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801962a:	b006      	add	sp, #24
 801962c:	bd70      	pop	{r4, r5, r6, pc}

0801962e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801962e:	b530      	push	{r4, r5, lr}
 8019630:	4602      	mov	r2, r0
 8019632:	b085      	sub	sp, #20
 8019634:	460d      	mov	r5, r1
 8019636:	466b      	mov	r3, sp
 8019638:	4604      	mov	r4, r0
 801963a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801963e:	6851      	ldr	r1, [r2, #4]
 8019640:	c303      	stmia	r3!, {r0, r1}
 8019642:	4629      	mov	r1, r5
 8019644:	4668      	mov	r0, sp
 8019646:	f7fa fc77 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801964a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801964e:	b12b      	cbz	r3, 801965c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019650:	4669      	mov	r1, sp
 8019652:	4620      	mov	r0, r4
 8019654:	f7ff ffbf 	bl	80195d6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019658:	b005      	add	sp, #20
 801965a:	bd30      	pop	{r4, r5, pc}
 801965c:	3404      	adds	r4, #4
 801965e:	4621      	mov	r1, r4
 8019660:	a802      	add	r0, sp, #8
 8019662:	f7ff fbe1 	bl	8018e28 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019666:	f8bd 3000 	ldrh.w	r3, [sp]
 801966a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801966e:	4669      	mov	r1, sp
 8019670:	1a9b      	subs	r3, r3, r2
 8019672:	f8ad 3000 	strh.w	r3, [sp]
 8019676:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801967a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801967e:	4620      	mov	r0, r4
 8019680:	1a9b      	subs	r3, r3, r2
 8019682:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019686:	f7fa fcf6 	bl	8014076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801968a:	e7e5      	b.n	8019658 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801968c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801968c:	460b      	mov	r3, r1
 801968e:	680a      	ldr	r2, [r1, #0]
 8019690:	1d01      	adds	r1, r0, #4
 8019692:	6992      	ldr	r2, [r2, #24]
 8019694:	4618      	mov	r0, r3
 8019696:	4710      	bx	r2

08019698 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8019698:	4298      	cmp	r0, r3
 801969a:	d200      	bcs.n	801969e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801969c:	b913      	cbnz	r3, 80196a4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801969e:	440a      	add	r2, r1
 80196a0:	b210      	sxth	r0, r2
 80196a2:	4770      	bx	lr
 80196a4:	ee07 0a90 	vmov	s15, r0
 80196a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80196ac:	ee07 3a90 	vmov	s15, r3
 80196b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80196b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80196bc:	ee07 2a90 	vmov	s15, r2
 80196c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80196c4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80196c8:	ee67 5a07 	vmul.f32	s11, s14, s14
 80196cc:	ee07 1a90 	vmov	s15, r1
 80196d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80196d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80196dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80196e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80196e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e8:	bfcc      	ite	gt
 80196ea:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80196ee:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80196f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80196f6:	ee17 3a90 	vmov	r3, s15
 80196fa:	b218      	sxth	r0, r3
 80196fc:	4770      	bx	lr

080196fe <_ZN8touchgfx12TextProviderC1Ev>:
 80196fe:	b538      	push	{r3, r4, r5, lr}
 8019700:	2500      	movs	r5, #0
 8019702:	2302      	movs	r3, #2
 8019704:	4604      	mov	r4, r0
 8019706:	e9c0 5500 	strd	r5, r5, [r0]
 801970a:	7403      	strb	r3, [r0, #16]
 801970c:	6145      	str	r5, [r0, #20]
 801970e:	7605      	strb	r5, [r0, #24]
 8019710:	83c5      	strh	r5, [r0, #30]
 8019712:	8405      	strh	r5, [r0, #32]
 8019714:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019716:	8705      	strh	r5, [r0, #56]	; 0x38
 8019718:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801971a:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801971e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019722:	220e      	movs	r2, #14
 8019724:	4629      	mov	r1, r5
 8019726:	304c      	adds	r0, #76	; 0x4c
 8019728:	f00d f8fe 	bl	8026928 <memset>
 801972c:	2301      	movs	r3, #1
 801972e:	4620      	mov	r0, r4
 8019730:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019734:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019738:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801973c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019740:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019744:	f7f7 ffe0 	bl	8011708 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019748:	4620      	mov	r0, r4
 801974a:	bd38      	pop	{r3, r4, r5, pc}

0801974c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801974c:	b530      	push	{r4, r5, lr}
 801974e:	2500      	movs	r5, #0
 8019750:	2401      	movs	r4, #1
 8019752:	6843      	ldr	r3, [r0, #4]
 8019754:	b913      	cbnz	r3, 801975c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019756:	6803      	ldr	r3, [r0, #0]
 8019758:	b313      	cbz	r3, 80197a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801975a:	6043      	str	r3, [r0, #4]
 801975c:	7e03      	ldrb	r3, [r0, #24]
 801975e:	b143      	cbz	r3, 8019772 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019760:	6943      	ldr	r3, [r0, #20]
 8019762:	b12b      	cbz	r3, 8019770 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019764:	881a      	ldrh	r2, [r3, #0]
 8019766:	b11a      	cbz	r2, 8019770 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019768:	1c9a      	adds	r2, r3, #2
 801976a:	6142      	str	r2, [r0, #20]
 801976c:	8818      	ldrh	r0, [r3, #0]
 801976e:	bd30      	pop	{r4, r5, pc}
 8019770:	7605      	strb	r5, [r0, #24]
 8019772:	6843      	ldr	r3, [r0, #4]
 8019774:	8819      	ldrh	r1, [r3, #0]
 8019776:	b199      	cbz	r1, 80197a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019778:	1c9a      	adds	r2, r3, #2
 801977a:	2902      	cmp	r1, #2
 801977c:	6042      	str	r2, [r0, #4]
 801977e:	d1f5      	bne.n	801976c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019780:	7c03      	ldrb	r3, [r0, #16]
 8019782:	2b01      	cmp	r3, #1
 8019784:	d8e5      	bhi.n	8019752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019786:	1c5a      	adds	r2, r3, #1
 8019788:	7402      	strb	r2, [r0, #16]
 801978a:	3302      	adds	r3, #2
 801978c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019790:	6143      	str	r3, [r0, #20]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d0dd      	beq.n	8019752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019796:	881b      	ldrh	r3, [r3, #0]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d0da      	beq.n	8019752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801979c:	7604      	strb	r4, [r0, #24]
 801979e:	e7d8      	b.n	8019752 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80197a0:	2000      	movs	r0, #0
 80197a2:	e7e4      	b.n	801976e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080197a4 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80197a4:	6001      	str	r1, [r0, #0]
 80197a6:	2100      	movs	r1, #0
 80197a8:	b430      	push	{r4, r5}
 80197aa:	6041      	str	r1, [r0, #4]
 80197ac:	6815      	ldr	r5, [r2, #0]
 80197ae:	6085      	str	r5, [r0, #8]
 80197b0:	6852      	ldr	r2, [r2, #4]
 80197b2:	6443      	str	r3, [r0, #68]	; 0x44
 80197b4:	9b02      	ldr	r3, [sp, #8]
 80197b6:	60c2      	str	r2, [r0, #12]
 80197b8:	7401      	strb	r1, [r0, #16]
 80197ba:	6141      	str	r1, [r0, #20]
 80197bc:	7601      	strb	r1, [r0, #24]
 80197be:	8701      	strh	r1, [r0, #56]	; 0x38
 80197c0:	8401      	strh	r1, [r0, #32]
 80197c2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80197c6:	6483      	str	r3, [r0, #72]	; 0x48
 80197c8:	bc30      	pop	{r4, r5}
 80197ca:	f7f7 bf9d 	b.w	8011708 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080197ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80197ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197d0:	4605      	mov	r5, r0
 80197d2:	4608      	mov	r0, r1
 80197d4:	b1e9      	cbz	r1, 8019812 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80197d6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80197da:	460b      	mov	r3, r1
 80197dc:	4622      	mov	r2, r4
 80197de:	f101 0708 	add.w	r7, r1, #8
 80197e2:	4626      	mov	r6, r4
 80197e4:	6818      	ldr	r0, [r3, #0]
 80197e6:	6859      	ldr	r1, [r3, #4]
 80197e8:	3308      	adds	r3, #8
 80197ea:	c603      	stmia	r6!, {r0, r1}
 80197ec:	42bb      	cmp	r3, r7
 80197ee:	4634      	mov	r4, r6
 80197f0:	d1f7      	bne.n	80197e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80197f2:	6818      	ldr	r0, [r3, #0]
 80197f4:	6030      	str	r0, [r6, #0]
 80197f6:	4610      	mov	r0, r2
 80197f8:	889b      	ldrh	r3, [r3, #4]
 80197fa:	80b3      	strh	r3, [r6, #4]
 80197fc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019800:	015b      	lsls	r3, r3, #5
 8019802:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019806:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801980a:	430b      	orrs	r3, r1
 801980c:	425b      	negs	r3, r3
 801980e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019814:	b538      	push	{r3, r4, r5, lr}
 8019816:	460c      	mov	r4, r1
 8019818:	6811      	ldr	r1, [r2, #0]
 801981a:	4610      	mov	r0, r2
 801981c:	68cd      	ldr	r5, [r1, #12]
 801981e:	4619      	mov	r1, r3
 8019820:	47a8      	blx	r5
 8019822:	2800      	cmp	r0, #0
 8019824:	bf08      	it	eq
 8019826:	4620      	moveq	r0, r4
 8019828:	bd38      	pop	{r3, r4, r5, pc}
	...

0801982c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801982e:	4604      	mov	r4, r0
 8019830:	4615      	mov	r5, r2
 8019832:	4608      	mov	r0, r1
 8019834:	b93a      	cbnz	r2, 8019846 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019836:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801983a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801983e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019842:	4628      	mov	r0, r5
 8019844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019846:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801984a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801984e:	8893      	ldrh	r3, [r2, #4]
 8019850:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019854:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019858:	79ee      	ldrb	r6, [r5, #7]
 801985a:	4316      	orrs	r6, r2
 801985c:	19da      	adds	r2, r3, r7
 801985e:	b291      	uxth	r1, r2
 8019860:	291d      	cmp	r1, #29
 8019862:	b2b7      	uxth	r7, r6
 8019864:	d879      	bhi.n	801995a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019866:	2201      	movs	r2, #1
 8019868:	408a      	lsls	r2, r1
 801986a:	4974      	ldr	r1, [pc, #464]	; (8019a3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801986c:	10f6      	asrs	r6, r6, #3
 801986e:	420a      	tst	r2, r1
 8019870:	d12d      	bne.n	80198ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8019872:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019876:	d070      	beq.n	801995a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019878:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801987c:	462b      	mov	r3, r5
 801987e:	f105 0e08 	add.w	lr, r5, #8
 8019882:	4615      	mov	r5, r2
 8019884:	4694      	mov	ip, r2
 8019886:	6818      	ldr	r0, [r3, #0]
 8019888:	6859      	ldr	r1, [r3, #4]
 801988a:	3308      	adds	r3, #8
 801988c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019890:	4573      	cmp	r3, lr
 8019892:	4662      	mov	r2, ip
 8019894:	d1f6      	bne.n	8019884 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019896:	6818      	ldr	r0, [r3, #0]
 8019898:	f8cc 0000 	str.w	r0, [ip]
 801989c:	889b      	ldrh	r3, [r3, #4]
 801989e:	f8ac 3004 	strh.w	r3, [ip, #4]
 80198a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80198a6:	b2b3      	uxth	r3, r6
 80198a8:	1aca      	subs	r2, r1, r3
 80198aa:	b292      	uxth	r2, r2
 80198ac:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80198b0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80198b4:	10d2      	asrs	r2, r2, #3
 80198b6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80198ba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80198be:	4302      	orrs	r2, r0
 80198c0:	1bcf      	subs	r7, r1, r7
 80198c2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80198c6:	1afb      	subs	r3, r7, r3
 80198c8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80198cc:	e7b9      	b.n	8019842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80198ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80198d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80198d4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80198d6:	f640 6333 	movw	r3, #3635	; 0xe33
 80198da:	4299      	cmp	r1, r3
 80198dc:	d110      	bne.n	8019900 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80198de:	6803      	ldr	r3, [r0, #0]
 80198e0:	68db      	ldr	r3, [r3, #12]
 80198e2:	4798      	blx	r3
 80198e4:	7b41      	ldrb	r1, [r0, #13]
 80198e6:	00cb      	lsls	r3, r1, #3
 80198e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80198ec:	7a03      	ldrb	r3, [r0, #8]
 80198ee:	0648      	lsls	r0, r1, #25
 80198f0:	ea43 0302 	orr.w	r3, r3, r2
 80198f4:	bf44      	itt	mi
 80198f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80198fa:	b21b      	sxthmi	r3, r3
 80198fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019900:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019904:	462a      	mov	r2, r5
 8019906:	443b      	add	r3, r7
 8019908:	4433      	add	r3, r6
 801990a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801990e:	f105 0c08 	add.w	ip, r5, #8
 8019912:	4635      	mov	r5, r6
 8019914:	b29b      	uxth	r3, r3
 8019916:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801991a:	4637      	mov	r7, r6
 801991c:	6810      	ldr	r0, [r2, #0]
 801991e:	6851      	ldr	r1, [r2, #4]
 8019920:	3208      	adds	r2, #8
 8019922:	c703      	stmia	r7!, {r0, r1}
 8019924:	4562      	cmp	r2, ip
 8019926:	463e      	mov	r6, r7
 8019928:	d1f7      	bne.n	801991a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801992a:	6810      	ldr	r0, [r2, #0]
 801992c:	6038      	str	r0, [r7, #0]
 801992e:	8892      	ldrh	r2, [r2, #4]
 8019930:	80ba      	strh	r2, [r7, #4]
 8019932:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019936:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801993a:	10db      	asrs	r3, r3, #3
 801993c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019944:	4313      	orrs	r3, r2
 8019946:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801994a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801994e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019952:	1a9b      	subs	r3, r3, r2
 8019954:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019958:	e773      	b.n	8019842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801995a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801995e:	f023 0204 	bic.w	r2, r3, #4
 8019962:	428a      	cmp	r2, r1
 8019964:	d003      	beq.n	801996e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8019966:	f640 621d 	movw	r2, #3613	; 0xe1d
 801996a:	4293      	cmp	r3, r2
 801996c:	d120      	bne.n	80199b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801996e:	3b01      	subs	r3, #1
 8019970:	4602      	mov	r2, r0
 8019972:	b29b      	uxth	r3, r3
 8019974:	4629      	mov	r1, r5
 8019976:	4620      	mov	r0, r4
 8019978:	f7ff ff4c 	bl	8019814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801997c:	7b41      	ldrb	r1, [r0, #13]
 801997e:	00cb      	lsls	r3, r1, #3
 8019980:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019984:	7a03      	ldrb	r3, [r0, #8]
 8019986:	0649      	lsls	r1, r1, #25
 8019988:	ea43 0302 	orr.w	r3, r3, r2
 801998c:	bf44      	itt	mi
 801998e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019992:	b21b      	sxthmi	r3, r3
 8019994:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019998:	7b6b      	ldrb	r3, [r5, #13]
 801999a:	7aaa      	ldrb	r2, [r5, #10]
 801999c:	005b      	lsls	r3, r3, #1
 801999e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199a2:	4313      	orrs	r3, r2
 80199a4:	115a      	asrs	r2, r3, #5
 80199a6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80199aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80199ae:	e036      	b.n	8019a1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80199b0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80199b4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80199b8:	7a2a      	ldrb	r2, [r5, #8]
 80199ba:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80199be:	ea42 0201 	orr.w	r2, r2, r1
 80199c2:	f640 6109 	movw	r1, #3593	; 0xe09
 80199c6:	bf1c      	itt	ne
 80199c8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80199cc:	b212      	sxthne	r2, r2
 80199ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80199d2:	f023 0210 	bic.w	r2, r3, #16
 80199d6:	428a      	cmp	r2, r1
 80199d8:	d003      	beq.n	80199e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80199da:	f640 6213 	movw	r2, #3603	; 0xe13
 80199de:	4293      	cmp	r3, r2
 80199e0:	d12a      	bne.n	8019a38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80199e2:	7b6e      	ldrb	r6, [r5, #13]
 80199e4:	4629      	mov	r1, r5
 80199e6:	0076      	lsls	r6, r6, #1
 80199e8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80199ec:	7aae      	ldrb	r6, [r5, #10]
 80199ee:	4316      	orrs	r6, r2
 80199f0:	f640 6213 	movw	r2, #3603	; 0xe13
 80199f4:	4293      	cmp	r3, r2
 80199f6:	bf18      	it	ne
 80199f8:	f103 33ff 	addne.w	r3, r3, #4294967295
 80199fc:	4602      	mov	r2, r0
 80199fe:	bf14      	ite	ne
 8019a00:	b29b      	uxthne	r3, r3
 8019a02:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019a06:	4620      	mov	r0, r4
 8019a08:	f7ff ff04 	bl	8019814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019a0c:	7b43      	ldrb	r3, [r0, #13]
 8019a0e:	7a82      	ldrb	r2, [r0, #10]
 8019a10:	005b      	lsls	r3, r3, #1
 8019a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a16:	4313      	orrs	r3, r2
 8019a18:	1af6      	subs	r6, r6, r3
 8019a1a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019a1e:	7b69      	ldrb	r1, [r5, #13]
 8019a20:	00cb      	lsls	r3, r1, #3
 8019a22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019a26:	7a2b      	ldrb	r3, [r5, #8]
 8019a28:	4313      	orrs	r3, r2
 8019a2a:	064a      	lsls	r2, r1, #25
 8019a2c:	bf44      	itt	mi
 8019a2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a32:	b21b      	sxthmi	r3, r3
 8019a34:	1bdb      	subs	r3, r3, r7
 8019a36:	e747      	b.n	80198c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8019a38:	2300      	movs	r3, #0
 8019a3a:	e7b6      	b.n	80199aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8019a3c:	3fc00079 	.word	0x3fc00079

08019a40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a44:	4604      	mov	r4, r0
 8019a46:	b942      	cbnz	r2, 8019a5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019a4c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019a50:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019a54:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019a58:	e047      	b.n	8019aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019a5a:	7b51      	ldrb	r1, [r2, #13]
 8019a5c:	8893      	ldrh	r3, [r2, #4]
 8019a5e:	010d      	lsls	r5, r1, #4
 8019a60:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019a64:	79d5      	ldrb	r5, [r2, #7]
 8019a66:	4305      	orrs	r5, r0
 8019a68:	2d04      	cmp	r5, #4
 8019a6a:	bfcc      	ite	gt
 8019a6c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019a70:	f04f 0e01 	movle.w	lr, #1
 8019a74:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019a78:	f200 80ab 	bhi.w	8019bd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019a7c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019a80:	4283      	cmp	r3, r0
 8019a82:	d216      	bcs.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019a84:	f240 605b 	movw	r0, #1627	; 0x65b
 8019a88:	4283      	cmp	r3, r0
 8019a8a:	d859      	bhi.n	8019b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019a8c:	f240 6057 	movw	r0, #1623	; 0x657
 8019a90:	4283      	cmp	r3, r0
 8019a92:	d20e      	bcs.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019a94:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019a98:	d24a      	bcs.n	8019b30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019a9a:	f240 604e 	movw	r0, #1614	; 0x64e
 8019a9e:	4283      	cmp	r3, r0
 8019aa0:	d207      	bcs.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019aa2:	f240 601a 	movw	r0, #1562	; 0x61a
 8019aa6:	4283      	cmp	r3, r0
 8019aa8:	d02a      	beq.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019aaa:	d821      	bhi.n	8019af0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019aac:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019ab0:	d35b      	bcc.n	8019b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019ab2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019ab6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019aba:	f040 80d0 	bne.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019abe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019ac2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019ac6:	f040 80ca 	bne.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019aca:	00cb      	lsls	r3, r1, #3
 8019acc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019ad0:	7a13      	ldrb	r3, [r2, #8]
 8019ad2:	0649      	lsls	r1, r1, #25
 8019ad4:	ea43 0300 	orr.w	r3, r3, r0
 8019ad8:	bf44      	itt	mi
 8019ada:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019ade:	b21b      	sxthmi	r3, r3
 8019ae0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019ae4:	1b5d      	subs	r5, r3, r5
 8019ae6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019aea:	4610      	mov	r0, r2
 8019aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019af0:	f240 604b 	movw	r0, #1611	; 0x64b
 8019af4:	4283      	cmp	r3, r0
 8019af6:	d338      	bcc.n	8019b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019af8:	f240 604c 	movw	r0, #1612	; 0x64c
 8019afc:	4283      	cmp	r3, r0
 8019afe:	d9d8      	bls.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b00:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019b04:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019b08:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019b0c:	f040 80f2 	bne.w	8019cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019b10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019b14:	f040 80ee 	bne.w	8019cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019b18:	00cb      	lsls	r3, r1, #3
 8019b1a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019b1e:	7a13      	ldrb	r3, [r2, #8]
 8019b20:	064e      	lsls	r6, r1, #25
 8019b22:	ea43 0300 	orr.w	r3, r3, r0
 8019b26:	bf44      	itt	mi
 8019b28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b2c:	b21b      	sxthmi	r3, r3
 8019b2e:	e7d9      	b.n	8019ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019b30:	f240 6054 	movw	r0, #1620	; 0x654
 8019b34:	4283      	cmp	r3, r0
 8019b36:	d8e3      	bhi.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019b38:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019b3c:	d9e0      	bls.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019b3e:	e7b8      	b.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b40:	f240 6074 	movw	r0, #1652	; 0x674
 8019b44:	4283      	cmp	r3, r0
 8019b46:	d0b4      	beq.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b48:	d82d      	bhi.n	8019ba6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019b4a:	f240 605e 	movw	r0, #1630	; 0x65e
 8019b4e:	4283      	cmp	r3, r0
 8019b50:	d804      	bhi.n	8019b5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019b52:	f240 605d 	movw	r0, #1629	; 0x65d
 8019b56:	4283      	cmp	r3, r0
 8019b58:	d3d2      	bcc.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019b5a:	e7aa      	b.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b5c:	f240 605f 	movw	r0, #1631	; 0x65f
 8019b60:	4283      	cmp	r3, r0
 8019b62:	d0cd      	beq.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019b64:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019b68:	d0a3      	beq.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b6a:	00cb      	lsls	r3, r1, #3
 8019b6c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019b70:	7a13      	ldrb	r3, [r2, #8]
 8019b72:	0649      	lsls	r1, r1, #25
 8019b74:	ea43 0300 	orr.w	r3, r3, r0
 8019b78:	bf44      	itt	mi
 8019b7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b7e:	b21b      	sxthmi	r3, r3
 8019b80:	1b5d      	subs	r5, r3, r5
 8019b82:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019b86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019b8a:	7b53      	ldrb	r3, [r2, #13]
 8019b8c:	015b      	lsls	r3, r3, #5
 8019b8e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019b92:	7993      	ldrb	r3, [r2, #6]
 8019b94:	430b      	orrs	r3, r1
 8019b96:	2105      	movs	r1, #5
 8019b98:	005b      	lsls	r3, r3, #1
 8019b9a:	fb93 f3f1 	sdiv	r3, r3, r1
 8019b9e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019ba2:	440b      	add	r3, r1
 8019ba4:	e756      	b.n	8019a54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019ba6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019baa:	4283      	cmp	r3, r0
 8019bac:	d809      	bhi.n	8019bc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019bae:	f240 60df 	movw	r0, #1759	; 0x6df
 8019bb2:	4283      	cmp	r3, r0
 8019bb4:	f4bf af7d 	bcs.w	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019bb8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019bbc:	2b05      	cmp	r3, #5
 8019bbe:	d8d4      	bhi.n	8019b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019bc0:	e777      	b.n	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019bc2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019bc6:	4283      	cmp	r3, r0
 8019bc8:	d09a      	beq.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019bca:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019bce:	4283      	cmp	r3, r0
 8019bd0:	e7ca      	b.n	8019b68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019bd2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019bd6:	d22b      	bcs.n	8019c30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019bd8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019bdc:	4283      	cmp	r3, r0
 8019bde:	d28f      	bcs.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019be0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019be4:	4283      	cmp	r3, r0
 8019be6:	d816      	bhi.n	8019c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019be8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019bec:	4283      	cmp	r3, r0
 8019bee:	f4bf af60 	bcs.w	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019bf2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019bf6:	4283      	cmp	r3, r0
 8019bf8:	d80a      	bhi.n	8019c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019bfa:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019bfe:	4283      	cmp	r3, r0
 8019c00:	f4bf af57 	bcs.w	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c04:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019c08:	4283      	cmp	r3, r0
 8019c0a:	f43f af79 	beq.w	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c0e:	e7ac      	b.n	8019b6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019c10:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019c14:	e7f8      	b.n	8019c08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019c16:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019c1a:	4283      	cmp	r3, r0
 8019c1c:	d802      	bhi.n	8019c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019c1e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019c22:	e798      	b.n	8019b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019c24:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019c28:	4283      	cmp	r3, r0
 8019c2a:	f47f af42 	bne.w	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c2e:	e767      	b.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c30:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019c34:	4283      	cmp	r3, r0
 8019c36:	f43f af63 	beq.w	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c3a:	d802      	bhi.n	8019c42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019c3c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019c40:	e7f2      	b.n	8019c28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019c42:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019c46:	4283      	cmp	r3, r0
 8019c48:	d805      	bhi.n	8019c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019c4a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019c4e:	4283      	cmp	r3, r0
 8019c50:	f4ff af2f 	bcc.w	8019ab2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c54:	e754      	b.n	8019b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c56:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019c5a:	4283      	cmp	r3, r0
 8019c5c:	e7af      	b.n	8019bbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8019c5e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019c62:	4617      	mov	r7, r2
 8019c64:	4666      	mov	r6, ip
 8019c66:	f102 0808 	add.w	r8, r2, #8
 8019c6a:	46e6      	mov	lr, ip
 8019c6c:	6838      	ldr	r0, [r7, #0]
 8019c6e:	6879      	ldr	r1, [r7, #4]
 8019c70:	3708      	adds	r7, #8
 8019c72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019c76:	4547      	cmp	r7, r8
 8019c78:	46f4      	mov	ip, lr
 8019c7a:	d1f6      	bne.n	8019c6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019c7c:	6838      	ldr	r0, [r7, #0]
 8019c7e:	f8ce 0000 	str.w	r0, [lr]
 8019c82:	88b9      	ldrh	r1, [r7, #4]
 8019c84:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019c88:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019c8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019c90:	d009      	beq.n	8019ca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8019c92:	7b51      	ldrb	r1, [r2, #13]
 8019c94:	7992      	ldrb	r2, [r2, #6]
 8019c96:	0149      	lsls	r1, r1, #5
 8019c98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019c9c:	4311      	orrs	r1, r2
 8019c9e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019ca2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019ca6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019caa:	b2ad      	uxth	r5, r5
 8019cac:	d00d      	beq.n	8019cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8019cae:	442b      	add	r3, r5
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019cb6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019cba:	10db      	asrs	r3, r3, #3
 8019cbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019cc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019cc4:	4313      	orrs	r3, r2
 8019cc6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019cca:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019cce:	00cb      	lsls	r3, r1, #3
 8019cd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019cd4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019cd8:	064f      	lsls	r7, r1, #25
 8019cda:	ea43 0302 	orr.w	r3, r3, r2
 8019cde:	bf44      	itt	mi
 8019ce0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019ce4:	b21b      	sxthmi	r3, r3
 8019ce6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019cea:	1b5b      	subs	r3, r3, r5
 8019cec:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019cf0:	4632      	mov	r2, r6
 8019cf2:	e6fa      	b.n	8019aea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019cf4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019cf8:	4617      	mov	r7, r2
 8019cfa:	4666      	mov	r6, ip
 8019cfc:	f102 0908 	add.w	r9, r2, #8
 8019d00:	46e0      	mov	r8, ip
 8019d02:	6838      	ldr	r0, [r7, #0]
 8019d04:	6879      	ldr	r1, [r7, #4]
 8019d06:	3708      	adds	r7, #8
 8019d08:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019d0c:	454f      	cmp	r7, r9
 8019d0e:	46c4      	mov	ip, r8
 8019d10:	d1f6      	bne.n	8019d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8019d12:	6838      	ldr	r0, [r7, #0]
 8019d14:	f8c8 0000 	str.w	r0, [r8]
 8019d18:	88b9      	ldrh	r1, [r7, #4]
 8019d1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019d1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019d22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019d26:	d009      	beq.n	8019d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8019d28:	7b51      	ldrb	r1, [r2, #13]
 8019d2a:	7992      	ldrb	r2, [r2, #6]
 8019d2c:	0149      	lsls	r1, r1, #5
 8019d2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019d32:	4311      	orrs	r1, r2
 8019d34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019d38:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019d3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019d40:	d00e      	beq.n	8019d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8019d42:	eba3 030e 	sub.w	r3, r3, lr
 8019d46:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019d50:	10db      	asrs	r3, r3, #3
 8019d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019d5a:	4313      	orrs	r3, r2
 8019d5c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019d60:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019d64:	00cb      	lsls	r3, r1, #3
 8019d66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019d6a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019d6e:	0648      	lsls	r0, r1, #25
 8019d70:	ea43 0302 	orr.w	r3, r3, r2
 8019d74:	bf44      	itt	mi
 8019d76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d7a:	b21b      	sxthmi	r3, r3
 8019d7c:	1b5d      	subs	r5, r3, r5
 8019d7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019d82:	e7b5      	b.n	8019cf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08019d84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d88:	461e      	mov	r6, r3
 8019d8a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019d8c:	4604      	mov	r4, r0
 8019d8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d92:	4617      	mov	r7, r2
 8019d94:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019d98:	f7f7 fc10 	bl	80115bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019d9c:	4605      	mov	r5, r0
 8019d9e:	b918      	cbnz	r0, 8019da8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019da0:	6030      	str	r0, [r6, #0]
 8019da2:	4628      	mov	r0, r5
 8019da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019da8:	683b      	ldr	r3, [r7, #0]
 8019daa:	4601      	mov	r1, r0
 8019dac:	68db      	ldr	r3, [r3, #12]
 8019dae:	4638      	mov	r0, r7
 8019db0:	4798      	blx	r3
 8019db2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019dba:	4602      	mov	r2, r0
 8019dbc:	6030      	str	r0, [r6, #0]
 8019dbe:	d213      	bcs.n	8019de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019dc0:	4643      	mov	r3, r8
 8019dc2:	4639      	mov	r1, r7
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f7ff fe3b 	bl	8019a40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019dca:	6030      	str	r0, [r6, #0]
 8019dcc:	6833      	ldr	r3, [r6, #0]
 8019dce:	b143      	cbz	r3, 8019de2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019dd0:	7b5a      	ldrb	r2, [r3, #13]
 8019dd2:	7a9b      	ldrb	r3, [r3, #10]
 8019dd4:	0052      	lsls	r2, r2, #1
 8019dd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019dda:	4313      	orrs	r3, r2
 8019ddc:	bf0c      	ite	eq
 8019dde:	2301      	moveq	r3, #1
 8019de0:	2300      	movne	r3, #0
 8019de2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019de6:	e7dc      	b.n	8019da2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019de8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	2b7f      	cmp	r3, #127	; 0x7f
 8019df0:	d804      	bhi.n	8019dfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019df2:	4639      	mov	r1, r7
 8019df4:	4620      	mov	r0, r4
 8019df6:	f7ff fd19 	bl	801982c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019dfa:	e7e6      	b.n	8019dca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019dfc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d0e3      	beq.n	8019dcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019e04:	f640 1302 	movw	r3, #2306	; 0x902
 8019e08:	429d      	cmp	r5, r3
 8019e0a:	d1df      	bne.n	8019dcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019e0c:	4601      	mov	r1, r0
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f7ff fcdd 	bl	80197ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019e14:	e7d9      	b.n	8019dca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019e16:	b510      	push	{r4, lr}
 8019e18:	4604      	mov	r4, r0
 8019e1a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019e1e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019e20:	b1f1      	cbz	r1, 8019e60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019e22:	2b0a      	cmp	r3, #10
 8019e24:	d02f      	beq.n	8019e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019e26:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019e28:	3901      	subs	r1, #1
 8019e2a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019e2e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019e30:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019e34:	1c51      	adds	r1, r2, #1
 8019e36:	b289      	uxth	r1, r1
 8019e38:	2901      	cmp	r1, #1
 8019e3a:	bf84      	itt	hi
 8019e3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019e40:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019e42:	f103 0201 	add.w	r2, r3, #1
 8019e46:	8722      	strh	r2, [r4, #56]	; 0x38
 8019e48:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019e4a:	bf98      	it	ls
 8019e4c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019e4e:	4413      	add	r3, r2
 8019e50:	b29b      	uxth	r3, r3
 8019e52:	2b09      	cmp	r3, #9
 8019e54:	bf88      	it	hi
 8019e56:	3b0a      	subhi	r3, #10
 8019e58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e5c:	8458      	strh	r0, [r3, #34]	; 0x22
 8019e5e:	e7dc      	b.n	8019e1a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019e60:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019e62:	2b0a      	cmp	r3, #10
 8019e64:	d00f      	beq.n	8019e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019e66:	4620      	mov	r0, r4
 8019e68:	f7ff fc70 	bl	801974c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019e6c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019e6e:	1c5a      	adds	r2, r3, #1
 8019e70:	8722      	strh	r2, [r4, #56]	; 0x38
 8019e72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019e74:	4413      	add	r3, r2
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	2b09      	cmp	r3, #9
 8019e7a:	bf88      	it	hi
 8019e7c:	3b0a      	subhi	r3, #10
 8019e7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e82:	8458      	strh	r0, [r3, #34]	; 0x22
 8019e84:	e7ec      	b.n	8019e60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019e86:	bd10      	pop	{r4, pc}

08019e88 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019e88:	b538      	push	{r3, r4, r5, lr}
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019e8e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019e92:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019e94:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019e96:	3a01      	subs	r2, #1
 8019e98:	8702      	strh	r2, [r0, #56]	; 0x38
 8019e9a:	1c5a      	adds	r2, r3, #1
 8019e9c:	b292      	uxth	r2, r2
 8019e9e:	2a09      	cmp	r2, #9
 8019ea0:	bf86      	itte	hi
 8019ea2:	3b09      	subhi	r3, #9
 8019ea4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019ea6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019ea8:	f7ff ffb5 	bl	8019e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019eac:	8c23      	ldrh	r3, [r4, #32]
 8019eae:	2b01      	cmp	r3, #1
 8019eb0:	bf9c      	itt	ls
 8019eb2:	3301      	addls	r3, #1
 8019eb4:	8423      	strhls	r3, [r4, #32]
 8019eb6:	8be3      	ldrh	r3, [r4, #30]
 8019eb8:	b90b      	cbnz	r3, 8019ebe <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019eba:	2302      	movs	r3, #2
 8019ebc:	83e3      	strh	r3, [r4, #30]
 8019ebe:	8be3      	ldrh	r3, [r4, #30]
 8019ec0:	4628      	mov	r0, r5
 8019ec2:	3b01      	subs	r3, #1
 8019ec4:	b29b      	uxth	r3, r3
 8019ec6:	83e3      	strh	r3, [r4, #30]
 8019ec8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ecc:	8365      	strh	r5, [r4, #26]
 8019ece:	bd38      	pop	{r3, r4, r5, pc}

08019ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019ed0:	428a      	cmp	r2, r1
 8019ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019ed8:	d931      	bls.n	8019f3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8019eda:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019edc:	1a54      	subs	r4, r2, r1
 8019ede:	19ee      	adds	r6, r5, r7
 8019ee0:	3e01      	subs	r6, #1
 8019ee2:	fa1f fe84 	uxth.w	lr, r4
 8019ee6:	b2b4      	uxth	r4, r6
 8019ee8:	eba4 090e 	sub.w	r9, r4, lr
 8019eec:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019ef0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019ef4:	fa1f f989 	uxth.w	r9, r9
 8019ef8:	2c09      	cmp	r4, #9
 8019efa:	4626      	mov	r6, r4
 8019efc:	bf88      	it	hi
 8019efe:	f1a4 060a 	subhi.w	r6, r4, #10
 8019f02:	f1bc 0f00 	cmp.w	ip, #0
 8019f06:	bf08      	it	eq
 8019f08:	f04f 0c02 	moveq.w	ip, #2
 8019f0c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019f10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f14:	3c01      	subs	r4, #1
 8019f16:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019f1a:	fa1f fc8c 	uxth.w	ip, ip
 8019f1e:	b2a4      	uxth	r4, r4
 8019f20:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019f24:	454c      	cmp	r4, r9
 8019f26:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019f2a:	d1e5      	bne.n	8019ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019f2c:	eba5 050e 	sub.w	r5, r5, lr
 8019f30:	eb0e 0408 	add.w	r4, lr, r8
 8019f34:	8705      	strh	r5, [r0, #56]	; 0x38
 8019f36:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019f3a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019f3e:	250a      	movs	r5, #10
 8019f40:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019f42:	1a64      	subs	r4, r4, r1
 8019f44:	4439      	add	r1, r7
 8019f46:	b289      	uxth	r1, r1
 8019f48:	2909      	cmp	r1, #9
 8019f4a:	bf88      	it	hi
 8019f4c:	390a      	subhi	r1, #10
 8019f4e:	8704      	strh	r4, [r0, #56]	; 0x38
 8019f50:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019f52:	b18a      	cbz	r2, 8019f78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8019f54:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019f56:	3a01      	subs	r2, #1
 8019f58:	3101      	adds	r1, #1
 8019f5a:	b292      	uxth	r2, r2
 8019f5c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019f60:	8701      	strh	r1, [r0, #56]	; 0x38
 8019f62:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019f64:	b901      	cbnz	r1, 8019f68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8019f66:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019f68:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019f6a:	3901      	subs	r1, #1
 8019f6c:	b289      	uxth	r1, r1
 8019f6e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019f70:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019f74:	844c      	strh	r4, [r1, #34]	; 0x22
 8019f76:	e7ec      	b.n	8019f52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8019f78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f7c:	f7ff bf4b 	b.w	8019e16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019f80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019f80:	b570      	push	{r4, r5, r6, lr}
 8019f82:	2500      	movs	r5, #0
 8019f84:	4295      	cmp	r5, r2
 8019f86:	d011      	beq.n	8019fac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019f88:	8bc4      	ldrh	r4, [r0, #30]
 8019f8a:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019f8e:	4414      	add	r4, r2
 8019f90:	3c01      	subs	r4, #1
 8019f92:	1b64      	subs	r4, r4, r5
 8019f94:	b2a4      	uxth	r4, r4
 8019f96:	2c01      	cmp	r4, #1
 8019f98:	bf88      	it	hi
 8019f9a:	3c02      	subhi	r4, #2
 8019f9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019fa0:	8b64      	ldrh	r4, [r4, #26]
 8019fa2:	42b4      	cmp	r4, r6
 8019fa4:	d117      	bne.n	8019fd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019fa6:	3501      	adds	r5, #1
 8019fa8:	b2ad      	uxth	r5, r5
 8019faa:	e7eb      	b.n	8019f84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019fac:	2400      	movs	r4, #0
 8019fae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019fb2:	4413      	add	r3, r2
 8019fb4:	b2a2      	uxth	r2, r4
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	da0f      	bge.n	8019fda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019fba:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019fbc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019fc0:	4432      	add	r2, r6
 8019fc2:	b292      	uxth	r2, r2
 8019fc4:	2a09      	cmp	r2, #9
 8019fc6:	bf88      	it	hi
 8019fc8:	3a0a      	subhi	r2, #10
 8019fca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019fce:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019fd0:	3401      	adds	r4, #1
 8019fd2:	42aa      	cmp	r2, r5
 8019fd4:	d0ee      	beq.n	8019fb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	bd70      	pop	{r4, r5, r6, pc}
 8019fda:	2001      	movs	r0, #1
 8019fdc:	e7fc      	b.n	8019fd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019fde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe2:	4605      	mov	r5, r0
 8019fe4:	4616      	mov	r6, r2
 8019fe6:	1c8c      	adds	r4, r1, #2
 8019fe8:	8809      	ldrh	r1, [r1, #0]
 8019fea:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019fee:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019ff2:	42b3      	cmp	r3, r6
 8019ff4:	d124      	bne.n	801a040 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019ff6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019ffa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019ffe:	f001 070f 	and.w	r7, r1, #15
 801a002:	f8cd 8000 	str.w	r8, [sp]
 801a006:	464b      	mov	r3, r9
 801a008:	4652      	mov	r2, sl
 801a00a:	4621      	mov	r1, r4
 801a00c:	4628      	mov	r0, r5
 801a00e:	f7ff ffb7 	bl	8019f80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a012:	4683      	mov	fp, r0
 801a014:	b168      	cbz	r0, 801a032 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a016:	eb0a 0109 	add.w	r1, sl, r9
 801a01a:	4441      	add	r1, r8
 801a01c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a020:	463a      	mov	r2, r7
 801a022:	4649      	mov	r1, r9
 801a024:	4628      	mov	r0, r5
 801a026:	f7ff ff53 	bl	8019ed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a02a:	4658      	mov	r0, fp
 801a02c:	b003      	add	sp, #12
 801a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a032:	eb07 010a 	add.w	r1, r7, sl
 801a036:	4449      	add	r1, r9
 801a038:	4441      	add	r1, r8
 801a03a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a03e:	e7d2      	b.n	8019fe6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a040:	f04f 0b00 	mov.w	fp, #0
 801a044:	e7f1      	b.n	801a02a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a046 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a046:	b570      	push	{r4, r5, r6, lr}
 801a048:	8810      	ldrh	r0, [r2, #0]
 801a04a:	4298      	cmp	r0, r3
 801a04c:	d817      	bhi.n	801a07e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a04e:	1e48      	subs	r0, r1, #1
 801a050:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a054:	4298      	cmp	r0, r3
 801a056:	d312      	bcc.n	801a07e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a058:	2400      	movs	r4, #0
 801a05a:	428c      	cmp	r4, r1
 801a05c:	d20f      	bcs.n	801a07e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a05e:	1860      	adds	r0, r4, r1
 801a060:	1040      	asrs	r0, r0, #1
 801a062:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a066:	0085      	lsls	r5, r0, #2
 801a068:	42b3      	cmp	r3, r6
 801a06a:	d902      	bls.n	801a072 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a06c:	3001      	adds	r0, #1
 801a06e:	b284      	uxth	r4, r0
 801a070:	e7f3      	b.n	801a05a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a072:	d201      	bcs.n	801a078 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a074:	b281      	uxth	r1, r0
 801a076:	e7f0      	b.n	801a05a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a078:	442a      	add	r2, r5
 801a07a:	8850      	ldrh	r0, [r2, #2]
 801a07c:	bd70      	pop	{r4, r5, r6, pc}
 801a07e:	2000      	movs	r0, #0
 801a080:	e7fc      	b.n	801a07c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a082 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a086:	4604      	mov	r4, r0
 801a088:	260b      	movs	r6, #11
 801a08a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a08c:	886f      	ldrh	r7, [r5, #2]
 801a08e:	087f      	lsrs	r7, r7, #1
 801a090:	3e01      	subs	r6, #1
 801a092:	d013      	beq.n	801a0bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a096:	462a      	mov	r2, r5
 801a098:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a09c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a0a0:	4639      	mov	r1, r7
 801a0a2:	4643      	mov	r3, r8
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	f7ff ffce 	bl	801a046 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a0aa:	b138      	cbz	r0, 801a0bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a0ac:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a0b0:	4642      	mov	r2, r8
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	f7ff ff93 	bl	8019fde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d1e9      	bne.n	801a090 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a0c0:	b570      	push	{r4, r5, r6, lr}
 801a0c2:	694a      	ldr	r2, [r1, #20]
 801a0c4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a0c6:	684b      	ldr	r3, [r1, #4]
 801a0c8:	1b54      	subs	r4, r2, r5
 801a0ca:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a0cc:	f000 8107 	beq.w	801a2de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801a0d0:	1b9b      	subs	r3, r3, r6
 801a0d2:	d003      	beq.n	801a0dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a0d4:	2210      	movs	r2, #16
 801a0d6:	4363      	muls	r3, r4
 801a0d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801a0dc:	680c      	ldr	r4, [r1, #0]
 801a0de:	698a      	ldr	r2, [r1, #24]
 801a0e0:	1b65      	subs	r5, r4, r5
 801a0e2:	f000 80fe 	beq.w	801a2e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801a0e6:	1b92      	subs	r2, r2, r6
 801a0e8:	d003      	beq.n	801a0f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a0ea:	2410      	movs	r4, #16
 801a0ec:	436a      	muls	r2, r5
 801a0ee:	fb92 f2f4 	sdiv	r2, r2, r4
 801a0f2:	1a9b      	subs	r3, r3, r2
 801a0f4:	ee07 3a90 	vmov	s15, r3
 801a0f8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801a0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a104:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a108:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a10c:	460a      	mov	r2, r1
 801a10e:	eeb1 6a43 	vneg.f32	s12, s6
 801a112:	4603      	mov	r3, r0
 801a114:	f100 040c 	add.w	r4, r0, #12
 801a118:	edd2 7a02 	vldr	s15, [r2, #8]
 801a11c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a120:	ece3 6a01 	vstmia	r3!, {s13}
 801a124:	edd2 7a03 	vldr	s15, [r2, #12]
 801a128:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a12c:	edc3 7a02 	vstr	s15, [r3, #8]
 801a130:	edd2 7a04 	vldr	s15, [r2, #16]
 801a134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a138:	429c      	cmp	r4, r3
 801a13a:	edc3 7a05 	vstr	s15, [r3, #20]
 801a13e:	f102 0214 	add.w	r2, r2, #20
 801a142:	d1e9      	bne.n	801a118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a144:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a146:	698b      	ldr	r3, [r1, #24]
 801a148:	edd0 4a02 	vldr	s9, [r0, #8]
 801a14c:	1a9b      	subs	r3, r3, r2
 801a14e:	ee07 3a90 	vmov	s15, r3
 801a152:	684b      	ldr	r3, [r1, #4]
 801a154:	edd0 3a00 	vldr	s7, [r0]
 801a158:	1a9b      	subs	r3, r3, r2
 801a15a:	edd0 6a01 	vldr	s13, [r0, #4]
 801a15e:	ee07 3a10 	vmov	s14, r3
 801a162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a166:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a16a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a16e:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a172:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a176:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a17a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a17e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a182:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a186:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a18a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a18c:	694a      	ldr	r2, [r1, #20]
 801a18e:	ed90 5a05 	vldr	s10, [r0, #20]
 801a192:	1b13      	subs	r3, r2, r4
 801a194:	ee07 3a10 	vmov	s14, r3
 801a198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a19c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a1a0:	680b      	ldr	r3, [r1, #0]
 801a1a2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a1a6:	1b1b      	subs	r3, r3, r4
 801a1a8:	ee07 3a10 	vmov	s14, r3
 801a1ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a1b4:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a1b8:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a1bc:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a1c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a1c2:	698b      	ldr	r3, [r1, #24]
 801a1c4:	ed90 2a03 	vldr	s4, [r0, #12]
 801a1c8:	1a9b      	subs	r3, r3, r2
 801a1ca:	ee06 3a90 	vmov	s13, r3
 801a1ce:	684b      	ldr	r3, [r1, #4]
 801a1d0:	edd0 5a04 	vldr	s11, [r0, #16]
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	ee07 3a10 	vmov	s14, r3
 801a1da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a1de:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a1e2:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a1e6:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a1ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1ee:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a1f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a1f6:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a1fa:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a1fe:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a202:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a204:	694a      	ldr	r2, [r1, #20]
 801a206:	ed90 1a07 	vldr	s2, [r0, #28]
 801a20a:	1b13      	subs	r3, r2, r4
 801a20c:	ee07 3a10 	vmov	s14, r3
 801a210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a214:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a218:	680b      	ldr	r3, [r1, #0]
 801a21a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a21e:	1b1b      	subs	r3, r3, r4
 801a220:	ee07 3a10 	vmov	s14, r3
 801a224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a228:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a22c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a230:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a234:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a238:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a23a:	698b      	ldr	r3, [r1, #24]
 801a23c:	edd0 5a08 	vldr	s11, [r0, #32]
 801a240:	1a9b      	subs	r3, r3, r2
 801a242:	ee07 3a10 	vmov	s14, r3
 801a246:	684b      	ldr	r3, [r1, #4]
 801a248:	edd0 2a06 	vldr	s5, [r0, #24]
 801a24c:	1a9b      	subs	r3, r3, r2
 801a24e:	ee01 3a90 	vmov	s3, r3
 801a252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a256:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a25a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a25e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a262:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a266:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a26a:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a26e:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a272:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a276:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a27a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a27c:	694a      	ldr	r2, [r1, #20]
 801a27e:	1b13      	subs	r3, r2, r4
 801a280:	ee03 3a10 	vmov	s6, r3
 801a284:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a288:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a28c:	680b      	ldr	r3, [r1, #0]
 801a28e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a292:	1b1b      	subs	r3, r3, r4
 801a294:	ee03 3a10 	vmov	s6, r3
 801a298:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a29c:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a2a0:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a2a4:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a2a8:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a2ac:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a2b0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2b8:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a2bc:	dd13      	ble.n	801a2e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a2c2:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a2c6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a2ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a2d4:	dd15      	ble.n	801a302 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a2da:	6403      	str	r3, [r0, #64]	; 0x40
 801a2dc:	bd70      	pop	{r4, r5, r6, pc}
 801a2de:	4623      	mov	r3, r4
 801a2e0:	e6fc      	b.n	801a0dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a2e2:	462a      	mov	r2, r5
 801a2e4:	e705      	b.n	801a0f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a2e6:	d502      	bpl.n	801a2ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801a2e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a2ec:	e7e9      	b.n	801a2c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801a2ee:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a2f2:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a2f6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2fe:	dade      	bge.n	801a2be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801a300:	e7f2      	b.n	801a2e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801a302:	d502      	bpl.n	801a30a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801a304:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a308:	e7e7      	b.n	801a2da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801a30a:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a30e:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a312:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a31a:	dadc      	bge.n	801a2d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801a31c:	e7f2      	b.n	801a304 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801a31e:	bf00      	nop
 801a320:	3d800000 	.word	0x3d800000

0801a324 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a328:	2714      	movs	r7, #20
 801a32a:	435f      	muls	r7, r3
 801a32c:	eb02 0c07 	add.w	ip, r2, r7
 801a330:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a334:	f115 0e0f 	adds.w	lr, r5, #15
 801a338:	f100 80a2 	bmi.w	801a480 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a33c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a340:	2614      	movs	r6, #20
 801a342:	9c08      	ldr	r4, [sp, #32]
 801a344:	f8c0 e014 	str.w	lr, [r0, #20]
 801a348:	4366      	muls	r6, r4
 801a34a:	eb02 0806 	add.w	r8, r2, r6
 801a34e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a352:	f115 040f 	adds.w	r4, r5, #15
 801a356:	f100 809f 	bmi.w	801a498 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a35a:	1124      	asrs	r4, r4, #4
 801a35c:	eba4 040e 	sub.w	r4, r4, lr
 801a360:	6184      	str	r4, [r0, #24]
 801a362:	2c00      	cmp	r4, #0
 801a364:	f000 808a 	beq.w	801a47c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a368:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a36c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a370:	5995      	ldr	r5, [r2, r6]
 801a372:	eba4 0809 	sub.w	r8, r4, r9
 801a376:	59d4      	ldr	r4, [r2, r7]
 801a378:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a37c:	eba5 0a04 	sub.w	sl, r5, r4
 801a380:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a384:	fb0e fe05 	mul.w	lr, lr, r5
 801a388:	fb0a ee19 	mls	lr, sl, r9, lr
 801a38c:	fb08 e404 	mla	r4, r8, r4, lr
 801a390:	3c01      	subs	r4, #1
 801a392:	19a4      	adds	r4, r4, r6
 801a394:	f100 808c 	bmi.w	801a4b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a398:	fb94 fef6 	sdiv	lr, r4, r6
 801a39c:	fb06 441e 	mls	r4, r6, lr, r4
 801a3a0:	f8c0 e000 	str.w	lr, [r0]
 801a3a4:	6104      	str	r4, [r0, #16]
 801a3a6:	2d00      	cmp	r5, #0
 801a3a8:	f2c0 8095 	blt.w	801a4d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a3ac:	fb95 f4f6 	sdiv	r4, r5, r6
 801a3b0:	fb06 5514 	mls	r5, r6, r4, r5
 801a3b4:	6044      	str	r4, [r0, #4]
 801a3b6:	6085      	str	r5, [r0, #8]
 801a3b8:	60c6      	str	r6, [r0, #12]
 801a3ba:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a3be:	6945      	ldr	r5, [r0, #20]
 801a3c0:	59d2      	ldr	r2, [r2, r7]
 801a3c2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a3c6:	ee07 4a10 	vmov	s14, r4
 801a3ca:	6804      	ldr	r4, [r0, #0]
 801a3cc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801a4f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a3d0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a3d4:	ee07 2a90 	vmov	s15, r2
 801a3d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a3e4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a3e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a3ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a3f0:	edd3 6a00 	vldr	s13, [r3]
 801a3f4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a3f8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a3fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a400:	edc0 6a07 	vstr	s13, [r0, #28]
 801a404:	edd0 6a01 	vldr	s13, [r0, #4]
 801a408:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a40c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a410:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a414:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a418:	ed80 6a08 	vstr	s12, [r0, #32]
 801a41c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a41e:	6242      	str	r2, [r0, #36]	; 0x24
 801a420:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a424:	ed93 6a03 	vldr	s12, [r3, #12]
 801a428:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a42c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a430:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a434:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a438:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a43c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a440:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a444:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a448:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a44a:	6302      	str	r2, [r0, #48]	; 0x30
 801a44c:	ed93 6a06 	vldr	s12, [r3, #24]
 801a450:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a454:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a458:	eeb0 7a46 	vmov.f32	s14, s12
 801a45c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a460:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a464:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a468:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a46c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a470:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a474:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a478:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a47a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a480:	2410      	movs	r4, #16
 801a482:	f1c5 0501 	rsb	r5, r5, #1
 801a486:	f015 050f 	ands.w	r5, r5, #15
 801a48a:	fb9e fef4 	sdiv	lr, lr, r4
 801a48e:	bf18      	it	ne
 801a490:	2501      	movne	r5, #1
 801a492:	ebae 0e05 	sub.w	lr, lr, r5
 801a496:	e753      	b.n	801a340 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a498:	f04f 0910 	mov.w	r9, #16
 801a49c:	f1c5 0501 	rsb	r5, r5, #1
 801a4a0:	f015 050f 	ands.w	r5, r5, #15
 801a4a4:	fb94 f4f9 	sdiv	r4, r4, r9
 801a4a8:	bf18      	it	ne
 801a4aa:	2501      	movne	r5, #1
 801a4ac:	1b64      	subs	r4, r4, r5
 801a4ae:	e755      	b.n	801a35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a4b0:	4264      	negs	r4, r4
 801a4b2:	fb94 fef6 	sdiv	lr, r4, r6
 801a4b6:	fb06 441e 	mls	r4, r6, lr, r4
 801a4ba:	f1ce 0800 	rsb	r8, lr, #0
 801a4be:	f8c0 8000 	str.w	r8, [r0]
 801a4c2:	6104      	str	r4, [r0, #16]
 801a4c4:	2c00      	cmp	r4, #0
 801a4c6:	f43f af6e 	beq.w	801a3a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a4ca:	ea6f 0e0e 	mvn.w	lr, lr
 801a4ce:	1b34      	subs	r4, r6, r4
 801a4d0:	f8c0 e000 	str.w	lr, [r0]
 801a4d4:	e766      	b.n	801a3a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a4d6:	426d      	negs	r5, r5
 801a4d8:	fb95 f4f6 	sdiv	r4, r5, r6
 801a4dc:	fb06 5514 	mls	r5, r6, r4, r5
 801a4e0:	f1c4 0e00 	rsb	lr, r4, #0
 801a4e4:	f8c0 e004 	str.w	lr, [r0, #4]
 801a4e8:	6085      	str	r5, [r0, #8]
 801a4ea:	2d00      	cmp	r5, #0
 801a4ec:	f43f af64 	beq.w	801a3b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a4f0:	43e4      	mvns	r4, r4
 801a4f2:	1b75      	subs	r5, r6, r5
 801a4f4:	6044      	str	r4, [r0, #4]
 801a4f6:	e75e      	b.n	801a3b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a4f8:	3d800000 	.word	0x3d800000

0801a4fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a4fc:	4b01      	ldr	r3, [pc, #4]	; (801a504 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a4fe:	6018      	str	r0, [r3, #0]
 801a500:	4770      	bx	lr
 801a502:	bf00      	nop
 801a504:	2004f75c 	.word	0x2004f75c

0801a508 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a508:	4b06      	ldr	r3, [pc, #24]	; (801a524 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a50a:	881a      	ldrh	r2, [r3, #0]
 801a50c:	4282      	cmp	r2, r0
 801a50e:	d807      	bhi.n	801a520 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a510:	4b05      	ldr	r3, [pc, #20]	; (801a528 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a512:	881b      	ldrh	r3, [r3, #0]
 801a514:	4413      	add	r3, r2
 801a516:	4298      	cmp	r0, r3
 801a518:	bfac      	ite	ge
 801a51a:	2000      	movge	r0, #0
 801a51c:	2001      	movlt	r0, #1
 801a51e:	4770      	bx	lr
 801a520:	2000      	movs	r0, #0
 801a522:	4770      	bx	lr
 801a524:	2004f77c 	.word	0x2004f77c
 801a528:	2004f780 	.word	0x2004f780

0801a52c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a52c:	b508      	push	{r3, lr}
 801a52e:	4601      	mov	r1, r0
 801a530:	f7ff ffea 	bl	801a508 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a534:	b118      	cbz	r0, 801a53e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a536:	4b02      	ldr	r3, [pc, #8]	; (801a540 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a53e:	bd08      	pop	{r3, pc}
 801a540:	2004f760 	.word	0x2004f760

0801a544 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a544:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a546:	4c24      	ldr	r4, [pc, #144]	; (801a5d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a548:	6823      	ldr	r3, [r4, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d042      	beq.n	801a5d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a54e:	4a23      	ldr	r2, [pc, #140]	; (801a5dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a550:	4d23      	ldr	r5, [pc, #140]	; (801a5e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a552:	8811      	ldrh	r1, [r2, #0]
 801a554:	f8b5 c000 	ldrh.w	ip, [r5]
 801a558:	4822      	ldr	r0, [pc, #136]	; (801a5e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a55a:	4461      	add	r1, ip
 801a55c:	1c4a      	adds	r2, r1, #1
 801a55e:	f022 0201 	bic.w	r2, r2, #1
 801a562:	008f      	lsls	r7, r1, #2
 801a564:	0412      	lsls	r2, r2, #16
 801a566:	19de      	adds	r6, r3, r7
 801a568:	0c12      	lsrs	r2, r2, #16
 801a56a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a56e:	6006      	str	r6, [r0, #0]
 801a570:	4e1d      	ldr	r6, [pc, #116]	; (801a5e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a572:	19da      	adds	r2, r3, r7
 801a574:	6032      	str	r2, [r6, #0]
 801a576:	220e      	movs	r2, #14
 801a578:	fb02 f20c 	mul.w	r2, r2, ip
 801a57c:	3203      	adds	r2, #3
 801a57e:	f022 0203 	bic.w	r2, r2, #3
 801a582:	443a      	add	r2, r7
 801a584:	4f19      	ldr	r7, [pc, #100]	; (801a5ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a586:	4413      	add	r3, r2
 801a588:	603b      	str	r3, [r7, #0]
 801a58a:	2300      	movs	r3, #0
 801a58c:	4f18      	ldr	r7, [pc, #96]	; (801a5f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a58e:	469c      	mov	ip, r3
 801a590:	803b      	strh	r3, [r7, #0]
 801a592:	4f18      	ldr	r7, [pc, #96]	; (801a5f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a594:	683f      	ldr	r7, [r7, #0]
 801a596:	1aba      	subs	r2, r7, r2
 801a598:	4f17      	ldr	r7, [pc, #92]	; (801a5f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a59a:	603a      	str	r2, [r7, #0]
 801a59c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a5a0:	4a16      	ldr	r2, [pc, #88]	; (801a5fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a5a2:	8013      	strh	r3, [r2, #0]
 801a5a4:	428b      	cmp	r3, r1
 801a5a6:	d10d      	bne.n	801a5c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	240e      	movs	r4, #14
 801a5ac:	882d      	ldrh	r5, [r5, #0]
 801a5ae:	6830      	ldr	r0, [r6, #0]
 801a5b0:	429d      	cmp	r5, r3
 801a5b2:	d90f      	bls.n	801a5d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a5b4:	fb04 0203 	mla	r2, r4, r3, r0
 801a5b8:	7b11      	ldrb	r1, [r2, #12]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	f36f 1145 	bfc	r1, #5, #1
 801a5c0:	7311      	strb	r1, [r2, #12]
 801a5c2:	e7f5      	b.n	801a5b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a5c4:	6822      	ldr	r2, [r4, #0]
 801a5c6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a5ca:	6802      	ldr	r2, [r0, #0]
 801a5cc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a5d0:	3301      	adds	r3, #1
 801a5d2:	e7e7      	b.n	801a5a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	2004f760 	.word	0x2004f760
 801a5dc:	2004f77c 	.word	0x2004f77c
 801a5e0:	2004f780 	.word	0x2004f780
 801a5e4:	2004f774 	.word	0x2004f774
 801a5e8:	2004f764 	.word	0x2004f764
 801a5ec:	2004f76c 	.word	0x2004f76c
 801a5f0:	2004f77e 	.word	0x2004f77e
 801a5f4:	2004f768 	.word	0x2004f768
 801a5f8:	2004f778 	.word	0x2004f778
 801a5fc:	2004f770 	.word	0x2004f770

0801a600 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a600:	4b06      	ldr	r3, [pc, #24]	; (801a61c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	b943      	cbnz	r3, 801a618 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a606:	b139      	cbz	r1, 801a618 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a608:	4b05      	ldr	r3, [pc, #20]	; (801a620 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a60a:	801a      	strh	r2, [r3, #0]
 801a60c:	4b05      	ldr	r3, [pc, #20]	; (801a624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a60e:	6019      	str	r1, [r3, #0]
 801a610:	4b05      	ldr	r3, [pc, #20]	; (801a628 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a612:	6018      	str	r0, [r3, #0]
 801a614:	f7ff bf96 	b.w	801a544 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a618:	4770      	bx	lr
 801a61a:	bf00      	nop
 801a61c:	2004f76c 	.word	0x2004f76c
 801a620:	2004f780 	.word	0x2004f780
 801a624:	2004f768 	.word	0x2004f768
 801a628:	2004f760 	.word	0x2004f760

0801a62c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a62c:	b470      	push	{r4, r5, r6}
 801a62e:	4c07      	ldr	r4, [pc, #28]	; (801a64c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a630:	4605      	mov	r5, r0
 801a632:	6826      	ldr	r6, [r4, #0]
 801a634:	4610      	mov	r0, r2
 801a636:	9a03      	ldr	r2, [sp, #12]
 801a638:	b936      	cbnz	r6, 801a648 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a63a:	6025      	str	r5, [r4, #0]
 801a63c:	4c04      	ldr	r4, [pc, #16]	; (801a650 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a63e:	8021      	strh	r1, [r4, #0]
 801a640:	bc70      	pop	{r4, r5, r6}
 801a642:	4619      	mov	r1, r3
 801a644:	f7ff bfdc 	b.w	801a600 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a648:	bc70      	pop	{r4, r5, r6}
 801a64a:	4770      	bx	lr
 801a64c:	2004f784 	.word	0x2004f784
 801a650:	2004f77c 	.word	0x2004f77c

0801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a654:	4a12      	ldr	r2, [pc, #72]	; (801a6a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a656:	8803      	ldrh	r3, [r0, #0]
 801a658:	8812      	ldrh	r2, [r2, #0]
 801a65a:	4293      	cmp	r3, r2
 801a65c:	d207      	bcs.n	801a66e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a65e:	2114      	movs	r1, #20
 801a660:	4a10      	ldr	r2, [pc, #64]	; (801a6a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a662:	6812      	ldr	r2, [r2, #0]
 801a664:	fb01 2303 	mla	r3, r1, r3, r2
 801a668:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a66c:	4770      	bx	lr
 801a66e:	490e      	ldr	r1, [pc, #56]	; (801a6a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a670:	8809      	ldrh	r1, [r1, #0]
 801a672:	4411      	add	r1, r2
 801a674:	428b      	cmp	r3, r1
 801a676:	da04      	bge.n	801a682 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a678:	1a9b      	subs	r3, r3, r2
 801a67a:	4a0c      	ldr	r2, [pc, #48]	; (801a6ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a67c:	210e      	movs	r1, #14
 801a67e:	6812      	ldr	r2, [r2, #0]
 801a680:	e7f0      	b.n	801a664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a682:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a686:	4293      	cmp	r3, r2
 801a688:	d108      	bne.n	801a69c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a68a:	4b09      	ldr	r3, [pc, #36]	; (801a6b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	b91b      	cbnz	r3, 801a698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a690:	4b08      	ldr	r3, [pc, #32]	; (801a6b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a692:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a696:	4770      	bx	lr
 801a698:	4b07      	ldr	r3, [pc, #28]	; (801a6b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a69a:	e7fa      	b.n	801a692 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a69c:	2000      	movs	r0, #0
 801a69e:	4770      	bx	lr
 801a6a0:	2004f77c 	.word	0x2004f77c
 801a6a4:	2004f784 	.word	0x2004f784
 801a6a8:	2004f780 	.word	0x2004f780
 801a6ac:	2004f764 	.word	0x2004f764
 801a6b0:	2004f6ec 	.word	0x2004f6ec
 801a6b4:	2004f6ee 	.word	0x2004f6ee
 801a6b8:	2004f6f0 	.word	0x2004f6f0

0801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a6bc:	4a12      	ldr	r2, [pc, #72]	; (801a708 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a6be:	8803      	ldrh	r3, [r0, #0]
 801a6c0:	8812      	ldrh	r2, [r2, #0]
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d207      	bcs.n	801a6d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a6c6:	2114      	movs	r1, #20
 801a6c8:	4a10      	ldr	r2, [pc, #64]	; (801a70c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a6ca:	6812      	ldr	r2, [r2, #0]
 801a6cc:	fb01 2303 	mla	r3, r1, r3, r2
 801a6d0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a6d4:	4770      	bx	lr
 801a6d6:	490e      	ldr	r1, [pc, #56]	; (801a710 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a6d8:	8809      	ldrh	r1, [r1, #0]
 801a6da:	4411      	add	r1, r2
 801a6dc:	428b      	cmp	r3, r1
 801a6de:	da04      	bge.n	801a6ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a6e0:	1a9b      	subs	r3, r3, r2
 801a6e2:	4a0c      	ldr	r2, [pc, #48]	; (801a714 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a6e4:	210e      	movs	r1, #14
 801a6e6:	6812      	ldr	r2, [r2, #0]
 801a6e8:	e7f0      	b.n	801a6cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a6ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a6ee:	4293      	cmp	r3, r2
 801a6f0:	d108      	bne.n	801a704 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a6f2:	4b09      	ldr	r3, [pc, #36]	; (801a718 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a6f4:	781b      	ldrb	r3, [r3, #0]
 801a6f6:	b91b      	cbnz	r3, 801a700 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a6f8:	4b08      	ldr	r3, [pc, #32]	; (801a71c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a6fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a6fe:	4770      	bx	lr
 801a700:	4b07      	ldr	r3, [pc, #28]	; (801a720 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a702:	e7fa      	b.n	801a6fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a704:	2000      	movs	r0, #0
 801a706:	4770      	bx	lr
 801a708:	2004f77c 	.word	0x2004f77c
 801a70c:	2004f784 	.word	0x2004f784
 801a710:	2004f780 	.word	0x2004f780
 801a714:	2004f764 	.word	0x2004f764
 801a718:	2004f6ec 	.word	0x2004f6ec
 801a71c:	2004f6f0 	.word	0x2004f6f0
 801a720:	2004f6ee 	.word	0x2004f6ee

0801a724 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a724:	b510      	push	{r4, lr}
 801a726:	4a1f      	ldr	r2, [pc, #124]	; (801a7a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801a728:	880b      	ldrh	r3, [r1, #0]
 801a72a:	8812      	ldrh	r2, [r2, #0]
 801a72c:	4293      	cmp	r3, r2
 801a72e:	d213      	bcs.n	801a758 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a730:	2114      	movs	r1, #20
 801a732:	4a1d      	ldr	r2, [pc, #116]	; (801a7a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801a734:	6812      	ldr	r2, [r2, #0]
 801a736:	fb01 2303 	mla	r3, r1, r3, r2
 801a73a:	8a1a      	ldrh	r2, [r3, #16]
 801a73c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a740:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a744:	8a5b      	ldrh	r3, [r3, #18]
 801a746:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a74a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a74e:	8004      	strh	r4, [r0, #0]
 801a750:	8041      	strh	r1, [r0, #2]
 801a752:	8082      	strh	r2, [r0, #4]
 801a754:	80c3      	strh	r3, [r0, #6]
 801a756:	e00e      	b.n	801a776 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a758:	4914      	ldr	r1, [pc, #80]	; (801a7ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801a75a:	8809      	ldrh	r1, [r1, #0]
 801a75c:	4411      	add	r1, r2
 801a75e:	428b      	cmp	r3, r1
 801a760:	da0a      	bge.n	801a778 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801a762:	210e      	movs	r1, #14
 801a764:	1a9b      	subs	r3, r3, r2
 801a766:	4a12      	ldr	r2, [pc, #72]	; (801a7b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a768:	6812      	ldr	r2, [r2, #0]
 801a76a:	fb01 2303 	mla	r3, r1, r3, r2
 801a76e:	681a      	ldr	r2, [r3, #0]
 801a770:	6002      	str	r2, [r0, #0]
 801a772:	685a      	ldr	r2, [r3, #4]
 801a774:	6042      	str	r2, [r0, #4]
 801a776:	bd10      	pop	{r4, pc}
 801a778:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a77c:	4293      	cmp	r3, r2
 801a77e:	d10b      	bne.n	801a798 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801a780:	4b0c      	ldr	r3, [pc, #48]	; (801a7b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a782:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a786:	4b0c      	ldr	r3, [pc, #48]	; (801a7b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a788:	8081      	strh	r1, [r0, #4]
 801a78a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a78e:	2300      	movs	r3, #0
 801a790:	80c2      	strh	r2, [r0, #6]
 801a792:	8003      	strh	r3, [r0, #0]
 801a794:	8043      	strh	r3, [r0, #2]
 801a796:	e7ee      	b.n	801a776 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a798:	2300      	movs	r3, #0
 801a79a:	8003      	strh	r3, [r0, #0]
 801a79c:	8043      	strh	r3, [r0, #2]
 801a79e:	8083      	strh	r3, [r0, #4]
 801a7a0:	e7d8      	b.n	801a754 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a7a2:	bf00      	nop
 801a7a4:	2004f77c 	.word	0x2004f77c
 801a7a8:	2004f784 	.word	0x2004f784
 801a7ac:	2004f780 	.word	0x2004f780
 801a7b0:	2004f764 	.word	0x2004f764
 801a7b4:	2004f6e8 	.word	0x2004f6e8
 801a7b8:	2004f6ea 	.word	0x2004f6ea

0801a7bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a7bc:	4a17      	ldr	r2, [pc, #92]	; (801a81c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801a7be:	8803      	ldrh	r3, [r0, #0]
 801a7c0:	8812      	ldrh	r2, [r2, #0]
 801a7c2:	4293      	cmp	r3, r2
 801a7c4:	d213      	bcs.n	801a7ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801a7c6:	2114      	movs	r1, #20
 801a7c8:	4a15      	ldr	r2, [pc, #84]	; (801a820 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a7ca:	6812      	ldr	r2, [r2, #0]
 801a7cc:	fb01 2303 	mla	r3, r1, r3, r2
 801a7d0:	8a1a      	ldrh	r2, [r3, #16]
 801a7d2:	8919      	ldrh	r1, [r3, #8]
 801a7d4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a7d8:	428a      	cmp	r2, r1
 801a7da:	db1d      	blt.n	801a818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a7dc:	8a58      	ldrh	r0, [r3, #18]
 801a7de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a7e2:	895b      	ldrh	r3, [r3, #10]
 801a7e4:	4298      	cmp	r0, r3
 801a7e6:	bfac      	ite	ge
 801a7e8:	2000      	movge	r0, #0
 801a7ea:	2001      	movlt	r0, #1
 801a7ec:	4770      	bx	lr
 801a7ee:	490d      	ldr	r1, [pc, #52]	; (801a824 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a7f0:	8809      	ldrh	r1, [r1, #0]
 801a7f2:	4411      	add	r1, r2
 801a7f4:	428b      	cmp	r3, r1
 801a7f6:	da0d      	bge.n	801a814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801a7f8:	210e      	movs	r1, #14
 801a7fa:	1a9b      	subs	r3, r3, r2
 801a7fc:	4a0a      	ldr	r2, [pc, #40]	; (801a828 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a7fe:	6812      	ldr	r2, [r2, #0]
 801a800:	fb01 2303 	mla	r3, r1, r3, r2
 801a804:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a808:	891a      	ldrh	r2, [r3, #8]
 801a80a:	4291      	cmp	r1, r2
 801a80c:	db04      	blt.n	801a818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a80e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a812:	e7e6      	b.n	801a7e2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801a814:	2000      	movs	r0, #0
 801a816:	4770      	bx	lr
 801a818:	2001      	movs	r0, #1
 801a81a:	4770      	bx	lr
 801a81c:	2004f77c 	.word	0x2004f77c
 801a820:	2004f784 	.word	0x2004f784
 801a824:	2004f780 	.word	0x2004f780
 801a828:	2004f764 	.word	0x2004f764

0801a82c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a82c:	4a12      	ldr	r2, [pc, #72]	; (801a878 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a82e:	8803      	ldrh	r3, [r0, #0]
 801a830:	8811      	ldrh	r1, [r2, #0]
 801a832:	428b      	cmp	r3, r1
 801a834:	d20b      	bcs.n	801a84e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a836:	4a11      	ldr	r2, [pc, #68]	; (801a87c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a838:	6812      	ldr	r2, [r2, #0]
 801a83a:	b112      	cbz	r2, 801a842 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a83c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a840:	b9c0      	cbnz	r0, 801a874 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a842:	4a0f      	ldr	r2, [pc, #60]	; (801a880 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a844:	6811      	ldr	r1, [r2, #0]
 801a846:	2214      	movs	r2, #20
 801a848:	4353      	muls	r3, r2
 801a84a:	58c8      	ldr	r0, [r1, r3]
 801a84c:	4770      	bx	lr
 801a84e:	4a0d      	ldr	r2, [pc, #52]	; (801a884 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a850:	8812      	ldrh	r2, [r2, #0]
 801a852:	440a      	add	r2, r1
 801a854:	4293      	cmp	r3, r2
 801a856:	da04      	bge.n	801a862 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a858:	4a08      	ldr	r2, [pc, #32]	; (801a87c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a85a:	6812      	ldr	r2, [r2, #0]
 801a85c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a860:	4770      	bx	lr
 801a862:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a866:	4293      	cmp	r3, r2
 801a868:	d103      	bne.n	801a872 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a86a:	4b07      	ldr	r3, [pc, #28]	; (801a888 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a870:	4770      	bx	lr
 801a872:	2000      	movs	r0, #0
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop
 801a878:	2004f77c 	.word	0x2004f77c
 801a87c:	2004f760 	.word	0x2004f760
 801a880:	2004f784 	.word	0x2004f784
 801a884:	2004f780 	.word	0x2004f780
 801a888:	2004f6f4 	.word	0x2004f6f4

0801a88c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a88c:	4b24      	ldr	r3, [pc, #144]	; (801a920 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a88e:	8802      	ldrh	r2, [r0, #0]
 801a890:	8818      	ldrh	r0, [r3, #0]
 801a892:	4282      	cmp	r2, r0
 801a894:	d221      	bcs.n	801a8da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a896:	4b23      	ldr	r3, [pc, #140]	; (801a924 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a898:	6819      	ldr	r1, [r3, #0]
 801a89a:	2314      	movs	r3, #20
 801a89c:	fb03 1302 	mla	r3, r3, r2, r1
 801a8a0:	6858      	ldr	r0, [r3, #4]
 801a8a2:	2800      	cmp	r0, #0
 801a8a4:	d03a      	beq.n	801a91c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a8a6:	4920      	ldr	r1, [pc, #128]	; (801a928 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a8a8:	6809      	ldr	r1, [r1, #0]
 801a8aa:	2900      	cmp	r1, #0
 801a8ac:	d036      	beq.n	801a91c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a8ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a8b2:	2900      	cmp	r1, #0
 801a8b4:	d032      	beq.n	801a91c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a8b6:	891a      	ldrh	r2, [r3, #8]
 801a8b8:	8958      	ldrh	r0, [r3, #10]
 801a8ba:	4350      	muls	r0, r2
 801a8bc:	7c5a      	ldrb	r2, [r3, #17]
 801a8be:	7cdb      	ldrb	r3, [r3, #19]
 801a8c0:	0952      	lsrs	r2, r2, #5
 801a8c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a8c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a8ca:	2b0b      	cmp	r3, #11
 801a8cc:	bf18      	it	ne
 801a8ce:	0040      	lslne	r0, r0, #1
 801a8d0:	3003      	adds	r0, #3
 801a8d2:	f020 0003 	bic.w	r0, r0, #3
 801a8d6:	4408      	add	r0, r1
 801a8d8:	4770      	bx	lr
 801a8da:	4b14      	ldr	r3, [pc, #80]	; (801a92c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	4403      	add	r3, r0
 801a8e0:	429a      	cmp	r2, r3
 801a8e2:	da1a      	bge.n	801a91a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a8e4:	210e      	movs	r1, #14
 801a8e6:	4b12      	ldr	r3, [pc, #72]	; (801a930 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a8e8:	1a10      	subs	r0, r2, r0
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	fb01 3000 	mla	r0, r1, r0, r3
 801a8f0:	7b03      	ldrb	r3, [r0, #12]
 801a8f2:	f003 031f 	and.w	r3, r3, #31
 801a8f6:	2b0b      	cmp	r3, #11
 801a8f8:	d10b      	bne.n	801a912 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a8fa:	8903      	ldrh	r3, [r0, #8]
 801a8fc:	8940      	ldrh	r0, [r0, #10]
 801a8fe:	4358      	muls	r0, r3
 801a900:	4b09      	ldr	r3, [pc, #36]	; (801a928 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a902:	3003      	adds	r0, #3
 801a904:	6819      	ldr	r1, [r3, #0]
 801a906:	f020 0303 	bic.w	r3, r0, #3
 801a90a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a90e:	4418      	add	r0, r3
 801a910:	4770      	bx	lr
 801a912:	2b0d      	cmp	r3, #13
 801a914:	d101      	bne.n	801a91a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a916:	300d      	adds	r0, #13
 801a918:	4770      	bx	lr
 801a91a:	2000      	movs	r0, #0
 801a91c:	4770      	bx	lr
 801a91e:	bf00      	nop
 801a920:	2004f77c 	.word	0x2004f77c
 801a924:	2004f784 	.word	0x2004f784
 801a928:	2004f760 	.word	0x2004f760
 801a92c:	2004f780 	.word	0x2004f780
 801a930:	2004f764 	.word	0x2004f764

0801a934 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a934:	b510      	push	{r4, lr}
 801a936:	4a17      	ldr	r2, [pc, #92]	; (801a994 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a938:	8803      	ldrh	r3, [r0, #0]
 801a93a:	8812      	ldrh	r2, [r2, #0]
 801a93c:	4293      	cmp	r3, r2
 801a93e:	d20c      	bcs.n	801a95a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a940:	2114      	movs	r1, #20
 801a942:	4a15      	ldr	r2, [pc, #84]	; (801a998 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a944:	6812      	ldr	r2, [r2, #0]
 801a946:	fb01 2303 	mla	r3, r1, r3, r2
 801a94a:	7c58      	ldrb	r0, [r3, #17]
 801a94c:	0942      	lsrs	r2, r0, #5
 801a94e:	7cd8      	ldrb	r0, [r3, #19]
 801a950:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a954:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a958:	bd10      	pop	{r4, pc}
 801a95a:	4910      	ldr	r1, [pc, #64]	; (801a99c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a95c:	8809      	ldrh	r1, [r1, #0]
 801a95e:	4411      	add	r1, r2
 801a960:	428b      	cmp	r3, r1
 801a962:	da09      	bge.n	801a978 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a964:	210e      	movs	r1, #14
 801a966:	1a9b      	subs	r3, r3, r2
 801a968:	4a0d      	ldr	r2, [pc, #52]	; (801a9a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a96a:	6812      	ldr	r2, [r2, #0]
 801a96c:	fb01 2303 	mla	r3, r1, r3, r2
 801a970:	7b18      	ldrb	r0, [r3, #12]
 801a972:	f000 001f 	and.w	r0, r0, #31
 801a976:	e7ef      	b.n	801a958 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a978:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a97c:	4293      	cmp	r3, r2
 801a97e:	d106      	bne.n	801a98e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a980:	f7f3 fee0 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 801a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a988:	6803      	ldr	r3, [r0, #0]
 801a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a98c:	4718      	bx	r3
 801a98e:	2000      	movs	r0, #0
 801a990:	e7e2      	b.n	801a958 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a992:	bf00      	nop
 801a994:	2004f77c 	.word	0x2004f77c
 801a998:	2004f784 	.word	0x2004f784
 801a99c:	2004f780 	.word	0x2004f780
 801a9a0:	2004f764 	.word	0x2004f764

0801a9a4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801a9a4:	2010      	movs	r0, #16
 801a9a6:	4770      	bx	lr

0801a9a8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801a9a8:	2000      	movs	r0, #0
 801a9aa:	4770      	bx	lr

0801a9ac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a9ac:	4b02      	ldr	r3, [pc, #8]	; (801a9b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801a9ae:	8818      	ldrh	r0, [r3, #0]
 801a9b0:	0040      	lsls	r0, r0, #1
 801a9b2:	b280      	uxth	r0, r0
 801a9b4:	4770      	bx	lr
 801a9b6:	bf00      	nop
 801a9b8:	2004f6ee 	.word	0x2004f6ee

0801a9bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a9bc:	2bff      	cmp	r3, #255	; 0xff
 801a9be:	d050      	beq.n	801aa62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801a9c0:	2a0b      	cmp	r2, #11
 801a9c2:	d04a      	beq.n	801aa5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a9c4:	d80e      	bhi.n	801a9e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801a9c6:	2a03      	cmp	r2, #3
 801a9c8:	d03f      	beq.n	801aa4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a9ca:	d804      	bhi.n	801a9d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801a9cc:	2a01      	cmp	r2, #1
 801a9ce:	d03e      	beq.n	801aa4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a9d0:	d93f      	bls.n	801aa52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a9d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a9d4:	4770      	bx	lr
 801a9d6:	2a09      	cmp	r2, #9
 801a9d8:	d03f      	beq.n	801aa5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a9da:	d83c      	bhi.n	801aa56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a9dc:	2a08      	cmp	r2, #8
 801a9de:	d03a      	beq.n	801aa56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a9e0:	2000      	movs	r0, #0
 801a9e2:	4770      	bx	lr
 801a9e4:	2a2f      	cmp	r2, #47	; 0x2f
 801a9e6:	d024      	beq.n	801aa32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801a9e8:	d80d      	bhi.n	801aa06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801a9ea:	2a2d      	cmp	r2, #45	; 0x2d
 801a9ec:	d014      	beq.n	801aa18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801a9ee:	d826      	bhi.n	801aa3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a9f0:	2a2c      	cmp	r2, #44	; 0x2c
 801a9f2:	d1f5      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801a9f4:	684b      	ldr	r3, [r1, #4]
 801a9f6:	781b      	ldrb	r3, [r3, #0]
 801a9f8:	2b01      	cmp	r3, #1
 801a9fa:	d018      	beq.n	801aa2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801a9fc:	d323      	bcc.n	801aa46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a9fe:	2b02      	cmp	r3, #2
 801aa00:	d1ee      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa02:	6880      	ldr	r0, [r0, #8]
 801aa04:	4770      	bx	lr
 801aa06:	2a31      	cmp	r2, #49	; 0x31
 801aa08:	d004      	beq.n	801aa14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801aa0a:	d328      	bcc.n	801aa5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801aa0c:	2a32      	cmp	r2, #50	; 0x32
 801aa0e:	d026      	beq.n	801aa5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801aa10:	2a33      	cmp	r2, #51	; 0x33
 801aa12:	d1e5      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa14:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801aa16:	4770      	bx	lr
 801aa18:	684b      	ldr	r3, [r1, #4]
 801aa1a:	781b      	ldrb	r3, [r3, #0]
 801aa1c:	2b01      	cmp	r3, #1
 801aa1e:	d004      	beq.n	801aa2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801aa20:	d30b      	bcc.n	801aa3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aa22:	2b02      	cmp	r3, #2
 801aa24:	d1dc      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa26:	6900      	ldr	r0, [r0, #16]
 801aa28:	4770      	bx	lr
 801aa2a:	6a00      	ldr	r0, [r0, #32]
 801aa2c:	4770      	bx	lr
 801aa2e:	6980      	ldr	r0, [r0, #24]
 801aa30:	4770      	bx	lr
 801aa32:	684b      	ldr	r3, [r1, #4]
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d1d2      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa3a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801aa3c:	4770      	bx	lr
 801aa3e:	684b      	ldr	r3, [r1, #4]
 801aa40:	781b      	ldrb	r3, [r3, #0]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d1cc      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801aa48:	4770      	bx	lr
 801aa4a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801aa4c:	4770      	bx	lr
 801aa4e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801aa50:	4770      	bx	lr
 801aa52:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801aa54:	4770      	bx	lr
 801aa56:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801aa58:	4770      	bx	lr
 801aa5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801aa5c:	4770      	bx	lr
 801aa5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801aa60:	4770      	bx	lr
 801aa62:	2a0b      	cmp	r2, #11
 801aa64:	d049      	beq.n	801aafa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801aa66:	d80e      	bhi.n	801aa86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801aa68:	2a03      	cmp	r2, #3
 801aa6a:	d040      	beq.n	801aaee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801aa6c:	d804      	bhi.n	801aa78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801aa6e:	2a01      	cmp	r2, #1
 801aa70:	d03f      	beq.n	801aaf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801aa72:	d940      	bls.n	801aaf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801aa74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801aa76:	4770      	bx	lr
 801aa78:	2a09      	cmp	r2, #9
 801aa7a:	d03e      	beq.n	801aafa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801aa7c:	d801      	bhi.n	801aa82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801aa7e:	2a08      	cmp	r2, #8
 801aa80:	d1ae      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa82:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801aa84:	4770      	bx	lr
 801aa86:	2a2f      	cmp	r2, #47	; 0x2f
 801aa88:	d024      	beq.n	801aad4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801aa8a:	d80d      	bhi.n	801aaa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801aa8c:	2a2d      	cmp	r2, #45	; 0x2d
 801aa8e:	d014      	beq.n	801aaba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801aa90:	d826      	bhi.n	801aae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801aa92:	2a2c      	cmp	r2, #44	; 0x2c
 801aa94:	d1a4      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aa96:	684b      	ldr	r3, [r1, #4]
 801aa98:	781b      	ldrb	r3, [r3, #0]
 801aa9a:	2b01      	cmp	r3, #1
 801aa9c:	d018      	beq.n	801aad0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801aa9e:	d324      	bcc.n	801aaea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801aaa0:	2b02      	cmp	r3, #2
 801aaa2:	d19d      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aaa4:	68c0      	ldr	r0, [r0, #12]
 801aaa6:	4770      	bx	lr
 801aaa8:	2a31      	cmp	r2, #49	; 0x31
 801aaaa:	d004      	beq.n	801aab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801aaac:	d327      	bcc.n	801aafe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801aaae:	2a32      	cmp	r2, #50	; 0x32
 801aab0:	d025      	beq.n	801aafe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801aab2:	2a33      	cmp	r2, #51	; 0x33
 801aab4:	d194      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aab6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801aab8:	4770      	bx	lr
 801aaba:	684b      	ldr	r3, [r1, #4]
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	2b01      	cmp	r3, #1
 801aac0:	d004      	beq.n	801aacc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801aac2:	d30b      	bcc.n	801aadc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801aac4:	2b02      	cmp	r3, #2
 801aac6:	d18b      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aac8:	6940      	ldr	r0, [r0, #20]
 801aaca:	4770      	bx	lr
 801aacc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801aace:	4770      	bx	lr
 801aad0:	69c0      	ldr	r0, [r0, #28]
 801aad2:	4770      	bx	lr
 801aad4:	684b      	ldr	r3, [r1, #4]
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d181      	bne.n	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aadc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801aade:	4770      	bx	lr
 801aae0:	684b      	ldr	r3, [r1, #4]
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	f47f af7b 	bne.w	801a9e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aaea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801aaec:	4770      	bx	lr
 801aaee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801aaf0:	4770      	bx	lr
 801aaf2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801aaf4:	4770      	bx	lr
 801aaf6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801aaf8:	4770      	bx	lr
 801aafa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801aafc:	4770      	bx	lr
 801aafe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801ab00:	4770      	bx	lr

0801ab02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab06:	b087      	sub	sp, #28
 801ab08:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ab0a:	9101      	str	r1, [sp, #4]
 801ab0c:	9205      	str	r2, [sp, #20]
 801ab0e:	6841      	ldr	r1, [r0, #4]
 801ab10:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ab14:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ab18:	9202      	str	r2, [sp, #8]
 801ab1a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ab1e:	fb01 2404 	mla	r4, r1, r4, r2
 801ab22:	6802      	ldr	r2, [r0, #0]
 801ab24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ab28:	f8de 2000 	ldr.w	r2, [lr]
 801ab2c:	9203      	str	r2, [sp, #12]
 801ab2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ab32:	3204      	adds	r2, #4
 801ab34:	9204      	str	r2, [sp, #16]
 801ab36:	9a02      	ldr	r2, [sp, #8]
 801ab38:	43d6      	mvns	r6, r2
 801ab3a:	b2f6      	uxtb	r6, r6
 801ab3c:	9a01      	ldr	r2, [sp, #4]
 801ab3e:	2a00      	cmp	r2, #0
 801ab40:	dc03      	bgt.n	801ab4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ab42:	9a05      	ldr	r2, [sp, #20]
 801ab44:	2a00      	cmp	r2, #0
 801ab46:	f340 8129 	ble.w	801ad9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ab4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab4c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ab50:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ab54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab56:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ab5a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	dd0e      	ble.n	801ab80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ab62:	1408      	asrs	r0, r1, #16
 801ab64:	d405      	bmi.n	801ab72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab66:	4560      	cmp	r0, ip
 801ab68:	da03      	bge.n	801ab72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab6a:	1410      	asrs	r0, r2, #16
 801ab6c:	d401      	bmi.n	801ab72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab6e:	42b8      	cmp	r0, r7
 801ab70:	db07      	blt.n	801ab82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ab72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ab74:	3b01      	subs	r3, #1
 801ab76:	4401      	add	r1, r0
 801ab78:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ab7a:	3402      	adds	r4, #2
 801ab7c:	4402      	add	r2, r0
 801ab7e:	e7ee      	b.n	801ab5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab80:	d071      	beq.n	801ac66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ab82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ab84:	1e58      	subs	r0, r3, #1
 801ab86:	fb05 1500 	mla	r5, r5, r0, r1
 801ab8a:	142d      	asrs	r5, r5, #16
 801ab8c:	d45f      	bmi.n	801ac4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ab8e:	4565      	cmp	r5, ip
 801ab90:	da5d      	bge.n	801ac4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ab92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ab94:	fb05 2000 	mla	r0, r5, r0, r2
 801ab98:	1400      	asrs	r0, r0, #16
 801ab9a:	d458      	bmi.n	801ac4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ab9c:	42b8      	cmp	r0, r7
 801ab9e:	da56      	bge.n	801ac4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801aba0:	4699      	mov	r9, r3
 801aba2:	46a2      	mov	sl, r4
 801aba4:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801aba8:	f1b9 0f00 	cmp.w	r9, #0
 801abac:	dd57      	ble.n	801ac5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801abae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801abb2:	9803      	ldr	r0, [sp, #12]
 801abb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801abb8:	fb07 000c 	mla	r0, r7, ip, r0
 801abbc:	140d      	asrs	r5, r1, #16
 801abbe:	5d40      	ldrb	r0, [r0, r5]
 801abc0:	9d04      	ldr	r5, [sp, #16]
 801abc2:	f109 39ff 	add.w	r9, r9, #4294967295
 801abc6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801abca:	f8ba 5000 	ldrh.w	r5, [sl]
 801abce:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801abd2:	122f      	asrs	r7, r5, #8
 801abd4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801abd8:	fb17 f706 	smulbb	r7, r7, r6
 801abdc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801abe0:	00ed      	lsls	r5, r5, #3
 801abe2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801abe6:	b2ed      	uxtb	r5, r5
 801abe8:	fb18 f806 	smulbb	r8, r8, r6
 801abec:	fb15 f506 	smulbb	r5, r5, r6
 801abf0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801abf4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801abf8:	10c7      	asrs	r7, r0, #3
 801abfa:	00c0      	lsls	r0, r0, #3
 801abfc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ac00:	b2c0      	uxtb	r0, r0
 801ac02:	fb07 870b 	mla	r7, r7, fp, r8
 801ac06:	fb00 500b 	mla	r0, r0, fp, r5
 801ac0a:	fa1f fc8c 	uxth.w	ip, ip
 801ac0e:	b280      	uxth	r0, r0
 801ac10:	b2bf      	uxth	r7, r7
 801ac12:	f10c 0501 	add.w	r5, ip, #1
 801ac16:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ac1a:	f107 0801 	add.w	r8, r7, #1
 801ac1e:	1c45      	adds	r5, r0, #1
 801ac20:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ac24:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ac28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ac2a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ac2e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ac32:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ac36:	ea45 0c0c 	orr.w	ip, r5, ip
 801ac3a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ac3e:	4401      	add	r1, r0
 801ac40:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ac42:	ea4c 0c08 	orr.w	ip, ip, r8
 801ac46:	f82a cb02 	strh.w	ip, [sl], #2
 801ac4a:	4402      	add	r2, r0
 801ac4c:	e7ac      	b.n	801aba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ac4e:	f04f 0800 	mov.w	r8, #0
 801ac52:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ac56:	eb03 0008 	add.w	r0, r3, r8
 801ac5a:	2800      	cmp	r0, #0
 801ac5c:	dc41      	bgt.n	801ace2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ac5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ac66:	9b01      	ldr	r3, [sp, #4]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	f340 8097 	ble.w	801ad9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ac6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ac72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac82:	eef0 6a62 	vmov.f32	s13, s5
 801ac86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ac96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac9a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ac9e:	eef0 6a43 	vmov.f32	s13, s6
 801aca2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aca6:	ee12 2a90 	vmov	r2, s5
 801acaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801acae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801acb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801acb8:	ee13 2a10 	vmov	r2, s6
 801acbc:	9313      	str	r3, [sp, #76]	; 0x4c
 801acbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acc0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801acc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801acc8:	9314      	str	r3, [sp, #80]	; 0x50
 801acca:	9b01      	ldr	r3, [sp, #4]
 801accc:	9a05      	ldr	r2, [sp, #20]
 801acce:	3b01      	subs	r3, #1
 801acd0:	9301      	str	r3, [sp, #4]
 801acd2:	eeb0 3a67 	vmov.f32	s6, s15
 801acd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acd8:	eef0 2a47 	vmov.f32	s5, s14
 801acdc:	bf08      	it	eq
 801acde:	4613      	moveq	r3, r2
 801ace0:	e72c      	b.n	801ab3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ace2:	140f      	asrs	r7, r1, #16
 801ace4:	d453      	bmi.n	801ad8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ace6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801acea:	42bd      	cmp	r5, r7
 801acec:	dd4f      	ble.n	801ad8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801acee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801acf2:	d44c      	bmi.n	801ad8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801acf4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801acf8:	4560      	cmp	r0, ip
 801acfa:	dd48      	ble.n	801ad8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801acfc:	9803      	ldr	r0, [sp, #12]
 801acfe:	b22d      	sxth	r5, r5
 801ad00:	fb0c 0505 	mla	r5, ip, r5, r0
 801ad04:	5de8      	ldrb	r0, [r5, r7]
 801ad06:	9d04      	ldr	r5, [sp, #16]
 801ad08:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ad0c:	f06f 0501 	mvn.w	r5, #1
 801ad10:	fb05 fb08 	mul.w	fp, r5, r8
 801ad14:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ad18:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ad1c:	122f      	asrs	r7, r5, #8
 801ad1e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ad22:	fb17 f706 	smulbb	r7, r7, r6
 801ad26:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ad2a:	00ed      	lsls	r5, r5, #3
 801ad2c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ad30:	b2ed      	uxtb	r5, r5
 801ad32:	fb19 f906 	smulbb	r9, r9, r6
 801ad36:	fb15 f506 	smulbb	r5, r5, r6
 801ad3a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ad3e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ad42:	10c7      	asrs	r7, r0, #3
 801ad44:	00c0      	lsls	r0, r0, #3
 801ad46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ad4a:	b2c0      	uxtb	r0, r0
 801ad4c:	fb07 970a 	mla	r7, r7, sl, r9
 801ad50:	fb00 500a 	mla	r0, r0, sl, r5
 801ad54:	fa1f fc8c 	uxth.w	ip, ip
 801ad58:	b2bf      	uxth	r7, r7
 801ad5a:	b280      	uxth	r0, r0
 801ad5c:	f10c 0501 	add.w	r5, ip, #1
 801ad60:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ad64:	f107 0901 	add.w	r9, r7, #1
 801ad68:	1c45      	adds	r5, r0, #1
 801ad6a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ad6e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ad72:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ad76:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ad7a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ad7e:	ea45 0c0c 	orr.w	ip, r5, ip
 801ad82:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ad86:	ea4c 0c09 	orr.w	ip, ip, r9
 801ad8a:	f824 c00b 	strh.w	ip, [r4, fp]
 801ad8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad90:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad94:	4401      	add	r1, r0
 801ad96:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ad98:	4402      	add	r2, r0
 801ad9a:	e75c      	b.n	801ac56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ad9c:	b007      	add	sp, #28
 801ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ada2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ada2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ada6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adaa:	b085      	sub	sp, #20
 801adac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801adae:	4693      	mov	fp, r2
 801adb0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801adb4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801adb8:	6870      	ldr	r0, [r6, #4]
 801adba:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801adbc:	fb00 2404 	mla	r4, r0, r4, r2
 801adc0:	6832      	ldr	r2, [r6, #0]
 801adc2:	9100      	str	r1, [sp, #0]
 801adc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801adc8:	682a      	ldr	r2, [r5, #0]
 801adca:	9201      	str	r2, [sp, #4]
 801adcc:	686a      	ldr	r2, [r5, #4]
 801adce:	3204      	adds	r2, #4
 801add0:	9202      	str	r2, [sp, #8]
 801add2:	9a00      	ldr	r2, [sp, #0]
 801add4:	2a00      	cmp	r2, #0
 801add6:	dc03      	bgt.n	801ade0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801add8:	f1bb 0f00 	cmp.w	fp, #0
 801addc:	f340 80a0 	ble.w	801af20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ade0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ade2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ade6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801adea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801adec:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801adf0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	dd0c      	ble.n	801ae12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801adf8:	1406      	asrs	r6, r0, #16
 801adfa:	d405      	bmi.n	801ae08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801adfc:	454e      	cmp	r6, r9
 801adfe:	da03      	bge.n	801ae08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ae00:	1416      	asrs	r6, r2, #16
 801ae02:	d401      	bmi.n	801ae08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ae04:	4546      	cmp	r6, r8
 801ae06:	db05      	blt.n	801ae14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae08:	4470      	add	r0, lr
 801ae0a:	4462      	add	r2, ip
 801ae0c:	3b01      	subs	r3, #1
 801ae0e:	3402      	adds	r4, #2
 801ae10:	e7f0      	b.n	801adf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ae12:	d00f      	beq.n	801ae34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ae14:	1e5e      	subs	r6, r3, #1
 801ae16:	fb0e 0706 	mla	r7, lr, r6, r0
 801ae1a:	143f      	asrs	r7, r7, #16
 801ae1c:	d541      	bpl.n	801aea2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ae1e:	4698      	mov	r8, r3
 801ae20:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ae24:	9603      	str	r6, [sp, #12]
 801ae26:	f1b8 0f00 	cmp.w	r8, #0
 801ae2a:	dc59      	bgt.n	801aee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ae2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae34:	9b00      	ldr	r3, [sp, #0]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	dd72      	ble.n	801af20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ae3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae46:	eeb0 6a62 	vmov.f32	s12, s5
 801ae4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae5e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ae62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae66:	eeb0 6a43 	vmov.f32	s12, s6
 801ae6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae6e:	ee12 2a90 	vmov	r2, s5
 801ae72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae7c:	fb92 fef3 	sdiv	lr, r2, r3
 801ae80:	ee13 2a10 	vmov	r2, s6
 801ae84:	fb92 fcf3 	sdiv	ip, r2, r3
 801ae88:	9b00      	ldr	r3, [sp, #0]
 801ae8a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae8e:	3b01      	subs	r3, #1
 801ae90:	9300      	str	r3, [sp, #0]
 801ae92:	eeb0 3a67 	vmov.f32	s6, s15
 801ae96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae98:	eef0 2a47 	vmov.f32	s5, s14
 801ae9c:	bf08      	it	eq
 801ae9e:	465b      	moveq	r3, fp
 801aea0:	e797      	b.n	801add2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801aea2:	454f      	cmp	r7, r9
 801aea4:	dabb      	bge.n	801ae1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aea6:	fb0c 2606 	mla	r6, ip, r6, r2
 801aeaa:	1436      	asrs	r6, r6, #16
 801aeac:	d4b7      	bmi.n	801ae1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aeae:	4546      	cmp	r6, r8
 801aeb0:	dab5      	bge.n	801ae1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aeb2:	461e      	mov	r6, r3
 801aeb4:	46a0      	mov	r8, r4
 801aeb6:	2e00      	cmp	r6, #0
 801aeb8:	ddb8      	ble.n	801ae2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801aeba:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801aebe:	9901      	ldr	r1, [sp, #4]
 801aec0:	1417      	asrs	r7, r2, #16
 801aec2:	fb0a 1707 	mla	r7, sl, r7, r1
 801aec6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801aeca:	f817 7009 	ldrb.w	r7, [r7, r9]
 801aece:	9902      	ldr	r1, [sp, #8]
 801aed0:	4470      	add	r0, lr
 801aed2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801aed6:	4462      	add	r2, ip
 801aed8:	f828 7b02 	strh.w	r7, [r8], #2
 801aedc:	3e01      	subs	r6, #1
 801aede:	e7ea      	b.n	801aeb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801aee0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aee4:	d417      	bmi.n	801af16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aee6:	68ae      	ldr	r6, [r5, #8]
 801aee8:	454e      	cmp	r6, r9
 801aeea:	dd14      	ble.n	801af16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aeec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801aef0:	d411      	bmi.n	801af16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aef2:	68ef      	ldr	r7, [r5, #12]
 801aef4:	4557      	cmp	r7, sl
 801aef6:	dd0e      	ble.n	801af16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801aef8:	f06f 0101 	mvn.w	r1, #1
 801aefc:	9f01      	ldr	r7, [sp, #4]
 801aefe:	b236      	sxth	r6, r6
 801af00:	fb0a 7606 	mla	r6, sl, r6, r7
 801af04:	9f02      	ldr	r7, [sp, #8]
 801af06:	f816 6009 	ldrb.w	r6, [r6, r9]
 801af0a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801af0e:	fb01 f608 	mul.w	r6, r1, r8
 801af12:	9903      	ldr	r1, [sp, #12]
 801af14:	538f      	strh	r7, [r1, r6]
 801af16:	4470      	add	r0, lr
 801af18:	4462      	add	r2, ip
 801af1a:	f108 38ff 	add.w	r8, r8, #4294967295
 801af1e:	e782      	b.n	801ae26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af20:	b005      	add	sp, #20
 801af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af2a:	b087      	sub	sp, #28
 801af2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801af2e:	9102      	str	r1, [sp, #8]
 801af30:	9205      	str	r2, [sp, #20]
 801af32:	6861      	ldr	r1, [r4, #4]
 801af34:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801af38:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801af3c:	9203      	str	r2, [sp, #12]
 801af3e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801af42:	fb01 2000 	mla	r0, r1, r0, r2
 801af46:	6822      	ldr	r2, [r4, #0]
 801af48:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801af4c:	9200      	str	r2, [sp, #0]
 801af4e:	f8dc 2000 	ldr.w	r2, [ip]
 801af52:	9204      	str	r2, [sp, #16]
 801af54:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801af58:	3204      	adds	r2, #4
 801af5a:	9201      	str	r2, [sp, #4]
 801af5c:	9a03      	ldr	r2, [sp, #12]
 801af5e:	43d5      	mvns	r5, r2
 801af60:	b2ed      	uxtb	r5, r5
 801af62:	9a02      	ldr	r2, [sp, #8]
 801af64:	2a00      	cmp	r2, #0
 801af66:	dc03      	bgt.n	801af70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801af68:	9a05      	ldr	r2, [sp, #20]
 801af6a:	2a00      	cmp	r2, #0
 801af6c:	f340 812c 	ble.w	801b1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801af70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af72:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801af76:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801af7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af7c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801af80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801af84:	2b00      	cmp	r3, #0
 801af86:	dd10      	ble.n	801afaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af88:	140c      	asrs	r4, r1, #16
 801af8a:	d405      	bmi.n	801af98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801af8c:	4574      	cmp	r4, lr
 801af8e:	da03      	bge.n	801af98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801af90:	1414      	asrs	r4, r2, #16
 801af92:	d401      	bmi.n	801af98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801af94:	42bc      	cmp	r4, r7
 801af96:	db09      	blt.n	801afac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801af98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af9a:	9800      	ldr	r0, [sp, #0]
 801af9c:	4421      	add	r1, r4
 801af9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801afa0:	3002      	adds	r0, #2
 801afa2:	4422      	add	r2, r4
 801afa4:	3b01      	subs	r3, #1
 801afa6:	9000      	str	r0, [sp, #0]
 801afa8:	e7ec      	b.n	801af84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801afaa:	d071      	beq.n	801b090 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801afac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801afae:	1e5c      	subs	r4, r3, #1
 801afb0:	fb06 1604 	mla	r6, r6, r4, r1
 801afb4:	1436      	asrs	r6, r6, #16
 801afb6:	d45d      	bmi.n	801b074 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afb8:	4576      	cmp	r6, lr
 801afba:	da5b      	bge.n	801b074 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afbc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801afbe:	fb06 2404 	mla	r4, r6, r4, r2
 801afc2:	1424      	asrs	r4, r4, #16
 801afc4:	d456      	bmi.n	801b074 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afc6:	42bc      	cmp	r4, r7
 801afc8:	da54      	bge.n	801b074 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801afca:	4698      	mov	r8, r3
 801afcc:	f8dd 9000 	ldr.w	r9, [sp]
 801afd0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801afd4:	f1b8 0f00 	cmp.w	r8, #0
 801afd8:	dd54      	ble.n	801b084 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801afda:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801afde:	9804      	ldr	r0, [sp, #16]
 801afe0:	1414      	asrs	r4, r2, #16
 801afe2:	fb07 0404 	mla	r4, r7, r4, r0
 801afe6:	140e      	asrs	r6, r1, #16
 801afe8:	f814 e006 	ldrb.w	lr, [r4, r6]
 801afec:	9801      	ldr	r0, [sp, #4]
 801afee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aff2:	eb00 0b0e 	add.w	fp, r0, lr
 801aff6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801affa:	f8b9 4000 	ldrh.w	r4, [r9]
 801affe:	fb16 f60a 	smulbb	r6, r6, sl
 801b002:	1227      	asrs	r7, r4, #8
 801b004:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b008:	fb07 6705 	mla	r7, r7, r5, r6
 801b00c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b010:	10e6      	asrs	r6, r4, #3
 801b012:	00e4      	lsls	r4, r4, #3
 801b014:	b2e4      	uxtb	r4, r4
 801b016:	fb1b fb0a 	smulbb	fp, fp, sl
 801b01a:	fb14 f405 	smulbb	r4, r4, r5
 801b01e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801b022:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b026:	fb06 b605 	mla	r6, r6, r5, fp
 801b02a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801b02e:	b2bf      	uxth	r7, r7
 801b030:	b2b6      	uxth	r6, r6
 801b032:	fa1f fe8e 	uxth.w	lr, lr
 801b036:	1c7c      	adds	r4, r7, #1
 801b038:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b03c:	f106 0b01 	add.w	fp, r6, #1
 801b040:	f10e 0401 	add.w	r4, lr, #1
 801b044:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b046:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801b04a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b04e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b052:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b056:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b05a:	4327      	orrs	r7, r4
 801b05c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b060:	4401      	add	r1, r0
 801b062:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b064:	ea47 070b 	orr.w	r7, r7, fp
 801b068:	f829 7b02 	strh.w	r7, [r9], #2
 801b06c:	4402      	add	r2, r0
 801b06e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b072:	e7af      	b.n	801afd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b074:	f04f 0e00 	mov.w	lr, #0
 801b078:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801b07c:	eb03 040e 	add.w	r4, r3, lr
 801b080:	2c00      	cmp	r4, #0
 801b082:	dc43      	bgt.n	801b10c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b084:	9a00      	ldr	r2, [sp, #0]
 801b086:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b08a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b08e:	9300      	str	r3, [sp, #0]
 801b090:	9b02      	ldr	r3, [sp, #8]
 801b092:	2b00      	cmp	r3, #0
 801b094:	f340 8098 	ble.w	801b1c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b09c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0ac:	eef0 6a62 	vmov.f32	s13, s5
 801b0b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0c4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b0c8:	eef0 6a43 	vmov.f32	s13, s6
 801b0cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0d0:	ee12 2a90 	vmov	r2, s5
 801b0d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0de:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0e2:	ee13 2a10 	vmov	r2, s6
 801b0e6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0ea:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b0ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0f2:	9314      	str	r3, [sp, #80]	; 0x50
 801b0f4:	9b02      	ldr	r3, [sp, #8]
 801b0f6:	9a05      	ldr	r2, [sp, #20]
 801b0f8:	3b01      	subs	r3, #1
 801b0fa:	9302      	str	r3, [sp, #8]
 801b0fc:	eeb0 3a67 	vmov.f32	s6, s15
 801b100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b102:	eef0 2a47 	vmov.f32	s5, s14
 801b106:	bf08      	it	eq
 801b108:	4613      	moveq	r3, r2
 801b10a:	e72a      	b.n	801af62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b10c:	140f      	asrs	r7, r1, #16
 801b10e:	d454      	bmi.n	801b1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b110:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b114:	42be      	cmp	r6, r7
 801b116:	dd50      	ble.n	801b1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b118:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b11c:	d44d      	bmi.n	801b1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b11e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801b122:	4544      	cmp	r4, r8
 801b124:	dd49      	ble.n	801b1ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b126:	f06f 0001 	mvn.w	r0, #1
 801b12a:	9c04      	ldr	r4, [sp, #16]
 801b12c:	b236      	sxth	r6, r6
 801b12e:	fb08 4606 	mla	r6, r8, r6, r4
 801b132:	f816 8007 	ldrb.w	r8, [r6, r7]
 801b136:	9c01      	ldr	r4, [sp, #4]
 801b138:	fb00 fa0e 	mul.w	sl, r0, lr
 801b13c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b140:	eb04 0b08 	add.w	fp, r4, r8
 801b144:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b148:	9800      	ldr	r0, [sp, #0]
 801b14a:	fb16 f609 	smulbb	r6, r6, r9
 801b14e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801b152:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b156:	1227      	asrs	r7, r4, #8
 801b158:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b15c:	fb07 6705 	mla	r7, r7, r5, r6
 801b160:	10e6      	asrs	r6, r4, #3
 801b162:	00e4      	lsls	r4, r4, #3
 801b164:	b2e4      	uxtb	r4, r4
 801b166:	fb1b fb09 	smulbb	fp, fp, r9
 801b16a:	9801      	ldr	r0, [sp, #4]
 801b16c:	fb14 f405 	smulbb	r4, r4, r5
 801b170:	f810 8008 	ldrb.w	r8, [r0, r8]
 801b174:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b178:	fb06 b605 	mla	r6, r6, r5, fp
 801b17c:	fb08 4809 	mla	r8, r8, r9, r4
 801b180:	b2bf      	uxth	r7, r7
 801b182:	b2b6      	uxth	r6, r6
 801b184:	fa1f f888 	uxth.w	r8, r8
 801b188:	1c7c      	adds	r4, r7, #1
 801b18a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b18e:	f106 0b01 	add.w	fp, r6, #1
 801b192:	f108 0401 	add.w	r4, r8, #1
 801b196:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801b19a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b19e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b1a2:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b1a6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b1aa:	4327      	orrs	r7, r4
 801b1ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b1b0:	9800      	ldr	r0, [sp, #0]
 801b1b2:	ea47 070b 	orr.w	r7, r7, fp
 801b1b6:	f820 700a 	strh.w	r7, [r0, sl]
 801b1ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b1bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b1c0:	4401      	add	r1, r0
 801b1c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b1c4:	4402      	add	r2, r0
 801b1c6:	e759      	b.n	801b07c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b1c8:	b007      	add	sp, #28
 801b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b1d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d8:	b085      	sub	sp, #20
 801b1da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b1dc:	9203      	str	r2, [sp, #12]
 801b1de:	6870      	ldr	r0, [r6, #4]
 801b1e0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b1e4:	fb00 2404 	mla	r4, r0, r4, r2
 801b1e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b1ea:	6832      	ldr	r2, [r6, #0]
 801b1ec:	686f      	ldr	r7, [r5, #4]
 801b1ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b1f2:	682a      	ldr	r2, [r5, #0]
 801b1f4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801b1f8:	9101      	str	r1, [sp, #4]
 801b1fa:	9202      	str	r2, [sp, #8]
 801b1fc:	3704      	adds	r7, #4
 801b1fe:	9a01      	ldr	r2, [sp, #4]
 801b200:	2a00      	cmp	r2, #0
 801b202:	dc03      	bgt.n	801b20c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b204:	9a03      	ldr	r2, [sp, #12]
 801b206:	2a00      	cmp	r2, #0
 801b208:	f340 80cc 	ble.w	801b3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b20c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b20e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b212:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b216:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b218:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b21c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b220:	2b00      	cmp	r3, #0
 801b222:	dd0d      	ble.n	801b240 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b224:	1406      	asrs	r6, r0, #16
 801b226:	d405      	bmi.n	801b234 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b228:	454e      	cmp	r6, r9
 801b22a:	da03      	bge.n	801b234 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b22c:	1416      	asrs	r6, r2, #16
 801b22e:	d401      	bmi.n	801b234 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b230:	4546      	cmp	r6, r8
 801b232:	db06      	blt.n	801b242 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b234:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b236:	4460      	add	r0, ip
 801b238:	4432      	add	r2, r6
 801b23a:	3b01      	subs	r3, #1
 801b23c:	3402      	adds	r4, #2
 801b23e:	e7ef      	b.n	801b220 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b240:	d00f      	beq.n	801b262 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b242:	1e5e      	subs	r6, r3, #1
 801b244:	fb0c 0e06 	mla	lr, ip, r6, r0
 801b248:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b24c:	d543      	bpl.n	801b2d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b24e:	4698      	mov	r8, r3
 801b250:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801b254:	f1b8 0f00 	cmp.w	r8, #0
 801b258:	dc71      	bgt.n	801b33e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b25a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b25e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b262:	9b01      	ldr	r3, [sp, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	f340 809d 	ble.w	801b3a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b26a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b26e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b272:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b276:	eeb0 6a62 	vmov.f32	s12, s5
 801b27a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b27e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b282:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b286:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b28a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b28e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b292:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b296:	eeb0 6a43 	vmov.f32	s12, s6
 801b29a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b29e:	ee12 2a90 	vmov	r2, s5
 801b2a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b2ac:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2b0:	ee13 2a10 	vmov	r2, s6
 801b2b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2b8:	9312      	str	r3, [sp, #72]	; 0x48
 801b2ba:	9b01      	ldr	r3, [sp, #4]
 801b2bc:	9a03      	ldr	r2, [sp, #12]
 801b2be:	3b01      	subs	r3, #1
 801b2c0:	9301      	str	r3, [sp, #4]
 801b2c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b2cc:	bf08      	it	eq
 801b2ce:	4613      	moveq	r3, r2
 801b2d0:	eef0 2a47 	vmov.f32	s5, s14
 801b2d4:	e793      	b.n	801b1fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b2d6:	45ce      	cmp	lr, r9
 801b2d8:	dab9      	bge.n	801b24e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b2da:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b2dc:	fb01 2606 	mla	r6, r1, r6, r2
 801b2e0:	1436      	asrs	r6, r6, #16
 801b2e2:	d4b4      	bmi.n	801b24e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b2e4:	4546      	cmp	r6, r8
 801b2e6:	dab2      	bge.n	801b24e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b2e8:	4698      	mov	r8, r3
 801b2ea:	46a2      	mov	sl, r4
 801b2ec:	f1b8 0f00 	cmp.w	r8, #0
 801b2f0:	ddb3      	ble.n	801b25a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b2f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b2f6:	9902      	ldr	r1, [sp, #8]
 801b2f8:	1416      	asrs	r6, r2, #16
 801b2fa:	fb09 1606 	mla	r6, r9, r6, r1
 801b2fe:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801b302:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801b306:	4929      	ldr	r1, [pc, #164]	; (801b3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801b308:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b30c:	eb07 0b0e 	add.w	fp, r7, lr
 801b310:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801b314:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b318:	00f6      	lsls	r6, r6, #3
 801b31a:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801b31e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b322:	ea49 0606 	orr.w	r6, r9, r6
 801b326:	f817 900e 	ldrb.w	r9, [r7, lr]
 801b32a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b32c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801b330:	f82a 6b02 	strh.w	r6, [sl], #2
 801b334:	4460      	add	r0, ip
 801b336:	440a      	add	r2, r1
 801b338:	f108 38ff 	add.w	r8, r8, #4294967295
 801b33c:	e7d6      	b.n	801b2ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b33e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b342:	d429      	bmi.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b344:	68ae      	ldr	r6, [r5, #8]
 801b346:	454e      	cmp	r6, r9
 801b348:	dd26      	ble.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b34a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b34e:	d423      	bmi.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b350:	68e9      	ldr	r1, [r5, #12]
 801b352:	4559      	cmp	r1, fp
 801b354:	dd20      	ble.n	801b398 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b356:	9902      	ldr	r1, [sp, #8]
 801b358:	fa0f fe86 	sxth.w	lr, r6
 801b35c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801b360:	f06f 0101 	mvn.w	r1, #1
 801b364:	f81e e009 	ldrb.w	lr, [lr, r9]
 801b368:	fb01 f908 	mul.w	r9, r1, r8
 801b36c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b370:	eb07 060e 	add.w	r6, r7, lr
 801b374:	f896 b002 	ldrb.w	fp, [r6, #2]
 801b378:	7876      	ldrb	r6, [r6, #1]
 801b37a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801b37e:	00f6      	lsls	r6, r6, #3
 801b380:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801b384:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b388:	ea4b 0606 	orr.w	r6, fp, r6
 801b38c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801b390:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801b394:	f82a 6009 	strh.w	r6, [sl, r9]
 801b398:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b39a:	4460      	add	r0, ip
 801b39c:	440a      	add	r2, r1
 801b39e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3a2:	e757      	b.n	801b254 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b3a4:	b005      	add	sp, #20
 801b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3aa:	bf00      	nop
 801b3ac:	fffff800 	.word	0xfffff800

0801b3b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b8:	b087      	sub	sp, #28
 801b3ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b3bc:	468b      	mov	fp, r1
 801b3be:	9204      	str	r2, [sp, #16]
 801b3c0:	6841      	ldr	r1, [r0, #4]
 801b3c2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b3c6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801b3ca:	9205      	str	r2, [sp, #20]
 801b3cc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b3d0:	fb01 2404 	mla	r4, r1, r4, r2
 801b3d4:	6802      	ldr	r2, [r0, #0]
 801b3d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b3da:	f8dc 2000 	ldr.w	r2, [ip]
 801b3de:	9201      	str	r2, [sp, #4]
 801b3e0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b3e4:	3204      	adds	r2, #4
 801b3e6:	9202      	str	r2, [sp, #8]
 801b3e8:	f1bb 0f00 	cmp.w	fp, #0
 801b3ec:	dc03      	bgt.n	801b3f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b3ee:	9a04      	ldr	r2, [sp, #16]
 801b3f0:	2a00      	cmp	r2, #0
 801b3f2:	f340 8138 	ble.w	801b666 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b3f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b3f8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b3fc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b400:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b402:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801b406:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	dd0e      	ble.n	801b42c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b40e:	1402      	asrs	r2, r0, #16
 801b410:	d405      	bmi.n	801b41e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b412:	42ba      	cmp	r2, r7
 801b414:	da03      	bge.n	801b41e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b416:	140a      	asrs	r2, r1, #16
 801b418:	d401      	bmi.n	801b41e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b41a:	42b2      	cmp	r2, r6
 801b41c:	db07      	blt.n	801b42e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b41e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b420:	3b01      	subs	r3, #1
 801b422:	4410      	add	r0, r2
 801b424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b426:	3402      	adds	r4, #2
 801b428:	4411      	add	r1, r2
 801b42a:	e7ee      	b.n	801b40a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b42c:	d019      	beq.n	801b462 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b42e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b430:	1e5a      	subs	r2, r3, #1
 801b432:	fb05 0502 	mla	r5, r5, r2, r0
 801b436:	142d      	asrs	r5, r5, #16
 801b438:	d409      	bmi.n	801b44e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b43a:	42bd      	cmp	r5, r7
 801b43c:	da07      	bge.n	801b44e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b43e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b440:	fb05 1202 	mla	r2, r5, r2, r1
 801b444:	1412      	asrs	r2, r2, #16
 801b446:	d402      	bmi.n	801b44e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b448:	42b2      	cmp	r2, r6
 801b44a:	f2c0 80ac 	blt.w	801b5a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801b44e:	f04f 0e00 	mov.w	lr, #0
 801b452:	eb03 020e 	add.w	r2, r3, lr
 801b456:	2a00      	cmp	r2, #0
 801b458:	dc3e      	bgt.n	801b4d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b45a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b45e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b462:	f1bb 0f00 	cmp.w	fp, #0
 801b466:	f340 80fe 	ble.w	801b666 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b46a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b46e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b472:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b476:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b47a:	eeb0 6a62 	vmov.f32	s12, s5
 801b47e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b482:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b486:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b48a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b48e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b492:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b496:	eeb0 6a43 	vmov.f32	s12, s6
 801b49a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b49e:	ee12 2a90 	vmov	r2, s5
 801b4a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b4ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4b0:	ee13 2a10 	vmov	r2, s6
 801b4b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b4b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4b8:	f1bb 0b01 	subs.w	fp, fp, #1
 801b4bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4c0:	9a04      	ldr	r2, [sp, #16]
 801b4c2:	9314      	str	r3, [sp, #80]	; 0x50
 801b4c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b4c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4ca:	eeb0 3a67 	vmov.f32	s6, s15
 801b4ce:	bf08      	it	eq
 801b4d0:	4613      	moveq	r3, r2
 801b4d2:	eef0 2a47 	vmov.f32	s5, s14
 801b4d6:	e787      	b.n	801b3e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b4d8:	1406      	asrs	r6, r0, #16
 801b4da:	d45d      	bmi.n	801b598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b4dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801b4e0:	42b5      	cmp	r5, r6
 801b4e2:	dd59      	ble.n	801b598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b4e4:	140f      	asrs	r7, r1, #16
 801b4e6:	d457      	bmi.n	801b598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b4e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b4ec:	42ba      	cmp	r2, r7
 801b4ee:	dd53      	ble.n	801b598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b4f0:	9a01      	ldr	r2, [sp, #4]
 801b4f2:	b22d      	sxth	r5, r5
 801b4f4:	fb07 2505 	mla	r5, r7, r5, r2
 801b4f8:	5daa      	ldrb	r2, [r5, r6]
 801b4fa:	9d02      	ldr	r5, [sp, #8]
 801b4fc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b500:	0e2e      	lsrs	r6, r5, #24
 801b502:	d049      	beq.n	801b598 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b504:	f06f 0201 	mvn.w	r2, #1
 801b508:	fb02 f20e 	mul.w	r2, r2, lr
 801b50c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801b510:	9203      	str	r2, [sp, #12]
 801b512:	9a05      	ldr	r2, [sp, #20]
 801b514:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b518:	4356      	muls	r6, r2
 801b51a:	1c72      	adds	r2, r6, #1
 801b51c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b520:	1212      	asrs	r2, r2, #8
 801b522:	fa1f f982 	uxth.w	r9, r2
 801b526:	43d2      	mvns	r2, r2
 801b528:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b52c:	fb16 f609 	smulbb	r6, r6, r9
 801b530:	b2ed      	uxtb	r5, r5
 801b532:	ea4f 2728 	mov.w	r7, r8, asr #8
 801b536:	fb15 f509 	smulbb	r5, r5, r9
 801b53a:	b2d2      	uxtb	r2, r2
 801b53c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b540:	fb07 6702 	mla	r7, r7, r2, r6
 801b544:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b548:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b54c:	fb1a fa09 	smulbb	sl, sl, r9
 801b550:	fa5f f888 	uxtb.w	r8, r8
 801b554:	fb08 5502 	mla	r5, r8, r2, r5
 801b558:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b55c:	fb06 a602 	mla	r6, r6, r2, sl
 801b560:	b2bf      	uxth	r7, r7
 801b562:	b2ad      	uxth	r5, r5
 801b564:	1c7a      	adds	r2, r7, #1
 801b566:	f105 0a01 	add.w	sl, r5, #1
 801b56a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b56e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b572:	b2b6      	uxth	r6, r6
 801b574:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b578:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b57c:	ea4a 0707 	orr.w	r7, sl, r7
 801b580:	f106 0a01 	add.w	sl, r6, #1
 801b584:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b588:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b58c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b590:	9a03      	ldr	r2, [sp, #12]
 801b592:	ea47 070a 	orr.w	r7, r7, sl
 801b596:	52a7      	strh	r7, [r4, r2]
 801b598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b59a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b59e:	4410      	add	r0, r2
 801b5a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b5a2:	4411      	add	r1, r2
 801b5a4:	e755      	b.n	801b452 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b5a6:	f04f 0800 	mov.w	r8, #0
 801b5aa:	eba3 0208 	sub.w	r2, r3, r8
 801b5ae:	2a00      	cmp	r2, #0
 801b5b0:	f77f af53 	ble.w	801b45a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b5b4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801b5b8:	9f01      	ldr	r7, [sp, #4]
 801b5ba:	140a      	asrs	r2, r1, #16
 801b5bc:	fb06 7202 	mla	r2, r6, r2, r7
 801b5c0:	1405      	asrs	r5, r0, #16
 801b5c2:	5d52      	ldrb	r2, [r2, r5]
 801b5c4:	9d02      	ldr	r5, [sp, #8]
 801b5c6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b5ca:	0e2e      	lsrs	r6, r5, #24
 801b5cc:	d044      	beq.n	801b658 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b5ce:	9a05      	ldr	r2, [sp, #20]
 801b5d0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b5d4:	4356      	muls	r6, r2
 801b5d6:	1c72      	adds	r2, r6, #1
 801b5d8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b5dc:	1212      	asrs	r2, r2, #8
 801b5de:	fa1f f982 	uxth.w	r9, r2
 801b5e2:	43d2      	mvns	r2, r2
 801b5e4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b5e8:	fb16 f609 	smulbb	r6, r6, r9
 801b5ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b5f0:	b2ed      	uxtb	r5, r5
 801b5f2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b5f6:	fb15 f509 	smulbb	r5, r5, r9
 801b5fa:	b2d2      	uxtb	r2, r2
 801b5fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b600:	fb07 6702 	mla	r7, r7, r2, r6
 801b604:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b608:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b60c:	fb1a fa09 	smulbb	sl, sl, r9
 801b610:	fa5f fe8e 	uxtb.w	lr, lr
 801b614:	fb0e 5502 	mla	r5, lr, r2, r5
 801b618:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b61c:	fb06 a602 	mla	r6, r6, r2, sl
 801b620:	b2bf      	uxth	r7, r7
 801b622:	b2ad      	uxth	r5, r5
 801b624:	1c7a      	adds	r2, r7, #1
 801b626:	f105 0a01 	add.w	sl, r5, #1
 801b62a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b62e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b632:	b2b6      	uxth	r6, r6
 801b634:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b638:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b63c:	ea4a 0707 	orr.w	r7, sl, r7
 801b640:	f106 0a01 	add.w	sl, r6, #1
 801b644:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b648:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b64c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b650:	ea47 070a 	orr.w	r7, r7, sl
 801b654:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b65a:	f108 0801 	add.w	r8, r8, #1
 801b65e:	4410      	add	r0, r2
 801b660:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b662:	4411      	add	r1, r2
 801b664:	e7a1      	b.n	801b5aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b666:	b007      	add	sp, #28
 801b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b66c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b66c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b674:	b085      	sub	sp, #20
 801b676:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b678:	468b      	mov	fp, r1
 801b67a:	6841      	ldr	r1, [r0, #4]
 801b67c:	9203      	str	r2, [sp, #12]
 801b67e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b682:	fb01 2404 	mla	r4, r1, r4, r2
 801b686:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801b68a:	6802      	ldr	r2, [r0, #0]
 801b68c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b690:	f8de 2000 	ldr.w	r2, [lr]
 801b694:	9200      	str	r2, [sp, #0]
 801b696:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b69a:	3204      	adds	r2, #4
 801b69c:	9201      	str	r2, [sp, #4]
 801b69e:	f1bb 0f00 	cmp.w	fp, #0
 801b6a2:	dc03      	bgt.n	801b6ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b6a4:	9a03      	ldr	r2, [sp, #12]
 801b6a6:	2a00      	cmp	r2, #0
 801b6a8:	f340 8153 	ble.w	801b952 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b6ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b6ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b6b2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b6b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6b8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b6bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	dd0e      	ble.n	801b6e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b6c4:	1408      	asrs	r0, r1, #16
 801b6c6:	d405      	bmi.n	801b6d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b6c8:	42b8      	cmp	r0, r7
 801b6ca:	da03      	bge.n	801b6d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b6cc:	1410      	asrs	r0, r2, #16
 801b6ce:	d401      	bmi.n	801b6d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b6d0:	42b0      	cmp	r0, r6
 801b6d2:	db07      	blt.n	801b6e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b6d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b6d6:	3b01      	subs	r3, #1
 801b6d8:	4401      	add	r1, r0
 801b6da:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b6dc:	3402      	adds	r4, #2
 801b6de:	4402      	add	r2, r0
 801b6e0:	e7ee      	b.n	801b6c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b6e2:	d017      	beq.n	801b714 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b6e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b6e6:	1e58      	subs	r0, r3, #1
 801b6e8:	fb05 1500 	mla	r5, r5, r0, r1
 801b6ec:	142d      	asrs	r5, r5, #16
 801b6ee:	d409      	bmi.n	801b704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6f0:	42bd      	cmp	r5, r7
 801b6f2:	da07      	bge.n	801b704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b6f6:	fb05 2000 	mla	r0, r5, r0, r2
 801b6fa:	1400      	asrs	r0, r0, #16
 801b6fc:	d402      	bmi.n	801b704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b6fe:	42b0      	cmp	r0, r6
 801b700:	f2c0 80bc 	blt.w	801b87c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b704:	2600      	movs	r6, #0
 801b706:	1998      	adds	r0, r3, r6
 801b708:	2800      	cmp	r0, #0
 801b70a:	dc3e      	bgt.n	801b78a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b70c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b710:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b714:	f1bb 0f00 	cmp.w	fp, #0
 801b718:	f340 811b 	ble.w	801b952 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b71c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b720:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b724:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b728:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b72c:	eeb0 6a62 	vmov.f32	s12, s5
 801b730:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b734:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b738:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b740:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b744:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b748:	eeb0 6a43 	vmov.f32	s12, s6
 801b74c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b750:	ee12 2a90 	vmov	r2, s5
 801b754:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b75a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b75e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b762:	ee13 2a10 	vmov	r2, s6
 801b766:	9311      	str	r3, [sp, #68]	; 0x44
 801b768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b76a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b76e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b772:	9a03      	ldr	r2, [sp, #12]
 801b774:	9312      	str	r3, [sp, #72]	; 0x48
 801b776:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b77c:	eeb0 3a67 	vmov.f32	s6, s15
 801b780:	bf08      	it	eq
 801b782:	4613      	moveq	r3, r2
 801b784:	eef0 2a47 	vmov.f32	s5, s14
 801b788:	e789      	b.n	801b69e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801b78a:	140f      	asrs	r7, r1, #16
 801b78c:	d426      	bmi.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b78e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b792:	42bd      	cmp	r5, r7
 801b794:	dd22      	ble.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b796:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b79a:	d41f      	bmi.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b79c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b7a0:	4560      	cmp	r0, ip
 801b7a2:	dd1b      	ble.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b7a4:	9800      	ldr	r0, [sp, #0]
 801b7a6:	b22d      	sxth	r5, r5
 801b7a8:	fb0c 0505 	mla	r5, ip, r5, r0
 801b7ac:	5de8      	ldrb	r0, [r5, r7]
 801b7ae:	9d01      	ldr	r5, [sp, #4]
 801b7b0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b7b4:	0e07      	lsrs	r7, r0, #24
 801b7b6:	2fff      	cmp	r7, #255	; 0xff
 801b7b8:	d116      	bne.n	801b7e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801b7ba:	f06f 0501 	mvn.w	r5, #1
 801b7be:	fb05 f706 	mul.w	r7, r5, r6
 801b7c2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801b7c6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801b7ca:	0945      	lsrs	r5, r0, #5
 801b7cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b7d0:	ea4c 0505 	orr.w	r5, ip, r5
 801b7d4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801b7d8:	4305      	orrs	r5, r0
 801b7da:	53e5      	strh	r5, [r4, r7]
 801b7dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b7de:	3e01      	subs	r6, #1
 801b7e0:	4401      	add	r1, r0
 801b7e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b7e4:	4402      	add	r2, r0
 801b7e6:	e78e      	b.n	801b706 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b7e8:	b2fd      	uxtb	r5, r7
 801b7ea:	2f00      	cmp	r7, #0
 801b7ec:	d0f6      	beq.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b7ee:	f06f 0701 	mvn.w	r7, #1
 801b7f2:	fa1f f985 	uxth.w	r9, r5
 801b7f6:	43ed      	mvns	r5, r5
 801b7f8:	4377      	muls	r7, r6
 801b7fa:	f834 8007 	ldrh.w	r8, [r4, r7]
 801b7fe:	9702      	str	r7, [sp, #8]
 801b800:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801b804:	fb17 f709 	smulbb	r7, r7, r9
 801b808:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b80c:	b2c0      	uxtb	r0, r0
 801b80e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801b812:	fb10 f009 	smulbb	r0, r0, r9
 801b816:	b2ed      	uxtb	r5, r5
 801b818:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b81c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801b820:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801b824:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b828:	fb1a fa09 	smulbb	sl, sl, r9
 801b82c:	fa5f f888 	uxtb.w	r8, r8
 801b830:	fb08 0005 	mla	r0, r8, r5, r0
 801b834:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b838:	fb07 a705 	mla	r7, r7, r5, sl
 801b83c:	b280      	uxth	r0, r0
 801b83e:	fa1f fc8c 	uxth.w	ip, ip
 801b842:	f100 0a01 	add.w	sl, r0, #1
 801b846:	f10c 0501 	add.w	r5, ip, #1
 801b84a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801b84e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b852:	b2bf      	uxth	r7, r7
 801b854:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b858:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b85c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801b860:	f107 0a01 	add.w	sl, r7, #1
 801b864:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b868:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b86c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b870:	9802      	ldr	r0, [sp, #8]
 801b872:	ea4c 0c0a 	orr.w	ip, ip, sl
 801b876:	f824 c000 	strh.w	ip, [r4, r0]
 801b87a:	e7af      	b.n	801b7dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801b87c:	f04f 0800 	mov.w	r8, #0
 801b880:	eba3 0008 	sub.w	r0, r3, r8
 801b884:	2800      	cmp	r0, #0
 801b886:	f77f af41 	ble.w	801b70c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b88a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801b88e:	9f00      	ldr	r7, [sp, #0]
 801b890:	1410      	asrs	r0, r2, #16
 801b892:	fb06 7000 	mla	r0, r6, r0, r7
 801b896:	140d      	asrs	r5, r1, #16
 801b898:	5d40      	ldrb	r0, [r0, r5]
 801b89a:	9d01      	ldr	r5, [sp, #4]
 801b89c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801b8a0:	0e2e      	lsrs	r6, r5, #24
 801b8a2:	2eff      	cmp	r6, #255	; 0xff
 801b8a4:	d112      	bne.n	801b8cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801b8a6:	482c      	ldr	r0, [pc, #176]	; (801b958 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801b8a8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801b8ac:	0968      	lsrs	r0, r5, #5
 801b8ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b8b2:	4330      	orrs	r0, r6
 801b8b4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b8b8:	4328      	orrs	r0, r5
 801b8ba:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801b8be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b8c0:	f108 0801 	add.w	r8, r8, #1
 801b8c4:	4401      	add	r1, r0
 801b8c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b8c8:	4402      	add	r2, r0
 801b8ca:	e7d9      	b.n	801b880 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b8cc:	b2f0      	uxtb	r0, r6
 801b8ce:	2e00      	cmp	r6, #0
 801b8d0:	d0f5      	beq.n	801b8be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b8d2:	fa1f f980 	uxth.w	r9, r0
 801b8d6:	43c0      	mvns	r0, r0
 801b8d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b8dc:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801b8e0:	fb16 f609 	smulbb	r6, r6, r9
 801b8e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b8e8:	b2ed      	uxtb	r5, r5
 801b8ea:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b8ee:	fb15 f509 	smulbb	r5, r5, r9
 801b8f2:	b2c0      	uxtb	r0, r0
 801b8f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b8f8:	fb07 6700 	mla	r7, r7, r0, r6
 801b8fc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801b900:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b904:	fb1a fa09 	smulbb	sl, sl, r9
 801b908:	fa5f fc8c 	uxtb.w	ip, ip
 801b90c:	fb0c 5500 	mla	r5, ip, r0, r5
 801b910:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b914:	fb06 a600 	mla	r6, r6, r0, sl
 801b918:	b2bf      	uxth	r7, r7
 801b91a:	b2ad      	uxth	r5, r5
 801b91c:	1c78      	adds	r0, r7, #1
 801b91e:	f105 0a01 	add.w	sl, r5, #1
 801b922:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801b926:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b92a:	b2b6      	uxth	r6, r6
 801b92c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b930:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b934:	ea4a 0707 	orr.w	r7, sl, r7
 801b938:	f106 0a01 	add.w	sl, r6, #1
 801b93c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b940:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b944:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b948:	ea47 070a 	orr.w	r7, r7, sl
 801b94c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b950:	e7b5      	b.n	801b8be <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801b952:	b005      	add	sp, #20
 801b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b958:	fffff800 	.word	0xfffff800

0801b95c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b95c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	b087      	sub	sp, #28
 801b966:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b968:	468b      	mov	fp, r1
 801b96a:	9204      	str	r2, [sp, #16]
 801b96c:	6861      	ldr	r1, [r4, #4]
 801b96e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b972:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b976:	9205      	str	r2, [sp, #20]
 801b978:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b97c:	fb01 2000 	mla	r0, r1, r0, r2
 801b980:	6822      	ldr	r2, [r4, #0]
 801b982:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801b986:	f8de 2000 	ldr.w	r2, [lr]
 801b98a:	9201      	str	r2, [sp, #4]
 801b98c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b990:	9202      	str	r2, [sp, #8]
 801b992:	f1bb 0f00 	cmp.w	fp, #0
 801b996:	dc03      	bgt.n	801b9a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b998:	9a04      	ldr	r2, [sp, #16]
 801b99a:	2a00      	cmp	r2, #0
 801b99c:	f340 8142 	ble.w	801bc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801b9a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9a2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b9a6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b9aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b9b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	dd0e      	ble.n	801b9d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b9b8:	140c      	asrs	r4, r1, #16
 801b9ba:	d405      	bmi.n	801b9c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b9bc:	42bc      	cmp	r4, r7
 801b9be:	da03      	bge.n	801b9c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b9c0:	1414      	asrs	r4, r2, #16
 801b9c2:	d401      	bmi.n	801b9c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b9c4:	42b4      	cmp	r4, r6
 801b9c6:	db07      	blt.n	801b9d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b9ca:	3b01      	subs	r3, #1
 801b9cc:	4421      	add	r1, r4
 801b9ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b9d0:	3002      	adds	r0, #2
 801b9d2:	4422      	add	r2, r4
 801b9d4:	e7ee      	b.n	801b9b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b9d6:	d019      	beq.n	801ba0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b9d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b9da:	1e5c      	subs	r4, r3, #1
 801b9dc:	fb05 1504 	mla	r5, r5, r4, r1
 801b9e0:	142d      	asrs	r5, r5, #16
 801b9e2:	d409      	bmi.n	801b9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b9e4:	42bd      	cmp	r5, r7
 801b9e6:	da07      	bge.n	801b9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b9e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b9ea:	fb05 2404 	mla	r4, r5, r4, r2
 801b9ee:	1424      	asrs	r4, r4, #16
 801b9f0:	d402      	bmi.n	801b9f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b9f2:	42b4      	cmp	r4, r6
 801b9f4:	f2c0 80b1 	blt.w	801bb5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801b9f8:	f04f 0800 	mov.w	r8, #0
 801b9fc:	eb03 0408 	add.w	r4, r3, r8
 801ba00:	2c00      	cmp	r4, #0
 801ba02:	dc3e      	bgt.n	801ba82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ba04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ba0c:	f1bb 0f00 	cmp.w	fp, #0
 801ba10:	f340 8108 	ble.w	801bc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ba14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba24:	eeb0 6a62 	vmov.f32	s12, s5
 801ba28:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba30:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba3c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba40:	eeb0 6a43 	vmov.f32	s12, s6
 801ba44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba48:	ee12 2a90 	vmov	r2, s5
 801ba4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba5a:	ee13 2a10 	vmov	r2, s6
 801ba5e:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba62:	f1bb 0b01 	subs.w	fp, fp, #1
 801ba66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba6a:	9a04      	ldr	r2, [sp, #16]
 801ba6c:	9314      	str	r3, [sp, #80]	; 0x50
 801ba6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba74:	eeb0 3a67 	vmov.f32	s6, s15
 801ba78:	bf08      	it	eq
 801ba7a:	4613      	moveq	r3, r2
 801ba7c:	eef0 2a47 	vmov.f32	s5, s14
 801ba80:	e787      	b.n	801b992 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ba82:	140e      	asrs	r6, r1, #16
 801ba84:	d462      	bmi.n	801bb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ba86:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ba8a:	42b5      	cmp	r5, r6
 801ba8c:	dd5e      	ble.n	801bb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ba8e:	1417      	asrs	r7, r2, #16
 801ba90:	d45c      	bmi.n	801bb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ba92:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ba96:	42bc      	cmp	r4, r7
 801ba98:	dd58      	ble.n	801bb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ba9a:	b22d      	sxth	r5, r5
 801ba9c:	fb07 6505 	mla	r5, r7, r5, r6
 801baa0:	9c02      	ldr	r4, [sp, #8]
 801baa2:	5d66      	ldrb	r6, [r4, r5]
 801baa4:	2e00      	cmp	r6, #0
 801baa6:	d051      	beq.n	801bb4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801baa8:	9c01      	ldr	r4, [sp, #4]
 801baaa:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801baae:	f06f 0401 	mvn.w	r4, #1
 801bab2:	fb04 f408 	mul.w	r4, r4, r8
 801bab6:	5b05      	ldrh	r5, [r0, r4]
 801bab8:	9403      	str	r4, [sp, #12]
 801baba:	9c05      	ldr	r4, [sp, #20]
 801babc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bac0:	4366      	muls	r6, r4
 801bac2:	1c74      	adds	r4, r6, #1
 801bac4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801bac8:	1224      	asrs	r4, r4, #8
 801baca:	b2a7      	uxth	r7, r4
 801bacc:	43e4      	mvns	r4, r4
 801bace:	122e      	asrs	r6, r5, #8
 801bad0:	b2e4      	uxtb	r4, r4
 801bad2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bad6:	fb16 f604 	smulbb	r6, r6, r4
 801bada:	00ed      	lsls	r5, r5, #3
 801badc:	b2ed      	uxtb	r5, r5
 801bade:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801bae2:	fb15 f504 	smulbb	r5, r5, r4
 801bae6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801baea:	fb0c 6c07 	mla	ip, ip, r7, r6
 801baee:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801baf2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801baf6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801bafa:	fb1a fa04 	smulbb	sl, sl, r4
 801bafe:	fa5f f989 	uxtb.w	r9, r9
 801bb02:	fb09 5507 	mla	r5, r9, r7, r5
 801bb06:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bb0a:	fb06 a607 	mla	r6, r6, r7, sl
 801bb0e:	fa1f fc8c 	uxth.w	ip, ip
 801bb12:	b2ad      	uxth	r5, r5
 801bb14:	f10c 0401 	add.w	r4, ip, #1
 801bb18:	f105 0a01 	add.w	sl, r5, #1
 801bb1c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bb20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bb24:	b2b6      	uxth	r6, r6
 801bb26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bb2a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bb2e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bb32:	f106 0a01 	add.w	sl, r6, #1
 801bb36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bb3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bb3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bb42:	9c03      	ldr	r4, [sp, #12]
 801bb44:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bb48:	f820 c004 	strh.w	ip, [r0, r4]
 801bb4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bb4e:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb52:	4421      	add	r1, r4
 801bb54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bb56:	4422      	add	r2, r4
 801bb58:	e750      	b.n	801b9fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bb5a:	f04f 0900 	mov.w	r9, #0
 801bb5e:	eba3 0409 	sub.w	r4, r3, r9
 801bb62:	2c00      	cmp	r4, #0
 801bb64:	f77f af4e 	ble.w	801ba04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bb68:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801bb6c:	140d      	asrs	r5, r1, #16
 801bb6e:	1414      	asrs	r4, r2, #16
 801bb70:	fb06 5404 	mla	r4, r6, r4, r5
 801bb74:	9d02      	ldr	r5, [sp, #8]
 801bb76:	5d2e      	ldrb	r6, [r5, r4]
 801bb78:	2e00      	cmp	r6, #0
 801bb7a:	d04c      	beq.n	801bc16 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801bb7c:	9d01      	ldr	r5, [sp, #4]
 801bb7e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801bb82:	9c05      	ldr	r4, [sp, #20]
 801bb84:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801bb88:	4366      	muls	r6, r4
 801bb8a:	1c74      	adds	r4, r6, #1
 801bb8c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801bb90:	1224      	asrs	r4, r4, #8
 801bb92:	b2a7      	uxth	r7, r4
 801bb94:	43e4      	mvns	r4, r4
 801bb96:	122e      	asrs	r6, r5, #8
 801bb98:	b2e4      	uxtb	r4, r4
 801bb9a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bb9e:	fb16 f604 	smulbb	r6, r6, r4
 801bba2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bba6:	00ed      	lsls	r5, r5, #3
 801bba8:	b2ed      	uxtb	r5, r5
 801bbaa:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bbae:	fb15 f504 	smulbb	r5, r5, r4
 801bbb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bbb6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801bbba:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801bbbe:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801bbc2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bbc6:	fb1a fa04 	smulbb	sl, sl, r4
 801bbca:	fa5f f888 	uxtb.w	r8, r8
 801bbce:	fb08 5507 	mla	r5, r8, r7, r5
 801bbd2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bbd6:	fb06 a607 	mla	r6, r6, r7, sl
 801bbda:	fa1f fc8c 	uxth.w	ip, ip
 801bbde:	b2ad      	uxth	r5, r5
 801bbe0:	f10c 0401 	add.w	r4, ip, #1
 801bbe4:	f105 0a01 	add.w	sl, r5, #1
 801bbe8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bbec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bbf0:	b2b6      	uxth	r6, r6
 801bbf2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bbf6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bbfa:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bbfe:	f106 0a01 	add.w	sl, r6, #1
 801bc02:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bc06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bc0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bc0e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bc12:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801bc16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc18:	f109 0901 	add.w	r9, r9, #1
 801bc1c:	4421      	add	r1, r4
 801bc1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc20:	4422      	add	r2, r4
 801bc22:	e79c      	b.n	801bb5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801bc24:	b007      	add	sp, #28
 801bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc32:	b085      	sub	sp, #20
 801bc34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc36:	468b      	mov	fp, r1
 801bc38:	6861      	ldr	r1, [r4, #4]
 801bc3a:	9203      	str	r2, [sp, #12]
 801bc3c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801bc40:	fb01 2000 	mla	r0, r1, r0, r2
 801bc44:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801bc48:	6822      	ldr	r2, [r4, #0]
 801bc4a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801bc4e:	f8d8 2000 	ldr.w	r2, [r8]
 801bc52:	9200      	str	r2, [sp, #0]
 801bc54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801bc58:	9201      	str	r2, [sp, #4]
 801bc5a:	f1bb 0f00 	cmp.w	fp, #0
 801bc5e:	dc03      	bgt.n	801bc68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bc60:	9a03      	ldr	r2, [sp, #12]
 801bc62:	2a00      	cmp	r2, #0
 801bc64:	f340 8146 	ble.w	801bef4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801bc68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc6a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801bc6e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc74:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801bc78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	dd0e      	ble.n	801bc9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bc80:	140c      	asrs	r4, r1, #16
 801bc82:	d405      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bc84:	42bc      	cmp	r4, r7
 801bc86:	da03      	bge.n	801bc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bc88:	1414      	asrs	r4, r2, #16
 801bc8a:	d401      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bc8c:	42b4      	cmp	r4, r6
 801bc8e:	db07      	blt.n	801bca0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bc92:	3b01      	subs	r3, #1
 801bc94:	4421      	add	r1, r4
 801bc96:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bc98:	3002      	adds	r0, #2
 801bc9a:	4422      	add	r2, r4
 801bc9c:	e7ee      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bc9e:	d017      	beq.n	801bcd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bca0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bca2:	1e5c      	subs	r4, r3, #1
 801bca4:	fb05 1504 	mla	r5, r5, r4, r1
 801bca8:	142d      	asrs	r5, r5, #16
 801bcaa:	d409      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcac:	42bd      	cmp	r5, r7
 801bcae:	da07      	bge.n	801bcc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bcb2:	fb05 2404 	mla	r4, r5, r4, r2
 801bcb6:	1424      	asrs	r4, r4, #16
 801bcb8:	d402      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcba:	42b4      	cmp	r4, r6
 801bcbc:	f2c0 80b3 	blt.w	801be26 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801bcc0:	2600      	movs	r6, #0
 801bcc2:	199c      	adds	r4, r3, r6
 801bcc4:	2c00      	cmp	r4, #0
 801bcc6:	dc3e      	bgt.n	801bd46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bcc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bccc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bcd0:	f1bb 0f00 	cmp.w	fp, #0
 801bcd4:	f340 810e 	ble.w	801bef4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801bcd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bce0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bce4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bce8:	eeb0 6a62 	vmov.f32	s12, s5
 801bcec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd00:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bd04:	eeb0 6a43 	vmov.f32	s12, s6
 801bd08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd0c:	ee12 2a90 	vmov	r2, s5
 801bd10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd1e:	ee13 2a10 	vmov	r2, s6
 801bd22:	9311      	str	r3, [sp, #68]	; 0x44
 801bd24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd26:	f1bb 0b01 	subs.w	fp, fp, #1
 801bd2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd2e:	9a03      	ldr	r2, [sp, #12]
 801bd30:	9312      	str	r3, [sp, #72]	; 0x48
 801bd32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bd36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd38:	eeb0 3a67 	vmov.f32	s6, s15
 801bd3c:	bf08      	it	eq
 801bd3e:	4613      	moveq	r3, r2
 801bd40:	eef0 2a47 	vmov.f32	s5, s14
 801bd44:	e789      	b.n	801bc5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bd46:	140f      	asrs	r7, r1, #16
 801bd48:	d418      	bmi.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bd4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801bd4e:	42bd      	cmp	r5, r7
 801bd50:	dd14      	ble.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bd52:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bd56:	d411      	bmi.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bd58:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801bd5c:	4564      	cmp	r4, ip
 801bd5e:	dd0d      	ble.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bd60:	b22d      	sxth	r5, r5
 801bd62:	fb0c 7505 	mla	r5, ip, r5, r7
 801bd66:	9c01      	ldr	r4, [sp, #4]
 801bd68:	5d64      	ldrb	r4, [r4, r5]
 801bd6a:	2cff      	cmp	r4, #255	; 0xff
 801bd6c:	d10c      	bne.n	801bd88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801bd6e:	9c00      	ldr	r4, [sp, #0]
 801bd70:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801bd74:	f06f 0401 	mvn.w	r4, #1
 801bd78:	4374      	muls	r4, r6
 801bd7a:	5305      	strh	r5, [r0, r4]
 801bd7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bd7e:	3e01      	subs	r6, #1
 801bd80:	4421      	add	r1, r4
 801bd82:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bd84:	4422      	add	r2, r4
 801bd86:	e79c      	b.n	801bcc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bd88:	2c00      	cmp	r4, #0
 801bd8a:	d0f7      	beq.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bd8c:	9f00      	ldr	r7, [sp, #0]
 801bd8e:	fa1f fc84 	uxth.w	ip, r4
 801bd92:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801bd96:	f06f 0501 	mvn.w	r5, #1
 801bd9a:	43e4      	mvns	r4, r4
 801bd9c:	4375      	muls	r5, r6
 801bd9e:	9502      	str	r5, [sp, #8]
 801bda0:	5b45      	ldrh	r5, [r0, r5]
 801bda2:	b2e4      	uxtb	r4, r4
 801bda4:	122f      	asrs	r7, r5, #8
 801bda6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bdaa:	fb17 f704 	smulbb	r7, r7, r4
 801bdae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bdb2:	00ed      	lsls	r5, r5, #3
 801bdb4:	b2ed      	uxtb	r5, r5
 801bdb6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801bdba:	fb15 f504 	smulbb	r5, r5, r4
 801bdbe:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801bdc2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801bdc6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801bdca:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801bdce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801bdd2:	fb1a fa04 	smulbb	sl, sl, r4
 801bdd6:	fa5f f989 	uxtb.w	r9, r9
 801bdda:	fb09 550c 	mla	r5, r9, ip, r5
 801bdde:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bde2:	fb07 a70c 	mla	r7, r7, ip, sl
 801bde6:	fa1f fe8e 	uxth.w	lr, lr
 801bdea:	b2ad      	uxth	r5, r5
 801bdec:	f10e 0401 	add.w	r4, lr, #1
 801bdf0:	f105 0a01 	add.w	sl, r5, #1
 801bdf4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801bdf8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bdfc:	b2bf      	uxth	r7, r7
 801bdfe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be02:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801be06:	ea4a 0e0e 	orr.w	lr, sl, lr
 801be0a:	f107 0a01 	add.w	sl, r7, #1
 801be0e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801be12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be1a:	9c02      	ldr	r4, [sp, #8]
 801be1c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801be20:	f820 e004 	strh.w	lr, [r0, r4]
 801be24:	e7aa      	b.n	801bd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801be26:	f04f 0900 	mov.w	r9, #0
 801be2a:	eba3 0409 	sub.w	r4, r3, r9
 801be2e:	2c00      	cmp	r4, #0
 801be30:	f77f af4a 	ble.w	801bcc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801be34:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801be38:	1414      	asrs	r4, r2, #16
 801be3a:	140d      	asrs	r5, r1, #16
 801be3c:	fb06 5504 	mla	r5, r6, r4, r5
 801be40:	9c01      	ldr	r4, [sp, #4]
 801be42:	5d64      	ldrb	r4, [r4, r5]
 801be44:	2cff      	cmp	r4, #255	; 0xff
 801be46:	d10b      	bne.n	801be60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801be48:	9c00      	ldr	r4, [sp, #0]
 801be4a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801be4e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801be52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801be54:	f109 0901 	add.w	r9, r9, #1
 801be58:	4421      	add	r1, r4
 801be5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be5c:	4422      	add	r2, r4
 801be5e:	e7e4      	b.n	801be2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801be60:	2c00      	cmp	r4, #0
 801be62:	d0f6      	beq.n	801be52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801be64:	b2a7      	uxth	r7, r4
 801be66:	43e4      	mvns	r4, r4
 801be68:	9e00      	ldr	r6, [sp, #0]
 801be6a:	b2e4      	uxtb	r4, r4
 801be6c:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801be70:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801be74:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801be78:	122e      	asrs	r6, r5, #8
 801be7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801be7e:	fb16 f604 	smulbb	r6, r6, r4
 801be82:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801be86:	00ed      	lsls	r5, r5, #3
 801be88:	b2ed      	uxtb	r5, r5
 801be8a:	fb15 f504 	smulbb	r5, r5, r4
 801be8e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801be92:	fb0c 6c07 	mla	ip, ip, r7, r6
 801be96:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801be9a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801be9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bea2:	fb1a fa04 	smulbb	sl, sl, r4
 801bea6:	fa5f fe8e 	uxtb.w	lr, lr
 801beaa:	fb0e 5507 	mla	r5, lr, r7, r5
 801beae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801beb2:	fb06 a607 	mla	r6, r6, r7, sl
 801beb6:	fa1f fc8c 	uxth.w	ip, ip
 801beba:	b2ad      	uxth	r5, r5
 801bebc:	f10c 0401 	add.w	r4, ip, #1
 801bec0:	f105 0a01 	add.w	sl, r5, #1
 801bec4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bec8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801becc:	b2b6      	uxth	r6, r6
 801bece:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bed2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801bed6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801beda:	f106 0a01 	add.w	sl, r6, #1
 801bede:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bee2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bee6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801beea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801beee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801bef2:	e7ae      	b.n	801be52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801bef4:	b005      	add	sp, #20
 801bef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801befa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801befa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801befe:	b085      	sub	sp, #20
 801bf00:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bf02:	9100      	str	r1, [sp, #0]
 801bf04:	9203      	str	r2, [sp, #12]
 801bf06:	6841      	ldr	r1, [r0, #4]
 801bf08:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801bf0c:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801bf10:	9201      	str	r2, [sp, #4]
 801bf12:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bf16:	fb01 2404 	mla	r4, r1, r4, r2
 801bf1a:	6802      	ldr	r2, [r0, #0]
 801bf1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf20:	f8de 2000 	ldr.w	r2, [lr]
 801bf24:	9202      	str	r2, [sp, #8]
 801bf26:	9a01      	ldr	r2, [sp, #4]
 801bf28:	43d6      	mvns	r6, r2
 801bf2a:	b2f6      	uxtb	r6, r6
 801bf2c:	9a00      	ldr	r2, [sp, #0]
 801bf2e:	2a00      	cmp	r2, #0
 801bf30:	dc03      	bgt.n	801bf3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bf32:	9a03      	ldr	r2, [sp, #12]
 801bf34:	2a00      	cmp	r2, #0
 801bf36:	f340 8124 	ble.w	801c182 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bf3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf3c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801bf40:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bf44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf46:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801bf4a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	dd0e      	ble.n	801bf70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bf52:	1408      	asrs	r0, r1, #16
 801bf54:	d405      	bmi.n	801bf62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf56:	4560      	cmp	r0, ip
 801bf58:	da03      	bge.n	801bf62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf5a:	1410      	asrs	r0, r2, #16
 801bf5c:	d401      	bmi.n	801bf62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bf5e:	42b8      	cmp	r0, r7
 801bf60:	db07      	blt.n	801bf72 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bf62:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bf64:	3b01      	subs	r3, #1
 801bf66:	4401      	add	r1, r0
 801bf68:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bf6a:	3402      	adds	r4, #2
 801bf6c:	4402      	add	r2, r0
 801bf6e:	e7ee      	b.n	801bf4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bf70:	d06e      	beq.n	801c050 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801bf72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bf74:	1e58      	subs	r0, r3, #1
 801bf76:	fb05 1500 	mla	r5, r5, r0, r1
 801bf7a:	142d      	asrs	r5, r5, #16
 801bf7c:	d45c      	bmi.n	801c038 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bf7e:	4565      	cmp	r5, ip
 801bf80:	da5a      	bge.n	801c038 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bf82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bf84:	fb05 2000 	mla	r0, r5, r0, r2
 801bf88:	1400      	asrs	r0, r0, #16
 801bf8a:	d455      	bmi.n	801c038 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bf8c:	42b8      	cmp	r0, r7
 801bf8e:	da53      	bge.n	801c038 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bf90:	4699      	mov	r9, r3
 801bf92:	46a2      	mov	sl, r4
 801bf94:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801bf98:	f1b9 0f00 	cmp.w	r9, #0
 801bf9c:	dd54      	ble.n	801c048 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bf9e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bfa2:	140d      	asrs	r5, r1, #16
 801bfa4:	1410      	asrs	r0, r2, #16
 801bfa6:	fb07 5000 	mla	r0, r7, r0, r5
 801bfaa:	9d02      	ldr	r5, [sp, #8]
 801bfac:	f109 39ff 	add.w	r9, r9, #4294967295
 801bfb0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bfb4:	f8ba 5000 	ldrh.w	r5, [sl]
 801bfb8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bfbc:	122f      	asrs	r7, r5, #8
 801bfbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bfc2:	fb17 f706 	smulbb	r7, r7, r6
 801bfc6:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bfca:	00ed      	lsls	r5, r5, #3
 801bfcc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801bfd0:	b2ed      	uxtb	r5, r5
 801bfd2:	fb18 f806 	smulbb	r8, r8, r6
 801bfd6:	fb15 f506 	smulbb	r5, r5, r6
 801bfda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bfde:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bfe2:	10c7      	asrs	r7, r0, #3
 801bfe4:	00c0      	lsls	r0, r0, #3
 801bfe6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801bfea:	b2c0      	uxtb	r0, r0
 801bfec:	fb07 870b 	mla	r7, r7, fp, r8
 801bff0:	fb00 500b 	mla	r0, r0, fp, r5
 801bff4:	fa1f fc8c 	uxth.w	ip, ip
 801bff8:	b280      	uxth	r0, r0
 801bffa:	b2bf      	uxth	r7, r7
 801bffc:	f10c 0501 	add.w	r5, ip, #1
 801c000:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c004:	f107 0801 	add.w	r8, r7, #1
 801c008:	1c45      	adds	r5, r0, #1
 801c00a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c00e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c012:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c014:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c018:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c01c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c020:	ea45 0c0c 	orr.w	ip, r5, ip
 801c024:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c028:	4401      	add	r1, r0
 801c02a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c02c:	ea4c 0c08 	orr.w	ip, ip, r8
 801c030:	f82a cb02 	strh.w	ip, [sl], #2
 801c034:	4402      	add	r2, r0
 801c036:	e7af      	b.n	801bf98 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c038:	f04f 0800 	mov.w	r8, #0
 801c03c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801c040:	eb03 0008 	add.w	r0, r3, r8
 801c044:	2800      	cmp	r0, #0
 801c046:	dc41      	bgt.n	801c0cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c04c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c050:	9b00      	ldr	r3, [sp, #0]
 801c052:	2b00      	cmp	r3, #0
 801c054:	f340 8095 	ble.w	801c182 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c05c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c060:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c064:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c068:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c06c:	eef0 6a62 	vmov.f32	s13, s5
 801c070:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c074:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c078:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c07c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c080:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c084:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c088:	eef0 6a43 	vmov.f32	s13, s6
 801c08c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c090:	ee12 2a90 	vmov	r2, s5
 801c094:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c09a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c09e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0a2:	ee13 2a10 	vmov	r2, s6
 801c0a6:	9311      	str	r3, [sp, #68]	; 0x44
 801c0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0aa:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c0ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0b2:	9312      	str	r3, [sp, #72]	; 0x48
 801c0b4:	9b00      	ldr	r3, [sp, #0]
 801c0b6:	9a03      	ldr	r2, [sp, #12]
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	9300      	str	r3, [sp, #0]
 801c0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801c0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0c2:	eef0 2a47 	vmov.f32	s5, s14
 801c0c6:	bf08      	it	eq
 801c0c8:	4613      	moveq	r3, r2
 801c0ca:	e72f      	b.n	801bf2c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c0cc:	140f      	asrs	r7, r1, #16
 801c0ce:	d451      	bmi.n	801c174 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c0d0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c0d4:	42bd      	cmp	r5, r7
 801c0d6:	dd4d      	ble.n	801c174 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c0d8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c0dc:	d44a      	bmi.n	801c174 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c0de:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c0e2:	4560      	cmp	r0, ip
 801c0e4:	dd46      	ble.n	801c174 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c0e6:	b22d      	sxth	r5, r5
 801c0e8:	fb0c 7505 	mla	r5, ip, r5, r7
 801c0ec:	9802      	ldr	r0, [sp, #8]
 801c0ee:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801c0f2:	f06f 0501 	mvn.w	r5, #1
 801c0f6:	fb05 fb08 	mul.w	fp, r5, r8
 801c0fa:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c0fe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c102:	122f      	asrs	r7, r5, #8
 801c104:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c108:	fb17 f706 	smulbb	r7, r7, r6
 801c10c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c110:	00ed      	lsls	r5, r5, #3
 801c112:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c116:	b2ed      	uxtb	r5, r5
 801c118:	fb19 f906 	smulbb	r9, r9, r6
 801c11c:	fb15 f506 	smulbb	r5, r5, r6
 801c120:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c124:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c128:	10c7      	asrs	r7, r0, #3
 801c12a:	00c0      	lsls	r0, r0, #3
 801c12c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c130:	b2c0      	uxtb	r0, r0
 801c132:	fb07 970a 	mla	r7, r7, sl, r9
 801c136:	fb00 500a 	mla	r0, r0, sl, r5
 801c13a:	fa1f fc8c 	uxth.w	ip, ip
 801c13e:	b2bf      	uxth	r7, r7
 801c140:	b280      	uxth	r0, r0
 801c142:	f10c 0501 	add.w	r5, ip, #1
 801c146:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c14a:	f107 0901 	add.w	r9, r7, #1
 801c14e:	1c45      	adds	r5, r0, #1
 801c150:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c154:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c158:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c15c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c160:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c164:	ea45 0c0c 	orr.w	ip, r5, ip
 801c168:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c16c:	ea4c 0c09 	orr.w	ip, ip, r9
 801c170:	f824 c00b 	strh.w	ip, [r4, fp]
 801c174:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c176:	f108 38ff 	add.w	r8, r8, #4294967295
 801c17a:	4401      	add	r1, r0
 801c17c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c17e:	4402      	add	r2, r0
 801c180:	e75e      	b.n	801c040 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c182:	b005      	add	sp, #20
 801c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c188 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c190:	b085      	sub	sp, #20
 801c192:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c194:	4693      	mov	fp, r2
 801c196:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c19a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801c19e:	6870      	ldr	r0, [r6, #4]
 801c1a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c1a2:	fb00 2404 	mla	r4, r0, r4, r2
 801c1a6:	6832      	ldr	r2, [r6, #0]
 801c1a8:	9101      	str	r1, [sp, #4]
 801c1aa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1ae:	682a      	ldr	r2, [r5, #0]
 801c1b0:	9202      	str	r2, [sp, #8]
 801c1b2:	9a01      	ldr	r2, [sp, #4]
 801c1b4:	2a00      	cmp	r2, #0
 801c1b6:	dc03      	bgt.n	801c1c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c1b8:	f1bb 0f00 	cmp.w	fp, #0
 801c1bc:	f340 809a 	ble.w	801c2f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c1c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c1c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c1ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c1cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c1d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	dd0c      	ble.n	801c1f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c1d8:	1406      	asrs	r6, r0, #16
 801c1da:	d405      	bmi.n	801c1e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c1dc:	454e      	cmp	r6, r9
 801c1de:	da03      	bge.n	801c1e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c1e0:	1416      	asrs	r6, r2, #16
 801c1e2:	d401      	bmi.n	801c1e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c1e4:	4546      	cmp	r6, r8
 801c1e6:	db05      	blt.n	801c1f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c1e8:	4470      	add	r0, lr
 801c1ea:	4462      	add	r2, ip
 801c1ec:	3b01      	subs	r3, #1
 801c1ee:	3402      	adds	r4, #2
 801c1f0:	e7f0      	b.n	801c1d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c1f2:	d00f      	beq.n	801c214 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1f4:	1e5e      	subs	r6, r3, #1
 801c1f6:	fb0e 0706 	mla	r7, lr, r6, r0
 801c1fa:	143f      	asrs	r7, r7, #16
 801c1fc:	d541      	bpl.n	801c282 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801c1fe:	4698      	mov	r8, r3
 801c200:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c204:	9603      	str	r6, [sp, #12]
 801c206:	f1b8 0f00 	cmp.w	r8, #0
 801c20a:	dc56      	bgt.n	801c2ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801c20c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c210:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c214:	9b01      	ldr	r3, [sp, #4]
 801c216:	2b00      	cmp	r3, #0
 801c218:	dd6c      	ble.n	801c2f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c21a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c21e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c222:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c226:	eeb0 6a62 	vmov.f32	s12, s5
 801c22a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c22e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c232:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c236:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c23a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c23e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c246:	eeb0 6a43 	vmov.f32	s12, s6
 801c24a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c24e:	ee12 2a90 	vmov	r2, s5
 801c252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c258:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c25c:	fb92 fef3 	sdiv	lr, r2, r3
 801c260:	ee13 2a10 	vmov	r2, s6
 801c264:	fb92 fcf3 	sdiv	ip, r2, r3
 801c268:	9b01      	ldr	r3, [sp, #4]
 801c26a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c26e:	3b01      	subs	r3, #1
 801c270:	9301      	str	r3, [sp, #4]
 801c272:	eeb0 3a67 	vmov.f32	s6, s15
 801c276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c278:	eef0 2a47 	vmov.f32	s5, s14
 801c27c:	bf08      	it	eq
 801c27e:	465b      	moveq	r3, fp
 801c280:	e797      	b.n	801c1b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c282:	454f      	cmp	r7, r9
 801c284:	dabb      	bge.n	801c1fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c286:	fb0c 2606 	mla	r6, ip, r6, r2
 801c28a:	1436      	asrs	r6, r6, #16
 801c28c:	d4b7      	bmi.n	801c1fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c28e:	4546      	cmp	r6, r8
 801c290:	dab5      	bge.n	801c1fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c292:	461e      	mov	r6, r3
 801c294:	46a0      	mov	r8, r4
 801c296:	2e00      	cmp	r6, #0
 801c298:	ddb8      	ble.n	801c20c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c29a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c29e:	1417      	asrs	r7, r2, #16
 801c2a0:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c2a4:	fb0a 9707 	mla	r7, sl, r7, r9
 801c2a8:	9902      	ldr	r1, [sp, #8]
 801c2aa:	4470      	add	r0, lr
 801c2ac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c2b0:	4462      	add	r2, ip
 801c2b2:	f828 7b02 	strh.w	r7, [r8], #2
 801c2b6:	3e01      	subs	r6, #1
 801c2b8:	e7ed      	b.n	801c296 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c2ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c2be:	d414      	bmi.n	801c2ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c2c0:	68ae      	ldr	r6, [r5, #8]
 801c2c2:	454e      	cmp	r6, r9
 801c2c4:	dd11      	ble.n	801c2ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c2c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c2ca:	d40e      	bmi.n	801c2ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c2cc:	68ef      	ldr	r7, [r5, #12]
 801c2ce:	4557      	cmp	r7, sl
 801c2d0:	dd0b      	ble.n	801c2ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c2d2:	f06f 0101 	mvn.w	r1, #1
 801c2d6:	b236      	sxth	r6, r6
 801c2d8:	fb0a 9606 	mla	r6, sl, r6, r9
 801c2dc:	9f02      	ldr	r7, [sp, #8]
 801c2de:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c2e2:	fb01 f608 	mul.w	r6, r1, r8
 801c2e6:	9903      	ldr	r1, [sp, #12]
 801c2e8:	538f      	strh	r7, [r1, r6]
 801c2ea:	4470      	add	r0, lr
 801c2ec:	4462      	add	r2, ip
 801c2ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801c2f2:	e788      	b.n	801c206 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c2f4:	b005      	add	sp, #20
 801c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c302:	b087      	sub	sp, #28
 801c304:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c306:	468b      	mov	fp, r1
 801c308:	9203      	str	r2, [sp, #12]
 801c30a:	6841      	ldr	r1, [r0, #4]
 801c30c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c310:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c314:	9204      	str	r2, [sp, #16]
 801c316:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c31a:	fb01 2505 	mla	r5, r1, r5, r2
 801c31e:	6802      	ldr	r2, [r0, #0]
 801c320:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c324:	f8d9 2000 	ldr.w	r2, [r9]
 801c328:	9201      	str	r2, [sp, #4]
 801c32a:	f1bb 0f00 	cmp.w	fp, #0
 801c32e:	dc03      	bgt.n	801c338 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c330:	9a03      	ldr	r2, [sp, #12]
 801c332:	2a00      	cmp	r2, #0
 801c334:	f340 8159 	ble.w	801c5ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c338:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c33a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c33e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c344:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c348:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	dd0e      	ble.n	801c36e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c350:	1402      	asrs	r2, r0, #16
 801c352:	d405      	bmi.n	801c360 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c354:	42ba      	cmp	r2, r7
 801c356:	da03      	bge.n	801c360 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c358:	140a      	asrs	r2, r1, #16
 801c35a:	d401      	bmi.n	801c360 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c35c:	42b2      	cmp	r2, r6
 801c35e:	db07      	blt.n	801c370 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c362:	3b01      	subs	r3, #1
 801c364:	4410      	add	r0, r2
 801c366:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c368:	3502      	adds	r5, #2
 801c36a:	4411      	add	r1, r2
 801c36c:	e7ee      	b.n	801c34c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c36e:	d017      	beq.n	801c3a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c370:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c372:	1e5a      	subs	r2, r3, #1
 801c374:	fb04 0402 	mla	r4, r4, r2, r0
 801c378:	1424      	asrs	r4, r4, #16
 801c37a:	d409      	bmi.n	801c390 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c37c:	42bc      	cmp	r4, r7
 801c37e:	da07      	bge.n	801c390 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c380:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c382:	fb04 1202 	mla	r2, r4, r2, r1
 801c386:	1412      	asrs	r2, r2, #16
 801c388:	d402      	bmi.n	801c390 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c38a:	42b2      	cmp	r2, r6
 801c38c:	f2c0 80bf 	blt.w	801c50e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c390:	2700      	movs	r7, #0
 801c392:	19da      	adds	r2, r3, r7
 801c394:	2a00      	cmp	r2, #0
 801c396:	dc3e      	bgt.n	801c416 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c398:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c39c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c3a0:	f1bb 0f00 	cmp.w	fp, #0
 801c3a4:	f340 8121 	ble.w	801c5ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c3a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3b8:	eeb0 6a62 	vmov.f32	s12, s5
 801c3bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3d0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c3d4:	eeb0 6a43 	vmov.f32	s12, s6
 801c3d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3dc:	ee12 2a90 	vmov	r2, s5
 801c3e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3ee:	ee13 2a10 	vmov	r2, s6
 801c3f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3f6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c3fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3fe:	9a03      	ldr	r2, [sp, #12]
 801c400:	9314      	str	r3, [sp, #80]	; 0x50
 801c402:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c408:	eeb0 3a67 	vmov.f32	s6, s15
 801c40c:	bf08      	it	eq
 801c40e:	4613      	moveq	r3, r2
 801c410:	eef0 2a47 	vmov.f32	s5, s14
 801c414:	e789      	b.n	801c32a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c416:	1406      	asrs	r6, r0, #16
 801c418:	d42d      	bmi.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c41a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801c41e:	42b4      	cmp	r4, r6
 801c420:	dd29      	ble.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c422:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801c426:	d426      	bmi.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c428:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c42c:	4562      	cmp	r2, ip
 801c42e:	dd22      	ble.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c430:	b224      	sxth	r4, r4
 801c432:	fb0c 6404 	mla	r4, ip, r4, r6
 801c436:	9a01      	ldr	r2, [sp, #4]
 801c438:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801c43c:	0e22      	lsrs	r2, r4, #24
 801c43e:	d01a      	beq.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c440:	9e04      	ldr	r6, [sp, #16]
 801c442:	4372      	muls	r2, r6
 801c444:	1c56      	adds	r6, r2, #1
 801c446:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c44a:	1212      	asrs	r2, r2, #8
 801c44c:	0a26      	lsrs	r6, r4, #8
 801c44e:	2aff      	cmp	r2, #255	; 0xff
 801c450:	9605      	str	r6, [sp, #20]
 801c452:	d116      	bne.n	801c482 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801c454:	f06f 0201 	mvn.w	r2, #1
 801c458:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c45c:	fb02 fc07 	mul.w	ip, r2, r7
 801c460:	0962      	lsrs	r2, r4, #5
 801c462:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c466:	f026 0607 	bic.w	r6, r6, #7
 801c46a:	4316      	orrs	r6, r2
 801c46c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c470:	4326      	orrs	r6, r4
 801c472:	f825 600c 	strh.w	r6, [r5, ip]
 801c476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c478:	3f01      	subs	r7, #1
 801c47a:	4410      	add	r0, r2
 801c47c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c47e:	4411      	add	r1, r2
 801c480:	e787      	b.n	801c392 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c482:	f06f 0601 	mvn.w	r6, #1
 801c486:	fa1f fa82 	uxth.w	sl, r2
 801c48a:	43d2      	mvns	r2, r2
 801c48c:	437e      	muls	r6, r7
 801c48e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801c492:	f835 8006 	ldrh.w	r8, [r5, r6]
 801c496:	fb1c fc0a 	smulbb	ip, ip, sl
 801c49a:	b2e4      	uxtb	r4, r4
 801c49c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c4a0:	fb14 f40a 	smulbb	r4, r4, sl
 801c4a4:	b2d2      	uxtb	r2, r2
 801c4a6:	9602      	str	r6, [sp, #8]
 801c4a8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c4ac:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c4b0:	fb0e ce02 	mla	lr, lr, r2, ip
 801c4b4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c4b8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c4bc:	fb16 f60a 	smulbb	r6, r6, sl
 801c4c0:	fa5f f888 	uxtb.w	r8, r8
 801c4c4:	fb08 4402 	mla	r4, r8, r2, r4
 801c4c8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c4cc:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c4d0:	fa1f fe8e 	uxth.w	lr, lr
 801c4d4:	b2a4      	uxth	r4, r4
 801c4d6:	f10e 0201 	add.w	r2, lr, #1
 801c4da:	1c66      	adds	r6, r4, #1
 801c4dc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c4e0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c4e4:	fa1f fc8c 	uxth.w	ip, ip
 801c4e8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c4ec:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c4f0:	ea46 0e0e 	orr.w	lr, r6, lr
 801c4f4:	f10c 0601 	add.w	r6, ip, #1
 801c4f8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c4fc:	0976      	lsrs	r6, r6, #5
 801c4fe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c502:	9a02      	ldr	r2, [sp, #8]
 801c504:	ea4e 0e06 	orr.w	lr, lr, r6
 801c508:	f825 e002 	strh.w	lr, [r5, r2]
 801c50c:	e7b3      	b.n	801c476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c50e:	f04f 0800 	mov.w	r8, #0
 801c512:	eba3 0208 	sub.w	r2, r3, r8
 801c516:	2a00      	cmp	r2, #0
 801c518:	f77f af3e 	ble.w	801c398 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c51c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801c520:	1404      	asrs	r4, r0, #16
 801c522:	140a      	asrs	r2, r1, #16
 801c524:	fb06 4202 	mla	r2, r6, r2, r4
 801c528:	9c01      	ldr	r4, [sp, #4]
 801c52a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801c52e:	0e22      	lsrs	r2, r4, #24
 801c530:	d016      	beq.n	801c560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c532:	9e04      	ldr	r6, [sp, #16]
 801c534:	4372      	muls	r2, r6
 801c536:	1c56      	adds	r6, r2, #1
 801c538:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c53c:	1212      	asrs	r2, r2, #8
 801c53e:	2aff      	cmp	r2, #255	; 0xff
 801c540:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801c544:	d113      	bne.n	801c56e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801c546:	0962      	lsrs	r2, r4, #5
 801c548:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801c54c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c550:	f026 0607 	bic.w	r6, r6, #7
 801c554:	4316      	orrs	r6, r2
 801c556:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c55a:	4326      	orrs	r6, r4
 801c55c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801c560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c562:	f108 0801 	add.w	r8, r8, #1
 801c566:	4410      	add	r0, r2
 801c568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c56a:	4411      	add	r1, r2
 801c56c:	e7d1      	b.n	801c512 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801c56e:	fa1f fa82 	uxth.w	sl, r2
 801c572:	43d2      	mvns	r2, r2
 801c574:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801c578:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801c57c:	fb17 f70a 	smulbb	r7, r7, sl
 801c580:	b2e4      	uxtb	r4, r4
 801c582:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c586:	fb14 f40a 	smulbb	r4, r4, sl
 801c58a:	b2d2      	uxtb	r2, r2
 801c58c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c590:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c594:	b2f6      	uxtb	r6, r6
 801c596:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c59a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c59e:	fb16 f60a 	smulbb	r6, r6, sl
 801c5a2:	fa5f fe8e 	uxtb.w	lr, lr
 801c5a6:	fb0e 4402 	mla	r4, lr, r2, r4
 801c5aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c5ae:	fb07 6702 	mla	r7, r7, r2, r6
 801c5b2:	fa1f fc8c 	uxth.w	ip, ip
 801c5b6:	b2a4      	uxth	r4, r4
 801c5b8:	f10c 0201 	add.w	r2, ip, #1
 801c5bc:	1c66      	adds	r6, r4, #1
 801c5be:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c5c2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c5c6:	b2bf      	uxth	r7, r7
 801c5c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c5cc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c5d0:	ea46 0c0c 	orr.w	ip, r6, ip
 801c5d4:	1c7e      	adds	r6, r7, #1
 801c5d6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c5da:	0976      	lsrs	r6, r6, #5
 801c5dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c5e0:	ea4c 0c06 	orr.w	ip, ip, r6
 801c5e4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801c5e8:	e7ba      	b.n	801c560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801c5ea:	b007      	add	sp, #28
 801c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5f8:	b085      	sub	sp, #20
 801c5fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c5fc:	468b      	mov	fp, r1
 801c5fe:	6841      	ldr	r1, [r0, #4]
 801c600:	9203      	str	r2, [sp, #12]
 801c602:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c606:	fb01 2404 	mla	r4, r1, r4, r2
 801c60a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c60e:	6802      	ldr	r2, [r0, #0]
 801c610:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c614:	f8d8 2000 	ldr.w	r2, [r8]
 801c618:	9201      	str	r2, [sp, #4]
 801c61a:	f1bb 0f00 	cmp.w	fp, #0
 801c61e:	dc03      	bgt.n	801c628 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c620:	9a03      	ldr	r2, [sp, #12]
 801c622:	2a00      	cmp	r2, #0
 801c624:	f340 814f 	ble.w	801c8c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c62a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c62e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c632:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c634:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c638:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	dd0e      	ble.n	801c65e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c640:	1408      	asrs	r0, r1, #16
 801c642:	d405      	bmi.n	801c650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c644:	42b8      	cmp	r0, r7
 801c646:	da03      	bge.n	801c650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c648:	1410      	asrs	r0, r2, #16
 801c64a:	d401      	bmi.n	801c650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c64c:	42b0      	cmp	r0, r6
 801c64e:	db07      	blt.n	801c660 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c650:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c652:	3b01      	subs	r3, #1
 801c654:	4401      	add	r1, r0
 801c656:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c658:	3402      	adds	r4, #2
 801c65a:	4402      	add	r2, r0
 801c65c:	e7ee      	b.n	801c63c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c65e:	d017      	beq.n	801c690 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c660:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c662:	1e58      	subs	r0, r3, #1
 801c664:	fb05 1500 	mla	r5, r5, r0, r1
 801c668:	142d      	asrs	r5, r5, #16
 801c66a:	d409      	bmi.n	801c680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c66c:	42bd      	cmp	r5, r7
 801c66e:	da07      	bge.n	801c680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c670:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c672:	fb05 2000 	mla	r0, r5, r0, r2
 801c676:	1400      	asrs	r0, r0, #16
 801c678:	d402      	bmi.n	801c680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c67a:	42b0      	cmp	r0, r6
 801c67c:	f2c0 80ba 	blt.w	801c7f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c680:	2600      	movs	r6, #0
 801c682:	1998      	adds	r0, r3, r6
 801c684:	2800      	cmp	r0, #0
 801c686:	dc3e      	bgt.n	801c706 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c68c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c690:	f1bb 0f00 	cmp.w	fp, #0
 801c694:	f340 8117 	ble.w	801c8c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c698:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c69c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801c6ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6c0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6c4:	eeb0 6a43 	vmov.f32	s12, s6
 801c6c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6cc:	ee12 2a90 	vmov	r2, s5
 801c6d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6da:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6de:	ee13 2a10 	vmov	r2, s6
 801c6e2:	9311      	str	r3, [sp, #68]	; 0x44
 801c6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6e6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c6ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6ee:	9a03      	ldr	r2, [sp, #12]
 801c6f0:	9312      	str	r3, [sp, #72]	; 0x48
 801c6f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6f8:	eeb0 3a67 	vmov.f32	s6, s15
 801c6fc:	bf08      	it	eq
 801c6fe:	4613      	moveq	r3, r2
 801c700:	eef0 2a47 	vmov.f32	s5, s14
 801c704:	e789      	b.n	801c61a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c706:	140f      	asrs	r7, r1, #16
 801c708:	d424      	bmi.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c70a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c70e:	42bd      	cmp	r5, r7
 801c710:	dd20      	ble.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c712:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c716:	d41d      	bmi.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c718:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801c71c:	4560      	cmp	r0, ip
 801c71e:	dd19      	ble.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c720:	b22d      	sxth	r5, r5
 801c722:	fb0c 7505 	mla	r5, ip, r5, r7
 801c726:	9801      	ldr	r0, [sp, #4]
 801c728:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c72c:	0e07      	lsrs	r7, r0, #24
 801c72e:	2fff      	cmp	r7, #255	; 0xff
 801c730:	d116      	bne.n	801c760 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c732:	f06f 0501 	mvn.w	r5, #1
 801c736:	fb05 f706 	mul.w	r7, r5, r6
 801c73a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c73e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c742:	0945      	lsrs	r5, r0, #5
 801c744:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c748:	ea4c 0505 	orr.w	r5, ip, r5
 801c74c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c750:	4305      	orrs	r5, r0
 801c752:	53e5      	strh	r5, [r4, r7]
 801c754:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c756:	3e01      	subs	r6, #1
 801c758:	4401      	add	r1, r0
 801c75a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c75c:	4402      	add	r2, r0
 801c75e:	e790      	b.n	801c682 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c760:	b2fd      	uxtb	r5, r7
 801c762:	2f00      	cmp	r7, #0
 801c764:	d0f6      	beq.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c766:	f06f 0701 	mvn.w	r7, #1
 801c76a:	fa1f f985 	uxth.w	r9, r5
 801c76e:	43ed      	mvns	r5, r5
 801c770:	4377      	muls	r7, r6
 801c772:	f834 e007 	ldrh.w	lr, [r4, r7]
 801c776:	9702      	str	r7, [sp, #8]
 801c778:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c77c:	fb17 f709 	smulbb	r7, r7, r9
 801c780:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c784:	b2c0      	uxtb	r0, r0
 801c786:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c78a:	fb10 f009 	smulbb	r0, r0, r9
 801c78e:	b2ed      	uxtb	r5, r5
 801c790:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c794:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c798:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c79c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c7a0:	fb1a fa09 	smulbb	sl, sl, r9
 801c7a4:	fa5f fe8e 	uxtb.w	lr, lr
 801c7a8:	fb0e 0005 	mla	r0, lr, r5, r0
 801c7ac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c7b0:	fb07 a705 	mla	r7, r7, r5, sl
 801c7b4:	b280      	uxth	r0, r0
 801c7b6:	fa1f fc8c 	uxth.w	ip, ip
 801c7ba:	f100 0a01 	add.w	sl, r0, #1
 801c7be:	f10c 0501 	add.w	r5, ip, #1
 801c7c2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c7c6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c7ca:	b2bf      	uxth	r7, r7
 801c7cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c7d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c7d4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c7d8:	f107 0a01 	add.w	sl, r7, #1
 801c7dc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c7e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c7e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c7e8:	9802      	ldr	r0, [sp, #8]
 801c7ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c7ee:	f824 c000 	strh.w	ip, [r4, r0]
 801c7f2:	e7af      	b.n	801c754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c7f4:	f04f 0e00 	mov.w	lr, #0
 801c7f8:	eba3 000e 	sub.w	r0, r3, lr
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	f77f af43 	ble.w	801c688 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c802:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c806:	140d      	asrs	r5, r1, #16
 801c808:	1410      	asrs	r0, r2, #16
 801c80a:	fb06 5000 	mla	r0, r6, r0, r5
 801c80e:	9d01      	ldr	r5, [sp, #4]
 801c810:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c814:	0e2e      	lsrs	r6, r5, #24
 801c816:	2eff      	cmp	r6, #255	; 0xff
 801c818:	d112      	bne.n	801c840 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801c81a:	482c      	ldr	r0, [pc, #176]	; (801c8cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801c81c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c820:	0968      	lsrs	r0, r5, #5
 801c822:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c826:	4330      	orrs	r0, r6
 801c828:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c82c:	4328      	orrs	r0, r5
 801c82e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801c832:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c834:	f10e 0e01 	add.w	lr, lr, #1
 801c838:	4401      	add	r1, r0
 801c83a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c83c:	4402      	add	r2, r0
 801c83e:	e7db      	b.n	801c7f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801c840:	b2f0      	uxtb	r0, r6
 801c842:	2e00      	cmp	r6, #0
 801c844:	d0f5      	beq.n	801c832 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c846:	fa1f f980 	uxth.w	r9, r0
 801c84a:	43c0      	mvns	r0, r0
 801c84c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c850:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801c854:	fb16 f609 	smulbb	r6, r6, r9
 801c858:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c85c:	b2ed      	uxtb	r5, r5
 801c85e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c862:	fb15 f509 	smulbb	r5, r5, r9
 801c866:	b2c0      	uxtb	r0, r0
 801c868:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c86c:	fb07 6700 	mla	r7, r7, r0, r6
 801c870:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c874:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c878:	fb1a fa09 	smulbb	sl, sl, r9
 801c87c:	fa5f fc8c 	uxtb.w	ip, ip
 801c880:	fb0c 5500 	mla	r5, ip, r0, r5
 801c884:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c888:	fb06 a600 	mla	r6, r6, r0, sl
 801c88c:	b2bf      	uxth	r7, r7
 801c88e:	b2ad      	uxth	r5, r5
 801c890:	1c78      	adds	r0, r7, #1
 801c892:	f105 0a01 	add.w	sl, r5, #1
 801c896:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c89a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c89e:	b2b6      	uxth	r6, r6
 801c8a0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c8a4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c8a8:	ea4a 0707 	orr.w	r7, sl, r7
 801c8ac:	f106 0a01 	add.w	sl, r6, #1
 801c8b0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c8b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c8b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c8bc:	ea47 070a 	orr.w	r7, r7, sl
 801c8c0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801c8c4:	e7b5      	b.n	801c832 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801c8c6:	b005      	add	sp, #20
 801c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8cc:	fffff800 	.word	0xfffff800

0801c8d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d8:	b087      	sub	sp, #28
 801c8da:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c8dc:	468b      	mov	fp, r1
 801c8de:	9203      	str	r2, [sp, #12]
 801c8e0:	6841      	ldr	r1, [r0, #4]
 801c8e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c8e6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c8ea:	9204      	str	r2, [sp, #16]
 801c8ec:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c8f0:	fb01 2404 	mla	r4, r1, r4, r2
 801c8f4:	6802      	ldr	r2, [r0, #0]
 801c8f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c8fa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801c8fe:	3201      	adds	r2, #1
 801c900:	f022 0201 	bic.w	r2, r2, #1
 801c904:	9200      	str	r2, [sp, #0]
 801c906:	f8d9 2000 	ldr.w	r2, [r9]
 801c90a:	9201      	str	r2, [sp, #4]
 801c90c:	f1bb 0f00 	cmp.w	fp, #0
 801c910:	dc03      	bgt.n	801c91a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c912:	9a03      	ldr	r2, [sp, #12]
 801c914:	2a00      	cmp	r2, #0
 801c916:	f340 816a 	ble.w	801cbee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c91a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c91c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c920:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c926:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c92a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c92e:	2b00      	cmp	r3, #0
 801c930:	dd0e      	ble.n	801c950 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c932:	1402      	asrs	r2, r0, #16
 801c934:	d405      	bmi.n	801c942 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c936:	42ba      	cmp	r2, r7
 801c938:	da03      	bge.n	801c942 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c93a:	140a      	asrs	r2, r1, #16
 801c93c:	d401      	bmi.n	801c942 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c93e:	42b2      	cmp	r2, r6
 801c940:	db07      	blt.n	801c952 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c942:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c944:	3b01      	subs	r3, #1
 801c946:	4410      	add	r0, r2
 801c948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c94a:	3402      	adds	r4, #2
 801c94c:	4411      	add	r1, r2
 801c94e:	e7ee      	b.n	801c92e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c950:	d017      	beq.n	801c982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c952:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c954:	1e5a      	subs	r2, r3, #1
 801c956:	fb05 0502 	mla	r5, r5, r2, r0
 801c95a:	142d      	asrs	r5, r5, #16
 801c95c:	d409      	bmi.n	801c972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c95e:	42bd      	cmp	r5, r7
 801c960:	da07      	bge.n	801c972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c962:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c964:	fb05 1202 	mla	r2, r5, r2, r1
 801c968:	1412      	asrs	r2, r2, #16
 801c96a:	d402      	bmi.n	801c972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c96c:	42b2      	cmp	r2, r6
 801c96e:	f2c0 80c8 	blt.w	801cb02 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801c972:	2700      	movs	r7, #0
 801c974:	19da      	adds	r2, r3, r7
 801c976:	2a00      	cmp	r2, #0
 801c978:	dc3e      	bgt.n	801c9f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c97a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c97e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c982:	f1bb 0f00 	cmp.w	fp, #0
 801c986:	f340 8132 	ble.w	801cbee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c98a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c98e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c992:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c996:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c99a:	eeb0 6a62 	vmov.f32	s12, s5
 801c99e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c9b6:	eeb0 6a43 	vmov.f32	s12, s6
 801c9ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9be:	ee12 2a90 	vmov	r2, s5
 801c9c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9d0:	ee13 2a10 	vmov	r2, s6
 801c9d4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9d8:	f1bb 0b01 	subs.w	fp, fp, #1
 801c9dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9e0:	9a03      	ldr	r2, [sp, #12]
 801c9e2:	9314      	str	r3, [sp, #80]	; 0x50
 801c9e4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c9e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c9ee:	bf08      	it	eq
 801c9f0:	4613      	moveq	r3, r2
 801c9f2:	eef0 2a47 	vmov.f32	s5, s14
 801c9f6:	e789      	b.n	801c90c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c9f8:	1405      	asrs	r5, r0, #16
 801c9fa:	d436      	bmi.n	801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801c9fc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ca00:	42aa      	cmp	r2, r5
 801ca02:	dd32      	ble.n	801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ca04:	140e      	asrs	r6, r1, #16
 801ca06:	d430      	bmi.n	801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ca08:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ca0c:	42b2      	cmp	r2, r6
 801ca0e:	dd2c      	ble.n	801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ca10:	9a00      	ldr	r2, [sp, #0]
 801ca12:	fb06 5502 	mla	r5, r6, r2, r5
 801ca16:	9e01      	ldr	r6, [sp, #4]
 801ca18:	086a      	lsrs	r2, r5, #1
 801ca1a:	5cb2      	ldrb	r2, [r6, r2]
 801ca1c:	07ee      	lsls	r6, r5, #31
 801ca1e:	bf54      	ite	pl
 801ca20:	f002 020f 	andpl.w	r2, r2, #15
 801ca24:	1112      	asrmi	r2, r2, #4
 801ca26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca2a:	b2d2      	uxtb	r2, r2
 801ca2c:	b1ea      	cbz	r2, 801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ca2e:	9d04      	ldr	r5, [sp, #16]
 801ca30:	436a      	muls	r2, r5
 801ca32:	1c55      	adds	r5, r2, #1
 801ca34:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ca38:	4d6e      	ldr	r5, [pc, #440]	; (801cbf4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ca3a:	1212      	asrs	r2, r2, #8
 801ca3c:	682d      	ldr	r5, [r5, #0]
 801ca3e:	2aff      	cmp	r2, #255	; 0xff
 801ca40:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ca44:	9605      	str	r6, [sp, #20]
 801ca46:	d116      	bne.n	801ca76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ca48:	f06f 0201 	mvn.w	r2, #1
 801ca4c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ca50:	fb02 fc07 	mul.w	ip, r2, r7
 801ca54:	096a      	lsrs	r2, r5, #5
 801ca56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ca5a:	f026 0607 	bic.w	r6, r6, #7
 801ca5e:	4316      	orrs	r6, r2
 801ca60:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ca64:	432e      	orrs	r6, r5
 801ca66:	f824 600c 	strh.w	r6, [r4, ip]
 801ca6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca6c:	3f01      	subs	r7, #1
 801ca6e:	4410      	add	r0, r2
 801ca70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca72:	4411      	add	r1, r2
 801ca74:	e77e      	b.n	801c974 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ca76:	f06f 0601 	mvn.w	r6, #1
 801ca7a:	fa1f fa82 	uxth.w	sl, r2
 801ca7e:	43d2      	mvns	r2, r2
 801ca80:	437e      	muls	r6, r7
 801ca82:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ca86:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ca8a:	fb1c fc0a 	smulbb	ip, ip, sl
 801ca8e:	b2ed      	uxtb	r5, r5
 801ca90:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ca94:	fb15 f50a 	smulbb	r5, r5, sl
 801ca98:	b2d2      	uxtb	r2, r2
 801ca9a:	9602      	str	r6, [sp, #8]
 801ca9c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801caa0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801caa4:	fb0e ce02 	mla	lr, lr, r2, ip
 801caa8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801caac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cab0:	fb16 f60a 	smulbb	r6, r6, sl
 801cab4:	fa5f f888 	uxtb.w	r8, r8
 801cab8:	fb08 5502 	mla	r5, r8, r2, r5
 801cabc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cac0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801cac4:	fa1f fe8e 	uxth.w	lr, lr
 801cac8:	b2ad      	uxth	r5, r5
 801caca:	f10e 0201 	add.w	r2, lr, #1
 801cace:	1c6e      	adds	r6, r5, #1
 801cad0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cad4:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801cad8:	fa1f fc8c 	uxth.w	ip, ip
 801cadc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cae0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801cae4:	ea46 0e0e 	orr.w	lr, r6, lr
 801cae8:	f10c 0601 	add.w	r6, ip, #1
 801caec:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801caf0:	0976      	lsrs	r6, r6, #5
 801caf2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801caf6:	9a02      	ldr	r2, [sp, #8]
 801caf8:	ea4e 0e06 	orr.w	lr, lr, r6
 801cafc:	f824 e002 	strh.w	lr, [r4, r2]
 801cb00:	e7b3      	b.n	801ca6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cb02:	f04f 0800 	mov.w	r8, #0
 801cb06:	eba3 0208 	sub.w	r2, r3, r8
 801cb0a:	2a00      	cmp	r2, #0
 801cb0c:	f77f af35 	ble.w	801c97a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cb10:	9e00      	ldr	r6, [sp, #0]
 801cb12:	1402      	asrs	r2, r0, #16
 801cb14:	140d      	asrs	r5, r1, #16
 801cb16:	fb06 2505 	mla	r5, r6, r5, r2
 801cb1a:	9e01      	ldr	r6, [sp, #4]
 801cb1c:	086a      	lsrs	r2, r5, #1
 801cb1e:	5cb2      	ldrb	r2, [r6, r2]
 801cb20:	07ed      	lsls	r5, r5, #31
 801cb22:	bf54      	ite	pl
 801cb24:	f002 020f 	andpl.w	r2, r2, #15
 801cb28:	1112      	asrmi	r2, r2, #4
 801cb2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb2e:	b2d2      	uxtb	r2, r2
 801cb30:	b1c2      	cbz	r2, 801cb64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cb32:	9d04      	ldr	r5, [sp, #16]
 801cb34:	436a      	muls	r2, r5
 801cb36:	1c55      	adds	r5, r2, #1
 801cb38:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801cb3c:	4d2d      	ldr	r5, [pc, #180]	; (801cbf4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801cb3e:	1212      	asrs	r2, r2, #8
 801cb40:	682e      	ldr	r6, [r5, #0]
 801cb42:	2aff      	cmp	r2, #255	; 0xff
 801cb44:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801cb48:	d113      	bne.n	801cb72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801cb4a:	0972      	lsrs	r2, r6, #5
 801cb4c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801cb50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cb54:	f025 0507 	bic.w	r5, r5, #7
 801cb58:	4315      	orrs	r5, r2
 801cb5a:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801cb5e:	4335      	orrs	r5, r6
 801cb60:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801cb64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb66:	f108 0801 	add.w	r8, r8, #1
 801cb6a:	4410      	add	r0, r2
 801cb6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb6e:	4411      	add	r1, r2
 801cb70:	e7c9      	b.n	801cb06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801cb72:	fa1f fa82 	uxth.w	sl, r2
 801cb76:	43d2      	mvns	r2, r2
 801cb78:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801cb7c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801cb80:	fb17 f70a 	smulbb	r7, r7, sl
 801cb84:	b2f6      	uxtb	r6, r6
 801cb86:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cb8a:	fb16 f60a 	smulbb	r6, r6, sl
 801cb8e:	b2d2      	uxtb	r2, r2
 801cb90:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb94:	fb0c 7c02 	mla	ip, ip, r2, r7
 801cb98:	b2ed      	uxtb	r5, r5
 801cb9a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801cb9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cba2:	fb15 f50a 	smulbb	r5, r5, sl
 801cba6:	fa5f fe8e 	uxtb.w	lr, lr
 801cbaa:	fb0e 6602 	mla	r6, lr, r2, r6
 801cbae:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cbb2:	fb07 5702 	mla	r7, r7, r2, r5
 801cbb6:	fa1f fc8c 	uxth.w	ip, ip
 801cbba:	b2b6      	uxth	r6, r6
 801cbbc:	f10c 0201 	add.w	r2, ip, #1
 801cbc0:	1c75      	adds	r5, r6, #1
 801cbc2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801cbc6:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801cbca:	b2bf      	uxth	r7, r7
 801cbcc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801cbd0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cbd4:	ea45 0c0c 	orr.w	ip, r5, ip
 801cbd8:	1c7d      	adds	r5, r7, #1
 801cbda:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801cbde:	096d      	lsrs	r5, r5, #5
 801cbe0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801cbe4:	ea4c 0c05 	orr.w	ip, ip, r5
 801cbe8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801cbec:	e7ba      	b.n	801cb64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cbee:	b007      	add	sp, #28
 801cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbf4:	2004f704 	.word	0x2004f704

0801cbf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc00:	b087      	sub	sp, #28
 801cc02:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cc04:	9101      	str	r1, [sp, #4]
 801cc06:	6841      	ldr	r1, [r0, #4]
 801cc08:	9205      	str	r2, [sp, #20]
 801cc0a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801cc0e:	fb01 2404 	mla	r4, r1, r4, r2
 801cc12:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801cc16:	6802      	ldr	r2, [r0, #0]
 801cc18:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 801cf0c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801cc1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cc20:	f8db 2008 	ldr.w	r2, [fp, #8]
 801cc24:	3201      	adds	r2, #1
 801cc26:	f022 0201 	bic.w	r2, r2, #1
 801cc2a:	9202      	str	r2, [sp, #8]
 801cc2c:	f8db 2000 	ldr.w	r2, [fp]
 801cc30:	9203      	str	r2, [sp, #12]
 801cc32:	9a01      	ldr	r2, [sp, #4]
 801cc34:	2a00      	cmp	r2, #0
 801cc36:	dc03      	bgt.n	801cc40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cc38:	9a05      	ldr	r2, [sp, #20]
 801cc3a:	2a00      	cmp	r2, #0
 801cc3c:	f340 8162 	ble.w	801cf04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801cc40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc42:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801cc46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc4c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801cc50:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	dd0e      	ble.n	801cc76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cc58:	1402      	asrs	r2, r0, #16
 801cc5a:	d405      	bmi.n	801cc68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cc5c:	42ba      	cmp	r2, r7
 801cc5e:	da03      	bge.n	801cc68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cc60:	140a      	asrs	r2, r1, #16
 801cc62:	d401      	bmi.n	801cc68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cc64:	42b2      	cmp	r2, r6
 801cc66:	db07      	blt.n	801cc78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cc68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc6a:	3b01      	subs	r3, #1
 801cc6c:	4410      	add	r0, r2
 801cc6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc70:	3402      	adds	r4, #2
 801cc72:	4411      	add	r1, r2
 801cc74:	e7ee      	b.n	801cc54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cc76:	d017      	beq.n	801cca8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cc78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cc7a:	1e5a      	subs	r2, r3, #1
 801cc7c:	fb05 0502 	mla	r5, r5, r2, r0
 801cc80:	142d      	asrs	r5, r5, #16
 801cc82:	d409      	bmi.n	801cc98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cc84:	42bd      	cmp	r5, r7
 801cc86:	da07      	bge.n	801cc98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cc88:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cc8a:	fb05 1202 	mla	r2, r5, r2, r1
 801cc8e:	1412      	asrs	r2, r2, #16
 801cc90:	d402      	bmi.n	801cc98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cc92:	42b2      	cmp	r2, r6
 801cc94:	f2c0 80c3 	blt.w	801ce1e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801cc98:	2500      	movs	r5, #0
 801cc9a:	195a      	adds	r2, r3, r5
 801cc9c:	2a00      	cmp	r2, #0
 801cc9e:	dc3f      	bgt.n	801cd20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cca0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cca4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cca8:	9b01      	ldr	r3, [sp, #4]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	f340 812a 	ble.w	801cf04 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801ccb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ccb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ccb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ccbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ccc0:	eeb0 6a62 	vmov.f32	s12, s5
 801ccc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ccc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cccc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ccd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ccd8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ccdc:	eeb0 6a43 	vmov.f32	s12, s6
 801cce0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cce4:	ee12 2a90 	vmov	r2, s5
 801cce8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ccec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccf6:	ee13 2a10 	vmov	r2, s6
 801ccfa:	9313      	str	r3, [sp, #76]	; 0x4c
 801ccfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccfe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cd02:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd06:	9314      	str	r3, [sp, #80]	; 0x50
 801cd08:	9b01      	ldr	r3, [sp, #4]
 801cd0a:	9a05      	ldr	r2, [sp, #20]
 801cd0c:	3b01      	subs	r3, #1
 801cd0e:	9301      	str	r3, [sp, #4]
 801cd10:	eeb0 3a67 	vmov.f32	s6, s15
 801cd14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd16:	eef0 2a47 	vmov.f32	s5, s14
 801cd1a:	bf08      	it	eq
 801cd1c:	4613      	moveq	r3, r2
 801cd1e:	e788      	b.n	801cc32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cd20:	1406      	asrs	r6, r0, #16
 801cd22:	d42c      	bmi.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cd24:	f8db 2008 	ldr.w	r2, [fp, #8]
 801cd28:	42b2      	cmp	r2, r6
 801cd2a:	dd28      	ble.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cd2c:	140f      	asrs	r7, r1, #16
 801cd2e:	d426      	bmi.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cd30:	f8db 200c 	ldr.w	r2, [fp, #12]
 801cd34:	42ba      	cmp	r2, r7
 801cd36:	dd22      	ble.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cd38:	9a02      	ldr	r2, [sp, #8]
 801cd3a:	fb07 6602 	mla	r6, r7, r2, r6
 801cd3e:	9f03      	ldr	r7, [sp, #12]
 801cd40:	0872      	lsrs	r2, r6, #1
 801cd42:	5cba      	ldrb	r2, [r7, r2]
 801cd44:	07f6      	lsls	r6, r6, #31
 801cd46:	bf54      	ite	pl
 801cd48:	f002 020f 	andpl.w	r2, r2, #15
 801cd4c:	1112      	asrmi	r2, r2, #4
 801cd4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cd52:	b2d2      	uxtb	r2, r2
 801cd54:	2aff      	cmp	r2, #255	; 0xff
 801cd56:	d118      	bne.n	801cd8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cd58:	f06f 0601 	mvn.w	r6, #1
 801cd5c:	f8d8 2000 	ldr.w	r2, [r8]
 801cd60:	fb06 f705 	mul.w	r7, r6, r5
 801cd64:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801cd68:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801cd6c:	0956      	lsrs	r6, r2, #5
 801cd6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cd72:	ea4c 0606 	orr.w	r6, ip, r6
 801cd76:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801cd7a:	4316      	orrs	r6, r2
 801cd7c:	53e6      	strh	r6, [r4, r7]
 801cd7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd80:	3d01      	subs	r5, #1
 801cd82:	4410      	add	r0, r2
 801cd84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd86:	4411      	add	r1, r2
 801cd88:	e787      	b.n	801cc9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cd8a:	2a00      	cmp	r2, #0
 801cd8c:	d0f7      	beq.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cd8e:	f06f 0601 	mvn.w	r6, #1
 801cd92:	fa1f f982 	uxth.w	r9, r2
 801cd96:	43d2      	mvns	r2, r2
 801cd98:	436e      	muls	r6, r5
 801cd9a:	f8d8 c000 	ldr.w	ip, [r8]
 801cd9e:	f834 e006 	ldrh.w	lr, [r4, r6]
 801cda2:	9604      	str	r6, [sp, #16]
 801cda4:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801cda8:	fb16 f609 	smulbb	r6, r6, r9
 801cdac:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801cdb0:	fa5f fc8c 	uxtb.w	ip, ip
 801cdb4:	ea4f 272e 	mov.w	r7, lr, asr #8
 801cdb8:	fb1c fc09 	smulbb	ip, ip, r9
 801cdbc:	b2d2      	uxtb	r2, r2
 801cdbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cdc2:	fb07 6702 	mla	r7, r7, r2, r6
 801cdc6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cdca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cdce:	fb1a fa09 	smulbb	sl, sl, r9
 801cdd2:	fa5f fe8e 	uxtb.w	lr, lr
 801cdd6:	fb0e cc02 	mla	ip, lr, r2, ip
 801cdda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cdde:	fb06 a602 	mla	r6, r6, r2, sl
 801cde2:	b2bf      	uxth	r7, r7
 801cde4:	fa1f fc8c 	uxth.w	ip, ip
 801cde8:	1c7a      	adds	r2, r7, #1
 801cdea:	f10c 0a01 	add.w	sl, ip, #1
 801cdee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cdf2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cdf6:	b2b6      	uxth	r6, r6
 801cdf8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cdfc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ce00:	ea4a 0707 	orr.w	r7, sl, r7
 801ce04:	f106 0a01 	add.w	sl, r6, #1
 801ce08:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ce0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ce10:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ce14:	9a04      	ldr	r2, [sp, #16]
 801ce16:	ea47 070a 	orr.w	r7, r7, sl
 801ce1a:	52a7      	strh	r7, [r4, r2]
 801ce1c:	e7af      	b.n	801cd7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce1e:	f04f 0e00 	mov.w	lr, #0
 801ce22:	eba3 020e 	sub.w	r2, r3, lr
 801ce26:	2a00      	cmp	r2, #0
 801ce28:	f77f af3a 	ble.w	801cca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ce2c:	9e02      	ldr	r6, [sp, #8]
 801ce2e:	1402      	asrs	r2, r0, #16
 801ce30:	140d      	asrs	r5, r1, #16
 801ce32:	fb06 2505 	mla	r5, r6, r5, r2
 801ce36:	9e03      	ldr	r6, [sp, #12]
 801ce38:	086a      	lsrs	r2, r5, #1
 801ce3a:	5cb2      	ldrb	r2, [r6, r2]
 801ce3c:	07ed      	lsls	r5, r5, #31
 801ce3e:	bf54      	ite	pl
 801ce40:	f002 020f 	andpl.w	r2, r2, #15
 801ce44:	1112      	asrmi	r2, r2, #4
 801ce46:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ce4a:	b2d2      	uxtb	r2, r2
 801ce4c:	2aff      	cmp	r2, #255	; 0xff
 801ce4e:	d115      	bne.n	801ce7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ce50:	f8d8 5000 	ldr.w	r5, [r8]
 801ce54:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801ce58:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801ce5c:	096a      	lsrs	r2, r5, #5
 801ce5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ce62:	4332      	orrs	r2, r6
 801ce64:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ce68:	432a      	orrs	r2, r5
 801ce6a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801ce6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce70:	f10e 0e01 	add.w	lr, lr, #1
 801ce74:	4410      	add	r0, r2
 801ce76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ce78:	4411      	add	r1, r2
 801ce7a:	e7d2      	b.n	801ce22 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801ce7c:	2a00      	cmp	r2, #0
 801ce7e:	d0f6      	beq.n	801ce6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ce80:	fa1f f982 	uxth.w	r9, r2
 801ce84:	43d2      	mvns	r2, r2
 801ce86:	f8d8 7000 	ldr.w	r7, [r8]
 801ce8a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ce8e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801ce92:	fb15 f509 	smulbb	r5, r5, r9
 801ce96:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ce9a:	b2ff      	uxtb	r7, r7
 801ce9c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801cea0:	fb17 f709 	smulbb	r7, r7, r9
 801cea4:	b2d2      	uxtb	r2, r2
 801cea6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ceaa:	fb06 5602 	mla	r6, r6, r2, r5
 801ceae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ceb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ceb6:	fb1a fa09 	smulbb	sl, sl, r9
 801ceba:	fa5f fc8c 	uxtb.w	ip, ip
 801cebe:	fb0c 7702 	mla	r7, ip, r2, r7
 801cec2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801cec6:	fb05 a502 	mla	r5, r5, r2, sl
 801ceca:	b2b6      	uxth	r6, r6
 801cecc:	b2bf      	uxth	r7, r7
 801cece:	1c72      	adds	r2, r6, #1
 801ced0:	f107 0a01 	add.w	sl, r7, #1
 801ced4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801ced8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cedc:	b2ad      	uxth	r5, r5
 801cede:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cee2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801cee6:	ea4a 0606 	orr.w	r6, sl, r6
 801ceea:	f105 0a01 	add.w	sl, r5, #1
 801ceee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cef2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cef6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cefa:	ea46 060a 	orr.w	r6, r6, sl
 801cefe:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801cf02:	e7b4      	b.n	801ce6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cf04:	b007      	add	sp, #28
 801cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf0a:	bf00      	nop
 801cf0c:	2004f704 	.word	0x2004f704

0801cf10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cf10:	4770      	bx	lr

0801cf12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cf12:	4770      	bx	lr

0801cf14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cf14:	4770      	bx	lr

0801cf16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cf16:	4770      	bx	lr

0801cf18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf18:	4770      	bx	lr

0801cf1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf1a:	4770      	bx	lr

0801cf1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf1c:	4770      	bx	lr

0801cf1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf1e:	4770      	bx	lr

0801cf20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf20:	4770      	bx	lr

0801cf22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf22:	4770      	bx	lr

0801cf24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf24:	4770      	bx	lr

0801cf26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf26:	4770      	bx	lr

0801cf28 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf28:	4770      	bx	lr

0801cf2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801cf2a:	4770      	bx	lr

0801cf2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf2c:	4770      	bx	lr

0801cf2e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf2e:	4770      	bx	lr

0801cf30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf30:	4770      	bx	lr

0801cf32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf32:	4770      	bx	lr

0801cf34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf34:	4770      	bx	lr

0801cf36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf36:	4770      	bx	lr

0801cf38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf38:	4770      	bx	lr

0801cf3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf3a:	4770      	bx	lr

0801cf3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf3c:	4770      	bx	lr

0801cf3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf3e:	4770      	bx	lr

0801cf40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf40:	4770      	bx	lr

0801cf42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf42:	4770      	bx	lr

0801cf44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf44:	4770      	bx	lr

0801cf46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801cf46:	4770      	bx	lr

0801cf48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cf48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf4c:	b088      	sub	sp, #32
 801cf4e:	ac08      	add	r4, sp, #32
 801cf50:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801cf54:	4606      	mov	r6, r0
 801cf56:	4620      	mov	r0, r4
 801cf58:	4688      	mov	r8, r1
 801cf5a:	4691      	mov	r9, r2
 801cf5c:	f7fd fc66 	bl	801a82c <_ZNK8touchgfx6Bitmap7getDataEv>
 801cf60:	6833      	ldr	r3, [r6, #0]
 801cf62:	4605      	mov	r5, r0
 801cf64:	4620      	mov	r0, r4
 801cf66:	699f      	ldr	r7, [r3, #24]
 801cf68:	f7fd fb74 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf6c:	4682      	mov	sl, r0
 801cf6e:	4620      	mov	r0, r4
 801cf70:	f7fd fba4 	bl	801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf74:	9500      	str	r5, [sp, #0]
 801cf76:	e9cd a001 	strd	sl, r0, [sp, #4]
 801cf7a:	464b      	mov	r3, r9
 801cf7c:	a806      	add	r0, sp, #24
 801cf7e:	4642      	mov	r2, r8
 801cf80:	4631      	mov	r1, r6
 801cf82:	47b8      	blx	r7
 801cf84:	4628      	mov	r0, r5
 801cf86:	b008      	add	sp, #32
 801cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801cf8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801cf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf90:	2300      	movs	r3, #0
 801cf92:	9300      	str	r3, [sp, #0]
 801cf94:	4b3d      	ldr	r3, [pc, #244]	; (801d08c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801cf96:	781b      	ldrb	r3, [r3, #0]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d137      	bne.n	801d00c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801cf9c:	4a3c      	ldr	r2, [pc, #240]	; (801d090 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801cf9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801cfa2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d132      	bne.n	801d010 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801cfaa:	4b3a      	ldr	r3, [pc, #232]	; (801d094 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801cfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cfb0:	6808      	ldr	r0, [r1, #0]
 801cfb2:	6849      	ldr	r1, [r1, #4]
 801cfb4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cfb8:	ac02      	add	r4, sp, #8
 801cfba:	ab02      	add	r3, sp, #8
 801cfbc:	c303      	stmia	r3!, {r0, r1}
 801cfbe:	4669      	mov	r1, sp
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	f7fa fd2d 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfc6:	4668      	mov	r0, sp
 801cfc8:	f7fa fd02 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfcc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cfd0:	f8bd 2000 	ldrh.w	r2, [sp]
 801cfd4:	4d30      	ldr	r5, [pc, #192]	; (801d098 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801cfd6:	4413      	add	r3, r2
 801cfd8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cfdc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cfe0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cfe4:	6828      	ldr	r0, [r5, #0]
 801cfe6:	4413      	add	r3, r2
 801cfe8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cfec:	6803      	ldr	r3, [r0, #0]
 801cfee:	462f      	mov	r7, r5
 801cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cff2:	4798      	blx	r3
 801cff4:	f010 0f01 	tst.w	r0, #1
 801cff8:	d00c      	beq.n	801d014 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801cffa:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cffe:	6828      	ldr	r0, [r5, #0]
 801d000:	6803      	ldr	r3, [r0, #0]
 801d002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d004:	4798      	blx	r3
 801d006:	b004      	add	sp, #16
 801d008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d00c:	4a21      	ldr	r2, [pc, #132]	; (801d094 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d00e:	e7c6      	b.n	801cf9e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d010:	4b1f      	ldr	r3, [pc, #124]	; (801d090 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d012:	e7cb      	b.n	801cfac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d014:	6838      	ldr	r0, [r7, #0]
 801d016:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801d01a:	6803      	ldr	r3, [r0, #0]
 801d01c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801d020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d022:	4798      	blx	r3
 801d024:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d028:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d02c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801d030:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d034:	fb16 3602 	smlabb	r6, r6, r2, r3
 801d038:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d03c:	6838      	ldr	r0, [r7, #0]
 801d03e:	6803      	ldr	r3, [r0, #0]
 801d040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d042:	4798      	blx	r3
 801d044:	4a12      	ldr	r2, [pc, #72]	; (801d090 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d046:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801d04a:	4691      	mov	r9, r2
 801d04c:	8813      	ldrh	r3, [r2, #0]
 801d04e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d052:	435d      	muls	r5, r3
 801d054:	fb03 1404 	mla	r4, r3, r4, r1
 801d058:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d05c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d060:	6838      	ldr	r0, [r7, #0]
 801d062:	42ac      	cmp	r4, r5
 801d064:	6803      	ldr	r3, [r0, #0]
 801d066:	d20e      	bcs.n	801d086 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801d068:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801d06c:	4632      	mov	r2, r6
 801d06e:	4643      	mov	r3, r8
 801d070:	4621      	mov	r1, r4
 801d072:	47d0      	blx	sl
 801d074:	f8b9 3000 	ldrh.w	r3, [r9]
 801d078:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d07c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d080:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d084:	e7ec      	b.n	801d060 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d088:	4798      	blx	r3
 801d08a:	e7bc      	b.n	801d006 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d08c:	2004f6ec 	.word	0x2004f6ec
 801d090:	2004f6ee 	.word	0x2004f6ee
 801d094:	2004f6f0 	.word	0x2004f6f0
 801d098:	2004f6f4 	.word	0x2004f6f4

0801d09c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a0:	b08b      	sub	sp, #44	; 0x2c
 801d0a2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801d0a6:	460f      	mov	r7, r1
 801d0a8:	4616      	mov	r6, r2
 801d0aa:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801d0ae:	f1bb 0f00 	cmp.w	fp, #0
 801d0b2:	d049      	beq.n	801d148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d0b4:	6810      	ldr	r0, [r2, #0]
 801d0b6:	6851      	ldr	r1, [r2, #4]
 801d0b8:	ad06      	add	r5, sp, #24
 801d0ba:	c503      	stmia	r5!, {r0, r1}
 801d0bc:	6818      	ldr	r0, [r3, #0]
 801d0be:	6859      	ldr	r1, [r3, #4]
 801d0c0:	ad08      	add	r5, sp, #32
 801d0c2:	c503      	stmia	r5!, {r0, r1}
 801d0c4:	a806      	add	r0, sp, #24
 801d0c6:	f7fa fc83 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0ca:	4631      	mov	r1, r6
 801d0cc:	a808      	add	r0, sp, #32
 801d0ce:	f7fa fca7 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d0d2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d0d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d0da:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d0de:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801d0e2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801d0e6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801d0ea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d0ee:	4f60      	ldr	r7, [pc, #384]	; (801d270 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d0f0:	440a      	add	r2, r1
 801d0f2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d0f6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d0fa:	6838      	ldr	r0, [r7, #0]
 801d0fc:	4413      	add	r3, r2
 801d0fe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d102:	6803      	ldr	r3, [r0, #0]
 801d104:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801d108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d10a:	4798      	blx	r3
 801d10c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d110:	46b9      	mov	r9, r7
 801d112:	d01c      	beq.n	801d14e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d114:	f010 0f04 	tst.w	r0, #4
 801d118:	d01d      	beq.n	801d156 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d11a:	2700      	movs	r7, #0
 801d11c:	f8d9 0000 	ldr.w	r0, [r9]
 801d120:	b2ad      	uxth	r5, r5
 801d122:	6801      	ldr	r1, [r0, #0]
 801d124:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801d128:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d12c:	f8cd b00c 	str.w	fp, [sp, #12]
 801d130:	9402      	str	r4, [sp, #8]
 801d132:	fa1f f488 	uxth.w	r4, r8
 801d136:	9501      	str	r5, [sp, #4]
 801d138:	9400      	str	r4, [sp, #0]
 801d13a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801d13c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d140:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d144:	4631      	mov	r1, r6
 801d146:	47a0      	blx	r4
 801d148:	b00b      	add	sp, #44	; 0x2c
 801d14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d14e:	b914      	cbnz	r4, 801d156 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d150:	f010 0f01 	tst.w	r0, #1
 801d154:	e7e0      	b.n	801d118 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801d156:	f8d9 0000 	ldr.w	r0, [r9]
 801d15a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801d15e:	6803      	ldr	r3, [r0, #0]
 801d160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d162:	4798      	blx	r3
 801d164:	4b43      	ldr	r3, [pc, #268]	; (801d274 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801d166:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d16a:	881a      	ldrh	r2, [r3, #0]
 801d16c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d170:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d174:	fb02 1404 	mla	r4, r2, r4, r1
 801d178:	469a      	mov	sl, r3
 801d17a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d17e:	fb05 f502 	mul.w	r5, r5, r2
 801d182:	d059      	beq.n	801d238 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801d184:	469e      	mov	lr, r3
 801d186:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801d18a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d18e:	fa1f f28b 	uxth.w	r2, fp
 801d192:	fa1f f989 	uxth.w	r9, r9
 801d196:	42ac      	cmp	r4, r5
 801d198:	d264      	bcs.n	801d264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d19a:	eb04 0a07 	add.w	sl, r4, r7
 801d19e:	4554      	cmp	r4, sl
 801d1a0:	d23d      	bcs.n	801d21e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801d1a2:	8821      	ldrh	r1, [r4, #0]
 801d1a4:	f836 3b02 	ldrh.w	r3, [r6], #2
 801d1a8:	1208      	asrs	r0, r1, #8
 801d1aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d1ae:	fb10 f009 	smulbb	r0, r0, r9
 801d1b2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801d1b6:	00c9      	lsls	r1, r1, #3
 801d1b8:	b2c9      	uxtb	r1, r1
 801d1ba:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d1be:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d1c2:	fb11 f109 	smulbb	r1, r1, r9
 801d1c6:	fb1b fb09 	smulbb	fp, fp, r9
 801d1ca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d1ce:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d1d2:	10d8      	asrs	r0, r3, #3
 801d1d4:	00db      	lsls	r3, r3, #3
 801d1d6:	b2db      	uxtb	r3, r3
 801d1d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d1dc:	fb03 1302 	mla	r3, r3, r2, r1
 801d1e0:	fb00 b002 	mla	r0, r0, r2, fp
 801d1e4:	fa1f fc8c 	uxth.w	ip, ip
 801d1e8:	f10c 0b01 	add.w	fp, ip, #1
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d1f2:	b280      	uxth	r0, r0
 801d1f4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801d1f8:	f103 0c01 	add.w	ip, r3, #1
 801d1fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d200:	1c43      	adds	r3, r0, #1
 801d202:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d206:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d20a:	0940      	lsrs	r0, r0, #5
 801d20c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d210:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d214:	ea4c 0c00 	orr.w	ip, ip, r0
 801d218:	f824 cb02 	strh.w	ip, [r4], #2
 801d21c:	e7bf      	b.n	801d19e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801d21e:	f8be 3000 	ldrh.w	r3, [lr]
 801d222:	eba3 0308 	sub.w	r3, r3, r8
 801d226:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d22a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d22e:	eba3 0308 	sub.w	r3, r3, r8
 801d232:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d236:	e7ae      	b.n	801d196 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801d238:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d23c:	f8d9 0000 	ldr.w	r0, [r9]
 801d240:	42ac      	cmp	r4, r5
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	d20e      	bcs.n	801d264 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d246:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801d24a:	4632      	mov	r2, r6
 801d24c:	463b      	mov	r3, r7
 801d24e:	4621      	mov	r1, r4
 801d250:	47c0      	blx	r8
 801d252:	f8ba 3000 	ldrh.w	r3, [sl]
 801d256:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d25a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d25e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d262:	e7eb      	b.n	801d23c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801d264:	4b02      	ldr	r3, [pc, #8]	; (801d270 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d266:	6818      	ldr	r0, [r3, #0]
 801d268:	6803      	ldr	r3, [r0, #0]
 801d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d26c:	4798      	blx	r3
 801d26e:	e76b      	b.n	801d148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d270:	2004f6f4 	.word	0x2004f6f4
 801d274:	2004f6ee 	.word	0x2004f6ee

0801d278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d278:	b510      	push	{r4, lr}
 801d27a:	4604      	mov	r4, r0
 801d27c:	2104      	movs	r1, #4
 801d27e:	f009 faa9 	bl	80267d4 <_ZdlPvj>
 801d282:	4620      	mov	r0, r4
 801d284:	bd10      	pop	{r4, pc}

0801d286 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d286:	b510      	push	{r4, lr}
 801d288:	4604      	mov	r4, r0
 801d28a:	2104      	movs	r1, #4
 801d28c:	f009 faa2 	bl	80267d4 <_ZdlPvj>
 801d290:	4620      	mov	r0, r4
 801d292:	bd10      	pop	{r4, pc}

0801d294 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d294:	b510      	push	{r4, lr}
 801d296:	4604      	mov	r4, r0
 801d298:	2104      	movs	r1, #4
 801d29a:	f009 fa9b 	bl	80267d4 <_ZdlPvj>
 801d29e:	4620      	mov	r0, r4
 801d2a0:	bd10      	pop	{r4, pc}

0801d2a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d2a2:	b510      	push	{r4, lr}
 801d2a4:	4604      	mov	r4, r0
 801d2a6:	2104      	movs	r1, #4
 801d2a8:	f009 fa94 	bl	80267d4 <_ZdlPvj>
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	bd10      	pop	{r4, pc}

0801d2b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d2b0:	b510      	push	{r4, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	2104      	movs	r1, #4
 801d2b6:	f009 fa8d 	bl	80267d4 <_ZdlPvj>
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	bd10      	pop	{r4, pc}

0801d2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d2be:	b510      	push	{r4, lr}
 801d2c0:	4604      	mov	r4, r0
 801d2c2:	2104      	movs	r1, #4
 801d2c4:	f009 fa86 	bl	80267d4 <_ZdlPvj>
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	bd10      	pop	{r4, pc}

0801d2cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d2cc:	b510      	push	{r4, lr}
 801d2ce:	4604      	mov	r4, r0
 801d2d0:	2104      	movs	r1, #4
 801d2d2:	f009 fa7f 	bl	80267d4 <_ZdlPvj>
 801d2d6:	4620      	mov	r0, r4
 801d2d8:	bd10      	pop	{r4, pc}

0801d2da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d2da:	b510      	push	{r4, lr}
 801d2dc:	4604      	mov	r4, r0
 801d2de:	2104      	movs	r1, #4
 801d2e0:	f009 fa78 	bl	80267d4 <_ZdlPvj>
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	bd10      	pop	{r4, pc}

0801d2e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d2e8:	b510      	push	{r4, lr}
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	2104      	movs	r1, #4
 801d2ee:	f009 fa71 	bl	80267d4 <_ZdlPvj>
 801d2f2:	4620      	mov	r0, r4
 801d2f4:	bd10      	pop	{r4, pc}

0801d2f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d2f6:	b510      	push	{r4, lr}
 801d2f8:	4604      	mov	r4, r0
 801d2fa:	2104      	movs	r1, #4
 801d2fc:	f009 fa6a 	bl	80267d4 <_ZdlPvj>
 801d300:	4620      	mov	r0, r4
 801d302:	bd10      	pop	{r4, pc}

0801d304 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d304:	b510      	push	{r4, lr}
 801d306:	4604      	mov	r4, r0
 801d308:	2104      	movs	r1, #4
 801d30a:	f009 fa63 	bl	80267d4 <_ZdlPvj>
 801d30e:	4620      	mov	r0, r4
 801d310:	bd10      	pop	{r4, pc}

0801d312 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d312:	b510      	push	{r4, lr}
 801d314:	4604      	mov	r4, r0
 801d316:	2104      	movs	r1, #4
 801d318:	f009 fa5c 	bl	80267d4 <_ZdlPvj>
 801d31c:	4620      	mov	r0, r4
 801d31e:	bd10      	pop	{r4, pc}

0801d320 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d320:	b510      	push	{r4, lr}
 801d322:	4604      	mov	r4, r0
 801d324:	2104      	movs	r1, #4
 801d326:	f009 fa55 	bl	80267d4 <_ZdlPvj>
 801d32a:	4620      	mov	r0, r4
 801d32c:	bd10      	pop	{r4, pc}

0801d32e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d32e:	b510      	push	{r4, lr}
 801d330:	4604      	mov	r4, r0
 801d332:	2104      	movs	r1, #4
 801d334:	f009 fa4e 	bl	80267d4 <_ZdlPvj>
 801d338:	4620      	mov	r0, r4
 801d33a:	bd10      	pop	{r4, pc}

0801d33c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d33c:	b510      	push	{r4, lr}
 801d33e:	4604      	mov	r4, r0
 801d340:	2104      	movs	r1, #4
 801d342:	f009 fa47 	bl	80267d4 <_ZdlPvj>
 801d346:	4620      	mov	r0, r4
 801d348:	bd10      	pop	{r4, pc}

0801d34a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d34a:	b510      	push	{r4, lr}
 801d34c:	4604      	mov	r4, r0
 801d34e:	2104      	movs	r1, #4
 801d350:	f009 fa40 	bl	80267d4 <_ZdlPvj>
 801d354:	4620      	mov	r0, r4
 801d356:	bd10      	pop	{r4, pc}

0801d358 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d358:	b510      	push	{r4, lr}
 801d35a:	4604      	mov	r4, r0
 801d35c:	2104      	movs	r1, #4
 801d35e:	f009 fa39 	bl	80267d4 <_ZdlPvj>
 801d362:	4620      	mov	r0, r4
 801d364:	bd10      	pop	{r4, pc}

0801d366 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d366:	b510      	push	{r4, lr}
 801d368:	4604      	mov	r4, r0
 801d36a:	2104      	movs	r1, #4
 801d36c:	f009 fa32 	bl	80267d4 <_ZdlPvj>
 801d370:	4620      	mov	r0, r4
 801d372:	bd10      	pop	{r4, pc}

0801d374 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d374:	b510      	push	{r4, lr}
 801d376:	4604      	mov	r4, r0
 801d378:	2104      	movs	r1, #4
 801d37a:	f009 fa2b 	bl	80267d4 <_ZdlPvj>
 801d37e:	4620      	mov	r0, r4
 801d380:	bd10      	pop	{r4, pc}

0801d382 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d382:	b510      	push	{r4, lr}
 801d384:	4604      	mov	r4, r0
 801d386:	2104      	movs	r1, #4
 801d388:	f009 fa24 	bl	80267d4 <_ZdlPvj>
 801d38c:	4620      	mov	r0, r4
 801d38e:	bd10      	pop	{r4, pc}

0801d390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d390:	b510      	push	{r4, lr}
 801d392:	4604      	mov	r4, r0
 801d394:	2104      	movs	r1, #4
 801d396:	f009 fa1d 	bl	80267d4 <_ZdlPvj>
 801d39a:	4620      	mov	r0, r4
 801d39c:	bd10      	pop	{r4, pc}

0801d39e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d39e:	b510      	push	{r4, lr}
 801d3a0:	4604      	mov	r4, r0
 801d3a2:	2104      	movs	r1, #4
 801d3a4:	f009 fa16 	bl	80267d4 <_ZdlPvj>
 801d3a8:	4620      	mov	r0, r4
 801d3aa:	bd10      	pop	{r4, pc}

0801d3ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d3ac:	b510      	push	{r4, lr}
 801d3ae:	4604      	mov	r4, r0
 801d3b0:	2104      	movs	r1, #4
 801d3b2:	f009 fa0f 	bl	80267d4 <_ZdlPvj>
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	bd10      	pop	{r4, pc}

0801d3ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d3ba:	b510      	push	{r4, lr}
 801d3bc:	4604      	mov	r4, r0
 801d3be:	2104      	movs	r1, #4
 801d3c0:	f009 fa08 	bl	80267d4 <_ZdlPvj>
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	bd10      	pop	{r4, pc}

0801d3c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d3c8:	b510      	push	{r4, lr}
 801d3ca:	4604      	mov	r4, r0
 801d3cc:	2104      	movs	r1, #4
 801d3ce:	f009 fa01 	bl	80267d4 <_ZdlPvj>
 801d3d2:	4620      	mov	r0, r4
 801d3d4:	bd10      	pop	{r4, pc}

0801d3d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d3d6:	b510      	push	{r4, lr}
 801d3d8:	4604      	mov	r4, r0
 801d3da:	2104      	movs	r1, #4
 801d3dc:	f009 f9fa 	bl	80267d4 <_ZdlPvj>
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	bd10      	pop	{r4, pc}

0801d3e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d3e4:	b510      	push	{r4, lr}
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	2104      	movs	r1, #4
 801d3ea:	f009 f9f3 	bl	80267d4 <_ZdlPvj>
 801d3ee:	4620      	mov	r0, r4
 801d3f0:	bd10      	pop	{r4, pc}

0801d3f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d3f2:	b510      	push	{r4, lr}
 801d3f4:	4604      	mov	r4, r0
 801d3f6:	2104      	movs	r1, #4
 801d3f8:	f009 f9ec 	bl	80267d4 <_ZdlPvj>
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	bd10      	pop	{r4, pc}

0801d400 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	469b      	mov	fp, r3
 801d406:	4616      	mov	r6, r2
 801d408:	b091      	sub	sp, #68	; 0x44
 801d40a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d40e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801d412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d416:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801d41a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d41e:	4604      	mov	r4, r0
 801d420:	460d      	mov	r5, r1
 801d422:	4640      	mov	r0, r8
 801d424:	4659      	mov	r1, fp
 801d426:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d42a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d42e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801d432:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801d436:	f7f6 fd7f 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801d43a:	4631      	mov	r1, r6
 801d43c:	4640      	mov	r0, r8
 801d43e:	f7f6 fd7b 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801d442:	4b74      	ldr	r3, [pc, #464]	; (801d614 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801d444:	8818      	ldrh	r0, [r3, #0]
 801d446:	4b74      	ldr	r3, [pc, #464]	; (801d618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801d448:	b202      	sxth	r2, r0
 801d44a:	8819      	ldrh	r1, [r3, #0]
 801d44c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d450:	b20e      	sxth	r6, r1
 801d452:	2b00      	cmp	r3, #0
 801d454:	da07      	bge.n	801d466 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801d456:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d45a:	4463      	add	r3, ip
 801d45c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d460:	2300      	movs	r3, #0
 801d462:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801d466:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801d46a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d46e:	1ad2      	subs	r2, r2, r3
 801d470:	4594      	cmp	ip, r2
 801d472:	bfc4      	itt	gt
 801d474:	1ac2      	subgt	r2, r0, r3
 801d476:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801d47a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d47e:	2a00      	cmp	r2, #0
 801d480:	da07      	bge.n	801d492 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801d482:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801d486:	4462      	add	r2, ip
 801d488:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d48c:	2200      	movs	r2, #0
 801d48e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801d492:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801d496:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d49a:	eba6 060a 	sub.w	r6, r6, sl
 801d49e:	42b2      	cmp	r2, r6
 801d4a0:	bfc4      	itt	gt
 801d4a2:	eba1 020a 	subgt.w	r2, r1, sl
 801d4a6:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801d4aa:	4a5c      	ldr	r2, [pc, #368]	; (801d61c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801d4ac:	7812      	ldrb	r2, [r2, #0]
 801d4ae:	b9a2      	cbnz	r2, 801d4da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801d4b0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801d4b4:	4286      	cmp	r6, r0
 801d4b6:	4640      	mov	r0, r8
 801d4b8:	9303      	str	r3, [sp, #12]
 801d4ba:	bf14      	ite	ne
 801d4bc:	2600      	movne	r6, #0
 801d4be:	2601      	moveq	r6, #1
 801d4c0:	f7f6 fd7d 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d4c4:	9b03      	ldr	r3, [sp, #12]
 801d4c6:	b160      	cbz	r0, 801d4e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801d4c8:	2300      	movs	r3, #0
 801d4ca:	8023      	strh	r3, [r4, #0]
 801d4cc:	8063      	strh	r3, [r4, #2]
 801d4ce:	80a3      	strh	r3, [r4, #4]
 801d4d0:	4620      	mov	r0, r4
 801d4d2:	80e3      	strh	r3, [r4, #6]
 801d4d4:	b011      	add	sp, #68	; 0x44
 801d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4da:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d4de:	428e      	cmp	r6, r1
 801d4e0:	e7e9      	b.n	801d4b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801d4e2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801d4e6:	a90e      	add	r1, sp, #56	; 0x38
 801d4e8:	9205      	str	r2, [sp, #20]
 801d4ea:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801d4ee:	900e      	str	r0, [sp, #56]	; 0x38
 801d4f0:	9206      	str	r2, [sp, #24]
 801d4f2:	f8bb 2000 	ldrh.w	r2, [fp]
 801d4f6:	a80c      	add	r0, sp, #48	; 0x30
 801d4f8:	1a9b      	subs	r3, r3, r2
 801d4fa:	b21b      	sxth	r3, r3
 801d4fc:	9303      	str	r3, [sp, #12]
 801d4fe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801d502:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801d506:	ebaa 0a03 	sub.w	sl, sl, r3
 801d50a:	fa0f f38a 	sxth.w	r3, sl
 801d50e:	9304      	str	r3, [sp, #16]
 801d510:	9b03      	ldr	r3, [sp, #12]
 801d512:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801d516:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d51a:	9b04      	ldr	r3, [sp, #16]
 801d51c:	f8df b104 	ldr.w	fp, [pc, #260]	; 801d624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d520:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d524:	9b05      	ldr	r3, [sp, #20]
 801d526:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d52a:	9b06      	ldr	r3, [sp, #24]
 801d52c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d530:	f7fa fa76 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d534:	4640      	mov	r0, r8
 801d536:	f7fa fa4b 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d53a:	a80e      	add	r0, sp, #56	; 0x38
 801d53c:	f7fa fa48 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d540:	4b37      	ldr	r3, [pc, #220]	; (801d620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d542:	4628      	mov	r0, r5
 801d544:	881b      	ldrh	r3, [r3, #0]
 801d546:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801d54a:	9307      	str	r3, [sp, #28]
 801d54c:	682b      	ldr	r3, [r5, #0]
 801d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d550:	4798      	blx	r3
 801d552:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801d556:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d55a:	4681      	mov	r9, r0
 801d55c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801d560:	f8db 0000 	ldr.w	r0, [fp]
 801d564:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801d566:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d56a:	6803      	ldr	r3, [r0, #0]
 801d56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d56e:	4798      	blx	r3
 801d570:	4607      	mov	r7, r0
 801d572:	f8db 0000 	ldr.w	r0, [fp]
 801d576:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d57a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d57e:	6803      	ldr	r3, [r0, #0]
 801d580:	9109      	str	r1, [sp, #36]	; 0x24
 801d582:	9208      	str	r2, [sp, #32]
 801d584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d586:	4798      	blx	r3
 801d588:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d58c:	f010 0f01 	tst.w	r0, #1
 801d590:	d012      	beq.n	801d5b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801d592:	f8db 0000 	ldr.w	r0, [fp]
 801d596:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	9200      	str	r2, [sp, #0]
 801d59e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d5a0:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d5a4:	462b      	mov	r3, r5
 801d5a6:	47b0      	blx	r6
 801d5a8:	9b03      	ldr	r3, [sp, #12]
 801d5aa:	8023      	strh	r3, [r4, #0]
 801d5ac:	9b04      	ldr	r3, [sp, #16]
 801d5ae:	8063      	strh	r3, [r4, #2]
 801d5b0:	9b05      	ldr	r3, [sp, #20]
 801d5b2:	80a3      	strh	r3, [r4, #4]
 801d5b4:	9b06      	ldr	r3, [sp, #24]
 801d5b6:	e78b      	b.n	801d4d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801d5b8:	fb09 f202 	mul.w	r2, r9, r2
 801d5bc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d5c0:	440f      	add	r7, r1
 801d5c2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801d5c6:	b166      	cbz	r6, 801d5e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d5c8:	9a07      	ldr	r2, [sp, #28]
 801d5ca:	4592      	cmp	sl, r2
 801d5cc:	d109      	bne.n	801d5e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801d5ce:	f8db 0000 	ldr.w	r0, [fp]
 801d5d2:	fb09 f303 	mul.w	r3, r9, r3
 801d5d6:	6802      	ldr	r2, [r0, #0]
 801d5d8:	4629      	mov	r1, r5
 801d5da:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801d5dc:	463a      	mov	r2, r7
 801d5de:	47b0      	blx	r6
 801d5e0:	e7e2      	b.n	801d5a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d5e2:	fb0a f303 	mul.w	r3, sl, r3
 801d5e6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801d5ea:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801d5ee:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801d5f2:	4545      	cmp	r5, r8
 801d5f4:	d2d8      	bcs.n	801d5a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801d5f6:	f8db 0000 	ldr.w	r0, [fp]
 801d5fa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d5fe:	6802      	ldr	r2, [r0, #0]
 801d600:	4629      	mov	r1, r5
 801d602:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d606:	005b      	lsls	r3, r3, #1
 801d608:	463a      	mov	r2, r7
 801d60a:	47d0      	blx	sl
 801d60c:	444f      	add	r7, r9
 801d60e:	4435      	add	r5, r6
 801d610:	e7ef      	b.n	801d5f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801d612:	bf00      	nop
 801d614:	2004f6e8 	.word	0x2004f6e8
 801d618:	2004f6ea 	.word	0x2004f6ea
 801d61c:	2004f6ec 	.word	0x2004f6ec
 801d620:	2004f6ee 	.word	0x2004f6ee
 801d624:	2004f6f4 	.word	0x2004f6f4

0801d628 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d62a:	4606      	mov	r6, r0
 801d62c:	b087      	sub	sp, #28
 801d62e:	460c      	mov	r4, r1
 801d630:	4617      	mov	r7, r2
 801d632:	461d      	mov	r5, r3
 801d634:	b333      	cbz	r3, 801d684 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d636:	4608      	mov	r0, r1
 801d638:	f7f6 fcc1 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d63c:	bb10      	cbnz	r0, 801d684 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d63e:	6820      	ldr	r0, [r4, #0]
 801d640:	6861      	ldr	r1, [r4, #4]
 801d642:	ab04      	add	r3, sp, #16
 801d644:	4c1b      	ldr	r4, [pc, #108]	; (801d6b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801d646:	c303      	stmia	r3!, {r0, r1}
 801d648:	a804      	add	r0, sp, #16
 801d64a:	f7fa f9c1 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d64e:	6820      	ldr	r0, [r4, #0]
 801d650:	6803      	ldr	r3, [r0, #0]
 801d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d654:	4798      	blx	r3
 801d656:	2dff      	cmp	r5, #255	; 0xff
 801d658:	d016      	beq.n	801d688 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801d65a:	f010 0f08 	tst.w	r0, #8
 801d65e:	6820      	ldr	r0, [r4, #0]
 801d660:	d015      	beq.n	801d68e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d662:	2400      	movs	r4, #0
 801d664:	6801      	ldr	r1, [r0, #0]
 801d666:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801d66a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d66e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d672:	9401      	str	r4, [sp, #4]
 801d674:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d678:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d67c:	9400      	str	r4, [sp, #0]
 801d67e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801d680:	4639      	mov	r1, r7
 801d682:	47a0      	blx	r4
 801d684:	b007      	add	sp, #28
 801d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d688:	f010 0f02 	tst.w	r0, #2
 801d68c:	e7e7      	b.n	801d65e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801d68e:	6803      	ldr	r3, [r0, #0]
 801d690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d692:	4798      	blx	r3
 801d694:	4b08      	ldr	r3, [pc, #32]	; (801d6b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d696:	4601      	mov	r1, r0
 801d698:	881a      	ldrh	r2, [r3, #0]
 801d69a:	e9cd 7500 	strd	r7, r5, [sp]
 801d69e:	6833      	ldr	r3, [r6, #0]
 801d6a0:	4630      	mov	r0, r6
 801d6a2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801d6a4:	ab04      	add	r3, sp, #16
 801d6a6:	47a8      	blx	r5
 801d6a8:	6820      	ldr	r0, [r4, #0]
 801d6aa:	6803      	ldr	r3, [r0, #0]
 801d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6ae:	4798      	blx	r3
 801d6b0:	e7e8      	b.n	801d684 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d6b2:	bf00      	nop
 801d6b4:	2004f6f4 	.word	0x2004f6f4
 801d6b8:	2004f6ee 	.word	0x2004f6ee

0801d6bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6c0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801d6c4:	4688      	mov	r8, r1
 801d6c6:	4614      	mov	r4, r2
 801d6c8:	461d      	mov	r5, r3
 801d6ca:	9e08      	ldr	r6, [sp, #32]
 801d6cc:	2f00      	cmp	r7, #0
 801d6ce:	f000 80a9 	beq.w	801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	f7f6 fc73 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801d6d8:	2800      	cmp	r0, #0
 801d6da:	f040 80a3 	bne.w	801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d6de:	f9b5 1000 	ldrsh.w	r1, [r5]
 801d6e2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d6e6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801d6ea:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801d6ee:	fb04 1303 	mla	r3, r4, r3, r1
 801d6f2:	4365      	muls	r5, r4
 801d6f4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801d6f8:	2fff      	cmp	r7, #255	; 0xff
 801d6fa:	eba4 0200 	sub.w	r2, r4, r0
 801d6fe:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801d702:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801d706:	d04a      	beq.n	801d79e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 801d708:	b2bc      	uxth	r4, r7
 801d70a:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801d70e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801d712:	fa5f f788 	uxtb.w	r7, r8
 801d716:	b2f3      	uxtb	r3, r6
 801d718:	fb0e fe04 	mul.w	lr, lr, r4
 801d71c:	4367      	muls	r7, r4
 801d71e:	4363      	muls	r3, r4
 801d720:	0040      	lsls	r0, r0, #1
 801d722:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801d726:	fa1f fc8c 	uxth.w	ip, ip
 801d72a:	42a9      	cmp	r1, r5
 801d72c:	d27a      	bcs.n	801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d72e:	eb01 0900 	add.w	r9, r1, r0
 801d732:	4549      	cmp	r1, r9
 801d734:	d231      	bcs.n	801d79a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801d736:	880a      	ldrh	r2, [r1, #0]
 801d738:	1214      	asrs	r4, r2, #8
 801d73a:	10d6      	asrs	r6, r2, #3
 801d73c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d740:	00d2      	lsls	r2, r2, #3
 801d742:	b2d2      	uxtb	r2, r2
 801d744:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801d748:	fb14 f40c 	smulbb	r4, r4, ip
 801d74c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d750:	fb12 f20c 	smulbb	r2, r2, ip
 801d754:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d758:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801d75c:	4474      	add	r4, lr
 801d75e:	fb16 f60c 	smulbb	r6, r6, ip
 801d762:	b2a4      	uxth	r4, r4
 801d764:	441a      	add	r2, r3
 801d766:	b292      	uxth	r2, r2
 801d768:	f104 0a01 	add.w	sl, r4, #1
 801d76c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d770:	f102 0a01 	add.w	sl, r2, #1
 801d774:	443e      	add	r6, r7
 801d776:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801d77a:	b2b6      	uxth	r6, r6
 801d77c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d780:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d784:	4322      	orrs	r2, r4
 801d786:	1c74      	adds	r4, r6, #1
 801d788:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801d78c:	0976      	lsrs	r6, r6, #5
 801d78e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d792:	4332      	orrs	r2, r6
 801d794:	f821 2b02 	strh.w	r2, [r1], #2
 801d798:	e7cb      	b.n	801d732 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801d79a:	4441      	add	r1, r8
 801d79c:	e7c5      	b.n	801d72a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801d79e:	4f22      	ldr	r7, [pc, #136]	; (801d828 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 801d7a0:	0973      	lsrs	r3, r6, #5
 801d7a2:	ea08 0707 	and.w	r7, r8, r7
 801d7a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7aa:	433b      	orrs	r3, r7
 801d7ac:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d7b0:	4333      	orrs	r3, r6
 801d7b2:	07e7      	lsls	r7, r4, #31
 801d7b4:	b29b      	uxth	r3, r3
 801d7b6:	d50b      	bpl.n	801d7d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801d7b8:	0040      	lsls	r0, r0, #1
 801d7ba:	0052      	lsls	r2, r2, #1
 801d7bc:	42a9      	cmp	r1, r5
 801d7be:	d231      	bcs.n	801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d7c0:	180c      	adds	r4, r1, r0
 801d7c2:	42a1      	cmp	r1, r4
 801d7c4:	d202      	bcs.n	801d7cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801d7c6:	f821 3b02 	strh.w	r3, [r1], #2
 801d7ca:	e7fa      	b.n	801d7c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801d7cc:	4411      	add	r1, r2
 801d7ce:	e7f5      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 801d7d0:	078e      	lsls	r6, r1, #30
 801d7d2:	d008      	beq.n	801d7e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801d7d4:	460a      	mov	r2, r1
 801d7d6:	0066      	lsls	r6, r4, #1
 801d7d8:	42aa      	cmp	r2, r5
 801d7da:	d202      	bcs.n	801d7e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801d7dc:	8013      	strh	r3, [r2, #0]
 801d7de:	4432      	add	r2, r6
 801d7e0:	e7fa      	b.n	801d7d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801d7e2:	3102      	adds	r1, #2
 801d7e4:	3801      	subs	r0, #1
 801d7e6:	07c2      	lsls	r2, r0, #31
 801d7e8:	d50b      	bpl.n	801d802 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801d7ea:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801d7ee:	3a01      	subs	r2, #1
 801d7f0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801d7f4:	0066      	lsls	r6, r4, #1
 801d7f6:	42aa      	cmp	r2, r5
 801d7f8:	d202      	bcs.n	801d800 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801d7fa:	8013      	strh	r3, [r2, #0]
 801d7fc:	4432      	add	r2, r6
 801d7fe:	e7fa      	b.n	801d7f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801d800:	3801      	subs	r0, #1
 801d802:	b178      	cbz	r0, 801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d804:	1040      	asrs	r0, r0, #1
 801d806:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801d80a:	0080      	lsls	r0, r0, #2
 801d80c:	0064      	lsls	r4, r4, #1
 801d80e:	42a9      	cmp	r1, r5
 801d810:	d208      	bcs.n	801d824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801d812:	460a      	mov	r2, r1
 801d814:	180e      	adds	r6, r1, r0
 801d816:	42b2      	cmp	r2, r6
 801d818:	d202      	bcs.n	801d820 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801d81a:	f842 3b04 	str.w	r3, [r2], #4
 801d81e:	e7fa      	b.n	801d816 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801d820:	4421      	add	r1, r4
 801d822:	e7f4      	b.n	801d80e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801d824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d828:	00fff800 	.word	0x00fff800

0801d82c <_ZN8touchgfx8LCD16bppC1Ev>:
 801d82c:	2200      	movs	r2, #0
 801d82e:	4910      	ldr	r1, [pc, #64]	; (801d870 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801d830:	6042      	str	r2, [r0, #4]
 801d832:	6001      	str	r1, [r0, #0]
 801d834:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d838:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d83c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d840:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d844:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d848:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d84c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d850:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d854:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d858:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d85c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801d860:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801d864:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801d868:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801d86c:	4770      	bx	lr
 801d86e:	bf00      	nop
 801d870:	08029dc8 	.word	0x08029dc8

0801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d878:	460d      	mov	r5, r1
 801d87a:	4604      	mov	r4, r0
 801d87c:	4699      	mov	r9, r3
 801d87e:	b08d      	sub	sp, #52	; 0x34
 801d880:	6808      	ldr	r0, [r1, #0]
 801d882:	6849      	ldr	r1, [r1, #4]
 801d884:	ab08      	add	r3, sp, #32
 801d886:	c303      	stmia	r3!, {r0, r1}
 801d888:	6810      	ldr	r0, [r2, #0]
 801d88a:	6851      	ldr	r1, [r2, #4]
 801d88c:	ab0a      	add	r3, sp, #40	; 0x28
 801d88e:	c303      	stmia	r3!, {r0, r1}
 801d890:	a808      	add	r0, sp, #32
 801d892:	f7fa f89d 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d896:	4629      	mov	r1, r5
 801d898:	a80a      	add	r0, sp, #40	; 0x28
 801d89a:	f7fa f8c1 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d89e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d8a2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d8a6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d8aa:	4d63      	ldr	r5, [pc, #396]	; (801da38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801d8ac:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d8b0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d8b4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d8b8:	6828      	ldr	r0, [r5, #0]
 801d8ba:	440a      	add	r2, r1
 801d8bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d8c0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d8c4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801d8c8:	4413      	add	r3, r2
 801d8ca:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d8ce:	6803      	ldr	r3, [r0, #0]
 801d8d0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8d6:	4798      	blx	r3
 801d8d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d8dc:	d119      	bne.n	801d912 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801d8de:	f010 0f20 	tst.w	r0, #32
 801d8e2:	6828      	ldr	r0, [r5, #0]
 801d8e4:	d018      	beq.n	801d918 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801d8e6:	2500      	movs	r5, #0
 801d8e8:	6801      	ldr	r1, [r0, #0]
 801d8ea:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801d8ee:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d8f2:	b2b6      	uxth	r6, r6
 801d8f4:	9502      	str	r5, [sp, #8]
 801d8f6:	fa1f f588 	uxth.w	r5, r8
 801d8fa:	9601      	str	r6, [sp, #4]
 801d8fc:	9500      	str	r5, [sp, #0]
 801d8fe:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d900:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d904:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d908:	4621      	mov	r1, r4
 801d90a:	47a8      	blx	r5
 801d90c:	b00d      	add	sp, #52	; 0x34
 801d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d912:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d916:	e7e4      	b.n	801d8e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801d918:	6803      	ldr	r3, [r0, #0]
 801d91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d91c:	4798      	blx	r3
 801d91e:	4947      	ldr	r1, [pc, #284]	; (801da3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801d920:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d924:	468a      	mov	sl, r1
 801d926:	880b      	ldrh	r3, [r1, #0]
 801d928:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d92c:	fb03 5202 	mla	r2, r3, r2, r5
 801d930:	4373      	muls	r3, r6
 801d932:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801d936:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d93a:	9307      	str	r3, [sp, #28]
 801d93c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d940:	9306      	str	r3, [sp, #24]
 801d942:	9b07      	ldr	r3, [sp, #28]
 801d944:	4298      	cmp	r0, r3
 801d946:	d270      	bcs.n	801da2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801d948:	4621      	mov	r1, r4
 801d94a:	9b06      	ldr	r3, [sp, #24]
 801d94c:	eb00 0b03 	add.w	fp, r0, r3
 801d950:	4558      	cmp	r0, fp
 801d952:	d25d      	bcs.n	801da10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801d954:	f851 4b04 	ldr.w	r4, [r1], #4
 801d958:	0e23      	lsrs	r3, r4, #24
 801d95a:	d014      	beq.n	801d986 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801d95c:	2bff      	cmp	r3, #255	; 0xff
 801d95e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801d962:	d112      	bne.n	801d98a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d964:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d968:	d10f      	bne.n	801d98a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801d96a:	0963      	lsrs	r3, r4, #5
 801d96c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801d970:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d974:	f02c 0c07 	bic.w	ip, ip, #7
 801d978:	ea43 0c0c 	orr.w	ip, r3, ip
 801d97c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d980:	ea4c 0404 	orr.w	r4, ip, r4
 801d984:	8004      	strh	r4, [r0, #0]
 801d986:	3002      	adds	r0, #2
 801d988:	e7e2      	b.n	801d950 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801d98a:	fb09 f303 	mul.w	r3, r9, r3
 801d98e:	1c5a      	adds	r2, r3, #1
 801d990:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801d994:	1212      	asrs	r2, r2, #8
 801d996:	b293      	uxth	r3, r2
 801d998:	43d2      	mvns	r2, r2
 801d99a:	8807      	ldrh	r7, [r0, #0]
 801d99c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801d9a0:	fb1e fe03 	smulbb	lr, lr, r3
 801d9a4:	123e      	asrs	r6, r7, #8
 801d9a6:	fa5f fc8c 	uxtb.w	ip, ip
 801d9aa:	b2e4      	uxtb	r4, r4
 801d9ac:	fb1c fc03 	smulbb	ip, ip, r3
 801d9b0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d9b4:	fb14 f403 	smulbb	r4, r4, r3
 801d9b8:	b2d2      	uxtb	r2, r2
 801d9ba:	10fd      	asrs	r5, r7, #3
 801d9bc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d9c0:	00ff      	lsls	r7, r7, #3
 801d9c2:	fb06 e602 	mla	r6, r6, r2, lr
 801d9c6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d9ca:	b2ff      	uxtb	r7, r7
 801d9cc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801d9d0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d9d4:	fb05 c502 	mla	r5, r5, r2, ip
 801d9d8:	fb07 4702 	mla	r7, r7, r2, r4
 801d9dc:	b2b6      	uxth	r6, r6
 801d9de:	f106 0e01 	add.w	lr, r6, #1
 801d9e2:	b2ad      	uxth	r5, r5
 801d9e4:	b2bf      	uxth	r7, r7
 801d9e6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d9ea:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801d9ee:	f105 0c01 	add.w	ip, r5, #1
 801d9f2:	1c7e      	adds	r6, r7, #1
 801d9f4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d9f8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801d9fc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801da00:	096d      	lsrs	r5, r5, #5
 801da02:	ea46 060e 	orr.w	r6, r6, lr
 801da06:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801da0a:	432e      	orrs	r6, r5
 801da0c:	8006      	strh	r6, [r0, #0]
 801da0e:	e7ba      	b.n	801d986 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801da10:	f8ba 3000 	ldrh.w	r3, [sl]
 801da14:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801da18:	eba3 0308 	sub.w	r3, r3, r8
 801da1c:	eba4 0408 	sub.w	r4, r4, r8
 801da20:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801da24:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801da28:	e78b      	b.n	801d942 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801da2a:	4b03      	ldr	r3, [pc, #12]	; (801da38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801da2c:	6818      	ldr	r0, [r3, #0]
 801da2e:	6803      	ldr	r3, [r0, #0]
 801da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da32:	4798      	blx	r3
 801da34:	e76a      	b.n	801d90c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801da36:	bf00      	nop
 801da38:	2004f6f4 	.word	0x2004f6f4
 801da3c:	2004f6ee 	.word	0x2004f6ee

0801da40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801da40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da44:	b085      	sub	sp, #20
 801da46:	466d      	mov	r5, sp
 801da48:	4616      	mov	r6, r2
 801da4a:	460c      	mov	r4, r1
 801da4c:	6810      	ldr	r0, [r2, #0]
 801da4e:	6851      	ldr	r1, [r2, #4]
 801da50:	c503      	stmia	r5!, {r0, r1}
 801da52:	6818      	ldr	r0, [r3, #0]
 801da54:	6859      	ldr	r1, [r3, #4]
 801da56:	c503      	stmia	r5!, {r0, r1}
 801da58:	4668      	mov	r0, sp
 801da5a:	f7f9 ffb9 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da5e:	4631      	mov	r1, r6
 801da60:	a802      	add	r0, sp, #8
 801da62:	f7f9 ffdd 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da66:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801da6a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801da6e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801da72:	4d28      	ldr	r5, [pc, #160]	; (801db14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801da74:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da78:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801da7c:	f8bd 1000 	ldrh.w	r1, [sp]
 801da80:	6828      	ldr	r0, [r5, #0]
 801da82:	440a      	add	r2, r1
 801da84:	f8ad 2008 	strh.w	r2, [sp, #8]
 801da88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801da8c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801da90:	4413      	add	r3, r2
 801da92:	f8ad 300a 	strh.w	r3, [sp, #10]
 801da96:	6803      	ldr	r3, [r0, #0]
 801da98:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801da9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da9e:	4798      	blx	r3
 801daa0:	4e1d      	ldr	r6, [pc, #116]	; (801db18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801daa2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801daa6:	8833      	ldrh	r3, [r6, #0]
 801daa8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801daac:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801db1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801dab0:	fb03 1202 	mla	r2, r3, r2, r1
 801dab4:	fb08 f303 	mul.w	r3, r8, r3
 801dab8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dabc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dac0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801dac4:	4298      	cmp	r0, r3
 801dac6:	d21d      	bcs.n	801db04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801dac8:	eb00 080c 	add.w	r8, r0, ip
 801dacc:	4540      	cmp	r0, r8
 801dace:	d20f      	bcs.n	801daf0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801dad0:	f854 1b04 	ldr.w	r1, [r4], #4
 801dad4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801dad8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801dadc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dae0:	ea42 0209 	orr.w	r2, r2, r9
 801dae4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801dae8:	430a      	orrs	r2, r1
 801daea:	f820 2b02 	strh.w	r2, [r0], #2
 801daee:	e7ed      	b.n	801dacc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801daf0:	8832      	ldrh	r2, [r6, #0]
 801daf2:	1bd2      	subs	r2, r2, r7
 801daf4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801daf8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801dafc:	1bd2      	subs	r2, r2, r7
 801dafe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801db02:	e7df      	b.n	801dac4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801db04:	6828      	ldr	r0, [r5, #0]
 801db06:	6803      	ldr	r3, [r0, #0]
 801db08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db0a:	4798      	blx	r3
 801db0c:	b005      	add	sp, #20
 801db0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db12:	bf00      	nop
 801db14:	2004f6f4 	.word	0x2004f6f4
 801db18:	2004f6ee 	.word	0x2004f6ee
 801db1c:	fffff800 	.word	0xfffff800

0801db20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801db20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db24:	460e      	mov	r6, r1
 801db26:	4604      	mov	r4, r0
 801db28:	461d      	mov	r5, r3
 801db2a:	b08e      	sub	sp, #56	; 0x38
 801db2c:	6808      	ldr	r0, [r1, #0]
 801db2e:	6849      	ldr	r1, [r1, #4]
 801db30:	ab0a      	add	r3, sp, #40	; 0x28
 801db32:	c303      	stmia	r3!, {r0, r1}
 801db34:	6810      	ldr	r0, [r2, #0]
 801db36:	6851      	ldr	r1, [r2, #4]
 801db38:	ab0c      	add	r3, sp, #48	; 0x30
 801db3a:	c303      	stmia	r3!, {r0, r1}
 801db3c:	a80a      	add	r0, sp, #40	; 0x28
 801db3e:	f7f9 ff47 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db42:	4631      	mov	r1, r6
 801db44:	a80c      	add	r0, sp, #48	; 0x30
 801db46:	f7f9 ff6b 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db4a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801db4e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801db52:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801db56:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dd08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801db5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801db5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db62:	440c      	add	r4, r1
 801db64:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801db68:	f8d8 0000 	ldr.w	r0, [r8]
 801db6c:	440a      	add	r2, r1
 801db6e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801db72:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801db76:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801db7a:	4413      	add	r3, r2
 801db7c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801db80:	6803      	ldr	r3, [r0, #0]
 801db82:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801db86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db88:	4798      	blx	r3
 801db8a:	2dff      	cmp	r5, #255	; 0xff
 801db8c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801dd0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801db90:	d124      	bne.n	801dbdc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801db92:	f010 0f01 	tst.w	r0, #1
 801db96:	f8d8 0000 	ldr.w	r0, [r8]
 801db9a:	d022      	beq.n	801dbe2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801db9c:	2100      	movs	r1, #0
 801db9e:	f04f 0e01 	mov.w	lr, #1
 801dba2:	f8d0 c000 	ldr.w	ip, [r0]
 801dba6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801dbaa:	f8cd e018 	str.w	lr, [sp, #24]
 801dbae:	f8b9 e000 	ldrh.w	lr, [r9]
 801dbb2:	b2b6      	uxth	r6, r6
 801dbb4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801dbb8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801dbbc:	b2bf      	uxth	r7, r7
 801dbbe:	9102      	str	r1, [sp, #8]
 801dbc0:	9503      	str	r5, [sp, #12]
 801dbc2:	9601      	str	r6, [sp, #4]
 801dbc4:	9700      	str	r7, [sp, #0]
 801dbc6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801dbca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801dbce:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801dbd2:	4621      	mov	r1, r4
 801dbd4:	47a8      	blx	r5
 801dbd6:	b00e      	add	sp, #56	; 0x38
 801dbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbdc:	f010 0f04 	tst.w	r0, #4
 801dbe0:	e7d9      	b.n	801db96 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801dbe2:	6803      	ldr	r3, [r0, #0]
 801dbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbe6:	4798      	blx	r3
 801dbe8:	f8b9 3000 	ldrh.w	r3, [r9]
 801dbec:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801dbf0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801dbf4:	435e      	muls	r6, r3
 801dbf6:	fb03 1202 	mla	r2, r3, r2, r1
 801dbfa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801dbfe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dc02:	ebac 0c07 	sub.w	ip, ip, r7
 801dc06:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801dc0a:	2dff      	cmp	r5, #255	; 0xff
 801dc0c:	eba3 0707 	sub.w	r7, r3, r7
 801dc10:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801dc14:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dc18:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801dc1c:	d049      	beq.n	801dcb2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801dc1e:	43eb      	mvns	r3, r5
 801dc20:	fa1f f985 	uxth.w	r9, r5
 801dc24:	b2db      	uxtb	r3, r3
 801dc26:	42b0      	cmp	r0, r6
 801dc28:	d266      	bcs.n	801dcf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801dc2a:	eb00 0a0e 	add.w	sl, r0, lr
 801dc2e:	4550      	cmp	r0, sl
 801dc30:	4621      	mov	r1, r4
 801dc32:	f104 0403 	add.w	r4, r4, #3
 801dc36:	d25b      	bcs.n	801dcf0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801dc38:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801dc3c:	8802      	ldrh	r2, [r0, #0]
 801dc3e:	fb11 f109 	smulbb	r1, r1, r9
 801dc42:	ea4f 2822 	mov.w	r8, r2, asr #8
 801dc46:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801dc4a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801dc4e:	fb08 1803 	mla	r8, r8, r3, r1
 801dc52:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801dc56:	10d5      	asrs	r5, r2, #3
 801dc58:	fb11 f109 	smulbb	r1, r1, r9
 801dc5c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dc60:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801dc64:	fb05 1503 	mla	r5, r5, r3, r1
 801dc68:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801dc6c:	00d2      	lsls	r2, r2, #3
 801dc6e:	fb11 f109 	smulbb	r1, r1, r9
 801dc72:	b2d2      	uxtb	r2, r2
 801dc74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dc78:	fb02 1203 	mla	r2, r2, r3, r1
 801dc7c:	fa1f f888 	uxth.w	r8, r8
 801dc80:	b292      	uxth	r2, r2
 801dc82:	f108 0101 	add.w	r1, r8, #1
 801dc86:	b2ad      	uxth	r5, r5
 801dc88:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801dc8c:	1c51      	adds	r1, r2, #1
 801dc8e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dc92:	1c69      	adds	r1, r5, #1
 801dc94:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801dc98:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801dc9c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dca0:	096d      	lsrs	r5, r5, #5
 801dca2:	ea42 0208 	orr.w	r2, r2, r8
 801dca6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcaa:	432a      	orrs	r2, r5
 801dcac:	f820 2b02 	strh.w	r2, [r0], #2
 801dcb0:	e7bd      	b.n	801dc2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801dcb2:	4a14      	ldr	r2, [pc, #80]	; (801dd04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801dcb4:	42b0      	cmp	r0, r6
 801dcb6:	d21f      	bcs.n	801dcf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801dcb8:	eb00 050e 	add.w	r5, r0, lr
 801dcbc:	42a8      	cmp	r0, r5
 801dcbe:	4621      	mov	r1, r4
 801dcc0:	f104 0403 	add.w	r4, r4, #3
 801dcc4:	d210      	bcs.n	801dce8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801dcc6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801dcca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801dcce:	00db      	lsls	r3, r3, #3
 801dcd0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801dcd4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dcd8:	430b      	orrs	r3, r1
 801dcda:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801dcde:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801dce2:	f820 3b02 	strh.w	r3, [r0], #2
 801dce6:	e7e9      	b.n	801dcbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801dce8:	4438      	add	r0, r7
 801dcea:	eb01 040c 	add.w	r4, r1, ip
 801dcee:	e7e1      	b.n	801dcb4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801dcf0:	4438      	add	r0, r7
 801dcf2:	eb01 040c 	add.w	r4, r1, ip
 801dcf6:	e796      	b.n	801dc26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801dcf8:	4b03      	ldr	r3, [pc, #12]	; (801dd08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801dcfa:	6818      	ldr	r0, [r3, #0]
 801dcfc:	6803      	ldr	r3, [r0, #0]
 801dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd00:	4798      	blx	r3
 801dd02:	e768      	b.n	801dbd6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801dd04:	fffff800 	.word	0xfffff800
 801dd08:	2004f6f4 	.word	0x2004f6f4
 801dd0c:	2004f6ee 	.word	0x2004f6ee

0801dd10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dd10:	b4f0      	push	{r4, r5, r6, r7}
 801dd12:	4616      	mov	r6, r2
 801dd14:	2e01      	cmp	r6, #1
 801dd16:	461c      	mov	r4, r3
 801dd18:	460d      	mov	r5, r1
 801dd1a:	9a04      	ldr	r2, [sp, #16]
 801dd1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dd20:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801dd24:	d012      	beq.n	801dd4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801dd26:	d303      	bcc.n	801dd30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801dd28:	2e02      	cmp	r6, #2
 801dd2a:	d00a      	beq.n	801dd42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801dd2c:	bcf0      	pop	{r4, r5, r6, r7}
 801dd2e:	4770      	bx	lr
 801dd30:	6805      	ldr	r5, [r0, #0]
 801dd32:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801dd36:	68ed      	ldr	r5, [r5, #12]
 801dd38:	4613      	mov	r3, r2
 801dd3a:	46ac      	mov	ip, r5
 801dd3c:	4622      	mov	r2, r4
 801dd3e:	bcf0      	pop	{r4, r5, r6, r7}
 801dd40:	4760      	bx	ip
 801dd42:	4621      	mov	r1, r4
 801dd44:	4628      	mov	r0, r5
 801dd46:	bcf0      	pop	{r4, r5, r6, r7}
 801dd48:	f7ff bd94 	b.w	801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	4628      	mov	r0, r5
 801dd50:	bcf0      	pop	{r4, r5, r6, r7}
 801dd52:	f7ff bee5 	b.w	801db20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801dd58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd5c:	4616      	mov	r6, r2
 801dd5e:	4681      	mov	r9, r0
 801dd60:	b093      	sub	sp, #76	; 0x4c
 801dd62:	6810      	ldr	r0, [r2, #0]
 801dd64:	4688      	mov	r8, r1
 801dd66:	6851      	ldr	r1, [r2, #4]
 801dd68:	ac0e      	add	r4, sp, #56	; 0x38
 801dd6a:	c403      	stmia	r4!, {r0, r1}
 801dd6c:	6818      	ldr	r0, [r3, #0]
 801dd6e:	6859      	ldr	r1, [r3, #4]
 801dd70:	ac10      	add	r4, sp, #64	; 0x40
 801dd72:	c403      	stmia	r4!, {r0, r1}
 801dd74:	a80e      	add	r0, sp, #56	; 0x38
 801dd76:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801dd7a:	f7f9 fe29 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd7e:	4631      	mov	r1, r6
 801dd80:	a810      	add	r0, sp, #64	; 0x40
 801dd82:	f7f9 fe4d 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd86:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801dd8a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801dd8e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801dd92:	4e62      	ldr	r6, [pc, #392]	; (801df1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801dd94:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dd98:	4489      	add	r9, r1
 801dd9a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801dd9e:	6830      	ldr	r0, [r6, #0]
 801dda0:	440a      	add	r2, r1
 801dda2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801dda6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ddaa:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ddae:	4413      	add	r3, r2
 801ddb0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ddb4:	6803      	ldr	r3, [r0, #0]
 801ddb6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ddba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddbc:	4798      	blx	r3
 801ddbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ddc2:	4f57      	ldr	r7, [pc, #348]	; (801df20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ddc4:	6830      	ldr	r0, [r6, #0]
 801ddc6:	d01d      	beq.n	801de04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ddc8:	2200      	movs	r2, #0
 801ddca:	6801      	ldr	r1, [r0, #0]
 801ddcc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ddd0:	220b      	movs	r2, #11
 801ddd2:	9207      	str	r2, [sp, #28]
 801ddd4:	883a      	ldrh	r2, [r7, #0]
 801ddd6:	b2a4      	uxth	r4, r4
 801ddd8:	9206      	str	r2, [sp, #24]
 801ddda:	2201      	movs	r2, #1
 801dddc:	e9cd a204 	strd	sl, r2, [sp, #16]
 801dde0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801dde4:	b2ad      	uxth	r5, r5
 801dde6:	9203      	str	r2, [sp, #12]
 801dde8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ddec:	9502      	str	r5, [sp, #8]
 801ddee:	9200      	str	r2, [sp, #0]
 801ddf0:	9401      	str	r4, [sp, #4]
 801ddf2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ddf4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ddf8:	4642      	mov	r2, r8
 801ddfa:	4649      	mov	r1, r9
 801ddfc:	47a0      	blx	r4
 801ddfe:	b013      	add	sp, #76	; 0x4c
 801de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de04:	6803      	ldr	r3, [r0, #0]
 801de06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de08:	4798      	blx	r3
 801de0a:	f04f 0e04 	mov.w	lr, #4
 801de0e:	883b      	ldrh	r3, [r7, #0]
 801de10:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801de14:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801de18:	435d      	muls	r5, r3
 801de1a:	fb03 1202 	mla	r2, r3, r2, r1
 801de1e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801de22:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801de26:	920c      	str	r2, [sp, #48]	; 0x30
 801de28:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801de2c:	1b12      	subs	r2, r2, r4
 801de2e:	920d      	str	r2, [sp, #52]	; 0x34
 801de30:	0062      	lsls	r2, r4, #1
 801de32:	1b1c      	subs	r4, r3, r4
 801de34:	0063      	lsls	r3, r4, #1
 801de36:	920a      	str	r2, [sp, #40]	; 0x28
 801de38:	930b      	str	r3, [sp, #44]	; 0x2c
 801de3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de3c:	4298      	cmp	r0, r3
 801de3e:	d266      	bcs.n	801df0e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801de40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de42:	eb00 0b03 	add.w	fp, r0, r3
 801de46:	4558      	cmp	r0, fp
 801de48:	d25c      	bcs.n	801df04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801de4a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801de4e:	fb1e e303 	smlabb	r3, lr, r3, lr
 801de52:	f858 2003 	ldr.w	r2, [r8, r3]
 801de56:	0e11      	lsrs	r1, r2, #24
 801de58:	d012      	beq.n	801de80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801de5a:	29ff      	cmp	r1, #255	; 0xff
 801de5c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801de60:	d110      	bne.n	801de84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801de62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801de66:	d10d      	bne.n	801de84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801de68:	0953      	lsrs	r3, r2, #5
 801de6a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801de6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801de72:	f027 0707 	bic.w	r7, r7, #7
 801de76:	431f      	orrs	r7, r3
 801de78:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801de7c:	433a      	orrs	r2, r7
 801de7e:	8002      	strh	r2, [r0, #0]
 801de80:	3002      	adds	r0, #2
 801de82:	e7e0      	b.n	801de46 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801de84:	fb0a f101 	mul.w	r1, sl, r1
 801de88:	1c4b      	adds	r3, r1, #1
 801de8a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801de8e:	121b      	asrs	r3, r3, #8
 801de90:	b299      	uxth	r1, r3
 801de92:	43db      	mvns	r3, r3
 801de94:	8806      	ldrh	r6, [r0, #0]
 801de96:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801de9a:	b2d2      	uxtb	r2, r2
 801de9c:	fb1c fc01 	smulbb	ip, ip, r1
 801dea0:	fb12 f201 	smulbb	r2, r2, r1
 801dea4:	1235      	asrs	r5, r6, #8
 801dea6:	10f4      	asrs	r4, r6, #3
 801dea8:	00f6      	lsls	r6, r6, #3
 801deaa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801deae:	b2f6      	uxtb	r6, r6
 801deb0:	b2ff      	uxtb	r7, r7
 801deb2:	b2db      	uxtb	r3, r3
 801deb4:	fb17 f701 	smulbb	r7, r7, r1
 801deb8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801debc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801dec0:	fb05 c503 	mla	r5, r5, r3, ip
 801dec4:	fb06 2203 	mla	r2, r6, r3, r2
 801dec8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801decc:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ded0:	fb04 7403 	mla	r4, r4, r3, r7
 801ded4:	b2ad      	uxth	r5, r5
 801ded6:	b292      	uxth	r2, r2
 801ded8:	f105 0c01 	add.w	ip, r5, #1
 801dedc:	1c57      	adds	r7, r2, #1
 801dede:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801dee2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801dee6:	b2a4      	uxth	r4, r4
 801dee8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801deec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801def0:	433d      	orrs	r5, r7
 801def2:	1c67      	adds	r7, r4, #1
 801def4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801def8:	0964      	lsrs	r4, r4, #5
 801defa:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801defe:	4325      	orrs	r5, r4
 801df00:	8005      	strh	r5, [r0, #0]
 801df02:	e7bd      	b.n	801de80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801df04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df06:	4418      	add	r0, r3
 801df08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df0a:	4499      	add	r9, r3
 801df0c:	e795      	b.n	801de3a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801df0e:	4b03      	ldr	r3, [pc, #12]	; (801df1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801df10:	6818      	ldr	r0, [r3, #0]
 801df12:	6803      	ldr	r3, [r0, #0]
 801df14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df16:	4798      	blx	r3
 801df18:	e771      	b.n	801ddfe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801df1a:	bf00      	nop
 801df1c:	2004f6f4 	.word	0x2004f6f4
 801df20:	2004f6ee 	.word	0x2004f6ee

0801df24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df28:	b087      	sub	sp, #28
 801df2a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801df2e:	4680      	mov	r8, r0
 801df30:	460d      	mov	r5, r1
 801df32:	4614      	mov	r4, r2
 801df34:	2e00      	cmp	r6, #0
 801df36:	f000 80b9 	beq.w	801e0ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801df3a:	6810      	ldr	r0, [r2, #0]
 801df3c:	6851      	ldr	r1, [r2, #4]
 801df3e:	af02      	add	r7, sp, #8
 801df40:	c703      	stmia	r7!, {r0, r1}
 801df42:	6818      	ldr	r0, [r3, #0]
 801df44:	6859      	ldr	r1, [r3, #4]
 801df46:	af04      	add	r7, sp, #16
 801df48:	c703      	stmia	r7!, {r0, r1}
 801df4a:	a802      	add	r0, sp, #8
 801df4c:	f7f9 fd40 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df50:	4621      	mov	r1, r4
 801df52:	a804      	add	r0, sp, #16
 801df54:	f7f9 fd64 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df5c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df60:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801df64:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801df68:	fb14 2103 	smlabb	r1, r4, r3, r2
 801df6c:	eb08 0401 	add.w	r4, r8, r1
 801df70:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801df74:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801df78:	440a      	add	r2, r1
 801df7a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801df7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801df82:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801df86:	4413      	add	r3, r2
 801df88:	f8ad 3012 	strh.w	r3, [sp, #18]
 801df8c:	4b49      	ldr	r3, [pc, #292]	; (801e0b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801df8e:	6818      	ldr	r0, [r3, #0]
 801df90:	6803      	ldr	r3, [r0, #0]
 801df92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df94:	4798      	blx	r3
 801df96:	4b48      	ldr	r3, [pc, #288]	; (801e0b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801df98:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801df9c:	881a      	ldrh	r2, [r3, #0]
 801df9e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801dfa2:	2eff      	cmp	r6, #255	; 0xff
 801dfa4:	fb02 c101 	mla	r1, r2, r1, ip
 801dfa8:	fb02 f207 	mul.w	r2, r2, r7
 801dfac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801dfb0:	f105 0104 	add.w	r1, r5, #4
 801dfb4:	461d      	mov	r5, r3
 801dfb6:	d05a      	beq.n	801e06e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801dfb8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801dfbc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801dfc0:	b2b6      	uxth	r6, r6
 801dfc2:	fa1f fe8e 	uxth.w	lr, lr
 801dfc6:	9301      	str	r3, [sp, #4]
 801dfc8:	4282      	cmp	r2, r0
 801dfca:	d96a      	bls.n	801e0a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801dfcc:	eb00 0b0a 	add.w	fp, r0, sl
 801dfd0:	4583      	cmp	fp, r0
 801dfd2:	d940      	bls.n	801e056 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801dfd4:	8805      	ldrh	r5, [r0, #0]
 801dfd6:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dfda:	122f      	asrs	r7, r5, #8
 801dfdc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dfe0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801dfe4:	fb17 f70e 	smulbb	r7, r7, lr
 801dfe8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801dfec:	00ed      	lsls	r5, r5, #3
 801dfee:	b2ed      	uxtb	r5, r5
 801dff0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801dff4:	fb15 f50e 	smulbb	r5, r5, lr
 801dff8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dffc:	fb0c 7c06 	mla	ip, ip, r6, r7
 801e000:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e004:	10df      	asrs	r7, r3, #3
 801e006:	00db      	lsls	r3, r3, #3
 801e008:	fb19 f90e 	smulbb	r9, r9, lr
 801e00c:	b2db      	uxtb	r3, r3
 801e00e:	fb03 5306 	mla	r3, r3, r6, r5
 801e012:	fa1f fc8c 	uxth.w	ip, ip
 801e016:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e01a:	fb07 9706 	mla	r7, r7, r6, r9
 801e01e:	f10c 0901 	add.w	r9, ip, #1
 801e022:	b29b      	uxth	r3, r3
 801e024:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801e028:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801e02c:	f103 0c01 	add.w	ip, r3, #1
 801e030:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e034:	b2bf      	uxth	r7, r7
 801e036:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e03a:	ea4c 0c09 	orr.w	ip, ip, r9
 801e03e:	f107 0901 	add.w	r9, r7, #1
 801e042:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801e046:	097f      	lsrs	r7, r7, #5
 801e048:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e04c:	ea4c 0c07 	orr.w	ip, ip, r7
 801e050:	f820 cb02 	strh.w	ip, [r0], #2
 801e054:	e7bc      	b.n	801dfd0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801e056:	9b01      	ldr	r3, [sp, #4]
 801e058:	881b      	ldrh	r3, [r3, #0]
 801e05a:	eba3 0308 	sub.w	r3, r3, r8
 801e05e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e062:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e066:	eba3 0308 	sub.w	r3, r3, r8
 801e06a:	441c      	add	r4, r3
 801e06c:	e7ac      	b.n	801dfc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801e06e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e072:	4282      	cmp	r2, r0
 801e074:	d915      	bls.n	801e0a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801e076:	eb00 060a 	add.w	r6, r0, sl
 801e07a:	4286      	cmp	r6, r0
 801e07c:	d906      	bls.n	801e08c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801e07e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e082:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e086:	f820 3b02 	strh.w	r3, [r0], #2
 801e08a:	e7f6      	b.n	801e07a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801e08c:	882b      	ldrh	r3, [r5, #0]
 801e08e:	eba3 0308 	sub.w	r3, r3, r8
 801e092:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e096:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e09a:	eba3 0308 	sub.w	r3, r3, r8
 801e09e:	441c      	add	r4, r3
 801e0a0:	e7e7      	b.n	801e072 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801e0a2:	4b04      	ldr	r3, [pc, #16]	; (801e0b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801e0a4:	6818      	ldr	r0, [r3, #0]
 801e0a6:	6803      	ldr	r3, [r0, #0]
 801e0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0aa:	4798      	blx	r3
 801e0ac:	b007      	add	sp, #28
 801e0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0b2:	bf00      	nop
 801e0b4:	2004f6f4 	.word	0x2004f6f4
 801e0b8:	2004f6ee 	.word	0x2004f6ee

0801e0bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0c0:	b091      	sub	sp, #68	; 0x44
 801e0c2:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801e0c6:	4680      	mov	r8, r0
 801e0c8:	460f      	mov	r7, r1
 801e0ca:	4614      	mov	r4, r2
 801e0cc:	2d00      	cmp	r5, #0
 801e0ce:	d051      	beq.n	801e174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e0d0:	6810      	ldr	r0, [r2, #0]
 801e0d2:	6851      	ldr	r1, [r2, #4]
 801e0d4:	ae0c      	add	r6, sp, #48	; 0x30
 801e0d6:	c603      	stmia	r6!, {r0, r1}
 801e0d8:	6818      	ldr	r0, [r3, #0]
 801e0da:	6859      	ldr	r1, [r3, #4]
 801e0dc:	ae0e      	add	r6, sp, #56	; 0x38
 801e0de:	c603      	stmia	r6!, {r0, r1}
 801e0e0:	a80c      	add	r0, sp, #48	; 0x30
 801e0e2:	f7f9 fc75 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e0e6:	4621      	mov	r1, r4
 801e0e8:	a80e      	add	r0, sp, #56	; 0x38
 801e0ea:	f7f9 fc99 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e0ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e0f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e0f6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e0fa:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 801e2d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801e0fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e102:	eb08 0401 	add.w	r4, r8, r1
 801e106:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e10a:	f8d9 0000 	ldr.w	r0, [r9]
 801e10e:	440a      	add	r2, r1
 801e110:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e114:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e118:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801e11c:	4413      	add	r3, r2
 801e11e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e122:	6803      	ldr	r3, [r0, #0]
 801e124:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801e128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e12a:	4798      	blx	r3
 801e12c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e130:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e2dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801e134:	f8d9 0000 	ldr.w	r0, [r9]
 801e138:	d01f      	beq.n	801e17a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e13a:	2200      	movs	r2, #0
 801e13c:	6801      	ldr	r1, [r0, #0]
 801e13e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e142:	220b      	movs	r2, #11
 801e144:	9207      	str	r2, [sp, #28]
 801e146:	f8b8 2000 	ldrh.w	r2, [r8]
 801e14a:	b2b6      	uxth	r6, r6
 801e14c:	9206      	str	r2, [sp, #24]
 801e14e:	2201      	movs	r2, #1
 801e150:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801e154:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e158:	9601      	str	r6, [sp, #4]
 801e15a:	9203      	str	r2, [sp, #12]
 801e15c:	fa1f f28a 	uxth.w	r2, sl
 801e160:	9202      	str	r2, [sp, #8]
 801e162:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e166:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e16a:	9200      	str	r2, [sp, #0]
 801e16c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e16e:	463a      	mov	r2, r7
 801e170:	4621      	mov	r1, r4
 801e172:	47a8      	blx	r5
 801e174:	b011      	add	sp, #68	; 0x44
 801e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e17a:	6803      	ldr	r3, [r0, #0]
 801e17c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801e180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e182:	4798      	blx	r3
 801e184:	f8b8 2000 	ldrh.w	r2, [r8]
 801e188:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e18c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e190:	2dff      	cmp	r5, #255	; 0xff
 801e192:	fb02 1303 	mla	r3, r2, r3, r1
 801e196:	fb0a fa02 	mul.w	sl, sl, r2
 801e19a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e19e:	d062      	beq.n	801e266 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801e1a0:	ea6f 0c05 	mvn.w	ip, r5
 801e1a4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801e1a8:	930a      	str	r3, [sp, #40]	; 0x28
 801e1aa:	b2ad      	uxth	r5, r5
 801e1ac:	fa5f fc8c 	uxtb.w	ip, ip
 801e1b0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801e1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e1b6:	4298      	cmp	r0, r3
 801e1b8:	f080 8085 	bcs.w	801e2c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e1bc:	eb00 0b09 	add.w	fp, r0, r9
 801e1c0:	4558      	cmp	r0, fp
 801e1c2:	d246      	bcs.n	801e252 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801e1c4:	2303      	movs	r3, #3
 801e1c6:	2204      	movs	r2, #4
 801e1c8:	f814 eb01 	ldrb.w	lr, [r4], #1
 801e1cc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801e1d0:	eb07 0a0e 	add.w	sl, r7, lr
 801e1d4:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801e1d8:	8803      	ldrh	r3, [r0, #0]
 801e1da:	fb18 f805 	smulbb	r8, r8, r5
 801e1de:	1219      	asrs	r1, r3, #8
 801e1e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e1e4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801e1e8:	fb01 810c 	mla	r1, r1, ip, r8
 801e1ec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e1f0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e1f4:	fb1e fe05 	smulbb	lr, lr, r5
 801e1f8:	fb18 f805 	smulbb	r8, r8, r5
 801e1fc:	10da      	asrs	r2, r3, #3
 801e1fe:	00db      	lsls	r3, r3, #3
 801e200:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e204:	b2db      	uxtb	r3, r3
 801e206:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e20a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e20e:	fb02 820c 	mla	r2, r2, ip, r8
 801e212:	fb03 e30c 	mla	r3, r3, ip, lr
 801e216:	b289      	uxth	r1, r1
 801e218:	b292      	uxth	r2, r2
 801e21a:	b29b      	uxth	r3, r3
 801e21c:	f101 0801 	add.w	r8, r1, #1
 801e220:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e224:	f103 0e01 	add.w	lr, r3, #1
 801e228:	f102 0801 	add.w	r8, r2, #1
 801e22c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801e230:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801e234:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e238:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e23c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e240:	ea4e 0101 	orr.w	r1, lr, r1
 801e244:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e248:	ea41 0108 	orr.w	r1, r1, r8
 801e24c:	f820 1b02 	strh.w	r1, [r0], #2
 801e250:	e7b6      	b.n	801e1c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801e252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e254:	881b      	ldrh	r3, [r3, #0]
 801e256:	1b9b      	subs	r3, r3, r6
 801e258:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e25c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e260:	1b9b      	subs	r3, r3, r6
 801e262:	441c      	add	r4, r3
 801e264:	e7a6      	b.n	801e1b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801e266:	2203      	movs	r2, #3
 801e268:	2504      	movs	r5, #4
 801e26a:	491a      	ldr	r1, [pc, #104]	; (801e2d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801e26c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801e270:	4550      	cmp	r0, sl
 801e272:	d228      	bcs.n	801e2c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801e274:	eb00 0c09 	add.w	ip, r0, r9
 801e278:	4560      	cmp	r0, ip
 801e27a:	4623      	mov	r3, r4
 801e27c:	d219      	bcs.n	801e2b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801e27e:	f893 e000 	ldrb.w	lr, [r3]
 801e282:	3401      	adds	r4, #1
 801e284:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801e288:	eb07 0b0e 	add.w	fp, r7, lr
 801e28c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e290:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e294:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e298:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801e29c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801e2a0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e2a4:	ea43 030b 	orr.w	r3, r3, fp
 801e2a8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801e2ac:	f820 3b02 	strh.w	r3, [r0], #2
 801e2b0:	e7e2      	b.n	801e278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801e2b2:	f8b8 3000 	ldrh.w	r3, [r8]
 801e2b6:	1b9b      	subs	r3, r3, r6
 801e2b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e2bc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e2c0:	1b9b      	subs	r3, r3, r6
 801e2c2:	441c      	add	r4, r3
 801e2c4:	e7d4      	b.n	801e270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e2c6:	4b04      	ldr	r3, [pc, #16]	; (801e2d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801e2c8:	6818      	ldr	r0, [r3, #0]
 801e2ca:	6803      	ldr	r3, [r0, #0]
 801e2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2ce:	4798      	blx	r3
 801e2d0:	e750      	b.n	801e174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e2d2:	bf00      	nop
 801e2d4:	fffff800 	.word	0xfffff800
 801e2d8:	2004f6f4 	.word	0x2004f6f4
 801e2dc:	2004f6ee 	.word	0x2004f6ee

0801e2e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e2e0:	b430      	push	{r4, r5}
 801e2e2:	780d      	ldrb	r5, [r1, #0]
 801e2e4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801e2e8:	2d01      	cmp	r5, #1
 801e2ea:	d00a      	beq.n	801e302 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801e2ec:	d305      	bcc.n	801e2fa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801e2ee:	2d02      	cmp	r5, #2
 801e2f0:	d10b      	bne.n	801e30a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801e2f2:	9402      	str	r4, [sp, #8]
 801e2f4:	bc30      	pop	{r4, r5}
 801e2f6:	f7ff be15 	b.w	801df24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801e2fa:	9402      	str	r4, [sp, #8]
 801e2fc:	bc30      	pop	{r4, r5}
 801e2fe:	f7ff bd2b 	b.w	801dd58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e302:	9402      	str	r4, [sp, #8]
 801e304:	bc30      	pop	{r4, r5}
 801e306:	f7ff bed9 	b.w	801e0bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e30a:	bc30      	pop	{r4, r5}
 801e30c:	4770      	bx	lr
	...

0801e310 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e314:	4617      	mov	r7, r2
 801e316:	4604      	mov	r4, r0
 801e318:	460e      	mov	r6, r1
 801e31a:	b087      	sub	sp, #28
 801e31c:	6810      	ldr	r0, [r2, #0]
 801e31e:	6851      	ldr	r1, [r2, #4]
 801e320:	ad02      	add	r5, sp, #8
 801e322:	c503      	stmia	r5!, {r0, r1}
 801e324:	6818      	ldr	r0, [r3, #0]
 801e326:	6859      	ldr	r1, [r3, #4]
 801e328:	ad04      	add	r5, sp, #16
 801e32a:	c503      	stmia	r5!, {r0, r1}
 801e32c:	a802      	add	r0, sp, #8
 801e32e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e332:	f7f9 fb4d 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e336:	4639      	mov	r1, r7
 801e338:	a804      	add	r0, sp, #16
 801e33a:	f7f9 fb71 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e33e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e342:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e346:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e34a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e34e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e352:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e356:	440e      	add	r6, r1
 801e358:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e35c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e360:	440a      	add	r2, r1
 801e362:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e366:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e36a:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 801e558 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801e36e:	4413      	add	r3, r2
 801e370:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e374:	4b77      	ldr	r3, [pc, #476]	; (801e554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e376:	6818      	ldr	r0, [r3, #0]
 801e378:	6803      	ldr	r3, [r0, #0]
 801e37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e37c:	4798      	blx	r3
 801e37e:	f8b9 b000 	ldrh.w	fp, [r9]
 801e382:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e386:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e38a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e38e:	fb0b 2303 	mla	r3, fp, r3, r2
 801e392:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e396:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e39a:	fb05 f50b 	mul.w	r5, r5, fp
 801e39e:	9300      	str	r3, [sp, #0]
 801e3a0:	d069      	beq.n	801e476 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801e3a2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801e3a6:	4558      	cmp	r0, fp
 801e3a8:	f080 80cc 	bcs.w	801e544 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e3ac:	4631      	mov	r1, r6
 801e3ae:	9b00      	ldr	r3, [sp, #0]
 801e3b0:	18c3      	adds	r3, r0, r3
 801e3b2:	9301      	str	r3, [sp, #4]
 801e3b4:	9b01      	ldr	r3, [sp, #4]
 801e3b6:	4298      	cmp	r0, r3
 801e3b8:	d24f      	bcs.n	801e45a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801e3ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3be:	2a00      	cmp	r2, #0
 801e3c0:	d048      	beq.n	801e454 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e3c2:	fb0a f202 	mul.w	r2, sl, r2
 801e3c6:	1c53      	adds	r3, r2, #1
 801e3c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e3cc:	121b      	asrs	r3, r3, #8
 801e3ce:	d041      	beq.n	801e454 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801e3d0:	b29e      	uxth	r6, r3
 801e3d2:	43db      	mvns	r3, r3
 801e3d4:	8802      	ldrh	r2, [r0, #0]
 801e3d6:	b2db      	uxtb	r3, r3
 801e3d8:	1215      	asrs	r5, r2, #8
 801e3da:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e3de:	f8b4 c000 	ldrh.w	ip, [r4]
 801e3e2:	fb15 f503 	smulbb	r5, r5, r3
 801e3e6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e3ea:	00d2      	lsls	r2, r2, #3
 801e3ec:	b2d2      	uxtb	r2, r2
 801e3ee:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e3f2:	fb12 f203 	smulbb	r2, r2, r3
 801e3f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e3fa:	fb07 5706 	mla	r7, r7, r6, r5
 801e3fe:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e402:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e406:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e40a:	fb1e fe03 	smulbb	lr, lr, r3
 801e40e:	fa5f fc8c 	uxtb.w	ip, ip
 801e412:	fb0c 2c06 	mla	ip, ip, r6, r2
 801e416:	b2bf      	uxth	r7, r7
 801e418:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e41c:	fb05 e506 	mla	r5, r5, r6, lr
 801e420:	f107 0e01 	add.w	lr, r7, #1
 801e424:	fa1f fc8c 	uxth.w	ip, ip
 801e428:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e42c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801e430:	f10c 0701 	add.w	r7, ip, #1
 801e434:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e438:	b2ad      	uxth	r5, r5
 801e43a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e43e:	ea47 070e 	orr.w	r7, r7, lr
 801e442:	f105 0e01 	add.w	lr, r5, #1
 801e446:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e44a:	096d      	lsrs	r5, r5, #5
 801e44c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e450:	432f      	orrs	r7, r5
 801e452:	8007      	strh	r7, [r0, #0]
 801e454:	3002      	adds	r0, #2
 801e456:	3402      	adds	r4, #2
 801e458:	e7ac      	b.n	801e3b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801e45a:	f8b9 3000 	ldrh.w	r3, [r9]
 801e45e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e462:	eba3 0308 	sub.w	r3, r3, r8
 801e466:	eba6 0608 	sub.w	r6, r6, r8
 801e46a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e46e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e472:	440e      	add	r6, r1
 801e474:	e797      	b.n	801e3a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801e476:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e47a:	42a8      	cmp	r0, r5
 801e47c:	d262      	bcs.n	801e544 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e47e:	4631      	mov	r1, r6
 801e480:	9b00      	ldr	r3, [sp, #0]
 801e482:	eb00 0b03 	add.w	fp, r0, r3
 801e486:	4558      	cmp	r0, fp
 801e488:	d24e      	bcs.n	801e528 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801e48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e48e:	b12b      	cbz	r3, 801e49c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e490:	2bff      	cmp	r3, #255	; 0xff
 801e492:	f8b4 e000 	ldrh.w	lr, [r4]
 801e496:	d104      	bne.n	801e4a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801e498:	f8a0 e000 	strh.w	lr, [r0]
 801e49c:	3002      	adds	r0, #2
 801e49e:	3402      	adds	r4, #2
 801e4a0:	e7f1      	b.n	801e486 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801e4a2:	b29f      	uxth	r7, r3
 801e4a4:	43db      	mvns	r3, r3
 801e4a6:	8802      	ldrh	r2, [r0, #0]
 801e4a8:	b2db      	uxtb	r3, r3
 801e4aa:	1216      	asrs	r6, r2, #8
 801e4ac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e4b0:	fb16 f603 	smulbb	r6, r6, r3
 801e4b4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801e4b8:	00d2      	lsls	r2, r2, #3
 801e4ba:	b2d2      	uxtb	r2, r2
 801e4bc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e4c0:	fb1a fa03 	smulbb	sl, sl, r3
 801e4c4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e4c8:	fb12 f303 	smulbb	r3, r2, r3
 801e4cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e4d0:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e4d4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e4d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e4dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e4e0:	fa5f fe8e 	uxtb.w	lr, lr
 801e4e4:	fb06 a607 	mla	r6, r6, r7, sl
 801e4e8:	fb0e 3307 	mla	r3, lr, r7, r3
 801e4ec:	fa1f fc8c 	uxth.w	ip, ip
 801e4f0:	f10c 0201 	add.w	r2, ip, #1
 801e4f4:	b2b6      	uxth	r6, r6
 801e4f6:	b29b      	uxth	r3, r3
 801e4f8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e4fc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801e500:	f106 0a01 	add.w	sl, r6, #1
 801e504:	f103 0c01 	add.w	ip, r3, #1
 801e508:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e50c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801e510:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e514:	0976      	lsrs	r6, r6, #5
 801e516:	ea4c 0c02 	orr.w	ip, ip, r2
 801e51a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e51e:	ea4c 0c06 	orr.w	ip, ip, r6
 801e522:	f8a0 c000 	strh.w	ip, [r0]
 801e526:	e7b9      	b.n	801e49c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801e528:	f8b9 3000 	ldrh.w	r3, [r9]
 801e52c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e530:	eba3 0308 	sub.w	r3, r3, r8
 801e534:	eba6 0608 	sub.w	r6, r6, r8
 801e538:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e53c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e540:	440e      	add	r6, r1
 801e542:	e79a      	b.n	801e47a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801e544:	4b03      	ldr	r3, [pc, #12]	; (801e554 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e546:	6818      	ldr	r0, [r3, #0]
 801e548:	6803      	ldr	r3, [r0, #0]
 801e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e54c:	4798      	blx	r3
 801e54e:	b007      	add	sp, #28
 801e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e554:	2004f6f4 	.word	0x2004f6f4
 801e558:	2004f6ee 	.word	0x2004f6ee

0801e55c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e560:	b089      	sub	sp, #36	; 0x24
 801e562:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801e566:	4682      	mov	sl, r0
 801e568:	460f      	mov	r7, r1
 801e56a:	4691      	mov	r9, r2
 801e56c:	4698      	mov	r8, r3
 801e56e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e570:	2e00      	cmp	r6, #0
 801e572:	d036      	beq.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e574:	4608      	mov	r0, r1
 801e576:	f7fc f86d 	bl	801a654 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e57a:	4605      	mov	r5, r0
 801e57c:	4638      	mov	r0, r7
 801e57e:	f7fc f89d 	bl	801a6bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e582:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e586:	4638      	mov	r0, r7
 801e588:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e58c:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e590:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e594:	f7fc f94a 	bl	801a82c <_ZNK8touchgfx6Bitmap7getDataEv>
 801e598:	4605      	mov	r5, r0
 801e59a:	4638      	mov	r0, r7
 801e59c:	f7fc f976 	bl	801a88c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e5a0:	4681      	mov	r9, r0
 801e5a2:	4638      	mov	r0, r7
 801e5a4:	f7fc f9c6 	bl	801a934 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e5a8:	280b      	cmp	r0, #11
 801e5aa:	d81a      	bhi.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e5ac:	e8df f000 	tbb	[pc, r0]
 801e5b0:	1906aebd 	.word	0x1906aebd
 801e5b4:	19191919 	.word	0x19191919
 801e5b8:	b5191919 	.word	0xb5191919
 801e5bc:	4bb0      	ldr	r3, [pc, #704]	; (801e880 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801e5be:	6818      	ldr	r0, [r3, #0]
 801e5c0:	6803      	ldr	r3, [r0, #0]
 801e5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5c4:	4798      	blx	r3
 801e5c6:	2eff      	cmp	r6, #255	; 0xff
 801e5c8:	d121      	bne.n	801e60e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801e5ca:	0683      	lsls	r3, r0, #26
 801e5cc:	d41f      	bmi.n	801e60e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801e5ce:	4638      	mov	r0, r7
 801e5d0:	f7fc f8f4 	bl	801a7bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e5d4:	b940      	cbnz	r0, 801e5e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801e5d6:	4623      	mov	r3, r4
 801e5d8:	aa02      	add	r2, sp, #8
 801e5da:	4629      	mov	r1, r5
 801e5dc:	4650      	mov	r0, sl
 801e5de:	f7ff fa2f 	bl	801da40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e5e2:	b009      	add	sp, #36	; 0x24
 801e5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5e8:	f10d 0818 	add.w	r8, sp, #24
 801e5ec:	4639      	mov	r1, r7
 801e5ee:	4640      	mov	r0, r8
 801e5f0:	af04      	add	r7, sp, #16
 801e5f2:	f7fc f897 	bl	801a724 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e5f6:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e5fa:	e887 0003 	stmia.w	r7, {r0, r1}
 801e5fe:	4638      	mov	r0, r7
 801e600:	4621      	mov	r1, r4
 801e602:	f7f5 fc99 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801e606:	4638      	mov	r0, r7
 801e608:	f7f5 fcd9 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801e60c:	b130      	cbz	r0, 801e61c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801e60e:	4633      	mov	r3, r6
 801e610:	4622      	mov	r2, r4
 801e612:	a902      	add	r1, sp, #8
 801e614:	4628      	mov	r0, r5
 801e616:	f7ff f92d 	bl	801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e61a:	e7e2      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e61c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e620:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e624:	4293      	cmp	r3, r2
 801e626:	dd12      	ble.n	801e64e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801e628:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e62c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e630:	1a9b      	subs	r3, r3, r2
 801e632:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e636:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e63a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e63e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e642:	4642      	mov	r2, r8
 801e644:	4633      	mov	r3, r6
 801e646:	a902      	add	r1, sp, #8
 801e648:	4628      	mov	r0, r5
 801e64a:	f7ff f913 	bl	801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e64e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e652:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e656:	4293      	cmp	r3, r2
 801e658:	dd12      	ble.n	801e680 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801e65a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e65e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e662:	1a9b      	subs	r3, r3, r2
 801e664:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e668:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e66c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e670:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e674:	23ff      	movs	r3, #255	; 0xff
 801e676:	4642      	mov	r2, r8
 801e678:	a902      	add	r1, sp, #8
 801e67a:	4628      	mov	r0, r5
 801e67c:	f7ff f8fa 	bl	801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e680:	463b      	mov	r3, r7
 801e682:	aa02      	add	r2, sp, #8
 801e684:	4629      	mov	r1, r5
 801e686:	4650      	mov	r0, sl
 801e688:	f7ff f9da 	bl	801da40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801e68c:	88a2      	ldrh	r2, [r4, #4]
 801e68e:	8823      	ldrh	r3, [r4, #0]
 801e690:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e694:	4413      	add	r3, r2
 801e696:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e69a:	b29b      	uxth	r3, r3
 801e69c:	440a      	add	r2, r1
 801e69e:	b292      	uxth	r2, r2
 801e6a0:	b211      	sxth	r1, r2
 801e6a2:	b218      	sxth	r0, r3
 801e6a4:	4288      	cmp	r0, r1
 801e6a6:	dd12      	ble.n	801e6ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801e6a8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e6ac:	1a9b      	subs	r3, r3, r2
 801e6ae:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801e6b2:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e6b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e6ba:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e6be:	23ff      	movs	r3, #255	; 0xff
 801e6c0:	4642      	mov	r2, r8
 801e6c2:	a902      	add	r1, sp, #8
 801e6c4:	4628      	mov	r0, r5
 801e6c6:	f8ad 601a 	strh.w	r6, [sp, #26]
 801e6ca:	f7ff f8d3 	bl	801d874 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e6ce:	88e2      	ldrh	r2, [r4, #6]
 801e6d0:	8863      	ldrh	r3, [r4, #2]
 801e6d2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e6d6:	4413      	add	r3, r2
 801e6d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e6dc:	b29b      	uxth	r3, r3
 801e6de:	440a      	add	r2, r1
 801e6e0:	b292      	uxth	r2, r2
 801e6e2:	b211      	sxth	r1, r2
 801e6e4:	b218      	sxth	r0, r3
 801e6e6:	4288      	cmp	r0, r1
 801e6e8:	f77f af7b 	ble.w	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e6ec:	f9b4 6000 	ldrsh.w	r6, [r4]
 801e6f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e6f4:	1a9b      	subs	r3, r3, r2
 801e6f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e6fa:	f8ad 6018 	strh.w	r6, [sp, #24]
 801e6fe:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e702:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e706:	23ff      	movs	r3, #255	; 0xff
 801e708:	4642      	mov	r2, r8
 801e70a:	e782      	b.n	801e612 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801e70c:	4633      	mov	r3, r6
 801e70e:	4622      	mov	r2, r4
 801e710:	a902      	add	r1, sp, #8
 801e712:	4628      	mov	r0, r5
 801e714:	f7ff fa04 	bl	801db20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801e718:	e763      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e71a:	9600      	str	r6, [sp, #0]
 801e71c:	4623      	mov	r3, r4
 801e71e:	aa02      	add	r2, sp, #8
 801e720:	4649      	mov	r1, r9
 801e722:	4628      	mov	r0, r5
 801e724:	f7ff fddc 	bl	801e2e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e728:	e75b      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e72a:	4638      	mov	r0, r7
 801e72c:	f7fc f846 	bl	801a7bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801e730:	b950      	cbnz	r0, 801e748 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801e732:	e9cd 6000 	strd	r6, r0, [sp]
 801e736:	f8da 3000 	ldr.w	r3, [sl]
 801e73a:	aa02      	add	r2, sp, #8
 801e73c:	68de      	ldr	r6, [r3, #12]
 801e73e:	4629      	mov	r1, r5
 801e740:	4623      	mov	r3, r4
 801e742:	4650      	mov	r0, sl
 801e744:	47b0      	blx	r6
 801e746:	e74c      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e748:	f10d 0818 	add.w	r8, sp, #24
 801e74c:	4639      	mov	r1, r7
 801e74e:	4640      	mov	r0, r8
 801e750:	af04      	add	r7, sp, #16
 801e752:	f7fb ffe7 	bl	801a724 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801e756:	e898 0003 	ldmia.w	r8, {r0, r1}
 801e75a:	e887 0003 	stmia.w	r7, {r0, r1}
 801e75e:	4638      	mov	r0, r7
 801e760:	4621      	mov	r1, r4
 801e762:	f7f5 fbe9 	bl	8013f38 <_ZN8touchgfx4RectaNERKS0_>
 801e766:	4638      	mov	r0, r7
 801e768:	f7f5 fc29 	bl	8013fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801e76c:	b138      	cbz	r0, 801e77e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801e76e:	4623      	mov	r3, r4
 801e770:	9600      	str	r6, [sp, #0]
 801e772:	aa02      	add	r2, sp, #8
 801e774:	4649      	mov	r1, r9
 801e776:	4628      	mov	r0, r5
 801e778:	f7ff fdca 	bl	801e310 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e77c:	e731      	b.n	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e77e:	e9cd 6000 	strd	r6, r0, [sp]
 801e782:	f8da 3000 	ldr.w	r3, [sl]
 801e786:	aa02      	add	r2, sp, #8
 801e788:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801e78c:	4629      	mov	r1, r5
 801e78e:	463b      	mov	r3, r7
 801e790:	4650      	mov	r0, sl
 801e792:	47d8      	blx	fp
 801e794:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e798:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801e79c:	4293      	cmp	r3, r2
 801e79e:	dd13      	ble.n	801e7c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801e7a0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801e7a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e7a8:	1a9b      	subs	r3, r3, r2
 801e7aa:	f8ad 0018 	strh.w	r0, [sp, #24]
 801e7ae:	f8ad 201a 	strh.w	r2, [sp, #26]
 801e7b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e7b6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e7ba:	9600      	str	r6, [sp, #0]
 801e7bc:	4643      	mov	r3, r8
 801e7be:	aa02      	add	r2, sp, #8
 801e7c0:	4649      	mov	r1, r9
 801e7c2:	4628      	mov	r0, r5
 801e7c4:	f7ff fda4 	bl	801e310 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e7c8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801e7cc:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e7d0:	4293      	cmp	r3, r2
 801e7d2:	dd13      	ble.n	801e7fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801e7d4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801e7d8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801e7dc:	1a9b      	subs	r3, r3, r2
 801e7de:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e7e2:	f8ad 001a 	strh.w	r0, [sp, #26]
 801e7e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e7ea:	f8ad 101e 	strh.w	r1, [sp, #30]
 801e7ee:	9600      	str	r6, [sp, #0]
 801e7f0:	4643      	mov	r3, r8
 801e7f2:	aa02      	add	r2, sp, #8
 801e7f4:	4649      	mov	r1, r9
 801e7f6:	4628      	mov	r0, r5
 801e7f8:	f7ff fd8a 	bl	801e310 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e7fc:	88a2      	ldrh	r2, [r4, #4]
 801e7fe:	8823      	ldrh	r3, [r4, #0]
 801e800:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e804:	4413      	add	r3, r2
 801e806:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e80a:	b29b      	uxth	r3, r3
 801e80c:	440a      	add	r2, r1
 801e80e:	b292      	uxth	r2, r2
 801e810:	b211      	sxth	r1, r2
 801e812:	b218      	sxth	r0, r3
 801e814:	4288      	cmp	r0, r1
 801e816:	dd13      	ble.n	801e840 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801e818:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801e81c:	1a9b      	subs	r3, r3, r2
 801e81e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801e822:	f8ad 1018 	strh.w	r1, [sp, #24]
 801e826:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e82a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801e82e:	9600      	str	r6, [sp, #0]
 801e830:	4643      	mov	r3, r8
 801e832:	aa02      	add	r2, sp, #8
 801e834:	4649      	mov	r1, r9
 801e836:	4628      	mov	r0, r5
 801e838:	f8ad 701a 	strh.w	r7, [sp, #26]
 801e83c:	f7ff fd68 	bl	801e310 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801e840:	88e2      	ldrh	r2, [r4, #6]
 801e842:	8863      	ldrh	r3, [r4, #2]
 801e844:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801e848:	4413      	add	r3, r2
 801e84a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801e84e:	b29b      	uxth	r3, r3
 801e850:	440a      	add	r2, r1
 801e852:	b292      	uxth	r2, r2
 801e854:	b211      	sxth	r1, r2
 801e856:	b218      	sxth	r0, r3
 801e858:	4288      	cmp	r0, r1
 801e85a:	f77f aec2 	ble.w	801e5e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801e85e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801e862:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801e866:	1a9b      	subs	r3, r3, r2
 801e868:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e86c:	f8ad 7018 	strh.w	r7, [sp, #24]
 801e870:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e874:	f8ad 001c 	strh.w	r0, [sp, #28]
 801e878:	9600      	str	r6, [sp, #0]
 801e87a:	4643      	mov	r3, r8
 801e87c:	e779      	b.n	801e772 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801e87e:	bf00      	nop
 801e880:	2004f6f4 	.word	0x2004f6f4

0801e884 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801e884:	b180      	cbz	r0, 801e8a8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801e886:	2903      	cmp	r1, #3
 801e888:	d81c      	bhi.n	801e8c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e88a:	e8df f001 	tbb	[pc, r1]
 801e88e:	1d02      	.short	0x1d02
 801e890:	1f08      	.short	0x1f08
 801e892:	4b10      	ldr	r3, [pc, #64]	; (801e8d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e894:	8818      	ldrh	r0, [r3, #0]
 801e896:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e89a:	4240      	negs	r0, r0
 801e89c:	4770      	bx	lr
 801e89e:	4b0d      	ldr	r3, [pc, #52]	; (801e8d4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801e8a0:	8818      	ldrh	r0, [r3, #0]
 801e8a2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e8a6:	4770      	bx	lr
 801e8a8:	2903      	cmp	r1, #3
 801e8aa:	d80b      	bhi.n	801e8c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801e8ac:	a301      	add	r3, pc, #4	; (adr r3, 801e8b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801e8ae:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e8b2:	bf00      	nop
 801e8b4:	0801e8c9 	.word	0x0801e8c9
 801e8b8:	0801e89f 	.word	0x0801e89f
 801e8bc:	0801e8cd 	.word	0x0801e8cd
 801e8c0:	0801e893 	.word	0x0801e893
 801e8c4:	2000      	movs	r0, #0
 801e8c6:	4770      	bx	lr
 801e8c8:	2001      	movs	r0, #1
 801e8ca:	4770      	bx	lr
 801e8cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e8d0:	4770      	bx	lr
 801e8d2:	bf00      	nop
 801e8d4:	2004f6ee 	.word	0x2004f6ee

0801e8d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801e8d8:	b180      	cbz	r0, 801e8fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801e8da:	2903      	cmp	r1, #3
 801e8dc:	d81c      	bhi.n	801e918 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e8de:	e8df f001 	tbb	[pc, r1]
 801e8e2:	021d      	.short	0x021d
 801e8e4:	071f      	.short	0x071f
 801e8e6:	4b10      	ldr	r3, [pc, #64]	; (801e928 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e8e8:	8818      	ldrh	r0, [r3, #0]
 801e8ea:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e8ee:	4770      	bx	lr
 801e8f0:	4b0d      	ldr	r3, [pc, #52]	; (801e928 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801e8f2:	8818      	ldrh	r0, [r3, #0]
 801e8f4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801e8f8:	4240      	negs	r0, r0
 801e8fa:	4770      	bx	lr
 801e8fc:	2903      	cmp	r1, #3
 801e8fe:	d80b      	bhi.n	801e918 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801e900:	a301      	add	r3, pc, #4	; (adr r3, 801e908 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801e902:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e906:	bf00      	nop
 801e908:	0801e8e7 	.word	0x0801e8e7
 801e90c:	0801e921 	.word	0x0801e921
 801e910:	0801e8f1 	.word	0x0801e8f1
 801e914:	0801e91d 	.word	0x0801e91d
 801e918:	2000      	movs	r0, #0
 801e91a:	4770      	bx	lr
 801e91c:	2001      	movs	r0, #1
 801e91e:	4770      	bx	lr
 801e920:	f04f 30ff 	mov.w	r0, #4294967295
 801e924:	4770      	bx	lr
 801e926:	bf00      	nop
 801e928:	2004f6ee 	.word	0x2004f6ee

0801e92c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e930:	b099      	sub	sp, #100	; 0x64
 801e932:	910b      	str	r1, [sp, #44]	; 0x2c
 801e934:	a914      	add	r1, sp, #80	; 0x50
 801e936:	e881 000c 	stmia.w	r1, {r2, r3}
 801e93a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801e93e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801e942:	f891 900d 	ldrb.w	r9, [r1, #13]
 801e946:	9309      	str	r3, [sp, #36]	; 0x24
 801e948:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801e94c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801e950:	9310      	str	r3, [sp, #64]	; 0x40
 801e952:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801e956:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801e95a:	930c      	str	r3, [sp, #48]	; 0x30
 801e95c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801e960:	798f      	ldrb	r7, [r1, #6]
 801e962:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801e966:	431f      	orrs	r7, r3
 801e968:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801e96c:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801e970:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801e974:	f000 8194 	beq.w	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e978:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801e97c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801e980:	f891 9007 	ldrb.w	r9, [r1, #7]
 801e984:	ea59 0903 	orrs.w	r9, r9, r3
 801e988:	f000 818a 	beq.w	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801e98c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e990:	b29b      	uxth	r3, r3
 801e992:	2d00      	cmp	r5, #0
 801e994:	f000 812f 	beq.w	801ebf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801e998:	1aed      	subs	r5, r5, r3
 801e99a:	b2ad      	uxth	r5, r5
 801e99c:	042b      	lsls	r3, r5, #16
 801e99e:	d502      	bpl.n	801e9a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801e9a0:	1b64      	subs	r4, r4, r5
 801e9a2:	2500      	movs	r5, #0
 801e9a4:	b224      	sxth	r4, r4
 801e9a6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e9aa:	a814      	add	r0, sp, #80	; 0x50
 801e9ac:	428c      	cmp	r4, r1
 801e9ae:	b28b      	uxth	r3, r1
 801e9b0:	bfbf      	itttt	lt
 801e9b2:	18ed      	addlt	r5, r5, r3
 801e9b4:	1b2c      	sublt	r4, r5, r4
 801e9b6:	b2a5      	uxthlt	r5, r4
 801e9b8:	460c      	movlt	r4, r1
 801e9ba:	8891      	ldrh	r1, [r2, #4]
 801e9bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e9c0:	440b      	add	r3, r1
 801e9c2:	b21b      	sxth	r3, r3
 801e9c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9c6:	88d3      	ldrh	r3, [r2, #6]
 801e9c8:	8852      	ldrh	r2, [r2, #2]
 801e9ca:	4621      	mov	r1, r4
 801e9cc:	4413      	add	r3, r2
 801e9ce:	b21b      	sxth	r3, r3
 801e9d0:	930d      	str	r3, [sp, #52]	; 0x34
 801e9d2:	4bbd      	ldr	r3, [pc, #756]	; (801ecc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9d6:	f893 b000 	ldrb.w	fp, [r3]
 801e9da:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e9de:	f1dc 0300 	rsbs	r3, ip, #0
 801e9e2:	eb43 030c 	adc.w	r3, r3, ip
 801e9e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e9e8:	4653      	mov	r3, sl
 801e9ea:	f7f8 fe6b 	bl	80176c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e9ee:	4621      	mov	r1, r4
 801e9f0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801e9f4:	4653      	mov	r3, sl
 801e9f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9f8:	a814      	add	r0, sp, #80	; 0x50
 801e9fa:	f7f8 fe80 	bl	80176fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e9fe:	a918      	add	r1, sp, #96	; 0x60
 801ea00:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ea04:	a817      	add	r0, sp, #92	; 0x5c
 801ea06:	f7f8 ffa1 	bl	801794c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ea0a:	f1ba 0f00 	cmp.w	sl, #0
 801ea0e:	f040 80f5 	bne.w	801ebfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801ea12:	f1bb 0f01 	cmp.w	fp, #1
 801ea16:	f040 80f9 	bne.w	801ec0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801ea1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	f040 8144 	bne.w	801ecaa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801ea22:	b2ba      	uxth	r2, r7
 801ea24:	b905      	cbnz	r5, 801ea28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ea26:	b16e      	cbz	r6, 801ea44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ea28:	4631      	mov	r1, r6
 801ea2a:	fb06 5302 	mla	r3, r6, r2, r5
 801ea2e:	fb08 f303 	mul.w	r3, r8, r3
 801ea32:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ea34:	f003 0607 	and.w	r6, r3, #7
 801ea38:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801ea3c:	9328      	str	r3, [sp, #160]	; 0xa0
 801ea3e:	eba9 0301 	sub.w	r3, r9, r1
 801ea42:	930a      	str	r3, [sp, #40]	; 0x28
 801ea44:	4651      	mov	r1, sl
 801ea46:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ea48:	f7ff ff1c 	bl	801e884 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801ea4c:	4681      	mov	r9, r0
 801ea4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ea50:	f7ff ff42 	bl	801e8d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801ea54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea56:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ea58:	4683      	mov	fp, r0
 801ea5a:	eba3 0a01 	sub.w	sl, r3, r1
 801ea5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea60:	459a      	cmp	sl, r3
 801ea62:	bfa8      	it	ge
 801ea64:	469a      	movge	sl, r3
 801ea66:	f1ba 0f00 	cmp.w	sl, #0
 801ea6a:	f340 8119 	ble.w	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ea6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea70:	1b64      	subs	r4, r4, r5
 801ea72:	1b1c      	subs	r4, r3, r4
 801ea74:	42bc      	cmp	r4, r7
 801ea76:	bfd4      	ite	le
 801ea78:	ebc5 0504 	rsble	r5, r5, r4
 801ea7c:	ebc5 0507 	rsbgt	r5, r5, r7
 801ea80:	2d00      	cmp	r5, #0
 801ea82:	f340 810d 	ble.w	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ea86:	1b52      	subs	r2, r2, r5
 801ea88:	fb08 f302 	mul.w	r3, r8, r2
 801ea8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ea8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	f040 8115 	bne.w	801ecc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801ea96:	4b8d      	ldr	r3, [pc, #564]	; (801eccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801ea98:	6818      	ldr	r0, [r3, #0]
 801ea9a:	6803      	ldr	r3, [r0, #0]
 801ea9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea9e:	4798      	blx	r3
 801eaa0:	2301      	movs	r3, #1
 801eaa2:	fa03 f308 	lsl.w	r3, r3, r8
 801eaa6:	4a8a      	ldr	r2, [pc, #552]	; (801ecd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801eaa8:	3b01      	subs	r3, #1
 801eaaa:	b2db      	uxtb	r3, r3
 801eaac:	8811      	ldrh	r1, [r2, #0]
 801eaae:	930e      	str	r3, [sp, #56]	; 0x38
 801eab0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eab4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801eab8:	fb01 2303 	mla	r3, r1, r3, r2
 801eabc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eac0:	930a      	str	r3, [sp, #40]	; 0x28
 801eac2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eac4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801eac8:	9313      	str	r3, [sp, #76]	; 0x4c
 801eaca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eacc:	0a19      	lsrs	r1, r3, #8
 801eace:	b2cb      	uxtb	r3, r1
 801ead0:	9312      	str	r3, [sp, #72]	; 0x48
 801ead2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ead4:	b2db      	uxtb	r3, r3
 801ead6:	9311      	str	r3, [sp, #68]	; 0x44
 801ead8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eada:	095a      	lsrs	r2, r3, #5
 801eadc:	4b7d      	ldr	r3, [pc, #500]	; (801ecd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801eade:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801eae2:	400b      	ands	r3, r1
 801eae4:	4313      	orrs	r3, r2
 801eae6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eae8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801eaec:	4313      	orrs	r3, r2
 801eaee:	b29b      	uxth	r3, r3
 801eaf0:	9310      	str	r3, [sp, #64]	; 0x40
 801eaf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaf4:	781a      	ldrb	r2, [r3, #0]
 801eaf6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801eafa:	fb05 b919 	mls	r9, r5, r9, fp
 801eafe:	fb03 fb05 	mul.w	fp, r3, r5
 801eb02:	4132      	asrs	r2, r6
 801eb04:	b2d2      	uxtb	r2, r2
 801eb06:	930d      	str	r3, [sp, #52]	; 0x34
 801eb08:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801eb0c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801eb10:	f0c0 80f3 	bcc.w	801ecfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801eb14:	46ae      	mov	lr, r5
 801eb16:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801eb1a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801eb1e:	f0c0 80db 	bcc.w	801ecd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801eb22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb24:	4013      	ands	r3, r2
 801eb26:	d055      	beq.n	801ebd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801eb28:	20ff      	movs	r0, #255	; 0xff
 801eb2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eb2c:	fb90 f1f1 	sdiv	r1, r0, r1
 801eb30:	434b      	muls	r3, r1
 801eb32:	2bfe      	cmp	r3, #254	; 0xfe
 801eb34:	dd03      	ble.n	801eb3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801eb36:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb38:	4281      	cmp	r1, r0
 801eb3a:	f000 80c3 	beq.w	801ecc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801eb3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb40:	f8bc 4000 	ldrh.w	r4, [ip]
 801eb44:	fb11 f303 	smulbb	r3, r1, r3
 801eb48:	b29b      	uxth	r3, r3
 801eb4a:	1c59      	adds	r1, r3, #1
 801eb4c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801eb50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eb54:	b29f      	uxth	r7, r3
 801eb56:	43db      	mvns	r3, r3
 801eb58:	b2db      	uxtb	r3, r3
 801eb5a:	9309      	str	r3, [sp, #36]	; 0x24
 801eb5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb5e:	1220      	asrs	r0, r4, #8
 801eb60:	fb13 f907 	smulbb	r9, r3, r7
 801eb64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb6a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801eb6e:	fb00 9003 	mla	r0, r0, r3, r9
 801eb72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eb74:	10e1      	asrs	r1, r4, #3
 801eb76:	fb13 f907 	smulbb	r9, r3, r7
 801eb7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb80:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801eb84:	fb01 9103 	mla	r1, r1, r3, r9
 801eb88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb8a:	00e4      	lsls	r4, r4, #3
 801eb8c:	fb13 f707 	smulbb	r7, r3, r7
 801eb90:	b2e4      	uxtb	r4, r4
 801eb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb94:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801eb98:	fb04 7403 	mla	r4, r4, r3, r7
 801eb9c:	b280      	uxth	r0, r0
 801eb9e:	b2a4      	uxth	r4, r4
 801eba0:	1c43      	adds	r3, r0, #1
 801eba2:	f104 0901 	add.w	r9, r4, #1
 801eba6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ebaa:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801ebae:	b289      	uxth	r1, r1
 801ebb0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801ebb4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ebb8:	ea49 0000 	orr.w	r0, r9, r0
 801ebbc:	f101 0901 	add.w	r9, r1, #1
 801ebc0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801ebc4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ebc8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ebcc:	ea40 0009 	orr.w	r0, r0, r9
 801ebd0:	f8ac 0000 	strh.w	r0, [ip]
 801ebd4:	4446      	add	r6, r8
 801ebd6:	b2b6      	uxth	r6, r6
 801ebd8:	2e07      	cmp	r6, #7
 801ebda:	bf89      	itett	hi
 801ebdc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801ebde:	fa42 f208 	asrls.w	r2, r2, r8
 801ebe2:	785a      	ldrbhi	r2, [r3, #1]
 801ebe4:	3301      	addhi	r3, #1
 801ebe6:	bf88      	it	hi
 801ebe8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801ebea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ebec:	bf94      	ite	ls
 801ebee:	b2d2      	uxtbls	r2, r2
 801ebf0:	2600      	movhi	r6, #0
 801ebf2:	449c      	add	ip, r3
 801ebf4:	e791      	b.n	801eb1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801ebf6:	441c      	add	r4, r3
 801ebf8:	b224      	sxth	r4, r4
 801ebfa:	e6d4      	b.n	801e9a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ebfc:	f1ba 0f01 	cmp.w	sl, #1
 801ec00:	f47f af0b 	bne.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec04:	f1bb 0f01 	cmp.w	fp, #1
 801ec08:	f47f af07 	bne.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec0c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801eccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801ec10:	f8db 0000 	ldr.w	r0, [fp]
 801ec14:	6803      	ldr	r3, [r0, #0]
 801ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec18:	4798      	blx	r3
 801ec1a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801ec1e:	465a      	mov	r2, fp
 801ec20:	d006      	beq.n	801ec30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801ec22:	f1b8 0f04 	cmp.w	r8, #4
 801ec26:	d13e      	bne.n	801eca6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801ec28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec2a:	3300      	adds	r3, #0
 801ec2c:	bf18      	it	ne
 801ec2e:	2301      	movne	r3, #1
 801ec30:	0580      	lsls	r0, r0, #22
 801ec32:	d56b      	bpl.n	801ed0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801ec34:	f1b8 0f08 	cmp.w	r8, #8
 801ec38:	d168      	bne.n	801ed0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	bf0c      	ite	eq
 801ec3e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801ec42:	f44f 7180 	movne.w	r1, #256	; 0x100
 801ec46:	2d00      	cmp	r5, #0
 801ec48:	f47f aee7 	bne.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec4c:	2e00      	cmp	r6, #0
 801ec4e:	f47f aee4 	bne.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ec54:	19e3      	adds	r3, r4, r7
 801ec56:	4283      	cmp	r3, r0
 801ec58:	f73f aedf 	bgt.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ec60:	444b      	add	r3, r9
 801ec62:	4283      	cmp	r3, r0
 801ec64:	f73f aed9 	bgt.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ec68:	2500      	movs	r5, #0
 801ec6a:	6810      	ldr	r0, [r2, #0]
 801ec6c:	b2bf      	uxth	r7, r7
 801ec6e:	6804      	ldr	r4, [r0, #0]
 801ec70:	f1b8 0f08 	cmp.w	r8, #8
 801ec74:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801ec78:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ec7a:	bf1c      	itt	ne
 801ec7c:	3701      	addne	r7, #1
 801ec7e:	f027 0701 	bicne.w	r7, r7, #1
 801ec82:	9104      	str	r1, [sp, #16]
 801ec84:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ec86:	bf18      	it	ne
 801ec88:	b2bf      	uxthne	r7, r7
 801ec8a:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ec8e:	e9cd 7900 	strd	r7, r9, [sp]
 801ec92:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801ec96:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801ec9a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801ec9c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ec9e:	47a0      	blx	r4
 801eca0:	b019      	add	sp, #100	; 0x64
 801eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca6:	2300      	movs	r3, #0
 801eca8:	e7c2      	b.n	801ec30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801ecaa:	2208      	movs	r2, #8
 801ecac:	fb92 f3f8 	sdiv	r3, r2, r8
 801ecb0:	1e5a      	subs	r2, r3, #1
 801ecb2:	443a      	add	r2, r7
 801ecb4:	fb92 f2f3 	sdiv	r2, r2, r3
 801ecb8:	fb12 f203 	smulbb	r2, r2, r3
 801ecbc:	b292      	uxth	r2, r2
 801ecbe:	e6b1      	b.n	801ea24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801ecc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ecc2:	e6ed      	b.n	801eaa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801ecc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ecc6:	e783      	b.n	801ebd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801ecc8:	2004f6ec 	.word	0x2004f6ec
 801eccc:	2004f6f4 	.word	0x2004f6f4
 801ecd0:	2004f6ee 	.word	0x2004f6ee
 801ecd4:	00fff800 	.word	0x00fff800
 801ecd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecda:	b153      	cbz	r3, 801ecf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801ecdc:	441e      	add	r6, r3
 801ecde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ece0:	b2b6      	uxth	r6, r6
 801ece2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801ece6:	781a      	ldrb	r2, [r3, #0]
 801ece8:	f006 0607 	and.w	r6, r6, #7
 801ecec:	4132      	asrs	r2, r6
 801ecee:	9328      	str	r3, [sp, #160]	; 0xa0
 801ecf0:	b2d2      	uxtb	r2, r2
 801ecf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecf4:	445b      	add	r3, fp
 801ecf6:	930a      	str	r3, [sp, #40]	; 0x28
 801ecf8:	e708      	b.n	801eb0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801ecfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d1cf      	bne.n	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ed00:	4b05      	ldr	r3, [pc, #20]	; (801ed18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801ed02:	6818      	ldr	r0, [r3, #0]
 801ed04:	6803      	ldr	r3, [r0, #0]
 801ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed08:	4798      	blx	r3
 801ed0a:	e7c9      	b.n	801eca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	f43f ae84 	beq.w	801ea1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801ed12:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ed16:	e796      	b.n	801ec46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801ed18:	2004f6f4 	.word	0x2004f6f4

0801ed1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801ed1c:	b538      	push	{r3, r4, r5, lr}
 801ed1e:	4605      	mov	r5, r0
 801ed20:	4c13      	ldr	r4, [pc, #76]	; (801ed70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801ed22:	e8d4 3f8f 	ldab	r3, [r4]
 801ed26:	07da      	lsls	r2, r3, #31
 801ed28:	d40b      	bmi.n	801ed42 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801ed2a:	4620      	mov	r0, r4
 801ed2c:	f007 fd54 	bl	80267d8 <__cxa_guard_acquire>
 801ed30:	b138      	cbz	r0, 801ed42 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801ed32:	4620      	mov	r0, r4
 801ed34:	f007 fd5c 	bl	80267f0 <__cxa_guard_release>
 801ed38:	4a0e      	ldr	r2, [pc, #56]	; (801ed74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801ed3a:	490f      	ldr	r1, [pc, #60]	; (801ed78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801ed3c:	480f      	ldr	r0, [pc, #60]	; (801ed7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801ed3e:	f007 fd44 	bl	80267ca <__aeabi_atexit>
 801ed42:	4c0f      	ldr	r4, [pc, #60]	; (801ed80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801ed44:	e8d4 3f8f 	ldab	r3, [r4]
 801ed48:	07db      	lsls	r3, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f007 fd43 	bl	80267d8 <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f007 fd4b 	bl	80267f0 <__cxa_guard_release>
 801ed5a:	4a06      	ldr	r2, [pc, #24]	; (801ed74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801ed5c:	4909      	ldr	r1, [pc, #36]	; (801ed84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801ed5e:	480a      	ldr	r0, [pc, #40]	; (801ed88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ed60:	f007 fd33 	bl	80267ca <__aeabi_atexit>
 801ed64:	4b05      	ldr	r3, [pc, #20]	; (801ed7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801ed66:	612b      	str	r3, [r5, #16]
 801ed68:	4b07      	ldr	r3, [pc, #28]	; (801ed88 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801ed6a:	616b      	str	r3, [r5, #20]
 801ed6c:	bd38      	pop	{r3, r4, r5, pc}
 801ed6e:	bf00      	nop
 801ed70:	2004f7c8 	.word	0x2004f7c8
 801ed74:	20000000 	.word	0x20000000
 801ed78:	0801cf43 	.word	0x0801cf43
 801ed7c:	20025864 	.word	0x20025864
 801ed80:	2004f7cc 	.word	0x2004f7cc
 801ed84:	0801cf41 	.word	0x0801cf41
 801ed88:	20025868 	.word	0x20025868

0801ed8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801ed8c:	b538      	push	{r3, r4, r5, lr}
 801ed8e:	4605      	mov	r5, r0
 801ed90:	4c13      	ldr	r4, [pc, #76]	; (801ede0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801ed92:	e8d4 3f8f 	ldab	r3, [r4]
 801ed96:	07da      	lsls	r2, r3, #31
 801ed98:	d40b      	bmi.n	801edb2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801ed9a:	4620      	mov	r0, r4
 801ed9c:	f007 fd1c 	bl	80267d8 <__cxa_guard_acquire>
 801eda0:	b138      	cbz	r0, 801edb2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801eda2:	4620      	mov	r0, r4
 801eda4:	f007 fd24 	bl	80267f0 <__cxa_guard_release>
 801eda8:	4a0e      	ldr	r2, [pc, #56]	; (801ede4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801edaa:	490f      	ldr	r1, [pc, #60]	; (801ede8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801edac:	480f      	ldr	r0, [pc, #60]	; (801edec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801edae:	f007 fd0c 	bl	80267ca <__aeabi_atexit>
 801edb2:	4c0f      	ldr	r4, [pc, #60]	; (801edf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801edb4:	e8d4 3f8f 	ldab	r3, [r4]
 801edb8:	07db      	lsls	r3, r3, #31
 801edba:	d40b      	bmi.n	801edd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801edbc:	4620      	mov	r0, r4
 801edbe:	f007 fd0b 	bl	80267d8 <__cxa_guard_acquire>
 801edc2:	b138      	cbz	r0, 801edd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801edc4:	4620      	mov	r0, r4
 801edc6:	f007 fd13 	bl	80267f0 <__cxa_guard_release>
 801edca:	4a06      	ldr	r2, [pc, #24]	; (801ede4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801edcc:	4909      	ldr	r1, [pc, #36]	; (801edf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801edce:	480a      	ldr	r0, [pc, #40]	; (801edf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801edd0:	f007 fcfb 	bl	80267ca <__aeabi_atexit>
 801edd4:	4b05      	ldr	r3, [pc, #20]	; (801edec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801edd6:	60ab      	str	r3, [r5, #8]
 801edd8:	4b07      	ldr	r3, [pc, #28]	; (801edf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801edda:	60eb      	str	r3, [r5, #12]
 801eddc:	bd38      	pop	{r3, r4, r5, pc}
 801edde:	bf00      	nop
 801ede0:	2004f7a0 	.word	0x2004f7a0
 801ede4:	20000000 	.word	0x20000000
 801ede8:	0801cf47 	.word	0x0801cf47
 801edec:	2002583c 	.word	0x2002583c
 801edf0:	2004f7a4 	.word	0x2004f7a4
 801edf4:	0801cf45 	.word	0x0801cf45
 801edf8:	20025840 	.word	0x20025840

0801edfc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801edfc:	b510      	push	{r4, lr}
 801edfe:	4604      	mov	r4, r0
 801ee00:	f7ff ff8c 	bl	801ed1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801ee04:	4620      	mov	r0, r4
 801ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee0a:	f7ff bfbf 	b.w	801ed8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801ee10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ee10:	b538      	push	{r3, r4, r5, lr}
 801ee12:	4605      	mov	r5, r0
 801ee14:	4c13      	ldr	r4, [pc, #76]	; (801ee64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801ee16:	e8d4 3f8f 	ldab	r3, [r4]
 801ee1a:	07da      	lsls	r2, r3, #31
 801ee1c:	d40b      	bmi.n	801ee36 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f007 fcda 	bl	80267d8 <__cxa_guard_acquire>
 801ee24:	b138      	cbz	r0, 801ee36 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801ee26:	4620      	mov	r0, r4
 801ee28:	f007 fce2 	bl	80267f0 <__cxa_guard_release>
 801ee2c:	4a0e      	ldr	r2, [pc, #56]	; (801ee68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ee2e:	490f      	ldr	r1, [pc, #60]	; (801ee6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ee30:	480f      	ldr	r0, [pc, #60]	; (801ee70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ee32:	f007 fcca 	bl	80267ca <__aeabi_atexit>
 801ee36:	4c0f      	ldr	r4, [pc, #60]	; (801ee74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ee38:	e8d4 3f8f 	ldab	r3, [r4]
 801ee3c:	07db      	lsls	r3, r3, #31
 801ee3e:	d40b      	bmi.n	801ee58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801ee40:	4620      	mov	r0, r4
 801ee42:	f007 fcc9 	bl	80267d8 <__cxa_guard_acquire>
 801ee46:	b138      	cbz	r0, 801ee58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f007 fcd1 	bl	80267f0 <__cxa_guard_release>
 801ee4e:	4a06      	ldr	r2, [pc, #24]	; (801ee68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ee50:	4909      	ldr	r1, [pc, #36]	; (801ee78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ee52:	480a      	ldr	r0, [pc, #40]	; (801ee7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ee54:	f007 fcb9 	bl	80267ca <__aeabi_atexit>
 801ee58:	4b05      	ldr	r3, [pc, #20]	; (801ee70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ee5a:	622b      	str	r3, [r5, #32]
 801ee5c:	4b07      	ldr	r3, [pc, #28]	; (801ee7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ee5e:	626b      	str	r3, [r5, #36]	; 0x24
 801ee60:	bd38      	pop	{r3, r4, r5, pc}
 801ee62:	bf00      	nop
 801ee64:	2004f7d0 	.word	0x2004f7d0
 801ee68:	20000000 	.word	0x20000000
 801ee6c:	0801cf3b 	.word	0x0801cf3b
 801ee70:	2002586c 	.word	0x2002586c
 801ee74:	2004f7d4 	.word	0x2004f7d4
 801ee78:	0801cf39 	.word	0x0801cf39
 801ee7c:	20025870 	.word	0x20025870

0801ee80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ee80:	b538      	push	{r3, r4, r5, lr}
 801ee82:	4605      	mov	r5, r0
 801ee84:	4c13      	ldr	r4, [pc, #76]	; (801eed4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801ee86:	e8d4 3f8f 	ldab	r3, [r4]
 801ee8a:	07da      	lsls	r2, r3, #31
 801ee8c:	d40b      	bmi.n	801eea6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801ee8e:	4620      	mov	r0, r4
 801ee90:	f007 fca2 	bl	80267d8 <__cxa_guard_acquire>
 801ee94:	b138      	cbz	r0, 801eea6 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801ee96:	4620      	mov	r0, r4
 801ee98:	f007 fcaa 	bl	80267f0 <__cxa_guard_release>
 801ee9c:	4a0e      	ldr	r2, [pc, #56]	; (801eed8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ee9e:	490f      	ldr	r1, [pc, #60]	; (801eedc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801eea0:	480f      	ldr	r0, [pc, #60]	; (801eee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801eea2:	f007 fc92 	bl	80267ca <__aeabi_atexit>
 801eea6:	4c0f      	ldr	r4, [pc, #60]	; (801eee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801eea8:	e8d4 3f8f 	ldab	r3, [r4]
 801eeac:	07db      	lsls	r3, r3, #31
 801eeae:	d40b      	bmi.n	801eec8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801eeb0:	4620      	mov	r0, r4
 801eeb2:	f007 fc91 	bl	80267d8 <__cxa_guard_acquire>
 801eeb6:	b138      	cbz	r0, 801eec8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801eeb8:	4620      	mov	r0, r4
 801eeba:	f007 fc99 	bl	80267f0 <__cxa_guard_release>
 801eebe:	4a06      	ldr	r2, [pc, #24]	; (801eed8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801eec0:	4909      	ldr	r1, [pc, #36]	; (801eee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801eec2:	480a      	ldr	r0, [pc, #40]	; (801eeec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eec4:	f007 fc81 	bl	80267ca <__aeabi_atexit>
 801eec8:	4b05      	ldr	r3, [pc, #20]	; (801eee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801eeca:	61ab      	str	r3, [r5, #24]
 801eecc:	4b07      	ldr	r3, [pc, #28]	; (801eeec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801eece:	61eb      	str	r3, [r5, #28]
 801eed0:	bd38      	pop	{r3, r4, r5, pc}
 801eed2:	bf00      	nop
 801eed4:	2004f7a8 	.word	0x2004f7a8
 801eed8:	20000000 	.word	0x20000000
 801eedc:	0801cf3f 	.word	0x0801cf3f
 801eee0:	20025844 	.word	0x20025844
 801eee4:	2004f7ac 	.word	0x2004f7ac
 801eee8:	0801cf3d 	.word	0x0801cf3d
 801eeec:	20025848 	.word	0x20025848

0801eef0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801eef0:	b510      	push	{r4, lr}
 801eef2:	4604      	mov	r4, r0
 801eef4:	f7ff ff8c 	bl	801ee10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801eef8:	4620      	mov	r0, r4
 801eefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eefe:	f7ff bfbf 	b.w	801ee80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ef04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ef04:	b538      	push	{r3, r4, r5, lr}
 801ef06:	4605      	mov	r5, r0
 801ef08:	4c13      	ldr	r4, [pc, #76]	; (801ef58 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801ef0a:	e8d4 3f8f 	ldab	r3, [r4]
 801ef0e:	07da      	lsls	r2, r3, #31
 801ef10:	d40b      	bmi.n	801ef2a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801ef12:	4620      	mov	r0, r4
 801ef14:	f007 fc60 	bl	80267d8 <__cxa_guard_acquire>
 801ef18:	b138      	cbz	r0, 801ef2a <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801ef1a:	4620      	mov	r0, r4
 801ef1c:	f007 fc68 	bl	80267f0 <__cxa_guard_release>
 801ef20:	4a0e      	ldr	r2, [pc, #56]	; (801ef5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ef22:	490f      	ldr	r1, [pc, #60]	; (801ef60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ef24:	480f      	ldr	r0, [pc, #60]	; (801ef64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ef26:	f007 fc50 	bl	80267ca <__aeabi_atexit>
 801ef2a:	4c0f      	ldr	r4, [pc, #60]	; (801ef68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ef2c:	e8d4 3f8f 	ldab	r3, [r4]
 801ef30:	07db      	lsls	r3, r3, #31
 801ef32:	d40b      	bmi.n	801ef4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801ef34:	4620      	mov	r0, r4
 801ef36:	f007 fc4f 	bl	80267d8 <__cxa_guard_acquire>
 801ef3a:	b138      	cbz	r0, 801ef4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801ef3c:	4620      	mov	r0, r4
 801ef3e:	f007 fc57 	bl	80267f0 <__cxa_guard_release>
 801ef42:	4a06      	ldr	r2, [pc, #24]	; (801ef5c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ef44:	4909      	ldr	r1, [pc, #36]	; (801ef6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ef46:	480a      	ldr	r0, [pc, #40]	; (801ef70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ef48:	f007 fc3f 	bl	80267ca <__aeabi_atexit>
 801ef4c:	4b05      	ldr	r3, [pc, #20]	; (801ef64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ef4e:	632b      	str	r3, [r5, #48]	; 0x30
 801ef50:	4b07      	ldr	r3, [pc, #28]	; (801ef70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ef52:	636b      	str	r3, [r5, #52]	; 0x34
 801ef54:	bd38      	pop	{r3, r4, r5, pc}
 801ef56:	bf00      	nop
 801ef58:	2004f7e0 	.word	0x2004f7e0
 801ef5c:	20000000 	.word	0x20000000
 801ef60:	0801cf33 	.word	0x0801cf33
 801ef64:	2002587c 	.word	0x2002587c
 801ef68:	2004f7e4 	.word	0x2004f7e4
 801ef6c:	0801cf31 	.word	0x0801cf31
 801ef70:	20025880 	.word	0x20025880

0801ef74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ef74:	b538      	push	{r3, r4, r5, lr}
 801ef76:	4605      	mov	r5, r0
 801ef78:	4c13      	ldr	r4, [pc, #76]	; (801efc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801ef7a:	e8d4 3f8f 	ldab	r3, [r4]
 801ef7e:	07da      	lsls	r2, r3, #31
 801ef80:	d40b      	bmi.n	801ef9a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801ef82:	4620      	mov	r0, r4
 801ef84:	f007 fc28 	bl	80267d8 <__cxa_guard_acquire>
 801ef88:	b138      	cbz	r0, 801ef9a <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	f007 fc30 	bl	80267f0 <__cxa_guard_release>
 801ef90:	4a0e      	ldr	r2, [pc, #56]	; (801efcc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ef92:	490f      	ldr	r1, [pc, #60]	; (801efd0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ef94:	480f      	ldr	r0, [pc, #60]	; (801efd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ef96:	f007 fc18 	bl	80267ca <__aeabi_atexit>
 801ef9a:	4c0f      	ldr	r4, [pc, #60]	; (801efd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ef9c:	e8d4 3f8f 	ldab	r3, [r4]
 801efa0:	07db      	lsls	r3, r3, #31
 801efa2:	d40b      	bmi.n	801efbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801efa4:	4620      	mov	r0, r4
 801efa6:	f007 fc17 	bl	80267d8 <__cxa_guard_acquire>
 801efaa:	b138      	cbz	r0, 801efbc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801efac:	4620      	mov	r0, r4
 801efae:	f007 fc1f 	bl	80267f0 <__cxa_guard_release>
 801efb2:	4a06      	ldr	r2, [pc, #24]	; (801efcc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801efb4:	4909      	ldr	r1, [pc, #36]	; (801efdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801efb6:	480a      	ldr	r0, [pc, #40]	; (801efe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801efb8:	f007 fc07 	bl	80267ca <__aeabi_atexit>
 801efbc:	4b05      	ldr	r3, [pc, #20]	; (801efd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801efbe:	62ab      	str	r3, [r5, #40]	; 0x28
 801efc0:	4b07      	ldr	r3, [pc, #28]	; (801efe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801efc2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801efc4:	bd38      	pop	{r3, r4, r5, pc}
 801efc6:	bf00      	nop
 801efc8:	2004f7b0 	.word	0x2004f7b0
 801efcc:	20000000 	.word	0x20000000
 801efd0:	0801cf37 	.word	0x0801cf37
 801efd4:	2002584c 	.word	0x2002584c
 801efd8:	2004f7b4 	.word	0x2004f7b4
 801efdc:	0801cf35 	.word	0x0801cf35
 801efe0:	20025850 	.word	0x20025850

0801efe4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801efe4:	b510      	push	{r4, lr}
 801efe6:	4604      	mov	r4, r0
 801efe8:	f7ff ff8c 	bl	801ef04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801efec:	4620      	mov	r0, r4
 801efee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eff2:	f7ff bfbf 	b.w	801ef74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801eff8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801eff8:	b538      	push	{r3, r4, r5, lr}
 801effa:	4605      	mov	r5, r0
 801effc:	4c13      	ldr	r4, [pc, #76]	; (801f04c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801effe:	e8d4 3f8f 	ldab	r3, [r4]
 801f002:	07da      	lsls	r2, r3, #31
 801f004:	d40b      	bmi.n	801f01e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801f006:	4620      	mov	r0, r4
 801f008:	f007 fbe6 	bl	80267d8 <__cxa_guard_acquire>
 801f00c:	b138      	cbz	r0, 801f01e <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801f00e:	4620      	mov	r0, r4
 801f010:	f007 fbee 	bl	80267f0 <__cxa_guard_release>
 801f014:	4a0e      	ldr	r2, [pc, #56]	; (801f050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f016:	490f      	ldr	r1, [pc, #60]	; (801f054 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f018:	480f      	ldr	r0, [pc, #60]	; (801f058 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f01a:	f007 fbd6 	bl	80267ca <__aeabi_atexit>
 801f01e:	4c0f      	ldr	r4, [pc, #60]	; (801f05c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f020:	e8d4 3f8f 	ldab	r3, [r4]
 801f024:	07db      	lsls	r3, r3, #31
 801f026:	d40b      	bmi.n	801f040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801f028:	4620      	mov	r0, r4
 801f02a:	f007 fbd5 	bl	80267d8 <__cxa_guard_acquire>
 801f02e:	b138      	cbz	r0, 801f040 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801f030:	4620      	mov	r0, r4
 801f032:	f007 fbdd 	bl	80267f0 <__cxa_guard_release>
 801f036:	4a06      	ldr	r2, [pc, #24]	; (801f050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f038:	4909      	ldr	r1, [pc, #36]	; (801f060 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801f03a:	480a      	ldr	r0, [pc, #40]	; (801f064 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f03c:	f007 fbc5 	bl	80267ca <__aeabi_atexit>
 801f040:	4b05      	ldr	r3, [pc, #20]	; (801f058 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f042:	652b      	str	r3, [r5, #80]	; 0x50
 801f044:	4b07      	ldr	r3, [pc, #28]	; (801f064 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f046:	656b      	str	r3, [r5, #84]	; 0x54
 801f048:	bd38      	pop	{r3, r4, r5, pc}
 801f04a:	bf00      	nop
 801f04c:	2004f7e8 	.word	0x2004f7e8
 801f050:	20000000 	.word	0x20000000
 801f054:	0801cf23 	.word	0x0801cf23
 801f058:	20025884 	.word	0x20025884
 801f05c:	2004f7ec 	.word	0x2004f7ec
 801f060:	0801cf21 	.word	0x0801cf21
 801f064:	20025888 	.word	0x20025888

0801f068 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801f068:	b538      	push	{r3, r4, r5, lr}
 801f06a:	4605      	mov	r5, r0
 801f06c:	4c13      	ldr	r4, [pc, #76]	; (801f0bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801f06e:	e8d4 3f8f 	ldab	r3, [r4]
 801f072:	07da      	lsls	r2, r3, #31
 801f074:	d40b      	bmi.n	801f08e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801f076:	4620      	mov	r0, r4
 801f078:	f007 fbae 	bl	80267d8 <__cxa_guard_acquire>
 801f07c:	b138      	cbz	r0, 801f08e <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801f07e:	4620      	mov	r0, r4
 801f080:	f007 fbb6 	bl	80267f0 <__cxa_guard_release>
 801f084:	4a0e      	ldr	r2, [pc, #56]	; (801f0c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f086:	490f      	ldr	r1, [pc, #60]	; (801f0c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f088:	480f      	ldr	r0, [pc, #60]	; (801f0c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f08a:	f007 fb9e 	bl	80267ca <__aeabi_atexit>
 801f08e:	4c0f      	ldr	r4, [pc, #60]	; (801f0cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f090:	e8d4 3f8f 	ldab	r3, [r4]
 801f094:	07db      	lsls	r3, r3, #31
 801f096:	d40b      	bmi.n	801f0b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801f098:	4620      	mov	r0, r4
 801f09a:	f007 fb9d 	bl	80267d8 <__cxa_guard_acquire>
 801f09e:	b138      	cbz	r0, 801f0b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801f0a0:	4620      	mov	r0, r4
 801f0a2:	f007 fba5 	bl	80267f0 <__cxa_guard_release>
 801f0a6:	4a06      	ldr	r2, [pc, #24]	; (801f0c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f0a8:	4909      	ldr	r1, [pc, #36]	; (801f0d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801f0aa:	480a      	ldr	r0, [pc, #40]	; (801f0d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f0ac:	f007 fb8d 	bl	80267ca <__aeabi_atexit>
 801f0b0:	4b05      	ldr	r3, [pc, #20]	; (801f0c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f0b2:	64ab      	str	r3, [r5, #72]	; 0x48
 801f0b4:	4b07      	ldr	r3, [pc, #28]	; (801f0d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f0b6:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f0b8:	bd38      	pop	{r3, r4, r5, pc}
 801f0ba:	bf00      	nop
 801f0bc:	2004f7f0 	.word	0x2004f7f0
 801f0c0:	20000000 	.word	0x20000000
 801f0c4:	0801cf27 	.word	0x0801cf27
 801f0c8:	2002588c 	.word	0x2002588c
 801f0cc:	2004f7f4 	.word	0x2004f7f4
 801f0d0:	0801cf25 	.word	0x0801cf25
 801f0d4:	20025890 	.word	0x20025890

0801f0d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801f0d8:	b538      	push	{r3, r4, r5, lr}
 801f0da:	4605      	mov	r5, r0
 801f0dc:	4c13      	ldr	r4, [pc, #76]	; (801f12c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801f0de:	e8d4 3f8f 	ldab	r3, [r4]
 801f0e2:	07da      	lsls	r2, r3, #31
 801f0e4:	d40b      	bmi.n	801f0fe <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801f0e6:	4620      	mov	r0, r4
 801f0e8:	f007 fb76 	bl	80267d8 <__cxa_guard_acquire>
 801f0ec:	b138      	cbz	r0, 801f0fe <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f007 fb7e 	bl	80267f0 <__cxa_guard_release>
 801f0f4:	4a0e      	ldr	r2, [pc, #56]	; (801f130 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f0f6:	490f      	ldr	r1, [pc, #60]	; (801f134 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f0f8:	480f      	ldr	r0, [pc, #60]	; (801f138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f0fa:	f007 fb66 	bl	80267ca <__aeabi_atexit>
 801f0fe:	4c0f      	ldr	r4, [pc, #60]	; (801f13c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f100:	e8d4 3f8f 	ldab	r3, [r4]
 801f104:	07db      	lsls	r3, r3, #31
 801f106:	d40b      	bmi.n	801f120 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801f108:	4620      	mov	r0, r4
 801f10a:	f007 fb65 	bl	80267d8 <__cxa_guard_acquire>
 801f10e:	b138      	cbz	r0, 801f120 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801f110:	4620      	mov	r0, r4
 801f112:	f007 fb6d 	bl	80267f0 <__cxa_guard_release>
 801f116:	4a06      	ldr	r2, [pc, #24]	; (801f130 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f118:	4909      	ldr	r1, [pc, #36]	; (801f140 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801f11a:	480a      	ldr	r0, [pc, #40]	; (801f144 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f11c:	f007 fb55 	bl	80267ca <__aeabi_atexit>
 801f120:	4b05      	ldr	r3, [pc, #20]	; (801f138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f122:	642b      	str	r3, [r5, #64]	; 0x40
 801f124:	4b07      	ldr	r3, [pc, #28]	; (801f144 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f126:	646b      	str	r3, [r5, #68]	; 0x44
 801f128:	bd38      	pop	{r3, r4, r5, pc}
 801f12a:	bf00      	nop
 801f12c:	2004f7b8 	.word	0x2004f7b8
 801f130:	20000000 	.word	0x20000000
 801f134:	0801cf2b 	.word	0x0801cf2b
 801f138:	20025854 	.word	0x20025854
 801f13c:	2004f7bc 	.word	0x2004f7bc
 801f140:	0801cf29 	.word	0x0801cf29
 801f144:	20025858 	.word	0x20025858

0801f148 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801f148:	b538      	push	{r3, r4, r5, lr}
 801f14a:	4605      	mov	r5, r0
 801f14c:	4c13      	ldr	r4, [pc, #76]	; (801f19c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801f14e:	e8d4 3f8f 	ldab	r3, [r4]
 801f152:	07da      	lsls	r2, r3, #31
 801f154:	d40b      	bmi.n	801f16e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801f156:	4620      	mov	r0, r4
 801f158:	f007 fb3e 	bl	80267d8 <__cxa_guard_acquire>
 801f15c:	b138      	cbz	r0, 801f16e <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801f15e:	4620      	mov	r0, r4
 801f160:	f007 fb46 	bl	80267f0 <__cxa_guard_release>
 801f164:	4a0e      	ldr	r2, [pc, #56]	; (801f1a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f166:	490f      	ldr	r1, [pc, #60]	; (801f1a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f168:	480f      	ldr	r0, [pc, #60]	; (801f1a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f16a:	f007 fb2e 	bl	80267ca <__aeabi_atexit>
 801f16e:	4c0f      	ldr	r4, [pc, #60]	; (801f1ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f170:	e8d4 3f8f 	ldab	r3, [r4]
 801f174:	07db      	lsls	r3, r3, #31
 801f176:	d40b      	bmi.n	801f190 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801f178:	4620      	mov	r0, r4
 801f17a:	f007 fb2d 	bl	80267d8 <__cxa_guard_acquire>
 801f17e:	b138      	cbz	r0, 801f190 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801f180:	4620      	mov	r0, r4
 801f182:	f007 fb35 	bl	80267f0 <__cxa_guard_release>
 801f186:	4a06      	ldr	r2, [pc, #24]	; (801f1a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f188:	4909      	ldr	r1, [pc, #36]	; (801f1b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801f18a:	480a      	ldr	r0, [pc, #40]	; (801f1b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f18c:	f007 fb1d 	bl	80267ca <__aeabi_atexit>
 801f190:	4b05      	ldr	r3, [pc, #20]	; (801f1a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f192:	63ab      	str	r3, [r5, #56]	; 0x38
 801f194:	4b07      	ldr	r3, [pc, #28]	; (801f1b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f196:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f198:	bd38      	pop	{r3, r4, r5, pc}
 801f19a:	bf00      	nop
 801f19c:	2004f7d8 	.word	0x2004f7d8
 801f1a0:	20000000 	.word	0x20000000
 801f1a4:	0801cf2f 	.word	0x0801cf2f
 801f1a8:	20025874 	.word	0x20025874
 801f1ac:	2004f7dc 	.word	0x2004f7dc
 801f1b0:	0801cf2d 	.word	0x0801cf2d
 801f1b4:	20025878 	.word	0x20025878

0801f1b8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801f1b8:	b510      	push	{r4, lr}
 801f1ba:	4604      	mov	r4, r0
 801f1bc:	f7ff ff1c 	bl	801eff8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	f7ff ff89 	bl	801f0d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801f1c6:	4620      	mov	r0, r4
 801f1c8:	f7ff ff4e 	bl	801f068 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801f1cc:	4620      	mov	r0, r4
 801f1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1d2:	f7ff bfb9 	b.w	801f148 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801f1d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f1d8:	b538      	push	{r3, r4, r5, lr}
 801f1da:	4605      	mov	r5, r0
 801f1dc:	4c13      	ldr	r4, [pc, #76]	; (801f22c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801f1de:	e8d4 3f8f 	ldab	r3, [r4]
 801f1e2:	07da      	lsls	r2, r3, #31
 801f1e4:	d40b      	bmi.n	801f1fe <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f007 faf6 	bl	80267d8 <__cxa_guard_acquire>
 801f1ec:	b138      	cbz	r0, 801f1fe <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801f1ee:	4620      	mov	r0, r4
 801f1f0:	f007 fafe 	bl	80267f0 <__cxa_guard_release>
 801f1f4:	4a0e      	ldr	r2, [pc, #56]	; (801f230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f1f6:	490f      	ldr	r1, [pc, #60]	; (801f234 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f1f8:	480f      	ldr	r0, [pc, #60]	; (801f238 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f1fa:	f007 fae6 	bl	80267ca <__aeabi_atexit>
 801f1fe:	4c0f      	ldr	r4, [pc, #60]	; (801f23c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f200:	e8d4 3f8f 	ldab	r3, [r4]
 801f204:	07db      	lsls	r3, r3, #31
 801f206:	d40b      	bmi.n	801f220 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801f208:	4620      	mov	r0, r4
 801f20a:	f007 fae5 	bl	80267d8 <__cxa_guard_acquire>
 801f20e:	b138      	cbz	r0, 801f220 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801f210:	4620      	mov	r0, r4
 801f212:	f007 faed 	bl	80267f0 <__cxa_guard_release>
 801f216:	4a06      	ldr	r2, [pc, #24]	; (801f230 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f218:	4909      	ldr	r1, [pc, #36]	; (801f240 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f21a:	480a      	ldr	r0, [pc, #40]	; (801f244 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f21c:	f007 fad5 	bl	80267ca <__aeabi_atexit>
 801f220:	4b05      	ldr	r3, [pc, #20]	; (801f238 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f222:	662b      	str	r3, [r5, #96]	; 0x60
 801f224:	4b07      	ldr	r3, [pc, #28]	; (801f244 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f226:	666b      	str	r3, [r5, #100]	; 0x64
 801f228:	bd38      	pop	{r3, r4, r5, pc}
 801f22a:	bf00      	nop
 801f22c:	2004f7c0 	.word	0x2004f7c0
 801f230:	20000000 	.word	0x20000000
 801f234:	0801cf1b 	.word	0x0801cf1b
 801f238:	2002585c 	.word	0x2002585c
 801f23c:	2004f7c4 	.word	0x2004f7c4
 801f240:	0801cf19 	.word	0x0801cf19
 801f244:	20025860 	.word	0x20025860

0801f248 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f248:	b538      	push	{r3, r4, r5, lr}
 801f24a:	4605      	mov	r5, r0
 801f24c:	4c13      	ldr	r4, [pc, #76]	; (801f29c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801f24e:	e8d4 3f8f 	ldab	r3, [r4]
 801f252:	07da      	lsls	r2, r3, #31
 801f254:	d40b      	bmi.n	801f26e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801f256:	4620      	mov	r0, r4
 801f258:	f007 fabe 	bl	80267d8 <__cxa_guard_acquire>
 801f25c:	b138      	cbz	r0, 801f26e <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801f25e:	4620      	mov	r0, r4
 801f260:	f007 fac6 	bl	80267f0 <__cxa_guard_release>
 801f264:	4a0e      	ldr	r2, [pc, #56]	; (801f2a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f266:	490f      	ldr	r1, [pc, #60]	; (801f2a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f268:	480f      	ldr	r0, [pc, #60]	; (801f2a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f26a:	f007 faae 	bl	80267ca <__aeabi_atexit>
 801f26e:	4c0f      	ldr	r4, [pc, #60]	; (801f2ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f270:	e8d4 3f8f 	ldab	r3, [r4]
 801f274:	07db      	lsls	r3, r3, #31
 801f276:	d40b      	bmi.n	801f290 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801f278:	4620      	mov	r0, r4
 801f27a:	f007 faad 	bl	80267d8 <__cxa_guard_acquire>
 801f27e:	b138      	cbz	r0, 801f290 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801f280:	4620      	mov	r0, r4
 801f282:	f007 fab5 	bl	80267f0 <__cxa_guard_release>
 801f286:	4a06      	ldr	r2, [pc, #24]	; (801f2a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f288:	4909      	ldr	r1, [pc, #36]	; (801f2b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f28a:	480a      	ldr	r0, [pc, #40]	; (801f2b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f28c:	f007 fa9d 	bl	80267ca <__aeabi_atexit>
 801f290:	4b05      	ldr	r3, [pc, #20]	; (801f2a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f292:	65ab      	str	r3, [r5, #88]	; 0x58
 801f294:	4b07      	ldr	r3, [pc, #28]	; (801f2b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f296:	65eb      	str	r3, [r5, #92]	; 0x5c
 801f298:	bd38      	pop	{r3, r4, r5, pc}
 801f29a:	bf00      	nop
 801f29c:	2004f798 	.word	0x2004f798
 801f2a0:	20000000 	.word	0x20000000
 801f2a4:	0801cf1f 	.word	0x0801cf1f
 801f2a8:	20025834 	.word	0x20025834
 801f2ac:	2004f79c 	.word	0x2004f79c
 801f2b0:	0801cf1d 	.word	0x0801cf1d
 801f2b4:	20025838 	.word	0x20025838

0801f2b8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801f2b8:	b510      	push	{r4, lr}
 801f2ba:	4604      	mov	r4, r0
 801f2bc:	f7ff ff8c 	bl	801f1d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f2c0:	4620      	mov	r0, r4
 801f2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2c6:	f7ff bfbf 	b.w	801f248 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f2cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f2cc:	b538      	push	{r3, r4, r5, lr}
 801f2ce:	4605      	mov	r5, r0
 801f2d0:	4c13      	ldr	r4, [pc, #76]	; (801f320 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801f2d2:	e8d4 3f8f 	ldab	r3, [r4]
 801f2d6:	07da      	lsls	r2, r3, #31
 801f2d8:	d40b      	bmi.n	801f2f2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801f2da:	4620      	mov	r0, r4
 801f2dc:	f007 fa7c 	bl	80267d8 <__cxa_guard_acquire>
 801f2e0:	b138      	cbz	r0, 801f2f2 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801f2e2:	4620      	mov	r0, r4
 801f2e4:	f007 fa84 	bl	80267f0 <__cxa_guard_release>
 801f2e8:	4a0e      	ldr	r2, [pc, #56]	; (801f324 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f2ea:	490f      	ldr	r1, [pc, #60]	; (801f328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f2ec:	480f      	ldr	r0, [pc, #60]	; (801f32c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f2ee:	f007 fa6c 	bl	80267ca <__aeabi_atexit>
 801f2f2:	4c0f      	ldr	r4, [pc, #60]	; (801f330 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f2f4:	e8d4 3f8f 	ldab	r3, [r4]
 801f2f8:	07db      	lsls	r3, r3, #31
 801f2fa:	d40b      	bmi.n	801f314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801f2fc:	4620      	mov	r0, r4
 801f2fe:	f007 fa6b 	bl	80267d8 <__cxa_guard_acquire>
 801f302:	b138      	cbz	r0, 801f314 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801f304:	4620      	mov	r0, r4
 801f306:	f007 fa73 	bl	80267f0 <__cxa_guard_release>
 801f30a:	4a06      	ldr	r2, [pc, #24]	; (801f324 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f30c:	4909      	ldr	r1, [pc, #36]	; (801f334 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f30e:	480a      	ldr	r0, [pc, #40]	; (801f338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f310:	f007 fa5b 	bl	80267ca <__aeabi_atexit>
 801f314:	4b05      	ldr	r3, [pc, #20]	; (801f32c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f316:	672b      	str	r3, [r5, #112]	; 0x70
 801f318:	4b07      	ldr	r3, [pc, #28]	; (801f338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f31a:	676b      	str	r3, [r5, #116]	; 0x74
 801f31c:	bd38      	pop	{r3, r4, r5, pc}
 801f31e:	bf00      	nop
 801f320:	2004f790 	.word	0x2004f790
 801f324:	20000000 	.word	0x20000000
 801f328:	0801cf13 	.word	0x0801cf13
 801f32c:	2002582c 	.word	0x2002582c
 801f330:	2004f794 	.word	0x2004f794
 801f334:	0801cf11 	.word	0x0801cf11
 801f338:	20025830 	.word	0x20025830

0801f33c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f33c:	b538      	push	{r3, r4, r5, lr}
 801f33e:	4605      	mov	r5, r0
 801f340:	4c13      	ldr	r4, [pc, #76]	; (801f390 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801f342:	e8d4 3f8f 	ldab	r3, [r4]
 801f346:	07da      	lsls	r2, r3, #31
 801f348:	d40b      	bmi.n	801f362 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801f34a:	4620      	mov	r0, r4
 801f34c:	f007 fa44 	bl	80267d8 <__cxa_guard_acquire>
 801f350:	b138      	cbz	r0, 801f362 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801f352:	4620      	mov	r0, r4
 801f354:	f007 fa4c 	bl	80267f0 <__cxa_guard_release>
 801f358:	4a0e      	ldr	r2, [pc, #56]	; (801f394 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f35a:	490f      	ldr	r1, [pc, #60]	; (801f398 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f35c:	480f      	ldr	r0, [pc, #60]	; (801f39c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f35e:	f007 fa34 	bl	80267ca <__aeabi_atexit>
 801f362:	4c0f      	ldr	r4, [pc, #60]	; (801f3a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f364:	e8d4 3f8f 	ldab	r3, [r4]
 801f368:	07db      	lsls	r3, r3, #31
 801f36a:	d40b      	bmi.n	801f384 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801f36c:	4620      	mov	r0, r4
 801f36e:	f007 fa33 	bl	80267d8 <__cxa_guard_acquire>
 801f372:	b138      	cbz	r0, 801f384 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801f374:	4620      	mov	r0, r4
 801f376:	f007 fa3b 	bl	80267f0 <__cxa_guard_release>
 801f37a:	4a06      	ldr	r2, [pc, #24]	; (801f394 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f37c:	4909      	ldr	r1, [pc, #36]	; (801f3a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f37e:	480a      	ldr	r0, [pc, #40]	; (801f3a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f380:	f007 fa23 	bl	80267ca <__aeabi_atexit>
 801f384:	4b05      	ldr	r3, [pc, #20]	; (801f39c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f386:	66ab      	str	r3, [r5, #104]	; 0x68
 801f388:	4b07      	ldr	r3, [pc, #28]	; (801f3a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f38a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f38c:	bd38      	pop	{r3, r4, r5, pc}
 801f38e:	bf00      	nop
 801f390:	2004f788 	.word	0x2004f788
 801f394:	20000000 	.word	0x20000000
 801f398:	0801cf17 	.word	0x0801cf17
 801f39c:	20025824 	.word	0x20025824
 801f3a0:	2004f78c 	.word	0x2004f78c
 801f3a4:	0801cf15 	.word	0x0801cf15
 801f3a8:	20025828 	.word	0x20025828

0801f3ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801f3ac:	b510      	push	{r4, lr}
 801f3ae:	4604      	mov	r4, r0
 801f3b0:	f7ff ff8c 	bl	801f2cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f3b4:	4620      	mov	r0, r4
 801f3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3ba:	f7ff bfbf 	b.w	801f33c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801f3be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801f3be:	b510      	push	{r4, lr}
 801f3c0:	4604      	mov	r4, r0
 801f3c2:	f7ff fff3 	bl	801f3ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801f3c6:	4620      	mov	r0, r4
 801f3c8:	f7ff ff76 	bl	801f2b8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801f3cc:	4620      	mov	r0, r4
 801f3ce:	f7ff fe09 	bl	801efe4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801f3d2:	4620      	mov	r0, r4
 801f3d4:	f7ff fd12 	bl	801edfc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801f3d8:	4620      	mov	r0, r4
 801f3da:	f7ff fd89 	bl	801eef0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801f3de:	4620      	mov	r0, r4
 801f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3e4:	f7ff bee8 	b.w	801f1b8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801f3e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ec:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801f3f0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801f3f4:	fb05 4c0e 	mla	ip, r5, lr, r4
 801f3f8:	2d00      	cmp	r5, #0
 801f3fa:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801f3fe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801f402:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f406:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801f40a:	eb02 0a0c 	add.w	sl, r2, ip
 801f40e:	8808      	ldrh	r0, [r1, #0]
 801f410:	f2c0 80b0 	blt.w	801f574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f414:	45ab      	cmp	fp, r5
 801f416:	f340 80ad 	ble.w	801f574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801f41a:	2c00      	cmp	r4, #0
 801f41c:	f2c0 80a8 	blt.w	801f570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f420:	45a6      	cmp	lr, r4
 801f422:	f340 80a5 	ble.w	801f570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801f426:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f42a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801f42e:	1c62      	adds	r2, r4, #1
 801f430:	f100 80a3 	bmi.w	801f57a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f434:	4596      	cmp	lr, r2
 801f436:	f340 80a0 	ble.w	801f57a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f43a:	f1b9 0f00 	cmp.w	r9, #0
 801f43e:	f000 809c 	beq.w	801f57a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801f442:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f446:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801f44a:	3501      	adds	r5, #1
 801f44c:	f100 8099 	bmi.w	801f582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f450:	45ab      	cmp	fp, r5
 801f452:	f340 8096 	ble.w	801f582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f456:	2f00      	cmp	r7, #0
 801f458:	f000 8093 	beq.w	801f582 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801f45c:	2c00      	cmp	r4, #0
 801f45e:	f2c0 808e 	blt.w	801f57e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f462:	45a6      	cmp	lr, r4
 801f464:	f340 808b 	ble.w	801f57e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801f468:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801f46c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801f470:	3401      	adds	r4, #1
 801f472:	f100 8089 	bmi.w	801f588 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f476:	45a6      	cmp	lr, r4
 801f478:	f340 8086 	ble.w	801f588 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f47c:	f1b9 0f00 	cmp.w	r9, #0
 801f480:	f000 8082 	beq.w	801f588 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801f484:	44d6      	add	lr, sl
 801f486:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f48a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801f48e:	fb19 fe07 	smulbb	lr, r9, r7
 801f492:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801f496:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f49a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801f49e:	ea44 0808 	orr.w	r8, r4, r8
 801f4a2:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801f4a6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801f4aa:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f4ae:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f4b2:	ea44 0c0c 	orr.w	ip, r4, ip
 801f4b6:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801f4ba:	fb04 f40c 	mul.w	r4, r4, ip
 801f4be:	f1c7 0210 	rsb	r2, r7, #16
 801f4c2:	eba2 0209 	sub.w	r2, r2, r9
 801f4c6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801f4ca:	fb02 4808 	mla	r8, r2, r8, r4
 801f4ce:	b2b4      	uxth	r4, r6
 801f4d0:	43f6      	mvns	r6, r6
 801f4d2:	041a      	lsls	r2, r3, #16
 801f4d4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f4d8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f4dc:	4313      	orrs	r3, r2
 801f4de:	fb0e 8303 	mla	r3, lr, r3, r8
 801f4e2:	042a      	lsls	r2, r5, #16
 801f4e4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f4e8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f4ec:	432a      	orrs	r2, r5
 801f4ee:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801f4f2:	fb07 3202 	mla	r2, r7, r2, r3
 801f4f6:	0d53      	lsrs	r3, r2, #21
 801f4f8:	0952      	lsrs	r2, r2, #5
 801f4fa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f4fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f502:	431a      	orrs	r2, r3
 801f504:	b293      	uxth	r3, r2
 801f506:	1202      	asrs	r2, r0, #8
 801f508:	b2f6      	uxtb	r6, r6
 801f50a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f50e:	fb12 f206 	smulbb	r2, r2, r6
 801f512:	10c7      	asrs	r7, r0, #3
 801f514:	00c0      	lsls	r0, r0, #3
 801f516:	b2c0      	uxtb	r0, r0
 801f518:	121d      	asrs	r5, r3, #8
 801f51a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f51e:	fb10 f006 	smulbb	r0, r0, r6
 801f522:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f526:	fb17 f706 	smulbb	r7, r7, r6
 801f52a:	fb05 2504 	mla	r5, r5, r4, r2
 801f52e:	10da      	asrs	r2, r3, #3
 801f530:	00db      	lsls	r3, r3, #3
 801f532:	b2db      	uxtb	r3, r3
 801f534:	fb03 0004 	mla	r0, r3, r4, r0
 801f538:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f53c:	fb02 7204 	mla	r2, r2, r4, r7
 801f540:	b2ad      	uxth	r5, r5
 801f542:	b280      	uxth	r0, r0
 801f544:	1c6b      	adds	r3, r5, #1
 801f546:	b292      	uxth	r2, r2
 801f548:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f54c:	1c43      	adds	r3, r0, #1
 801f54e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f552:	1c50      	adds	r0, r2, #1
 801f554:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f558:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f55c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f560:	0952      	lsrs	r2, r2, #5
 801f562:	432b      	orrs	r3, r5
 801f564:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f568:	4313      	orrs	r3, r2
 801f56a:	800b      	strh	r3, [r1, #0]
 801f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f570:	4680      	mov	r8, r0
 801f572:	e75c      	b.n	801f42e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801f574:	4684      	mov	ip, r0
 801f576:	4680      	mov	r8, r0
 801f578:	e767      	b.n	801f44a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f57a:	4684      	mov	ip, r0
 801f57c:	e765      	b.n	801f44a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801f57e:	4605      	mov	r5, r0
 801f580:	e776      	b.n	801f470 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801f582:	4603      	mov	r3, r0
 801f584:	4605      	mov	r5, r0
 801f586:	e782      	b.n	801f48e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801f588:	4603      	mov	r3, r0
 801f58a:	e780      	b.n	801f48e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801f58c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f590:	b099      	sub	sp, #100	; 0x64
 801f592:	9215      	str	r2, [sp, #84]	; 0x54
 801f594:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f596:	9016      	str	r0, [sp, #88]	; 0x58
 801f598:	9309      	str	r3, [sp, #36]	; 0x24
 801f59a:	6850      	ldr	r0, [r2, #4]
 801f59c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801f5a0:	910c      	str	r1, [sp, #48]	; 0x30
 801f5a2:	930d      	str	r3, [sp, #52]	; 0x34
 801f5a4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f5a8:	fb00 1303 	mla	r3, r0, r3, r1
 801f5ac:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801f5b0:	6812      	ldr	r2, [r2, #0]
 801f5b2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801f5b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f5be:	685e      	ldr	r6, [r3, #4]
 801f5c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5c2:	3604      	adds	r6, #4
 801f5c4:	43db      	mvns	r3, r3
 801f5c6:	b2db      	uxtb	r3, r3
 801f5c8:	930a      	str	r3, [sp, #40]	; 0x28
 801f5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	dc03      	bgt.n	801f5d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	f340 8225 	ble.w	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f5d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f5da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f5de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f5e2:	1e48      	subs	r0, r1, #1
 801f5e4:	1e57      	subs	r7, r2, #1
 801f5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	f340 80e3 	ble.w	801f7b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f5ee:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801f5f2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f5f6:	d406      	bmi.n	801f606 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5f8:	4584      	cmp	ip, r0
 801f5fa:	da04      	bge.n	801f606 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	db02      	blt.n	801f606 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f600:	42bb      	cmp	r3, r7
 801f602:	f2c0 80d8 	blt.w	801f7b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f606:	f11c 0c01 	adds.w	ip, ip, #1
 801f60a:	f100 80c9 	bmi.w	801f7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f60e:	4561      	cmp	r1, ip
 801f610:	f2c0 80c6 	blt.w	801f7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f614:	3301      	adds	r3, #1
 801f616:	f100 80c3 	bmi.w	801f7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f61a:	429a      	cmp	r2, r3
 801f61c:	f2c0 80c0 	blt.w	801f7a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f620:	4647      	mov	r7, r8
 801f622:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f626:	f1bb 0f00 	cmp.w	fp, #0
 801f62a:	f340 80e3 	ble.w	801f7f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f62e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f632:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801f636:	ea5f 422a 	movs.w	r2, sl, asr #16
 801f63a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f63e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801f642:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f646:	689b      	ldr	r3, [r3, #8]
 801f648:	f100 8121 	bmi.w	801f88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f64c:	f103 39ff 	add.w	r9, r3, #4294967295
 801f650:	454a      	cmp	r2, r9
 801f652:	f280 811c 	bge.w	801f88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f656:	f1bc 0f00 	cmp.w	ip, #0
 801f65a:	f2c0 8118 	blt.w	801f88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f65e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801f662:	45cc      	cmp	ip, r9
 801f664:	f280 8113 	bge.w	801f88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801f668:	b21b      	sxth	r3, r3
 801f66a:	fb0c 2203 	mla	r2, ip, r3, r2
 801f66e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f670:	eb04 0902 	add.w	r9, r4, r2
 801f674:	5ca2      	ldrb	r2, [r4, r2]
 801f676:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801f67a:	2800      	cmp	r0, #0
 801f67c:	f000 80fe 	beq.w	801f87c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f680:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f684:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801f688:	9211      	str	r2, [sp, #68]	; 0x44
 801f68a:	b151      	cbz	r1, 801f6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f68c:	eb09 0203 	add.w	r2, r9, r3
 801f690:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f694:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f698:	930f      	str	r3, [sp, #60]	; 0x3c
 801f69a:	7853      	ldrb	r3, [r2, #1]
 801f69c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f6a0:	9312      	str	r3, [sp, #72]	; 0x48
 801f6a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6a4:	fb10 f201 	smulbb	r2, r0, r1
 801f6a8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f6ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f6b0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f6b4:	ea4c 0c03 	orr.w	ip, ip, r3
 801f6b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f6ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f6bc:	041b      	lsls	r3, r3, #16
 801f6be:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f6c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f6c6:	10d2      	asrs	r2, r2, #3
 801f6c8:	4323      	orrs	r3, r4
 801f6ca:	4353      	muls	r3, r2
 801f6cc:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801f6d0:	fb09 330c 	mla	r3, r9, ip, r3
 801f6d4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801f6d8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f6dc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f6e0:	ea4c 0e0e 	orr.w	lr, ip, lr
 801f6e4:	f1c1 0c10 	rsb	ip, r1, #16
 801f6e8:	ebac 0c00 	sub.w	ip, ip, r0
 801f6ec:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f6f0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801f6f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6f6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801f6fa:	0418      	lsls	r0, r3, #16
 801f6fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f700:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f704:	4318      	orrs	r0, r3
 801f706:	fb02 c200 	mla	r2, r2, r0, ip
 801f70a:	8838      	ldrh	r0, [r7, #0]
 801f70c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f70e:	0d53      	lsrs	r3, r2, #21
 801f710:	1201      	asrs	r1, r0, #8
 801f712:	0952      	lsrs	r2, r2, #5
 801f714:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f718:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f71c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f720:	431a      	orrs	r2, r3
 801f722:	fb11 f104 	smulbb	r1, r1, r4
 801f726:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f72a:	00c0      	lsls	r0, r0, #3
 801f72c:	b292      	uxth	r2, r2
 801f72e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f732:	b2c0      	uxtb	r0, r0
 801f734:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801f738:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f73c:	fb1e fe04 	smulbb	lr, lr, r4
 801f740:	fb10 f004 	smulbb	r0, r0, r4
 801f744:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f748:	fb0c 1c03 	mla	ip, ip, r3, r1
 801f74c:	10d1      	asrs	r1, r2, #3
 801f74e:	00d2      	lsls	r2, r2, #3
 801f750:	b2d2      	uxtb	r2, r2
 801f752:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f756:	fb01 e103 	mla	r1, r1, r3, lr
 801f75a:	fb02 0303 	mla	r3, r2, r3, r0
 801f75e:	fa1f fc8c 	uxth.w	ip, ip
 801f762:	b29a      	uxth	r2, r3
 801f764:	f10c 0301 	add.w	r3, ip, #1
 801f768:	b289      	uxth	r1, r1
 801f76a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f76e:	1c53      	adds	r3, r2, #1
 801f770:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f774:	1c4a      	adds	r2, r1, #1
 801f776:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f77a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f77e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f782:	0949      	lsrs	r1, r1, #5
 801f784:	ea43 030c 	orr.w	r3, r3, ip
 801f788:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f78c:	430b      	orrs	r3, r1
 801f78e:	803b      	strh	r3, [r7, #0]
 801f790:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f792:	3702      	adds	r7, #2
 801f794:	449a      	add	sl, r3
 801f796:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f798:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f79c:	441d      	add	r5, r3
 801f79e:	e742      	b.n	801f626 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f7a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f7a2:	f108 0802 	add.w	r8, r8, #2
 801f7a6:	449a      	add	sl, r3
 801f7a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f7aa:	441d      	add	r5, r3
 801f7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7ae:	3b01      	subs	r3, #1
 801f7b0:	9309      	str	r3, [sp, #36]	; 0x24
 801f7b2:	e718      	b.n	801f5e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f7b4:	d023      	beq.n	801f7fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801f7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7b8:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f7ba:	3b01      	subs	r3, #1
 801f7bc:	fb00 a003 	mla	r0, r0, r3, sl
 801f7c0:	1400      	asrs	r0, r0, #16
 801f7c2:	f53f af2d 	bmi.w	801f620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f7c6:	3901      	subs	r1, #1
 801f7c8:	4288      	cmp	r0, r1
 801f7ca:	f6bf af29 	bge.w	801f620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f7ce:	9926      	ldr	r1, [sp, #152]	; 0x98
 801f7d0:	fb01 5303 	mla	r3, r1, r3, r5
 801f7d4:	141b      	asrs	r3, r3, #16
 801f7d6:	f53f af23 	bmi.w	801f620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f7da:	3a01      	subs	r2, #1
 801f7dc:	4293      	cmp	r3, r2
 801f7de:	f6bf af1f 	bge.w	801f620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f7e2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f7e6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f7ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801f7ee:	f1be 0f00 	cmp.w	lr, #0
 801f7f2:	dc6c      	bgt.n	801f8ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801f7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f7fa:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801f7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f800:	2b00      	cmp	r3, #0
 801f802:	f340 810e 	ble.w	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801f806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f80a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f80e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f812:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f816:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f81a:	eef0 6a62 	vmov.f32	s13, s5
 801f81e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f822:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f826:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f82a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f82e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f832:	ee16 aa90 	vmov	sl, s13
 801f836:	eef0 6a43 	vmov.f32	s13, s6
 801f83a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f83e:	ee12 2a90 	vmov	r2, s5
 801f842:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f84c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f850:	ee13 2a10 	vmov	r2, s6
 801f854:	9325      	str	r3, [sp, #148]	; 0x94
 801f856:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f858:	ee16 5a90 	vmov	r5, s13
 801f85c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f860:	9326      	str	r3, [sp, #152]	; 0x98
 801f862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f864:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f866:	3b01      	subs	r3, #1
 801f868:	930c      	str	r3, [sp, #48]	; 0x30
 801f86a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f86c:	bf08      	it	eq
 801f86e:	4613      	moveq	r3, r2
 801f870:	eeb0 3a67 	vmov.f32	s6, s15
 801f874:	9309      	str	r3, [sp, #36]	; 0x24
 801f876:	eef0 2a47 	vmov.f32	s5, s14
 801f87a:	e6a6      	b.n	801f5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f87c:	2900      	cmp	r1, #0
 801f87e:	f43f af10 	beq.w	801f6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f882:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f886:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f88a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f88c:	e709      	b.n	801f6a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801f88e:	f112 0901 	adds.w	r9, r2, #1
 801f892:	f53f af7d 	bmi.w	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f896:	454b      	cmp	r3, r9
 801f898:	f6ff af7a 	blt.w	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f89c:	f11c 0901 	adds.w	r9, ip, #1
 801f8a0:	f53f af76 	bmi.w	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f8a4:	45ce      	cmp	lr, r9
 801f8a6:	f6ff af73 	blt.w	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f8aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f8ac:	9202      	str	r2, [sp, #8]
 801f8ae:	b21b      	sxth	r3, r3
 801f8b0:	fa0f f28e 	sxth.w	r2, lr
 801f8b4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f8b8:	e9cd c003 	strd	ip, r0, [sp, #12]
 801f8bc:	9201      	str	r2, [sp, #4]
 801f8be:	9300      	str	r3, [sp, #0]
 801f8c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f8c2:	4633      	mov	r3, r6
 801f8c4:	4639      	mov	r1, r7
 801f8c6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f8c8:	f7ff fd8e 	bl	801f3e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801f8cc:	e760      	b.n	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801f8ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f8d0:	ea4f 422a 	mov.w	r2, sl, asr #16
 801f8d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f8d8:	1429      	asrs	r1, r5, #16
 801f8da:	fb03 2101 	mla	r1, r3, r1, r2
 801f8de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f8e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f8e2:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801f8e6:	440a      	add	r2, r1
 801f8e8:	5c61      	ldrb	r1, [r4, r1]
 801f8ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f8ee:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801f8f2:	f1bc 0f00 	cmp.w	ip, #0
 801f8f6:	f000 808c 	beq.w	801fa12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801f8fa:	7857      	ldrb	r7, [r2, #1]
 801f8fc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801f900:	9413      	str	r4, [sp, #76]	; 0x4c
 801f902:	b140      	cbz	r0, 801f916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f904:	18d7      	adds	r7, r2, r3
 801f906:	5cd3      	ldrb	r3, [r2, r3]
 801f908:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f90c:	9310      	str	r3, [sp, #64]	; 0x40
 801f90e:	787b      	ldrb	r3, [r7, #1]
 801f910:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801f914:	9314      	str	r3, [sp, #80]	; 0x50
 801f916:	fb1c f200 	smulbb	r2, ip, r0
 801f91a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f91c:	10d2      	asrs	r2, r2, #3
 801f91e:	041f      	lsls	r7, r3, #16
 801f920:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801f924:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f928:	431f      	orrs	r7, r3
 801f92a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801f92e:	9317      	str	r3, [sp, #92]	; 0x5c
 801f930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f932:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f934:	041b      	lsls	r3, r3, #16
 801f936:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801f93a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f93e:	ea43 030b 	orr.w	r3, r3, fp
 801f942:	4353      	muls	r3, r2
 801f944:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f946:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f94a:	fb04 3707 	mla	r7, r4, r7, r3
 801f94e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f952:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801f956:	ea43 0b01 	orr.w	fp, r3, r1
 801f95a:	f1c0 0110 	rsb	r1, r0, #16
 801f95e:	eba1 0c0c 	sub.w	ip, r1, ip
 801f962:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801f966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f968:	fb0c 770b 	mla	r7, ip, fp, r7
 801f96c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801f970:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801f974:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f978:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801f97c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f980:	fb02 770c 	mla	r7, r2, ip, r7
 801f984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f986:	0d79      	lsrs	r1, r7, #21
 801f988:	8812      	ldrh	r2, [r2, #0]
 801f98a:	097f      	lsrs	r7, r7, #5
 801f98c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f990:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f994:	430f      	orrs	r7, r1
 801f996:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f998:	1211      	asrs	r1, r2, #8
 801f99a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f99e:	b2bb      	uxth	r3, r7
 801f9a0:	fb11 f104 	smulbb	r1, r1, r4
 801f9a4:	10d7      	asrs	r7, r2, #3
 801f9a6:	00d2      	lsls	r2, r2, #3
 801f9a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f9ac:	b2d2      	uxtb	r2, r2
 801f9ae:	1218      	asrs	r0, r3, #8
 801f9b0:	fb17 f704 	smulbb	r7, r7, r4
 801f9b4:	fb12 f204 	smulbb	r2, r2, r4
 801f9b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f9bc:	fb00 1009 	mla	r0, r0, r9, r1
 801f9c0:	10d9      	asrs	r1, r3, #3
 801f9c2:	00db      	lsls	r3, r3, #3
 801f9c4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f9c8:	b2db      	uxtb	r3, r3
 801f9ca:	fb01 7109 	mla	r1, r1, r9, r7
 801f9ce:	fb03 2309 	mla	r3, r3, r9, r2
 801f9d2:	b280      	uxth	r0, r0
 801f9d4:	b29b      	uxth	r3, r3
 801f9d6:	b289      	uxth	r1, r1
 801f9d8:	1c42      	adds	r2, r0, #1
 801f9da:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f9de:	1c4f      	adds	r7, r1, #1
 801f9e0:	1c5a      	adds	r2, r3, #1
 801f9e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f9e6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801f9ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f9ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f9f2:	0949      	lsrs	r1, r1, #5
 801f9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9f6:	4310      	orrs	r0, r2
 801f9f8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f9fc:	4308      	orrs	r0, r1
 801f9fe:	f823 0b02 	strh.w	r0, [r3], #2
 801fa02:	930e      	str	r3, [sp, #56]	; 0x38
 801fa04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa06:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fa0a:	449a      	add	sl, r3
 801fa0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa0e:	441d      	add	r5, r3
 801fa10:	e6ed      	b.n	801f7ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801fa12:	2800      	cmp	r0, #0
 801fa14:	f43f af7f 	beq.w	801f916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fa18:	5cd3      	ldrb	r3, [r2, r3]
 801fa1a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fa1e:	9310      	str	r3, [sp, #64]	; 0x40
 801fa20:	e779      	b.n	801f916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fa22:	b019      	add	sp, #100	; 0x64
 801fa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa2c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801fa30:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801fa34:	fb08 470e 	mla	r7, r8, lr, r4
 801fa38:	f1b8 0f00 	cmp.w	r8, #0
 801fa3c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801fa40:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801fa44:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801fa48:	eb02 0907 	add.w	r9, r2, r7
 801fa4c:	8808      	ldrh	r0, [r1, #0]
 801fa4e:	db67      	blt.n	801fb20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801fa50:	45c2      	cmp	sl, r8
 801fa52:	dd65      	ble.n	801fb20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801fa54:	2c00      	cmp	r4, #0
 801fa56:	db61      	blt.n	801fb1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801fa58:	45a6      	cmp	lr, r4
 801fa5a:	dd5f      	ble.n	801fb1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801fa5c:	5dd2      	ldrb	r2, [r2, r7]
 801fa5e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801fa62:	1c62      	adds	r2, r4, #1
 801fa64:	d45f      	bmi.n	801fb26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801fa66:	4596      	cmp	lr, r2
 801fa68:	dd5d      	ble.n	801fb26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801fa6a:	2d00      	cmp	r5, #0
 801fa6c:	d05b      	beq.n	801fb26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801fa6e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fa72:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801fa76:	f118 0801 	adds.w	r8, r8, #1
 801fa7a:	d458      	bmi.n	801fb2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801fa7c:	45c2      	cmp	sl, r8
 801fa7e:	dd56      	ble.n	801fb2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801fa80:	2e00      	cmp	r6, #0
 801fa82:	d054      	beq.n	801fb2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801fa84:	2c00      	cmp	r4, #0
 801fa86:	db50      	blt.n	801fb2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801fa88:	45a6      	cmp	lr, r4
 801fa8a:	dd4e      	ble.n	801fb2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801fa8c:	f819 200e 	ldrb.w	r2, [r9, lr]
 801fa90:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801fa94:	3401      	adds	r4, #1
 801fa96:	d407      	bmi.n	801faa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801fa98:	45a6      	cmp	lr, r4
 801fa9a:	dd05      	ble.n	801faa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801fa9c:	b125      	cbz	r5, 801faa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801fa9e:	44ce      	add	lr, r9
 801faa0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801faa4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801faa8:	fb15 f406 	smulbb	r4, r5, r6
 801faac:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801fab0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fab4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801fab8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801fabc:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801fac0:	ea43 0c0c 	orr.w	ip, r3, ip
 801fac4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fac8:	f1c6 0310 	rsb	r3, r6, #16
 801facc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fad0:	1b5b      	subs	r3, r3, r5
 801fad2:	ea4e 0707 	orr.w	r7, lr, r7
 801fad6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801fada:	437d      	muls	r5, r7
 801fadc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fae0:	fb03 5c0c 	mla	ip, r3, ip, r5
 801fae4:	0403      	lsls	r3, r0, #16
 801fae6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801faea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801faee:	4318      	orrs	r0, r3
 801faf0:	fb04 c000 	mla	r0, r4, r0, ip
 801faf4:	0413      	lsls	r3, r2, #16
 801faf6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fafa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fafe:	4313      	orrs	r3, r2
 801fb00:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801fb04:	fb06 0003 	mla	r0, r6, r3, r0
 801fb08:	0d43      	lsrs	r3, r0, #21
 801fb0a:	0940      	lsrs	r0, r0, #5
 801fb0c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb10:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fb14:	4318      	orrs	r0, r3
 801fb16:	8008      	strh	r0, [r1, #0]
 801fb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb1c:	4684      	mov	ip, r0
 801fb1e:	e7a0      	b.n	801fa62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801fb20:	4607      	mov	r7, r0
 801fb22:	4684      	mov	ip, r0
 801fb24:	e7a7      	b.n	801fa76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801fb26:	4607      	mov	r7, r0
 801fb28:	e7a5      	b.n	801fa76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	e7b2      	b.n	801fa94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801fb2e:	4602      	mov	r2, r0
 801fb30:	e7ba      	b.n	801faa8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801fb32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb3a:	b093      	sub	sp, #76	; 0x4c
 801fb3c:	920f      	str	r2, [sp, #60]	; 0x3c
 801fb3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fb40:	9010      	str	r0, [sp, #64]	; 0x40
 801fb42:	6850      	ldr	r0, [r2, #4]
 801fb44:	9108      	str	r1, [sp, #32]
 801fb46:	9306      	str	r3, [sp, #24]
 801fb48:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801fb4c:	fb00 1303 	mla	r3, r0, r3, r1
 801fb50:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801fb54:	6812      	ldr	r2, [r2, #0]
 801fb56:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801fb5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	9307      	str	r3, [sp, #28]
 801fb60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb62:	685f      	ldr	r7, [r3, #4]
 801fb64:	3704      	adds	r7, #4
 801fb66:	9b08      	ldr	r3, [sp, #32]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	dc03      	bgt.n	801fb74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801fb6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	f340 81b2 	ble.w	801fed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801fb74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fb76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb7e:	1e48      	subs	r0, r1, #1
 801fb80:	f102 3cff 	add.w	ip, r2, #4294967295
 801fb84:	9b06      	ldr	r3, [sp, #24]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	f340 80a9 	ble.w	801fcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801fb8c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fb90:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fb94:	d406      	bmi.n	801fba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fb96:	4586      	cmp	lr, r0
 801fb98:	da04      	bge.n	801fba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	db02      	blt.n	801fba4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fb9e:	4563      	cmp	r3, ip
 801fba0:	f2c0 809e 	blt.w	801fce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fba4:	f11e 0e01 	adds.w	lr, lr, #1
 801fba8:	f100 808f 	bmi.w	801fcca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fbac:	4571      	cmp	r1, lr
 801fbae:	f2c0 808c 	blt.w	801fcca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	f100 8089 	bmi.w	801fcca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fbb8:	429a      	cmp	r2, r3
 801fbba:	f2c0 8086 	blt.w	801fcca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fbbe:	46c8      	mov	r8, r9
 801fbc0:	f8dd b018 	ldr.w	fp, [sp, #24]
 801fbc4:	f1bb 0f00 	cmp.w	fp, #0
 801fbc8:	f340 80a6 	ble.w	801fd18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801fbcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fbce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fbd0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fbd4:	1422      	asrs	r2, r4, #16
 801fbd6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801fbda:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fbde:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fbe2:	689b      	ldr	r3, [r3, #8]
 801fbe4:	f100 80e3 	bmi.w	801fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fbe8:	f103 3aff 	add.w	sl, r3, #4294967295
 801fbec:	4552      	cmp	r2, sl
 801fbee:	f280 80de 	bge.w	801fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fbf2:	f1bc 0f00 	cmp.w	ip, #0
 801fbf6:	f2c0 80da 	blt.w	801fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fbfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 801fbfe:	45d4      	cmp	ip, sl
 801fc00:	f280 80d5 	bge.w	801fdae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fc04:	b21b      	sxth	r3, r3
 801fc06:	fb0c 2203 	mla	r2, ip, r3, r2
 801fc0a:	9d07      	ldr	r5, [sp, #28]
 801fc0c:	eb05 0a02 	add.w	sl, r5, r2
 801fc10:	5caa      	ldrb	r2, [r5, r2]
 801fc12:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801fc16:	2800      	cmp	r0, #0
 801fc18:	f000 80c0 	beq.w	801fd9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fc1c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801fc20:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801fc24:	920b      	str	r2, [sp, #44]	; 0x2c
 801fc26:	b151      	cbz	r1, 801fc3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fc28:	eb0a 0203 	add.w	r2, sl, r3
 801fc2c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801fc30:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fc34:	9309      	str	r3, [sp, #36]	; 0x24
 801fc36:	7853      	ldrb	r3, [r2, #1]
 801fc38:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fc3c:	930c      	str	r3, [sp, #48]	; 0x30
 801fc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fc40:	fb10 f201 	smulbb	r2, r0, r1
 801fc44:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fc48:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fc4c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fc50:	ea4c 0c03 	orr.w	ip, ip, r3
 801fc54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc58:	041b      	lsls	r3, r3, #16
 801fc5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fc5e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801fc62:	10d2      	asrs	r2, r2, #3
 801fc64:	432b      	orrs	r3, r5
 801fc66:	4353      	muls	r3, r2
 801fc68:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801fc6c:	fb0a 330c 	mla	r3, sl, ip, r3
 801fc70:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801fc74:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fc78:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fc7c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801fc80:	f1c1 0c10 	rsb	ip, r1, #16
 801fc84:	ebac 0c00 	sub.w	ip, ip, r0
 801fc88:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fc8c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801fc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc92:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801fc96:	0418      	lsls	r0, r3, #16
 801fc98:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fc9c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fca0:	4318      	orrs	r0, r3
 801fca2:	fb02 c200 	mla	r2, r2, r0, ip
 801fca6:	0d53      	lsrs	r3, r2, #21
 801fca8:	0952      	lsrs	r2, r2, #5
 801fcaa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fcae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fcb2:	431a      	orrs	r2, r3
 801fcb4:	f8a8 2000 	strh.w	r2, [r8]
 801fcb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fcba:	f108 0802 	add.w	r8, r8, #2
 801fcbe:	441c      	add	r4, r3
 801fcc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fcc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fcc6:	441e      	add	r6, r3
 801fcc8:	e77c      	b.n	801fbc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fcca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fccc:	f109 0902 	add.w	r9, r9, #2
 801fcd0:	441c      	add	r4, r3
 801fcd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fcd4:	441e      	add	r6, r3
 801fcd6:	9b06      	ldr	r3, [sp, #24]
 801fcd8:	3b01      	subs	r3, #1
 801fcda:	9306      	str	r3, [sp, #24]
 801fcdc:	e752      	b.n	801fb84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fcde:	d020      	beq.n	801fd22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fce0:	9b06      	ldr	r3, [sp, #24]
 801fce2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801fce4:	3b01      	subs	r3, #1
 801fce6:	fb00 4003 	mla	r0, r0, r3, r4
 801fcea:	1400      	asrs	r0, r0, #16
 801fcec:	f53f af67 	bmi.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcf0:	3901      	subs	r1, #1
 801fcf2:	4288      	cmp	r0, r1
 801fcf4:	f6bf af63 	bge.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcf8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801fcfa:	fb01 6303 	mla	r3, r1, r3, r6
 801fcfe:	141b      	asrs	r3, r3, #16
 801fd00:	f53f af5d 	bmi.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fd04:	3a01      	subs	r2, #1
 801fd06:	4293      	cmp	r3, r2
 801fd08:	f6bf af59 	bge.w	801fbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fd0c:	46ca      	mov	sl, r9
 801fd0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801fd12:	f1b8 0f00 	cmp.w	r8, #0
 801fd16:	dc67      	bgt.n	801fde8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fd18:	9b06      	ldr	r3, [sp, #24]
 801fd1a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801fd1e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801fd22:	9b08      	ldr	r3, [sp, #32]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	f340 80d7 	ble.w	801fed8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801fd2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd3a:	eeb0 6a62 	vmov.f32	s12, s5
 801fd3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd46:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd52:	ee16 4a10 	vmov	r4, s12
 801fd56:	eeb0 6a43 	vmov.f32	s12, s6
 801fd5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd5e:	ee12 2a90 	vmov	r2, s5
 801fd62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd70:	ee13 2a10 	vmov	r2, s6
 801fd74:	931f      	str	r3, [sp, #124]	; 0x7c
 801fd76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd78:	ee16 6a10 	vmov	r6, s12
 801fd7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd80:	9320      	str	r3, [sp, #128]	; 0x80
 801fd82:	9b08      	ldr	r3, [sp, #32]
 801fd84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd86:	3b01      	subs	r3, #1
 801fd88:	9308      	str	r3, [sp, #32]
 801fd8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd8c:	bf08      	it	eq
 801fd8e:	4613      	moveq	r3, r2
 801fd90:	eeb0 3a67 	vmov.f32	s6, s15
 801fd94:	9306      	str	r3, [sp, #24]
 801fd96:	eef0 2a47 	vmov.f32	s5, s14
 801fd9a:	e6e4      	b.n	801fb66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801fd9c:	2900      	cmp	r1, #0
 801fd9e:	f43f af4e 	beq.w	801fc3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fda2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801fda6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fdaa:	9309      	str	r3, [sp, #36]	; 0x24
 801fdac:	e747      	b.n	801fc3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fdae:	f112 0a01 	adds.w	sl, r2, #1
 801fdb2:	d481      	bmi.n	801fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fdb4:	4553      	cmp	r3, sl
 801fdb6:	f6ff af7f 	blt.w	801fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fdba:	f11c 0a01 	adds.w	sl, ip, #1
 801fdbe:	f53f af7b 	bmi.w	801fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fdc2:	45d6      	cmp	lr, sl
 801fdc4:	f6ff af78 	blt.w	801fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fdc8:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801fdcc:	b21b      	sxth	r3, r3
 801fdce:	fa0f f28e 	sxth.w	r2, lr
 801fdd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fdd6:	9201      	str	r2, [sp, #4]
 801fdd8:	9300      	str	r3, [sp, #0]
 801fdda:	9a07      	ldr	r2, [sp, #28]
 801fddc:	463b      	mov	r3, r7
 801fdde:	4641      	mov	r1, r8
 801fde0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fde2:	f7ff fe21 	bl	801fa28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801fde6:	e767      	b.n	801fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801fde8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fdea:	1422      	asrs	r2, r4, #16
 801fdec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fdf0:	1431      	asrs	r1, r6, #16
 801fdf2:	fb03 2101 	mla	r1, r3, r1, r2
 801fdf6:	9d07      	ldr	r5, [sp, #28]
 801fdf8:	9a07      	ldr	r2, [sp, #28]
 801fdfa:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801fdfe:	440a      	add	r2, r1
 801fe00:	5c69      	ldrb	r1, [r5, r1]
 801fe02:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fe06:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801fe0a:	f1be 0f00 	cmp.w	lr, #0
 801fe0e:	d05c      	beq.n	801feca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801fe10:	f892 c001 	ldrb.w	ip, [r2, #1]
 801fe14:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801fe18:	950d      	str	r5, [sp, #52]	; 0x34
 801fe1a:	b150      	cbz	r0, 801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fe1c:	eb02 0c03 	add.w	ip, r2, r3
 801fe20:	5cd3      	ldrb	r3, [r2, r3]
 801fe22:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fe26:	930a      	str	r3, [sp, #40]	; 0x28
 801fe28:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801fe2c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fe30:	930e      	str	r3, [sp, #56]	; 0x38
 801fe32:	fb1e f200 	smulbb	r2, lr, r0
 801fe36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fe38:	10d2      	asrs	r2, r2, #3
 801fe3a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fe3e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fe42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fe46:	ea4c 0c03 	orr.w	ip, ip, r3
 801fe4a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801fe4e:	9311      	str	r3, [sp, #68]	; 0x44
 801fe50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fe54:	041b      	lsls	r3, r3, #16
 801fe56:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801fe5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fe5e:	ea43 030b 	orr.w	r3, r3, fp
 801fe62:	4353      	muls	r3, r2
 801fe64:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe66:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801fe6a:	fb05 3c0c 	mla	ip, r5, ip, r3
 801fe6e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fe72:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801fe76:	ea43 0b01 	orr.w	fp, r3, r1
 801fe7a:	f1c0 0110 	rsb	r1, r0, #16
 801fe7e:	eba1 0e0e 	sub.w	lr, r1, lr
 801fe82:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801fe86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe88:	fb0e cc0b 	mla	ip, lr, fp, ip
 801fe8c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801fe90:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801fe94:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801fe98:	ea4b 0e0e 	orr.w	lr, fp, lr
 801fe9c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801fea0:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fea4:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801fea8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801feac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feb0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801feb4:	ea43 0c0c 	orr.w	ip, r3, ip
 801feb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801feba:	f82a cb02 	strh.w	ip, [sl], #2
 801febe:	441c      	add	r4, r3
 801fec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fec2:	f108 38ff 	add.w	r8, r8, #4294967295
 801fec6:	441e      	add	r6, r3
 801fec8:	e723      	b.n	801fd12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801feca:	2800      	cmp	r0, #0
 801fecc:	d0b1      	beq.n	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fece:	5cd3      	ldrb	r3, [r2, r3]
 801fed0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801fed4:	930a      	str	r3, [sp, #40]	; 0x28
 801fed6:	e7ac      	b.n	801fe32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801fed8:	b013      	add	sp, #76	; 0x4c
 801feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fede <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801fede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee2:	880d      	ldrh	r5, [r1, #0]
 801fee4:	b087      	sub	sp, #28
 801fee6:	10ef      	asrs	r7, r5, #3
 801fee8:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801feec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fef0:	00ed      	lsls	r5, r5, #3
 801fef2:	9701      	str	r7, [sp, #4]
 801fef4:	b2ed      	uxtb	r5, r5
 801fef6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801fefa:	9502      	str	r5, [sp, #8]
 801fefc:	9d01      	ldr	r5, [sp, #4]
 801fefe:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ff02:	fb06 0709 	mla	r7, r6, r9, r0
 801ff06:	9103      	str	r1, [sp, #12]
 801ff08:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801ff0c:	022d      	lsls	r5, r5, #8
 801ff0e:	9902      	ldr	r1, [sp, #8]
 801ff10:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801ff14:	430d      	orrs	r5, r1
 801ff16:	2e00      	cmp	r6, #0
 801ff18:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ff1c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ff20:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801ff24:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801ff28:	eb02 0c07 	add.w	ip, r2, r7
 801ff2c:	9505      	str	r5, [sp, #20]
 801ff2e:	f2c0 80b6 	blt.w	802009e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ff32:	45b3      	cmp	fp, r6
 801ff34:	f340 80b3 	ble.w	802009e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801ff38:	2800      	cmp	r0, #0
 801ff3a:	f2c0 80ae 	blt.w	802009a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ff3e:	4581      	cmp	r9, r0
 801ff40:	f340 80ab 	ble.w	802009a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801ff44:	5dd7      	ldrb	r7, [r2, r7]
 801ff46:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ff4a:	441f      	add	r7, r3
 801ff4c:	1c42      	adds	r2, r0, #1
 801ff4e:	f100 80a9 	bmi.w	80200a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ff52:	4591      	cmp	r9, r2
 801ff54:	f340 80a6 	ble.w	80200a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ff58:	2c00      	cmp	r4, #0
 801ff5a:	f000 80a3 	beq.w	80200a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801ff5e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ff62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff66:	441d      	add	r5, r3
 801ff68:	3601      	adds	r6, #1
 801ff6a:	f100 809f 	bmi.w	80200ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ff6e:	45b3      	cmp	fp, r6
 801ff70:	f340 809c 	ble.w	80200ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ff74:	f1be 0f00 	cmp.w	lr, #0
 801ff78:	f000 8098 	beq.w	80200ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801ff7c:	2800      	cmp	r0, #0
 801ff7e:	f2c0 8093 	blt.w	80200a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ff82:	4581      	cmp	r9, r0
 801ff84:	f340 8090 	ble.w	80200a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801ff88:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801ff8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ff90:	441e      	add	r6, r3
 801ff92:	3001      	adds	r0, #1
 801ff94:	f100 808d 	bmi.w	80200b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ff98:	4581      	cmp	r9, r0
 801ff9a:	f340 808a 	ble.w	80200b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ff9e:	2c00      	cmp	r4, #0
 801ffa0:	f000 8087 	beq.w	80200b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801ffa4:	44e1      	add	r9, ip
 801ffa6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ffaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffae:	4413      	add	r3, r2
 801ffb0:	b2a4      	uxth	r4, r4
 801ffb2:	fa1f fe8e 	uxth.w	lr, lr
 801ffb6:	fb04 fb0e 	mul.w	fp, r4, lr
 801ffba:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801ffbe:	fa1f f08e 	uxth.w	r0, lr
 801ffc2:	fa1f fe88 	uxth.w	lr, r8
 801ffc6:	ea6f 0808 	mvn.w	r8, r8
 801ffca:	0124      	lsls	r4, r4, #4
 801ffcc:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801ffd0:	eba4 040b 	sub.w	r4, r4, fp
 801ffd4:	b2a2      	uxth	r2, r4
 801ffd6:	78ac      	ldrb	r4, [r5, #2]
 801ffd8:	f897 c002 	ldrb.w	ip, [r7, #2]
 801ffdc:	4354      	muls	r4, r2
 801ffde:	eba9 0900 	sub.w	r9, r9, r0
 801ffe2:	fa1f f989 	uxth.w	r9, r9
 801ffe6:	fb09 440c 	mla	r4, r9, ip, r4
 801ffea:	f896 c002 	ldrb.w	ip, [r6, #2]
 801ffee:	fa5f f888 	uxtb.w	r8, r8
 801fff2:	fb00 440c 	mla	r4, r0, ip, r4
 801fff6:	f893 c002 	ldrb.w	ip, [r3, #2]
 801fffa:	fb1a fa08 	smulbb	sl, sl, r8
 801fffe:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8020002:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020006:	fb0c ac0e 	mla	ip, ip, lr, sl
 802000a:	f895 a001 	ldrb.w	sl, [r5, #1]
 802000e:	782d      	ldrb	r5, [r5, #0]
 8020010:	fb02 fa0a 	mul.w	sl, r2, sl
 8020014:	436a      	muls	r2, r5
 8020016:	787c      	ldrb	r4, [r7, #1]
 8020018:	783f      	ldrb	r7, [r7, #0]
 802001a:	fb09 aa04 	mla	sl, r9, r4, sl
 802001e:	fb09 2207 	mla	r2, r9, r7, r2
 8020022:	7874      	ldrb	r4, [r6, #1]
 8020024:	7835      	ldrb	r5, [r6, #0]
 8020026:	fb00 aa04 	mla	sl, r0, r4, sl
 802002a:	fb00 2005 	mla	r0, r0, r5, r2
 802002e:	785c      	ldrb	r4, [r3, #1]
 8020030:	781b      	ldrb	r3, [r3, #0]
 8020032:	fb0b a404 	mla	r4, fp, r4, sl
 8020036:	9901      	ldr	r1, [sp, #4]
 8020038:	fb0b 0b03 	mla	fp, fp, r3, r0
 802003c:	9b02      	ldr	r3, [sp, #8]
 802003e:	fb11 fa08 	smulbb	sl, r1, r8
 8020042:	fb13 f808 	smulbb	r8, r3, r8
 8020046:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802004a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802004e:	fb04 a40e 	mla	r4, r4, lr, sl
 8020052:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8020056:	fa1f fc8c 	uxth.w	ip, ip
 802005a:	f10c 0301 	add.w	r3, ip, #1
 802005e:	fa1f fe8e 	uxth.w	lr, lr
 8020062:	b2a4      	uxth	r4, r4
 8020064:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020068:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 802006c:	f104 0a01 	add.w	sl, r4, #1
 8020070:	f10e 0c01 	add.w	ip, lr, #1
 8020074:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020078:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802007c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020080:	0964      	lsrs	r4, r4, #5
 8020082:	ea4c 0c03 	orr.w	ip, ip, r3
 8020086:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802008a:	9b03      	ldr	r3, [sp, #12]
 802008c:	ea4c 0c04 	orr.w	ip, ip, r4
 8020090:	f8a3 c000 	strh.w	ip, [r3]
 8020094:	b007      	add	sp, #28
 8020096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802009a:	af05      	add	r7, sp, #20
 802009c:	e756      	b.n	801ff4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802009e:	ad05      	add	r5, sp, #20
 80200a0:	462f      	mov	r7, r5
 80200a2:	e761      	b.n	801ff68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80200a4:	ad05      	add	r5, sp, #20
 80200a6:	e75f      	b.n	801ff68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80200a8:	ae05      	add	r6, sp, #20
 80200aa:	e772      	b.n	801ff92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80200ac:	ab05      	add	r3, sp, #20
 80200ae:	461e      	mov	r6, r3
 80200b0:	e77e      	b.n	801ffb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80200b2:	ab05      	add	r3, sp, #20
 80200b4:	e77c      	b.n	801ffb0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080200b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ba:	b095      	sub	sp, #84	; 0x54
 80200bc:	9212      	str	r2, [sp, #72]	; 0x48
 80200be:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80200c0:	9013      	str	r0, [sp, #76]	; 0x4c
 80200c2:	9309      	str	r3, [sp, #36]	; 0x24
 80200c4:	6850      	ldr	r0, [r2, #4]
 80200c6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80200ca:	910e      	str	r1, [sp, #56]	; 0x38
 80200cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80200ce:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80200d2:	fb00 1303 	mla	r3, r0, r3, r1
 80200d6:	6812      	ldr	r2, [r2, #0]
 80200d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80200dc:	930a      	str	r3, [sp, #40]	; 0x28
 80200de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	930d      	str	r3, [sp, #52]	; 0x34
 80200e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80200e6:	685c      	ldr	r4, [r3, #4]
 80200e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200ea:	3404      	adds	r4, #4
 80200ec:	43db      	mvns	r3, r3
 80200ee:	b2db      	uxtb	r3, r3
 80200f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80200f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	dc03      	bgt.n	8020100 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80200f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	f340 8255 	ble.w	80205aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8020100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020102:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020106:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802010a:	1e48      	subs	r0, r1, #1
 802010c:	1e55      	subs	r5, r2, #1
 802010e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020110:	2b00      	cmp	r3, #0
 8020112:	f340 80f9 	ble.w	8020308 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020116:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8020118:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802011a:	1436      	asrs	r6, r6, #16
 802011c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020120:	d406      	bmi.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020122:	4286      	cmp	r6, r0
 8020124:	da04      	bge.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020126:	2b00      	cmp	r3, #0
 8020128:	db02      	blt.n	8020130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802012a:	42ab      	cmp	r3, r5
 802012c:	f2c0 80ed 	blt.w	802030a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8020130:	3601      	adds	r6, #1
 8020132:	f100 80da 	bmi.w	80202ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020136:	42b1      	cmp	r1, r6
 8020138:	f2c0 80d7 	blt.w	80202ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802013c:	3301      	adds	r3, #1
 802013e:	f100 80d4 	bmi.w	80202ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020142:	429a      	cmp	r2, r3
 8020144:	f2c0 80d1 	blt.w	80202ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802014a:	9311      	str	r3, [sp, #68]	; 0x44
 802014c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802014e:	930c      	str	r3, [sp, #48]	; 0x30
 8020150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020152:	2b00      	cmp	r3, #0
 8020154:	f340 80fa 	ble.w	802034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8020158:	9826      	ldr	r0, [sp, #152]	; 0x98
 802015a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802015c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802015e:	68c6      	ldr	r6, [r0, #12]
 8020160:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020162:	141d      	asrs	r5, r3, #16
 8020164:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020168:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802016a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802016c:	1400      	asrs	r0, r0, #16
 802016e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020172:	6892      	ldr	r2, [r2, #8]
 8020174:	f100 813e 	bmi.w	80203f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020178:	1e57      	subs	r7, r2, #1
 802017a:	42b8      	cmp	r0, r7
 802017c:	f280 813a 	bge.w	80203f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020180:	2d00      	cmp	r5, #0
 8020182:	f2c0 8137 	blt.w	80203f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020186:	1e77      	subs	r7, r6, #1
 8020188:	42bd      	cmp	r5, r7
 802018a:	f280 8133 	bge.w	80203f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802018e:	b212      	sxth	r2, r2
 8020190:	fb05 0002 	mla	r0, r5, r2, r0
 8020194:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020196:	f815 a000 	ldrb.w	sl, [r5, r0]
 802019a:	182e      	adds	r6, r5, r0
 802019c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80201a0:	eb04 050a 	add.w	r5, r4, sl
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	f000 8117 	beq.w	80203d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80201aa:	f896 c001 	ldrb.w	ip, [r6, #1]
 80201ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80201b2:	44a4      	add	ip, r4
 80201b4:	2900      	cmp	r1, #0
 80201b6:	f000 8117 	beq.w	80203e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80201ba:	18b0      	adds	r0, r6, r2
 80201bc:	7840      	ldrb	r0, [r0, #1]
 80201be:	5cb2      	ldrb	r2, [r6, r2]
 80201c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80201c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201c8:	4422      	add	r2, r4
 80201ca:	4420      	add	r0, r4
 80201cc:	b29b      	uxth	r3, r3
 80201ce:	b289      	uxth	r1, r1
 80201d0:	fb03 f901 	mul.w	r9, r3, r1
 80201d4:	011b      	lsls	r3, r3, #4
 80201d6:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80201da:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80201de:	eba3 0309 	sub.w	r3, r3, r9
 80201e2:	b29b      	uxth	r3, r3
 80201e4:	435f      	muls	r7, r3
 80201e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80201ea:	b289      	uxth	r1, r1
 80201ec:	f895 b002 	ldrb.w	fp, [r5, #2]
 80201f0:	eba8 0801 	sub.w	r8, r8, r1
 80201f4:	fa1f f888 	uxth.w	r8, r8
 80201f8:	fb08 770b 	mla	r7, r8, fp, r7
 80201fc:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020200:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020202:	fb01 770b 	mla	r7, r1, fp, r7
 8020206:	f8b6 e000 	ldrh.w	lr, [r6]
 802020a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802020e:	9310      	str	r3, [sp, #64]	; 0x40
 8020210:	fb09 770b 	mla	r7, r9, fp, r7
 8020214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020216:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802021a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802021e:	fb1b fb03 	smulbb	fp, fp, r3
 8020222:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8020226:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802022a:	fb07 b706 	mla	r7, r7, r6, fp
 802022e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020230:	f895 b001 	ldrb.w	fp, [r5, #1]
 8020234:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020238:	f89c c000 	ldrb.w	ip, [ip]
 802023c:	435d      	muls	r5, r3
 802023e:	fb08 550b 	mla	r5, r8, fp, r5
 8020242:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020248:	fb01 550b 	mla	r5, r1, fp, r5
 802024c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020250:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8020254:	fb09 550b 	mla	r5, r9, fp, r5
 8020258:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802025c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020260:	fb1b fb03 	smulbb	fp, fp, r3
 8020264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020266:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802026a:	fb03 f30c 	mul.w	r3, r3, ip
 802026e:	fb08 330a 	mla	r3, r8, sl, r3
 8020272:	f892 c000 	ldrb.w	ip, [r2]
 8020276:	fa5f fe8e 	uxtb.w	lr, lr
 802027a:	fb01 330c 	mla	r3, r1, ip, r3
 802027e:	f890 c000 	ldrb.w	ip, [r0]
 8020282:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020286:	fb09 3c0c 	mla	ip, r9, ip, r3
 802028a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802028c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020290:	fb1e fe03 	smulbb	lr, lr, r3
 8020294:	fb05 b506 	mla	r5, r5, r6, fp
 8020298:	fb0c e606 	mla	r6, ip, r6, lr
 802029c:	b2bf      	uxth	r7, r7
 802029e:	1c7b      	adds	r3, r7, #1
 80202a0:	b2ad      	uxth	r5, r5
 80202a2:	b2b6      	uxth	r6, r6
 80202a4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80202a8:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80202ac:	f105 0b01 	add.w	fp, r5, #1
 80202b0:	1c77      	adds	r7, r6, #1
 80202b2:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80202b6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80202ba:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80202be:	096d      	lsrs	r5, r5, #5
 80202c0:	431f      	orrs	r7, r3
 80202c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80202c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80202c8:	433d      	orrs	r5, r7
 80202ca:	801d      	strh	r5, [r3, #0]
 80202cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80202ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80202d0:	3302      	adds	r3, #2
 80202d2:	930c      	str	r3, [sp, #48]	; 0x30
 80202d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80202d6:	4413      	add	r3, r2
 80202d8:	931f      	str	r3, [sp, #124]	; 0x7c
 80202da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80202dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202de:	4413      	add	r3, r2
 80202e0:	9320      	str	r3, [sp, #128]	; 0x80
 80202e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80202e4:	3b01      	subs	r3, #1
 80202e6:	9311      	str	r3, [sp, #68]	; 0x44
 80202e8:	e732      	b.n	8020150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80202ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80202ec:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80202ee:	4433      	add	r3, r6
 80202f0:	931f      	str	r3, [sp, #124]	; 0x7c
 80202f2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80202f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80202f6:	4433      	add	r3, r6
 80202f8:	9320      	str	r3, [sp, #128]	; 0x80
 80202fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202fc:	3b01      	subs	r3, #1
 80202fe:	9309      	str	r3, [sp, #36]	; 0x24
 8020300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020302:	3302      	adds	r3, #2
 8020304:	930a      	str	r3, [sp, #40]	; 0x28
 8020306:	e702      	b.n	802010e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020308:	d027      	beq.n	802035a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802030a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802030c:	9821      	ldr	r0, [sp, #132]	; 0x84
 802030e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8020310:	3b01      	subs	r3, #1
 8020312:	fb00 5003 	mla	r0, r0, r3, r5
 8020316:	1400      	asrs	r0, r0, #16
 8020318:	f53f af16 	bmi.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802031c:	3901      	subs	r1, #1
 802031e:	4288      	cmp	r0, r1
 8020320:	f6bf af12 	bge.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020324:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020326:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020328:	fb01 0303 	mla	r3, r1, r3, r0
 802032c:	141b      	asrs	r3, r3, #16
 802032e:	f53f af0b 	bmi.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020332:	3a01      	subs	r2, #1
 8020334:	4293      	cmp	r3, r2
 8020336:	f6bf af07 	bge.w	8020148 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802033a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802033c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8020340:	9311      	str	r3, [sp, #68]	; 0x44
 8020342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020344:	930c      	str	r3, [sp, #48]	; 0x30
 8020346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020348:	2b00      	cmp	r3, #0
 802034a:	dc70      	bgt.n	802042e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802034e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020350:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020354:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020358:	930a      	str	r3, [sp, #40]	; 0x28
 802035a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802035c:	2b00      	cmp	r3, #0
 802035e:	f340 8124 	ble.w	80205aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8020362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020366:	ee30 0a04 	vadd.f32	s0, s0, s8
 802036a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802036e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020372:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020376:	eef0 6a62 	vmov.f32	s13, s5
 802037a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802037e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020382:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020386:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802038a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802038e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8020392:	eef0 6a43 	vmov.f32	s13, s6
 8020396:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802039a:	ee12 2a90 	vmov	r2, s5
 802039e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ac:	ee13 2a10 	vmov	r2, s6
 80203b0:	9321      	str	r3, [sp, #132]	; 0x84
 80203b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203b4:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80203b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80203bc:	9322      	str	r3, [sp, #136]	; 0x88
 80203be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80203c2:	3b01      	subs	r3, #1
 80203c4:	930e      	str	r3, [sp, #56]	; 0x38
 80203c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203c8:	bf08      	it	eq
 80203ca:	4613      	moveq	r3, r2
 80203cc:	eeb0 3a67 	vmov.f32	s6, s15
 80203d0:	9309      	str	r3, [sp, #36]	; 0x24
 80203d2:	eef0 2a47 	vmov.f32	s5, s14
 80203d6:	e68c      	b.n	80200f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80203d8:	b149      	cbz	r1, 80203ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80203da:	4628      	mov	r0, r5
 80203dc:	5cb2      	ldrb	r2, [r6, r2]
 80203de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203e2:	4422      	add	r2, r4
 80203e4:	46ac      	mov	ip, r5
 80203e6:	e6f1      	b.n	80201cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80203e8:	4628      	mov	r0, r5
 80203ea:	462a      	mov	r2, r5
 80203ec:	e6ee      	b.n	80201cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80203ee:	4628      	mov	r0, r5
 80203f0:	462a      	mov	r2, r5
 80203f2:	e7f7      	b.n	80203e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80203f4:	1c47      	adds	r7, r0, #1
 80203f6:	f53f af69 	bmi.w	80202cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80203fa:	42ba      	cmp	r2, r7
 80203fc:	f6ff af66 	blt.w	80202cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020400:	1c6f      	adds	r7, r5, #1
 8020402:	f53f af63 	bmi.w	80202cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8020406:	42be      	cmp	r6, r7
 8020408:	f6ff af60 	blt.w	80202cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802040c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802040e:	b236      	sxth	r6, r6
 8020410:	b212      	sxth	r2, r2
 8020412:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8020416:	e9cd 5303 	strd	r5, r3, [sp, #12]
 802041a:	9002      	str	r0, [sp, #8]
 802041c:	9200      	str	r2, [sp, #0]
 802041e:	9601      	str	r6, [sp, #4]
 8020420:	4623      	mov	r3, r4
 8020422:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8020426:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020428:	f7ff fd59 	bl	801fede <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802042c:	e74e      	b.n	80202cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802042e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020430:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020432:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020436:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020438:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802043a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802043e:	142d      	asrs	r5, r5, #16
 8020440:	1400      	asrs	r0, r0, #16
 8020442:	fb02 5000 	mla	r0, r2, r0, r5
 8020446:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020448:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802044a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802044e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020452:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020456:	182e      	adds	r6, r5, r0
 8020458:	eb04 0509 	add.w	r5, r4, r9
 802045c:	2b00      	cmp	r3, #0
 802045e:	f000 8096 	beq.w	802058e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8020462:	7877      	ldrb	r7, [r6, #1]
 8020464:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020468:	4427      	add	r7, r4
 802046a:	2900      	cmp	r1, #0
 802046c:	f000 8097 	beq.w	802059e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8020470:	18b0      	adds	r0, r6, r2
 8020472:	7840      	ldrb	r0, [r0, #1]
 8020474:	5cb2      	ldrb	r2, [r6, r2]
 8020476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802047a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802047e:	4422      	add	r2, r4
 8020480:	4420      	add	r0, r4
 8020482:	b29b      	uxth	r3, r3
 8020484:	b289      	uxth	r1, r1
 8020486:	fb03 f801 	mul.w	r8, r3, r1
 802048a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802048c:	011b      	lsls	r3, r3, #4
 802048e:	f8b6 c000 	ldrh.w	ip, [r6]
 8020492:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020496:	78be      	ldrb	r6, [r7, #2]
 8020498:	eba3 0308 	sub.w	r3, r3, r8
 802049c:	b29b      	uxth	r3, r3
 802049e:	435e      	muls	r6, r3
 80204a0:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80204a4:	b289      	uxth	r1, r1
 80204a6:	f895 b002 	ldrb.w	fp, [r5, #2]
 80204aa:	ebae 0e01 	sub.w	lr, lr, r1
 80204ae:	fa1f fe8e 	uxth.w	lr, lr
 80204b2:	fb0e 660b 	mla	r6, lr, fp, r6
 80204b6:	f892 b002 	ldrb.w	fp, [r2, #2]
 80204ba:	9310      	str	r3, [sp, #64]	; 0x40
 80204bc:	fb01 660b 	mla	r6, r1, fp, r6
 80204c0:	f890 b002 	ldrb.w	fp, [r0, #2]
 80204c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204c6:	fb08 660b 	mla	r6, r8, fp, r6
 80204ca:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80204ce:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80204d2:	fb1b fb03 	smulbb	fp, fp, r3
 80204d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80204da:	fb06 b60a 	mla	r6, r6, sl, fp
 80204de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80204e0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80204e4:	787d      	ldrb	r5, [r7, #1]
 80204e6:	783f      	ldrb	r7, [r7, #0]
 80204e8:	435d      	muls	r5, r3
 80204ea:	fb0e 550b 	mla	r5, lr, fp, r5
 80204ee:	f892 b001 	ldrb.w	fp, [r2, #1]
 80204f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204f4:	fb01 550b 	mla	r5, r1, fp, r5
 80204f8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80204fc:	f814 9009 	ldrb.w	r9, [r4, r9]
 8020500:	fb08 550b 	mla	r5, r8, fp, r5
 8020504:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8020508:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802050c:	fb1b fb03 	smulbb	fp, fp, r3
 8020510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020512:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020516:	437b      	muls	r3, r7
 8020518:	fb0e 3309 	mla	r3, lr, r9, r3
 802051c:	7817      	ldrb	r7, [r2, #0]
 802051e:	fa5f fc8c 	uxtb.w	ip, ip
 8020522:	fb01 3307 	mla	r3, r1, r7, r3
 8020526:	7807      	ldrb	r7, [r0, #0]
 8020528:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802052c:	fb08 3707 	mla	r7, r8, r7, r3
 8020530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020532:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020536:	fb1c fc03 	smulbb	ip, ip, r3
 802053a:	fb05 b50a 	mla	r5, r5, sl, fp
 802053e:	fb07 c70a 	mla	r7, r7, sl, ip
 8020542:	b2b6      	uxth	r6, r6
 8020544:	b2ad      	uxth	r5, r5
 8020546:	b2bf      	uxth	r7, r7
 8020548:	1c73      	adds	r3, r6, #1
 802054a:	1c7a      	adds	r2, r7, #1
 802054c:	f105 0b01 	add.w	fp, r5, #1
 8020550:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020554:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8020558:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802055c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020560:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020564:	096d      	lsrs	r5, r5, #5
 8020566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020568:	4316      	orrs	r6, r2
 802056a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802056e:	432e      	orrs	r6, r5
 8020570:	f823 6b02 	strh.w	r6, [r3], #2
 8020574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020576:	930c      	str	r3, [sp, #48]	; 0x30
 8020578:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802057a:	4413      	add	r3, r2
 802057c:	931f      	str	r3, [sp, #124]	; 0x7c
 802057e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020580:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020582:	4413      	add	r3, r2
 8020584:	9320      	str	r3, [sp, #128]	; 0x80
 8020586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020588:	3b01      	subs	r3, #1
 802058a:	9311      	str	r3, [sp, #68]	; 0x44
 802058c:	e6db      	b.n	8020346 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802058e:	b149      	cbz	r1, 80205a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8020590:	4628      	mov	r0, r5
 8020592:	5cb2      	ldrb	r2, [r6, r2]
 8020594:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020598:	4422      	add	r2, r4
 802059a:	462f      	mov	r7, r5
 802059c:	e771      	b.n	8020482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802059e:	4628      	mov	r0, r5
 80205a0:	462a      	mov	r2, r5
 80205a2:	e76e      	b.n	8020482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80205a4:	4628      	mov	r0, r5
 80205a6:	462a      	mov	r2, r5
 80205a8:	e7f7      	b.n	802059a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80205aa:	b015      	add	sp, #84	; 0x54
 80205ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80205b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b4:	880f      	ldrh	r7, [r1, #0]
 80205b6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80205ba:	023c      	lsls	r4, r7, #8
 80205bc:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80205c0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80205c4:	fb05 ca0e 	mla	sl, r5, lr, ip
 80205c8:	017c      	lsls	r4, r7, #5
 80205ca:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80205ce:	00ff      	lsls	r7, r7, #3
 80205d0:	ea4b 0404 	orr.w	r4, fp, r4
 80205d4:	b2ff      	uxtb	r7, r7
 80205d6:	4327      	orrs	r7, r4
 80205d8:	2d00      	cmp	r5, #0
 80205da:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80205de:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80205e2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80205e6:	eb02 080a 	add.w	r8, r2, sl
 80205ea:	9701      	str	r7, [sp, #4]
 80205ec:	db7e      	blt.n	80206ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80205ee:	45a9      	cmp	r9, r5
 80205f0:	dd7c      	ble.n	80206ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80205f2:	f1bc 0f00 	cmp.w	ip, #0
 80205f6:	db77      	blt.n	80206e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80205f8:	45e6      	cmp	lr, ip
 80205fa:	dd75      	ble.n	80206e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80205fc:	f812 700a 	ldrb.w	r7, [r2, sl]
 8020600:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020604:	441f      	add	r7, r3
 8020606:	f11c 0201 	adds.w	r2, ip, #1
 802060a:	d472      	bmi.n	80206f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802060c:	4596      	cmp	lr, r2
 802060e:	dd70      	ble.n	80206f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020610:	2800      	cmp	r0, #0
 8020612:	d06e      	beq.n	80206f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8020614:	f898 4001 	ldrb.w	r4, [r8, #1]
 8020618:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802061c:	441c      	add	r4, r3
 802061e:	3501      	adds	r5, #1
 8020620:	d46b      	bmi.n	80206fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020622:	45a9      	cmp	r9, r5
 8020624:	dd69      	ble.n	80206fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8020626:	2e00      	cmp	r6, #0
 8020628:	d067      	beq.n	80206fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802062a:	f1bc 0f00 	cmp.w	ip, #0
 802062e:	db62      	blt.n	80206f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020630:	45e6      	cmp	lr, ip
 8020632:	dd60      	ble.n	80206f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8020634:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802063c:	441d      	add	r5, r3
 802063e:	f11c 0201 	adds.w	r2, ip, #1
 8020642:	d45d      	bmi.n	8020700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020644:	4596      	cmp	lr, r2
 8020646:	dd5b      	ble.n	8020700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8020648:	2800      	cmp	r0, #0
 802064a:	d059      	beq.n	8020700 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 802064c:	44c6      	add	lr, r8
 802064e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020652:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020656:	4413      	add	r3, r2
 8020658:	b280      	uxth	r0, r0
 802065a:	b2b2      	uxth	r2, r6
 802065c:	fb00 f602 	mul.w	r6, r0, r2
 8020660:	0100      	lsls	r0, r0, #4
 8020662:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8020666:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 802066a:	1b80      	subs	r0, r0, r6
 802066c:	fa1f fc82 	uxth.w	ip, r2
 8020670:	b282      	uxth	r2, r0
 8020672:	78a0      	ldrb	r0, [r4, #2]
 8020674:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020678:	4350      	muls	r0, r2
 802067a:	eba8 080c 	sub.w	r8, r8, ip
 802067e:	fa1f f888 	uxth.w	r8, r8
 8020682:	fb08 0e0e 	mla	lr, r8, lr, r0
 8020686:	78a8      	ldrb	r0, [r5, #2]
 8020688:	f897 9000 	ldrb.w	r9, [r7]
 802068c:	fb0c e000 	mla	r0, ip, r0, lr
 8020690:	f893 e002 	ldrb.w	lr, [r3, #2]
 8020694:	787f      	ldrb	r7, [r7, #1]
 8020696:	fb06 0e0e 	mla	lr, r6, lr, r0
 802069a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802069e:	f894 e000 	ldrb.w	lr, [r4]
 80206a2:	fb02 fe0e 	mul.w	lr, r2, lr
 80206a6:	fb08 e909 	mla	r9, r8, r9, lr
 80206aa:	f895 e000 	ldrb.w	lr, [r5]
 80206ae:	fb0c 990e 	mla	r9, ip, lr, r9
 80206b2:	f893 e000 	ldrb.w	lr, [r3]
 80206b6:	785b      	ldrb	r3, [r3, #1]
 80206b8:	fb06 9e0e 	mla	lr, r6, lr, r9
 80206bc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80206c0:	ea4e 0e00 	orr.w	lr, lr, r0
 80206c4:	7860      	ldrb	r0, [r4, #1]
 80206c6:	4350      	muls	r0, r2
 80206c8:	fb08 0007 	mla	r0, r8, r7, r0
 80206cc:	786a      	ldrb	r2, [r5, #1]
 80206ce:	fb0c 0202 	mla	r2, ip, r2, r0
 80206d2:	fb06 2303 	mla	r3, r6, r3, r2
 80206d6:	095b      	lsrs	r3, r3, #5
 80206d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206dc:	ea4e 0303 	orr.w	r3, lr, r3
 80206e0:	800b      	strh	r3, [r1, #0]
 80206e2:	b003      	add	sp, #12
 80206e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206e8:	af01      	add	r7, sp, #4
 80206ea:	e78c      	b.n	8020606 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80206ec:	ac01      	add	r4, sp, #4
 80206ee:	4627      	mov	r7, r4
 80206f0:	e795      	b.n	802061e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80206f2:	ac01      	add	r4, sp, #4
 80206f4:	e793      	b.n	802061e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80206f6:	ad01      	add	r5, sp, #4
 80206f8:	e7a1      	b.n	802063e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80206fa:	ab01      	add	r3, sp, #4
 80206fc:	461d      	mov	r5, r3
 80206fe:	e7ab      	b.n	8020658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8020700:	ab01      	add	r3, sp, #4
 8020702:	e7a9      	b.n	8020658 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08020704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020708:	b08f      	sub	sp, #60	; 0x3c
 802070a:	920c      	str	r2, [sp, #48]	; 0x30
 802070c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802070e:	900d      	str	r0, [sp, #52]	; 0x34
 8020710:	6850      	ldr	r0, [r2, #4]
 8020712:	910a      	str	r1, [sp, #40]	; 0x28
 8020714:	9306      	str	r3, [sp, #24]
 8020716:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802071a:	fb00 1303 	mla	r3, r0, r3, r1
 802071e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8020722:	6812      	ldr	r2, [r2, #0]
 8020724:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020728:	9307      	str	r3, [sp, #28]
 802072a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	9308      	str	r3, [sp, #32]
 8020730:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020732:	685c      	ldr	r4, [r3, #4]
 8020734:	3404      	adds	r4, #4
 8020736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020738:	2b00      	cmp	r3, #0
 802073a:	dc03      	bgt.n	8020744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802073c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802073e:	2b00      	cmp	r3, #0
 8020740:	f340 81d6 	ble.w	8020af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8020744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020746:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802074a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802074e:	1e48      	subs	r0, r1, #1
 8020750:	1e56      	subs	r6, r2, #1
 8020752:	9b06      	ldr	r3, [sp, #24]
 8020754:	2b00      	cmp	r3, #0
 8020756:	f340 80b7 	ble.w	80208c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802075a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802075e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020762:	d406      	bmi.n	8020772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020764:	4287      	cmp	r7, r0
 8020766:	da04      	bge.n	8020772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020768:	2b00      	cmp	r3, #0
 802076a:	db02      	blt.n	8020772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802076c:	42b3      	cmp	r3, r6
 802076e:	f2c0 80ac 	blt.w	80208ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8020772:	3701      	adds	r7, #1
 8020774:	f100 809d 	bmi.w	80208b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020778:	42b9      	cmp	r1, r7
 802077a:	f2c0 809a 	blt.w	80208b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802077e:	3301      	adds	r3, #1
 8020780:	f100 8097 	bmi.w	80208b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020784:	429a      	cmp	r2, r3
 8020786:	f2c0 8094 	blt.w	80208b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802078a:	9b06      	ldr	r3, [sp, #24]
 802078c:	930b      	str	r3, [sp, #44]	; 0x2c
 802078e:	9b07      	ldr	r3, [sp, #28]
 8020790:	9309      	str	r3, [sp, #36]	; 0x24
 8020792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020794:	2b00      	cmp	r3, #0
 8020796:	f340 80b5 	ble.w	8020904 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802079a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802079c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802079e:	68c7      	ldr	r7, [r0, #12]
 80207a0:	ea5f 402b 	movs.w	r0, fp, asr #16
 80207a4:	ea4f 4625 	mov.w	r6, r5, asr #16
 80207a8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80207ac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80207b0:	6892      	ldr	r2, [r2, #8]
 80207b2:	f100 80fb 	bmi.w	80209ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80207b6:	f102 3cff 	add.w	ip, r2, #4294967295
 80207ba:	4560      	cmp	r0, ip
 80207bc:	f280 80f6 	bge.w	80209ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80207c0:	2e00      	cmp	r6, #0
 80207c2:	f2c0 80f3 	blt.w	80209ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80207c6:	f107 3cff 	add.w	ip, r7, #4294967295
 80207ca:	4566      	cmp	r6, ip
 80207cc:	f280 80ee 	bge.w	80209ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80207d0:	b212      	sxth	r2, r2
 80207d2:	fb06 0002 	mla	r0, r6, r2, r0
 80207d6:	9e08      	ldr	r6, [sp, #32]
 80207d8:	1837      	adds	r7, r6, r0
 80207da:	5c30      	ldrb	r0, [r6, r0]
 80207dc:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80207e0:	eb04 0c08 	add.w	ip, r4, r8
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	f000 80d3 	beq.w	8020990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80207ea:	787e      	ldrb	r6, [r7, #1]
 80207ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80207f0:	4426      	add	r6, r4
 80207f2:	2900      	cmp	r1, #0
 80207f4:	f000 80d4 	beq.w	80209a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80207f8:	18b8      	adds	r0, r7, r2
 80207fa:	7840      	ldrb	r0, [r0, #1]
 80207fc:	5cba      	ldrb	r2, [r7, r2]
 80207fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020802:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020806:	4422      	add	r2, r4
 8020808:	4420      	add	r0, r4
 802080a:	b29b      	uxth	r3, r3
 802080c:	b289      	uxth	r1, r1
 802080e:	fb03 f901 	mul.w	r9, r3, r1
 8020812:	011b      	lsls	r3, r3, #4
 8020814:	78b7      	ldrb	r7, [r6, #2]
 8020816:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802081a:	eba3 0309 	sub.w	r3, r3, r9
 802081e:	b29b      	uxth	r3, r3
 8020820:	435f      	muls	r7, r3
 8020822:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020826:	b289      	uxth	r1, r1
 8020828:	f89c a002 	ldrb.w	sl, [ip, #2]
 802082c:	ebae 0e01 	sub.w	lr, lr, r1
 8020830:	fa1f fe8e 	uxth.w	lr, lr
 8020834:	fb0e 770a 	mla	r7, lr, sl, r7
 8020838:	f892 a002 	ldrb.w	sl, [r2, #2]
 802083c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020840:	fb01 770a 	mla	r7, r1, sl, r7
 8020844:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020848:	fb09 7a0a 	mla	sl, r9, sl, r7
 802084c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020850:	f896 8000 	ldrb.w	r8, [r6]
 8020854:	7876      	ldrb	r6, [r6, #1]
 8020856:	fb03 f808 	mul.w	r8, r3, r8
 802085a:	fb0e 8807 	mla	r8, lr, r7, r8
 802085e:	7817      	ldrb	r7, [r2, #0]
 8020860:	4373      	muls	r3, r6
 8020862:	fb01 8807 	mla	r8, r1, r7, r8
 8020866:	7807      	ldrb	r7, [r0, #0]
 8020868:	fb0e 330c 	mla	r3, lr, ip, r3
 802086c:	fb09 8707 	mla	r7, r9, r7, r8
 8020870:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020874:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020878:	ea47 070a 	orr.w	r7, r7, sl
 802087c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020880:	fb01 310a 	mla	r1, r1, sl, r3
 8020884:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802088a:	fb09 1a0a 	mla	sl, r9, sl, r1
 802088e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020892:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020896:	ea47 070a 	orr.w	r7, r7, sl
 802089a:	801f      	strh	r7, [r3, #0]
 802089c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802089e:	3302      	adds	r3, #2
 80208a0:	9309      	str	r3, [sp, #36]	; 0x24
 80208a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80208a4:	449b      	add	fp, r3
 80208a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80208a8:	441d      	add	r5, r3
 80208aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208ac:	3b01      	subs	r3, #1
 80208ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80208b0:	e76f      	b.n	8020792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80208b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80208b4:	449b      	add	fp, r3
 80208b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80208b8:	441d      	add	r5, r3
 80208ba:	9b06      	ldr	r3, [sp, #24]
 80208bc:	3b01      	subs	r3, #1
 80208be:	9306      	str	r3, [sp, #24]
 80208c0:	9b07      	ldr	r3, [sp, #28]
 80208c2:	3302      	adds	r3, #2
 80208c4:	9307      	str	r3, [sp, #28]
 80208c6:	e744      	b.n	8020752 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80208c8:	d023      	beq.n	8020912 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80208ca:	9b06      	ldr	r3, [sp, #24]
 80208cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80208ce:	3b01      	subs	r3, #1
 80208d0:	fb00 b003 	mla	r0, r0, r3, fp
 80208d4:	1400      	asrs	r0, r0, #16
 80208d6:	f53f af58 	bmi.w	802078a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80208da:	3901      	subs	r1, #1
 80208dc:	4288      	cmp	r0, r1
 80208de:	f6bf af54 	bge.w	802078a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80208e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80208e4:	fb01 5303 	mla	r3, r1, r3, r5
 80208e8:	141b      	asrs	r3, r3, #16
 80208ea:	f53f af4e 	bmi.w	802078a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80208ee:	3a01      	subs	r2, #1
 80208f0:	4293      	cmp	r3, r2
 80208f2:	f6bf af4a 	bge.w	802078a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80208f6:	9b06      	ldr	r3, [sp, #24]
 80208f8:	9309      	str	r3, [sp, #36]	; 0x24
 80208fa:	9b07      	ldr	r3, [sp, #28]
 80208fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80208fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020900:	2b00      	cmp	r3, #0
 8020902:	dc70      	bgt.n	80209e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020904:	9b06      	ldr	r3, [sp, #24]
 8020906:	9a07      	ldr	r2, [sp, #28]
 8020908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802090c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020910:	9307      	str	r3, [sp, #28]
 8020912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020914:	2b00      	cmp	r3, #0
 8020916:	f340 80eb 	ble.w	8020af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802091a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802091e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020922:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020926:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802092a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802092e:	eef0 6a62 	vmov.f32	s13, s5
 8020932:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020936:	ee77 2a62 	vsub.f32	s5, s14, s5
 802093a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802093e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020942:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020946:	ee16 ba90 	vmov	fp, s13
 802094a:	eef0 6a43 	vmov.f32	s13, s6
 802094e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020952:	ee12 2a90 	vmov	r2, s5
 8020956:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802095a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802095c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020960:	fb92 f3f3 	sdiv	r3, r2, r3
 8020964:	ee13 2a10 	vmov	r2, s6
 8020968:	931b      	str	r3, [sp, #108]	; 0x6c
 802096a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802096c:	ee16 5a90 	vmov	r5, s13
 8020970:	fb92 f3f3 	sdiv	r3, r2, r3
 8020974:	931c      	str	r3, [sp, #112]	; 0x70
 8020976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802097a:	3b01      	subs	r3, #1
 802097c:	930a      	str	r3, [sp, #40]	; 0x28
 802097e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020980:	bf08      	it	eq
 8020982:	4613      	moveq	r3, r2
 8020984:	eeb0 3a67 	vmov.f32	s6, s15
 8020988:	9306      	str	r3, [sp, #24]
 802098a:	eef0 2a47 	vmov.f32	s5, s14
 802098e:	e6d2      	b.n	8020736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020990:	b149      	cbz	r1, 80209a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020992:	4660      	mov	r0, ip
 8020994:	5cba      	ldrb	r2, [r7, r2]
 8020996:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802099a:	4422      	add	r2, r4
 802099c:	4666      	mov	r6, ip
 802099e:	e734      	b.n	802080a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80209a0:	4660      	mov	r0, ip
 80209a2:	4662      	mov	r2, ip
 80209a4:	e731      	b.n	802080a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80209a6:	4660      	mov	r0, ip
 80209a8:	4662      	mov	r2, ip
 80209aa:	e7f7      	b.n	802099c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80209ac:	f110 0c01 	adds.w	ip, r0, #1
 80209b0:	f53f af74 	bmi.w	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80209b4:	4562      	cmp	r2, ip
 80209b6:	f6ff af71 	blt.w	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80209ba:	f116 0c01 	adds.w	ip, r6, #1
 80209be:	f53f af6d 	bmi.w	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80209c2:	4567      	cmp	r7, ip
 80209c4:	f6ff af6a 	blt.w	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80209c8:	b23f      	sxth	r7, r7
 80209ca:	b212      	sxth	r2, r2
 80209cc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80209d0:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80209d4:	9200      	str	r2, [sp, #0]
 80209d6:	9701      	str	r7, [sp, #4]
 80209d8:	4623      	mov	r3, r4
 80209da:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80209de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80209e0:	f7ff fde6 	bl	80205b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80209e4:	e75a      	b.n	802089c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80209e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80209e8:	ea4f 462b 	mov.w	r6, fp, asr #16
 80209ec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80209f0:	1428      	asrs	r0, r5, #16
 80209f2:	fb02 6000 	mla	r0, r2, r0, r6
 80209f6:	9e08      	ldr	r6, [sp, #32]
 80209f8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80209fc:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020a00:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020a04:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020a08:	1837      	adds	r7, r6, r0
 8020a0a:	eb04 0c08 	add.w	ip, r4, r8
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d060      	beq.n	8020ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8020a12:	787e      	ldrb	r6, [r7, #1]
 8020a14:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020a18:	4426      	add	r6, r4
 8020a1a:	2900      	cmp	r1, #0
 8020a1c:	d062      	beq.n	8020ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8020a1e:	18b8      	adds	r0, r7, r2
 8020a20:	7840      	ldrb	r0, [r0, #1]
 8020a22:	5cba      	ldrb	r2, [r7, r2]
 8020a24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a2c:	4422      	add	r2, r4
 8020a2e:	4420      	add	r0, r4
 8020a30:	b29b      	uxth	r3, r3
 8020a32:	b289      	uxth	r1, r1
 8020a34:	fb03 f901 	mul.w	r9, r3, r1
 8020a38:	011b      	lsls	r3, r3, #4
 8020a3a:	78b7      	ldrb	r7, [r6, #2]
 8020a3c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020a40:	eba3 0309 	sub.w	r3, r3, r9
 8020a44:	b29b      	uxth	r3, r3
 8020a46:	435f      	muls	r7, r3
 8020a48:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020a4c:	b289      	uxth	r1, r1
 8020a4e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020a52:	ebae 0e01 	sub.w	lr, lr, r1
 8020a56:	fa1f fe8e 	uxth.w	lr, lr
 8020a5a:	fb0e 770a 	mla	r7, lr, sl, r7
 8020a5e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020a62:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020a66:	fb01 770a 	mla	r7, r1, sl, r7
 8020a6a:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020a6e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020a72:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020a76:	f896 8000 	ldrb.w	r8, [r6]
 8020a7a:	7876      	ldrb	r6, [r6, #1]
 8020a7c:	fb03 f808 	mul.w	r8, r3, r8
 8020a80:	fb0e 8807 	mla	r8, lr, r7, r8
 8020a84:	7817      	ldrb	r7, [r2, #0]
 8020a86:	4373      	muls	r3, r6
 8020a88:	fb01 8807 	mla	r8, r1, r7, r8
 8020a8c:	7807      	ldrb	r7, [r0, #0]
 8020a8e:	fb0e 330c 	mla	r3, lr, ip, r3
 8020a92:	fb09 8707 	mla	r7, r9, r7, r8
 8020a96:	7856      	ldrb	r6, [r2, #1]
 8020a98:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020a9c:	fb01 3306 	mla	r3, r1, r6, r3
 8020aa0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020aa4:	ea47 070a 	orr.w	r7, r7, sl
 8020aa8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020aac:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020ab0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ab6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020aba:	ea47 070a 	orr.w	r7, r7, sl
 8020abe:	f823 7b02 	strh.w	r7, [r3], #2
 8020ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020ac6:	449b      	add	fp, r3
 8020ac8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020aca:	441d      	add	r5, r3
 8020acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ace:	3b01      	subs	r3, #1
 8020ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8020ad2:	e714      	b.n	80208fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020ad4:	b149      	cbz	r1, 8020aea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020ad6:	4660      	mov	r0, ip
 8020ad8:	5cba      	ldrb	r2, [r7, r2]
 8020ada:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ade:	4422      	add	r2, r4
 8020ae0:	4666      	mov	r6, ip
 8020ae2:	e7a5      	b.n	8020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020ae4:	4660      	mov	r0, ip
 8020ae6:	4662      	mov	r2, ip
 8020ae8:	e7a2      	b.n	8020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020aea:	4660      	mov	r0, ip
 8020aec:	4662      	mov	r2, ip
 8020aee:	e7f7      	b.n	8020ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8020af0:	b00f      	add	sp, #60	; 0x3c
 8020af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020af6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8020af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020afa:	b085      	sub	sp, #20
 8020afc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020b00:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8020b04:	9102      	str	r1, [sp, #8]
 8020b06:	fb04 710c 	mla	r1, r4, ip, r7
 8020b0a:	2c00      	cmp	r4, #0
 8020b0c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020b10:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8020b14:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020b18:	eb02 0e01 	add.w	lr, r2, r1
 8020b1c:	f2c0 8122 	blt.w	8020d64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020b20:	45a0      	cmp	r8, r4
 8020b22:	f340 811f 	ble.w	8020d64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8020b26:	2f00      	cmp	r7, #0
 8020b28:	f2c0 811a 	blt.w	8020d60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020b2c:	45bc      	cmp	ip, r7
 8020b2e:	f340 8117 	ble.w	8020d60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8020b32:	5c52      	ldrb	r2, [r2, r1]
 8020b34:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020b38:	1c7a      	adds	r2, r7, #1
 8020b3a:	f100 8116 	bmi.w	8020d6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020b3e:	4594      	cmp	ip, r2
 8020b40:	f340 8113 	ble.w	8020d6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8020b44:	2e00      	cmp	r6, #0
 8020b46:	f000 8112 	beq.w	8020d6e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8020b4a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020b4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020b52:	3401      	adds	r4, #1
 8020b54:	f100 810f 	bmi.w	8020d76 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020b58:	45a0      	cmp	r8, r4
 8020b5a:	f340 810c 	ble.w	8020d76 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8020b5e:	2800      	cmp	r0, #0
 8020b60:	f000 810c 	beq.w	8020d7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8020b64:	2f00      	cmp	r7, #0
 8020b66:	f2c0 8104 	blt.w	8020d72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020b6a:	45bc      	cmp	ip, r7
 8020b6c:	f340 8101 	ble.w	8020d72 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8020b70:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8020b74:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020b78:	3701      	adds	r7, #1
 8020b7a:	f100 8102 	bmi.w	8020d82 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8020b7e:	45bc      	cmp	ip, r7
 8020b80:	f340 80ff 	ble.w	8020d82 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8020b84:	2e00      	cmp	r6, #0
 8020b86:	f000 80fe 	beq.w	8020d86 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8020b8a:	44f4      	add	ip, lr
 8020b8c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020b90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020b94:	b2b6      	uxth	r6, r6
 8020b96:	b280      	uxth	r0, r0
 8020b98:	fb00 fe06 	mul.w	lr, r0, r6
 8020b9c:	0136      	lsls	r6, r6, #4
 8020b9e:	eba6 070e 	sub.w	r7, r6, lr
 8020ba2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020ba6:	b2bf      	uxth	r7, r7
 8020ba8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020bac:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020bb0:	fb0a f607 	mul.w	r6, sl, r7
 8020bb4:	b280      	uxth	r0, r0
 8020bb6:	1a1b      	subs	r3, r3, r0
 8020bb8:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020bbc:	b29b      	uxth	r3, r3
 8020bbe:	fb0b 6603 	mla	r6, fp, r3, r6
 8020bc2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020bc6:	fb00 6609 	mla	r6, r0, r9, r6
 8020bca:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020bce:	fb0e 6608 	mla	r6, lr, r8, r6
 8020bd2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020bd6:	9600      	str	r6, [sp, #0]
 8020bd8:	2e00      	cmp	r6, #0
 8020bda:	f000 80be 	beq.w	8020d5a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8020bde:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020be2:	fb0b fc0c 	mul.w	ip, fp, ip
 8020be6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020bea:	fb0b f505 	mul.w	r5, fp, r5
 8020bee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020bf2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020bf6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020bfa:	44dc      	add	ip, fp
 8020bfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c00:	9501      	str	r5, [sp, #4]
 8020c02:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020c06:	9503      	str	r5, [sp, #12]
 8020c08:	9d01      	ldr	r5, [sp, #4]
 8020c0a:	9e02      	ldr	r6, [sp, #8]
 8020c0c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020c10:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020c14:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020c18:	fb0a fc0c 	mul.w	ip, sl, ip
 8020c1c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8020c20:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020c24:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c2c:	4465      	add	r5, ip
 8020c2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020c32:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020c36:	fb09 fc0c 	mul.w	ip, r9, ip
 8020c3a:	fb09 f904 	mul.w	r9, r9, r4
 8020c3e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020c42:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020c46:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020c4a:	fb08 f404 	mul.w	r4, r8, r4
 8020c4e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c52:	fb08 f802 	mul.w	r8, r8, r2
 8020c56:	0a2d      	lsrs	r5, r5, #8
 8020c58:	0a22      	lsrs	r2, r4, #8
 8020c5a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020c5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020c62:	437d      	muls	r5, r7
 8020c64:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020c68:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020c6c:	4414      	add	r4, r2
 8020c6e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020c72:	fb0a fa01 	mul.w	sl, sl, r1
 8020c76:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020c7a:	9a03      	ldr	r2, [sp, #12]
 8020c7c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8020c80:	fb02 5503 	mla	r5, r2, r3, r5
 8020c84:	0a24      	lsrs	r4, r4, #8
 8020c86:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020c8a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020c8e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020c92:	fb04 540e 	mla	r4, r4, lr, r5
 8020c96:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020c9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020c9e:	4461      	add	r1, ip
 8020ca0:	0a09      	lsrs	r1, r1, #8
 8020ca2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020ca6:	fb01 4100 	mla	r1, r1, r0, r4
 8020caa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cb2:	fb07 f70a 	mul.w	r7, r7, sl
 8020cb6:	0a09      	lsrs	r1, r1, #8
 8020cb8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8020cbc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8020cc0:	fb03 7101 	mla	r1, r3, r1, r7
 8020cc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020cc8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020ccc:	fb0e 1e08 	mla	lr, lr, r8, r1
 8020cd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020cd4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8020cd8:	fb00 e101 	mla	r1, r0, r1, lr
 8020cdc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020ce0:	9a00      	ldr	r2, [sp, #0]
 8020ce2:	b287      	uxth	r7, r0
 8020ce4:	437a      	muls	r2, r7
 8020ce6:	1c53      	adds	r3, r2, #1
 8020ce8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020cec:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8020cf0:	0a09      	lsrs	r1, r1, #8
 8020cf2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020cf6:	4321      	orrs	r1, r4
 8020cf8:	0c0a      	lsrs	r2, r1, #16
 8020cfa:	8836      	ldrh	r6, [r6, #0]
 8020cfc:	fb12 f207 	smulbb	r2, r2, r7
 8020d00:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8020d04:	b2c8      	uxtb	r0, r1
 8020d06:	1235      	asrs	r5, r6, #8
 8020d08:	fb14 f407 	smulbb	r4, r4, r7
 8020d0c:	fb10 f007 	smulbb	r0, r0, r7
 8020d10:	b2db      	uxtb	r3, r3
 8020d12:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020d16:	fb05 2503 	mla	r5, r5, r3, r2
 8020d1a:	10f2      	asrs	r2, r6, #3
 8020d1c:	00f6      	lsls	r6, r6, #3
 8020d1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020d22:	b2f6      	uxtb	r6, r6
 8020d24:	fb02 4203 	mla	r2, r2, r3, r4
 8020d28:	fb06 0303 	mla	r3, r6, r3, r0
 8020d2c:	b2ad      	uxth	r5, r5
 8020d2e:	b299      	uxth	r1, r3
 8020d30:	b294      	uxth	r4, r2
 8020d32:	1c6b      	adds	r3, r5, #1
 8020d34:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020d38:	1c62      	adds	r2, r4, #1
 8020d3a:	1c4b      	adds	r3, r1, #1
 8020d3c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020d40:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020d44:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020d48:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020d4c:	0952      	lsrs	r2, r2, #5
 8020d4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d52:	432b      	orrs	r3, r5
 8020d54:	4313      	orrs	r3, r2
 8020d56:	9a02      	ldr	r2, [sp, #8]
 8020d58:	8013      	strh	r3, [r2, #0]
 8020d5a:	b005      	add	sp, #20
 8020d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d60:	2500      	movs	r5, #0
 8020d62:	e6e9      	b.n	8020b38 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8020d64:	2100      	movs	r1, #0
 8020d66:	460d      	mov	r5, r1
 8020d68:	e6f3      	b.n	8020b52 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020d6a:	2100      	movs	r1, #0
 8020d6c:	e6f1      	b.n	8020b52 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020d6e:	4631      	mov	r1, r6
 8020d70:	e6ef      	b.n	8020b52 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8020d72:	2400      	movs	r4, #0
 8020d74:	e700      	b.n	8020b78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8020d76:	2200      	movs	r2, #0
 8020d78:	4614      	mov	r4, r2
 8020d7a:	e70b      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020d7c:	4602      	mov	r2, r0
 8020d7e:	4604      	mov	r4, r0
 8020d80:	e708      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020d82:	2200      	movs	r2, #0
 8020d84:	e706      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8020d86:	4632      	mov	r2, r6
 8020d88:	e704      	b.n	8020b94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08020d8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d8e:	b09f      	sub	sp, #124	; 0x7c
 8020d90:	921b      	str	r2, [sp, #108]	; 0x6c
 8020d92:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020d94:	901d      	str	r0, [sp, #116]	; 0x74
 8020d96:	9309      	str	r3, [sp, #36]	; 0x24
 8020d98:	6850      	ldr	r0, [r2, #4]
 8020d9a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020d9e:	9119      	str	r1, [sp, #100]	; 0x64
 8020da0:	931c      	str	r3, [sp, #112]	; 0x70
 8020da2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020da6:	fb00 1303 	mla	r3, r0, r3, r1
 8020daa:	6812      	ldr	r2, [r2, #0]
 8020dac:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020dae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020db2:	930c      	str	r3, [sp, #48]	; 0x30
 8020db4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	9312      	str	r3, [sp, #72]	; 0x48
 8020dba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020dbc:	685e      	ldr	r6, [r3, #4]
 8020dbe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020dc2:	3604      	adds	r6, #4
 8020dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8020dc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	dc03      	bgt.n	8020dd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	f340 8387 	ble.w	80214e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8020dd4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020dd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020dda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020dde:	1e48      	subs	r0, r1, #1
 8020de0:	1e57      	subs	r7, r2, #1
 8020de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	f340 8194 	ble.w	8021112 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8020dea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8020dec:	142b      	asrs	r3, r5, #16
 8020dee:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020df2:	d406      	bmi.n	8020e02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020df4:	4584      	cmp	ip, r0
 8020df6:	da04      	bge.n	8020e02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	db02      	blt.n	8020e02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020dfc:	42bb      	cmp	r3, r7
 8020dfe:	f2c0 8189 	blt.w	8021114 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020e02:	f11c 0c01 	adds.w	ip, ip, #1
 8020e06:	f100 8177 	bmi.w	80210f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e0a:	4561      	cmp	r1, ip
 8020e0c:	f2c0 8174 	blt.w	80210f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e10:	3301      	adds	r3, #1
 8020e12:	f100 8171 	bmi.w	80210f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e16:	429a      	cmp	r2, r3
 8020e18:	f2c0 816e 	blt.w	80210f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020e20:	931a      	str	r3, [sp, #104]	; 0x68
 8020e22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	f340 8193 	ble.w	8021150 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8020e2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e2c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020e30:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020e36:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020e3a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020e3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e40:	141b      	asrs	r3, r3, #16
 8020e42:	f100 81d6 	bmi.w	80211f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020e46:	f100 38ff 	add.w	r8, r0, #4294967295
 8020e4a:	4543      	cmp	r3, r8
 8020e4c:	f280 81d1 	bge.w	80211f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020e50:	f1bc 0f00 	cmp.w	ip, #0
 8020e54:	f2c0 81cd 	blt.w	80211f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020e58:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020e5c:	45c4      	cmp	ip, r8
 8020e5e:	f280 81c8 	bge.w	80211f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8020e62:	b200      	sxth	r0, r0
 8020e64:	fb0c 3300 	mla	r3, ip, r0, r3
 8020e68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e6a:	eb04 0803 	add.w	r8, r4, r3
 8020e6e:	5ce3      	ldrb	r3, [r4, r3]
 8020e70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020e74:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020e78:	2a00      	cmp	r2, #0
 8020e7a:	f000 81af 	beq.w	80211dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020e7e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020e82:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020e86:	940e      	str	r4, [sp, #56]	; 0x38
 8020e88:	0e24      	lsrs	r4, r4, #24
 8020e8a:	9415      	str	r4, [sp, #84]	; 0x54
 8020e8c:	b179      	cbz	r1, 8020eae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8020e8e:	eb08 0c00 	add.w	ip, r8, r0
 8020e92:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020e96:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020e9a:	900a      	str	r0, [sp, #40]	; 0x28
 8020e9c:	0e00      	lsrs	r0, r0, #24
 8020e9e:	9013      	str	r0, [sp, #76]	; 0x4c
 8020ea0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020ea4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020ea8:	900f      	str	r0, [sp, #60]	; 0x3c
 8020eaa:	0e00      	lsrs	r0, r0, #24
 8020eac:	9016      	str	r0, [sp, #88]	; 0x58
 8020eae:	b292      	uxth	r2, r2
 8020eb0:	b289      	uxth	r1, r1
 8020eb2:	fb02 f901 	mul.w	r9, r2, r1
 8020eb6:	0112      	lsls	r2, r2, #4
 8020eb8:	eba2 0809 	sub.w	r8, r2, r9
 8020ebc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020ebe:	fa1f f888 	uxth.w	r8, r8
 8020ec2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020ec6:	fb08 f000 	mul.w	r0, r8, r0
 8020eca:	b289      	uxth	r1, r1
 8020ecc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020ed0:	1a52      	subs	r2, r2, r1
 8020ed2:	b292      	uxth	r2, r2
 8020ed4:	fb02 000e 	mla	r0, r2, lr, r0
 8020ed8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020eda:	fb01 0004 	mla	r0, r1, r4, r0
 8020ede:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020ee0:	fb09 0004 	mla	r0, r9, r4, r0
 8020ee4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020ee8:	2800      	cmp	r0, #0
 8020eea:	f000 80fa 	beq.w	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020eee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ef2:	d01b      	beq.n	8020f2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020ef4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020ef8:	fb0e fa0a 	mul.w	sl, lr, sl
 8020efc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f00:	fb0e fe03 	mul.w	lr, lr, r3
 8020f04:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f0c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f10:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020f14:	4453      	add	r3, sl
 8020f16:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f1a:	0a1b      	lsrs	r3, r3, #8
 8020f1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020f24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f28:	ea43 030c 	orr.w	r3, r3, ip
 8020f2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f2e:	2cff      	cmp	r4, #255	; 0xff
 8020f30:	d021      	beq.n	8020f76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8020f32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f34:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020f38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f3a:	fb04 fb0b 	mul.w	fp, r4, fp
 8020f3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020f40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f52:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f56:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f5a:	44de      	add	lr, fp
 8020f5c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f6c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f70:	ea4e 040a 	orr.w	r4, lr, sl
 8020f74:	940e      	str	r4, [sp, #56]	; 0x38
 8020f76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f78:	2cff      	cmp	r4, #255	; 0xff
 8020f7a:	d021      	beq.n	8020fc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020f7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f7e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020f82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f84:	fb04 fb0b 	mul.w	fp, r4, fp
 8020f88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020f8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f8e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f98:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fa0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fa4:	44de      	add	lr, fp
 8020fa6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020faa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fba:	ea4e 040a 	orr.w	r4, lr, sl
 8020fbe:	940a      	str	r4, [sp, #40]	; 0x28
 8020fc0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020fc2:	2cff      	cmp	r4, #255	; 0xff
 8020fc4:	d021      	beq.n	802100a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8020fc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020fc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fcc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020fce:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020fd4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fd8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fdc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020fde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fe2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fe6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fee:	44de      	add	lr, fp
 8020ff0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ff4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ff8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021000:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021004:	ea4e 040a 	orr.w	r4, lr, sl
 8021008:	940f      	str	r4, [sp, #60]	; 0x3c
 802100a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802100c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021010:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021014:	fb08 fc0c 	mul.w	ip, r8, ip
 8021018:	fb02 cc0e 	mla	ip, r2, lr, ip
 802101c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802101e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021022:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021026:	fb01 cc0e 	mla	ip, r1, lr, ip
 802102a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802102c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021030:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021032:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021036:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802103a:	fb08 f80e 	mul.w	r8, r8, lr
 802103e:	fb02 8303 	mla	r3, r2, r3, r8
 8021042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021044:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021048:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802104c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802104e:	fb01 330a 	mla	r3, r1, sl, r3
 8021052:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021058:	fb09 3901 	mla	r9, r9, r1, r3
 802105c:	4342      	muls	r2, r0
 802105e:	1c50      	adds	r0, r2, #1
 8021060:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021064:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021068:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802106c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021070:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021074:	ea4c 0c09 	orr.w	ip, ip, r9
 8021078:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802107a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802107e:	883b      	ldrh	r3, [r7, #0]
 8021080:	fb12 f204 	smulbb	r2, r2, r4
 8021084:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021088:	fa5f fc8c 	uxtb.w	ip, ip
 802108c:	1219      	asrs	r1, r3, #8
 802108e:	fb1c fc04 	smulbb	ip, ip, r4
 8021092:	b2c0      	uxtb	r0, r0
 8021094:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021098:	fb01 2100 	mla	r1, r1, r0, r2
 802109c:	10da      	asrs	r2, r3, #3
 802109e:	00db      	lsls	r3, r3, #3
 80210a0:	fb1e fe04 	smulbb	lr, lr, r4
 80210a4:	b2db      	uxtb	r3, r3
 80210a6:	fb03 c300 	mla	r3, r3, r0, ip
 80210aa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80210ae:	b289      	uxth	r1, r1
 80210b0:	fb02 e200 	mla	r2, r2, r0, lr
 80210b4:	fa1f fc83 	uxth.w	ip, r3
 80210b8:	1c4b      	adds	r3, r1, #1
 80210ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80210be:	f10c 0301 	add.w	r3, ip, #1
 80210c2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80210c6:	b292      	uxth	r2, r2
 80210c8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80210cc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80210d0:	430b      	orrs	r3, r1
 80210d2:	1c51      	adds	r1, r2, #1
 80210d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80210d8:	0952      	lsrs	r2, r2, #5
 80210da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80210de:	4313      	orrs	r3, r2
 80210e0:	803b      	strh	r3, [r7, #0]
 80210e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80210e6:	3702      	adds	r7, #2
 80210e8:	441a      	add	r2, r3
 80210ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210ec:	9229      	str	r2, [sp, #164]	; 0xa4
 80210ee:	441d      	add	r5, r3
 80210f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80210f2:	3b01      	subs	r3, #1
 80210f4:	931a      	str	r3, [sp, #104]	; 0x68
 80210f6:	e694      	b.n	8020e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80210f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210fa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80210fc:	441c      	add	r4, r3
 80210fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021100:	9429      	str	r4, [sp, #164]	; 0xa4
 8021102:	441d      	add	r5, r3
 8021104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021106:	3b01      	subs	r3, #1
 8021108:	9309      	str	r3, [sp, #36]	; 0x24
 802110a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802110c:	3302      	adds	r3, #2
 802110e:	930c      	str	r3, [sp, #48]	; 0x30
 8021110:	e667      	b.n	8020de2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021112:	d024      	beq.n	802115e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8021114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021116:	982b      	ldr	r0, [sp, #172]	; 0xac
 8021118:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802111a:	3b01      	subs	r3, #1
 802111c:	fb00 4003 	mla	r0, r0, r3, r4
 8021120:	1400      	asrs	r0, r0, #16
 8021122:	f53f ae7b 	bmi.w	8020e1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021126:	3901      	subs	r1, #1
 8021128:	4288      	cmp	r0, r1
 802112a:	f6bf ae77 	bge.w	8020e1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802112e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021130:	fb01 5303 	mla	r3, r1, r3, r5
 8021134:	141b      	asrs	r3, r3, #16
 8021136:	f53f ae71 	bmi.w	8020e1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802113a:	3a01      	subs	r2, #1
 802113c:	4293      	cmp	r3, r2
 802113e:	f6bf ae6d 	bge.w	8020e1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021142:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021146:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802114a:	f1bb 0f00 	cmp.w	fp, #0
 802114e:	dc70      	bgt.n	8021232 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8021150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021152:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021158:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802115c:	930c      	str	r3, [sp, #48]	; 0x30
 802115e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021160:	2b00      	cmp	r3, #0
 8021162:	f340 81be 	ble.w	80214e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8021166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802116a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802116e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021172:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021176:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802117a:	eef0 6a62 	vmov.f32	s13, s5
 802117e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021182:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021186:	ee61 7a27 	vmul.f32	s15, s2, s15
 802118a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802118e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021192:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8021196:	eef0 6a43 	vmov.f32	s13, s6
 802119a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802119e:	ee12 2a90 	vmov	r2, s5
 80211a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80211b0:	ee13 2a10 	vmov	r2, s6
 80211b4:	932b      	str	r3, [sp, #172]	; 0xac
 80211b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211b8:	ee16 5a90 	vmov	r5, s13
 80211bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80211c0:	932c      	str	r3, [sp, #176]	; 0xb0
 80211c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80211c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80211c6:	3b01      	subs	r3, #1
 80211c8:	9319      	str	r3, [sp, #100]	; 0x64
 80211ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80211cc:	bf08      	it	eq
 80211ce:	4613      	moveq	r3, r2
 80211d0:	eeb0 3a67 	vmov.f32	s6, s15
 80211d4:	9309      	str	r3, [sp, #36]	; 0x24
 80211d6:	eef0 2a47 	vmov.f32	s5, s14
 80211da:	e5f4      	b.n	8020dc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80211dc:	2900      	cmp	r1, #0
 80211de:	f43f ae66 	beq.w	8020eae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80211e2:	f818 0000 	ldrb.w	r0, [r8, r0]
 80211e6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80211ea:	900a      	str	r0, [sp, #40]	; 0x28
 80211ec:	0e00      	lsrs	r0, r0, #24
 80211ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80211f0:	e65d      	b.n	8020eae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80211f2:	f113 0801 	adds.w	r8, r3, #1
 80211f6:	f53f af74 	bmi.w	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80211fa:	4540      	cmp	r0, r8
 80211fc:	f6ff af71 	blt.w	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021200:	f11c 0801 	adds.w	r8, ip, #1
 8021204:	f53f af6d 	bmi.w	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021208:	45c6      	cmp	lr, r8
 802120a:	f6ff af6a 	blt.w	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802120e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021210:	9302      	str	r3, [sp, #8]
 8021212:	b200      	sxth	r0, r0
 8021214:	fa0f f38e 	sxth.w	r3, lr
 8021218:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802121c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021220:	9301      	str	r3, [sp, #4]
 8021222:	9000      	str	r0, [sp, #0]
 8021224:	4633      	mov	r3, r6
 8021226:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021228:	4639      	mov	r1, r7
 802122a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802122c:	f7ff fc63 	bl	8020af6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8021230:	e757      	b.n	80210e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8021232:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021234:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8021236:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802123a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802123c:	1427      	asrs	r7, r4, #16
 802123e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021242:	142b      	asrs	r3, r5, #16
 8021244:	fb01 7303 	mla	r3, r1, r3, r7
 8021248:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802124a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802124e:	18e7      	adds	r7, r4, r3
 8021250:	5ce3      	ldrb	r3, [r4, r3]
 8021252:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021256:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802125a:	2a00      	cmp	r2, #0
 802125c:	f000 8137 	beq.w	80214ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8021260:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021264:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021268:	9410      	str	r4, [sp, #64]	; 0x40
 802126a:	0e24      	lsrs	r4, r4, #24
 802126c:	9417      	str	r4, [sp, #92]	; 0x5c
 802126e:	b170      	cbz	r0, 802128e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8021270:	eb07 0e01 	add.w	lr, r7, r1
 8021274:	5c79      	ldrb	r1, [r7, r1]
 8021276:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802127a:	910b      	str	r1, [sp, #44]	; 0x2c
 802127c:	0e09      	lsrs	r1, r1, #24
 802127e:	9114      	str	r1, [sp, #80]	; 0x50
 8021280:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021284:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021288:	9111      	str	r1, [sp, #68]	; 0x44
 802128a:	0e09      	lsrs	r1, r1, #24
 802128c:	9118      	str	r1, [sp, #96]	; 0x60
 802128e:	b292      	uxth	r2, r2
 8021290:	b280      	uxth	r0, r0
 8021292:	fb02 f800 	mul.w	r8, r2, r0
 8021296:	0112      	lsls	r2, r2, #4
 8021298:	eba2 0e08 	sub.w	lr, r2, r8
 802129c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802129e:	fa1f fe8e 	uxth.w	lr, lr
 80212a2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80212a6:	fb0e f101 	mul.w	r1, lr, r1
 80212aa:	b280      	uxth	r0, r0
 80212ac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80212b0:	1a12      	subs	r2, r2, r0
 80212b2:	b292      	uxth	r2, r2
 80212b4:	fb02 110c 	mla	r1, r2, ip, r1
 80212b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80212ba:	fb00 1104 	mla	r1, r0, r4, r1
 80212be:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80212c0:	fb08 1104 	mla	r1, r8, r4, r1
 80212c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80212c8:	2900      	cmp	r1, #0
 80212ca:	f000 80f5 	beq.w	80214b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80212ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80212d2:	d019      	beq.n	8021308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80212d4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80212d8:	fb0c fa0a 	mul.w	sl, ip, sl
 80212dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212e0:	fb0c fc03 	mul.w	ip, ip, r3
 80212e4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80212e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80212ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212f0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80212f4:	4453      	add	r3, sl
 80212f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80212fa:	0a1b      	lsrs	r3, r3, #8
 80212fc:	0a3f      	lsrs	r7, r7, #8
 80212fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021302:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021306:	433b      	orrs	r3, r7
 8021308:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802130a:	2cff      	cmp	r4, #255	; 0xff
 802130c:	d020      	beq.n	8021350 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802130e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021310:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021314:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021316:	4367      	muls	r7, r4
 8021318:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802131a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802131e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021322:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021324:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021328:	fb04 fa0a 	mul.w	sl, r4, sl
 802132c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021330:	44bc      	add	ip, r7
 8021332:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021336:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802133a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802133e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021342:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021346:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802134a:	ea4c 040a 	orr.w	r4, ip, sl
 802134e:	9410      	str	r4, [sp, #64]	; 0x40
 8021350:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021352:	2cff      	cmp	r4, #255	; 0xff
 8021354:	d020      	beq.n	8021398 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8021356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021358:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802135c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802135e:	4367      	muls	r7, r4
 8021360:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021362:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021366:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802136a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802136c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021370:	fb04 fa0a 	mul.w	sl, r4, sl
 8021374:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021378:	44bc      	add	ip, r7
 802137a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802137e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021382:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021386:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802138a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802138e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021392:	ea4c 040a 	orr.w	r4, ip, sl
 8021396:	940b      	str	r4, [sp, #44]	; 0x2c
 8021398:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802139a:	2cff      	cmp	r4, #255	; 0xff
 802139c:	d020      	beq.n	80213e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802139e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213a0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213a4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80213a6:	4367      	muls	r7, r4
 80213a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213b2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80213b4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213b8:	fb04 fa0a 	mul.w	sl, r4, sl
 80213bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213c0:	44bc      	add	ip, r7
 80213c2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213da:	ea4c 040a 	orr.w	r4, ip, sl
 80213de:	9411      	str	r4, [sp, #68]	; 0x44
 80213e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80213e2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80213e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213ea:	fb0e f707 	mul.w	r7, lr, r7
 80213ee:	fb02 770c 	mla	r7, r2, ip, r7
 80213f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80213f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80213fc:	fb00 770c 	mla	r7, r0, ip, r7
 8021400:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021402:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021406:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021408:	fb08 770c 	mla	r7, r8, ip, r7
 802140c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021410:	fb0e fe0c 	mul.w	lr, lr, ip
 8021414:	fb02 e303 	mla	r3, r2, r3, lr
 8021418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802141a:	0a3f      	lsrs	r7, r7, #8
 802141c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021420:	fb00 330a 	mla	r3, r0, sl, r3
 8021424:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021426:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802142a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802142e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021438:	434b      	muls	r3, r1
 802143a:	1c59      	adds	r1, r3, #1
 802143c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021440:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021444:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021448:	ea47 070c 	orr.w	r7, r7, ip
 802144c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802144e:	0c3b      	lsrs	r3, r7, #16
 8021450:	f8b9 0000 	ldrh.w	r0, [r9]
 8021454:	fb13 f304 	smulbb	r3, r3, r4
 8021458:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802145c:	b2ff      	uxtb	r7, r7
 802145e:	1202      	asrs	r2, r0, #8
 8021460:	fb17 f704 	smulbb	r7, r7, r4
 8021464:	b2c9      	uxtb	r1, r1
 8021466:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802146a:	fb02 3201 	mla	r2, r2, r1, r3
 802146e:	10c3      	asrs	r3, r0, #3
 8021470:	00c0      	lsls	r0, r0, #3
 8021472:	fb1c fc04 	smulbb	ip, ip, r4
 8021476:	b2c0      	uxtb	r0, r0
 8021478:	fb00 7001 	mla	r0, r0, r1, r7
 802147c:	b292      	uxth	r2, r2
 802147e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021482:	fb03 c301 	mla	r3, r3, r1, ip
 8021486:	f102 0c01 	add.w	ip, r2, #1
 802148a:	b280      	uxth	r0, r0
 802148c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021490:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8021494:	1c42      	adds	r2, r0, #1
 8021496:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802149a:	b29b      	uxth	r3, r3
 802149c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80214a0:	ea42 020c 	orr.w	r2, r2, ip
 80214a4:	f103 0c01 	add.w	ip, r3, #1
 80214a8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80214ac:	095b      	lsrs	r3, r3, #5
 80214ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80214b2:	431a      	orrs	r2, r3
 80214b4:	f8a9 2000 	strh.w	r2, [r9]
 80214b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80214ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80214bc:	f109 0902 	add.w	r9, r9, #2
 80214c0:	441a      	add	r2, r3
 80214c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80214c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80214c6:	441d      	add	r5, r3
 80214c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80214cc:	e63d      	b.n	802114a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80214ce:	2800      	cmp	r0, #0
 80214d0:	f43f aedd 	beq.w	802128e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80214d4:	5c79      	ldrb	r1, [r7, r1]
 80214d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214da:	910b      	str	r1, [sp, #44]	; 0x2c
 80214dc:	0e09      	lsrs	r1, r1, #24
 80214de:	9114      	str	r1, [sp, #80]	; 0x50
 80214e0:	e6d5      	b.n	802128e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80214e2:	b01f      	add	sp, #124	; 0x7c
 80214e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80214e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214ec:	b089      	sub	sp, #36	; 0x24
 80214ee:	9101      	str	r1, [sp, #4]
 80214f0:	9801      	ldr	r0, [sp, #4]
 80214f2:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 80214f6:	8800      	ldrh	r0, [r0, #0]
 80214f8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80214fc:	1206      	asrs	r6, r0, #8
 80214fe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021502:	9602      	str	r6, [sp, #8]
 8021504:	10c6      	asrs	r6, r0, #3
 8021506:	00c0      	lsls	r0, r0, #3
 8021508:	b2c0      	uxtb	r0, r0
 802150a:	9004      	str	r0, [sp, #16]
 802150c:	fb07 100c 	mla	r0, r7, ip, r1
 8021510:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021514:	2f00      	cmp	r7, #0
 8021516:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 802151a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 802151e:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8021522:	9603      	str	r6, [sp, #12]
 8021524:	eb02 0e00 	add.w	lr, r2, r0
 8021528:	f2c0 810a 	blt.w	8021740 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802152c:	45b8      	cmp	r8, r7
 802152e:	f340 8107 	ble.w	8021740 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8021532:	2900      	cmp	r1, #0
 8021534:	f2c0 8102 	blt.w	802173c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8021538:	458c      	cmp	ip, r1
 802153a:	f340 80ff 	ble.w	802173c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 802153e:	5c12      	ldrb	r2, [r2, r0]
 8021540:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021544:	1c4a      	adds	r2, r1, #1
 8021546:	f100 80fe 	bmi.w	8021746 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802154a:	4594      	cmp	ip, r2
 802154c:	f340 80fb 	ble.w	8021746 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8021550:	2d00      	cmp	r5, #0
 8021552:	f000 80fa 	beq.w	802174a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8021556:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802155a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802155e:	3701      	adds	r7, #1
 8021560:	f100 80f7 	bmi.w	8021752 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8021564:	45b8      	cmp	r8, r7
 8021566:	f340 80f4 	ble.w	8021752 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802156a:	2c00      	cmp	r4, #0
 802156c:	f000 80f4 	beq.w	8021758 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8021570:	2900      	cmp	r1, #0
 8021572:	eb0e 020c 	add.w	r2, lr, ip
 8021576:	f2c0 80ea 	blt.w	802174e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802157a:	458c      	cmp	ip, r1
 802157c:	f340 80e7 	ble.w	802174e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8021580:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8021584:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8021588:	3101      	adds	r1, #1
 802158a:	f100 80e8 	bmi.w	802175e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802158e:	458c      	cmp	ip, r1
 8021590:	f340 80e5 	ble.w	802175e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8021594:	2d00      	cmp	r5, #0
 8021596:	f000 80e4 	beq.w	8021762 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 802159a:	7852      	ldrb	r2, [r2, #1]
 802159c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80215a0:	0e0b      	lsrs	r3, r1, #24
 80215a2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80215a6:	9300      	str	r3, [sp, #0]
 80215a8:	b2a4      	uxth	r4, r4
 80215aa:	b2ab      	uxth	r3, r5
 80215ac:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80215b0:	fb03 f904 	mul.w	r9, r3, r4
 80215b4:	fb0a f505 	mul.w	r5, sl, r5
 80215b8:	011b      	lsls	r3, r3, #4
 80215ba:	eba3 0e09 	sub.w	lr, r3, r9
 80215be:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80215c2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80215c6:	0a28      	lsrs	r0, r5, #8
 80215c8:	fb0a f303 	mul.w	r3, sl, r3
 80215cc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80215d0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80215d4:	4405      	add	r5, r0
 80215d6:	0a2d      	lsrs	r5, r5, #8
 80215d8:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80215dc:	9005      	str	r0, [sp, #20]
 80215de:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80215e2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80215e6:	0a1b      	lsrs	r3, r3, #8
 80215e8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80215ec:	9306      	str	r3, [sp, #24]
 80215ee:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80215f2:	fb0b f303 	mul.w	r3, fp, r3
 80215f6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80215fa:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80215fe:	fb0b f606 	mul.w	r6, fp, r6
 8021602:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021606:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802160a:	fb08 f707 	mul.w	r7, r8, r7
 802160e:	0a1d      	lsrs	r5, r3, #8
 8021610:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021614:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021618:	441d      	add	r5, r3
 802161a:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802161e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021626:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802162a:	fb08 fc0c 	mul.w	ip, r8, ip
 802162e:	0a1b      	lsrs	r3, r3, #8
 8021630:	9307      	str	r3, [sp, #28]
 8021632:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021636:	0e0b      	lsrs	r3, r1, #24
 8021638:	0a2d      	lsrs	r5, r5, #8
 802163a:	fa1f fe8e 	uxth.w	lr, lr
 802163e:	435f      	muls	r7, r3
 8021640:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021644:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8021648:	fb05 f50e 	mul.w	r5, r5, lr
 802164c:	b2a4      	uxth	r4, r4
 802164e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8021652:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021656:	4359      	muls	r1, r3
 8021658:	1b12      	subs	r2, r2, r4
 802165a:	9b05      	ldr	r3, [sp, #20]
 802165c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021660:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021664:	b292      	uxth	r2, r2
 8021666:	4460      	add	r0, ip
 8021668:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802166c:	fb03 5502 	mla	r5, r3, r2, r5
 8021670:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021674:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021678:	44bc      	add	ip, r7
 802167a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802167e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021682:	0a36      	lsrs	r6, r6, #8
 8021684:	fb0c 5509 	mla	r5, ip, r9, r5
 8021688:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802168c:	fb0e f606 	mul.w	r6, lr, r6
 8021690:	9b06      	ldr	r3, [sp, #24]
 8021692:	0a00      	lsrs	r0, r0, #8
 8021694:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021698:	fb00 5504 	mla	r5, r0, r4, r5
 802169c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80216a0:	fb02 6000 	mla	r0, r2, r0, r6
 80216a4:	f501 7780 	add.w	r7, r1, #256	; 0x100
 80216a8:	fb0e fe0b 	mul.w	lr, lr, fp
 80216ac:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80216b0:	0a09      	lsrs	r1, r1, #8
 80216b2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80216b6:	fb09 0001 	mla	r0, r9, r1, r0
 80216ba:	fb02 e20a 	mla	r2, r2, sl, lr
 80216be:	9b07      	ldr	r3, [sp, #28]
 80216c0:	0a2d      	lsrs	r5, r5, #8
 80216c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216c6:	fb04 0003 	mla	r0, r4, r3, r0
 80216ca:	fb04 2408 	mla	r4, r4, r8, r2
 80216ce:	9b00      	ldr	r3, [sp, #0]
 80216d0:	9a04      	ldr	r2, [sp, #16]
 80216d2:	fb09 4903 	mla	r9, r9, r3, r4
 80216d6:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80216da:	9b02      	ldr	r3, [sp, #8]
 80216dc:	fa5f f989 	uxtb.w	r9, r9
 80216e0:	fb03 f109 	mul.w	r1, r3, r9
 80216e4:	9b03      	ldr	r3, [sp, #12]
 80216e6:	0a00      	lsrs	r0, r0, #8
 80216e8:	fb03 f309 	mul.w	r3, r3, r9
 80216ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80216f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80216f4:	4305      	orrs	r5, r0
 80216f6:	fb02 f909 	mul.w	r9, r2, r9
 80216fa:	1c58      	adds	r0, r3, #1
 80216fc:	1c4a      	adds	r2, r1, #1
 80216fe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021702:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021706:	0a2b      	lsrs	r3, r5, #8
 8021708:	0c2a      	lsrs	r2, r5, #16
 802170a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802170e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021712:	00db      	lsls	r3, r3, #3
 8021714:	0212      	lsls	r2, r2, #8
 8021716:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802171a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802171e:	4313      	orrs	r3, r2
 8021720:	f109 0201 	add.w	r2, r9, #1
 8021724:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021728:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802172c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021730:	431d      	orrs	r5, r3
 8021732:	9b01      	ldr	r3, [sp, #4]
 8021734:	801d      	strh	r5, [r3, #0]
 8021736:	b009      	add	sp, #36	; 0x24
 8021738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802173c:	2000      	movs	r0, #0
 802173e:	e701      	b.n	8021544 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8021740:	2600      	movs	r6, #0
 8021742:	4630      	mov	r0, r6
 8021744:	e70b      	b.n	802155e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8021746:	2600      	movs	r6, #0
 8021748:	e709      	b.n	802155e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802174a:	462e      	mov	r6, r5
 802174c:	e707      	b.n	802155e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 802174e:	2700      	movs	r7, #0
 8021750:	e71a      	b.n	8021588 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8021752:	2100      	movs	r1, #0
 8021754:	460f      	mov	r7, r1
 8021756:	e723      	b.n	80215a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021758:	4621      	mov	r1, r4
 802175a:	4627      	mov	r7, r4
 802175c:	e720      	b.n	80215a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802175e:	2100      	movs	r1, #0
 8021760:	e71e      	b.n	80215a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8021762:	4629      	mov	r1, r5
 8021764:	e71c      	b.n	80215a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08021768 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802176c:	b09b      	sub	sp, #108	; 0x6c
 802176e:	9218      	str	r2, [sp, #96]	; 0x60
 8021770:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021772:	9019      	str	r0, [sp, #100]	; 0x64
 8021774:	6850      	ldr	r0, [r2, #4]
 8021776:	9116      	str	r1, [sp, #88]	; 0x58
 8021778:	9307      	str	r3, [sp, #28]
 802177a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802177e:	fb00 1303 	mla	r3, r0, r3, r1
 8021782:	6812      	ldr	r2, [r2, #0]
 8021784:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8021786:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802178a:	930a      	str	r3, [sp, #40]	; 0x28
 802178c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	930f      	str	r3, [sp, #60]	; 0x3c
 8021792:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021794:	685e      	ldr	r6, [r3, #4]
 8021796:	3604      	adds	r6, #4
 8021798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802179a:	2b00      	cmp	r3, #0
 802179c:	dc03      	bgt.n	80217a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802179e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	f340 8373 	ble.w	8021e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80217a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80217a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80217b0:	1e48      	subs	r0, r1, #1
 80217b2:	1e57      	subs	r7, r2, #1
 80217b4:	9b07      	ldr	r3, [sp, #28]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	f340 818f 	ble.w	8021ada <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80217bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80217be:	142b      	asrs	r3, r5, #16
 80217c0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80217c4:	d406      	bmi.n	80217d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80217c6:	4584      	cmp	ip, r0
 80217c8:	da04      	bge.n	80217d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	db02      	blt.n	80217d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80217ce:	42bb      	cmp	r3, r7
 80217d0:	f2c0 8184 	blt.w	8021adc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80217d4:	f11c 0c01 	adds.w	ip, ip, #1
 80217d8:	f100 8172 	bmi.w	8021ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217dc:	4561      	cmp	r1, ip
 80217de:	f2c0 816f 	blt.w	8021ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217e2:	3301      	adds	r3, #1
 80217e4:	f100 816c 	bmi.w	8021ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217e8:	429a      	cmp	r2, r3
 80217ea:	f2c0 8169 	blt.w	8021ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80217ee:	9b07      	ldr	r3, [sp, #28]
 80217f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80217f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80217f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	f340 818e 	ble.w	8021b18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80217fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80217fe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021802:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021806:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021808:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802180c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021810:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021812:	141b      	asrs	r3, r3, #16
 8021814:	f100 81d1 	bmi.w	8021bba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021818:	f101 38ff 	add.w	r8, r1, #4294967295
 802181c:	4543      	cmp	r3, r8
 802181e:	f280 81cc 	bge.w	8021bba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021822:	f1bc 0f00 	cmp.w	ip, #0
 8021826:	f2c0 81c8 	blt.w	8021bba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802182a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802182e:	45c4      	cmp	ip, r8
 8021830:	f280 81c3 	bge.w	8021bba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021834:	b209      	sxth	r1, r1
 8021836:	fb0c 3301 	mla	r3, ip, r1, r3
 802183a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802183c:	eb04 0803 	add.w	r8, r4, r3
 8021840:	5ce3      	ldrb	r3, [r4, r3]
 8021842:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021846:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802184a:	2a00      	cmp	r2, #0
 802184c:	f000 81aa 	beq.w	8021ba4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8021850:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021854:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021858:	940b      	str	r4, [sp, #44]	; 0x2c
 802185a:	0e24      	lsrs	r4, r4, #24
 802185c:	9412      	str	r4, [sp, #72]	; 0x48
 802185e:	b178      	cbz	r0, 8021880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021860:	eb08 0c01 	add.w	ip, r8, r1
 8021864:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021868:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802186c:	9108      	str	r1, [sp, #32]
 802186e:	0e09      	lsrs	r1, r1, #24
 8021870:	9110      	str	r1, [sp, #64]	; 0x40
 8021872:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021876:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802187a:	910c      	str	r1, [sp, #48]	; 0x30
 802187c:	0e09      	lsrs	r1, r1, #24
 802187e:	9113      	str	r1, [sp, #76]	; 0x4c
 8021880:	b292      	uxth	r2, r2
 8021882:	b280      	uxth	r0, r0
 8021884:	fb02 f900 	mul.w	r9, r2, r0
 8021888:	0112      	lsls	r2, r2, #4
 802188a:	eba2 0809 	sub.w	r8, r2, r9
 802188e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021890:	fa1f f888 	uxth.w	r8, r8
 8021894:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021898:	fb08 f101 	mul.w	r1, r8, r1
 802189c:	b280      	uxth	r0, r0
 802189e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80218a2:	1a12      	subs	r2, r2, r0
 80218a4:	b292      	uxth	r2, r2
 80218a6:	fb02 110e 	mla	r1, r2, lr, r1
 80218aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218ac:	fb00 1104 	mla	r1, r0, r4, r1
 80218b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80218b2:	fb09 1104 	mla	r1, r9, r4, r1
 80218b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80218ba:	2900      	cmp	r1, #0
 80218bc:	f000 80f5 	beq.w	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80218c0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80218c4:	d01b      	beq.n	80218fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80218c6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80218ca:	fb0e fa0a 	mul.w	sl, lr, sl
 80218ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218d2:	fb0e fe03 	mul.w	lr, lr, r3
 80218d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80218da:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80218e2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80218e6:	4453      	add	r3, sl
 80218e8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80218ec:	0a1b      	lsrs	r3, r3, #8
 80218ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80218fa:	ea43 030c 	orr.w	r3, r3, ip
 80218fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021900:	2cff      	cmp	r4, #255	; 0xff
 8021902:	d021      	beq.n	8021948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021904:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021906:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802190a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802190c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021910:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021912:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021916:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802191a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802191c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021920:	fb04 fa0a 	mul.w	sl, r4, sl
 8021924:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021928:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802192c:	44de      	add	lr, fp
 802192e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021932:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021936:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802193a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802193e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021942:	ea4e 040a 	orr.w	r4, lr, sl
 8021946:	940b      	str	r4, [sp, #44]	; 0x2c
 8021948:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802194a:	2cff      	cmp	r4, #255	; 0xff
 802194c:	d021      	beq.n	8021992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802194e:	9c08      	ldr	r4, [sp, #32]
 8021950:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021954:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021956:	fb04 fb0b 	mul.w	fp, r4, fp
 802195a:	9c08      	ldr	r4, [sp, #32]
 802195c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021960:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021964:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021966:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802196a:	fb04 fa0a 	mul.w	sl, r4, sl
 802196e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021972:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021976:	44de      	add	lr, fp
 8021978:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802197c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021980:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021984:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021988:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802198c:	ea4e 040a 	orr.w	r4, lr, sl
 8021990:	9408      	str	r4, [sp, #32]
 8021992:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021994:	2cff      	cmp	r4, #255	; 0xff
 8021996:	d021      	beq.n	80219dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021998:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802199a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802199e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80219a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80219a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80219a6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80219aa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80219ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80219b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80219b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80219b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80219bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80219c0:	44de      	add	lr, fp
 80219c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80219c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80219ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80219d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219d6:	ea4e 040a 	orr.w	r4, lr, sl
 80219da:	940c      	str	r4, [sp, #48]	; 0x30
 80219dc:	43c9      	mvns	r1, r1
 80219de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219e0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80219e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80219ec:	fb02 cc0e 	mla	ip, r2, lr, ip
 80219f0:	9c08      	ldr	r4, [sp, #32]
 80219f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219f6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80219fa:	fb00 cc0e 	mla	ip, r0, lr, ip
 80219fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021a00:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021a04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021a06:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021a0a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021a0e:	fb08 f80e 	mul.w	r8, r8, lr
 8021a12:	fb02 8303 	mla	r3, r2, r3, r8
 8021a16:	9a08      	ldr	r2, [sp, #32]
 8021a18:	f8b7 8000 	ldrh.w	r8, [r7]
 8021a1c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021a20:	fb00 330a 	mla	r3, r0, sl, r3
 8021a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a26:	fa5f fe81 	uxtb.w	lr, r1
 8021a2a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021a2e:	fb09 3900 	mla	r9, r9, r0, r3
 8021a32:	ea4f 2228 	mov.w	r2, r8, asr #8
 8021a36:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021a3a:	fb02 f20e 	mul.w	r2, r2, lr
 8021a3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a46:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8021a4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a4e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021a52:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021a56:	ea4c 0c09 	orr.w	ip, ip, r9
 8021a5a:	fb00 f00e 	mul.w	r0, r0, lr
 8021a5e:	1c53      	adds	r3, r2, #1
 8021a60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021a64:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8021a68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a6c:	4a62      	ldr	r2, [pc, #392]	; (8021bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8021a6e:	b2db      	uxtb	r3, r3
 8021a70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021a74:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8021a78:	b2c9      	uxtb	r1, r1
 8021a7a:	1c43      	adds	r3, r0, #1
 8021a7c:	fb01 f10e 	mul.w	r1, r1, lr
 8021a80:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021a84:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021a88:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021a8c:	00db      	lsls	r3, r3, #3
 8021a8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a92:	4313      	orrs	r3, r2
 8021a94:	1c4a      	adds	r2, r1, #1
 8021a96:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021a9a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021a9e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021aa2:	ea4c 0c03 	orr.w	ip, ip, r3
 8021aa6:	f8a7 c000 	strh.w	ip, [r7]
 8021aaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021aac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021aae:	3702      	adds	r7, #2
 8021ab0:	441a      	add	r2, r3
 8021ab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ab4:	9225      	str	r2, [sp, #148]	; 0x94
 8021ab6:	441d      	add	r5, r3
 8021ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021aba:	3b01      	subs	r3, #1
 8021abc:	9317      	str	r3, [sp, #92]	; 0x5c
 8021abe:	e699      	b.n	80217f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021ac0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021ac2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021ac4:	441c      	add	r4, r3
 8021ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ac8:	9425      	str	r4, [sp, #148]	; 0x94
 8021aca:	441d      	add	r5, r3
 8021acc:	9b07      	ldr	r3, [sp, #28]
 8021ace:	3b01      	subs	r3, #1
 8021ad0:	9307      	str	r3, [sp, #28]
 8021ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ad4:	3302      	adds	r3, #2
 8021ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ad8:	e66c      	b.n	80217b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021ada:	d024      	beq.n	8021b26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021adc:	9b07      	ldr	r3, [sp, #28]
 8021ade:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021ae0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021ae2:	3b01      	subs	r3, #1
 8021ae4:	fb00 4003 	mla	r0, r0, r3, r4
 8021ae8:	1400      	asrs	r0, r0, #16
 8021aea:	f53f ae80 	bmi.w	80217ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021aee:	3901      	subs	r1, #1
 8021af0:	4288      	cmp	r0, r1
 8021af2:	f6bf ae7c 	bge.w	80217ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021af6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021af8:	fb01 5303 	mla	r3, r1, r3, r5
 8021afc:	141b      	asrs	r3, r3, #16
 8021afe:	f53f ae76 	bmi.w	80217ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021b02:	3a01      	subs	r2, #1
 8021b04:	4293      	cmp	r3, r2
 8021b06:	f6bf ae72 	bge.w	80217ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021b0a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021b0e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8021b12:	f1bb 0f00 	cmp.w	fp, #0
 8021b16:	dc71      	bgt.n	8021bfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021b18:	9b07      	ldr	r3, [sp, #28]
 8021b1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b20:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021b24:	930a      	str	r3, [sp, #40]	; 0x28
 8021b26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	f340 81af 	ble.w	8021e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8021b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021b42:	eef0 6a62 	vmov.f32	s13, s5
 8021b46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021b52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b5a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8021b5e:	eef0 6a43 	vmov.f32	s13, s6
 8021b62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b66:	ee12 2a90 	vmov	r2, s5
 8021b6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b78:	ee13 2a10 	vmov	r2, s6
 8021b7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8021b7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b80:	ee16 5a90 	vmov	r5, s13
 8021b84:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b88:	9328      	str	r3, [sp, #160]	; 0xa0
 8021b8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021b8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021b8e:	3b01      	subs	r3, #1
 8021b90:	9316      	str	r3, [sp, #88]	; 0x58
 8021b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b94:	bf08      	it	eq
 8021b96:	4613      	moveq	r3, r2
 8021b98:	eeb0 3a67 	vmov.f32	s6, s15
 8021b9c:	9307      	str	r3, [sp, #28]
 8021b9e:	eef0 2a47 	vmov.f32	s5, s14
 8021ba2:	e5f9      	b.n	8021798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021ba4:	2800      	cmp	r0, #0
 8021ba6:	f43f ae6b 	beq.w	8021880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021baa:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021bae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021bb2:	9108      	str	r1, [sp, #32]
 8021bb4:	0e09      	lsrs	r1, r1, #24
 8021bb6:	9110      	str	r1, [sp, #64]	; 0x40
 8021bb8:	e662      	b.n	8021880 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021bba:	f113 0801 	adds.w	r8, r3, #1
 8021bbe:	f53f af74 	bmi.w	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021bc2:	4541      	cmp	r1, r8
 8021bc4:	f6ff af71 	blt.w	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021bc8:	f11c 0801 	adds.w	r8, ip, #1
 8021bcc:	f53f af6d 	bmi.w	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021bd0:	45c6      	cmp	lr, r8
 8021bd2:	f6ff af6a 	blt.w	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021bd6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021bda:	b209      	sxth	r1, r1
 8021bdc:	fa0f f38e 	sxth.w	r3, lr
 8021be0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021be4:	9301      	str	r3, [sp, #4]
 8021be6:	9100      	str	r1, [sp, #0]
 8021be8:	4633      	mov	r3, r6
 8021bea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021bec:	4639      	mov	r1, r7
 8021bee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021bf0:	f7ff fc7a 	bl	80214e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8021bf4:	e759      	b.n	8021aaa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021bf6:	bf00      	nop
 8021bf8:	fffff800 	.word	0xfffff800
 8021bfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021bfe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021c00:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021c04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c06:	1427      	asrs	r7, r4, #16
 8021c08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c0c:	142b      	asrs	r3, r5, #16
 8021c0e:	fb01 7303 	mla	r3, r1, r3, r7
 8021c12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021c14:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021c18:	18e7      	adds	r7, r4, r3
 8021c1a:	5ce3      	ldrb	r3, [r4, r3]
 8021c1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021c20:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021c24:	2a00      	cmp	r2, #0
 8021c26:	f000 8127 	beq.w	8021e78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8021c2a:	f897 e001 	ldrb.w	lr, [r7, #1]
 8021c2e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8021c32:	940d      	str	r4, [sp, #52]	; 0x34
 8021c34:	0e24      	lsrs	r4, r4, #24
 8021c36:	9414      	str	r4, [sp, #80]	; 0x50
 8021c38:	b170      	cbz	r0, 8021c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021c3a:	eb07 0e01 	add.w	lr, r7, r1
 8021c3e:	5c79      	ldrb	r1, [r7, r1]
 8021c40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021c44:	9109      	str	r1, [sp, #36]	; 0x24
 8021c46:	0e09      	lsrs	r1, r1, #24
 8021c48:	9111      	str	r1, [sp, #68]	; 0x44
 8021c4a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8021c4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021c52:	910e      	str	r1, [sp, #56]	; 0x38
 8021c54:	0e09      	lsrs	r1, r1, #24
 8021c56:	9115      	str	r1, [sp, #84]	; 0x54
 8021c58:	b292      	uxth	r2, r2
 8021c5a:	b280      	uxth	r0, r0
 8021c5c:	fb02 f800 	mul.w	r8, r2, r0
 8021c60:	0112      	lsls	r2, r2, #4
 8021c62:	eba2 0e08 	sub.w	lr, r2, r8
 8021c66:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021c6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c6c:	fa1f fe8e 	uxth.w	lr, lr
 8021c70:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021c74:	fb0e f202 	mul.w	r2, lr, r2
 8021c78:	b280      	uxth	r0, r0
 8021c7a:	1a09      	subs	r1, r1, r0
 8021c7c:	b289      	uxth	r1, r1
 8021c7e:	fb01 220c 	mla	r2, r1, ip, r2
 8021c82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021c84:	fb00 2204 	mla	r2, r0, r4, r2
 8021c88:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021c8a:	fb08 2204 	mla	r2, r8, r4, r2
 8021c8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c92:	2a00      	cmp	r2, #0
 8021c94:	f000 80e5 	beq.w	8021e62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8021c98:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021c9c:	d019      	beq.n	8021cd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8021c9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021ca2:	fb0c fa0a 	mul.w	sl, ip, sl
 8021ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021caa:	fb0c fc03 	mul.w	ip, ip, r3
 8021cae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021cb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021cb6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021cba:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021cbe:	4453      	add	r3, sl
 8021cc0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021cc4:	0a1b      	lsrs	r3, r3, #8
 8021cc6:	0a3f      	lsrs	r7, r7, #8
 8021cc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ccc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021cd0:	433b      	orrs	r3, r7
 8021cd2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021cd4:	2cff      	cmp	r4, #255	; 0xff
 8021cd6:	d020      	beq.n	8021d1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8021cd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021cda:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021cde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ce0:	4367      	muls	r7, r4
 8021ce2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ce4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ce8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021cec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021cee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021cf2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021cf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021cfa:	44bc      	add	ip, r7
 8021cfc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021d00:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d14:	ea4c 040a 	orr.w	r4, ip, sl
 8021d18:	940d      	str	r4, [sp, #52]	; 0x34
 8021d1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021d1c:	2cff      	cmp	r4, #255	; 0xff
 8021d1e:	d020      	beq.n	8021d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8021d20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021d22:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021d26:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021d28:	4367      	muls	r7, r4
 8021d2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021d2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021d30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021d34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021d36:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021d3a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021d3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d42:	44bc      	add	ip, r7
 8021d44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021d48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d5c:	ea4c 040a 	orr.w	r4, ip, sl
 8021d60:	9409      	str	r4, [sp, #36]	; 0x24
 8021d62:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021d64:	2cff      	cmp	r4, #255	; 0xff
 8021d66:	d020      	beq.n	8021daa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8021d68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d6a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021d6e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021d70:	4367      	muls	r7, r4
 8021d72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021d78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021d7c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021d7e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021d82:	fb04 fa0a 	mul.w	sl, r4, sl
 8021d86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021d8a:	44bc      	add	ip, r7
 8021d8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021d90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021da0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021da4:	ea4c 040a 	orr.w	r4, ip, sl
 8021da8:	940e      	str	r4, [sp, #56]	; 0x38
 8021daa:	43d2      	mvns	r2, r2
 8021dac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dae:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021db2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021db6:	fb0e f707 	mul.w	r7, lr, r7
 8021dba:	fb01 770c 	mla	r7, r1, ip, r7
 8021dbe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021dc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021dc8:	fb00 770c 	mla	r7, r0, ip, r7
 8021dcc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021dce:	b2d2      	uxtb	r2, r2
 8021dd0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021dd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dd6:	fb08 770c 	mla	r7, r8, ip, r7
 8021dda:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021dde:	fb0e fe0c 	mul.w	lr, lr, ip
 8021de2:	fb01 e303 	mla	r3, r1, r3, lr
 8021de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021de8:	0a3f      	lsrs	r7, r7, #8
 8021dea:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021dee:	fb00 330a 	mla	r3, r0, sl, r3
 8021df2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021df4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021df8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021dfc:	fb08 3c0c 	mla	ip, r8, ip, r3
 8021e00:	f8b9 3000 	ldrh.w	r3, [r9]
 8021e04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e08:	1218      	asrs	r0, r3, #8
 8021e0a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021e0e:	4350      	muls	r0, r2
 8021e10:	10d9      	asrs	r1, r3, #3
 8021e12:	00db      	lsls	r3, r3, #3
 8021e14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021e18:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e1c:	b2db      	uxtb	r3, r3
 8021e1e:	ea47 070c 	orr.w	r7, r7, ip
 8021e22:	4351      	muls	r1, r2
 8021e24:	4353      	muls	r3, r2
 8021e26:	1c42      	adds	r2, r0, #1
 8021e28:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021e2c:	0c3a      	lsrs	r2, r7, #16
 8021e2e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021e32:	4a18      	ldr	r2, [pc, #96]	; (8021e94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8021e34:	b2c0      	uxtb	r0, r0
 8021e36:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8021e3a:	1c4a      	adds	r2, r1, #1
 8021e3c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021e40:	0a3a      	lsrs	r2, r7, #8
 8021e42:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021e46:	00c9      	lsls	r1, r1, #3
 8021e48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021e4c:	4301      	orrs	r1, r0
 8021e4e:	1c58      	adds	r0, r3, #1
 8021e50:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021e54:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8021e58:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8021e5c:	4308      	orrs	r0, r1
 8021e5e:	f8a9 0000 	strh.w	r0, [r9]
 8021e62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021e64:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021e66:	f109 0902 	add.w	r9, r9, #2
 8021e6a:	441a      	add	r2, r3
 8021e6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e6e:	9225      	str	r2, [sp, #148]	; 0x94
 8021e70:	441d      	add	r5, r3
 8021e72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e76:	e64c      	b.n	8021b12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021e78:	2800      	cmp	r0, #0
 8021e7a:	f43f aeed 	beq.w	8021c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021e7e:	5c79      	ldrb	r1, [r7, r1]
 8021e80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e84:	9109      	str	r1, [sp, #36]	; 0x24
 8021e86:	0e09      	lsrs	r1, r1, #24
 8021e88:	9111      	str	r1, [sp, #68]	; 0x44
 8021e8a:	e6e5      	b.n	8021c58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8021e8c:	b01b      	add	sp, #108	; 0x6c
 8021e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e92:	bf00      	nop
 8021e94:	fffff800 	.word	0xfffff800

08021e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8021e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e9c:	b085      	sub	sp, #20
 8021e9e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8021ea2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8021ea6:	fb00 7406 	mla	r4, r0, r6, r7
 8021eaa:	2800      	cmp	r0, #0
 8021eac:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8021eb0:	9103      	str	r1, [sp, #12]
 8021eb2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8021eb6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8021eba:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8021ebe:	9501      	str	r5, [sp, #4]
 8021ec0:	eb03 0904 	add.w	r9, r3, r4
 8021ec4:	f2c0 8150 	blt.w	8022168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021ec8:	4583      	cmp	fp, r0
 8021eca:	f340 814d 	ble.w	8022168 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8021ece:	2f00      	cmp	r7, #0
 8021ed0:	f2c0 8146 	blt.w	8022160 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021ed4:	42be      	cmp	r6, r7
 8021ed6:	f340 8143 	ble.w	8022160 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8021eda:	f813 c004 	ldrb.w	ip, [r3, r4]
 8021ede:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8021ee2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8021ee6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021eea:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8021eee:	4355      	muls	r5, r2
 8021ef0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ef4:	fb0c f203 	mul.w	r2, ip, r3
 8021ef8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8021efc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8021f00:	441d      	add	r5, r3
 8021f02:	f102 0320 	add.w	r3, r2, #32
 8021f06:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f0a:	0a1b      	lsrs	r3, r3, #8
 8021f0c:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8021f10:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f14:	431c      	orrs	r4, r3
 8021f16:	1c7b      	adds	r3, r7, #1
 8021f18:	f100 812b 	bmi.w	8022172 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021f1c:	429e      	cmp	r6, r3
 8021f1e:	f340 8128 	ble.w	8022172 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8021f22:	2900      	cmp	r1, #0
 8021f24:	f000 8128 	beq.w	8022178 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8021f28:	9a01      	ldr	r2, [sp, #4]
 8021f2a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021f2e:	8855      	ldrh	r5, [r2, #2]
 8021f30:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8021f34:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8021f38:	fb08 f802 	mul.w	r8, r8, r2
 8021f3c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8021f40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021f44:	435d      	muls	r5, r3
 8021f46:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8021f4a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8021f4e:	44d0      	add	r8, sl
 8021f50:	f105 0a20 	add.w	sl, r5, #32
 8021f54:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021f58:	0a2d      	lsrs	r5, r5, #8
 8021f5a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8021f5e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021f62:	432a      	orrs	r2, r5
 8021f64:	3001      	adds	r0, #1
 8021f66:	f100 810d 	bmi.w	8022184 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021f6a:	4583      	cmp	fp, r0
 8021f6c:	f340 810a 	ble.w	8022184 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8021f70:	f1be 0f00 	cmp.w	lr, #0
 8021f74:	f000 810b 	beq.w	802218e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8021f78:	2f00      	cmp	r7, #0
 8021f7a:	f2c0 8100 	blt.w	802217e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021f7e:	42be      	cmp	r6, r7
 8021f80:	f340 80fd 	ble.w	802217e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8021f84:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8021f88:	9801      	ldr	r0, [sp, #4]
 8021f8a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8021f8e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8021f92:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021f96:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8021f9a:	fb0a fa00 	mul.w	sl, sl, r0
 8021f9e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021fa2:	fb05 f808 	mul.w	r8, r5, r8
 8021fa6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8021faa:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8021fae:	4482      	add	sl, r0
 8021fb0:	f108 0020 	add.w	r0, r8, #32
 8021fb4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021fb8:	0a00      	lsrs	r0, r0, #8
 8021fba:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8021fbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8021fc6:	3701      	adds	r7, #1
 8021fc8:	f100 80e6 	bmi.w	8022198 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021fcc:	42be      	cmp	r6, r7
 8021fce:	f340 80e3 	ble.w	8022198 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8021fd2:	2900      	cmp	r1, #0
 8021fd4:	f000 80e3 	beq.w	802219e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8021fd8:	9801      	ldr	r0, [sp, #4]
 8021fda:	3601      	adds	r6, #1
 8021fdc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8021fe0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8021fe4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8021fe8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021fec:	fb07 f800 	mul.w	r8, r7, r0
 8021ff0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8021ff4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8021ff8:	fb09 f906 	mul.w	r9, r9, r6
 8021ffc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022000:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022004:	44d1      	add	r9, sl
 8022006:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802200a:	f108 0020 	add.w	r0, r8, #32
 802200e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022012:	0a00      	lsrs	r0, r0, #8
 8022014:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022018:	4330      	orrs	r0, r6
 802201a:	b28e      	uxth	r6, r1
 802201c:	fa1f f98e 	uxth.w	r9, lr
 8022020:	fb06 f809 	mul.w	r8, r6, r9
 8022024:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8022028:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802202c:	0136      	lsls	r6, r6, #4
 802202e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022032:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022036:	9601      	str	r6, [sp, #4]
 8022038:	ea4a 0404 	orr.w	r4, sl, r4
 802203c:	fa1f f689 	uxth.w	r6, r9
 8022040:	9602      	str	r6, [sp, #8]
 8022042:	4626      	mov	r6, r4
 8022044:	fb11 f90e 	smulbb	r9, r1, lr
 8022048:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802204c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022050:	f1ce 0410 	rsb	r4, lr, #16
 8022054:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022058:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802205c:	1a64      	subs	r4, r4, r1
 802205e:	ea4a 0202 	orr.w	r2, sl, r2
 8022062:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8022066:	434a      	muls	r2, r1
 8022068:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802206c:	fb04 2406 	mla	r4, r4, r6, r2
 8022070:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022074:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022078:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802207c:	ea4a 0000 	orr.w	r0, sl, r0
 8022080:	fb09 4200 	mla	r2, r9, r0, r4
 8022084:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8022088:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802208c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022090:	ea44 0b0b 	orr.w	fp, r4, fp
 8022094:	9c01      	ldr	r4, [sp, #4]
 8022096:	9e02      	ldr	r6, [sp, #8]
 8022098:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 802209c:	1ba4      	subs	r4, r4, r6
 802209e:	9e01      	ldr	r6, [sp, #4]
 80220a0:	b2a4      	uxth	r4, r4
 80220a2:	eba6 0608 	sub.w	r6, r6, r8
 80220a6:	b2b6      	uxth	r6, r6
 80220a8:	4373      	muls	r3, r6
 80220aa:	fb0c 3304 	mla	r3, ip, r4, r3
 80220ae:	9c02      	ldr	r4, [sp, #8]
 80220b0:	9903      	ldr	r1, [sp, #12]
 80220b2:	fb04 3505 	mla	r5, r4, r5, r3
 80220b6:	fb08 5707 	mla	r7, r8, r7, r5
 80220ba:	8808      	ldrh	r0, [r1, #0]
 80220bc:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80220c0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80220c4:	b289      	uxth	r1, r1
 80220c6:	434f      	muls	r7, r1
 80220c8:	1c7b      	adds	r3, r7, #1
 80220ca:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80220ce:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80220d2:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80220d6:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80220da:	1203      	asrs	r3, r0, #8
 80220dc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80220e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80220e4:	b2ff      	uxtb	r7, r7
 80220e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220ea:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80220ee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80220f2:	fb13 f307 	smulbb	r3, r3, r7
 80220f6:	ea42 0e0e 	orr.w	lr, r2, lr
 80220fa:	fa1f f28e 	uxth.w	r2, lr
 80220fe:	1215      	asrs	r5, r2, #8
 8022100:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022104:	fb05 3501 	mla	r5, r5, r1, r3
 8022108:	10c3      	asrs	r3, r0, #3
 802210a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802210e:	fb13 f307 	smulbb	r3, r3, r7
 8022112:	10d4      	asrs	r4, r2, #3
 8022114:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022118:	fb04 3401 	mla	r4, r4, r1, r3
 802211c:	00c3      	lsls	r3, r0, #3
 802211e:	b2db      	uxtb	r3, r3
 8022120:	fb13 f307 	smulbb	r3, r3, r7
 8022124:	00d2      	lsls	r2, r2, #3
 8022126:	b2d2      	uxtb	r2, r2
 8022128:	fb02 3101 	mla	r1, r2, r1, r3
 802212c:	b2ad      	uxth	r5, r5
 802212e:	b289      	uxth	r1, r1
 8022130:	b2a4      	uxth	r4, r4
 8022132:	1c6b      	adds	r3, r5, #1
 8022134:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022138:	1c62      	adds	r2, r4, #1
 802213a:	1c4b      	adds	r3, r1, #1
 802213c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022140:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022144:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022148:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802214c:	0964      	lsrs	r4, r4, #5
 802214e:	432b      	orrs	r3, r5
 8022150:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022154:	9a03      	ldr	r2, [sp, #12]
 8022156:	4323      	orrs	r3, r4
 8022158:	8013      	strh	r3, [r2, #0]
 802215a:	b005      	add	sp, #20
 802215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022160:	f04f 0c00 	mov.w	ip, #0
 8022164:	4664      	mov	r4, ip
 8022166:	e6d6      	b.n	8021f16 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8022168:	2300      	movs	r3, #0
 802216a:	469c      	mov	ip, r3
 802216c:	461a      	mov	r2, r3
 802216e:	461c      	mov	r4, r3
 8022170:	e6f8      	b.n	8021f64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8022172:	2300      	movs	r3, #0
 8022174:	461a      	mov	r2, r3
 8022176:	e6f5      	b.n	8021f64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8022178:	460b      	mov	r3, r1
 802217a:	460a      	mov	r2, r1
 802217c:	e6f2      	b.n	8021f64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802217e:	2500      	movs	r5, #0
 8022180:	46ab      	mov	fp, r5
 8022182:	e720      	b.n	8021fc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8022184:	2700      	movs	r7, #0
 8022186:	463d      	mov	r5, r7
 8022188:	4638      	mov	r0, r7
 802218a:	46bb      	mov	fp, r7
 802218c:	e745      	b.n	802201a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802218e:	4677      	mov	r7, lr
 8022190:	4675      	mov	r5, lr
 8022192:	4670      	mov	r0, lr
 8022194:	46f3      	mov	fp, lr
 8022196:	e740      	b.n	802201a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8022198:	2700      	movs	r7, #0
 802219a:	4638      	mov	r0, r7
 802219c:	e73d      	b.n	802201a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802219e:	460f      	mov	r7, r1
 80221a0:	4608      	mov	r0, r1
 80221a2:	e73a      	b.n	802201a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080221a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80221a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221a8:	b097      	sub	sp, #92	; 0x5c
 80221aa:	9214      	str	r2, [sp, #80]	; 0x50
 80221ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80221ae:	9015      	str	r0, [sp, #84]	; 0x54
 80221b0:	9308      	str	r3, [sp, #32]
 80221b2:	6850      	ldr	r0, [r2, #4]
 80221b4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80221b8:	9111      	str	r1, [sp, #68]	; 0x44
 80221ba:	9312      	str	r3, [sp, #72]	; 0x48
 80221bc:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80221c0:	fb00 1303 	mla	r3, r0, r3, r1
 80221c4:	6812      	ldr	r2, [r2, #0]
 80221c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80221ca:	9309      	str	r3, [sp, #36]	; 0x24
 80221cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80221d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221d4:	685b      	ldr	r3, [r3, #4]
 80221d6:	930c      	str	r3, [sp, #48]	; 0x30
 80221d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80221dc:	930a      	str	r3, [sp, #40]	; 0x28
 80221de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80221e0:	2b00      	cmp	r3, #0
 80221e2:	dc03      	bgt.n	80221ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80221e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	f340 83cb 	ble.w	8022982 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80221ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221f6:	1e48      	subs	r0, r1, #1
 80221f8:	1e55      	subs	r5, r2, #1
 80221fa:	9b08      	ldr	r3, [sp, #32]
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	f340 81a3 	ble.w	8022548 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8022202:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8022204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022206:	1436      	asrs	r6, r6, #16
 8022208:	ea4f 4323 	mov.w	r3, r3, asr #16
 802220c:	d406      	bmi.n	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802220e:	4286      	cmp	r6, r0
 8022210:	da04      	bge.n	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022212:	2b00      	cmp	r3, #0
 8022214:	db02      	blt.n	802221c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022216:	42ab      	cmp	r3, r5
 8022218:	f2c0 8197 	blt.w	802254a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802221c:	3601      	adds	r6, #1
 802221e:	f100 8184 	bmi.w	802252a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022222:	42b1      	cmp	r1, r6
 8022224:	f2c0 8181 	blt.w	802252a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022228:	3301      	adds	r3, #1
 802222a:	f100 817e 	bmi.w	802252a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802222e:	429a      	cmp	r2, r3
 8022230:	f2c0 817b 	blt.w	802252a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8022234:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022238:	9b08      	ldr	r3, [sp, #32]
 802223a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802223c:	9313      	str	r3, [sp, #76]	; 0x4c
 802223e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022240:	2b00      	cmp	r3, #0
 8022242:	f340 81a4 	ble.w	802258e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022248:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802224a:	1418      	asrs	r0, r3, #16
 802224c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802224e:	142d      	asrs	r5, r5, #16
 8022250:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022256:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802225a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802225c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022260:	f100 81f8 	bmi.w	8022654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8022264:	f102 3eff 	add.w	lr, r2, #4294967295
 8022268:	4575      	cmp	r5, lr
 802226a:	f280 81f3 	bge.w	8022654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802226e:	2800      	cmp	r0, #0
 8022270:	f2c0 81f0 	blt.w	8022654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8022274:	f103 3eff 	add.w	lr, r3, #4294967295
 8022278:	4570      	cmp	r0, lr
 802227a:	f280 81eb 	bge.w	8022654 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802227e:	b212      	sxth	r2, r2
 8022280:	fb00 5002 	mla	r0, r0, r2, r5
 8022284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022286:	fa1f fe81 	uxth.w	lr, r1
 802228a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802228e:	eb03 0a00 	add.w	sl, r3, r0
 8022292:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022296:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802229a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802229e:	b29b      	uxth	r3, r3
 80222a0:	f1bc 0f00 	cmp.w	ip, #0
 80222a4:	f000 81b9 	beq.w	802261a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80222a8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80222ac:	eb0a 0b02 	add.w	fp, sl, r2
 80222b0:	fa1f fa8c 	uxth.w	sl, ip
 80222b4:	fb0a fe0e 	mul.w	lr, sl, lr
 80222b8:	eba5 050e 	sub.w	r5, r5, lr
 80222bc:	b2ad      	uxth	r5, r5
 80222be:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80222c2:	fb08 f505 	mul.w	r5, r8, r5
 80222c6:	fa1f fa8a 	uxth.w	sl, sl
 80222ca:	eba3 030a 	sub.w	r3, r3, sl
 80222ce:	b29b      	uxth	r3, r3
 80222d0:	940d      	str	r4, [sp, #52]	; 0x34
 80222d2:	fb09 5303 	mla	r3, r9, r3, r5
 80222d6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80222da:	940e      	str	r4, [sp, #56]	; 0x38
 80222dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222de:	fb0a 3304 	mla	r3, sl, r4, r3
 80222e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222e4:	fb0e 3304 	mla	r3, lr, r4, r3
 80222e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	f000 810f 	beq.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80222f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80222f8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80222fc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022300:	f000 8190 	beq.w	8022624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8022304:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022308:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802230c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022310:	fb09 f000 	mul.w	r0, r9, r0
 8022314:	fb0a fe0e 	mul.w	lr, sl, lr
 8022318:	f100 0b20 	add.w	fp, r0, #32
 802231c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022320:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022324:	44ce      	add	lr, r9
 8022326:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802232a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802232e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022332:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022336:	ea4e 0909 	orr.w	r9, lr, r9
 802233a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802233e:	8868      	ldrh	r0, [r5, #2]
 8022340:	d019      	beq.n	8022376 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8022342:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022346:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802234a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802234e:	fb08 f800 	mul.w	r8, r8, r0
 8022352:	fb0a fe0e 	mul.w	lr, sl, lr
 8022356:	f108 0b20 	add.w	fp, r8, #32
 802235a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802235e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022362:	4486      	add	lr, r0
 8022364:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022368:	0a00      	lsrs	r0, r0, #8
 802236a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802236e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022372:	ea4e 0000 	orr.w	r0, lr, r0
 8022376:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802237a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802237e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022382:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022386:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802238a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802238e:	ea4e 0909 	orr.w	r9, lr, r9
 8022392:	ea4a 0000 	orr.w	r0, sl, r0
 8022396:	f1bc 0f00 	cmp.w	ip, #0
 802239a:	f000 8145 	beq.w	8022628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802239e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80223a2:	3a01      	subs	r2, #1
 80223a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80223a6:	0052      	lsls	r2, r2, #1
 80223a8:	3202      	adds	r2, #2
 80223aa:	2cff      	cmp	r4, #255	; 0xff
 80223ac:	eb05 0e02 	add.w	lr, r5, r2
 80223b0:	5aaa      	ldrh	r2, [r5, r2]
 80223b2:	d018      	beq.n	80223e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80223b4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80223b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80223bc:	fb04 fa02 	mul.w	sl, r4, r2
 80223c0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80223c4:	fb08 f805 	mul.w	r8, r8, r5
 80223c8:	f10a 0520 	add.w	r5, sl, #32
 80223cc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80223d0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80223d4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80223d8:	4442      	add	r2, r8
 80223da:	0a2d      	lsrs	r5, r5, #8
 80223dc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80223e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80223e4:	432a      	orrs	r2, r5
 80223e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80223e8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80223ec:	2cff      	cmp	r4, #255	; 0xff
 80223ee:	d01a      	beq.n	8022426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80223f0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80223f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80223f8:	fb04 fa05 	mul.w	sl, r4, r5
 80223fc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022400:	fb08 f80e 	mul.w	r8, r8, lr
 8022404:	f10a 0e20 	add.w	lr, sl, #32
 8022408:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802240c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022410:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022414:	4445      	add	r5, r8
 8022416:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802241a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802241e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022422:	ea45 050e 	orr.w	r5, r5, lr
 8022426:	fb1c fe01 	smulbb	lr, ip, r1
 802242a:	f1cc 0810 	rsb	r8, ip, #16
 802242e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022432:	eba8 0801 	sub.w	r8, r8, r1
 8022436:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802243a:	4341      	muls	r1, r0
 802243c:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022440:	fb09 1108 	mla	r1, r9, r8, r1
 8022444:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022448:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802244c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022450:	ea4a 0202 	orr.w	r2, sl, r2
 8022454:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022458:	fb0c 1102 	mla	r1, ip, r2, r1
 802245c:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022460:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022464:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022468:	ea4b 0505 	orr.w	r5, fp, r5
 802246c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022470:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022474:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022478:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802247c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022480:	ea42 0e0e 	orr.w	lr, r2, lr
 8022484:	fa1f f28e 	uxth.w	r2, lr
 8022488:	2bff      	cmp	r3, #255	; 0xff
 802248a:	d103      	bne.n	8022494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802248c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802248e:	29ff      	cmp	r1, #255	; 0xff
 8022490:	f000 80de 	beq.w	8022650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8022494:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022496:	8838      	ldrh	r0, [r7, #0]
 8022498:	434b      	muls	r3, r1
 802249a:	f103 0c01 	add.w	ip, r3, #1
 802249e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80224a2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80224a6:	fa5f fc83 	uxtb.w	ip, r3
 80224aa:	1203      	asrs	r3, r0, #8
 80224ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80224b0:	fb13 f30c 	smulbb	r3, r3, ip
 80224b4:	1215      	asrs	r5, r2, #8
 80224b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80224ba:	fb05 3501 	mla	r5, r5, r1, r3
 80224be:	10c3      	asrs	r3, r0, #3
 80224c0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80224c4:	fb13 f30c 	smulbb	r3, r3, ip
 80224c8:	10d1      	asrs	r1, r2, #3
 80224ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80224cc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80224d0:	fb01 3104 	mla	r1, r1, r4, r3
 80224d4:	00c3      	lsls	r3, r0, #3
 80224d6:	b2db      	uxtb	r3, r3
 80224d8:	fb13 f30c 	smulbb	r3, r3, ip
 80224dc:	00d2      	lsls	r2, r2, #3
 80224de:	b2d2      	uxtb	r2, r2
 80224e0:	fb02 3304 	mla	r3, r2, r4, r3
 80224e4:	b2ad      	uxth	r5, r5
 80224e6:	b29a      	uxth	r2, r3
 80224e8:	1c6b      	adds	r3, r5, #1
 80224ea:	b289      	uxth	r1, r1
 80224ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80224f0:	1c53      	adds	r3, r2, #1
 80224f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80224f6:	1c4a      	adds	r2, r1, #1
 80224f8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80224fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022500:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022504:	0949      	lsrs	r1, r1, #5
 8022506:	432b      	orrs	r3, r5
 8022508:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802250c:	430b      	orrs	r3, r1
 802250e:	803b      	strh	r3, [r7, #0]
 8022510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022512:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022514:	3702      	adds	r7, #2
 8022516:	4413      	add	r3, r2
 8022518:	9321      	str	r3, [sp, #132]	; 0x84
 802251a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802251c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802251e:	441a      	add	r2, r3
 8022520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022522:	9222      	str	r2, [sp, #136]	; 0x88
 8022524:	3b01      	subs	r3, #1
 8022526:	9313      	str	r3, [sp, #76]	; 0x4c
 8022528:	e689      	b.n	802223e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802252a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802252c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802252e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8022530:	4433      	add	r3, r6
 8022532:	9321      	str	r3, [sp, #132]	; 0x84
 8022534:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022536:	441c      	add	r4, r3
 8022538:	9b08      	ldr	r3, [sp, #32]
 802253a:	9422      	str	r4, [sp, #136]	; 0x88
 802253c:	3b01      	subs	r3, #1
 802253e:	9308      	str	r3, [sp, #32]
 8022540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022542:	3302      	adds	r3, #2
 8022544:	9309      	str	r3, [sp, #36]	; 0x24
 8022546:	e658      	b.n	80221fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022548:	d028      	beq.n	802259c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802254a:	9b08      	ldr	r3, [sp, #32]
 802254c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802254e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8022550:	3b01      	subs	r3, #1
 8022552:	fb00 5003 	mla	r0, r0, r3, r5
 8022556:	1400      	asrs	r0, r0, #16
 8022558:	f53f ae6c 	bmi.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802255c:	3901      	subs	r1, #1
 802255e:	4288      	cmp	r0, r1
 8022560:	f6bf ae68 	bge.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022564:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022566:	9822      	ldr	r0, [sp, #136]	; 0x88
 8022568:	fb01 0303 	mla	r3, r1, r3, r0
 802256c:	141b      	asrs	r3, r3, #16
 802256e:	f53f ae61 	bmi.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022572:	3a01      	subs	r2, #1
 8022574:	4293      	cmp	r3, r2
 8022576:	f6bf ae5d 	bge.w	8022234 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802257a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802257e:	9b08      	ldr	r3, [sp, #32]
 8022580:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022584:	9313      	str	r3, [sp, #76]	; 0x4c
 8022586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022588:	2b00      	cmp	r3, #0
 802258a:	f300 8082 	bgt.w	8022692 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802258e:	9b08      	ldr	r3, [sp, #32]
 8022590:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022596:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802259a:	9309      	str	r3, [sp, #36]	; 0x24
 802259c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802259e:	2b00      	cmp	r3, #0
 80225a0:	f340 81ef 	ble.w	8022982 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80225a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80225ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80225b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80225b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80225b8:	eef0 6a62 	vmov.f32	s13, s5
 80225bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80225c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80225c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80225c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80225d0:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80225d4:	eef0 6a43 	vmov.f32	s13, s6
 80225d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80225dc:	ee12 2a90 	vmov	r2, s5
 80225e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80225e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80225e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80225ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80225ee:	ee13 2a10 	vmov	r2, s6
 80225f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80225f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80225f6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80225fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80225fe:	9324      	str	r3, [sp, #144]	; 0x90
 8022600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022604:	3b01      	subs	r3, #1
 8022606:	9311      	str	r3, [sp, #68]	; 0x44
 8022608:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802260a:	bf08      	it	eq
 802260c:	4613      	moveq	r3, r2
 802260e:	eeb0 3a67 	vmov.f32	s6, s15
 8022612:	9308      	str	r3, [sp, #32]
 8022614:	eef0 2a47 	vmov.f32	s5, s14
 8022618:	e5e1      	b.n	80221de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802261a:	fb08 f505 	mul.w	r5, r8, r5
 802261e:	fb09 5303 	mla	r3, r9, r3, r5
 8022622:	e661      	b.n	80222e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8022624:	4681      	mov	r9, r0
 8022626:	e688      	b.n	802233a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022628:	f1c1 0210 	rsb	r2, r1, #16
 802262c:	4341      	muls	r1, r0
 802262e:	fb09 1902 	mla	r9, r9, r2, r1
 8022632:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022636:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802263a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802263e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022642:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022646:	ea42 0909 	orr.w	r9, r2, r9
 802264a:	fa1f f289 	uxth.w	r2, r9
 802264e:	e71b      	b.n	8022488 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8022650:	803a      	strh	r2, [r7, #0]
 8022652:	e75d      	b.n	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022654:	f115 0e01 	adds.w	lr, r5, #1
 8022658:	f53f af5a 	bmi.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802265c:	4572      	cmp	r2, lr
 802265e:	f6ff af57 	blt.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022662:	f110 0e01 	adds.w	lr, r0, #1
 8022666:	f53f af53 	bmi.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802266a:	4573      	cmp	r3, lr
 802266c:	f6ff af50 	blt.w	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022670:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022672:	b21b      	sxth	r3, r3
 8022674:	b212      	sxth	r2, r2
 8022676:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802267a:	9301      	str	r3, [sp, #4]
 802267c:	9200      	str	r2, [sp, #0]
 802267e:	e9cd c405 	strd	ip, r4, [sp, #20]
 8022682:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8022686:	9502      	str	r5, [sp, #8]
 8022688:	4639      	mov	r1, r7
 802268a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802268c:	f7ff fc04 	bl	8021e98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022690:	e73e      	b.n	8022510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022694:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802269a:	fa1f fc82 	uxth.w	ip, r2
 802269e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80226a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80226a4:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80226a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80226ae:	141f      	asrs	r7, r3, #16
 80226b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80226b2:	141b      	asrs	r3, r3, #16
 80226b4:	fb01 3707 	mla	r7, r1, r7, r3
 80226b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226ba:	eb03 0a07 	add.w	sl, r3, r7
 80226be:	f813 9007 	ldrb.w	r9, [r3, r7]
 80226c2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80226c6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80226ca:	b29b      	uxth	r3, r3
 80226cc:	2d00      	cmp	r5, #0
 80226ce:	f000 813d 	beq.w	802294c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80226d2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80226d6:	eb0a 0b01 	add.w	fp, sl, r1
 80226da:	fa1f fa85 	uxth.w	sl, r5
 80226de:	fb0a fc0c 	mul.w	ip, sl, ip
 80226e2:	eba0 000c 	sub.w	r0, r0, ip
 80226e6:	b280      	uxth	r0, r0
 80226e8:	fb08 f000 	mul.w	r0, r8, r0
 80226ec:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80226f0:	fa1f fa8a 	uxth.w	sl, sl
 80226f4:	eba3 030a 	sub.w	r3, r3, sl
 80226f8:	b29b      	uxth	r3, r3
 80226fa:	fb09 0303 	mla	r3, r9, r3, r0
 80226fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8022700:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022702:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022706:	fb0a 3300 	mla	r3, sl, r0, r3
 802270a:	fb0c 3304 	mla	r3, ip, r4, r3
 802270e:	9410      	str	r4, [sp, #64]	; 0x40
 8022710:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022714:	2b00      	cmp	r3, #0
 8022716:	f000 810b 	beq.w	8022930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802271a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802271c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802271e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022722:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022726:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802272a:	f000 8114 	beq.w	8022956 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 802272e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022732:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022736:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802273a:	fb09 f707 	mul.w	r7, r9, r7
 802273e:	fb0a fc0c 	mul.w	ip, sl, ip
 8022742:	f107 0b20 	add.w	fp, r7, #32
 8022746:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802274a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802274e:	44cc      	add	ip, r9
 8022750:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022754:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022758:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802275c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022760:	ea4c 0909 	orr.w	r9, ip, r9
 8022764:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022768:	8847      	ldrh	r7, [r0, #2]
 802276a:	d019      	beq.n	80227a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 802276c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022770:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022774:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022778:	fb08 f807 	mul.w	r8, r8, r7
 802277c:	fb0a fc0c 	mul.w	ip, sl, ip
 8022780:	f108 0b20 	add.w	fp, r8, #32
 8022784:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022788:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802278c:	44bc      	add	ip, r7
 802278e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022792:	0a3f      	lsrs	r7, r7, #8
 8022794:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022798:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802279c:	ea4c 0707 	orr.w	r7, ip, r7
 80227a0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80227a4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80227a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80227ac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80227b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80227b4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80227b8:	ea4c 0909 	orr.w	r9, ip, r9
 80227bc:	ea4a 0707 	orr.w	r7, sl, r7
 80227c0:	2d00      	cmp	r5, #0
 80227c2:	f000 80ca 	beq.w	802295a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80227c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80227ca:	3901      	subs	r1, #1
 80227cc:	0049      	lsls	r1, r1, #1
 80227ce:	3102      	adds	r1, #2
 80227d0:	eb00 0c01 	add.w	ip, r0, r1
 80227d4:	5a41      	ldrh	r1, [r0, r1]
 80227d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80227d8:	28ff      	cmp	r0, #255	; 0xff
 80227da:	d019      	beq.n	8022810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 80227dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80227de:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80227e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80227e6:	fb04 fa01 	mul.w	sl, r4, r1
 80227ea:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80227ee:	fb08 f800 	mul.w	r8, r8, r0
 80227f2:	f10a 0020 	add.w	r0, sl, #32
 80227f6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80227fa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80227fe:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022802:	4441      	add	r1, r8
 8022804:	0a00      	lsrs	r0, r0, #8
 8022806:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802280a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802280e:	4301      	orrs	r1, r0
 8022810:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022812:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022816:	2cff      	cmp	r4, #255	; 0xff
 8022818:	d01a      	beq.n	8022850 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 802281a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802281e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022822:	fb04 fa00 	mul.w	sl, r4, r0
 8022826:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802282a:	fb08 f80c 	mul.w	r8, r8, ip
 802282e:	f10a 0c20 	add.w	ip, sl, #32
 8022832:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022836:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802283a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802283e:	4440      	add	r0, r8
 8022840:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022844:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022848:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802284c:	ea40 000c 	orr.w	r0, r0, ip
 8022850:	fb15 fc02 	smulbb	ip, r5, r2
 8022854:	f1c5 0810 	rsb	r8, r5, #16
 8022858:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802285c:	eba8 0802 	sub.w	r8, r8, r2
 8022860:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022864:	437a      	muls	r2, r7
 8022866:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802286a:	fb09 2208 	mla	r2, r9, r8, r2
 802286e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022872:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022876:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802287a:	ea4a 0101 	orr.w	r1, sl, r1
 802287e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022882:	fb05 2201 	mla	r2, r5, r1, r2
 8022886:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802288a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802288e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022892:	ea4b 0000 	orr.w	r0, fp, r0
 8022896:	fb0c 2200 	mla	r2, ip, r0, r2
 802289a:	0d57      	lsrs	r7, r2, #21
 802289c:	0952      	lsrs	r2, r2, #5
 802289e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80228a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80228a6:	433a      	orrs	r2, r7
 80228a8:	2bff      	cmp	r3, #255	; 0xff
 80228aa:	b292      	uxth	r2, r2
 80228ac:	d102      	bne.n	80228b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80228ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80228b0:	29ff      	cmp	r1, #255	; 0xff
 80228b2:	d063      	beq.n	802297c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 80228b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228b6:	f8be 1000 	ldrh.w	r1, [lr]
 80228ba:	4343      	muls	r3, r0
 80228bc:	1c58      	adds	r0, r3, #1
 80228be:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80228c2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80228c6:	1208      	asrs	r0, r1, #8
 80228c8:	b2db      	uxtb	r3, r3
 80228ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80228ce:	fb10 f003 	smulbb	r0, r0, r3
 80228d2:	10cf      	asrs	r7, r1, #3
 80228d4:	00c9      	lsls	r1, r1, #3
 80228d6:	b2c9      	uxtb	r1, r1
 80228d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80228da:	1215      	asrs	r5, r2, #8
 80228dc:	fb11 f103 	smulbb	r1, r1, r3
 80228e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80228e4:	fb05 0504 	mla	r5, r5, r4, r0
 80228e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80228ec:	10d0      	asrs	r0, r2, #3
 80228ee:	00d2      	lsls	r2, r2, #3
 80228f0:	fb17 f703 	smulbb	r7, r7, r3
 80228f4:	b2d2      	uxtb	r2, r2
 80228f6:	fb02 1204 	mla	r2, r2, r4, r1
 80228fa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80228fe:	fb00 7004 	mla	r0, r0, r4, r7
 8022902:	b2ad      	uxth	r5, r5
 8022904:	b292      	uxth	r2, r2
 8022906:	1c6b      	adds	r3, r5, #1
 8022908:	1c57      	adds	r7, r2, #1
 802290a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802290e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022912:	b280      	uxth	r0, r0
 8022914:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022918:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802291c:	433d      	orrs	r5, r7
 802291e:	1c47      	adds	r7, r0, #1
 8022920:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022924:	097f      	lsrs	r7, r7, #5
 8022926:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802292a:	433d      	orrs	r5, r7
 802292c:	f8ae 5000 	strh.w	r5, [lr]
 8022930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022932:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022934:	f10e 0e02 	add.w	lr, lr, #2
 8022938:	4413      	add	r3, r2
 802293a:	9321      	str	r3, [sp, #132]	; 0x84
 802293c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802293e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022940:	441a      	add	r2, r3
 8022942:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022944:	9222      	str	r2, [sp, #136]	; 0x88
 8022946:	3b01      	subs	r3, #1
 8022948:	9313      	str	r3, [sp, #76]	; 0x4c
 802294a:	e61c      	b.n	8022586 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802294c:	fb08 f000 	mul.w	r0, r8, r0
 8022950:	fb09 0303 	mla	r3, r9, r3, r0
 8022954:	e6dc      	b.n	8022710 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8022956:	46b9      	mov	r9, r7
 8022958:	e704      	b.n	8022764 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802295a:	f1c2 0110 	rsb	r1, r2, #16
 802295e:	437a      	muls	r2, r7
 8022960:	fb09 2901 	mla	r9, r9, r1, r2
 8022964:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022968:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802296c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022970:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022974:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022978:	4302      	orrs	r2, r0
 802297a:	e795      	b.n	80228a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802297c:	f8ae 2000 	strh.w	r2, [lr]
 8022980:	e7d6      	b.n	8022930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8022982:	b017      	add	sp, #92	; 0x5c
 8022984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022988 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802298c:	b085      	sub	sp, #20
 802298e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022992:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8022996:	fb00 7406 	mla	r4, r0, r6, r7
 802299a:	2800      	cmp	r0, #0
 802299c:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80229a0:	9103      	str	r1, [sp, #12]
 80229a2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80229a6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80229aa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80229ae:	9501      	str	r5, [sp, #4]
 80229b0:	eb02 0904 	add.w	r9, r2, r4
 80229b4:	f2c0 8141 	blt.w	8022c3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80229b8:	4583      	cmp	fp, r0
 80229ba:	f340 813e 	ble.w	8022c3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80229be:	2f00      	cmp	r7, #0
 80229c0:	f2c0 8137 	blt.w	8022c32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80229c4:	42be      	cmp	r6, r7
 80229c6:	f340 8134 	ble.w	8022c32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80229ca:	f812 c004 	ldrb.w	ip, [r2, r4]
 80229ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80229d2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80229d6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80229da:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80229de:	4355      	muls	r5, r2
 80229e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80229e4:	fb0c f203 	mul.w	r2, ip, r3
 80229e8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80229ec:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80229f0:	441d      	add	r5, r3
 80229f2:	f102 0320 	add.w	r3, r2, #32
 80229f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80229fa:	0a1b      	lsrs	r3, r3, #8
 80229fc:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8022a00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022a04:	431c      	orrs	r4, r3
 8022a06:	1c7b      	adds	r3, r7, #1
 8022a08:	f100 811c 	bmi.w	8022c44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022a0c:	429e      	cmp	r6, r3
 8022a0e:	f340 8119 	ble.w	8022c44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8022a12:	2900      	cmp	r1, #0
 8022a14:	f000 8119 	beq.w	8022c4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8022a18:	9a01      	ldr	r2, [sp, #4]
 8022a1a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022a1e:	8855      	ldrh	r5, [r2, #2]
 8022a20:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8022a24:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8022a28:	fb08 f802 	mul.w	r8, r8, r2
 8022a2c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8022a30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a34:	435d      	muls	r5, r3
 8022a36:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8022a3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022a3e:	44d0      	add	r8, sl
 8022a40:	f105 0a20 	add.w	sl, r5, #32
 8022a44:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022a48:	0a2d      	lsrs	r5, r5, #8
 8022a4a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8022a4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a52:	432a      	orrs	r2, r5
 8022a54:	3001      	adds	r0, #1
 8022a56:	f100 80fe 	bmi.w	8022c56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022a5a:	4583      	cmp	fp, r0
 8022a5c:	f340 80fb 	ble.w	8022c56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8022a60:	f1be 0f00 	cmp.w	lr, #0
 8022a64:	f000 80fc 	beq.w	8022c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8022a68:	2f00      	cmp	r7, #0
 8022a6a:	f2c0 80f1 	blt.w	8022c50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022a6e:	42be      	cmp	r6, r7
 8022a70:	f340 80ee 	ble.w	8022c50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8022a74:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022a78:	9801      	ldr	r0, [sp, #4]
 8022a7a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022a7e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8022a82:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022a86:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8022a8a:	fb0a fa00 	mul.w	sl, sl, r0
 8022a8e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022a92:	fb05 f808 	mul.w	r8, r5, r8
 8022a96:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8022a9a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8022a9e:	4482      	add	sl, r0
 8022aa0:	f108 0020 	add.w	r0, r8, #32
 8022aa4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022aa8:	0a00      	lsrs	r0, r0, #8
 8022aaa:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8022aae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022ab2:	ea4b 0b00 	orr.w	fp, fp, r0
 8022ab6:	3701      	adds	r7, #1
 8022ab8:	f100 80d7 	bmi.w	8022c6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022abc:	42be      	cmp	r6, r7
 8022abe:	f340 80d4 	ble.w	8022c6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8022ac2:	2900      	cmp	r1, #0
 8022ac4:	f000 80d4 	beq.w	8022c70 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8022ac8:	9801      	ldr	r0, [sp, #4]
 8022aca:	3601      	adds	r6, #1
 8022acc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8022ad0:	f819 7006 	ldrb.w	r7, [r9, r6]
 8022ad4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8022ad8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022adc:	fb07 f800 	mul.w	r8, r7, r0
 8022ae0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8022ae4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8022ae8:	fb09 f906 	mul.w	r9, r9, r6
 8022aec:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8022af0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8022af4:	44d1      	add	r9, sl
 8022af6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8022afa:	f108 0020 	add.w	r0, r8, #32
 8022afe:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022b02:	0a00      	lsrs	r0, r0, #8
 8022b04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022b08:	4330      	orrs	r0, r6
 8022b0a:	b28e      	uxth	r6, r1
 8022b0c:	fa1f f98e 	uxth.w	r9, lr
 8022b10:	fb06 f809 	mul.w	r8, r6, r9
 8022b14:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8022b18:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022b1c:	0136      	lsls	r6, r6, #4
 8022b1e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022b22:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022b26:	9601      	str	r6, [sp, #4]
 8022b28:	ea4a 0404 	orr.w	r4, sl, r4
 8022b2c:	fa1f f689 	uxth.w	r6, r9
 8022b30:	9602      	str	r6, [sp, #8]
 8022b32:	4626      	mov	r6, r4
 8022b34:	fb11 f90e 	smulbb	r9, r1, lr
 8022b38:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022b3c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8022b40:	f1ce 0410 	rsb	r4, lr, #16
 8022b44:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022b48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b4c:	1a64      	subs	r4, r4, r1
 8022b4e:	ea4a 0202 	orr.w	r2, sl, r2
 8022b52:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8022b56:	434a      	muls	r2, r1
 8022b58:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8022b5c:	fb04 2406 	mla	r4, r4, r6, r2
 8022b60:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022b64:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022b68:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022b6c:	ea4a 0000 	orr.w	r0, sl, r0
 8022b70:	fb09 4200 	mla	r2, r9, r0, r4
 8022b74:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8022b78:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022b7c:	9801      	ldr	r0, [sp, #4]
 8022b7e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8022b82:	ea44 0b0b 	orr.w	fp, r4, fp
 8022b86:	9c02      	ldr	r4, [sp, #8]
 8022b88:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022b8c:	1b00      	subs	r0, r0, r4
 8022b8e:	9c01      	ldr	r4, [sp, #4]
 8022b90:	b280      	uxth	r0, r0
 8022b92:	eba4 0608 	sub.w	r6, r4, r8
 8022b96:	b2b6      	uxth	r6, r6
 8022b98:	4373      	muls	r3, r6
 8022b9a:	fb0c 3300 	mla	r3, ip, r0, r3
 8022b9e:	9802      	ldr	r0, [sp, #8]
 8022ba0:	9903      	ldr	r1, [sp, #12]
 8022ba2:	fb00 3505 	mla	r5, r0, r5, r3
 8022ba6:	fb08 5707 	mla	r7, r8, r7, r5
 8022baa:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8022bae:	8809      	ldrh	r1, [r1, #0]
 8022bb0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8022bb4:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8022bb8:	120b      	asrs	r3, r1, #8
 8022bba:	b2ff      	uxtb	r7, r7
 8022bbc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022bc0:	437b      	muls	r3, r7
 8022bc2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022bc6:	10c8      	asrs	r0, r1, #3
 8022bc8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022bcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022bd0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022bd4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022bd8:	00c9      	lsls	r1, r1, #3
 8022bda:	4378      	muls	r0, r7
 8022bdc:	ea42 0e0e 	orr.w	lr, r2, lr
 8022be0:	b2c9      	uxtb	r1, r1
 8022be2:	fa1f f28e 	uxth.w	r2, lr
 8022be6:	434f      	muls	r7, r1
 8022be8:	1c59      	adds	r1, r3, #1
 8022bea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022bee:	1213      	asrs	r3, r2, #8
 8022bf0:	f023 0307 	bic.w	r3, r3, #7
 8022bf4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022bf8:	1c41      	adds	r1, r0, #1
 8022bfa:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022bfe:	10d1      	asrs	r1, r2, #3
 8022c00:	f021 0103 	bic.w	r1, r1, #3
 8022c04:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022c08:	021b      	lsls	r3, r3, #8
 8022c0a:	00c9      	lsls	r1, r1, #3
 8022c0c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022c10:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022c14:	430b      	orrs	r3, r1
 8022c16:	1c79      	adds	r1, r7, #1
 8022c18:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022c1c:	00d2      	lsls	r2, r2, #3
 8022c1e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022c22:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022c26:	431a      	orrs	r2, r3
 8022c28:	9b03      	ldr	r3, [sp, #12]
 8022c2a:	801a      	strh	r2, [r3, #0]
 8022c2c:	b005      	add	sp, #20
 8022c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c32:	f04f 0c00 	mov.w	ip, #0
 8022c36:	4664      	mov	r4, ip
 8022c38:	e6e5      	b.n	8022a06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8022c3a:	2300      	movs	r3, #0
 8022c3c:	469c      	mov	ip, r3
 8022c3e:	461a      	mov	r2, r3
 8022c40:	461c      	mov	r4, r3
 8022c42:	e707      	b.n	8022a54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022c44:	2300      	movs	r3, #0
 8022c46:	461a      	mov	r2, r3
 8022c48:	e704      	b.n	8022a54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022c4a:	460b      	mov	r3, r1
 8022c4c:	460a      	mov	r2, r1
 8022c4e:	e701      	b.n	8022a54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8022c50:	2500      	movs	r5, #0
 8022c52:	46ab      	mov	fp, r5
 8022c54:	e72f      	b.n	8022ab6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8022c56:	2700      	movs	r7, #0
 8022c58:	463d      	mov	r5, r7
 8022c5a:	4638      	mov	r0, r7
 8022c5c:	46bb      	mov	fp, r7
 8022c5e:	e754      	b.n	8022b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022c60:	4677      	mov	r7, lr
 8022c62:	4675      	mov	r5, lr
 8022c64:	4670      	mov	r0, lr
 8022c66:	46f3      	mov	fp, lr
 8022c68:	e74f      	b.n	8022b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022c6a:	2700      	movs	r7, #0
 8022c6c:	4638      	mov	r0, r7
 8022c6e:	e74c      	b.n	8022b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8022c70:	460f      	mov	r7, r1
 8022c72:	4608      	mov	r0, r1
 8022c74:	e749      	b.n	8022b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08022c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c7c:	b093      	sub	sp, #76	; 0x4c
 8022c7e:	9210      	str	r2, [sp, #64]	; 0x40
 8022c80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022c82:	9011      	str	r0, [sp, #68]	; 0x44
 8022c84:	6850      	ldr	r0, [r2, #4]
 8022c86:	910e      	str	r1, [sp, #56]	; 0x38
 8022c88:	9306      	str	r3, [sp, #24]
 8022c8a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022c8e:	fb00 1303 	mla	r3, r0, r3, r1
 8022c92:	6812      	ldr	r2, [r2, #0]
 8022c94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c98:	9307      	str	r3, [sp, #28]
 8022c9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	9308      	str	r3, [sp, #32]
 8022ca0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ca2:	685b      	ldr	r3, [r3, #4]
 8022ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8022ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	dc03      	bgt.n	8022cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	f340 83b4 	ble.w	802341c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022cb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cbe:	1e48      	subs	r0, r1, #1
 8022cc0:	1e55      	subs	r5, r2, #1
 8022cc2:	9b06      	ldr	r3, [sp, #24]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	f340 8163 	ble.w	8022f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8022cca:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022ccc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022cce:	1436      	asrs	r6, r6, #16
 8022cd0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022cd4:	d406      	bmi.n	8022ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022cd6:	4286      	cmp	r6, r0
 8022cd8:	da04      	bge.n	8022ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	db02      	blt.n	8022ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022cde:	42ab      	cmp	r3, r5
 8022ce0:	f2c0 8157 	blt.w	8022f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022ce4:	3601      	adds	r6, #1
 8022ce6:	f100 8144 	bmi.w	8022f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022cea:	42b1      	cmp	r1, r6
 8022cec:	f2c0 8141 	blt.w	8022f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022cf0:	3301      	adds	r3, #1
 8022cf2:	f100 813e 	bmi.w	8022f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022cf6:	429a      	cmp	r2, r3
 8022cf8:	f2c0 813b 	blt.w	8022f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8022cfc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022d00:	9b06      	ldr	r3, [sp, #24]
 8022d02:	9f07      	ldr	r7, [sp, #28]
 8022d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	f340 8164 	ble.w	8022fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8022d0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022d10:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022d12:	1418      	asrs	r0, r3, #16
 8022d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d16:	142d      	asrs	r5, r5, #16
 8022d18:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022d1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022d1e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8022d22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022d24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022d28:	f100 81ee 	bmi.w	8023108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022d2c:	f102 3eff 	add.w	lr, r2, #4294967295
 8022d30:	4575      	cmp	r5, lr
 8022d32:	f280 81e9 	bge.w	8023108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022d36:	2800      	cmp	r0, #0
 8022d38:	f2c0 81e6 	blt.w	8023108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022d3c:	f103 3eff 	add.w	lr, r3, #4294967295
 8022d40:	4570      	cmp	r0, lr
 8022d42:	f280 81e1 	bge.w	8023108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022d46:	b212      	sxth	r2, r2
 8022d48:	fb00 5002 	mla	r0, r0, r2, r5
 8022d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d4e:	fa1f fe81 	uxth.w	lr, r1
 8022d52:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8022d56:	eb03 0a00 	add.w	sl, r3, r0
 8022d5a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8022d5e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8022d62:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022d66:	b29b      	uxth	r3, r3
 8022d68:	f1bc 0f00 	cmp.w	ip, #0
 8022d6c:	f000 8179 	beq.w	8023062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022d70:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8022d74:	eb0a 0b02 	add.w	fp, sl, r2
 8022d78:	fa1f fa8c 	uxth.w	sl, ip
 8022d7c:	fb0a fe0e 	mul.w	lr, sl, lr
 8022d80:	eba5 050e 	sub.w	r5, r5, lr
 8022d84:	b2ad      	uxth	r5, r5
 8022d86:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8022d8a:	fb08 f505 	mul.w	r5, r8, r5
 8022d8e:	fa1f fa8a 	uxth.w	sl, sl
 8022d92:	eba3 030a 	sub.w	r3, r3, sl
 8022d96:	b29b      	uxth	r3, r3
 8022d98:	940a      	str	r4, [sp, #40]	; 0x28
 8022d9a:	fb09 5303 	mla	r3, r9, r3, r5
 8022d9e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022da2:	940b      	str	r4, [sp, #44]	; 0x2c
 8022da4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022da6:	fb0a 3304 	mla	r3, sl, r4, r3
 8022daa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022dac:	fb0e 3304 	mla	r3, lr, r4, r3
 8022db0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	f000 80cf 	beq.w	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022dba:	9c08      	ldr	r4, [sp, #32]
 8022dbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dc0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022dc4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022dc8:	f000 8150 	beq.w	802306c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022dcc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022dd0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022dd4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022dd8:	fb09 f000 	mul.w	r0, r9, r0
 8022ddc:	fb0a fe0e 	mul.w	lr, sl, lr
 8022de0:	f100 0b20 	add.w	fp, r0, #32
 8022de4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022de8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022dec:	44ce      	add	lr, r9
 8022dee:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8022df2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022df6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022dfa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022dfe:	ea4e 0909 	orr.w	r9, lr, r9
 8022e02:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022e06:	8868      	ldrh	r0, [r5, #2]
 8022e08:	d019      	beq.n	8022e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022e0a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8022e0e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022e12:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e16:	fb08 f800 	mul.w	r8, r8, r0
 8022e1a:	fb0a fe0e 	mul.w	lr, sl, lr
 8022e1e:	f108 0b20 	add.w	fp, r8, #32
 8022e22:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8022e26:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022e2a:	4486      	add	lr, r0
 8022e2c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8022e30:	0a00      	lsrs	r0, r0, #8
 8022e32:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022e36:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e3a:	ea4e 0000 	orr.w	r0, lr, r0
 8022e3e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8022e42:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022e46:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022e4a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022e4e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e52:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022e56:	ea4e 0909 	orr.w	r9, lr, r9
 8022e5a:	ea4a 0000 	orr.w	r0, sl, r0
 8022e5e:	f1bc 0f00 	cmp.w	ip, #0
 8022e62:	f000 8105 	beq.w	8023070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8022e66:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8022e6a:	3a01      	subs	r2, #1
 8022e6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e6e:	0052      	lsls	r2, r2, #1
 8022e70:	3202      	adds	r2, #2
 8022e72:	2cff      	cmp	r4, #255	; 0xff
 8022e74:	eb05 0e02 	add.w	lr, r5, r2
 8022e78:	5aaa      	ldrh	r2, [r5, r2]
 8022e7a:	d018      	beq.n	8022eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022e7c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8022e80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e84:	fb04 fa02 	mul.w	sl, r4, r2
 8022e88:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022e8c:	fb08 f805 	mul.w	r8, r8, r5
 8022e90:	f10a 0520 	add.w	r5, sl, #32
 8022e94:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8022e98:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8022e9c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022ea0:	4442      	add	r2, r8
 8022ea2:	0a2d      	lsrs	r5, r5, #8
 8022ea4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8022ea8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022eac:	432a      	orrs	r2, r5
 8022eae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022eb0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022eb4:	2cff      	cmp	r4, #255	; 0xff
 8022eb6:	d01a      	beq.n	8022eee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022eb8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022ebc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022ec0:	fb04 fa05 	mul.w	sl, r4, r5
 8022ec4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022ec8:	fb08 f80e 	mul.w	r8, r8, lr
 8022ecc:	f10a 0e20 	add.w	lr, sl, #32
 8022ed0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022ed4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022ed8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022edc:	4445      	add	r5, r8
 8022ede:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ee2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8022ee6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022eea:	ea45 050e 	orr.w	r5, r5, lr
 8022eee:	fb1c fe01 	smulbb	lr, ip, r1
 8022ef2:	f1cc 0810 	rsb	r8, ip, #16
 8022ef6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022efa:	eba8 0801 	sub.w	r8, r8, r1
 8022efe:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022f02:	4341      	muls	r1, r0
 8022f04:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022f08:	fb09 1108 	mla	r1, r9, r8, r1
 8022f0c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022f10:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022f14:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f18:	ea4a 0202 	orr.w	r2, sl, r2
 8022f1c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022f20:	fb0c 1102 	mla	r1, ip, r2, r1
 8022f24:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022f28:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022f2c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022f30:	ea4b 0505 	orr.w	r5, fp, r5
 8022f34:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022f38:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022f3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022f40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f44:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022f48:	ea42 0e0e 	orr.w	lr, r2, lr
 8022f4c:	fa1f f28e 	uxth.w	r2, lr
 8022f50:	2bff      	cmp	r3, #255	; 0xff
 8022f52:	f040 80a1 	bne.w	8023098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8022f56:	803a      	strh	r2, [r7, #0]
 8022f58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022f5c:	3702      	adds	r7, #2
 8022f5e:	4413      	add	r3, r2
 8022f60:	931d      	str	r3, [sp, #116]	; 0x74
 8022f62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022f64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f66:	441a      	add	r2, r3
 8022f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f6a:	921e      	str	r2, [sp, #120]	; 0x78
 8022f6c:	3b01      	subs	r3, #1
 8022f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f70:	e6c9      	b.n	8022d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022f72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022f74:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022f76:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022f78:	4433      	add	r3, r6
 8022f7a:	931d      	str	r3, [sp, #116]	; 0x74
 8022f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f7e:	441c      	add	r4, r3
 8022f80:	9b06      	ldr	r3, [sp, #24]
 8022f82:	941e      	str	r4, [sp, #120]	; 0x78
 8022f84:	3b01      	subs	r3, #1
 8022f86:	9306      	str	r3, [sp, #24]
 8022f88:	9b07      	ldr	r3, [sp, #28]
 8022f8a:	3302      	adds	r3, #2
 8022f8c:	9307      	str	r3, [sp, #28]
 8022f8e:	e698      	b.n	8022cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022f90:	d028      	beq.n	8022fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022f92:	9b06      	ldr	r3, [sp, #24]
 8022f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022f96:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022f98:	3b01      	subs	r3, #1
 8022f9a:	fb00 5003 	mla	r0, r0, r3, r5
 8022f9e:	1400      	asrs	r0, r0, #16
 8022fa0:	f53f aeac 	bmi.w	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022fa4:	3901      	subs	r1, #1
 8022fa6:	4288      	cmp	r0, r1
 8022fa8:	f6bf aea8 	bge.w	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022fac:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022fae:	981e      	ldr	r0, [sp, #120]	; 0x78
 8022fb0:	fb01 0303 	mla	r3, r1, r3, r0
 8022fb4:	141b      	asrs	r3, r3, #16
 8022fb6:	f53f aea1 	bmi.w	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022fba:	3a01      	subs	r2, #1
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	f6bf ae9d 	bge.w	8022cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022fc2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022fc6:	9b06      	ldr	r3, [sp, #24]
 8022fc8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	f300 80b6 	bgt.w	8023142 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8022fd6:	9b06      	ldr	r3, [sp, #24]
 8022fd8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022fdc:	9b07      	ldr	r3, [sp, #28]
 8022fde:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022fe2:	9307      	str	r3, [sp, #28]
 8022fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	f340 8218 	ble.w	802341c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8022fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ff0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ff4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ff8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022ffc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023000:	eef0 6a62 	vmov.f32	s13, s5
 8023004:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023008:	ee77 2a62 	vsub.f32	s5, s14, s5
 802300c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023010:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023014:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023018:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802301c:	eef0 6a43 	vmov.f32	s13, s6
 8023020:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023024:	ee12 2a90 	vmov	r2, s5
 8023028:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802302c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802302e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023032:	fb92 f3f3 	sdiv	r3, r2, r3
 8023036:	ee13 2a10 	vmov	r2, s6
 802303a:	931f      	str	r3, [sp, #124]	; 0x7c
 802303c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802303e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8023042:	fb92 f3f3 	sdiv	r3, r2, r3
 8023046:	9320      	str	r3, [sp, #128]	; 0x80
 8023048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802304a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802304c:	3b01      	subs	r3, #1
 802304e:	930e      	str	r3, [sp, #56]	; 0x38
 8023050:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023052:	bf08      	it	eq
 8023054:	4613      	moveq	r3, r2
 8023056:	eeb0 3a67 	vmov.f32	s6, s15
 802305a:	9306      	str	r3, [sp, #24]
 802305c:	eef0 2a47 	vmov.f32	s5, s14
 8023060:	e621      	b.n	8022ca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8023062:	fb08 f505 	mul.w	r5, r8, r5
 8023066:	fb09 5303 	mla	r3, r9, r3, r5
 802306a:	e6a1      	b.n	8022db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802306c:	4681      	mov	r9, r0
 802306e:	e6c8      	b.n	8022e02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8023070:	f1c1 0210 	rsb	r2, r1, #16
 8023074:	4341      	muls	r1, r0
 8023076:	fb09 1902 	mla	r9, r9, r2, r1
 802307a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802307e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8023082:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023086:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802308a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802308e:	ea42 0909 	orr.w	r9, r2, r9
 8023092:	fa1f f289 	uxth.w	r2, r9
 8023096:	e75b      	b.n	8022f50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023098:	43db      	mvns	r3, r3
 802309a:	f8b7 c000 	ldrh.w	ip, [r7]
 802309e:	fa5f fe83 	uxtb.w	lr, r3
 80230a2:	ea4f 202c 	mov.w	r0, ip, asr #8
 80230a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80230aa:	fb00 f00e 	mul.w	r0, r0, lr
 80230ae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80230b2:	1c41      	adds	r1, r0, #1
 80230b4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80230b8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80230bc:	fb05 f50e 	mul.w	r5, r5, lr
 80230c0:	1211      	asrs	r1, r2, #8
 80230c2:	f021 0107 	bic.w	r1, r1, #7
 80230c6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80230ca:	48d6      	ldr	r0, [pc, #856]	; (8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80230cc:	b2c9      	uxtb	r1, r1
 80230ce:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80230d2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80230d6:	1c69      	adds	r1, r5, #1
 80230d8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80230dc:	b2db      	uxtb	r3, r3
 80230de:	10d1      	asrs	r1, r2, #3
 80230e0:	fb03 f30e 	mul.w	r3, r3, lr
 80230e4:	f021 0103 	bic.w	r1, r1, #3
 80230e8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80230ec:	00c9      	lsls	r1, r1, #3
 80230ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80230f2:	4301      	orrs	r1, r0
 80230f4:	1c58      	adds	r0, r3, #1
 80230f6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80230fa:	00d2      	lsls	r2, r2, #3
 80230fc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023100:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023104:	430a      	orrs	r2, r1
 8023106:	e726      	b.n	8022f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8023108:	f115 0e01 	adds.w	lr, r5, #1
 802310c:	f53f af24 	bmi.w	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023110:	4572      	cmp	r2, lr
 8023112:	f6ff af21 	blt.w	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023116:	f110 0e01 	adds.w	lr, r0, #1
 802311a:	f53f af1d 	bmi.w	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802311e:	4573      	cmp	r3, lr
 8023120:	f6ff af1a 	blt.w	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023124:	b21b      	sxth	r3, r3
 8023126:	b212      	sxth	r2, r2
 8023128:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802312c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8023130:	9301      	str	r3, [sp, #4]
 8023132:	9200      	str	r2, [sp, #0]
 8023134:	4639      	mov	r1, r7
 8023136:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802313a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802313c:	f7ff fc24 	bl	8022988 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8023140:	e70a      	b.n	8022f58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023144:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802314a:	fa1f fc82 	uxth.w	ip, r2
 802314e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8023152:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023154:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8023158:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802315c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802315e:	141f      	asrs	r7, r3, #16
 8023160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023162:	141b      	asrs	r3, r3, #16
 8023164:	fb01 3707 	mla	r7, r1, r7, r3
 8023168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802316a:	eb03 0a07 	add.w	sl, r3, r7
 802316e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8023172:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8023176:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802317a:	b29b      	uxth	r3, r3
 802317c:	2d00      	cmp	r5, #0
 802317e:	f000 80fe 	beq.w	802337e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8023182:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023186:	eb0a 0b01 	add.w	fp, sl, r1
 802318a:	fa1f fa85 	uxth.w	sl, r5
 802318e:	fb0a fc0c 	mul.w	ip, sl, ip
 8023192:	eba0 000c 	sub.w	r0, r0, ip
 8023196:	b280      	uxth	r0, r0
 8023198:	fb08 f000 	mul.w	r0, r8, r0
 802319c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80231a0:	fa1f fa8a 	uxth.w	sl, sl
 80231a4:	eba3 030a 	sub.w	r3, r3, sl
 80231a8:	b29b      	uxth	r3, r3
 80231aa:	fb09 0303 	mla	r3, r9, r3, r0
 80231ae:	940c      	str	r4, [sp, #48]	; 0x30
 80231b0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80231b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80231b6:	fb0a 3300 	mla	r3, sl, r0, r3
 80231ba:	fb0c 3304 	mla	r3, ip, r4, r3
 80231be:	940d      	str	r4, [sp, #52]	; 0x34
 80231c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	f000 80cc 	beq.w	8023362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80231ca:	9808      	ldr	r0, [sp, #32]
 80231cc:	9c08      	ldr	r4, [sp, #32]
 80231ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80231d2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80231d6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80231da:	f000 80d5 	beq.w	8023388 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80231de:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80231e2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80231e6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80231ea:	fb09 f707 	mul.w	r7, r9, r7
 80231ee:	fb0a fc0c 	mul.w	ip, sl, ip
 80231f2:	f107 0b20 	add.w	fp, r7, #32
 80231f6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80231fa:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80231fe:	44cc      	add	ip, r9
 8023200:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023204:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023208:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802320c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023210:	ea4c 0909 	orr.w	r9, ip, r9
 8023214:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023218:	8847      	ldrh	r7, [r0, #2]
 802321a:	d019      	beq.n	8023250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 802321c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023220:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8023224:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023228:	fb08 f807 	mul.w	r8, r8, r7
 802322c:	fb0a fc0c 	mul.w	ip, sl, ip
 8023230:	f108 0b20 	add.w	fp, r8, #32
 8023234:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8023238:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802323c:	44bc      	add	ip, r7
 802323e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8023242:	0a3f      	lsrs	r7, r7, #8
 8023244:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8023248:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802324c:	ea4c 0707 	orr.w	r7, ip, r7
 8023250:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8023254:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023258:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802325c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023260:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023264:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023268:	ea4c 0909 	orr.w	r9, ip, r9
 802326c:	ea4a 0707 	orr.w	r7, sl, r7
 8023270:	2d00      	cmp	r5, #0
 8023272:	f000 808b 	beq.w	802338c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8023276:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802327a:	3901      	subs	r1, #1
 802327c:	0049      	lsls	r1, r1, #1
 802327e:	3102      	adds	r1, #2
 8023280:	eb00 0c01 	add.w	ip, r0, r1
 8023284:	5a41      	ldrh	r1, [r0, r1]
 8023286:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023288:	28ff      	cmp	r0, #255	; 0xff
 802328a:	d019      	beq.n	80232c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 802328c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802328e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023292:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023296:	fb04 fa01 	mul.w	sl, r4, r1
 802329a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802329e:	fb08 f800 	mul.w	r8, r8, r0
 80232a2:	f10a 0020 	add.w	r0, sl, #32
 80232a6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80232aa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80232ae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80232b2:	4441      	add	r1, r8
 80232b4:	0a00      	lsrs	r0, r0, #8
 80232b6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80232ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80232be:	4301      	orrs	r1, r0
 80232c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80232c2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80232c6:	2cff      	cmp	r4, #255	; 0xff
 80232c8:	d01a      	beq.n	8023300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80232ca:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80232ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80232d2:	fb04 fa00 	mul.w	sl, r4, r0
 80232d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80232da:	fb08 f80c 	mul.w	r8, r8, ip
 80232de:	f10a 0c20 	add.w	ip, sl, #32
 80232e2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80232e6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80232ea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80232ee:	4440      	add	r0, r8
 80232f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232f4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80232f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80232fc:	ea40 000c 	orr.w	r0, r0, ip
 8023300:	fb15 fc02 	smulbb	ip, r5, r2
 8023304:	f1c5 0810 	rsb	r8, r5, #16
 8023308:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802330c:	eba8 0802 	sub.w	r8, r8, r2
 8023310:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8023314:	437a      	muls	r2, r7
 8023316:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802331a:	fb09 2208 	mla	r2, r9, r8, r2
 802331e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023322:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023326:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802332a:	ea4a 0101 	orr.w	r1, sl, r1
 802332e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8023332:	fb05 2201 	mla	r2, r5, r1, r2
 8023336:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802333a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802333e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023342:	ea4b 0000 	orr.w	r0, fp, r0
 8023346:	fb0c 2200 	mla	r2, ip, r0, r2
 802334a:	0d57      	lsrs	r7, r2, #21
 802334c:	0952      	lsrs	r2, r2, #5
 802334e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023352:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023356:	433a      	orrs	r2, r7
 8023358:	2bff      	cmp	r3, #255	; 0xff
 802335a:	b292      	uxth	r2, r2
 802335c:	d127      	bne.n	80233ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802335e:	f8ae 2000 	strh.w	r2, [lr]
 8023362:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023364:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023366:	f10e 0e02 	add.w	lr, lr, #2
 802336a:	4413      	add	r3, r2
 802336c:	931d      	str	r3, [sp, #116]	; 0x74
 802336e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023370:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023372:	441a      	add	r2, r3
 8023374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023376:	921e      	str	r2, [sp, #120]	; 0x78
 8023378:	3b01      	subs	r3, #1
 802337a:	930f      	str	r3, [sp, #60]	; 0x3c
 802337c:	e627      	b.n	8022fce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802337e:	fb08 f000 	mul.w	r0, r8, r0
 8023382:	fb09 0303 	mla	r3, r9, r3, r0
 8023386:	e71b      	b.n	80231c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8023388:	46b9      	mov	r9, r7
 802338a:	e743      	b.n	8023214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 802338c:	f1c2 0110 	rsb	r1, r2, #16
 8023390:	437a      	muls	r2, r7
 8023392:	fb09 2901 	mla	r9, r9, r1, r2
 8023396:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802339a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802339e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80233a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80233a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80233aa:	4302      	orrs	r2, r0
 80233ac:	e7d4      	b.n	8023358 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80233ae:	43db      	mvns	r3, r3
 80233b0:	f8be 7000 	ldrh.w	r7, [lr]
 80233b4:	fa5f fc83 	uxtb.w	ip, r3
 80233b8:	1238      	asrs	r0, r7, #8
 80233ba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80233be:	fb00 f00c 	mul.w	r0, r0, ip
 80233c2:	10fd      	asrs	r5, r7, #3
 80233c4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80233c8:	fb05 f10c 	mul.w	r1, r5, ip
 80233cc:	1c45      	adds	r5, r0, #1
 80233ce:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80233d2:	1215      	asrs	r5, r2, #8
 80233d4:	f025 0507 	bic.w	r5, r5, #7
 80233d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80233dc:	00fb      	lsls	r3, r7, #3
 80233de:	1c4d      	adds	r5, r1, #1
 80233e0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80233e4:	b2db      	uxtb	r3, r3
 80233e6:	10d1      	asrs	r1, r2, #3
 80233e8:	fb03 f30c 	mul.w	r3, r3, ip
 80233ec:	f021 0103 	bic.w	r1, r1, #3
 80233f0:	4c0c      	ldr	r4, [pc, #48]	; (8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80233f2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80233f6:	b2c0      	uxtb	r0, r0
 80233f8:	00c9      	lsls	r1, r1, #3
 80233fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80233fe:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8023402:	4308      	orrs	r0, r1
 8023404:	1c59      	adds	r1, r3, #1
 8023406:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802340a:	00d2      	lsls	r2, r2, #3
 802340c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023410:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023414:	4318      	orrs	r0, r3
 8023416:	f8ae 0000 	strh.w	r0, [lr]
 802341a:	e7a2      	b.n	8023362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802341c:	b013      	add	sp, #76	; 0x4c
 802341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023422:	bf00      	nop
 8023424:	fffff800 	.word	0xfffff800

08023428 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8023428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802342c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8023430:	fb05 4c03 	mla	ip, r5, r3, r4
 8023434:	2d00      	cmp	r5, #0
 8023436:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802343a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802343e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8023442:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023446:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802344a:	8808      	ldrh	r0, [r1, #0]
 802344c:	f2c0 80a7 	blt.w	802359e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023450:	45aa      	cmp	sl, r5
 8023452:	f340 80a4 	ble.w	802359e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8023456:	2c00      	cmp	r4, #0
 8023458:	f2c0 809f 	blt.w	802359a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802345c:	42a3      	cmp	r3, r4
 802345e:	f340 809c 	ble.w	802359a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8023462:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8023466:	1c62      	adds	r2, r4, #1
 8023468:	f100 809c 	bmi.w	80235a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802346c:	4293      	cmp	r3, r2
 802346e:	f340 8099 	ble.w	80235a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8023472:	f1b9 0f00 	cmp.w	r9, #0
 8023476:	f000 8095 	beq.w	80235a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802347a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802347e:	3501      	adds	r5, #1
 8023480:	f100 8094 	bmi.w	80235ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023484:	45aa      	cmp	sl, r5
 8023486:	f340 8091 	ble.w	80235ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802348a:	2f00      	cmp	r7, #0
 802348c:	f000 808e 	beq.w	80235ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8023490:	2c00      	cmp	r4, #0
 8023492:	f2c0 8089 	blt.w	80235a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8023496:	42a3      	cmp	r3, r4
 8023498:	f340 8086 	ble.w	80235a8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802349c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80234a0:	3401      	adds	r4, #1
 80234a2:	f100 8086 	bmi.w	80235b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80234a6:	42a3      	cmp	r3, r4
 80234a8:	f340 8083 	ble.w	80235b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80234ac:	f1b9 0f00 	cmp.w	r9, #0
 80234b0:	d07f      	beq.n	80235b2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80234b2:	3301      	adds	r3, #1
 80234b4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80234b8:	fb19 fe07 	smulbb	lr, r9, r7
 80234bc:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80234c0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80234c4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80234c8:	ea44 0808 	orr.w	r8, r4, r8
 80234cc:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80234d0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80234d4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80234d8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80234dc:	ea44 0c0c 	orr.w	ip, r4, ip
 80234e0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80234e4:	fb04 f40c 	mul.w	r4, r4, ip
 80234e8:	f1c7 0210 	rsb	r2, r7, #16
 80234ec:	eba2 0209 	sub.w	r2, r2, r9
 80234f0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80234f4:	fb02 4808 	mla	r8, r2, r8, r4
 80234f8:	b2b4      	uxth	r4, r6
 80234fa:	43f6      	mvns	r6, r6
 80234fc:	041a      	lsls	r2, r3, #16
 80234fe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023502:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023506:	4313      	orrs	r3, r2
 8023508:	fb0e 8303 	mla	r3, lr, r3, r8
 802350c:	042a      	lsls	r2, r5, #16
 802350e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023512:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023516:	432a      	orrs	r2, r5
 8023518:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802351c:	fb07 3202 	mla	r2, r7, r2, r3
 8023520:	0d53      	lsrs	r3, r2, #21
 8023522:	0952      	lsrs	r2, r2, #5
 8023524:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023528:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802352c:	431a      	orrs	r2, r3
 802352e:	b293      	uxth	r3, r2
 8023530:	1202      	asrs	r2, r0, #8
 8023532:	b2f6      	uxtb	r6, r6
 8023534:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023538:	fb12 f206 	smulbb	r2, r2, r6
 802353c:	10c7      	asrs	r7, r0, #3
 802353e:	00c0      	lsls	r0, r0, #3
 8023540:	b2c0      	uxtb	r0, r0
 8023542:	121d      	asrs	r5, r3, #8
 8023544:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023548:	fb10 f006 	smulbb	r0, r0, r6
 802354c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023550:	fb17 f706 	smulbb	r7, r7, r6
 8023554:	fb05 2504 	mla	r5, r5, r4, r2
 8023558:	10da      	asrs	r2, r3, #3
 802355a:	00db      	lsls	r3, r3, #3
 802355c:	b2db      	uxtb	r3, r3
 802355e:	fb03 0004 	mla	r0, r3, r4, r0
 8023562:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023566:	fb02 7204 	mla	r2, r2, r4, r7
 802356a:	b2ad      	uxth	r5, r5
 802356c:	b280      	uxth	r0, r0
 802356e:	1c6b      	adds	r3, r5, #1
 8023570:	b292      	uxth	r2, r2
 8023572:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023576:	1c43      	adds	r3, r0, #1
 8023578:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802357c:	1c50      	adds	r0, r2, #1
 802357e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023582:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023586:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802358a:	0952      	lsrs	r2, r2, #5
 802358c:	432b      	orrs	r3, r5
 802358e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023592:	4313      	orrs	r3, r2
 8023594:	800b      	strh	r3, [r1, #0]
 8023596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802359a:	4680      	mov	r8, r0
 802359c:	e763      	b.n	8023466 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802359e:	4684      	mov	ip, r0
 80235a0:	4680      	mov	r8, r0
 80235a2:	e76c      	b.n	802347e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80235a4:	4684      	mov	ip, r0
 80235a6:	e76a      	b.n	802347e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80235a8:	4605      	mov	r5, r0
 80235aa:	e779      	b.n	80234a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80235ac:	4603      	mov	r3, r0
 80235ae:	4605      	mov	r5, r0
 80235b0:	e782      	b.n	80234b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80235b2:	4603      	mov	r3, r0
 80235b4:	e780      	b.n	80234b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080235b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80235b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235ba:	b093      	sub	sp, #76	; 0x4c
 80235bc:	461d      	mov	r5, r3
 80235be:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80235c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80235c4:	910a      	str	r1, [sp, #40]	; 0x28
 80235c6:	9210      	str	r2, [sp, #64]	; 0x40
 80235c8:	6859      	ldr	r1, [r3, #4]
 80235ca:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80235ce:	681b      	ldr	r3, [r3, #0]
 80235d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80235d2:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80235d6:	fb01 2707 	mla	r7, r1, r7, r2
 80235da:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80235de:	9307      	str	r3, [sp, #28]
 80235e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80235e2:	9011      	str	r0, [sp, #68]	; 0x44
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	9309      	str	r3, [sp, #36]	; 0x24
 80235e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80235ea:	43db      	mvns	r3, r3
 80235ec:	b2db      	uxtb	r3, r3
 80235ee:	9308      	str	r3, [sp, #32]
 80235f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	dc03      	bgt.n	80235fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80235f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80235f8:	2b00      	cmp	r3, #0
 80235fa:	f340 8203 	ble.w	8023a04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80235fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023600:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023604:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023608:	1e48      	subs	r0, r1, #1
 802360a:	f102 3cff 	add.w	ip, r2, #4294967295
 802360e:	2d00      	cmp	r5, #0
 8023610:	f340 80da 	ble.w	80237c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023614:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023618:	ea4f 4326 	mov.w	r3, r6, asr #16
 802361c:	d406      	bmi.n	802362c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802361e:	4586      	cmp	lr, r0
 8023620:	da04      	bge.n	802362c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023622:	2b00      	cmp	r3, #0
 8023624:	db02      	blt.n	802362c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023626:	4563      	cmp	r3, ip
 8023628:	f2c0 80cf 	blt.w	80237ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802362c:	f11e 0e01 	adds.w	lr, lr, #1
 8023630:	f100 80c1 	bmi.w	80237b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023634:	4571      	cmp	r1, lr
 8023636:	f2c0 80be 	blt.w	80237b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802363a:	3301      	adds	r3, #1
 802363c:	f100 80bb 	bmi.w	80237b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023640:	429a      	cmp	r2, r3
 8023642:	f2c0 80b8 	blt.w	80237b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023646:	46a9      	mov	r9, r5
 8023648:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802364c:	f1b9 0f00 	cmp.w	r9, #0
 8023650:	f340 80d8 	ble.w	8023804 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023654:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023656:	1421      	asrs	r1, r4, #16
 8023658:	ea4f 4026 	mov.w	r0, r6, asr #16
 802365c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023660:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023664:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023668:	f100 8111 	bmi.w	802388e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802366c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023670:	4551      	cmp	r1, sl
 8023672:	f280 810c 	bge.w	802388e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023676:	2800      	cmp	r0, #0
 8023678:	f2c0 8109 	blt.w	802388e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802367c:	f103 3aff 	add.w	sl, r3, #4294967295
 8023680:	4550      	cmp	r0, sl
 8023682:	f280 8104 	bge.w	802388e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8023686:	fa0f f38e 	sxth.w	r3, lr
 802368a:	fb00 1103 	mla	r1, r0, r3, r1
 802368e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023690:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023694:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023698:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802369c:	f1bc 0f00 	cmp.w	ip, #0
 80236a0:	d007      	beq.n	80236b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80236a2:	005b      	lsls	r3, r3, #1
 80236a4:	eb0a 0003 	add.w	r0, sl, r3
 80236a8:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80236ac:	930c      	str	r3, [sp, #48]	; 0x30
 80236ae:	8843      	ldrh	r3, [r0, #2]
 80236b0:	930d      	str	r3, [sp, #52]	; 0x34
 80236b2:	fb12 f30c 	smulbb	r3, r2, ip
 80236b6:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80236ba:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80236be:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80236c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80236c6:	10db      	asrs	r3, r3, #3
 80236c8:	ea40 000e 	orr.w	r0, r0, lr
 80236cc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80236d0:	f1cc 0e10 	rsb	lr, ip, #16
 80236d4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80236d8:	ebae 0e02 	sub.w	lr, lr, r2
 80236dc:	ea4a 0101 	orr.w	r1, sl, r1
 80236e0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80236e4:	4351      	muls	r1, r2
 80236e6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80236ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80236ec:	fb0e 1e00 	mla	lr, lr, r0, r1
 80236f0:	0410      	lsls	r0, r2, #16
 80236f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80236f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80236fa:	4310      	orrs	r0, r2
 80236fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80236fe:	fb03 e000 	mla	r0, r3, r0, lr
 8023702:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023704:	0412      	lsls	r2, r2, #16
 8023706:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802370a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802370e:	ea42 020e 	orr.w	r2, r2, lr
 8023712:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023716:	fb03 0302 	mla	r3, r3, r2, r0
 802371a:	f8b8 0000 	ldrh.w	r0, [r8]
 802371e:	9f08      	ldr	r7, [sp, #32]
 8023720:	0d5a      	lsrs	r2, r3, #21
 8023722:	1201      	asrs	r1, r0, #8
 8023724:	095b      	lsrs	r3, r3, #5
 8023726:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802372a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802372e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023732:	4313      	orrs	r3, r2
 8023734:	fb11 f107 	smulbb	r1, r1, r7
 8023738:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802373c:	00c0      	lsls	r0, r0, #3
 802373e:	b29b      	uxth	r3, r3
 8023740:	b2c0      	uxtb	r0, r0
 8023742:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023746:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802374a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802374e:	fb10 f007 	smulbb	r0, r0, r7
 8023752:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023756:	fb1e fe07 	smulbb	lr, lr, r7
 802375a:	fb0c 1c02 	mla	ip, ip, r2, r1
 802375e:	10d9      	asrs	r1, r3, #3
 8023760:	00db      	lsls	r3, r3, #3
 8023762:	b2db      	uxtb	r3, r3
 8023764:	fb03 0302 	mla	r3, r3, r2, r0
 8023768:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802376c:	fb01 e102 	mla	r1, r1, r2, lr
 8023770:	fa1f fc8c 	uxth.w	ip, ip
 8023774:	b29a      	uxth	r2, r3
 8023776:	f10c 0301 	add.w	r3, ip, #1
 802377a:	b289      	uxth	r1, r1
 802377c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023780:	1c53      	adds	r3, r2, #1
 8023782:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023786:	1c4a      	adds	r2, r1, #1
 8023788:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802378c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023790:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023794:	0949      	lsrs	r1, r1, #5
 8023796:	ea43 030c 	orr.w	r3, r3, ip
 802379a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802379e:	430b      	orrs	r3, r1
 80237a0:	f8a8 3000 	strh.w	r3, [r8]
 80237a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80237a6:	f108 0802 	add.w	r8, r8, #2
 80237aa:	441c      	add	r4, r3
 80237ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80237b2:	441e      	add	r6, r3
 80237b4:	e74a      	b.n	802364c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80237b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80237b8:	3d01      	subs	r5, #1
 80237ba:	441c      	add	r4, r3
 80237bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80237be:	441e      	add	r6, r3
 80237c0:	9b07      	ldr	r3, [sp, #28]
 80237c2:	3302      	adds	r3, #2
 80237c4:	9307      	str	r3, [sp, #28]
 80237c6:	e722      	b.n	802360e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80237c8:	d022      	beq.n	8023810 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80237ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80237cc:	1e6b      	subs	r3, r5, #1
 80237ce:	fb00 4003 	mla	r0, r0, r3, r4
 80237d2:	1400      	asrs	r0, r0, #16
 80237d4:	f53f af37 	bmi.w	8023646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80237d8:	3901      	subs	r1, #1
 80237da:	4288      	cmp	r0, r1
 80237dc:	f6bf af33 	bge.w	8023646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80237e0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80237e2:	fb01 6303 	mla	r3, r1, r3, r6
 80237e6:	141b      	asrs	r3, r3, #16
 80237e8:	f53f af2d 	bmi.w	8023646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80237ec:	3a01      	subs	r2, #1
 80237ee:	4293      	cmp	r3, r2
 80237f0:	f6bf af29 	bge.w	8023646 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80237f4:	46a8      	mov	r8, r5
 80237f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80237fa:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80237fe:	f1b8 0f00 	cmp.w	r8, #0
 8023802:	dc5e      	bgt.n	80238c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023804:	9b07      	ldr	r3, [sp, #28]
 8023806:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802380a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802380e:	9307      	str	r3, [sp, #28]
 8023810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023812:	2b00      	cmp	r3, #0
 8023814:	f340 80f6 	ble.w	8023a04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802381c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023820:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023824:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023828:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802382c:	eef0 6a62 	vmov.f32	s13, s5
 8023830:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023834:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023838:	ee61 7a27 	vmul.f32	s15, s2, s15
 802383c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023840:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023844:	ee16 4a90 	vmov	r4, s13
 8023848:	eef0 6a43 	vmov.f32	s13, s6
 802384c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023850:	ee12 2a90 	vmov	r2, s5
 8023854:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023858:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802385a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802385e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023862:	ee13 2a10 	vmov	r2, s6
 8023866:	931f      	str	r3, [sp, #124]	; 0x7c
 8023868:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802386a:	ee16 6a90 	vmov	r6, s13
 802386e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023872:	9320      	str	r3, [sp, #128]	; 0x80
 8023874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023876:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023878:	3b01      	subs	r3, #1
 802387a:	930a      	str	r3, [sp, #40]	; 0x28
 802387c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802387e:	bf0c      	ite	eq
 8023880:	4615      	moveq	r5, r2
 8023882:	461d      	movne	r5, r3
 8023884:	eeb0 3a67 	vmov.f32	s6, s15
 8023888:	eef0 2a47 	vmov.f32	s5, s14
 802388c:	e6b0      	b.n	80235f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802388e:	f111 0a01 	adds.w	sl, r1, #1
 8023892:	d487      	bmi.n	80237a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023894:	45d6      	cmp	lr, sl
 8023896:	db85      	blt.n	80237a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023898:	f110 0a01 	adds.w	sl, r0, #1
 802389c:	d482      	bmi.n	80237a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802389e:	4553      	cmp	r3, sl
 80238a0:	db80      	blt.n	80237a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80238a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80238a4:	b21b      	sxth	r3, r3
 80238a6:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80238aa:	9101      	str	r1, [sp, #4]
 80238ac:	9300      	str	r3, [sp, #0]
 80238ae:	e9cd c704 	strd	ip, r7, [sp, #16]
 80238b2:	fa0f f38e 	sxth.w	r3, lr
 80238b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238b8:	4641      	mov	r1, r8
 80238ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80238bc:	f7ff fdb4 	bl	8023428 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80238c0:	e770      	b.n	80237a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80238c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80238c4:	1430      	asrs	r0, r6, #16
 80238c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238ca:	1423      	asrs	r3, r4, #16
 80238cc:	fb01 3000 	mla	r0, r1, r0, r3
 80238d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80238d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80238d8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80238dc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80238e0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80238e4:	8858      	ldrh	r0, [r3, #2]
 80238e6:	f1be 0f00 	cmp.w	lr, #0
 80238ea:	d00b      	beq.n	8023904 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80238ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80238f0:	3901      	subs	r1, #1
 80238f2:	0049      	lsls	r1, r1, #1
 80238f4:	3102      	adds	r1, #2
 80238f6:	eb03 0b01 	add.w	fp, r3, r1
 80238fa:	5a5b      	ldrh	r3, [r3, r1]
 80238fc:	930e      	str	r3, [sp, #56]	; 0x38
 80238fe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023902:	930f      	str	r3, [sp, #60]	; 0x3c
 8023904:	fb12 f30e 	smulbb	r3, r2, lr
 8023908:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802390c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023910:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023914:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8023918:	10db      	asrs	r3, r3, #3
 802391a:	ea41 010c 	orr.w	r1, r1, ip
 802391e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023922:	f1ce 0c10 	rsb	ip, lr, #16
 8023926:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802392a:	ebac 0c02 	sub.w	ip, ip, r2
 802392e:	ea4b 0000 	orr.w	r0, fp, r0
 8023932:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023936:	4350      	muls	r0, r2
 8023938:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802393c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802393e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023942:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023946:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802394a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802394e:	ea4b 0101 	orr.w	r1, fp, r1
 8023952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023954:	fb03 c101 	mla	r1, r3, r1, ip
 8023958:	980e      	ldr	r0, [sp, #56]	; 0x38
 802395a:	0412      	lsls	r2, r2, #16
 802395c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023960:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023964:	4302      	orrs	r2, r0
 8023966:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802396a:	fb03 1202 	mla	r2, r3, r2, r1
 802396e:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8023972:	0952      	lsrs	r2, r2, #5
 8023974:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8023978:	f8b9 2000 	ldrh.w	r2, [r9]
 802397c:	9f08      	ldr	r7, [sp, #32]
 802397e:	1211      	asrs	r1, r2, #8
 8023980:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023984:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023988:	fb11 f107 	smulbb	r1, r1, r7
 802398c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8023990:	ea4b 0303 	orr.w	r3, fp, r3
 8023994:	00d2      	lsls	r2, r2, #3
 8023996:	b29b      	uxth	r3, r3
 8023998:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802399c:	b2d2      	uxtb	r2, r2
 802399e:	1218      	asrs	r0, r3, #8
 80239a0:	fb1c fc07 	smulbb	ip, ip, r7
 80239a4:	fb12 f207 	smulbb	r2, r2, r7
 80239a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80239ac:	fb00 100a 	mla	r0, r0, sl, r1
 80239b0:	10d9      	asrs	r1, r3, #3
 80239b2:	00db      	lsls	r3, r3, #3
 80239b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80239b8:	b2db      	uxtb	r3, r3
 80239ba:	fb01 c10a 	mla	r1, r1, sl, ip
 80239be:	fb03 230a 	mla	r3, r3, sl, r2
 80239c2:	b280      	uxth	r0, r0
 80239c4:	b29b      	uxth	r3, r3
 80239c6:	b289      	uxth	r1, r1
 80239c8:	1c42      	adds	r2, r0, #1
 80239ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80239ce:	f101 0c01 	add.w	ip, r1, #1
 80239d2:	1c5a      	adds	r2, r3, #1
 80239d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80239d8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80239dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80239de:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80239e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80239e6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80239ea:	4310      	orrs	r0, r2
 80239ec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80239f0:	441c      	add	r4, r3
 80239f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239f4:	ea40 000c 	orr.w	r0, r0, ip
 80239f8:	f829 0b02 	strh.w	r0, [r9], #2
 80239fc:	441e      	add	r6, r3
 80239fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a02:	e6fc      	b.n	80237fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023a04:	b013      	add	sp, #76	; 0x4c
 8023a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8023a0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a0e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8023a12:	fb0e 4703 	mla	r7, lr, r3, r4
 8023a16:	f1be 0f00 	cmp.w	lr, #0
 8023a1a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8023a1e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8023a22:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8023a26:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8023a2a:	8808      	ldrh	r0, [r1, #0]
 8023a2c:	db60      	blt.n	8023af0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023a2e:	45f1      	cmp	r9, lr
 8023a30:	dd5e      	ble.n	8023af0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8023a32:	2c00      	cmp	r4, #0
 8023a34:	db5a      	blt.n	8023aec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023a36:	42a3      	cmp	r3, r4
 8023a38:	dd58      	ble.n	8023aec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8023a3a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8023a3e:	1c62      	adds	r2, r4, #1
 8023a40:	d459      	bmi.n	8023af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023a42:	4293      	cmp	r3, r2
 8023a44:	dd57      	ble.n	8023af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023a46:	2d00      	cmp	r5, #0
 8023a48:	d055      	beq.n	8023af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8023a4a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8023a4e:	f11e 0e01 	adds.w	lr, lr, #1
 8023a52:	d454      	bmi.n	8023afe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023a54:	45f1      	cmp	r9, lr
 8023a56:	dd52      	ble.n	8023afe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023a58:	2e00      	cmp	r6, #0
 8023a5a:	d050      	beq.n	8023afe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8023a5c:	2c00      	cmp	r4, #0
 8023a5e:	db4c      	blt.n	8023afa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023a60:	42a3      	cmp	r3, r4
 8023a62:	dd4a      	ble.n	8023afa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8023a64:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8023a68:	3401      	adds	r4, #1
 8023a6a:	d405      	bmi.n	8023a78 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023a6c:	42a3      	cmp	r3, r4
 8023a6e:	dd03      	ble.n	8023a78 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023a70:	b115      	cbz	r5, 8023a78 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8023a72:	3301      	adds	r3, #1
 8023a74:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8023a78:	fb15 f406 	smulbb	r4, r5, r6
 8023a7c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8023a80:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023a84:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8023a88:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023a8c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8023a90:	ea43 0c0c 	orr.w	ip, r3, ip
 8023a94:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023a98:	f1c6 0310 	rsb	r3, r6, #16
 8023a9c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023aa0:	1b5b      	subs	r3, r3, r5
 8023aa2:	ea4e 0707 	orr.w	r7, lr, r7
 8023aa6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8023aaa:	437d      	muls	r5, r7
 8023aac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023ab0:	fb03 5c0c 	mla	ip, r3, ip, r5
 8023ab4:	0403      	lsls	r3, r0, #16
 8023ab6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023aba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023abe:	4318      	orrs	r0, r3
 8023ac0:	fb04 c000 	mla	r0, r4, r0, ip
 8023ac4:	0413      	lsls	r3, r2, #16
 8023ac6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023aca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023ace:	4313      	orrs	r3, r2
 8023ad0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8023ad4:	fb06 0003 	mla	r0, r6, r3, r0
 8023ad8:	0d43      	lsrs	r3, r0, #21
 8023ada:	0940      	lsrs	r0, r0, #5
 8023adc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ae0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023ae4:	4318      	orrs	r0, r3
 8023ae6:	8008      	strh	r0, [r1, #0]
 8023ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023aec:	4684      	mov	ip, r0
 8023aee:	e7a6      	b.n	8023a3e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8023af0:	4607      	mov	r7, r0
 8023af2:	4684      	mov	ip, r0
 8023af4:	e7ab      	b.n	8023a4e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8023af6:	4607      	mov	r7, r0
 8023af8:	e7a9      	b.n	8023a4e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8023afa:	4602      	mov	r2, r0
 8023afc:	e7b4      	b.n	8023a68 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8023afe:	4602      	mov	r2, r0
 8023b00:	e7ba      	b.n	8023a78 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08023b02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b06:	b08f      	sub	sp, #60	; 0x3c
 8023b08:	461d      	mov	r5, r3
 8023b0a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8023b0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b10:	9107      	str	r1, [sp, #28]
 8023b12:	6859      	ldr	r1, [r3, #4]
 8023b14:	920c      	str	r2, [sp, #48]	; 0x30
 8023b16:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8023b1a:	fb01 2707 	mla	r7, r1, r7, r2
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	900d      	str	r0, [sp, #52]	; 0x34
 8023b22:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8023b26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b28:	f8d3 8000 	ldr.w	r8, [r3]
 8023b2c:	9b07      	ldr	r3, [sp, #28]
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	dc03      	bgt.n	8023b3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b34:	2b00      	cmp	r3, #0
 8023b36:	f340 8181 	ble.w	8023e3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023b3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b44:	1e48      	subs	r0, r1, #1
 8023b46:	f102 3cff 	add.w	ip, r2, #4294967295
 8023b4a:	2d00      	cmp	r5, #0
 8023b4c:	f340 809b 	ble.w	8023c86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8023b50:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023b54:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b58:	d406      	bmi.n	8023b68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023b5a:	4586      	cmp	lr, r0
 8023b5c:	da04      	bge.n	8023b68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	db02      	blt.n	8023b68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023b62:	4563      	cmp	r3, ip
 8023b64:	f2c0 8090 	blt.w	8023c88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023b68:	f11e 0e01 	adds.w	lr, lr, #1
 8023b6c:	f100 8084 	bmi.w	8023c78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023b70:	4571      	cmp	r1, lr
 8023b72:	f2c0 8081 	blt.w	8023c78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023b76:	3301      	adds	r3, #1
 8023b78:	d47e      	bmi.n	8023c78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023b7a:	429a      	cmp	r2, r3
 8023b7c:	db7c      	blt.n	8023c78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8023b7e:	46aa      	mov	sl, r5
 8023b80:	46b9      	mov	r9, r7
 8023b82:	f1ba 0f00 	cmp.w	sl, #0
 8023b86:	f340 8099 	ble.w	8023cbc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023b8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b8c:	1421      	asrs	r1, r4, #16
 8023b8e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023b92:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023b96:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023b9a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023b9e:	f100 80d0 	bmi.w	8023d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023ba2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023ba6:	4559      	cmp	r1, fp
 8023ba8:	f280 80cb 	bge.w	8023d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023bac:	2800      	cmp	r0, #0
 8023bae:	f2c0 80c8 	blt.w	8023d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023bb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8023bb6:	4558      	cmp	r0, fp
 8023bb8:	f280 80c3 	bge.w	8023d42 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023bbc:	fa0f fe8e 	sxth.w	lr, lr
 8023bc0:	fb00 110e 	mla	r1, r0, lr, r1
 8023bc4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023bc8:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8023bcc:	8841      	ldrh	r1, [r0, #2]
 8023bce:	f1bc 0f00 	cmp.w	ip, #0
 8023bd2:	d00b      	beq.n	8023bec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8023bd4:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8023bd8:	3b01      	subs	r3, #1
 8023bda:	005b      	lsls	r3, r3, #1
 8023bdc:	3302      	adds	r3, #2
 8023bde:	eb00 0e03 	add.w	lr, r0, r3
 8023be2:	5ac3      	ldrh	r3, [r0, r3]
 8023be4:	9308      	str	r3, [sp, #32]
 8023be6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8023bea:	9309      	str	r3, [sp, #36]	; 0x24
 8023bec:	fb12 f30c 	smulbb	r3, r2, ip
 8023bf0:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8023bf4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023bf8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8023bfc:	ea40 000b 	orr.w	r0, r0, fp
 8023c00:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023c04:	10db      	asrs	r3, r3, #3
 8023c06:	f1cc 0e10 	rsb	lr, ip, #16
 8023c0a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023c0e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023c12:	ebae 0e02 	sub.w	lr, lr, r2
 8023c16:	ea4b 0101 	orr.w	r1, fp, r1
 8023c1a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023c1e:	4351      	muls	r1, r2
 8023c20:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c26:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023c2a:	0410      	lsls	r0, r2, #16
 8023c2c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023c30:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023c34:	4310      	orrs	r0, r2
 8023c36:	9a08      	ldr	r2, [sp, #32]
 8023c38:	fb03 e000 	mla	r0, r3, r0, lr
 8023c3c:	9908      	ldr	r1, [sp, #32]
 8023c3e:	0412      	lsls	r2, r2, #16
 8023c40:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023c44:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023c48:	ea42 020e 	orr.w	r2, r2, lr
 8023c4c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023c50:	fb03 0302 	mla	r3, r3, r2, r0
 8023c54:	0d5a      	lsrs	r2, r3, #21
 8023c56:	095b      	lsrs	r3, r3, #5
 8023c58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c5c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023c60:	4313      	orrs	r3, r2
 8023c62:	f8a9 3000 	strh.w	r3, [r9]
 8023c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c68:	f109 0902 	add.w	r9, r9, #2
 8023c6c:	441c      	add	r4, r3
 8023c6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023c74:	441e      	add	r6, r3
 8023c76:	e784      	b.n	8023b82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023c78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c7a:	3d01      	subs	r5, #1
 8023c7c:	441c      	add	r4, r3
 8023c7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c80:	3702      	adds	r7, #2
 8023c82:	441e      	add	r6, r3
 8023c84:	e761      	b.n	8023b4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023c86:	d01d      	beq.n	8023cc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023c88:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023c8a:	1e6b      	subs	r3, r5, #1
 8023c8c:	fb00 4003 	mla	r0, r0, r3, r4
 8023c90:	1400      	asrs	r0, r0, #16
 8023c92:	f53f af74 	bmi.w	8023b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023c96:	3901      	subs	r1, #1
 8023c98:	4288      	cmp	r0, r1
 8023c9a:	f6bf af70 	bge.w	8023b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023c9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023ca0:	fb01 6303 	mla	r3, r1, r3, r6
 8023ca4:	141b      	asrs	r3, r3, #16
 8023ca6:	f53f af6a 	bmi.w	8023b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023caa:	3a01      	subs	r2, #1
 8023cac:	4293      	cmp	r3, r2
 8023cae:	f6bf af66 	bge.w	8023b7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023cb2:	46a9      	mov	r9, r5
 8023cb4:	46ba      	mov	sl, r7
 8023cb6:	f1b9 0f00 	cmp.w	r9, #0
 8023cba:	dc5a      	bgt.n	8023d72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8023cbc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023cc0:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8023cc4:	9b07      	ldr	r3, [sp, #28]
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	f340 80b8 	ble.w	8023e3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023cd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023cd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023cd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023cdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023ce0:	eef0 6a62 	vmov.f32	s13, s5
 8023ce4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ce8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023cec:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023cf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023cf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023cf8:	ee16 4a90 	vmov	r4, s13
 8023cfc:	eef0 6a43 	vmov.f32	s13, s6
 8023d00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d04:	ee12 2a90 	vmov	r2, s5
 8023d08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d16:	ee13 2a10 	vmov	r2, s6
 8023d1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8023d1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d1e:	ee16 6a90 	vmov	r6, s13
 8023d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d26:	931c      	str	r3, [sp, #112]	; 0x70
 8023d28:	9b07      	ldr	r3, [sp, #28]
 8023d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023d2c:	3b01      	subs	r3, #1
 8023d2e:	9307      	str	r3, [sp, #28]
 8023d30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d32:	bf0c      	ite	eq
 8023d34:	4615      	moveq	r5, r2
 8023d36:	461d      	movne	r5, r3
 8023d38:	eeb0 3a67 	vmov.f32	s6, s15
 8023d3c:	eef0 2a47 	vmov.f32	s5, s14
 8023d40:	e6f4      	b.n	8023b2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8023d42:	f111 0b01 	adds.w	fp, r1, #1
 8023d46:	d48e      	bmi.n	8023c66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023d48:	45de      	cmp	lr, fp
 8023d4a:	db8c      	blt.n	8023c66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023d4c:	f110 0b01 	adds.w	fp, r0, #1
 8023d50:	d489      	bmi.n	8023c66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023d52:	455b      	cmp	r3, fp
 8023d54:	db87      	blt.n	8023c66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023d56:	b21b      	sxth	r3, r3
 8023d58:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8023d5c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8023d60:	9300      	str	r3, [sp, #0]
 8023d62:	4642      	mov	r2, r8
 8023d64:	fa0f f38e 	sxth.w	r3, lr
 8023d68:	4649      	mov	r1, r9
 8023d6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023d6c:	f7ff fe4d 	bl	8023a0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8023d70:	e779      	b.n	8023c66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023d72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d74:	1420      	asrs	r0, r4, #16
 8023d76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023d7a:	1431      	asrs	r1, r6, #16
 8023d7c:	fb03 0101 	mla	r1, r3, r1, r0
 8023d80:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023d84:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8023d88:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8023d8c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023d90:	8841      	ldrh	r1, [r0, #2]
 8023d92:	f1be 0f00 	cmp.w	lr, #0
 8023d96:	d00b      	beq.n	8023db0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8023d98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023d9c:	3b01      	subs	r3, #1
 8023d9e:	005b      	lsls	r3, r3, #1
 8023da0:	3302      	adds	r3, #2
 8023da2:	eb00 0b03 	add.w	fp, r0, r3
 8023da6:	5ac3      	ldrh	r3, [r0, r3]
 8023da8:	930a      	str	r3, [sp, #40]	; 0x28
 8023daa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8023db0:	fb12 f30e 	smulbb	r3, r2, lr
 8023db4:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8023db8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023dbc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023dc0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023dc4:	10db      	asrs	r3, r3, #3
 8023dc6:	ea40 000c 	orr.w	r0, r0, ip
 8023dca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023dce:	f1ce 0c10 	rsb	ip, lr, #16
 8023dd2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023dd6:	ebac 0c02 	sub.w	ip, ip, r2
 8023dda:	ea4b 0101 	orr.w	r1, fp, r1
 8023dde:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023de2:	4351      	muls	r1, r2
 8023de4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8023de8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023dea:	fb0c 1c00 	mla	ip, ip, r0, r1
 8023dee:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023df2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023df6:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8023dfa:	ea4b 0000 	orr.w	r0, fp, r0
 8023dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e00:	fb03 c000 	mla	r0, r3, r0, ip
 8023e04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023e06:	0412      	lsls	r2, r2, #16
 8023e08:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023e0c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8023e10:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8023e14:	ea42 0b0b 	orr.w	fp, r2, fp
 8023e18:	fb03 000b 	mla	r0, r3, fp, r0
 8023e1c:	0d43      	lsrs	r3, r0, #21
 8023e1e:	0940      	lsrs	r0, r0, #5
 8023e20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023e24:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023e28:	4318      	orrs	r0, r3
 8023e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023e2c:	f82a 0b02 	strh.w	r0, [sl], #2
 8023e30:	441c      	add	r4, r3
 8023e32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023e34:	f109 39ff 	add.w	r9, r9, #4294967295
 8023e38:	441e      	add	r6, r3
 8023e3a:	e73c      	b.n	8023cb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023e3c:	b00f      	add	sp, #60	; 0x3c
 8023e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8023e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e46:	b085      	sub	sp, #20
 8023e48:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8023e4c:	9102      	str	r1, [sp, #8]
 8023e4e:	fb04 7103 	mla	r1, r4, r3, r7
 8023e52:	2c00      	cmp	r4, #0
 8023e54:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8023e58:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023e5c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8023e60:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8023e64:	f2c0 811b 	blt.w	802409e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023e68:	45a6      	cmp	lr, r4
 8023e6a:	f340 8118 	ble.w	802409e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8023e6e:	2f00      	cmp	r7, #0
 8023e70:	f2c0 8113 	blt.w	802409a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023e74:	42bb      	cmp	r3, r7
 8023e76:	f340 8110 	ble.w	802409a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8023e7a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8023e7e:	1c7a      	adds	r2, r7, #1
 8023e80:	f100 8110 	bmi.w	80240a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023e84:	4293      	cmp	r3, r2
 8023e86:	f340 810d 	ble.w	80240a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8023e8a:	2e00      	cmp	r6, #0
 8023e8c:	f000 810c 	beq.w	80240a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8023e90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023e94:	3401      	adds	r4, #1
 8023e96:	f100 810b 	bmi.w	80240b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023e9a:	45a6      	cmp	lr, r4
 8023e9c:	f340 8108 	ble.w	80240b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8023ea0:	2800      	cmp	r0, #0
 8023ea2:	f000 8108 	beq.w	80240b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8023ea6:	2f00      	cmp	r7, #0
 8023ea8:	f2c0 8100 	blt.w	80240ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023eac:	42bb      	cmp	r3, r7
 8023eae:	f340 80fd 	ble.w	80240ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8023eb2:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023eb6:	3701      	adds	r7, #1
 8023eb8:	f100 8100 	bmi.w	80240bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023ebc:	42bb      	cmp	r3, r7
 8023ebe:	f340 80fd 	ble.w	80240bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8023ec2:	2e00      	cmp	r6, #0
 8023ec4:	f000 80fc 	beq.w	80240c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8023ec8:	3301      	adds	r3, #1
 8023eca:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8023ece:	b2b6      	uxth	r6, r6
 8023ed0:	b280      	uxth	r0, r0
 8023ed2:	fb00 fe06 	mul.w	lr, r0, r6
 8023ed6:	0136      	lsls	r6, r6, #4
 8023ed8:	eba6 070e 	sub.w	r7, r6, lr
 8023edc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023ee0:	b2bf      	uxth	r7, r7
 8023ee2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8023ee6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023eea:	fb0a f607 	mul.w	r6, sl, r7
 8023eee:	b280      	uxth	r0, r0
 8023ef0:	1a1b      	subs	r3, r3, r0
 8023ef2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023ef6:	b29b      	uxth	r3, r3
 8023ef8:	fb0b 6603 	mla	r6, fp, r3, r6
 8023efc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023f00:	fb00 6609 	mla	r6, r0, r9, r6
 8023f04:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023f08:	fb0e 6608 	mla	r6, lr, r8, r6
 8023f0c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023f10:	9600      	str	r6, [sp, #0]
 8023f12:	2e00      	cmp	r6, #0
 8023f14:	f000 80be 	beq.w	8024094 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8023f18:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023f1c:	fb0b fc0c 	mul.w	ip, fp, ip
 8023f20:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023f24:	fb0b f505 	mul.w	r5, fp, r5
 8023f28:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023f2c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023f30:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023f34:	44dc      	add	ip, fp
 8023f36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f3a:	9501      	str	r5, [sp, #4]
 8023f3c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8023f40:	9503      	str	r5, [sp, #12]
 8023f42:	9d01      	ldr	r5, [sp, #4]
 8023f44:	9e02      	ldr	r6, [sp, #8]
 8023f46:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8023f4a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023f4e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8023f52:	fb0a fc0c 	mul.w	ip, sl, ip
 8023f56:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023f5a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023f5e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023f62:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023f66:	4465      	add	r5, ip
 8023f68:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023f6c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023f70:	fb09 fc0c 	mul.w	ip, r9, ip
 8023f74:	fb09 f904 	mul.w	r9, r9, r4
 8023f78:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8023f7c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023f80:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8023f84:	fb08 f404 	mul.w	r4, r8, r4
 8023f88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023f8c:	fb08 f802 	mul.w	r8, r8, r2
 8023f90:	0a2d      	lsrs	r5, r5, #8
 8023f92:	0a22      	lsrs	r2, r4, #8
 8023f94:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023f98:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023f9c:	437d      	muls	r5, r7
 8023f9e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8023fa2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023fa6:	4414      	add	r4, r2
 8023fa8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8023fac:	fb0a fa01 	mul.w	sl, sl, r1
 8023fb0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023fb4:	9a03      	ldr	r2, [sp, #12]
 8023fb6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8023fba:	fb02 5503 	mla	r5, r2, r3, r5
 8023fbe:	0a24      	lsrs	r4, r4, #8
 8023fc0:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023fc4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023fc8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023fcc:	fb04 540e 	mla	r4, r4, lr, r5
 8023fd0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023fd4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023fd8:	4461      	add	r1, ip
 8023fda:	0a09      	lsrs	r1, r1, #8
 8023fdc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023fe0:	fb01 4100 	mla	r1, r1, r0, r4
 8023fe4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fe8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fec:	fb07 f70a 	mul.w	r7, r7, sl
 8023ff0:	0a09      	lsrs	r1, r1, #8
 8023ff2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8023ff6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8023ffa:	fb03 7101 	mla	r1, r3, r1, r7
 8023ffe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024002:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024006:	fb0e 1e08 	mla	lr, lr, r8, r1
 802400a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802400e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8024012:	fb00 e101 	mla	r1, r0, r1, lr
 8024016:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802401a:	9a00      	ldr	r2, [sp, #0]
 802401c:	b287      	uxth	r7, r0
 802401e:	437a      	muls	r2, r7
 8024020:	1c53      	adds	r3, r2, #1
 8024022:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024026:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802402a:	0a09      	lsrs	r1, r1, #8
 802402c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024030:	4321      	orrs	r1, r4
 8024032:	0c0a      	lsrs	r2, r1, #16
 8024034:	8836      	ldrh	r6, [r6, #0]
 8024036:	fb12 f207 	smulbb	r2, r2, r7
 802403a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802403e:	b2c8      	uxtb	r0, r1
 8024040:	1235      	asrs	r5, r6, #8
 8024042:	fb14 f407 	smulbb	r4, r4, r7
 8024046:	fb10 f007 	smulbb	r0, r0, r7
 802404a:	b2db      	uxtb	r3, r3
 802404c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024050:	fb05 2503 	mla	r5, r5, r3, r2
 8024054:	10f2      	asrs	r2, r6, #3
 8024056:	00f6      	lsls	r6, r6, #3
 8024058:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802405c:	b2f6      	uxtb	r6, r6
 802405e:	fb02 4203 	mla	r2, r2, r3, r4
 8024062:	fb06 0303 	mla	r3, r6, r3, r0
 8024066:	b2ad      	uxth	r5, r5
 8024068:	b299      	uxth	r1, r3
 802406a:	b294      	uxth	r4, r2
 802406c:	1c6b      	adds	r3, r5, #1
 802406e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024072:	1c62      	adds	r2, r4, #1
 8024074:	1c4b      	adds	r3, r1, #1
 8024076:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802407a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802407e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024082:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024086:	0952      	lsrs	r2, r2, #5
 8024088:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802408c:	432b      	orrs	r3, r5
 802408e:	4313      	orrs	r3, r2
 8024090:	9a02      	ldr	r2, [sp, #8]
 8024092:	8013      	strh	r3, [r2, #0]
 8024094:	b005      	add	sp, #20
 8024096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802409a:	2500      	movs	r5, #0
 802409c:	e6ef      	b.n	8023e7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802409e:	2100      	movs	r1, #0
 80240a0:	460d      	mov	r5, r1
 80240a2:	e6f7      	b.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80240a4:	2100      	movs	r1, #0
 80240a6:	e6f5      	b.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80240a8:	4631      	mov	r1, r6
 80240aa:	e6f3      	b.n	8023e94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80240ac:	2400      	movs	r4, #0
 80240ae:	e702      	b.n	8023eb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80240b0:	2200      	movs	r2, #0
 80240b2:	4614      	mov	r4, r2
 80240b4:	e70b      	b.n	8023ece <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80240b6:	4602      	mov	r2, r0
 80240b8:	4604      	mov	r4, r0
 80240ba:	e708      	b.n	8023ece <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80240bc:	2200      	movs	r2, #0
 80240be:	e706      	b.n	8023ece <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80240c0:	4632      	mov	r2, r6
 80240c2:	e704      	b.n	8023ece <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080240c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240c8:	b09d      	sub	sp, #116	; 0x74
 80240ca:	9219      	str	r2, [sp, #100]	; 0x64
 80240cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80240ce:	901b      	str	r0, [sp, #108]	; 0x6c
 80240d0:	9307      	str	r3, [sp, #28]
 80240d2:	6850      	ldr	r0, [r2, #4]
 80240d4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80240d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80240da:	931a      	str	r3, [sp, #104]	; 0x68
 80240dc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80240e0:	fb00 1303 	mla	r3, r0, r3, r1
 80240e4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80240e8:	6812      	ldr	r2, [r2, #0]
 80240ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80240ee:	930a      	str	r3, [sp, #40]	; 0x28
 80240f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80240f2:	681b      	ldr	r3, [r3, #0]
 80240f4:	9310      	str	r3, [sp, #64]	; 0x40
 80240f6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80240fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80240fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80240fe:	2b00      	cmp	r3, #0
 8024100:	dc03      	bgt.n	802410a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8024102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024104:	2b00      	cmp	r3, #0
 8024106:	f340 8375 	ble.w	80247f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802410a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802410c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024110:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024114:	1e48      	subs	r0, r1, #1
 8024116:	1e57      	subs	r7, r2, #1
 8024118:	9b07      	ldr	r3, [sp, #28]
 802411a:	2b00      	cmp	r3, #0
 802411c:	f340 818e 	ble.w	802443c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8024120:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024124:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024128:	d406      	bmi.n	8024138 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802412a:	4584      	cmp	ip, r0
 802412c:	da04      	bge.n	8024138 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802412e:	2b00      	cmp	r3, #0
 8024130:	db02      	blt.n	8024138 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8024132:	42bb      	cmp	r3, r7
 8024134:	f2c0 8183 	blt.w	802443e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024138:	f11c 0c01 	adds.w	ip, ip, #1
 802413c:	f100 8173 	bmi.w	8024426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024140:	4561      	cmp	r1, ip
 8024142:	f2c0 8170 	blt.w	8024426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024146:	3301      	adds	r3, #1
 8024148:	f100 816d 	bmi.w	8024426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802414c:	429a      	cmp	r2, r3
 802414e:	f2c0 816a 	blt.w	8024426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024152:	9b07      	ldr	r3, [sp, #28]
 8024154:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024156:	9318      	str	r3, [sp, #96]	; 0x60
 8024158:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802415a:	2b00      	cmp	r3, #0
 802415c:	f340 818c 	ble.w	8024478 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8024160:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024162:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024164:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024168:	1422      	asrs	r2, r4, #16
 802416a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802416e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024172:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024176:	689b      	ldr	r3, [r3, #8]
 8024178:	f100 81cd 	bmi.w	8024516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802417c:	f103 38ff 	add.w	r8, r3, #4294967295
 8024180:	4542      	cmp	r2, r8
 8024182:	f280 81c8 	bge.w	8024516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024186:	f1bc 0f00 	cmp.w	ip, #0
 802418a:	f2c0 81c4 	blt.w	8024516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802418e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024192:	45c4      	cmp	ip, r8
 8024194:	f280 81bf 	bge.w	8024516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024198:	b21b      	sxth	r3, r3
 802419a:	fb0c 2203 	mla	r2, ip, r3, r2
 802419e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80241a0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80241a4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80241a8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80241ac:	2800      	cmp	r0, #0
 80241ae:	f000 81a9 	beq.w	8024504 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80241b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80241b6:	950c      	str	r5, [sp, #48]	; 0x30
 80241b8:	0e2d      	lsrs	r5, r5, #24
 80241ba:	9513      	str	r5, [sp, #76]	; 0x4c
 80241bc:	b181      	cbz	r1, 80241e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80241be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80241c2:	3b01      	subs	r3, #1
 80241c4:	009b      	lsls	r3, r3, #2
 80241c6:	3304      	adds	r3, #4
 80241c8:	eb08 0c03 	add.w	ip, r8, r3
 80241cc:	f858 3003 	ldr.w	r3, [r8, r3]
 80241d0:	9308      	str	r3, [sp, #32]
 80241d2:	0e1b      	lsrs	r3, r3, #24
 80241d4:	9311      	str	r3, [sp, #68]	; 0x44
 80241d6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80241da:	930d      	str	r3, [sp, #52]	; 0x34
 80241dc:	0e1b      	lsrs	r3, r3, #24
 80241de:	9314      	str	r3, [sp, #80]	; 0x50
 80241e0:	b280      	uxth	r0, r0
 80241e2:	b289      	uxth	r1, r1
 80241e4:	fb00 f901 	mul.w	r9, r0, r1
 80241e8:	0100      	lsls	r0, r0, #4
 80241ea:	eba0 0809 	sub.w	r8, r0, r9
 80241ee:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80241f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80241f4:	fa1f f888 	uxth.w	r8, r8
 80241f8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80241fc:	fb08 f000 	mul.w	r0, r8, r0
 8024200:	b289      	uxth	r1, r1
 8024202:	1a5b      	subs	r3, r3, r1
 8024204:	b29b      	uxth	r3, r3
 8024206:	fb03 000e 	mla	r0, r3, lr, r0
 802420a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802420c:	fb01 0005 	mla	r0, r1, r5, r0
 8024210:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024212:	fb09 0005 	mla	r0, r9, r5, r0
 8024216:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802421a:	2800      	cmp	r0, #0
 802421c:	f000 80fa 	beq.w	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024220:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024224:	d01b      	beq.n	802425e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024226:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802422a:	fb0e fa0a 	mul.w	sl, lr, sl
 802422e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024232:	fb0e fe02 	mul.w	lr, lr, r2
 8024236:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802423a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802423e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024242:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024246:	4452      	add	r2, sl
 8024248:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802424c:	0a12      	lsrs	r2, r2, #8
 802424e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024252:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024256:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802425a:	ea42 020c 	orr.w	r2, r2, ip
 802425e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024260:	2dff      	cmp	r5, #255	; 0xff
 8024262:	d021      	beq.n	80242a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8024264:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024266:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802426a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802426c:	fb05 fb0b 	mul.w	fp, r5, fp
 8024270:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024272:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024276:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802427a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802427c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024280:	fb05 fa0a 	mul.w	sl, r5, sl
 8024284:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024288:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802428c:	44de      	add	lr, fp
 802428e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024292:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024296:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802429a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802429e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242a2:	ea4e 050a 	orr.w	r5, lr, sl
 80242a6:	950c      	str	r5, [sp, #48]	; 0x30
 80242a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80242aa:	2dff      	cmp	r5, #255	; 0xff
 80242ac:	d021      	beq.n	80242f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80242ae:	9d08      	ldr	r5, [sp, #32]
 80242b0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80242b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80242b6:	fb05 fb0b 	mul.w	fp, r5, fp
 80242ba:	9d08      	ldr	r5, [sp, #32]
 80242bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80242c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80242c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80242c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242ca:	fb05 fa0a 	mul.w	sl, r5, sl
 80242ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80242d2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80242d6:	44de      	add	lr, fp
 80242d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80242dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80242e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242ec:	ea4e 050a 	orr.w	r5, lr, sl
 80242f0:	9508      	str	r5, [sp, #32]
 80242f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80242f4:	2dff      	cmp	r5, #255	; 0xff
 80242f6:	d021      	beq.n	802433c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80242f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80242fa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80242fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024300:	fb05 fb0b 	mul.w	fp, r5, fp
 8024304:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024306:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802430a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802430e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024310:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024314:	fb05 fa0a 	mul.w	sl, r5, sl
 8024318:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802431c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024320:	44de      	add	lr, fp
 8024322:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024326:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802432a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802432e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024332:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024336:	ea4e 050a 	orr.w	r5, lr, sl
 802433a:	950d      	str	r5, [sp, #52]	; 0x34
 802433c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802433e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024342:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024346:	fb08 fc0c 	mul.w	ip, r8, ip
 802434a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802434e:	9d08      	ldr	r5, [sp, #32]
 8024350:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024354:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024358:	fb01 cc0e 	mla	ip, r1, lr, ip
 802435c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802435e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024364:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024368:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802436c:	fb08 f80e 	mul.w	r8, r8, lr
 8024370:	fb03 8202 	mla	r2, r3, r2, r8
 8024374:	9b08      	ldr	r3, [sp, #32]
 8024376:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802437a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802437e:	fb01 220a 	mla	r2, r1, sl, r2
 8024382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024384:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024388:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802438c:	fb09 2901 	mla	r9, r9, r1, r2
 8024390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024392:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024396:	4342      	muls	r2, r0
 8024398:	1c50      	adds	r0, r2, #1
 802439a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802439e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80243a2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80243a6:	ea4c 0c09 	orr.w	ip, ip, r9
 80243aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80243ac:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80243b0:	883b      	ldrh	r3, [r7, #0]
 80243b2:	fb12 f205 	smulbb	r2, r2, r5
 80243b6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80243ba:	fa5f fc8c 	uxtb.w	ip, ip
 80243be:	1219      	asrs	r1, r3, #8
 80243c0:	fb1c fc05 	smulbb	ip, ip, r5
 80243c4:	b2c0      	uxtb	r0, r0
 80243c6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80243ca:	fb01 2100 	mla	r1, r1, r0, r2
 80243ce:	10da      	asrs	r2, r3, #3
 80243d0:	00db      	lsls	r3, r3, #3
 80243d2:	fb1e fe05 	smulbb	lr, lr, r5
 80243d6:	b2db      	uxtb	r3, r3
 80243d8:	fb03 c300 	mla	r3, r3, r0, ip
 80243dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80243e0:	b289      	uxth	r1, r1
 80243e2:	fb02 e200 	mla	r2, r2, r0, lr
 80243e6:	fa1f fc83 	uxth.w	ip, r3
 80243ea:	1c4b      	adds	r3, r1, #1
 80243ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80243f0:	f10c 0301 	add.w	r3, ip, #1
 80243f4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80243f8:	b292      	uxth	r2, r2
 80243fa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80243fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024402:	430b      	orrs	r3, r1
 8024404:	1c51      	adds	r1, r2, #1
 8024406:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802440a:	0952      	lsrs	r2, r2, #5
 802440c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024410:	4313      	orrs	r3, r2
 8024412:	803b      	strh	r3, [r7, #0]
 8024414:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024416:	3702      	adds	r7, #2
 8024418:	441c      	add	r4, r3
 802441a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802441c:	441e      	add	r6, r3
 802441e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024420:	3b01      	subs	r3, #1
 8024422:	9318      	str	r3, [sp, #96]	; 0x60
 8024424:	e698      	b.n	8024158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024426:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024428:	441c      	add	r4, r3
 802442a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802442c:	441e      	add	r6, r3
 802442e:	9b07      	ldr	r3, [sp, #28]
 8024430:	3b01      	subs	r3, #1
 8024432:	9307      	str	r3, [sp, #28]
 8024434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024436:	3302      	adds	r3, #2
 8024438:	930a      	str	r3, [sp, #40]	; 0x28
 802443a:	e66d      	b.n	8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802443c:	d023      	beq.n	8024486 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802443e:	9b07      	ldr	r3, [sp, #28]
 8024440:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024442:	3b01      	subs	r3, #1
 8024444:	fb00 4003 	mla	r0, r0, r3, r4
 8024448:	1400      	asrs	r0, r0, #16
 802444a:	f53f ae82 	bmi.w	8024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802444e:	3901      	subs	r1, #1
 8024450:	4288      	cmp	r0, r1
 8024452:	f6bf ae7e 	bge.w	8024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024456:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024458:	fb01 6303 	mla	r3, r1, r3, r6
 802445c:	141b      	asrs	r3, r3, #16
 802445e:	f53f ae78 	bmi.w	8024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024462:	3a01      	subs	r2, #1
 8024464:	4293      	cmp	r3, r2
 8024466:	f6bf ae74 	bge.w	8024152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802446a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802446e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8024472:	f1bb 0f00 	cmp.w	fp, #0
 8024476:	dc6c      	bgt.n	8024552 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024478:	9b07      	ldr	r3, [sp, #28]
 802447a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802447e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024480:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024484:	930a      	str	r3, [sp, #40]	; 0x28
 8024486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024488:	2b00      	cmp	r3, #0
 802448a:	f340 81b3 	ble.w	80247f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802448e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024492:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024496:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802449a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802449e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80244a2:	eef0 6a62 	vmov.f32	s13, s5
 80244a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80244aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80244ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80244b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80244ba:	ee16 4a90 	vmov	r4, s13
 80244be:	eef0 6a43 	vmov.f32	s13, s6
 80244c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80244c6:	ee12 2a90 	vmov	r2, s5
 80244ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80244ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80244d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80244d8:	ee13 2a10 	vmov	r2, s6
 80244dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80244de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80244e0:	ee16 6a90 	vmov	r6, s13
 80244e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80244e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80244ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80244ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80244ee:	3b01      	subs	r3, #1
 80244f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80244f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80244f4:	bf08      	it	eq
 80244f6:	4613      	moveq	r3, r2
 80244f8:	eeb0 3a67 	vmov.f32	s6, s15
 80244fc:	9307      	str	r3, [sp, #28]
 80244fe:	eef0 2a47 	vmov.f32	s5, s14
 8024502:	e5fb      	b.n	80240fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8024504:	2900      	cmp	r1, #0
 8024506:	f43f ae6b 	beq.w	80241e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802450a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802450e:	9308      	str	r3, [sp, #32]
 8024510:	0e1b      	lsrs	r3, r3, #24
 8024512:	9311      	str	r3, [sp, #68]	; 0x44
 8024514:	e664      	b.n	80241e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8024516:	f112 0801 	adds.w	r8, r2, #1
 802451a:	f53f af7b 	bmi.w	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802451e:	4543      	cmp	r3, r8
 8024520:	f6ff af78 	blt.w	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024524:	f11c 0801 	adds.w	r8, ip, #1
 8024528:	f53f af74 	bmi.w	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802452c:	45c6      	cmp	lr, r8
 802452e:	f6ff af71 	blt.w	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024532:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024534:	9201      	str	r2, [sp, #4]
 8024536:	fa0f f28e 	sxth.w	r2, lr
 802453a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802453e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8024542:	9200      	str	r2, [sp, #0]
 8024544:	b21b      	sxth	r3, r3
 8024546:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024548:	4639      	mov	r1, r7
 802454a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802454c:	f7ff fc79 	bl	8023e42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8024550:	e760      	b.n	8024414 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8024552:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024554:	1427      	asrs	r7, r4, #16
 8024556:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802455a:	1433      	asrs	r3, r6, #16
 802455c:	fb01 7303 	mla	r3, r1, r3, r7
 8024560:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024562:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024566:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802456a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802456e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024572:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024576:	2a00      	cmp	r2, #0
 8024578:	f000 8133 	beq.w	80247e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802457c:	687d      	ldr	r5, [r7, #4]
 802457e:	950e      	str	r5, [sp, #56]	; 0x38
 8024580:	0e2d      	lsrs	r5, r5, #24
 8024582:	9515      	str	r5, [sp, #84]	; 0x54
 8024584:	b178      	cbz	r0, 80245a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8024586:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802458a:	3901      	subs	r1, #1
 802458c:	0089      	lsls	r1, r1, #2
 802458e:	3104      	adds	r1, #4
 8024590:	eb07 0e01 	add.w	lr, r7, r1
 8024594:	5879      	ldr	r1, [r7, r1]
 8024596:	9109      	str	r1, [sp, #36]	; 0x24
 8024598:	0e09      	lsrs	r1, r1, #24
 802459a:	9112      	str	r1, [sp, #72]	; 0x48
 802459c:	f8de 1004 	ldr.w	r1, [lr, #4]
 80245a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80245a2:	0e09      	lsrs	r1, r1, #24
 80245a4:	9116      	str	r1, [sp, #88]	; 0x58
 80245a6:	b292      	uxth	r2, r2
 80245a8:	b280      	uxth	r0, r0
 80245aa:	fb02 f800 	mul.w	r8, r2, r0
 80245ae:	0112      	lsls	r2, r2, #4
 80245b0:	eba2 0e08 	sub.w	lr, r2, r8
 80245b4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80245b6:	fa1f fe8e 	uxth.w	lr, lr
 80245ba:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80245be:	fb0e f101 	mul.w	r1, lr, r1
 80245c2:	b280      	uxth	r0, r0
 80245c4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80245c8:	1a12      	subs	r2, r2, r0
 80245ca:	b292      	uxth	r2, r2
 80245cc:	fb02 110c 	mla	r1, r2, ip, r1
 80245d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80245d2:	fb00 1105 	mla	r1, r0, r5, r1
 80245d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80245d8:	fb08 1105 	mla	r1, r8, r5, r1
 80245dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80245e0:	2900      	cmp	r1, #0
 80245e2:	f000 80f5 	beq.w	80247d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80245e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80245ea:	d019      	beq.n	8024620 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 80245ec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80245f0:	fb0c fa0a 	mul.w	sl, ip, sl
 80245f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245f8:	fb0c fc03 	mul.w	ip, ip, r3
 80245fc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024600:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024604:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024608:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802460c:	4453      	add	r3, sl
 802460e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024612:	0a1b      	lsrs	r3, r3, #8
 8024614:	0a3f      	lsrs	r7, r7, #8
 8024616:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802461a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802461e:	433b      	orrs	r3, r7
 8024620:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024622:	2dff      	cmp	r5, #255	; 0xff
 8024624:	d020      	beq.n	8024668 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8024626:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024628:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802462c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802462e:	436f      	muls	r7, r5
 8024630:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024632:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024636:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802463a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802463c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024640:	fb05 fa0a 	mul.w	sl, r5, sl
 8024644:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024648:	44bc      	add	ip, r7
 802464a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802464e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024652:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024656:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802465a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802465e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024662:	ea4c 050a 	orr.w	r5, ip, sl
 8024666:	950e      	str	r5, [sp, #56]	; 0x38
 8024668:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802466a:	2dff      	cmp	r5, #255	; 0xff
 802466c:	d020      	beq.n	80246b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802466e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024670:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024674:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024676:	436f      	muls	r7, r5
 8024678:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802467a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802467e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024682:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024684:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024688:	fb05 fa0a 	mul.w	sl, r5, sl
 802468c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024690:	44bc      	add	ip, r7
 8024692:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024696:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802469a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802469e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246aa:	ea4c 050a 	orr.w	r5, ip, sl
 80246ae:	9509      	str	r5, [sp, #36]	; 0x24
 80246b0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80246b2:	2dff      	cmp	r5, #255	; 0xff
 80246b4:	d020      	beq.n	80246f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80246b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80246b8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80246bc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80246be:	436f      	muls	r7, r5
 80246c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80246c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80246c6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80246ca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80246cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80246d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80246d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246d8:	44bc      	add	ip, r7
 80246da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80246de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80246e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246f2:	ea4c 050a 	orr.w	r5, ip, sl
 80246f6:	950f      	str	r5, [sp, #60]	; 0x3c
 80246f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80246fa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80246fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024702:	fb0e f707 	mul.w	r7, lr, r7
 8024706:	fb02 770c 	mla	r7, r2, ip, r7
 802470a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802470c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024710:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024714:	fb00 770c 	mla	r7, r0, ip, r7
 8024718:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802471a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802471e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024720:	fb08 770c 	mla	r7, r8, ip, r7
 8024724:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024728:	fb0e fe0c 	mul.w	lr, lr, ip
 802472c:	fb02 e303 	mla	r3, r2, r3, lr
 8024730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024732:	0a3f      	lsrs	r7, r7, #8
 8024734:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024738:	fb00 330a 	mla	r3, r0, sl, r3
 802473c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802473e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024742:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024746:	fb08 3c0c 	mla	ip, r8, ip, r3
 802474a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802474c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024750:	4359      	muls	r1, r3
 8024752:	1c4b      	adds	r3, r1, #1
 8024754:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024758:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802475c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024760:	ea47 070c 	orr.w	r7, r7, ip
 8024764:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024766:	0c3b      	lsrs	r3, r7, #16
 8024768:	f8b9 0000 	ldrh.w	r0, [r9]
 802476c:	fb13 f305 	smulbb	r3, r3, r5
 8024770:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024774:	b2ff      	uxtb	r7, r7
 8024776:	1202      	asrs	r2, r0, #8
 8024778:	fb17 f705 	smulbb	r7, r7, r5
 802477c:	b2c9      	uxtb	r1, r1
 802477e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024782:	fb02 3201 	mla	r2, r2, r1, r3
 8024786:	10c3      	asrs	r3, r0, #3
 8024788:	00c0      	lsls	r0, r0, #3
 802478a:	fb1c fc05 	smulbb	ip, ip, r5
 802478e:	b2c0      	uxtb	r0, r0
 8024790:	fb00 7001 	mla	r0, r0, r1, r7
 8024794:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024798:	fb03 c301 	mla	r3, r3, r1, ip
 802479c:	b292      	uxth	r2, r2
 802479e:	b280      	uxth	r0, r0
 80247a0:	1c51      	adds	r1, r2, #1
 80247a2:	f100 0c01 	add.w	ip, r0, #1
 80247a6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80247aa:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80247ae:	b29b      	uxth	r3, r3
 80247b0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80247b4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80247b8:	ea4c 0202 	orr.w	r2, ip, r2
 80247bc:	f103 0c01 	add.w	ip, r3, #1
 80247c0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80247c4:	095b      	lsrs	r3, r3, #5
 80247c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80247ca:	431a      	orrs	r2, r3
 80247cc:	f8a9 2000 	strh.w	r2, [r9]
 80247d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80247d2:	f109 0902 	add.w	r9, r9, #2
 80247d6:	441c      	add	r4, r3
 80247d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80247da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247de:	441e      	add	r6, r3
 80247e0:	e647      	b.n	8024472 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80247e2:	2800      	cmp	r0, #0
 80247e4:	f43f aedf 	beq.w	80245a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80247e8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80247ec:	9109      	str	r1, [sp, #36]	; 0x24
 80247ee:	0e09      	lsrs	r1, r1, #24
 80247f0:	9112      	str	r1, [sp, #72]	; 0x48
 80247f2:	e6d8      	b.n	80245a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80247f4:	b01d      	add	sp, #116	; 0x74
 80247f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080247fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80247fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247fe:	b085      	sub	sp, #20
 8024800:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8024804:	9102      	str	r1, [sp, #8]
 8024806:	fb04 7103 	mla	r1, r4, r3, r7
 802480a:	2c00      	cmp	r4, #0
 802480c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024810:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8024814:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024818:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802481c:	f2c0 810c 	blt.w	8024a38 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024820:	45a6      	cmp	lr, r4
 8024822:	f340 8109 	ble.w	8024a38 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8024826:	2f00      	cmp	r7, #0
 8024828:	f2c0 8104 	blt.w	8024a34 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802482c:	42bb      	cmp	r3, r7
 802482e:	f340 8101 	ble.w	8024a34 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8024832:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8024836:	1c7a      	adds	r2, r7, #1
 8024838:	f100 8101 	bmi.w	8024a3e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802483c:	4293      	cmp	r3, r2
 802483e:	f340 80fe 	ble.w	8024a3e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8024842:	2e00      	cmp	r6, #0
 8024844:	f000 80fd 	beq.w	8024a42 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8024848:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802484c:	3401      	adds	r4, #1
 802484e:	f100 80fc 	bmi.w	8024a4a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024852:	45a6      	cmp	lr, r4
 8024854:	f340 80f9 	ble.w	8024a4a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8024858:	2800      	cmp	r0, #0
 802485a:	f000 80f9 	beq.w	8024a50 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802485e:	2f00      	cmp	r7, #0
 8024860:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8024864:	f2c0 80ef 	blt.w	8024a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8024868:	42bb      	cmp	r3, r7
 802486a:	f340 80ec 	ble.w	8024a46 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802486e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024872:	3701      	adds	r7, #1
 8024874:	f100 80ef 	bmi.w	8024a56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8024878:	42bb      	cmp	r3, r7
 802487a:	f340 80ec 	ble.w	8024a56 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802487e:	2e00      	cmp	r6, #0
 8024880:	f000 80eb 	beq.w	8024a5a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8024884:	6852      	ldr	r2, [r2, #4]
 8024886:	b2b6      	uxth	r6, r6
 8024888:	b280      	uxth	r0, r0
 802488a:	fb00 fe06 	mul.w	lr, r0, r6
 802488e:	0136      	lsls	r6, r6, #4
 8024890:	eba6 070e 	sub.w	r7, r6, lr
 8024894:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024898:	b2bf      	uxth	r7, r7
 802489a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802489e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80248a2:	fb07 f60a 	mul.w	r6, r7, sl
 80248a6:	b280      	uxth	r0, r0
 80248a8:	1a1b      	subs	r3, r3, r0
 80248aa:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80248ae:	b29b      	uxth	r3, r3
 80248b0:	fb0b 6603 	mla	r6, fp, r3, r6
 80248b4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80248b8:	fb00 6609 	mla	r6, r0, r9, r6
 80248bc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80248c0:	fb0e 6608 	mla	r6, lr, r8, r6
 80248c4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80248c8:	9600      	str	r6, [sp, #0]
 80248ca:	2e00      	cmp	r6, #0
 80248cc:	f000 80af 	beq.w	8024a2e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80248d0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80248d4:	fb0b fc0c 	mul.w	ip, fp, ip
 80248d8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80248dc:	fb0b f505 	mul.w	r5, fp, r5
 80248e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80248e4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80248e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80248ec:	44dc      	add	ip, fp
 80248ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248f2:	9501      	str	r5, [sp, #4]
 80248f4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80248f8:	9503      	str	r5, [sp, #12]
 80248fa:	9d01      	ldr	r5, [sp, #4]
 80248fc:	9e02      	ldr	r6, [sp, #8]
 80248fe:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024902:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024906:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802490a:	fb0a fc0c 	mul.w	ip, sl, ip
 802490e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024912:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024916:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802491a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802491e:	4465      	add	r5, ip
 8024920:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024924:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024928:	fb09 fc0c 	mul.w	ip, r9, ip
 802492c:	fb09 f904 	mul.w	r9, r9, r4
 8024930:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024934:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024938:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802493c:	fb08 f404 	mul.w	r4, r8, r4
 8024940:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024944:	fb08 f802 	mul.w	r8, r8, r2
 8024948:	0a2d      	lsrs	r5, r5, #8
 802494a:	0a22      	lsrs	r2, r4, #8
 802494c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024950:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024954:	437d      	muls	r5, r7
 8024956:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802495a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802495e:	4414      	add	r4, r2
 8024960:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024964:	fb0a fa01 	mul.w	sl, sl, r1
 8024968:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802496c:	9a03      	ldr	r2, [sp, #12]
 802496e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024972:	fb02 5503 	mla	r5, r2, r3, r5
 8024976:	0a24      	lsrs	r4, r4, #8
 8024978:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802497c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024980:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024984:	fb04 540e 	mla	r4, r4, lr, r5
 8024988:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802498c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024990:	4461      	add	r1, ip
 8024992:	0a09      	lsrs	r1, r1, #8
 8024994:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024998:	fb01 4100 	mla	r1, r1, r0, r4
 802499c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249a4:	fb07 f70a 	mul.w	r7, r7, sl
 80249a8:	0a09      	lsrs	r1, r1, #8
 80249aa:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80249ae:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80249b2:	fb03 7101 	mla	r1, r3, r1, r7
 80249b6:	9b00      	ldr	r3, [sp, #0]
 80249b8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80249bc:	43da      	mvns	r2, r3
 80249be:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80249c2:	fb0e 1e08 	mla	lr, lr, r8, r1
 80249c6:	8836      	ldrh	r6, [r6, #0]
 80249c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249cc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80249d0:	fb00 e101 	mla	r1, r0, r1, lr
 80249d4:	1233      	asrs	r3, r6, #8
 80249d6:	b2d2      	uxtb	r2, r2
 80249d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80249dc:	4353      	muls	r3, r2
 80249de:	10f0      	asrs	r0, r6, #3
 80249e0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80249e4:	4350      	muls	r0, r2
 80249e6:	0a09      	lsrs	r1, r1, #8
 80249e8:	00f6      	lsls	r6, r6, #3
 80249ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80249ee:	b2f6      	uxtb	r6, r6
 80249f0:	4321      	orrs	r1, r4
 80249f2:	4356      	muls	r6, r2
 80249f4:	1c5a      	adds	r2, r3, #1
 80249f6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80249fa:	0c0b      	lsrs	r3, r1, #16
 80249fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a00:	1c42      	adds	r2, r0, #1
 8024a02:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a06:	0a0a      	lsrs	r2, r1, #8
 8024a08:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024a0c:	021b      	lsls	r3, r3, #8
 8024a0e:	00d2      	lsls	r2, r2, #3
 8024a10:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024a14:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024a18:	4313      	orrs	r3, r2
 8024a1a:	1c72      	adds	r2, r6, #1
 8024a1c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8024a20:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024a24:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024a28:	4319      	orrs	r1, r3
 8024a2a:	9b02      	ldr	r3, [sp, #8]
 8024a2c:	8019      	strh	r1, [r3, #0]
 8024a2e:	b005      	add	sp, #20
 8024a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a34:	2500      	movs	r5, #0
 8024a36:	e6fe      	b.n	8024836 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8024a38:	2100      	movs	r1, #0
 8024a3a:	460d      	mov	r5, r1
 8024a3c:	e706      	b.n	802484c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024a3e:	2100      	movs	r1, #0
 8024a40:	e704      	b.n	802484c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024a42:	4631      	mov	r1, r6
 8024a44:	e702      	b.n	802484c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8024a46:	2400      	movs	r4, #0
 8024a48:	e713      	b.n	8024872 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8024a4a:	2200      	movs	r2, #0
 8024a4c:	4614      	mov	r4, r2
 8024a4e:	e71a      	b.n	8024886 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024a50:	4602      	mov	r2, r0
 8024a52:	4604      	mov	r4, r0
 8024a54:	e717      	b.n	8024886 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024a56:	2200      	movs	r2, #0
 8024a58:	e715      	b.n	8024886 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8024a5a:	4632      	mov	r2, r6
 8024a5c:	e713      	b.n	8024886 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08024a60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a64:	b09b      	sub	sp, #108	; 0x6c
 8024a66:	9218      	str	r2, [sp, #96]	; 0x60
 8024a68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024a6a:	9019      	str	r0, [sp, #100]	; 0x64
 8024a6c:	6850      	ldr	r0, [r2, #4]
 8024a6e:	9116      	str	r1, [sp, #88]	; 0x58
 8024a70:	9307      	str	r3, [sp, #28]
 8024a72:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024a76:	fb00 1303 	mla	r3, r0, r3, r1
 8024a7a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8024a7e:	6812      	ldr	r2, [r2, #0]
 8024a80:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a84:	930a      	str	r3, [sp, #40]	; 0x28
 8024a86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a88:	681b      	ldr	r3, [r3, #0]
 8024a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	dc03      	bgt.n	8024a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024a92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	f340 8387 	ble.w	80251a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8024a9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024a9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024aa0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024aa4:	1e48      	subs	r0, r1, #1
 8024aa6:	1e57      	subs	r7, r2, #1
 8024aa8:	9b07      	ldr	r3, [sp, #28]
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	f340 8166 	ble.w	8024d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024ab0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024ab4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024ab8:	d406      	bmi.n	8024ac8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024aba:	4584      	cmp	ip, r0
 8024abc:	da04      	bge.n	8024ac8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024abe:	2b00      	cmp	r3, #0
 8024ac0:	db02      	blt.n	8024ac8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8024ac2:	42bb      	cmp	r3, r7
 8024ac4:	f2c0 815b 	blt.w	8024d7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024ac8:	f11c 0c01 	adds.w	ip, ip, #1
 8024acc:	f100 814b 	bmi.w	8024d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024ad0:	4561      	cmp	r1, ip
 8024ad2:	f2c0 8148 	blt.w	8024d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024ad6:	3301      	adds	r3, #1
 8024ad8:	f100 8145 	bmi.w	8024d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024adc:	429a      	cmp	r2, r3
 8024ade:	f2c0 8142 	blt.w	8024d66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024ae2:	9b07      	ldr	r3, [sp, #28]
 8024ae4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024ae6:	9317      	str	r3, [sp, #92]	; 0x5c
 8024ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	f340 8165 	ble.w	8024dba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024af0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024af2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024af4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024af8:	1422      	asrs	r2, r4, #16
 8024afa:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024afe:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024b02:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024b06:	689b      	ldr	r3, [r3, #8]
 8024b08:	f100 81d5 	bmi.w	8024eb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024b0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8024b10:	4542      	cmp	r2, r8
 8024b12:	f280 81d0 	bge.w	8024eb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024b16:	f1bc 0f00 	cmp.w	ip, #0
 8024b1a:	f2c0 81cc 	blt.w	8024eb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024b1e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024b22:	45c4      	cmp	ip, r8
 8024b24:	f280 81c7 	bge.w	8024eb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8024b28:	b21b      	sxth	r3, r3
 8024b2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8024b2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024b30:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024b34:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024b38:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024b3c:	2900      	cmp	r1, #0
 8024b3e:	f000 8182 	beq.w	8024e46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024b42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024b46:	950b      	str	r5, [sp, #44]	; 0x2c
 8024b48:	0e2d      	lsrs	r5, r5, #24
 8024b4a:	9512      	str	r5, [sp, #72]	; 0x48
 8024b4c:	b180      	cbz	r0, 8024b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024b4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024b52:	3b01      	subs	r3, #1
 8024b54:	009b      	lsls	r3, r3, #2
 8024b56:	3304      	adds	r3, #4
 8024b58:	eb08 0c03 	add.w	ip, r8, r3
 8024b5c:	f858 3003 	ldr.w	r3, [r8, r3]
 8024b60:	9308      	str	r3, [sp, #32]
 8024b62:	0e1b      	lsrs	r3, r3, #24
 8024b64:	9310      	str	r3, [sp, #64]	; 0x40
 8024b66:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8024b6c:	0e1b      	lsrs	r3, r3, #24
 8024b6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024b70:	b289      	uxth	r1, r1
 8024b72:	b280      	uxth	r0, r0
 8024b74:	fb01 f900 	mul.w	r9, r1, r0
 8024b78:	0109      	lsls	r1, r1, #4
 8024b7a:	eba1 0809 	sub.w	r8, r1, r9
 8024b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024b80:	fa1f f888 	uxth.w	r8, r8
 8024b84:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024b88:	fb08 f303 	mul.w	r3, r8, r3
 8024b8c:	b280      	uxth	r0, r0
 8024b8e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024b92:	1a09      	subs	r1, r1, r0
 8024b94:	b289      	uxth	r1, r1
 8024b96:	fb01 330e 	mla	r3, r1, lr, r3
 8024b9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024b9c:	fb00 3305 	mla	r3, r0, r5, r3
 8024ba0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024ba2:	fb09 3305 	mla	r3, r9, r5, r3
 8024ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024baa:	2b00      	cmp	r3, #0
 8024bac:	f000 80d2 	beq.w	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024bb0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024bb4:	d01b      	beq.n	8024bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8024bb6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024bba:	fb0e fa0a 	mul.w	sl, lr, sl
 8024bbe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024bc2:	fb0e fe02 	mul.w	lr, lr, r2
 8024bc6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8024bca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024bce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bd2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024bd6:	4452      	add	r2, sl
 8024bd8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024bdc:	0a12      	lsrs	r2, r2, #8
 8024bde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024be2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024be6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024bea:	ea42 020c 	orr.w	r2, r2, ip
 8024bee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024bf0:	2dff      	cmp	r5, #255	; 0xff
 8024bf2:	d021      	beq.n	8024c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024bf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024bf6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024bfa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024bfc:	fb05 fb0b 	mul.w	fp, r5, fp
 8024c00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024c02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c06:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024c0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c10:	fb05 fa0a 	mul.w	sl, r5, sl
 8024c14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c1c:	44de      	add	lr, fp
 8024c1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c32:	ea4e 050a 	orr.w	r5, lr, sl
 8024c36:	950b      	str	r5, [sp, #44]	; 0x2c
 8024c38:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c3a:	2dff      	cmp	r5, #255	; 0xff
 8024c3c:	d021      	beq.n	8024c82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024c3e:	9d08      	ldr	r5, [sp, #32]
 8024c40:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024c44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c46:	fb05 fb0b 	mul.w	fp, r5, fp
 8024c4a:	9d08      	ldr	r5, [sp, #32]
 8024c4c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024c50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c52:	fb05 fa0e 	mul.w	sl, r5, lr
 8024c56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024c66:	44de      	add	lr, fp
 8024c68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024c6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024c70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024c78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c7c:	ea4e 050a 	orr.w	r5, lr, sl
 8024c80:	9508      	str	r5, [sp, #32]
 8024c82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024c84:	2dff      	cmp	r5, #255	; 0xff
 8024c86:	d021      	beq.n	8024ccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8024c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024c8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024c8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024c90:	fb05 fb0b 	mul.w	fp, r5, fp
 8024c94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024c96:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024c9a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024c9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024ca0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ca4:	fb05 fa0a 	mul.w	sl, r5, sl
 8024ca8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024cac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024cb0:	44de      	add	lr, fp
 8024cb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024cb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024cba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024cbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024cc6:	ea4e 050a 	orr.w	r5, lr, sl
 8024cca:	950c      	str	r5, [sp, #48]	; 0x30
 8024ccc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024cce:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024cd2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024cd6:	fb08 fc0c 	mul.w	ip, r8, ip
 8024cda:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024cde:	9d08      	ldr	r5, [sp, #32]
 8024ce0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024ce4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024ce8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024cec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024cee:	2bff      	cmp	r3, #255	; 0xff
 8024cf0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024cf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024cf6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024cfa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024cfe:	fb08 f80e 	mul.w	r8, r8, lr
 8024d02:	fb01 8202 	mla	r2, r1, r2, r8
 8024d06:	9908      	ldr	r1, [sp, #32]
 8024d08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d0c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024d10:	fb00 220a 	mla	r2, r0, sl, r2
 8024d14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024d16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024d1a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8024d1e:	fb09 2900 	mla	r9, r9, r0, r2
 8024d22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024d26:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024d2a:	ea4c 0c09 	orr.w	ip, ip, r9
 8024d2e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8024d32:	f040 8091 	bne.w	8024e58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8024d36:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8024d3a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8024d3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d42:	f022 0207 	bic.w	r2, r2, #7
 8024d46:	431a      	orrs	r2, r3
 8024d48:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024d4c:	ea4c 0c02 	orr.w	ip, ip, r2
 8024d50:	f8a7 c000 	strh.w	ip, [r7]
 8024d54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024d56:	3702      	adds	r7, #2
 8024d58:	441c      	add	r4, r3
 8024d5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d5c:	441e      	add	r6, r3
 8024d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024d60:	3b01      	subs	r3, #1
 8024d62:	9317      	str	r3, [sp, #92]	; 0x5c
 8024d64:	e6c0      	b.n	8024ae8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024d66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024d68:	441c      	add	r4, r3
 8024d6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024d6c:	441e      	add	r6, r3
 8024d6e:	9b07      	ldr	r3, [sp, #28]
 8024d70:	3b01      	subs	r3, #1
 8024d72:	9307      	str	r3, [sp, #28]
 8024d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d76:	3302      	adds	r3, #2
 8024d78:	930a      	str	r3, [sp, #40]	; 0x28
 8024d7a:	e695      	b.n	8024aa8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024d7c:	d024      	beq.n	8024dc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8024d7e:	9b07      	ldr	r3, [sp, #28]
 8024d80:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024d82:	3b01      	subs	r3, #1
 8024d84:	fb00 4003 	mla	r0, r0, r3, r4
 8024d88:	1400      	asrs	r0, r0, #16
 8024d8a:	f53f aeaa 	bmi.w	8024ae2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024d8e:	3901      	subs	r1, #1
 8024d90:	4288      	cmp	r0, r1
 8024d92:	f6bf aea6 	bge.w	8024ae2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024d96:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024d98:	fb01 6303 	mla	r3, r1, r3, r6
 8024d9c:	141b      	asrs	r3, r3, #16
 8024d9e:	f53f aea0 	bmi.w	8024ae2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024da2:	3a01      	subs	r2, #1
 8024da4:	4293      	cmp	r3, r2
 8024da6:	f6bf ae9c 	bge.w	8024ae2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024daa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024dae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8024db2:	f1bb 0f00 	cmp.w	fp, #0
 8024db6:	f300 809a 	bgt.w	8024eee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8024dba:	9b07      	ldr	r3, [sp, #28]
 8024dbc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024dc2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8024dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	f340 81ec 	ble.w	80251a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8024dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024dd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024dd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ddc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024de0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024de4:	eef0 6a62 	vmov.f32	s13, s5
 8024de8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024dec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024df0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024df4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024df8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024dfc:	ee16 4a90 	vmov	r4, s13
 8024e00:	eef0 6a43 	vmov.f32	s13, s6
 8024e04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024e08:	ee12 2a90 	vmov	r2, s5
 8024e0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e1a:	ee13 2a10 	vmov	r2, s6
 8024e1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e22:	ee16 6a90 	vmov	r6, s13
 8024e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e2a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024e30:	3b01      	subs	r3, #1
 8024e32:	9316      	str	r3, [sp, #88]	; 0x58
 8024e34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e36:	bf08      	it	eq
 8024e38:	4613      	moveq	r3, r2
 8024e3a:	eeb0 3a67 	vmov.f32	s6, s15
 8024e3e:	9307      	str	r3, [sp, #28]
 8024e40:	eef0 2a47 	vmov.f32	s5, s14
 8024e44:	e622      	b.n	8024a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8024e46:	2800      	cmp	r0, #0
 8024e48:	f43f ae92 	beq.w	8024b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024e4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024e50:	9308      	str	r3, [sp, #32]
 8024e52:	0e1b      	lsrs	r3, r3, #24
 8024e54:	9310      	str	r3, [sp, #64]	; 0x40
 8024e56:	e68b      	b.n	8024b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8024e58:	43db      	mvns	r3, r3
 8024e5a:	8839      	ldrh	r1, [r7, #0]
 8024e5c:	fa5f f883 	uxtb.w	r8, r3
 8024e60:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8024e64:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8024e68:	fb0e fe08 	mul.w	lr, lr, r8
 8024e6c:	10c8      	asrs	r0, r1, #3
 8024e6e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024e72:	fb00 f008 	mul.w	r0, r0, r8
 8024e76:	00cb      	lsls	r3, r1, #3
 8024e78:	f10e 0101 	add.w	r1, lr, #1
 8024e7c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8024e80:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024e84:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8024e88:	b2db      	uxtb	r3, r3
 8024e8a:	f100 0e01 	add.w	lr, r0, #1
 8024e8e:	fb03 f308 	mul.w	r3, r3, r8
 8024e92:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8024e96:	4dc6      	ldr	r5, [pc, #792]	; (80251b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8024e98:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024e9c:	b2c9      	uxtb	r1, r1
 8024e9e:	00d2      	lsls	r2, r2, #3
 8024ea0:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8024ea4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ea8:	430a      	orrs	r2, r1
 8024eaa:	1c59      	adds	r1, r3, #1
 8024eac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024eb0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024eb4:	e748      	b.n	8024d48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024eb6:	f112 0801 	adds.w	r8, r2, #1
 8024eba:	f53f af4b 	bmi.w	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ebe:	4543      	cmp	r3, r8
 8024ec0:	f6ff af48 	blt.w	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ec4:	f11c 0801 	adds.w	r8, ip, #1
 8024ec8:	f53f af44 	bmi.w	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ecc:	45c6      	cmp	lr, r8
 8024ece:	f6ff af41 	blt.w	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024ed2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8024ed6:	fa0f f28e 	sxth.w	r2, lr
 8024eda:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024ede:	9200      	str	r2, [sp, #0]
 8024ee0:	b21b      	sxth	r3, r3
 8024ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024ee4:	4639      	mov	r1, r7
 8024ee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024ee8:	f7ff fc87 	bl	80247fa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8024eec:	e732      	b.n	8024d54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024eee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ef0:	1421      	asrs	r1, r4, #16
 8024ef2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8024ef6:	1433      	asrs	r3, r6, #16
 8024ef8:	fb07 1303 	mla	r3, r7, r3, r1
 8024efc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024efe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024f00:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024f04:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8024f08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024f0c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024f10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024f14:	2a00      	cmp	r2, #0
 8024f16:	f000 8108 	beq.w	802512a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024f1a:	684d      	ldr	r5, [r1, #4]
 8024f1c:	950d      	str	r5, [sp, #52]	; 0x34
 8024f1e:	0e2d      	lsrs	r5, r5, #24
 8024f20:	9514      	str	r5, [sp, #80]	; 0x50
 8024f22:	b178      	cbz	r0, 8024f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024f24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8024f28:	3f01      	subs	r7, #1
 8024f2a:	00bf      	lsls	r7, r7, #2
 8024f2c:	3704      	adds	r7, #4
 8024f2e:	eb01 0e07 	add.w	lr, r1, r7
 8024f32:	59c9      	ldr	r1, [r1, r7]
 8024f34:	9109      	str	r1, [sp, #36]	; 0x24
 8024f36:	0e09      	lsrs	r1, r1, #24
 8024f38:	9111      	str	r1, [sp, #68]	; 0x44
 8024f3a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024f3e:	910e      	str	r1, [sp, #56]	; 0x38
 8024f40:	0e09      	lsrs	r1, r1, #24
 8024f42:	9115      	str	r1, [sp, #84]	; 0x54
 8024f44:	b292      	uxth	r2, r2
 8024f46:	b280      	uxth	r0, r0
 8024f48:	fb02 f900 	mul.w	r9, r2, r0
 8024f4c:	0112      	lsls	r2, r2, #4
 8024f4e:	eba2 0e09 	sub.w	lr, r2, r9
 8024f52:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8024f56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024f58:	fa1f fe8e 	uxth.w	lr, lr
 8024f5c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024f60:	fb0e f202 	mul.w	r2, lr, r2
 8024f64:	b280      	uxth	r0, r0
 8024f66:	1a09      	subs	r1, r1, r0
 8024f68:	b289      	uxth	r1, r1
 8024f6a:	fb01 220c 	mla	r2, r1, ip, r2
 8024f6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024f70:	fb00 2205 	mla	r2, r0, r5, r2
 8024f74:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024f76:	fb09 2205 	mla	r2, r9, r5, r2
 8024f7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024f7e:	2a00      	cmp	r2, #0
 8024f80:	f000 80ca 	beq.w	8025118 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024f84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024f88:	d019      	beq.n	8024fbe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8024f8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024f8e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024f92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f96:	fb0c fc03 	mul.w	ip, ip, r3
 8024f9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024f9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fa2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fa6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024faa:	4453      	add	r3, sl
 8024fac:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024fb0:	0a1b      	lsrs	r3, r3, #8
 8024fb2:	0a3f      	lsrs	r7, r7, #8
 8024fb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fb8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024fbc:	433b      	orrs	r3, r7
 8024fbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024fc0:	2dff      	cmp	r5, #255	; 0xff
 8024fc2:	d020      	beq.n	8025006 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8024fc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024fc6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024fca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024fcc:	436f      	muls	r7, r5
 8024fce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024fd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024fd4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024fd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024fda:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024fde:	fb05 fa0a 	mul.w	sl, r5, sl
 8024fe2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024fe6:	44bc      	add	ip, r7
 8024fe8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024fec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ff0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ff4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ff8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ffc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025000:	ea4c 050a 	orr.w	r5, ip, sl
 8025004:	950d      	str	r5, [sp, #52]	; 0x34
 8025006:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025008:	2dff      	cmp	r5, #255	; 0xff
 802500a:	d020      	beq.n	802504e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802500c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802500e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025012:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025014:	436f      	muls	r7, r5
 8025016:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025018:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802501c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802501e:	fb05 fa0c 	mul.w	sl, r5, ip
 8025022:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025026:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802502a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802502e:	44bc      	add	ip, r7
 8025030:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025034:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025038:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802503c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025040:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025044:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025048:	ea4c 050a 	orr.w	r5, ip, sl
 802504c:	9509      	str	r5, [sp, #36]	; 0x24
 802504e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025050:	2dff      	cmp	r5, #255	; 0xff
 8025052:	d020      	beq.n	8025096 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8025054:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025056:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802505a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802505c:	436f      	muls	r7, r5
 802505e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025060:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025064:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8025068:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802506a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802506e:	fb05 fa0a 	mul.w	sl, r5, sl
 8025072:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025076:	44bc      	add	ip, r7
 8025078:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802507c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025084:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025088:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802508c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025090:	ea4c 050a 	orr.w	r5, ip, sl
 8025094:	950e      	str	r5, [sp, #56]	; 0x38
 8025096:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025098:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802509c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80250a0:	fb0e f707 	mul.w	r7, lr, r7
 80250a4:	fb01 770c 	mla	r7, r1, ip, r7
 80250a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80250aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80250b2:	fb00 770c 	mla	r7, r0, ip, r7
 80250b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80250b8:	2aff      	cmp	r2, #255	; 0xff
 80250ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80250be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80250c0:	fb09 770c 	mla	r7, r9, ip, r7
 80250c4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80250c8:	fb0e fe0c 	mul.w	lr, lr, ip
 80250cc:	fb01 e303 	mla	r3, r1, r3, lr
 80250d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80250d2:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80250d6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80250da:	fb00 330a 	mla	r3, r0, sl, r3
 80250de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80250e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80250e4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80250e8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80250ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80250f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80250f4:	ea47 070c 	orr.w	r7, r7, ip
 80250f8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80250fc:	d11e      	bne.n	802513c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80250fe:	097a      	lsrs	r2, r7, #5
 8025100:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8025104:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025108:	f023 0307 	bic.w	r3, r3, #7
 802510c:	4313      	orrs	r3, r2
 802510e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8025112:	431f      	orrs	r7, r3
 8025114:	f8a8 7000 	strh.w	r7, [r8]
 8025118:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802511a:	f108 0802 	add.w	r8, r8, #2
 802511e:	441c      	add	r4, r3
 8025120:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025126:	441e      	add	r6, r3
 8025128:	e643      	b.n	8024db2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802512a:	2800      	cmp	r0, #0
 802512c:	f43f af0a 	beq.w	8024f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025130:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8025134:	9109      	str	r1, [sp, #36]	; 0x24
 8025136:	0e09      	lsrs	r1, r1, #24
 8025138:	9111      	str	r1, [sp, #68]	; 0x44
 802513a:	e703      	b.n	8024f44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802513c:	43d2      	mvns	r2, r2
 802513e:	f8b8 1000 	ldrh.w	r1, [r8]
 8025142:	fa5f fe82 	uxtb.w	lr, r2
 8025146:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802514a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802514e:	fb0c fc0e 	mul.w	ip, ip, lr
 8025152:	10c8      	asrs	r0, r1, #3
 8025154:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025158:	fb00 f00e 	mul.w	r0, r0, lr
 802515c:	00ca      	lsls	r2, r1, #3
 802515e:	f10c 0101 	add.w	r1, ip, #1
 8025162:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025166:	b2d2      	uxtb	r2, r2
 8025168:	0c39      	lsrs	r1, r7, #16
 802516a:	fb02 f20e 	mul.w	r2, r2, lr
 802516e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8025172:	490f      	ldr	r1, [pc, #60]	; (80251b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8025174:	fa5f fc8c 	uxtb.w	ip, ip
 8025178:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802517c:	1c41      	adds	r1, r0, #1
 802517e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8025182:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025186:	1c51      	adds	r1, r2, #1
 8025188:	00c0      	lsls	r0, r0, #3
 802518a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802518e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025192:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025196:	ea4c 0c00 	orr.w	ip, ip, r0
 802519a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802519e:	ea47 0c0c 	orr.w	ip, r7, ip
 80251a2:	f8a8 c000 	strh.w	ip, [r8]
 80251a6:	e7b7      	b.n	8025118 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80251a8:	b01b      	add	sp, #108	; 0x6c
 80251aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251ae:	bf00      	nop
 80251b0:	fffff800 	.word	0xfffff800

080251b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80251b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251b8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80251bc:	2d00      	cmp	r5, #0
 80251be:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80251c2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80251c6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80251ca:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80251ce:	fb05 0e03 	mla	lr, r5, r3, r0
 80251d2:	f2c0 808c 	blt.w	80252ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80251d6:	45a9      	cmp	r9, r5
 80251d8:	f340 8089 	ble.w	80252ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80251dc:	2800      	cmp	r0, #0
 80251de:	f2c0 8084 	blt.w	80252ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80251e2:	4580      	cmp	r8, r0
 80251e4:	f340 8081 	ble.w	80252ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80251e8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80251ec:	5d16      	ldrb	r6, [r2, r4]
 80251ee:	f01e 0f01 	tst.w	lr, #1
 80251f2:	bf0c      	ite	eq
 80251f4:	f006 060f 	andeq.w	r6, r6, #15
 80251f8:	1136      	asrne	r6, r6, #4
 80251fa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80251fe:	b2f6      	uxtb	r6, r6
 8025200:	1c44      	adds	r4, r0, #1
 8025202:	d477      	bmi.n	80252f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8025204:	45a0      	cmp	r8, r4
 8025206:	dd75      	ble.n	80252f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8025208:	2f00      	cmp	r7, #0
 802520a:	d075      	beq.n	80252f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802520c:	f10e 0a01 	add.w	sl, lr, #1
 8025210:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025214:	5d14      	ldrb	r4, [r2, r4]
 8025216:	f01a 0f01 	tst.w	sl, #1
 802521a:	bf0c      	ite	eq
 802521c:	f004 040f 	andeq.w	r4, r4, #15
 8025220:	1124      	asrne	r4, r4, #4
 8025222:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025226:	b2e4      	uxtb	r4, r4
 8025228:	3501      	adds	r5, #1
 802522a:	d469      	bmi.n	8025300 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802522c:	45a9      	cmp	r9, r5
 802522e:	dd67      	ble.n	8025300 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8025230:	f1bc 0f00 	cmp.w	ip, #0
 8025234:	d067      	beq.n	8025306 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8025236:	2800      	cmp	r0, #0
 8025238:	db60      	blt.n	80252fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802523a:	4580      	cmp	r8, r0
 802523c:	dd5e      	ble.n	80252fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802523e:	eb03 090e 	add.w	r9, r3, lr
 8025242:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8025246:	5d55      	ldrb	r5, [r2, r5]
 8025248:	f019 0f01 	tst.w	r9, #1
 802524c:	bf0c      	ite	eq
 802524e:	f005 050f 	andeq.w	r5, r5, #15
 8025252:	112d      	asrne	r5, r5, #4
 8025254:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025258:	b2ed      	uxtb	r5, r5
 802525a:	3001      	adds	r0, #1
 802525c:	d456      	bmi.n	802530c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802525e:	4580      	cmp	r8, r0
 8025260:	dd54      	ble.n	802530c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8025262:	2f00      	cmp	r7, #0
 8025264:	d054      	beq.n	8025310 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8025266:	3301      	adds	r3, #1
 8025268:	449e      	add	lr, r3
 802526a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802526e:	5cd0      	ldrb	r0, [r2, r3]
 8025270:	f01e 0f01 	tst.w	lr, #1
 8025274:	bf0c      	ite	eq
 8025276:	f000 000f 	andeq.w	r0, r0, #15
 802527a:	1100      	asrne	r0, r0, #4
 802527c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025280:	b2c3      	uxtb	r3, r0
 8025282:	b2ba      	uxth	r2, r7
 8025284:	fa1f fc8c 	uxth.w	ip, ip
 8025288:	fb02 f00c 	mul.w	r0, r2, ip
 802528c:	0112      	lsls	r2, r2, #4
 802528e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025292:	1a12      	subs	r2, r2, r0
 8025294:	b292      	uxth	r2, r2
 8025296:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802529a:	4362      	muls	r2, r4
 802529c:	fa1f fc8c 	uxth.w	ip, ip
 80252a0:	eba7 070c 	sub.w	r7, r7, ip
 80252a4:	b2bf      	uxth	r7, r7
 80252a6:	fb06 2207 	mla	r2, r6, r7, r2
 80252aa:	fb0c 2505 	mla	r5, ip, r5, r2
 80252ae:	fb00 5303 	mla	r3, r0, r3, r5
 80252b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80252b6:	b1b3      	cbz	r3, 80252e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80252b8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80252bc:	435a      	muls	r2, r3
 80252be:	1c53      	adds	r3, r2, #1
 80252c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80252c4:	4a2d      	ldr	r2, [pc, #180]	; (802537c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80252c6:	121b      	asrs	r3, r3, #8
 80252c8:	6812      	ldr	r2, [r2, #0]
 80252ca:	2bff      	cmp	r3, #255	; 0xff
 80252cc:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80252d0:	d120      	bne.n	8025314 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80252d2:	4b2b      	ldr	r3, [pc, #172]	; (8025380 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80252d4:	0950      	lsrs	r0, r2, #5
 80252d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80252da:	4033      	ands	r3, r6
 80252dc:	4318      	orrs	r0, r3
 80252de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80252e2:	4302      	orrs	r2, r0
 80252e4:	800a      	strh	r2, [r1, #0]
 80252e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80252ea:	2600      	movs	r6, #0
 80252ec:	e788      	b.n	8025200 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80252ee:	2400      	movs	r4, #0
 80252f0:	4626      	mov	r6, r4
 80252f2:	e799      	b.n	8025228 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80252f4:	2400      	movs	r4, #0
 80252f6:	e797      	b.n	8025228 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80252f8:	463c      	mov	r4, r7
 80252fa:	e795      	b.n	8025228 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80252fc:	2500      	movs	r5, #0
 80252fe:	e7ac      	b.n	802525a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8025300:	2300      	movs	r3, #0
 8025302:	461d      	mov	r5, r3
 8025304:	e7bd      	b.n	8025282 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025306:	4663      	mov	r3, ip
 8025308:	4665      	mov	r5, ip
 802530a:	e7ba      	b.n	8025282 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802530c:	2300      	movs	r3, #0
 802530e:	e7b8      	b.n	8025282 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025310:	463b      	mov	r3, r7
 8025312:	e7b6      	b.n	8025282 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8025314:	b29f      	uxth	r7, r3
 8025316:	43db      	mvns	r3, r3
 8025318:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802531c:	880d      	ldrh	r5, [r1, #0]
 802531e:	fb10 f007 	smulbb	r0, r0, r7
 8025322:	b2f6      	uxtb	r6, r6
 8025324:	b2d2      	uxtb	r2, r2
 8025326:	122c      	asrs	r4, r5, #8
 8025328:	fb12 f207 	smulbb	r2, r2, r7
 802532c:	fb16 f607 	smulbb	r6, r6, r7
 8025330:	b2db      	uxtb	r3, r3
 8025332:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025336:	fb04 0403 	mla	r4, r4, r3, r0
 802533a:	10e8      	asrs	r0, r5, #3
 802533c:	00ed      	lsls	r5, r5, #3
 802533e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025342:	b2ed      	uxtb	r5, r5
 8025344:	fb00 6603 	mla	r6, r0, r3, r6
 8025348:	fb05 2303 	mla	r3, r5, r3, r2
 802534c:	b2a4      	uxth	r4, r4
 802534e:	b29a      	uxth	r2, r3
 8025350:	1c63      	adds	r3, r4, #1
 8025352:	b2b0      	uxth	r0, r6
 8025354:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025358:	1c53      	adds	r3, r2, #1
 802535a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802535e:	1c42      	adds	r2, r0, #1
 8025360:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025364:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025368:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802536c:	0940      	lsrs	r0, r0, #5
 802536e:	4323      	orrs	r3, r4
 8025370:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025374:	4303      	orrs	r3, r0
 8025376:	800b      	strh	r3, [r1, #0]
 8025378:	e7b5      	b.n	80252e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802537a:	bf00      	nop
 802537c:	2004f704 	.word	0x2004f704
 8025380:	00fff800 	.word	0x00fff800

08025384 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025388:	b097      	sub	sp, #92	; 0x5c
 802538a:	9214      	str	r2, [sp, #80]	; 0x50
 802538c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802538e:	9015      	str	r0, [sp, #84]	; 0x54
 8025390:	9309      	str	r3, [sp, #36]	; 0x24
 8025392:	6850      	ldr	r0, [r2, #4]
 8025394:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8025398:	910d      	str	r1, [sp, #52]	; 0x34
 802539a:	930f      	str	r3, [sp, #60]	; 0x3c
 802539c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80253a0:	fb00 1303 	mla	r3, r0, r3, r1
 80253a4:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80253a8:	6812      	ldr	r2, [r2, #0]
 80253aa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80253ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253b0:	689b      	ldr	r3, [r3, #8]
 80253b2:	3301      	adds	r3, #1
 80253b4:	f023 0301 	bic.w	r3, r3, #1
 80253b8:	930a      	str	r3, [sp, #40]	; 0x28
 80253ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253bc:	681f      	ldr	r7, [r3, #0]
 80253be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	dc03      	bgt.n	80253cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80253c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	f340 8287 	ble.w	80258da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80253cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80253ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80253d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80253d6:	1e48      	subs	r0, r1, #1
 80253d8:	f102 3cff 	add.w	ip, r2, #4294967295
 80253dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253de:	2b00      	cmp	r3, #0
 80253e0:	f340 80c3 	ble.w	802556a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80253e4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80253e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80253ec:	d406      	bmi.n	80253fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253ee:	4586      	cmp	lr, r0
 80253f0:	da04      	bge.n	80253fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	db02      	blt.n	80253fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80253f6:	4563      	cmp	r3, ip
 80253f8:	f2c0 80b8 	blt.w	802556c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80253fc:	f11e 0e01 	adds.w	lr, lr, #1
 8025400:	f100 80a9 	bmi.w	8025556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025404:	4571      	cmp	r1, lr
 8025406:	f2c0 80a6 	blt.w	8025556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802540a:	3301      	adds	r3, #1
 802540c:	f100 80a3 	bmi.w	8025556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025410:	429a      	cmp	r2, r3
 8025412:	f2c0 80a0 	blt.w	8025556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025416:	46c8      	mov	r8, r9
 8025418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802541a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802541e:	930e      	str	r3, [sp, #56]	; 0x38
 8025420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025422:	2b00      	cmp	r3, #0
 8025424:	f340 80c2 	ble.w	80255ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8025428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802542a:	1430      	asrs	r0, r6, #16
 802542c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025430:	1423      	asrs	r3, r4, #16
 8025432:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025436:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802543a:	f100 814d 	bmi.w	80256d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802543e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025442:	455b      	cmp	r3, fp
 8025444:	f280 8148 	bge.w	80256d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025448:	2800      	cmp	r0, #0
 802544a:	f2c0 8145 	blt.w	80256d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802544e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025452:	4558      	cmp	r0, fp
 8025454:	f280 8140 	bge.w	80256d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025458:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802545a:	fb00 3305 	mla	r3, r0, r5, r3
 802545e:	0858      	lsrs	r0, r3, #1
 8025460:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025464:	07dd      	lsls	r5, r3, #31
 8025466:	bf54      	ite	pl
 8025468:	f00c 0c0f 	andpl.w	ip, ip, #15
 802546c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025470:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025474:	fa5f fc8c 	uxtb.w	ip, ip
 8025478:	2a00      	cmp	r2, #0
 802547a:	f000 80db 	beq.w	8025634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802547e:	1c58      	adds	r0, r3, #1
 8025480:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025484:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025488:	07c0      	lsls	r0, r0, #31
 802548a:	bf54      	ite	pl
 802548c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025490:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025494:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025498:	fa5f f08e 	uxtb.w	r0, lr
 802549c:	9010      	str	r0, [sp, #64]	; 0x40
 802549e:	b1c9      	cbz	r1, 80254d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80254a0:	4453      	add	r3, sl
 80254a2:	0858      	lsrs	r0, r3, #1
 80254a4:	5c38      	ldrb	r0, [r7, r0]
 80254a6:	07dd      	lsls	r5, r3, #31
 80254a8:	bf54      	ite	pl
 80254aa:	f000 000f 	andpl.w	r0, r0, #15
 80254ae:	1100      	asrmi	r0, r0, #4
 80254b0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80254b4:	3301      	adds	r3, #1
 80254b6:	b2c0      	uxtb	r0, r0
 80254b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80254ba:	0858      	lsrs	r0, r3, #1
 80254bc:	f817 e000 	ldrb.w	lr, [r7, r0]
 80254c0:	07dd      	lsls	r5, r3, #31
 80254c2:	bf54      	ite	pl
 80254c4:	f00e 030f 	andpl.w	r3, lr, #15
 80254c8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80254cc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80254d0:	b2db      	uxtb	r3, r3
 80254d2:	9311      	str	r3, [sp, #68]	; 0x44
 80254d4:	b292      	uxth	r2, r2
 80254d6:	b289      	uxth	r1, r1
 80254d8:	fb02 f301 	mul.w	r3, r2, r1
 80254dc:	0112      	lsls	r2, r2, #4
 80254de:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80254e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80254e4:	1ad2      	subs	r2, r2, r3
 80254e6:	b292      	uxth	r2, r2
 80254e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80254ec:	436a      	muls	r2, r5
 80254ee:	b289      	uxth	r1, r1
 80254f0:	1a40      	subs	r0, r0, r1
 80254f2:	b280      	uxth	r0, r0
 80254f4:	fb0c 2c00 	mla	ip, ip, r0, r2
 80254f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80254fa:	fb01 c102 	mla	r1, r1, r2, ip
 80254fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025500:	fb03 1302 	mla	r3, r3, r2, r1
 8025504:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025508:	b1db      	cbz	r3, 8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802550a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802550c:	4353      	muls	r3, r2
 802550e:	1c5a      	adds	r2, r3, #1
 8025510:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025514:	4ac6      	ldr	r2, [pc, #792]	; (8025830 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8025516:	121b      	asrs	r3, r3, #8
 8025518:	6812      	ldr	r2, [r2, #0]
 802551a:	2bff      	cmp	r3, #255	; 0xff
 802551c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8025520:	f040 8099 	bne.w	8025656 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8025524:	0953      	lsrs	r3, r2, #5
 8025526:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802552a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802552e:	f02c 0c07 	bic.w	ip, ip, #7
 8025532:	ea43 0c0c 	orr.w	ip, r3, ip
 8025536:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802553a:	ea4c 0202 	orr.w	r2, ip, r2
 802553e:	f8a8 2000 	strh.w	r2, [r8]
 8025542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025544:	f108 0802 	add.w	r8, r8, #2
 8025548:	441c      	add	r4, r3
 802554a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802554c:	441e      	add	r6, r3
 802554e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025550:	3b01      	subs	r3, #1
 8025552:	930e      	str	r3, [sp, #56]	; 0x38
 8025554:	e764      	b.n	8025420 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025558:	f109 0902 	add.w	r9, r9, #2
 802555c:	441c      	add	r4, r3
 802555e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025560:	441e      	add	r6, r3
 8025562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025564:	3b01      	subs	r3, #1
 8025566:	9309      	str	r3, [sp, #36]	; 0x24
 8025568:	e738      	b.n	80253dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802556a:	d024      	beq.n	80255b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802556c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802556e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025570:	3b01      	subs	r3, #1
 8025572:	fb00 4003 	mla	r0, r0, r3, r4
 8025576:	1400      	asrs	r0, r0, #16
 8025578:	f53f af4d 	bmi.w	8025416 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802557c:	3901      	subs	r1, #1
 802557e:	4288      	cmp	r0, r1
 8025580:	f6bf af49 	bge.w	8025416 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025584:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025586:	fb01 6303 	mla	r3, r1, r3, r6
 802558a:	141b      	asrs	r3, r3, #16
 802558c:	f53f af43 	bmi.w	8025416 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025590:	3a01      	subs	r2, #1
 8025592:	4293      	cmp	r3, r2
 8025594:	f6bf af3f 	bge.w	8025416 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025598:	46c8      	mov	r8, r9
 802559a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802559e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80255a2:	930e      	str	r3, [sp, #56]	; 0x38
 80255a4:	f1bb 0f00 	cmp.w	fp, #0
 80255a8:	f300 80b7 	bgt.w	802571a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80255ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255ae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80255b2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80255b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80255b8:	2b00      	cmp	r3, #0
 80255ba:	f340 818e 	ble.w	80258da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80255be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80255c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80255c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80255ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80255ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80255d2:	eef0 6a62 	vmov.f32	s13, s5
 80255d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80255da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80255de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80255e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80255e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80255ea:	ee16 4a90 	vmov	r4, s13
 80255ee:	eef0 6a43 	vmov.f32	s13, s6
 80255f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80255f6:	ee12 2a90 	vmov	r2, s5
 80255fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80255fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025604:	fb92 f3f3 	sdiv	r3, r2, r3
 8025608:	ee13 2a10 	vmov	r2, s6
 802560c:	9323      	str	r3, [sp, #140]	; 0x8c
 802560e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025610:	ee16 6a90 	vmov	r6, s13
 8025614:	fb92 f3f3 	sdiv	r3, r2, r3
 8025618:	9324      	str	r3, [sp, #144]	; 0x90
 802561a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802561c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802561e:	3b01      	subs	r3, #1
 8025620:	930d      	str	r3, [sp, #52]	; 0x34
 8025622:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025624:	bf08      	it	eq
 8025626:	4613      	moveq	r3, r2
 8025628:	eeb0 3a67 	vmov.f32	s6, s15
 802562c:	9309      	str	r3, [sp, #36]	; 0x24
 802562e:	eef0 2a47 	vmov.f32	s5, s14
 8025632:	e6c4      	b.n	80253be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025634:	2900      	cmp	r1, #0
 8025636:	f43f af4d 	beq.w	80254d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802563a:	eb0a 0003 	add.w	r0, sl, r3
 802563e:	0843      	lsrs	r3, r0, #1
 8025640:	5cfb      	ldrb	r3, [r7, r3]
 8025642:	07c0      	lsls	r0, r0, #31
 8025644:	bf54      	ite	pl
 8025646:	f003 030f 	andpl.w	r3, r3, #15
 802564a:	111b      	asrmi	r3, r3, #4
 802564c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025650:	b2db      	uxtb	r3, r3
 8025652:	930b      	str	r3, [sp, #44]	; 0x2c
 8025654:	e73e      	b.n	80254d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8025656:	fa1f fb83 	uxth.w	fp, r3
 802565a:	43db      	mvns	r3, r3
 802565c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025660:	f8b8 e000 	ldrh.w	lr, [r8]
 8025664:	fb11 f10b 	smulbb	r1, r1, fp
 8025668:	fa5f fc8c 	uxtb.w	ip, ip
 802566c:	b2d2      	uxtb	r2, r2
 802566e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025672:	fb1c fc0b 	smulbb	ip, ip, fp
 8025676:	fb12 fb0b 	smulbb	fp, r2, fp
 802567a:	b2db      	uxtb	r3, r3
 802567c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025680:	fb00 1003 	mla	r0, r0, r3, r1
 8025684:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8025688:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802568c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025690:	fa5f fe8e 	uxtb.w	lr, lr
 8025694:	fb01 cc03 	mla	ip, r1, r3, ip
 8025698:	fb0e bb03 	mla	fp, lr, r3, fp
 802569c:	b280      	uxth	r0, r0
 802569e:	1c43      	adds	r3, r0, #1
 80256a0:	fa1f fc8c 	uxth.w	ip, ip
 80256a4:	fa1f fb8b 	uxth.w	fp, fp
 80256a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80256ac:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80256b0:	f10c 0101 	add.w	r1, ip, #1
 80256b4:	f10b 0001 	add.w	r0, fp, #1
 80256b8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80256bc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80256c0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80256c4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80256c8:	4318      	orrs	r0, r3
 80256ca:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80256ce:	ea40 000c 	orr.w	r0, r0, ip
 80256d2:	f8a8 0000 	strh.w	r0, [r8]
 80256d6:	e734      	b.n	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80256d8:	f113 0b01 	adds.w	fp, r3, #1
 80256dc:	f53f af31 	bmi.w	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80256e0:	45dc      	cmp	ip, fp
 80256e2:	f6ff af2e 	blt.w	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80256e6:	f110 0b01 	adds.w	fp, r0, #1
 80256ea:	f53f af2a 	bmi.w	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80256ee:	45de      	cmp	lr, fp
 80256f0:	f6ff af27 	blt.w	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80256f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80256f6:	9302      	str	r3, [sp, #8]
 80256f8:	fa0f f38e 	sxth.w	r3, lr
 80256fc:	9301      	str	r3, [sp, #4]
 80256fe:	fa0f f38c 	sxth.w	r3, ip
 8025702:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025706:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802570a:	9300      	str	r3, [sp, #0]
 802570c:	463a      	mov	r2, r7
 802570e:	4653      	mov	r3, sl
 8025710:	4641      	mov	r1, r8
 8025712:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025714:	f7ff fd4e 	bl	80251b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8025718:	e713      	b.n	8025542 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802571a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802571c:	1422      	asrs	r2, r4, #16
 802571e:	1433      	asrs	r3, r6, #16
 8025720:	fb05 2303 	mla	r3, r5, r3, r2
 8025724:	085a      	lsrs	r2, r3, #1
 8025726:	5cba      	ldrb	r2, [r7, r2]
 8025728:	07dd      	lsls	r5, r3, #31
 802572a:	bf54      	ite	pl
 802572c:	f002 020f 	andpl.w	r2, r2, #15
 8025730:	1112      	asrmi	r2, r2, #4
 8025732:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025736:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802573a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802573e:	b2d2      	uxtb	r2, r2
 8025740:	2900      	cmp	r1, #0
 8025742:	d077      	beq.n	8025834 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025744:	f103 0e01 	add.w	lr, r3, #1
 8025748:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802574c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025750:	f01e 0f01 	tst.w	lr, #1
 8025754:	bf0c      	ite	eq
 8025756:	f00c 0c0f 	andeq.w	ip, ip, #15
 802575a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802575e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025762:	fa5f f58c 	uxtb.w	r5, ip
 8025766:	9512      	str	r5, [sp, #72]	; 0x48
 8025768:	b300      	cbz	r0, 80257ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802576a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802576c:	442b      	add	r3, r5
 802576e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025772:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025776:	07dd      	lsls	r5, r3, #31
 8025778:	bf54      	ite	pl
 802577a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802577e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025782:	3301      	adds	r3, #1
 8025784:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025788:	fa5f f58c 	uxtb.w	r5, ip
 802578c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025790:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025794:	950c      	str	r5, [sp, #48]	; 0x30
 8025796:	07dd      	lsls	r5, r3, #31
 8025798:	bf54      	ite	pl
 802579a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802579e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80257a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80257a6:	fa5f f38c 	uxtb.w	r3, ip
 80257aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80257ac:	b289      	uxth	r1, r1
 80257ae:	b280      	uxth	r0, r0
 80257b0:	fb01 f300 	mul.w	r3, r1, r0
 80257b4:	0109      	lsls	r1, r1, #4
 80257b6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80257ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80257bc:	1ac9      	subs	r1, r1, r3
 80257be:	b289      	uxth	r1, r1
 80257c0:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80257c4:	4369      	muls	r1, r5
 80257c6:	b280      	uxth	r0, r0
 80257c8:	ebac 0c00 	sub.w	ip, ip, r0
 80257cc:	fa1f fc8c 	uxth.w	ip, ip
 80257d0:	fb02 120c 	mla	r2, r2, ip, r1
 80257d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80257d6:	fb00 2001 	mla	r0, r0, r1, r2
 80257da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80257dc:	fb03 0302 	mla	r3, r3, r2, r0
 80257e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80257e4:	b1d3      	cbz	r3, 802581c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80257e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80257e8:	4353      	muls	r3, r2
 80257ea:	1c5a      	adds	r2, r3, #1
 80257ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80257f0:	4a0f      	ldr	r2, [pc, #60]	; (8025830 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80257f2:	121b      	asrs	r3, r3, #8
 80257f4:	6812      	ldr	r2, [r2, #0]
 80257f6:	2bff      	cmp	r3, #255	; 0xff
 80257f8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80257fc:	d12e      	bne.n	802585c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80257fe:	0953      	lsrs	r3, r2, #5
 8025800:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8025804:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025808:	f02c 0c07 	bic.w	ip, ip, #7
 802580c:	ea43 0c0c 	orr.w	ip, r3, ip
 8025810:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025814:	ea4c 0202 	orr.w	r2, ip, r2
 8025818:	f8a8 2000 	strh.w	r2, [r8]
 802581c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802581e:	f108 0802 	add.w	r8, r8, #2
 8025822:	441c      	add	r4, r3
 8025824:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025826:	f10b 3bff 	add.w	fp, fp, #4294967295
 802582a:	441e      	add	r6, r3
 802582c:	e6ba      	b.n	80255a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802582e:	bf00      	nop
 8025830:	2004f704 	.word	0x2004f704
 8025834:	2800      	cmp	r0, #0
 8025836:	d0b9      	beq.n	80257ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025838:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802583a:	442b      	add	r3, r5
 802583c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025840:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025844:	07db      	lsls	r3, r3, #31
 8025846:	bf54      	ite	pl
 8025848:	f00c 0c0f 	andpl.w	ip, ip, #15
 802584c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025850:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025854:	fa5f f38c 	uxtb.w	r3, ip
 8025858:	930c      	str	r3, [sp, #48]	; 0x30
 802585a:	e7a7      	b.n	80257ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802585c:	fa1f fa83 	uxth.w	sl, r3
 8025860:	43db      	mvns	r3, r3
 8025862:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8025866:	f8b8 e000 	ldrh.w	lr, [r8]
 802586a:	fb11 f10a 	smulbb	r1, r1, sl
 802586e:	b2d2      	uxtb	r2, r2
 8025870:	ea4f 202e 	mov.w	r0, lr, asr #8
 8025874:	fb12 f20a 	smulbb	r2, r2, sl
 8025878:	b2db      	uxtb	r3, r3
 802587a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802587e:	fb00 1003 	mla	r0, r0, r3, r1
 8025882:	fa5f fc8c 	uxtb.w	ip, ip
 8025886:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802588a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802588e:	fb1c fc0a 	smulbb	ip, ip, sl
 8025892:	fa5f fe8e 	uxtb.w	lr, lr
 8025896:	fb0e 2203 	mla	r2, lr, r3, r2
 802589a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802589e:	fb01 cc03 	mla	ip, r1, r3, ip
 80258a2:	b280      	uxth	r0, r0
 80258a4:	b292      	uxth	r2, r2
 80258a6:	1c43      	adds	r3, r0, #1
 80258a8:	1c51      	adds	r1, r2, #1
 80258aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80258ae:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80258b2:	fa1f fc8c 	uxth.w	ip, ip
 80258b6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80258ba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80258be:	4308      	orrs	r0, r1
 80258c0:	f10c 0101 	add.w	r1, ip, #1
 80258c4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80258c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80258cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80258d0:	ea40 000c 	orr.w	r0, r0, ip
 80258d4:	f8a8 0000 	strh.w	r0, [r8]
 80258d8:	e7a0      	b.n	802581c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80258da:	b017      	add	sp, #92	; 0x5c
 80258dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080258e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80258e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258e4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80258e8:	2d00      	cmp	r5, #0
 80258ea:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80258ee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80258f2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80258f6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80258fa:	fb05 0e03 	mla	lr, r5, r3, r0
 80258fe:	f2c0 80b0 	blt.w	8025a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025902:	45a9      	cmp	r9, r5
 8025904:	f340 80ad 	ble.w	8025a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8025908:	2800      	cmp	r0, #0
 802590a:	f2c0 80a8 	blt.w	8025a5e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802590e:	4580      	cmp	r8, r0
 8025910:	f340 80a5 	ble.w	8025a5e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8025914:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025918:	5d16      	ldrb	r6, [r2, r4]
 802591a:	f01e 0f01 	tst.w	lr, #1
 802591e:	bf0c      	ite	eq
 8025920:	f006 060f 	andeq.w	r6, r6, #15
 8025924:	1136      	asrne	r6, r6, #4
 8025926:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802592a:	b2f6      	uxtb	r6, r6
 802592c:	1c44      	adds	r4, r0, #1
 802592e:	f100 809b 	bmi.w	8025a68 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025932:	45a0      	cmp	r8, r4
 8025934:	f340 8098 	ble.w	8025a68 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8025938:	2f00      	cmp	r7, #0
 802593a:	f000 8097 	beq.w	8025a6c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802593e:	f10e 0a01 	add.w	sl, lr, #1
 8025942:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8025946:	5d14      	ldrb	r4, [r2, r4]
 8025948:	f01a 0f01 	tst.w	sl, #1
 802594c:	bf0c      	ite	eq
 802594e:	f004 040f 	andeq.w	r4, r4, #15
 8025952:	1124      	asrne	r4, r4, #4
 8025954:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025958:	b2e4      	uxtb	r4, r4
 802595a:	3501      	adds	r5, #1
 802595c:	f100 808a 	bmi.w	8025a74 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025960:	45a9      	cmp	r9, r5
 8025962:	f340 8087 	ble.w	8025a74 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8025966:	f1bc 0f00 	cmp.w	ip, #0
 802596a:	f000 8086 	beq.w	8025a7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802596e:	2800      	cmp	r0, #0
 8025970:	db7e      	blt.n	8025a70 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025972:	4580      	cmp	r8, r0
 8025974:	dd7c      	ble.n	8025a70 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8025976:	eb03 090e 	add.w	r9, r3, lr
 802597a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802597e:	5d55      	ldrb	r5, [r2, r5]
 8025980:	f019 0f01 	tst.w	r9, #1
 8025984:	bf0c      	ite	eq
 8025986:	f005 050f 	andeq.w	r5, r5, #15
 802598a:	112d      	asrne	r5, r5, #4
 802598c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8025990:	b2ed      	uxtb	r5, r5
 8025992:	3001      	adds	r0, #1
 8025994:	d474      	bmi.n	8025a80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8025996:	4580      	cmp	r8, r0
 8025998:	dd72      	ble.n	8025a80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802599a:	2f00      	cmp	r7, #0
 802599c:	d072      	beq.n	8025a84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802599e:	3301      	adds	r3, #1
 80259a0:	449e      	add	lr, r3
 80259a2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80259a6:	5cd0      	ldrb	r0, [r2, r3]
 80259a8:	f01e 0f01 	tst.w	lr, #1
 80259ac:	bf0c      	ite	eq
 80259ae:	f000 000f 	andeq.w	r0, r0, #15
 80259b2:	1100      	asrne	r0, r0, #4
 80259b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80259b8:	b2c3      	uxtb	r3, r0
 80259ba:	b2ba      	uxth	r2, r7
 80259bc:	fa1f fc8c 	uxth.w	ip, ip
 80259c0:	fb02 f00c 	mul.w	r0, r2, ip
 80259c4:	0112      	lsls	r2, r2, #4
 80259c6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80259ca:	1a12      	subs	r2, r2, r0
 80259cc:	b292      	uxth	r2, r2
 80259ce:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80259d2:	4362      	muls	r2, r4
 80259d4:	fa1f fc8c 	uxth.w	ip, ip
 80259d8:	eba7 070c 	sub.w	r7, r7, ip
 80259dc:	b2bf      	uxth	r7, r7
 80259de:	fb06 2207 	mla	r2, r6, r7, r2
 80259e2:	fb0c 2505 	mla	r5, ip, r5, r2
 80259e6:	fb00 5303 	mla	r3, r0, r3, r5
 80259ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259ee:	b3a3      	cbz	r3, 8025a5a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80259f0:	4a25      	ldr	r2, [pc, #148]	; (8025a88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80259f2:	880e      	ldrh	r6, [r1, #0]
 80259f4:	6815      	ldr	r5, [r2, #0]
 80259f6:	b29a      	uxth	r2, r3
 80259f8:	43db      	mvns	r3, r3
 80259fa:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80259fe:	fb10 f002 	smulbb	r0, r0, r2
 8025a02:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8025a06:	b2ed      	uxtb	r5, r5
 8025a08:	1234      	asrs	r4, r6, #8
 8025a0a:	fb17 f702 	smulbb	r7, r7, r2
 8025a0e:	fb15 f202 	smulbb	r2, r5, r2
 8025a12:	b2db      	uxtb	r3, r3
 8025a14:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025a18:	fb04 0403 	mla	r4, r4, r3, r0
 8025a1c:	10f0      	asrs	r0, r6, #3
 8025a1e:	00f6      	lsls	r6, r6, #3
 8025a20:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025a24:	b2f6      	uxtb	r6, r6
 8025a26:	fb00 7003 	mla	r0, r0, r3, r7
 8025a2a:	fb06 2303 	mla	r3, r6, r3, r2
 8025a2e:	b2a4      	uxth	r4, r4
 8025a30:	b29a      	uxth	r2, r3
 8025a32:	1c63      	adds	r3, r4, #1
 8025a34:	b280      	uxth	r0, r0
 8025a36:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025a3a:	1c53      	adds	r3, r2, #1
 8025a3c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025a40:	1c42      	adds	r2, r0, #1
 8025a42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025a46:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025a4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025a4e:	0940      	lsrs	r0, r0, #5
 8025a50:	4323      	orrs	r3, r4
 8025a52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a56:	4303      	orrs	r3, r0
 8025a58:	800b      	strh	r3, [r1, #0]
 8025a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a5e:	2600      	movs	r6, #0
 8025a60:	e764      	b.n	802592c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8025a62:	2400      	movs	r4, #0
 8025a64:	4626      	mov	r6, r4
 8025a66:	e778      	b.n	802595a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025a68:	2400      	movs	r4, #0
 8025a6a:	e776      	b.n	802595a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025a6c:	463c      	mov	r4, r7
 8025a6e:	e774      	b.n	802595a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8025a70:	2500      	movs	r5, #0
 8025a72:	e78e      	b.n	8025992 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8025a74:	2300      	movs	r3, #0
 8025a76:	461d      	mov	r5, r3
 8025a78:	e79f      	b.n	80259ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025a7a:	4663      	mov	r3, ip
 8025a7c:	4665      	mov	r5, ip
 8025a7e:	e79c      	b.n	80259ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025a80:	2300      	movs	r3, #0
 8025a82:	e79a      	b.n	80259ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025a84:	463b      	mov	r3, r7
 8025a86:	e798      	b.n	80259ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8025a88:	2004f704 	.word	0x2004f704

08025a8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a90:	b093      	sub	sp, #76	; 0x4c
 8025a92:	920c      	str	r2, [sp, #48]	; 0x30
 8025a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025a96:	9011      	str	r0, [sp, #68]	; 0x44
 8025a98:	6850      	ldr	r0, [r2, #4]
 8025a9a:	9107      	str	r1, [sp, #28]
 8025a9c:	461d      	mov	r5, r3
 8025a9e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025aa2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025aa6:	fb00 1303 	mla	r3, r0, r3, r1
 8025aaa:	6812      	ldr	r2, [r2, #0]
 8025aac:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025ab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ab2:	689b      	ldr	r3, [r3, #8]
 8025ab4:	3301      	adds	r3, #1
 8025ab6:	f023 0301 	bic.w	r3, r3, #1
 8025aba:	9306      	str	r3, [sp, #24]
 8025abc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025abe:	681f      	ldr	r7, [r3, #0]
 8025ac0:	9b07      	ldr	r3, [sp, #28]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	dc03      	bgt.n	8025ace <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	f340 8265 	ble.w	8025f98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025ace:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ad0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ad4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ad8:	1e48      	subs	r0, r1, #1
 8025ada:	f102 3cff 	add.w	ip, r2, #4294967295
 8025ade:	2d00      	cmp	r5, #0
 8025ae0:	f340 80b7 	ble.w	8025c52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025ae4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025ae8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025aec:	d406      	bmi.n	8025afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025aee:	4586      	cmp	lr, r0
 8025af0:	da04      	bge.n	8025afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	db02      	blt.n	8025afc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025af6:	4563      	cmp	r3, ip
 8025af8:	f2c0 80ac 	blt.w	8025c54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025afc:	f11e 0e01 	adds.w	lr, lr, #1
 8025b00:	f100 809f 	bmi.w	8025c42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025b04:	4571      	cmp	r1, lr
 8025b06:	f2c0 809c 	blt.w	8025c42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025b0a:	3301      	adds	r3, #1
 8025b0c:	f100 8099 	bmi.w	8025c42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025b10:	429a      	cmp	r2, r3
 8025b12:	f2c0 8096 	blt.w	8025c42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025b16:	46c8      	mov	r8, r9
 8025b18:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8025b1c:	9509      	str	r5, [sp, #36]	; 0x24
 8025b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b20:	2b00      	cmp	r3, #0
 8025b22:	f340 80b5 	ble.w	8025c90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025b26:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8025b2a:	9308      	str	r3, [sp, #32]
 8025b2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b2e:	1430      	asrs	r0, r6, #16
 8025b30:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025b34:	1423      	asrs	r3, r4, #16
 8025b36:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025b3a:	f100 813e 	bmi.w	8025dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025b3e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025b42:	455b      	cmp	r3, fp
 8025b44:	f280 8139 	bge.w	8025dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025b48:	2800      	cmp	r0, #0
 8025b4a:	f2c0 8136 	blt.w	8025dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025b4e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025b52:	4558      	cmp	r0, fp
 8025b54:	f280 8131 	bge.w	8025dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025b58:	9a06      	ldr	r2, [sp, #24]
 8025b5a:	fb00 3302 	mla	r3, r0, r2, r3
 8025b5e:	0858      	lsrs	r0, r3, #1
 8025b60:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025b64:	07da      	lsls	r2, r3, #31
 8025b66:	bf54      	ite	pl
 8025b68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025b6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025b70:	9a08      	ldr	r2, [sp, #32]
 8025b72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025b76:	fa5f fc8c 	uxtb.w	ip, ip
 8025b7a:	2a00      	cmp	r2, #0
 8025b7c:	f000 80cb 	beq.w	8025d16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025b80:	1c58      	adds	r0, r3, #1
 8025b82:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025b86:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025b8a:	07c0      	lsls	r0, r0, #31
 8025b8c:	bf54      	ite	pl
 8025b8e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025b92:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025b96:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025b9a:	fa5f fe8e 	uxtb.w	lr, lr
 8025b9e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8025ba2:	b1b9      	cbz	r1, 8025bd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025ba4:	4453      	add	r3, sl
 8025ba6:	0858      	lsrs	r0, r3, #1
 8025ba8:	5c38      	ldrb	r0, [r7, r0]
 8025baa:	07da      	lsls	r2, r3, #31
 8025bac:	bf54      	ite	pl
 8025bae:	f000 000f 	andpl.w	r0, r0, #15
 8025bb2:	1100      	asrmi	r0, r0, #4
 8025bb4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025bb8:	b2c0      	uxtb	r0, r0
 8025bba:	900a      	str	r0, [sp, #40]	; 0x28
 8025bbc:	1c58      	adds	r0, r3, #1
 8025bbe:	0843      	lsrs	r3, r0, #1
 8025bc0:	5cfb      	ldrb	r3, [r7, r3]
 8025bc2:	07c2      	lsls	r2, r0, #31
 8025bc4:	bf54      	ite	pl
 8025bc6:	f003 030f 	andpl.w	r3, r3, #15
 8025bca:	111b      	asrmi	r3, r3, #4
 8025bcc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025bd0:	b2db      	uxtb	r3, r3
 8025bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8025bd4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025bd8:	b289      	uxth	r1, r1
 8025bda:	fb02 f301 	mul.w	r3, r2, r1
 8025bde:	0112      	lsls	r2, r2, #4
 8025be0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025be4:	b289      	uxth	r1, r1
 8025be6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025bea:	1a40      	subs	r0, r0, r1
 8025bec:	fa1f fe80 	uxth.w	lr, r0
 8025bf0:	1ad2      	subs	r2, r2, r3
 8025bf2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025bf4:	b292      	uxth	r2, r2
 8025bf6:	4342      	muls	r2, r0
 8025bf8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8025bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025bfe:	fb01 c102 	mla	r1, r1, r2, ip
 8025c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025c04:	fb03 1302 	mla	r3, r3, r2, r1
 8025c08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025c0c:	2bff      	cmp	r3, #255	; 0xff
 8025c0e:	f040 8093 	bne.w	8025d38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8025c12:	4bbe      	ldr	r3, [pc, #760]	; (8025f0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025c14:	681a      	ldr	r2, [r3, #0]
 8025c16:	4bbe      	ldr	r3, [pc, #760]	; (8025f10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025c18:	0951      	lsrs	r1, r2, #5
 8025c1a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025c1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025c22:	430b      	orrs	r3, r1
 8025c24:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025c28:	4313      	orrs	r3, r2
 8025c2a:	f8a8 3000 	strh.w	r3, [r8]
 8025c2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025c30:	f108 0802 	add.w	r8, r8, #2
 8025c34:	441c      	add	r4, r3
 8025c36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c38:	441e      	add	r6, r3
 8025c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c3c:	3b01      	subs	r3, #1
 8025c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8025c40:	e76d      	b.n	8025b1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025c44:	3d01      	subs	r5, #1
 8025c46:	441c      	add	r4, r3
 8025c48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c4a:	f109 0902 	add.w	r9, r9, #2
 8025c4e:	441e      	add	r6, r3
 8025c50:	e745      	b.n	8025ade <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8025c52:	d021      	beq.n	8025c98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8025c54:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025c56:	1e6b      	subs	r3, r5, #1
 8025c58:	fb00 4003 	mla	r0, r0, r3, r4
 8025c5c:	1400      	asrs	r0, r0, #16
 8025c5e:	f53f af5a 	bmi.w	8025b16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025c62:	3901      	subs	r1, #1
 8025c64:	4288      	cmp	r0, r1
 8025c66:	f6bf af56 	bge.w	8025b16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025c6a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025c6c:	fb01 6303 	mla	r3, r1, r3, r6
 8025c70:	141b      	asrs	r3, r3, #16
 8025c72:	f53f af50 	bmi.w	8025b16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025c76:	3a01      	subs	r2, #1
 8025c78:	4293      	cmp	r3, r2
 8025c7a:	f6bf af4c 	bge.w	8025b16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025c7e:	46a8      	mov	r8, r5
 8025c80:	46ce      	mov	lr, r9
 8025c82:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025c86:	9308      	str	r3, [sp, #32]
 8025c88:	f1b8 0f00 	cmp.w	r8, #0
 8025c8c:	f300 80b5 	bgt.w	8025dfa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025c90:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025c94:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025c98:	9b07      	ldr	r3, [sp, #28]
 8025c9a:	2b00      	cmp	r3, #0
 8025c9c:	f340 817c 	ble.w	8025f98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ca4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ca8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025cac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025cb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025cb4:	eef0 6a62 	vmov.f32	s13, s5
 8025cb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025cbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025cc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025cc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025ccc:	ee16 4a90 	vmov	r4, s13
 8025cd0:	eef0 6a43 	vmov.f32	s13, s6
 8025cd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025cd8:	ee12 2a90 	vmov	r2, s5
 8025cdc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025ce0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025ce2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cea:	ee13 2a10 	vmov	r2, s6
 8025cee:	931f      	str	r3, [sp, #124]	; 0x7c
 8025cf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025cf2:	ee16 6a90 	vmov	r6, s13
 8025cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cfa:	9320      	str	r3, [sp, #128]	; 0x80
 8025cfc:	9b07      	ldr	r3, [sp, #28]
 8025cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025d00:	3b01      	subs	r3, #1
 8025d02:	9307      	str	r3, [sp, #28]
 8025d04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025d06:	bf0c      	ite	eq
 8025d08:	4615      	moveq	r5, r2
 8025d0a:	461d      	movne	r5, r3
 8025d0c:	eeb0 3a67 	vmov.f32	s6, s15
 8025d10:	eef0 2a47 	vmov.f32	s5, s14
 8025d14:	e6d4      	b.n	8025ac0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025d16:	2900      	cmp	r1, #0
 8025d18:	f43f af5c 	beq.w	8025bd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025d1c:	eb0a 0003 	add.w	r0, sl, r3
 8025d20:	0843      	lsrs	r3, r0, #1
 8025d22:	5cfb      	ldrb	r3, [r7, r3]
 8025d24:	07c0      	lsls	r0, r0, #31
 8025d26:	bf54      	ite	pl
 8025d28:	f003 030f 	andpl.w	r3, r3, #15
 8025d2c:	111b      	asrmi	r3, r3, #4
 8025d2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025d32:	b2db      	uxtb	r3, r3
 8025d34:	930a      	str	r3, [sp, #40]	; 0x28
 8025d36:	e74d      	b.n	8025bd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	f43f af78 	beq.w	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025d3e:	fa1f fe83 	uxth.w	lr, r3
 8025d42:	43db      	mvns	r3, r3
 8025d44:	4a71      	ldr	r2, [pc, #452]	; (8025f0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025d46:	f8b8 c000 	ldrh.w	ip, [r8]
 8025d4a:	6810      	ldr	r0, [r2, #0]
 8025d4c:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025d50:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025d54:	fb12 f20e 	smulbb	r2, r2, lr
 8025d58:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025d5c:	b2c0      	uxtb	r0, r0
 8025d5e:	fb1b fb0e 	smulbb	fp, fp, lr
 8025d62:	fb10 fe0e 	smulbb	lr, r0, lr
 8025d66:	b2db      	uxtb	r3, r3
 8025d68:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025d6c:	fb01 2103 	mla	r1, r1, r3, r2
 8025d70:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025d74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025d78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025d7c:	fa5f fc8c 	uxtb.w	ip, ip
 8025d80:	fb02 b203 	mla	r2, r2, r3, fp
 8025d84:	fb0c e303 	mla	r3, ip, r3, lr
 8025d88:	b289      	uxth	r1, r1
 8025d8a:	1c48      	adds	r0, r1, #1
 8025d8c:	b292      	uxth	r2, r2
 8025d8e:	b29b      	uxth	r3, r3
 8025d90:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025d94:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8025d98:	f102 0b01 	add.w	fp, r2, #1
 8025d9c:	1c59      	adds	r1, r3, #1
 8025d9e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025da2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025da6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025daa:	0952      	lsrs	r2, r2, #5
 8025dac:	4301      	orrs	r1, r0
 8025dae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025db2:	4311      	orrs	r1, r2
 8025db4:	f8a8 1000 	strh.w	r1, [r8]
 8025db8:	e739      	b.n	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dba:	f113 0b01 	adds.w	fp, r3, #1
 8025dbe:	f53f af36 	bmi.w	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dc2:	45dc      	cmp	ip, fp
 8025dc4:	f6ff af33 	blt.w	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dc8:	f110 0b01 	adds.w	fp, r0, #1
 8025dcc:	f53f af2f 	bmi.w	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dd0:	45de      	cmp	lr, fp
 8025dd2:	f6ff af2c 	blt.w	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dd6:	9a08      	ldr	r2, [sp, #32]
 8025dd8:	9302      	str	r3, [sp, #8]
 8025dda:	fa0f f38e 	sxth.w	r3, lr
 8025dde:	9301      	str	r3, [sp, #4]
 8025de0:	fa0f f38c 	sxth.w	r3, ip
 8025de4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025de8:	9105      	str	r1, [sp, #20]
 8025dea:	9300      	str	r3, [sp, #0]
 8025dec:	463a      	mov	r2, r7
 8025dee:	4653      	mov	r3, sl
 8025df0:	4641      	mov	r1, r8
 8025df2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025df4:	f7ff fd74 	bl	80258e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8025df8:	e719      	b.n	8025c2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8025dfa:	9906      	ldr	r1, [sp, #24]
 8025dfc:	1422      	asrs	r2, r4, #16
 8025dfe:	1433      	asrs	r3, r6, #16
 8025e00:	fb01 2303 	mla	r3, r1, r3, r2
 8025e04:	085a      	lsrs	r2, r3, #1
 8025e06:	5cba      	ldrb	r2, [r7, r2]
 8025e08:	07d9      	lsls	r1, r3, #31
 8025e0a:	bf54      	ite	pl
 8025e0c:	f002 020f 	andpl.w	r2, r2, #15
 8025e10:	1112      	asrmi	r2, r2, #4
 8025e12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025e16:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025e1a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025e1e:	b2d2      	uxtb	r2, r2
 8025e20:	2800      	cmp	r0, #0
 8025e22:	d062      	beq.n	8025eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8025e24:	f103 0a01 	add.w	sl, r3, #1
 8025e28:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8025e2c:	5c79      	ldrb	r1, [r7, r1]
 8025e2e:	f01a 0f01 	tst.w	sl, #1
 8025e32:	bf0c      	ite	eq
 8025e34:	f001 010f 	andeq.w	r1, r1, #15
 8025e38:	1109      	asrne	r1, r1, #4
 8025e3a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025e3e:	b2c9      	uxtb	r1, r1
 8025e40:	910f      	str	r1, [sp, #60]	; 0x3c
 8025e42:	f1bc 0f00 	cmp.w	ip, #0
 8025e46:	d019      	beq.n	8025e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025e48:	9908      	ldr	r1, [sp, #32]
 8025e4a:	440b      	add	r3, r1
 8025e4c:	0859      	lsrs	r1, r3, #1
 8025e4e:	5c79      	ldrb	r1, [r7, r1]
 8025e50:	f013 0f01 	tst.w	r3, #1
 8025e54:	bf0c      	ite	eq
 8025e56:	f001 010f 	andeq.w	r1, r1, #15
 8025e5a:	1109      	asrne	r1, r1, #4
 8025e5c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025e60:	b2c9      	uxtb	r1, r1
 8025e62:	3301      	adds	r3, #1
 8025e64:	910b      	str	r1, [sp, #44]	; 0x2c
 8025e66:	0859      	lsrs	r1, r3, #1
 8025e68:	5c79      	ldrb	r1, [r7, r1]
 8025e6a:	07db      	lsls	r3, r3, #31
 8025e6c:	bf54      	ite	pl
 8025e6e:	f001 010f 	andpl.w	r1, r1, #15
 8025e72:	1109      	asrmi	r1, r1, #4
 8025e74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025e78:	b2c9      	uxtb	r1, r1
 8025e7a:	9110      	str	r1, [sp, #64]	; 0x40
 8025e7c:	b280      	uxth	r0, r0
 8025e7e:	fa1f fc8c 	uxth.w	ip, ip
 8025e82:	fb00 f30c 	mul.w	r3, r0, ip
 8025e86:	0100      	lsls	r0, r0, #4
 8025e88:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8025e8c:	fa1f fc8c 	uxth.w	ip, ip
 8025e90:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025e94:	eba1 010c 	sub.w	r1, r1, ip
 8025e98:	fa1f fa81 	uxth.w	sl, r1
 8025e9c:	1ac0      	subs	r0, r0, r3
 8025e9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025ea0:	b280      	uxth	r0, r0
 8025ea2:	4348      	muls	r0, r1
 8025ea4:	fb02 020a 	mla	r2, r2, sl, r0
 8025ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025eaa:	fb0c 2c01 	mla	ip, ip, r1, r2
 8025eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025eb0:	fb03 c302 	mla	r3, r3, r2, ip
 8025eb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025eb8:	2bff      	cmp	r3, #255	; 0xff
 8025eba:	d12b      	bne.n	8025f14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025ebc:	4b13      	ldr	r3, [pc, #76]	; (8025f0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8025ebe:	681a      	ldr	r2, [r3, #0]
 8025ec0:	4b13      	ldr	r3, [pc, #76]	; (8025f10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8025ec2:	0951      	lsrs	r1, r2, #5
 8025ec4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8025ec8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ecc:	430b      	orrs	r3, r1
 8025ece:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025ed2:	4313      	orrs	r3, r2
 8025ed4:	f8ae 3000 	strh.w	r3, [lr]
 8025ed8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025eda:	f10e 0e02 	add.w	lr, lr, #2
 8025ede:	441c      	add	r4, r3
 8025ee0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ee2:	f108 38ff 	add.w	r8, r8, #4294967295
 8025ee6:	441e      	add	r6, r3
 8025ee8:	e6ce      	b.n	8025c88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025eea:	f1bc 0f00 	cmp.w	ip, #0
 8025eee:	d0c5      	beq.n	8025e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025ef0:	9908      	ldr	r1, [sp, #32]
 8025ef2:	440b      	add	r3, r1
 8025ef4:	0859      	lsrs	r1, r3, #1
 8025ef6:	5c79      	ldrb	r1, [r7, r1]
 8025ef8:	07db      	lsls	r3, r3, #31
 8025efa:	bf54      	ite	pl
 8025efc:	f001 010f 	andpl.w	r1, r1, #15
 8025f00:	1109      	asrmi	r1, r1, #4
 8025f02:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025f06:	b2c9      	uxtb	r1, r1
 8025f08:	910b      	str	r1, [sp, #44]	; 0x2c
 8025f0a:	e7b7      	b.n	8025e7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025f0c:	2004f704 	.word	0x2004f704
 8025f10:	fffff800 	.word	0xfffff800
 8025f14:	2b00      	cmp	r3, #0
 8025f16:	d0df      	beq.n	8025ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025f18:	fa1f fa83 	uxth.w	sl, r3
 8025f1c:	43db      	mvns	r3, r3
 8025f1e:	4a20      	ldr	r2, [pc, #128]	; (8025fa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 8025f20:	f8be c000 	ldrh.w	ip, [lr]
 8025f24:	6810      	ldr	r0, [r2, #0]
 8025f26:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025f2a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025f2e:	fb12 f20a 	smulbb	r2, r2, sl
 8025f32:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8025f36:	b2c0      	uxtb	r0, r0
 8025f38:	fb10 f00a 	smulbb	r0, r0, sl
 8025f3c:	b2db      	uxtb	r3, r3
 8025f3e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025f42:	fb01 2103 	mla	r1, r1, r3, r2
 8025f46:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025f4a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025f4e:	fb1b fb0a 	smulbb	fp, fp, sl
 8025f52:	fa5f fc8c 	uxtb.w	ip, ip
 8025f56:	fb0c 0003 	mla	r0, ip, r3, r0
 8025f5a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025f5e:	fb02 b203 	mla	r2, r2, r3, fp
 8025f62:	b289      	uxth	r1, r1
 8025f64:	b280      	uxth	r0, r0
 8025f66:	1c4b      	adds	r3, r1, #1
 8025f68:	f100 0b01 	add.w	fp, r0, #1
 8025f6c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025f70:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8025f74:	b292      	uxth	r2, r2
 8025f76:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8025f7a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025f7e:	ea4b 0101 	orr.w	r1, fp, r1
 8025f82:	f102 0b01 	add.w	fp, r2, #1
 8025f86:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8025f8a:	0952      	lsrs	r2, r2, #5
 8025f8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025f90:	4311      	orrs	r1, r2
 8025f92:	f8ae 1000 	strh.w	r1, [lr]
 8025f96:	e79f      	b.n	8025ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025f98:	b013      	add	sp, #76	; 0x4c
 8025f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f9e:	bf00      	nop
 8025fa0:	2004f704 	.word	0x2004f704

08025fa4 <CRC_Lock>:
 8025fa4:	b530      	push	{r4, r5, lr}
 8025fa6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8025faa:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025fae:	4a1e      	ldr	r2, [pc, #120]	; (8026028 <CRC_Lock+0x84>)
 8025fb0:	6813      	ldr	r3, [r2, #0]
 8025fb2:	f023 0301 	bic.w	r3, r3, #1
 8025fb6:	6013      	str	r3, [r2, #0]
 8025fb8:	4b1c      	ldr	r3, [pc, #112]	; (802602c <CRC_Lock+0x88>)
 8025fba:	681a      	ldr	r2, [r3, #0]
 8025fbc:	4022      	ands	r2, r4
 8025fbe:	42aa      	cmp	r2, r5
 8025fc0:	d005      	beq.n	8025fce <CRC_Lock+0x2a>
 8025fc2:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025fc6:	681b      	ldr	r3, [r3, #0]
 8025fc8:	4023      	ands	r3, r4
 8025fca:	4293      	cmp	r3, r2
 8025fcc:	d124      	bne.n	8026018 <CRC_Lock+0x74>
 8025fce:	4b18      	ldr	r3, [pc, #96]	; (8026030 <CRC_Lock+0x8c>)
 8025fd0:	681b      	ldr	r3, [r3, #0]
 8025fd2:	bb0b      	cbnz	r3, 8026018 <CRC_Lock+0x74>
 8025fd4:	4b17      	ldr	r3, [pc, #92]	; (8026034 <CRC_Lock+0x90>)
 8025fd6:	681a      	ldr	r2, [r3, #0]
 8025fd8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025fdc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8025fe0:	d00d      	beq.n	8025ffe <CRC_Lock+0x5a>
 8025fe2:	f240 4483 	movw	r4, #1155	; 0x483
 8025fe6:	681a      	ldr	r2, [r3, #0]
 8025fe8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8025fec:	42a2      	cmp	r2, r4
 8025fee:	d006      	beq.n	8025ffe <CRC_Lock+0x5a>
 8025ff0:	f240 4285 	movw	r2, #1157	; 0x485
 8025ff4:	681b      	ldr	r3, [r3, #0]
 8025ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025ffa:	4293      	cmp	r3, r2
 8025ffc:	d10c      	bne.n	8026018 <CRC_Lock+0x74>
 8025ffe:	2201      	movs	r2, #1
 8026000:	4b0d      	ldr	r3, [pc, #52]	; (8026038 <CRC_Lock+0x94>)
 8026002:	601a      	str	r2, [r3, #0]
 8026004:	681a      	ldr	r2, [r3, #0]
 8026006:	2a00      	cmp	r2, #0
 8026008:	d1fc      	bne.n	8026004 <CRC_Lock+0x60>
 802600a:	4b0c      	ldr	r3, [pc, #48]	; (802603c <CRC_Lock+0x98>)
 802600c:	6018      	str	r0, [r3, #0]
 802600e:	6818      	ldr	r0, [r3, #0]
 8026010:	1a43      	subs	r3, r0, r1
 8026012:	4258      	negs	r0, r3
 8026014:	4158      	adcs	r0, r3
 8026016:	bd30      	pop	{r4, r5, pc}
 8026018:	2201      	movs	r2, #1
 802601a:	4b09      	ldr	r3, [pc, #36]	; (8026040 <CRC_Lock+0x9c>)
 802601c:	601a      	str	r2, [r3, #0]
 802601e:	681a      	ldr	r2, [r3, #0]
 8026020:	2a00      	cmp	r2, #0
 8026022:	d1fc      	bne.n	802601e <CRC_Lock+0x7a>
 8026024:	4b07      	ldr	r3, [pc, #28]	; (8026044 <CRC_Lock+0xa0>)
 8026026:	e7f1      	b.n	802600c <CRC_Lock+0x68>
 8026028:	e0002000 	.word	0xe0002000
 802602c:	e000ed00 	.word	0xe000ed00
 8026030:	e0042000 	.word	0xe0042000
 8026034:	5c001000 	.word	0x5c001000
 8026038:	58024c08 	.word	0x58024c08
 802603c:	58024c00 	.word	0x58024c00
 8026040:	40023008 	.word	0x40023008
 8026044:	40023000 	.word	0x40023000

08026048 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026048:	6101      	str	r1, [r0, #16]
 802604a:	4770      	bx	lr

0802604c <_ZN8touchgfx8Gestures4tickEv>:
 802604c:	7b83      	ldrb	r3, [r0, #14]
 802604e:	b14b      	cbz	r3, 8026064 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026050:	8903      	ldrh	r3, [r0, #8]
 8026052:	3301      	adds	r3, #1
 8026054:	b29b      	uxth	r3, r3
 8026056:	2b07      	cmp	r3, #7
 8026058:	8103      	strh	r3, [r0, #8]
 802605a:	bf81      	itttt	hi
 802605c:	2300      	movhi	r3, #0
 802605e:	8143      	strhhi	r3, [r0, #10]
 8026060:	8183      	strhhi	r3, [r0, #12]
 8026062:	7383      	strbhi	r3, [r0, #14]
 8026064:	4770      	bx	lr
	...

08026068 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026068:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802606c:	4698      	mov	r8, r3
 802606e:	4604      	mov	r4, r0
 8026070:	8883      	ldrh	r3, [r0, #4]
 8026072:	460e      	mov	r6, r1
 8026074:	88c1      	ldrh	r1, [r0, #6]
 8026076:	2000      	movs	r0, #0
 8026078:	f8ad 3006 	strh.w	r3, [sp, #6]
 802607c:	eba8 0303 	sub.w	r3, r8, r3
 8026080:	b21b      	sxth	r3, r3
 8026082:	4617      	mov	r7, r2
 8026084:	4a17      	ldr	r2, [pc, #92]	; (80260e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8026086:	2b00      	cmp	r3, #0
 8026088:	bfb8      	it	lt
 802608a:	425b      	neglt	r3, r3
 802608c:	9200      	str	r2, [sp, #0]
 802608e:	8aa2      	ldrh	r2, [r4, #20]
 8026090:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026094:	b21b      	sxth	r3, r3
 8026096:	4293      	cmp	r3, r2
 8026098:	f88d 0004 	strb.w	r0, [sp, #4]
 802609c:	f8ad 1008 	strh.w	r1, [sp, #8]
 80260a0:	f8ad 800a 	strh.w	r8, [sp, #10]
 80260a4:	f8ad 500c 	strh.w	r5, [sp, #12]
 80260a8:	dc07      	bgt.n	80260ba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80260aa:	1a69      	subs	r1, r5, r1
 80260ac:	b209      	sxth	r1, r1
 80260ae:	2900      	cmp	r1, #0
 80260b0:	bfb8      	it	lt
 80260b2:	4249      	neglt	r1, r1
 80260b4:	b209      	sxth	r1, r1
 80260b6:	428a      	cmp	r2, r1
 80260b8:	da10      	bge.n	80260dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80260ba:	6920      	ldr	r0, [r4, #16]
 80260bc:	4669      	mov	r1, sp
 80260be:	6803      	ldr	r3, [r0, #0]
 80260c0:	eba8 0606 	sub.w	r6, r8, r6
 80260c4:	685b      	ldr	r3, [r3, #4]
 80260c6:	4798      	blx	r3
 80260c8:	2300      	movs	r3, #0
 80260ca:	2001      	movs	r0, #1
 80260cc:	1bef      	subs	r7, r5, r7
 80260ce:	8123      	strh	r3, [r4, #8]
 80260d0:	8166      	strh	r6, [r4, #10]
 80260d2:	81a7      	strh	r7, [r4, #12]
 80260d4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80260d8:	80e5      	strh	r5, [r4, #6]
 80260da:	73a0      	strb	r0, [r4, #14]
 80260dc:	b004      	add	sp, #16
 80260de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260e2:	bf00      	nop
 80260e4:	08029b3c 	.word	0x08029b3c

080260e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80260e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260ea:	461e      	mov	r6, r3
 80260ec:	1e4b      	subs	r3, r1, #1
 80260ee:	2b01      	cmp	r3, #1
 80260f0:	b085      	sub	sp, #20
 80260f2:	4604      	mov	r4, r0
 80260f4:	460d      	mov	r5, r1
 80260f6:	4617      	mov	r7, r2
 80260f8:	d84b      	bhi.n	8026192 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80260fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80260fe:	1cd3      	adds	r3, r2, #3
 8026100:	b29b      	uxth	r3, r3
 8026102:	2b06      	cmp	r3, #6
 8026104:	d916      	bls.n	8026134 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026106:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80261a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802610a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802610e:	f8cd c004 	str.w	ip, [sp, #4]
 8026112:	f04f 0c00 	mov.w	ip, #0
 8026116:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802611a:	6900      	ldr	r0, [r0, #16]
 802611c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026120:	f88d c008 	strb.w	ip, [sp, #8]
 8026124:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026128:	f8ad 300e 	strh.w	r3, [sp, #14]
 802612c:	6803      	ldr	r3, [r0, #0]
 802612e:	a901      	add	r1, sp, #4
 8026130:	689b      	ldr	r3, [r3, #8]
 8026132:	4798      	blx	r3
 8026134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026138:	1cd3      	adds	r3, r2, #3
 802613a:	b29b      	uxth	r3, r3
 802613c:	2b06      	cmp	r3, #6
 802613e:	d916      	bls.n	802616e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026140:	f8df c064 	ldr.w	ip, [pc, #100]	; 80261a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026144:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026148:	f8cd c004 	str.w	ip, [sp, #4]
 802614c:	f04f 0c01 	mov.w	ip, #1
 8026150:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026154:	6920      	ldr	r0, [r4, #16]
 8026156:	f8ad 100c 	strh.w	r1, [sp, #12]
 802615a:	f88d c008 	strb.w	ip, [sp, #8]
 802615e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026162:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026166:	6803      	ldr	r3, [r0, #0]
 8026168:	a901      	add	r1, sp, #4
 802616a:	689b      	ldr	r3, [r3, #8]
 802616c:	4798      	blx	r3
 802616e:	4b0d      	ldr	r3, [pc, #52]	; (80261a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026170:	6920      	ldr	r0, [r4, #16]
 8026172:	9301      	str	r3, [sp, #4]
 8026174:	2300      	movs	r3, #0
 8026176:	f88d 5008 	strb.w	r5, [sp, #8]
 802617a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802617e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026182:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026186:	6803      	ldr	r3, [r0, #0]
 8026188:	a901      	add	r1, sp, #4
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	4798      	blx	r3
 802618e:	b005      	add	sp, #20
 8026190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026192:	2900      	cmp	r1, #0
 8026194:	d1eb      	bne.n	802616e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026196:	80a2      	strh	r2, [r4, #4]
 8026198:	80c6      	strh	r6, [r0, #6]
 802619a:	60a1      	str	r1, [r4, #8]
 802619c:	81a1      	strh	r1, [r4, #12]
 802619e:	73a1      	strb	r1, [r4, #14]
 80261a0:	e7e5      	b.n	802616e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80261a2:	bf00      	nop
 80261a4:	08029b28 	.word	0x08029b28
 80261a8:	08029b50 	.word	0x08029b50

080261ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80261ac:	10c9      	asrs	r1, r1, #3
 80261ae:	2900      	cmp	r1, #0
 80261b0:	bfb8      	it	lt
 80261b2:	4249      	neglt	r1, r1
 80261b4:	2801      	cmp	r0, #1
 80261b6:	d108      	bne.n	80261ca <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80261b8:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80261bc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80261c0:	4601      	mov	r1, r0
 80261c2:	dd02      	ble.n	80261ca <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80261c4:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80261c8:	4770      	bx	lr
 80261ca:	29ff      	cmp	r1, #255	; 0xff
 80261cc:	bfa8      	it	ge
 80261ce:	21ff      	movge	r1, #255	; 0xff
 80261d0:	4608      	mov	r0, r1
 80261d2:	4770      	bx	lr

080261d4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80261d4:	b410      	push	{r4}
 80261d6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80261da:	429c      	cmp	r4, r3
 80261dc:	d803      	bhi.n	80261e6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80261de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80261e2:	f7f0 bba3 	b.w	801692c <_ZN8touchgfx7Outline6lineToEii>
 80261e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80261ea:	4770      	bx	lr

080261ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80261ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261f0:	b08b      	sub	sp, #44	; 0x2c
 80261f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80261f6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80261fa:	4606      	mov	r6, r0
 80261fc:	9308      	str	r3, [sp, #32]
 80261fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8026202:	468a      	mov	sl, r1
 8026204:	9309      	str	r3, [sp, #36]	; 0x24
 8026206:	f7f0 fcfd 	bl	8016c04 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802620a:	68b5      	ldr	r5, [r6, #8]
 802620c:	4604      	mov	r4, r0
 802620e:	2d00      	cmp	r5, #0
 8026210:	d044      	beq.n	802629c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8026212:	6873      	ldr	r3, [r6, #4]
 8026214:	42ab      	cmp	r3, r5
 8026216:	d33d      	bcc.n	8026294 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8026218:	f04f 0800 	mov.w	r8, #0
 802621c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8026220:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8026224:	eb02 0b03 	add.w	fp, r2, r3
 8026228:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802622c:	fb02 1203 	mla	r2, r2, r3, r1
 8026230:	9205      	str	r2, [sp, #20]
 8026232:	1e6a      	subs	r2, r5, #1
 8026234:	9204      	str	r2, [sp, #16]
 8026236:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802623a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802623e:	454b      	cmp	r3, r9
 8026240:	463a      	mov	r2, r7
 8026242:	d008      	beq.n	8026256 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8026244:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8026248:	eb03 0b09 	add.w	fp, r3, r9
 802624c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8026250:	fb03 1309 	mla	r3, r3, r9, r1
 8026254:	9305      	str	r3, [sp, #20]
 8026256:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802625a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802625e:	4498      	add	r8, r3
 8026260:	9b04      	ldr	r3, [sp, #16]
 8026262:	3b01      	subs	r3, #1
 8026264:	9304      	str	r3, [sp, #16]
 8026266:	9b04      	ldr	r3, [sp, #16]
 8026268:	3301      	adds	r3, #1
 802626a:	d015      	beq.n	8026298 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802626c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8026270:	42bb      	cmp	r3, r7
 8026272:	d117      	bne.n	80262a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8026274:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8026278:	9b04      	ldr	r3, [sp, #16]
 802627a:	4548      	cmp	r0, r9
 802627c:	f103 33ff 	add.w	r3, r3, #4294967295
 8026280:	d17d      	bne.n	802637e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8026282:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8026286:	4401      	add	r1, r0
 8026288:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802628c:	4480      	add	r8, r0
 802628e:	e7e9      	b.n	8026264 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8026290:	461f      	mov	r7, r3
 8026292:	e042      	b.n	802631a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8026294:	2000      	movs	r0, #0
 8026296:	e002      	b.n	802629e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8026298:	2900      	cmp	r1, #0
 802629a:	d16d      	bne.n	8026378 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802629c:	2001      	movs	r0, #1
 802629e:	b00b      	add	sp, #44	; 0x2c
 80262a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262a4:	b379      	cbz	r1, 8026306 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80262a6:	2f00      	cmp	r7, #0
 80262a8:	db29      	blt.n	80262fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80262aa:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80262ae:	42bb      	cmp	r3, r7
 80262b0:	dd25      	ble.n	80262fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80262b2:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80262b6:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80262ba:	f7ff ff77 	bl	80261ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80262be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262c0:	fb10 f003 	smulbb	r0, r0, r3
 80262c4:	b280      	uxth	r0, r0
 80262c6:	1c41      	adds	r1, r0, #1
 80262c8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80262cc:	1209      	asrs	r1, r1, #8
 80262ce:	f011 0fff 	tst.w	r1, #255	; 0xff
 80262d2:	d014      	beq.n	80262fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80262d4:	b2c9      	uxtb	r1, r1
 80262d6:	9102      	str	r1, [sp, #8]
 80262d8:	2101      	movs	r1, #1
 80262da:	9808      	ldr	r0, [sp, #32]
 80262dc:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80262de:	b2ba      	uxth	r2, r7
 80262e0:	4413      	add	r3, r2
 80262e2:	9101      	str	r1, [sp, #4]
 80262e4:	4402      	add	r2, r0
 80262e6:	fa0f f18b 	sxth.w	r1, fp
 80262ea:	f8da 0000 	ldr.w	r0, [sl]
 80262ee:	9100      	str	r1, [sp, #0]
 80262f0:	6941      	ldr	r1, [r0, #20]
 80262f2:	b21b      	sxth	r3, r3
 80262f4:	460d      	mov	r5, r1
 80262f6:	b212      	sxth	r2, r2
 80262f8:	9905      	ldr	r1, [sp, #20]
 80262fa:	4650      	mov	r0, sl
 80262fc:	47a8      	blx	r5
 80262fe:	9b04      	ldr	r3, [sp, #16]
 8026300:	1c7a      	adds	r2, r7, #1
 8026302:	3301      	adds	r3, #1
 8026304:	d0ca      	beq.n	802629c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8026306:	f9b4 7000 	ldrsh.w	r7, [r4]
 802630a:	1abb      	subs	r3, r7, r2
 802630c:	2b00      	cmp	r3, #0
 802630e:	dd31      	ble.n	8026374 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8026310:	2a00      	cmp	r2, #0
 8026312:	dabd      	bge.n	8026290 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8026314:	2f00      	cmp	r7, #0
 8026316:	dd2d      	ble.n	8026374 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8026318:	2200      	movs	r2, #0
 802631a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802631e:	19d1      	adds	r1, r2, r7
 8026320:	4299      	cmp	r1, r3
 8026322:	db02      	blt.n	802632a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8026324:	1a9f      	subs	r7, r3, r2
 8026326:	2f00      	cmp	r7, #0
 8026328:	dd24      	ble.n	8026374 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802632a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802632e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8026332:	f7ff ff3b 	bl	80261ac <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8026336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026338:	fb10 f003 	smulbb	r0, r0, r3
 802633c:	b280      	uxth	r0, r0
 802633e:	1c41      	adds	r1, r0, #1
 8026340:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026344:	1209      	asrs	r1, r1, #8
 8026346:	f011 0fff 	tst.w	r1, #255	; 0xff
 802634a:	d013      	beq.n	8026374 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802634c:	9808      	ldr	r0, [sp, #32]
 802634e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8026350:	b292      	uxth	r2, r2
 8026352:	b2c9      	uxtb	r1, r1
 8026354:	4413      	add	r3, r2
 8026356:	9102      	str	r1, [sp, #8]
 8026358:	4402      	add	r2, r0
 802635a:	b23f      	sxth	r7, r7
 802635c:	f8da 0000 	ldr.w	r0, [sl]
 8026360:	fa0f f18b 	sxth.w	r1, fp
 8026364:	9100      	str	r1, [sp, #0]
 8026366:	9701      	str	r7, [sp, #4]
 8026368:	6947      	ldr	r7, [r0, #20]
 802636a:	b21b      	sxth	r3, r3
 802636c:	b212      	sxth	r2, r2
 802636e:	9905      	ldr	r1, [sp, #20]
 8026370:	4650      	mov	r0, sl
 8026372:	47b8      	blx	r7
 8026374:	464b      	mov	r3, r9
 8026376:	e75e      	b.n	8026236 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8026378:	2f00      	cmp	r7, #0
 802637a:	da96      	bge.n	80262aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802637c:	e78e      	b.n	802629c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802637e:	2900      	cmp	r1, #0
 8026380:	d0f8      	beq.n	8026374 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8026382:	e790      	b.n	80262a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08026384 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026384:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8026388:	2500      	movs	r5, #0
 802638a:	4b4b      	ldr	r3, [pc, #300]	; (80264b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 802638c:	4604      	mov	r4, r0
 802638e:	f100 0620 	add.w	r6, r0, #32
 8026392:	e9c0 3100 	strd	r3, r1, [r0]
 8026396:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802639a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802639e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80263a2:	f100 0718 	add.w	r7, r0, #24
 80263a6:	4630      	mov	r0, r6
 80263a8:	4690      	mov	r8, r2
 80263aa:	f7ef fdf7 	bl	8015f9c <_ZN8touchgfx7OutlineC1Ev>
 80263ae:	2301      	movs	r3, #1
 80263b0:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80263b4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80263b8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80263bc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80263c0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80263c4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80263c8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80263cc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80263d0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80263d4:	f9b8 2000 	ldrsh.w	r2, [r8]
 80263d8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80263dc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80263e0:	4410      	add	r0, r2
 80263e2:	b280      	uxth	r0, r0
 80263e4:	fa0f fa80 	sxth.w	sl, r0
 80263e8:	45aa      	cmp	sl, r5
 80263ea:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80263ee:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80263f2:	9500      	str	r5, [sp, #0]
 80263f4:	dd5c      	ble.n	80264b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80263f6:	4591      	cmp	r9, r2
 80263f8:	dd5a      	ble.n	80264b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80263fa:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80263fe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026402:	440b      	add	r3, r1
 8026404:	b29b      	uxth	r3, r3
 8026406:	b21d      	sxth	r5, r3
 8026408:	2d00      	cmp	r5, #0
 802640a:	dd51      	ble.n	80264b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802640c:	458e      	cmp	lr, r1
 802640e:	dd4f      	ble.n	80264b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8026410:	45d1      	cmp	r9, sl
 8026412:	bfb8      	it	lt
 8026414:	fa1f f089 	uxthlt.w	r0, r9
 8026418:	45ae      	cmp	lr, r5
 802641a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802641e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026422:	bfb8      	it	lt
 8026424:	fa1f f38e 	uxthlt.w	r3, lr
 8026428:	1a80      	subs	r0, r0, r2
 802642a:	1a5b      	subs	r3, r3, r1
 802642c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8026430:	f8ad 3006 	strh.w	r3, [sp, #6]
 8026434:	f8ad 2000 	strh.w	r2, [sp]
 8026438:	f8ad 1002 	strh.w	r1, [sp, #2]
 802643c:	466d      	mov	r5, sp
 802643e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026442:	e887 0003 	stmia.w	r7, {r0, r1}
 8026446:	f8dc 3000 	ldr.w	r3, [ip]
 802644a:	4660      	mov	r0, ip
 802644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802644e:	4639      	mov	r1, r7
 8026450:	4798      	blx	r3
 8026452:	6861      	ldr	r1, [r4, #4]
 8026454:	4628      	mov	r0, r5
 8026456:	3104      	adds	r1, #4
 8026458:	f7f1 fae2 	bl	8017a20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802645c:	4638      	mov	r0, r7
 802645e:	f7f1 fab7 	bl	80179d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026462:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8026466:	f8bd 2000 	ldrh.w	r2, [sp]
 802646a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802646e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8026472:	4630      	mov	r0, r6
 8026474:	f7ef fd76 	bl	8015f64 <_ZN8touchgfx7Outline5resetEv>
 8026478:	4620      	mov	r0, r4
 802647a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802647e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8026482:	015b      	lsls	r3, r3, #5
 8026484:	60a3      	str	r3, [r4, #8]
 8026486:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802648a:	015b      	lsls	r3, r3, #5
 802648c:	60e3      	str	r3, [r4, #12]
 802648e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8026492:	015b      	lsls	r3, r3, #5
 8026494:	6123      	str	r3, [r4, #16]
 8026496:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802649a:	015b      	lsls	r3, r3, #5
 802649c:	6163      	str	r3, [r4, #20]
 802649e:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80264a2:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80264a6:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80264aa:	b002      	add	sp, #8
 80264ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264b0:	2300      	movs	r3, #0
 80264b2:	9301      	str	r3, [sp, #4]
 80264b4:	e7c2      	b.n	802643c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 80264b6:	bf00      	nop
 80264b8:	08029624 	.word	0x08029624

080264bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80264bc:	b510      	push	{r4, lr}
 80264be:	4b07      	ldr	r3, [pc, #28]	; (80264dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80264c0:	781b      	ldrb	r3, [r3, #0]
 80264c2:	2b01      	cmp	r3, #1
 80264c4:	d108      	bne.n	80264d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80264c6:	6843      	ldr	r3, [r0, #4]
 80264c8:	6814      	ldr	r4, [r2, #0]
 80264ca:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80264ce:	680b      	ldr	r3, [r1, #0]
 80264d0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80264d4:	6013      	str	r3, [r2, #0]
 80264d6:	600c      	str	r4, [r1, #0]
 80264d8:	bd10      	pop	{r4, pc}
 80264da:	bf00      	nop
 80264dc:	2004f6ec 	.word	0x2004f6ec

080264e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80264e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80264e2:	4604      	mov	r4, r0
 80264e4:	ab02      	add	r3, sp, #8
 80264e6:	f843 2d08 	str.w	r2, [r3, #-8]!
 80264ea:	461a      	mov	r2, r3
 80264ec:	9101      	str	r1, [sp, #4]
 80264ee:	a901      	add	r1, sp, #4
 80264f0:	f7ff ffe4 	bl	80264bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80264f4:	68a3      	ldr	r3, [r4, #8]
 80264f6:	9901      	ldr	r1, [sp, #4]
 80264f8:	9a00      	ldr	r2, [sp, #0]
 80264fa:	1ac9      	subs	r1, r1, r3
 80264fc:	68e3      	ldr	r3, [r4, #12]
 80264fe:	9101      	str	r1, [sp, #4]
 8026500:	1ad2      	subs	r2, r2, r3
 8026502:	2a00      	cmp	r2, #0
 8026504:	9200      	str	r2, [sp, #0]
 8026506:	db1c      	blt.n	8026542 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8026508:	6963      	ldr	r3, [r4, #20]
 802650a:	429a      	cmp	r2, r3
 802650c:	bfac      	ite	ge
 802650e:	2002      	movge	r0, #2
 8026510:	2000      	movlt	r0, #0
 8026512:	2900      	cmp	r1, #0
 8026514:	db17      	blt.n	8026546 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8026516:	6923      	ldr	r3, [r4, #16]
 8026518:	4299      	cmp	r1, r3
 802651a:	bfac      	ite	ge
 802651c:	2308      	movge	r3, #8
 802651e:	2300      	movlt	r3, #0
 8026520:	4303      	orrs	r3, r0
 8026522:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8026526:	b2dd      	uxtb	r5, r3
 8026528:	b978      	cbnz	r0, 802654a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802652a:	f104 0020 	add.w	r0, r4, #32
 802652e:	f7ff fe51 	bl	80261d4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026532:	9b01      	ldr	r3, [sp, #4]
 8026534:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8026538:	65e3      	str	r3, [r4, #92]	; 0x5c
 802653a:	9b00      	ldr	r3, [sp, #0]
 802653c:	6623      	str	r3, [r4, #96]	; 0x60
 802653e:	b002      	add	sp, #8
 8026540:	bd70      	pop	{r4, r5, r6, pc}
 8026542:	2001      	movs	r0, #1
 8026544:	e7e5      	b.n	8026512 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8026546:	2304      	movs	r3, #4
 8026548:	e7ea      	b.n	8026520 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802654a:	b113      	cbz	r3, 8026552 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802654c:	ea10 0305 	ands.w	r3, r0, r5
 8026550:	d11d      	bne.n	802658e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8026552:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8026556:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802655a:	f104 0620 	add.w	r6, r4, #32
 802655e:	b193      	cbz	r3, 8026586 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026560:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8026564:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8026568:	4298      	cmp	r0, r3
 802656a:	d802      	bhi.n	8026572 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802656c:	4630      	mov	r0, r6
 802656e:	f7f0 f9f7 	bl	8016960 <_ZN8touchgfx7Outline6moveToEii>
 8026572:	2300      	movs	r3, #0
 8026574:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8026578:	2301      	movs	r3, #1
 802657a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802657e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8026582:	4630      	mov	r0, r6
 8026584:	e7d3      	b.n	802652e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8026586:	4630      	mov	r0, r6
 8026588:	f7ff fe24 	bl	80261d4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802658c:	e7f7      	b.n	802657e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802658e:	461d      	mov	r5, r3
 8026590:	e7cf      	b.n	8026532 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08026592 <_ZN8touchgfx6Canvas5closeEv>:
 8026592:	b538      	push	{r3, r4, r5, lr}
 8026594:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8026598:	4604      	mov	r4, r0
 802659a:	b993      	cbnz	r3, 80265c2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802659c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80265a0:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80265a4:	4213      	tst	r3, r2
 80265a6:	d10c      	bne.n	80265c2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80265a8:	f100 0520 	add.w	r5, r0, #32
 80265ac:	b123      	cbz	r3, 80265b8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80265ae:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80265b2:	4628      	mov	r0, r5
 80265b4:	f7ff fe0e 	bl	80261d4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80265b8:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80265bc:	4628      	mov	r0, r5
 80265be:	f7ff fe09 	bl	80261d4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80265c2:	2300      	movs	r3, #0
 80265c4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80265c8:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80265cc:	4298      	cmp	r0, r3
 80265ce:	bf34      	ite	cc
 80265d0:	2000      	movcc	r0, #0
 80265d2:	2001      	movcs	r0, #1
 80265d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080265d8 <_ZN8touchgfx6Canvas6renderEh>:
 80265d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80265dc:	4604      	mov	r4, r0
 80265de:	6840      	ldr	r0, [r0, #4]
 80265e0:	460d      	mov	r5, r1
 80265e2:	6803      	ldr	r3, [r0, #0]
 80265e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80265e6:	4798      	blx	r3
 80265e8:	fb10 f105 	smulbb	r1, r0, r5
 80265ec:	b289      	uxth	r1, r1
 80265ee:	1c4d      	adds	r5, r1, #1
 80265f0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80265f4:	122d      	asrs	r5, r5, #8
 80265f6:	f000 8097 	beq.w	8026728 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80265fa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80265fe:	2b00      	cmp	r3, #0
 8026600:	f000 8092 	beq.w	8026728 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8026604:	4620      	mov	r0, r4
 8026606:	f7ff ffc4 	bl	8026592 <_ZN8touchgfx6Canvas5closeEv>
 802660a:	4607      	mov	r7, r0
 802660c:	2800      	cmp	r0, #0
 802660e:	d043      	beq.n	8026698 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8026610:	6863      	ldr	r3, [r4, #4]
 8026612:	4e46      	ldr	r6, [pc, #280]	; (802672c <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8026614:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8026616:	6837      	ldr	r7, [r6, #0]
 8026618:	6803      	ldr	r3, [r0, #0]
 802661a:	689b      	ldr	r3, [r3, #8]
 802661c:	4798      	blx	r3
 802661e:	4601      	mov	r1, r0
 8026620:	4638      	mov	r0, r7
 8026622:	f7ee fb6b 	bl	8014cfc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8026626:	4607      	mov	r7, r0
 8026628:	f7e8 f88c 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 802662c:	6803      	ldr	r3, [r0, #0]
 802662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026630:	4798      	blx	r3
 8026632:	4680      	mov	r8, r0
 8026634:	f7e8 f886 	bl	800e744 <_ZN8touchgfx3HAL3lcdEv>
 8026638:	6803      	ldr	r3, [r0, #0]
 802663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802663c:	4798      	blx	r3
 802663e:	280b      	cmp	r0, #11
 8026640:	d857      	bhi.n	80266f2 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8026642:	e8df f000 	tbb	[pc, r0]
 8026646:	584d      	.short	0x584d
 8026648:	2d560668 	.word	0x2d560668
 802664c:	6161613d 	.word	0x6161613d
 8026650:	6161      	.short	0x6161
 8026652:	2208      	movs	r2, #8
 8026654:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8026658:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802665c:	fb91 f2f2 	sdiv	r2, r1, r2
 8026660:	fb08 2303 	mla	r3, r8, r3, r2
 8026664:	441f      	add	r7, r3
 8026666:	424b      	negs	r3, r1
 8026668:	f003 0307 	and.w	r3, r3, #7
 802666c:	f001 0107 	and.w	r1, r1, #7
 8026670:	bf58      	it	pl
 8026672:	4259      	negpl	r1, r3
 8026674:	b2c9      	uxtb	r1, r1
 8026676:	b2ed      	uxtb	r5, r5
 8026678:	e9cd 1500 	strd	r1, r5, [sp]
 802667c:	6860      	ldr	r0, [r4, #4]
 802667e:	fa0f f388 	sxth.w	r3, r8
 8026682:	463a      	mov	r2, r7
 8026684:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8026686:	f104 0020 	add.w	r0, r4, #32
 802668a:	f7ff fdaf 	bl	80261ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802668e:	4607      	mov	r7, r0
 8026690:	6830      	ldr	r0, [r6, #0]
 8026692:	6803      	ldr	r3, [r0, #0]
 8026694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026696:	4798      	blx	r3
 8026698:	4638      	mov	r0, r7
 802669a:	b002      	add	sp, #8
 802669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266a0:	2204      	movs	r2, #4
 80266a2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80266a6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80266aa:	fb91 f2f2 	sdiv	r2, r1, r2
 80266ae:	fb08 2303 	mla	r3, r8, r3, r2
 80266b2:	441f      	add	r7, r3
 80266b4:	424b      	negs	r3, r1
 80266b6:	f003 0303 	and.w	r3, r3, #3
 80266ba:	f001 0103 	and.w	r1, r1, #3
 80266be:	e7d7      	b.n	8026670 <_ZN8touchgfx6Canvas6renderEh+0x98>
 80266c0:	2202      	movs	r2, #2
 80266c2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80266c6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80266ca:	fb91 f2f2 	sdiv	r2, r1, r2
 80266ce:	fb08 2303 	mla	r3, r8, r3, r2
 80266d2:	2900      	cmp	r1, #0
 80266d4:	f001 0101 	and.w	r1, r1, #1
 80266d8:	441f      	add	r7, r3
 80266da:	bfb8      	it	lt
 80266dc:	4249      	neglt	r1, r1
 80266de:	e7c9      	b.n	8026674 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 80266e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80266e4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80266e8:	fb08 f303 	mul.w	r3, r8, r3
 80266ec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80266f0:	441f      	add	r7, r3
 80266f2:	2100      	movs	r1, #0
 80266f4:	e7bf      	b.n	8026676 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 80266f6:	2103      	movs	r1, #3
 80266f8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80266fc:	fb08 f203 	mul.w	r2, r8, r3
 8026700:	8b23      	ldrh	r3, [r4, #24]
 8026702:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026706:	e7f3      	b.n	80266f0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8026708:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802670c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8026710:	fb08 2303 	mla	r3, r8, r3, r2
 8026714:	e7ec      	b.n	80266f0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8026716:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802671a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802671e:	fb08 f303 	mul.w	r3, r8, r3
 8026722:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026726:	e7e3      	b.n	80266f0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8026728:	2701      	movs	r7, #1
 802672a:	e7b5      	b.n	8026698 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802672c:	2004f6f4 	.word	0x2004f6f4

08026730 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026730:	b513      	push	{r0, r1, r4, lr}
 8026732:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8026736:	4604      	mov	r4, r0
 8026738:	e9cd 2100 	strd	r2, r1, [sp]
 802673c:	b1a3      	cbz	r3, 8026768 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802673e:	466a      	mov	r2, sp
 8026740:	a901      	add	r1, sp, #4
 8026742:	4620      	mov	r0, r4
 8026744:	f7ff feba 	bl	80264bc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026748:	68a3      	ldr	r3, [r4, #8]
 802674a:	9901      	ldr	r1, [sp, #4]
 802674c:	9a00      	ldr	r2, [sp, #0]
 802674e:	1ac9      	subs	r1, r1, r3
 8026750:	68e3      	ldr	r3, [r4, #12]
 8026752:	9101      	str	r1, [sp, #4]
 8026754:	1ad2      	subs	r2, r2, r3
 8026756:	2a00      	cmp	r2, #0
 8026758:	9200      	str	r2, [sp, #0]
 802675a:	da0b      	bge.n	8026774 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802675c:	2301      	movs	r3, #1
 802675e:	2900      	cmp	r1, #0
 8026760:	da0e      	bge.n	8026780 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8026762:	f043 0304 	orr.w	r3, r3, #4
 8026766:	e013      	b.n	8026790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8026768:	f7ff ff13 	bl	8026592 <_ZN8touchgfx6Canvas5closeEv>
 802676c:	2800      	cmp	r0, #0
 802676e:	d1e6      	bne.n	802673e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8026770:	b002      	add	sp, #8
 8026772:	bd10      	pop	{r4, pc}
 8026774:	6963      	ldr	r3, [r4, #20]
 8026776:	429a      	cmp	r2, r3
 8026778:	bfac      	ite	ge
 802677a:	2302      	movge	r3, #2
 802677c:	2300      	movlt	r3, #0
 802677e:	e7ee      	b.n	802675e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8026780:	6920      	ldr	r0, [r4, #16]
 8026782:	4281      	cmp	r1, r0
 8026784:	bfac      	ite	ge
 8026786:	2008      	movge	r0, #8
 8026788:	2000      	movlt	r0, #0
 802678a:	4318      	orrs	r0, r3
 802678c:	b2c3      	uxtb	r3, r0
 802678e:	b158      	cbz	r0, 80267a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8026790:	2201      	movs	r2, #1
 8026792:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8026796:	9901      	ldr	r1, [sp, #4]
 8026798:	9a00      	ldr	r2, [sp, #0]
 802679a:	66a1      	str	r1, [r4, #104]	; 0x68
 802679c:	66e2      	str	r2, [r4, #108]	; 0x6c
 802679e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80267a2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80267a6:	e7e3      	b.n	8026770 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80267a8:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80267ac:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80267b0:	4298      	cmp	r0, r3
 80267b2:	d803      	bhi.n	80267bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80267b4:	f104 0020 	add.w	r0, r4, #32
 80267b8:	f7f0 f8d2 	bl	8016960 <_ZN8touchgfx7Outline6moveToEii>
 80267bc:	2300      	movs	r3, #0
 80267be:	2201      	movs	r2, #1
 80267c0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80267c4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80267c8:	e7e5      	b.n	8026796 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080267ca <__aeabi_atexit>:
 80267ca:	460b      	mov	r3, r1
 80267cc:	4601      	mov	r1, r0
 80267ce:	4618      	mov	r0, r3
 80267d0:	f000 b850 	b.w	8026874 <__cxa_atexit>

080267d4 <_ZdlPvj>:
 80267d4:	f000 b812 	b.w	80267fc <_ZdlPv>

080267d8 <__cxa_guard_acquire>:
 80267d8:	6803      	ldr	r3, [r0, #0]
 80267da:	07db      	lsls	r3, r3, #31
 80267dc:	d406      	bmi.n	80267ec <__cxa_guard_acquire+0x14>
 80267de:	7843      	ldrb	r3, [r0, #1]
 80267e0:	b103      	cbz	r3, 80267e4 <__cxa_guard_acquire+0xc>
 80267e2:	deff      	udf	#255	; 0xff
 80267e4:	2301      	movs	r3, #1
 80267e6:	7043      	strb	r3, [r0, #1]
 80267e8:	4618      	mov	r0, r3
 80267ea:	4770      	bx	lr
 80267ec:	2000      	movs	r0, #0
 80267ee:	4770      	bx	lr

080267f0 <__cxa_guard_release>:
 80267f0:	2301      	movs	r3, #1
 80267f2:	6003      	str	r3, [r0, #0]
 80267f4:	4770      	bx	lr

080267f6 <__cxa_pure_virtual>:
 80267f6:	b508      	push	{r3, lr}
 80267f8:	f000 f80c 	bl	8026814 <_ZSt9terminatev>

080267fc <_ZdlPv>:
 80267fc:	f000 b88c 	b.w	8026918 <free>

08026800 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026800:	b508      	push	{r3, lr}
 8026802:	4780      	blx	r0
 8026804:	f000 f80b 	bl	802681e <abort>

08026808 <_ZSt13get_terminatev>:
 8026808:	4b01      	ldr	r3, [pc, #4]	; (8026810 <_ZSt13get_terminatev+0x8>)
 802680a:	e8d3 0faf 	lda	r0, [r3]
 802680e:	4770      	bx	lr
 8026810:	20025894 	.word	0x20025894

08026814 <_ZSt9terminatev>:
 8026814:	b508      	push	{r3, lr}
 8026816:	f7ff fff7 	bl	8026808 <_ZSt13get_terminatev>
 802681a:	f7ff fff1 	bl	8026800 <_ZN10__cxxabiv111__terminateEPFvvE>

0802681e <abort>:
 802681e:	2006      	movs	r0, #6
 8026820:	b508      	push	{r3, lr}
 8026822:	f000 fc91 	bl	8027148 <raise>
 8026826:	2001      	movs	r0, #1
 8026828:	f7db fc9c 	bl	8002164 <_exit>

0802682c <__assert_func>:
 802682c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802682e:	4614      	mov	r4, r2
 8026830:	461a      	mov	r2, r3
 8026832:	4b09      	ldr	r3, [pc, #36]	; (8026858 <__assert_func+0x2c>)
 8026834:	4605      	mov	r5, r0
 8026836:	681b      	ldr	r3, [r3, #0]
 8026838:	68d8      	ldr	r0, [r3, #12]
 802683a:	b14c      	cbz	r4, 8026850 <__assert_func+0x24>
 802683c:	4b07      	ldr	r3, [pc, #28]	; (802685c <__assert_func+0x30>)
 802683e:	9100      	str	r1, [sp, #0]
 8026840:	4907      	ldr	r1, [pc, #28]	; (8026860 <__assert_func+0x34>)
 8026842:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026846:	462b      	mov	r3, r5
 8026848:	f000 f828 	bl	802689c <fiprintf>
 802684c:	f7ff ffe7 	bl	802681e <abort>
 8026850:	4b04      	ldr	r3, [pc, #16]	; (8026864 <__assert_func+0x38>)
 8026852:	461c      	mov	r4, r3
 8026854:	e7f3      	b.n	802683e <__assert_func+0x12>
 8026856:	bf00      	nop
 8026858:	20025898 	.word	0x20025898
 802685c:	08029e18 	.word	0x08029e18
 8026860:	08029e25 	.word	0x08029e25
 8026864:	08029e53 	.word	0x08029e53

08026868 <atexit>:
 8026868:	2300      	movs	r3, #0
 802686a:	4601      	mov	r1, r0
 802686c:	461a      	mov	r2, r3
 802686e:	4618      	mov	r0, r3
 8026870:	f000 bd46 	b.w	8027300 <__register_exitproc>

08026874 <__cxa_atexit>:
 8026874:	b510      	push	{r4, lr}
 8026876:	4c05      	ldr	r4, [pc, #20]	; (802688c <__cxa_atexit+0x18>)
 8026878:	4613      	mov	r3, r2
 802687a:	b12c      	cbz	r4, 8026888 <__cxa_atexit+0x14>
 802687c:	460a      	mov	r2, r1
 802687e:	4601      	mov	r1, r0
 8026880:	2002      	movs	r0, #2
 8026882:	f000 fd3d 	bl	8027300 <__register_exitproc>
 8026886:	bd10      	pop	{r4, pc}
 8026888:	4620      	mov	r0, r4
 802688a:	e7fc      	b.n	8026886 <__cxa_atexit+0x12>
 802688c:	08027301 	.word	0x08027301

08026890 <__errno>:
 8026890:	4b01      	ldr	r3, [pc, #4]	; (8026898 <__errno+0x8>)
 8026892:	6818      	ldr	r0, [r3, #0]
 8026894:	4770      	bx	lr
 8026896:	bf00      	nop
 8026898:	20025898 	.word	0x20025898

0802689c <fiprintf>:
 802689c:	b40e      	push	{r1, r2, r3}
 802689e:	b503      	push	{r0, r1, lr}
 80268a0:	ab03      	add	r3, sp, #12
 80268a2:	4601      	mov	r1, r0
 80268a4:	4805      	ldr	r0, [pc, #20]	; (80268bc <fiprintf+0x20>)
 80268a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80268aa:	6800      	ldr	r0, [r0, #0]
 80268ac:	9301      	str	r3, [sp, #4]
 80268ae:	f000 f94d 	bl	8026b4c <_vfiprintf_r>
 80268b2:	b002      	add	sp, #8
 80268b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80268b8:	b003      	add	sp, #12
 80268ba:	4770      	bx	lr
 80268bc:	20025898 	.word	0x20025898

080268c0 <__libc_init_array>:
 80268c0:	b570      	push	{r4, r5, r6, lr}
 80268c2:	4d0d      	ldr	r5, [pc, #52]	; (80268f8 <__libc_init_array+0x38>)
 80268c4:	2600      	movs	r6, #0
 80268c6:	4c0d      	ldr	r4, [pc, #52]	; (80268fc <__libc_init_array+0x3c>)
 80268c8:	1b64      	subs	r4, r4, r5
 80268ca:	10a4      	asrs	r4, r4, #2
 80268cc:	42a6      	cmp	r6, r4
 80268ce:	d109      	bne.n	80268e4 <__libc_init_array+0x24>
 80268d0:	4d0b      	ldr	r5, [pc, #44]	; (8026900 <__libc_init_array+0x40>)
 80268d2:	2600      	movs	r6, #0
 80268d4:	4c0b      	ldr	r4, [pc, #44]	; (8026904 <__libc_init_array+0x44>)
 80268d6:	f001 f85b 	bl	8027990 <_init>
 80268da:	1b64      	subs	r4, r4, r5
 80268dc:	10a4      	asrs	r4, r4, #2
 80268de:	42a6      	cmp	r6, r4
 80268e0:	d105      	bne.n	80268ee <__libc_init_array+0x2e>
 80268e2:	bd70      	pop	{r4, r5, r6, pc}
 80268e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80268e8:	3601      	adds	r6, #1
 80268ea:	4798      	blx	r3
 80268ec:	e7ee      	b.n	80268cc <__libc_init_array+0xc>
 80268ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80268f2:	3601      	adds	r6, #1
 80268f4:	4798      	blx	r3
 80268f6:	e7f2      	b.n	80268de <__libc_init_array+0x1e>
 80268f8:	0804f8c8 	.word	0x0804f8c8
 80268fc:	0804f8c8 	.word	0x0804f8c8
 8026900:	0804f8c8 	.word	0x0804f8c8
 8026904:	0804f8dc 	.word	0x0804f8dc

08026908 <malloc>:
 8026908:	4b02      	ldr	r3, [pc, #8]	; (8026914 <malloc+0xc>)
 802690a:	4601      	mov	r1, r0
 802690c:	6818      	ldr	r0, [r3, #0]
 802690e:	f000 b87f 	b.w	8026a10 <_malloc_r>
 8026912:	bf00      	nop
 8026914:	20025898 	.word	0x20025898

08026918 <free>:
 8026918:	4b02      	ldr	r3, [pc, #8]	; (8026924 <free+0xc>)
 802691a:	4601      	mov	r1, r0
 802691c:	6818      	ldr	r0, [r3, #0]
 802691e:	f000 b80b 	b.w	8026938 <_free_r>
 8026922:	bf00      	nop
 8026924:	20025898 	.word	0x20025898

08026928 <memset>:
 8026928:	4402      	add	r2, r0
 802692a:	4603      	mov	r3, r0
 802692c:	4293      	cmp	r3, r2
 802692e:	d100      	bne.n	8026932 <memset+0xa>
 8026930:	4770      	bx	lr
 8026932:	f803 1b01 	strb.w	r1, [r3], #1
 8026936:	e7f9      	b.n	802692c <memset+0x4>

08026938 <_free_r>:
 8026938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802693a:	2900      	cmp	r1, #0
 802693c:	d043      	beq.n	80269c6 <_free_r+0x8e>
 802693e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026942:	1f0c      	subs	r4, r1, #4
 8026944:	9001      	str	r0, [sp, #4]
 8026946:	2b00      	cmp	r3, #0
 8026948:	bfb8      	it	lt
 802694a:	18e4      	addlt	r4, r4, r3
 802694c:	f000 ff68 	bl	8027820 <__malloc_lock>
 8026950:	4a1e      	ldr	r2, [pc, #120]	; (80269cc <_free_r+0x94>)
 8026952:	9801      	ldr	r0, [sp, #4]
 8026954:	6813      	ldr	r3, [r2, #0]
 8026956:	b933      	cbnz	r3, 8026966 <_free_r+0x2e>
 8026958:	6063      	str	r3, [r4, #4]
 802695a:	6014      	str	r4, [r2, #0]
 802695c:	b003      	add	sp, #12
 802695e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026962:	f000 bf63 	b.w	802782c <__malloc_unlock>
 8026966:	42a3      	cmp	r3, r4
 8026968:	d908      	bls.n	802697c <_free_r+0x44>
 802696a:	6825      	ldr	r5, [r4, #0]
 802696c:	1961      	adds	r1, r4, r5
 802696e:	428b      	cmp	r3, r1
 8026970:	bf01      	itttt	eq
 8026972:	6819      	ldreq	r1, [r3, #0]
 8026974:	685b      	ldreq	r3, [r3, #4]
 8026976:	1949      	addeq	r1, r1, r5
 8026978:	6021      	streq	r1, [r4, #0]
 802697a:	e7ed      	b.n	8026958 <_free_r+0x20>
 802697c:	461a      	mov	r2, r3
 802697e:	685b      	ldr	r3, [r3, #4]
 8026980:	b10b      	cbz	r3, 8026986 <_free_r+0x4e>
 8026982:	42a3      	cmp	r3, r4
 8026984:	d9fa      	bls.n	802697c <_free_r+0x44>
 8026986:	6811      	ldr	r1, [r2, #0]
 8026988:	1855      	adds	r5, r2, r1
 802698a:	42a5      	cmp	r5, r4
 802698c:	d10b      	bne.n	80269a6 <_free_r+0x6e>
 802698e:	6824      	ldr	r4, [r4, #0]
 8026990:	4421      	add	r1, r4
 8026992:	1854      	adds	r4, r2, r1
 8026994:	6011      	str	r1, [r2, #0]
 8026996:	42a3      	cmp	r3, r4
 8026998:	d1e0      	bne.n	802695c <_free_r+0x24>
 802699a:	681c      	ldr	r4, [r3, #0]
 802699c:	685b      	ldr	r3, [r3, #4]
 802699e:	4421      	add	r1, r4
 80269a0:	6053      	str	r3, [r2, #4]
 80269a2:	6011      	str	r1, [r2, #0]
 80269a4:	e7da      	b.n	802695c <_free_r+0x24>
 80269a6:	d902      	bls.n	80269ae <_free_r+0x76>
 80269a8:	230c      	movs	r3, #12
 80269aa:	6003      	str	r3, [r0, #0]
 80269ac:	e7d6      	b.n	802695c <_free_r+0x24>
 80269ae:	6825      	ldr	r5, [r4, #0]
 80269b0:	1961      	adds	r1, r4, r5
 80269b2:	428b      	cmp	r3, r1
 80269b4:	bf02      	ittt	eq
 80269b6:	6819      	ldreq	r1, [r3, #0]
 80269b8:	685b      	ldreq	r3, [r3, #4]
 80269ba:	1949      	addeq	r1, r1, r5
 80269bc:	6063      	str	r3, [r4, #4]
 80269be:	bf08      	it	eq
 80269c0:	6021      	streq	r1, [r4, #0]
 80269c2:	6054      	str	r4, [r2, #4]
 80269c4:	e7ca      	b.n	802695c <_free_r+0x24>
 80269c6:	b003      	add	sp, #12
 80269c8:	bd30      	pop	{r4, r5, pc}
 80269ca:	bf00      	nop
 80269cc:	2004f7f8 	.word	0x2004f7f8

080269d0 <sbrk_aligned>:
 80269d0:	b570      	push	{r4, r5, r6, lr}
 80269d2:	4e0e      	ldr	r6, [pc, #56]	; (8026a0c <sbrk_aligned+0x3c>)
 80269d4:	460c      	mov	r4, r1
 80269d6:	4605      	mov	r5, r0
 80269d8:	6831      	ldr	r1, [r6, #0]
 80269da:	b911      	cbnz	r1, 80269e2 <sbrk_aligned+0x12>
 80269dc:	f000 fb7c 	bl	80270d8 <_sbrk_r>
 80269e0:	6030      	str	r0, [r6, #0]
 80269e2:	4621      	mov	r1, r4
 80269e4:	4628      	mov	r0, r5
 80269e6:	f000 fb77 	bl	80270d8 <_sbrk_r>
 80269ea:	1c43      	adds	r3, r0, #1
 80269ec:	d00a      	beq.n	8026a04 <sbrk_aligned+0x34>
 80269ee:	1cc4      	adds	r4, r0, #3
 80269f0:	f024 0403 	bic.w	r4, r4, #3
 80269f4:	42a0      	cmp	r0, r4
 80269f6:	d007      	beq.n	8026a08 <sbrk_aligned+0x38>
 80269f8:	1a21      	subs	r1, r4, r0
 80269fa:	4628      	mov	r0, r5
 80269fc:	f000 fb6c 	bl	80270d8 <_sbrk_r>
 8026a00:	3001      	adds	r0, #1
 8026a02:	d101      	bne.n	8026a08 <sbrk_aligned+0x38>
 8026a04:	f04f 34ff 	mov.w	r4, #4294967295
 8026a08:	4620      	mov	r0, r4
 8026a0a:	bd70      	pop	{r4, r5, r6, pc}
 8026a0c:	2004f7fc 	.word	0x2004f7fc

08026a10 <_malloc_r>:
 8026a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a14:	1ccd      	adds	r5, r1, #3
 8026a16:	4607      	mov	r7, r0
 8026a18:	f025 0503 	bic.w	r5, r5, #3
 8026a1c:	3508      	adds	r5, #8
 8026a1e:	2d0c      	cmp	r5, #12
 8026a20:	bf38      	it	cc
 8026a22:	250c      	movcc	r5, #12
 8026a24:	2d00      	cmp	r5, #0
 8026a26:	db01      	blt.n	8026a2c <_malloc_r+0x1c>
 8026a28:	42a9      	cmp	r1, r5
 8026a2a:	d905      	bls.n	8026a38 <_malloc_r+0x28>
 8026a2c:	230c      	movs	r3, #12
 8026a2e:	2600      	movs	r6, #0
 8026a30:	603b      	str	r3, [r7, #0]
 8026a32:	4630      	mov	r0, r6
 8026a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a38:	4e2e      	ldr	r6, [pc, #184]	; (8026af4 <_malloc_r+0xe4>)
 8026a3a:	f000 fef1 	bl	8027820 <__malloc_lock>
 8026a3e:	6833      	ldr	r3, [r6, #0]
 8026a40:	461c      	mov	r4, r3
 8026a42:	bb34      	cbnz	r4, 8026a92 <_malloc_r+0x82>
 8026a44:	4629      	mov	r1, r5
 8026a46:	4638      	mov	r0, r7
 8026a48:	f7ff ffc2 	bl	80269d0 <sbrk_aligned>
 8026a4c:	1c43      	adds	r3, r0, #1
 8026a4e:	4604      	mov	r4, r0
 8026a50:	d14d      	bne.n	8026aee <_malloc_r+0xde>
 8026a52:	6834      	ldr	r4, [r6, #0]
 8026a54:	4626      	mov	r6, r4
 8026a56:	2e00      	cmp	r6, #0
 8026a58:	d140      	bne.n	8026adc <_malloc_r+0xcc>
 8026a5a:	6823      	ldr	r3, [r4, #0]
 8026a5c:	4631      	mov	r1, r6
 8026a5e:	4638      	mov	r0, r7
 8026a60:	eb04 0803 	add.w	r8, r4, r3
 8026a64:	f000 fb38 	bl	80270d8 <_sbrk_r>
 8026a68:	4580      	cmp	r8, r0
 8026a6a:	d13a      	bne.n	8026ae2 <_malloc_r+0xd2>
 8026a6c:	6821      	ldr	r1, [r4, #0]
 8026a6e:	3503      	adds	r5, #3
 8026a70:	4638      	mov	r0, r7
 8026a72:	1a6d      	subs	r5, r5, r1
 8026a74:	f025 0503 	bic.w	r5, r5, #3
 8026a78:	3508      	adds	r5, #8
 8026a7a:	2d0c      	cmp	r5, #12
 8026a7c:	bf38      	it	cc
 8026a7e:	250c      	movcc	r5, #12
 8026a80:	4629      	mov	r1, r5
 8026a82:	f7ff ffa5 	bl	80269d0 <sbrk_aligned>
 8026a86:	3001      	adds	r0, #1
 8026a88:	d02b      	beq.n	8026ae2 <_malloc_r+0xd2>
 8026a8a:	6823      	ldr	r3, [r4, #0]
 8026a8c:	442b      	add	r3, r5
 8026a8e:	6023      	str	r3, [r4, #0]
 8026a90:	e00e      	b.n	8026ab0 <_malloc_r+0xa0>
 8026a92:	6822      	ldr	r2, [r4, #0]
 8026a94:	1b52      	subs	r2, r2, r5
 8026a96:	d41e      	bmi.n	8026ad6 <_malloc_r+0xc6>
 8026a98:	2a0b      	cmp	r2, #11
 8026a9a:	d916      	bls.n	8026aca <_malloc_r+0xba>
 8026a9c:	1961      	adds	r1, r4, r5
 8026a9e:	42a3      	cmp	r3, r4
 8026aa0:	6025      	str	r5, [r4, #0]
 8026aa2:	bf18      	it	ne
 8026aa4:	6059      	strne	r1, [r3, #4]
 8026aa6:	6863      	ldr	r3, [r4, #4]
 8026aa8:	bf08      	it	eq
 8026aaa:	6031      	streq	r1, [r6, #0]
 8026aac:	5162      	str	r2, [r4, r5]
 8026aae:	604b      	str	r3, [r1, #4]
 8026ab0:	f104 060b 	add.w	r6, r4, #11
 8026ab4:	4638      	mov	r0, r7
 8026ab6:	f000 feb9 	bl	802782c <__malloc_unlock>
 8026aba:	1d23      	adds	r3, r4, #4
 8026abc:	f026 0607 	bic.w	r6, r6, #7
 8026ac0:	1af2      	subs	r2, r6, r3
 8026ac2:	d0b6      	beq.n	8026a32 <_malloc_r+0x22>
 8026ac4:	1b9b      	subs	r3, r3, r6
 8026ac6:	50a3      	str	r3, [r4, r2]
 8026ac8:	e7b3      	b.n	8026a32 <_malloc_r+0x22>
 8026aca:	6862      	ldr	r2, [r4, #4]
 8026acc:	42a3      	cmp	r3, r4
 8026ace:	bf0c      	ite	eq
 8026ad0:	6032      	streq	r2, [r6, #0]
 8026ad2:	605a      	strne	r2, [r3, #4]
 8026ad4:	e7ec      	b.n	8026ab0 <_malloc_r+0xa0>
 8026ad6:	4623      	mov	r3, r4
 8026ad8:	6864      	ldr	r4, [r4, #4]
 8026ada:	e7b2      	b.n	8026a42 <_malloc_r+0x32>
 8026adc:	4634      	mov	r4, r6
 8026ade:	6876      	ldr	r6, [r6, #4]
 8026ae0:	e7b9      	b.n	8026a56 <_malloc_r+0x46>
 8026ae2:	230c      	movs	r3, #12
 8026ae4:	4638      	mov	r0, r7
 8026ae6:	603b      	str	r3, [r7, #0]
 8026ae8:	f000 fea0 	bl	802782c <__malloc_unlock>
 8026aec:	e7a1      	b.n	8026a32 <_malloc_r+0x22>
 8026aee:	6025      	str	r5, [r4, #0]
 8026af0:	e7de      	b.n	8026ab0 <_malloc_r+0xa0>
 8026af2:	bf00      	nop
 8026af4:	2004f7f8 	.word	0x2004f7f8

08026af8 <__sfputc_r>:
 8026af8:	6893      	ldr	r3, [r2, #8]
 8026afa:	3b01      	subs	r3, #1
 8026afc:	2b00      	cmp	r3, #0
 8026afe:	6093      	str	r3, [r2, #8]
 8026b00:	b410      	push	{r4}
 8026b02:	da08      	bge.n	8026b16 <__sfputc_r+0x1e>
 8026b04:	6994      	ldr	r4, [r2, #24]
 8026b06:	42a3      	cmp	r3, r4
 8026b08:	db01      	blt.n	8026b0e <__sfputc_r+0x16>
 8026b0a:	290a      	cmp	r1, #10
 8026b0c:	d103      	bne.n	8026b16 <__sfputc_r+0x1e>
 8026b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026b12:	f000 bb35 	b.w	8027180 <__swbuf_r>
 8026b16:	6813      	ldr	r3, [r2, #0]
 8026b18:	1c58      	adds	r0, r3, #1
 8026b1a:	6010      	str	r0, [r2, #0]
 8026b1c:	4608      	mov	r0, r1
 8026b1e:	7019      	strb	r1, [r3, #0]
 8026b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026b24:	4770      	bx	lr

08026b26 <__sfputs_r>:
 8026b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b28:	4606      	mov	r6, r0
 8026b2a:	460f      	mov	r7, r1
 8026b2c:	4614      	mov	r4, r2
 8026b2e:	18d5      	adds	r5, r2, r3
 8026b30:	42ac      	cmp	r4, r5
 8026b32:	d101      	bne.n	8026b38 <__sfputs_r+0x12>
 8026b34:	2000      	movs	r0, #0
 8026b36:	e007      	b.n	8026b48 <__sfputs_r+0x22>
 8026b38:	463a      	mov	r2, r7
 8026b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b3e:	4630      	mov	r0, r6
 8026b40:	f7ff ffda 	bl	8026af8 <__sfputc_r>
 8026b44:	1c43      	adds	r3, r0, #1
 8026b46:	d1f3      	bne.n	8026b30 <__sfputs_r+0xa>
 8026b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026b4c <_vfiprintf_r>:
 8026b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b50:	460d      	mov	r5, r1
 8026b52:	b09d      	sub	sp, #116	; 0x74
 8026b54:	4614      	mov	r4, r2
 8026b56:	4698      	mov	r8, r3
 8026b58:	4606      	mov	r6, r0
 8026b5a:	b118      	cbz	r0, 8026b64 <_vfiprintf_r+0x18>
 8026b5c:	6983      	ldr	r3, [r0, #24]
 8026b5e:	b90b      	cbnz	r3, 8026b64 <_vfiprintf_r+0x18>
 8026b60:	f000 fd4a 	bl	80275f8 <__sinit>
 8026b64:	4b89      	ldr	r3, [pc, #548]	; (8026d8c <_vfiprintf_r+0x240>)
 8026b66:	429d      	cmp	r5, r3
 8026b68:	d11b      	bne.n	8026ba2 <_vfiprintf_r+0x56>
 8026b6a:	6875      	ldr	r5, [r6, #4]
 8026b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026b6e:	07d9      	lsls	r1, r3, #31
 8026b70:	d405      	bmi.n	8026b7e <_vfiprintf_r+0x32>
 8026b72:	89ab      	ldrh	r3, [r5, #12]
 8026b74:	059a      	lsls	r2, r3, #22
 8026b76:	d402      	bmi.n	8026b7e <_vfiprintf_r+0x32>
 8026b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026b7a:	f000 fddb 	bl	8027734 <__retarget_lock_acquire_recursive>
 8026b7e:	89ab      	ldrh	r3, [r5, #12]
 8026b80:	071b      	lsls	r3, r3, #28
 8026b82:	d501      	bpl.n	8026b88 <_vfiprintf_r+0x3c>
 8026b84:	692b      	ldr	r3, [r5, #16]
 8026b86:	b9eb      	cbnz	r3, 8026bc4 <_vfiprintf_r+0x78>
 8026b88:	4629      	mov	r1, r5
 8026b8a:	4630      	mov	r0, r6
 8026b8c:	f000 fb4a 	bl	8027224 <__swsetup_r>
 8026b90:	b1c0      	cbz	r0, 8026bc4 <_vfiprintf_r+0x78>
 8026b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026b94:	07dc      	lsls	r4, r3, #31
 8026b96:	d50e      	bpl.n	8026bb6 <_vfiprintf_r+0x6a>
 8026b98:	f04f 30ff 	mov.w	r0, #4294967295
 8026b9c:	b01d      	add	sp, #116	; 0x74
 8026b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ba2:	4b7b      	ldr	r3, [pc, #492]	; (8026d90 <_vfiprintf_r+0x244>)
 8026ba4:	429d      	cmp	r5, r3
 8026ba6:	d101      	bne.n	8026bac <_vfiprintf_r+0x60>
 8026ba8:	68b5      	ldr	r5, [r6, #8]
 8026baa:	e7df      	b.n	8026b6c <_vfiprintf_r+0x20>
 8026bac:	4b79      	ldr	r3, [pc, #484]	; (8026d94 <_vfiprintf_r+0x248>)
 8026bae:	429d      	cmp	r5, r3
 8026bb0:	bf08      	it	eq
 8026bb2:	68f5      	ldreq	r5, [r6, #12]
 8026bb4:	e7da      	b.n	8026b6c <_vfiprintf_r+0x20>
 8026bb6:	89ab      	ldrh	r3, [r5, #12]
 8026bb8:	0598      	lsls	r0, r3, #22
 8026bba:	d4ed      	bmi.n	8026b98 <_vfiprintf_r+0x4c>
 8026bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026bbe:	f000 fdbb 	bl	8027738 <__retarget_lock_release_recursive>
 8026bc2:	e7e9      	b.n	8026b98 <_vfiprintf_r+0x4c>
 8026bc4:	2300      	movs	r3, #0
 8026bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8026bca:	f04f 0901 	mov.w	r9, #1
 8026bce:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8026d98 <_vfiprintf_r+0x24c>
 8026bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8026bd4:	2320      	movs	r3, #32
 8026bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026bda:	2330      	movs	r3, #48	; 0x30
 8026bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026be0:	4623      	mov	r3, r4
 8026be2:	469a      	mov	sl, r3
 8026be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026be8:	b10a      	cbz	r2, 8026bee <_vfiprintf_r+0xa2>
 8026bea:	2a25      	cmp	r2, #37	; 0x25
 8026bec:	d1f9      	bne.n	8026be2 <_vfiprintf_r+0x96>
 8026bee:	ebba 0b04 	subs.w	fp, sl, r4
 8026bf2:	d00b      	beq.n	8026c0c <_vfiprintf_r+0xc0>
 8026bf4:	465b      	mov	r3, fp
 8026bf6:	4622      	mov	r2, r4
 8026bf8:	4629      	mov	r1, r5
 8026bfa:	4630      	mov	r0, r6
 8026bfc:	f7ff ff93 	bl	8026b26 <__sfputs_r>
 8026c00:	3001      	adds	r0, #1
 8026c02:	f000 80aa 	beq.w	8026d5a <_vfiprintf_r+0x20e>
 8026c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026c08:	445a      	add	r2, fp
 8026c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8026c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8026c10:	2b00      	cmp	r3, #0
 8026c12:	f000 80a2 	beq.w	8026d5a <_vfiprintf_r+0x20e>
 8026c16:	2300      	movs	r3, #0
 8026c18:	f04f 32ff 	mov.w	r2, #4294967295
 8026c1c:	f10a 0a01 	add.w	sl, sl, #1
 8026c20:	9304      	str	r3, [sp, #16]
 8026c22:	9307      	str	r3, [sp, #28]
 8026c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026c28:	931a      	str	r3, [sp, #104]	; 0x68
 8026c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026c2e:	4654      	mov	r4, sl
 8026c30:	2205      	movs	r2, #5
 8026c32:	4859      	ldr	r0, [pc, #356]	; (8026d98 <_vfiprintf_r+0x24c>)
 8026c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026c38:	f000 fde4 	bl	8027804 <memchr>
 8026c3c:	9a04      	ldr	r2, [sp, #16]
 8026c3e:	b9d8      	cbnz	r0, 8026c78 <_vfiprintf_r+0x12c>
 8026c40:	06d1      	lsls	r1, r2, #27
 8026c42:	bf44      	itt	mi
 8026c44:	2320      	movmi	r3, #32
 8026c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c4a:	0713      	lsls	r3, r2, #28
 8026c4c:	bf44      	itt	mi
 8026c4e:	232b      	movmi	r3, #43	; 0x2b
 8026c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026c54:	f89a 3000 	ldrb.w	r3, [sl]
 8026c58:	2b2a      	cmp	r3, #42	; 0x2a
 8026c5a:	d015      	beq.n	8026c88 <_vfiprintf_r+0x13c>
 8026c5c:	9a07      	ldr	r2, [sp, #28]
 8026c5e:	4654      	mov	r4, sl
 8026c60:	2000      	movs	r0, #0
 8026c62:	f04f 0c0a 	mov.w	ip, #10
 8026c66:	4621      	mov	r1, r4
 8026c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026c6c:	3b30      	subs	r3, #48	; 0x30
 8026c6e:	2b09      	cmp	r3, #9
 8026c70:	d94e      	bls.n	8026d10 <_vfiprintf_r+0x1c4>
 8026c72:	b1b0      	cbz	r0, 8026ca2 <_vfiprintf_r+0x156>
 8026c74:	9207      	str	r2, [sp, #28]
 8026c76:	e014      	b.n	8026ca2 <_vfiprintf_r+0x156>
 8026c78:	eba0 0308 	sub.w	r3, r0, r8
 8026c7c:	46a2      	mov	sl, r4
 8026c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8026c82:	4313      	orrs	r3, r2
 8026c84:	9304      	str	r3, [sp, #16]
 8026c86:	e7d2      	b.n	8026c2e <_vfiprintf_r+0xe2>
 8026c88:	9b03      	ldr	r3, [sp, #12]
 8026c8a:	1d19      	adds	r1, r3, #4
 8026c8c:	681b      	ldr	r3, [r3, #0]
 8026c8e:	2b00      	cmp	r3, #0
 8026c90:	9103      	str	r1, [sp, #12]
 8026c92:	bfbb      	ittet	lt
 8026c94:	425b      	neglt	r3, r3
 8026c96:	f042 0202 	orrlt.w	r2, r2, #2
 8026c9a:	9307      	strge	r3, [sp, #28]
 8026c9c:	9307      	strlt	r3, [sp, #28]
 8026c9e:	bfb8      	it	lt
 8026ca0:	9204      	strlt	r2, [sp, #16]
 8026ca2:	7823      	ldrb	r3, [r4, #0]
 8026ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8026ca6:	d10c      	bne.n	8026cc2 <_vfiprintf_r+0x176>
 8026ca8:	7863      	ldrb	r3, [r4, #1]
 8026caa:	2b2a      	cmp	r3, #42	; 0x2a
 8026cac:	d135      	bne.n	8026d1a <_vfiprintf_r+0x1ce>
 8026cae:	9b03      	ldr	r3, [sp, #12]
 8026cb0:	3402      	adds	r4, #2
 8026cb2:	1d1a      	adds	r2, r3, #4
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	9203      	str	r2, [sp, #12]
 8026cba:	bfb8      	it	lt
 8026cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8026cc0:	9305      	str	r3, [sp, #20]
 8026cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026da8 <_vfiprintf_r+0x25c>
 8026cc6:	2203      	movs	r2, #3
 8026cc8:	7821      	ldrb	r1, [r4, #0]
 8026cca:	4650      	mov	r0, sl
 8026ccc:	f000 fd9a 	bl	8027804 <memchr>
 8026cd0:	b140      	cbz	r0, 8026ce4 <_vfiprintf_r+0x198>
 8026cd2:	2340      	movs	r3, #64	; 0x40
 8026cd4:	eba0 000a 	sub.w	r0, r0, sl
 8026cd8:	3401      	adds	r4, #1
 8026cda:	fa03 f000 	lsl.w	r0, r3, r0
 8026cde:	9b04      	ldr	r3, [sp, #16]
 8026ce0:	4303      	orrs	r3, r0
 8026ce2:	9304      	str	r3, [sp, #16]
 8026ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ce8:	2206      	movs	r2, #6
 8026cea:	482c      	ldr	r0, [pc, #176]	; (8026d9c <_vfiprintf_r+0x250>)
 8026cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026cf0:	f000 fd88 	bl	8027804 <memchr>
 8026cf4:	2800      	cmp	r0, #0
 8026cf6:	d03f      	beq.n	8026d78 <_vfiprintf_r+0x22c>
 8026cf8:	4b29      	ldr	r3, [pc, #164]	; (8026da0 <_vfiprintf_r+0x254>)
 8026cfa:	bb1b      	cbnz	r3, 8026d44 <_vfiprintf_r+0x1f8>
 8026cfc:	9b03      	ldr	r3, [sp, #12]
 8026cfe:	3307      	adds	r3, #7
 8026d00:	f023 0307 	bic.w	r3, r3, #7
 8026d04:	3308      	adds	r3, #8
 8026d06:	9303      	str	r3, [sp, #12]
 8026d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d0a:	443b      	add	r3, r7
 8026d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8026d0e:	e767      	b.n	8026be0 <_vfiprintf_r+0x94>
 8026d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8026d14:	460c      	mov	r4, r1
 8026d16:	2001      	movs	r0, #1
 8026d18:	e7a5      	b.n	8026c66 <_vfiprintf_r+0x11a>
 8026d1a:	2300      	movs	r3, #0
 8026d1c:	3401      	adds	r4, #1
 8026d1e:	f04f 0c0a 	mov.w	ip, #10
 8026d22:	4619      	mov	r1, r3
 8026d24:	9305      	str	r3, [sp, #20]
 8026d26:	4620      	mov	r0, r4
 8026d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026d2c:	3a30      	subs	r2, #48	; 0x30
 8026d2e:	2a09      	cmp	r2, #9
 8026d30:	d903      	bls.n	8026d3a <_vfiprintf_r+0x1ee>
 8026d32:	2b00      	cmp	r3, #0
 8026d34:	d0c5      	beq.n	8026cc2 <_vfiprintf_r+0x176>
 8026d36:	9105      	str	r1, [sp, #20]
 8026d38:	e7c3      	b.n	8026cc2 <_vfiprintf_r+0x176>
 8026d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8026d3e:	4604      	mov	r4, r0
 8026d40:	2301      	movs	r3, #1
 8026d42:	e7f0      	b.n	8026d26 <_vfiprintf_r+0x1da>
 8026d44:	ab03      	add	r3, sp, #12
 8026d46:	462a      	mov	r2, r5
 8026d48:	a904      	add	r1, sp, #16
 8026d4a:	4630      	mov	r0, r6
 8026d4c:	9300      	str	r3, [sp, #0]
 8026d4e:	4b15      	ldr	r3, [pc, #84]	; (8026da4 <_vfiprintf_r+0x258>)
 8026d50:	e000      	b.n	8026d54 <_vfiprintf_r+0x208>
 8026d52:	bf00      	nop
 8026d54:	4607      	mov	r7, r0
 8026d56:	1c78      	adds	r0, r7, #1
 8026d58:	d1d6      	bne.n	8026d08 <_vfiprintf_r+0x1bc>
 8026d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026d5c:	07d9      	lsls	r1, r3, #31
 8026d5e:	d405      	bmi.n	8026d6c <_vfiprintf_r+0x220>
 8026d60:	89ab      	ldrh	r3, [r5, #12]
 8026d62:	059a      	lsls	r2, r3, #22
 8026d64:	d402      	bmi.n	8026d6c <_vfiprintf_r+0x220>
 8026d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d68:	f000 fce6 	bl	8027738 <__retarget_lock_release_recursive>
 8026d6c:	89ab      	ldrh	r3, [r5, #12]
 8026d6e:	065b      	lsls	r3, r3, #25
 8026d70:	f53f af12 	bmi.w	8026b98 <_vfiprintf_r+0x4c>
 8026d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026d76:	e711      	b.n	8026b9c <_vfiprintf_r+0x50>
 8026d78:	ab03      	add	r3, sp, #12
 8026d7a:	462a      	mov	r2, r5
 8026d7c:	a904      	add	r1, sp, #16
 8026d7e:	4630      	mov	r0, r6
 8026d80:	9300      	str	r3, [sp, #0]
 8026d82:	4b08      	ldr	r3, [pc, #32]	; (8026da4 <_vfiprintf_r+0x258>)
 8026d84:	f000 f882 	bl	8026e8c <_printf_i>
 8026d88:	e7e4      	b.n	8026d54 <_vfiprintf_r+0x208>
 8026d8a:	bf00      	nop
 8026d8c:	08029eb0 	.word	0x08029eb0
 8026d90:	08029ed0 	.word	0x08029ed0
 8026d94:	08029e90 	.word	0x08029e90
 8026d98:	08029e58 	.word	0x08029e58
 8026d9c:	08029e62 	.word	0x08029e62
 8026da0:	00000000 	.word	0x00000000
 8026da4:	08026b27 	.word	0x08026b27
 8026da8:	08029e5e 	.word	0x08029e5e

08026dac <_printf_common>:
 8026dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026db0:	4616      	mov	r6, r2
 8026db2:	4699      	mov	r9, r3
 8026db4:	688a      	ldr	r2, [r1, #8]
 8026db6:	4607      	mov	r7, r0
 8026db8:	690b      	ldr	r3, [r1, #16]
 8026dba:	460c      	mov	r4, r1
 8026dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026dc0:	4293      	cmp	r3, r2
 8026dc2:	bfb8      	it	lt
 8026dc4:	4613      	movlt	r3, r2
 8026dc6:	6033      	str	r3, [r6, #0]
 8026dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026dcc:	b10a      	cbz	r2, 8026dd2 <_printf_common+0x26>
 8026dce:	3301      	adds	r3, #1
 8026dd0:	6033      	str	r3, [r6, #0]
 8026dd2:	6823      	ldr	r3, [r4, #0]
 8026dd4:	0699      	lsls	r1, r3, #26
 8026dd6:	bf42      	ittt	mi
 8026dd8:	6833      	ldrmi	r3, [r6, #0]
 8026dda:	3302      	addmi	r3, #2
 8026ddc:	6033      	strmi	r3, [r6, #0]
 8026dde:	6825      	ldr	r5, [r4, #0]
 8026de0:	f015 0506 	ands.w	r5, r5, #6
 8026de4:	d106      	bne.n	8026df4 <_printf_common+0x48>
 8026de6:	f104 0a19 	add.w	sl, r4, #25
 8026dea:	68e3      	ldr	r3, [r4, #12]
 8026dec:	6832      	ldr	r2, [r6, #0]
 8026dee:	1a9b      	subs	r3, r3, r2
 8026df0:	42ab      	cmp	r3, r5
 8026df2:	dc29      	bgt.n	8026e48 <_printf_common+0x9c>
 8026df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026df8:	1e13      	subs	r3, r2, #0
 8026dfa:	6822      	ldr	r2, [r4, #0]
 8026dfc:	bf18      	it	ne
 8026dfe:	2301      	movne	r3, #1
 8026e00:	0692      	lsls	r2, r2, #26
 8026e02:	d42e      	bmi.n	8026e62 <_printf_common+0xb6>
 8026e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026e08:	4649      	mov	r1, r9
 8026e0a:	4638      	mov	r0, r7
 8026e0c:	47c0      	blx	r8
 8026e0e:	3001      	adds	r0, #1
 8026e10:	d021      	beq.n	8026e56 <_printf_common+0xaa>
 8026e12:	6823      	ldr	r3, [r4, #0]
 8026e14:	341a      	adds	r4, #26
 8026e16:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8026e1a:	f003 0306 	and.w	r3, r3, #6
 8026e1e:	6832      	ldr	r2, [r6, #0]
 8026e20:	2600      	movs	r6, #0
 8026e22:	2b04      	cmp	r3, #4
 8026e24:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8026e28:	bf08      	it	eq
 8026e2a:	1aad      	subeq	r5, r5, r2
 8026e2c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8026e30:	bf14      	ite	ne
 8026e32:	2500      	movne	r5, #0
 8026e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e38:	4293      	cmp	r3, r2
 8026e3a:	bfc4      	itt	gt
 8026e3c:	1a9b      	subgt	r3, r3, r2
 8026e3e:	18ed      	addgt	r5, r5, r3
 8026e40:	42b5      	cmp	r5, r6
 8026e42:	d11a      	bne.n	8026e7a <_printf_common+0xce>
 8026e44:	2000      	movs	r0, #0
 8026e46:	e008      	b.n	8026e5a <_printf_common+0xae>
 8026e48:	2301      	movs	r3, #1
 8026e4a:	4652      	mov	r2, sl
 8026e4c:	4649      	mov	r1, r9
 8026e4e:	4638      	mov	r0, r7
 8026e50:	47c0      	blx	r8
 8026e52:	3001      	adds	r0, #1
 8026e54:	d103      	bne.n	8026e5e <_printf_common+0xb2>
 8026e56:	f04f 30ff 	mov.w	r0, #4294967295
 8026e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e5e:	3501      	adds	r5, #1
 8026e60:	e7c3      	b.n	8026dea <_printf_common+0x3e>
 8026e62:	18e1      	adds	r1, r4, r3
 8026e64:	1c5a      	adds	r2, r3, #1
 8026e66:	2030      	movs	r0, #48	; 0x30
 8026e68:	3302      	adds	r3, #2
 8026e6a:	4422      	add	r2, r4
 8026e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026e78:	e7c4      	b.n	8026e04 <_printf_common+0x58>
 8026e7a:	2301      	movs	r3, #1
 8026e7c:	4622      	mov	r2, r4
 8026e7e:	4649      	mov	r1, r9
 8026e80:	4638      	mov	r0, r7
 8026e82:	47c0      	blx	r8
 8026e84:	3001      	adds	r0, #1
 8026e86:	d0e6      	beq.n	8026e56 <_printf_common+0xaa>
 8026e88:	3601      	adds	r6, #1
 8026e8a:	e7d9      	b.n	8026e40 <_printf_common+0x94>

08026e8c <_printf_i>:
 8026e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026e90:	7e0f      	ldrb	r7, [r1, #24]
 8026e92:	4691      	mov	r9, r2
 8026e94:	4680      	mov	r8, r0
 8026e96:	460c      	mov	r4, r1
 8026e98:	2f78      	cmp	r7, #120	; 0x78
 8026e9a:	469a      	mov	sl, r3
 8026e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026ea2:	d807      	bhi.n	8026eb4 <_printf_i+0x28>
 8026ea4:	2f62      	cmp	r7, #98	; 0x62
 8026ea6:	d80a      	bhi.n	8026ebe <_printf_i+0x32>
 8026ea8:	2f00      	cmp	r7, #0
 8026eaa:	f000 80d8 	beq.w	802705e <_printf_i+0x1d2>
 8026eae:	2f58      	cmp	r7, #88	; 0x58
 8026eb0:	f000 80a3 	beq.w	8026ffa <_printf_i+0x16e>
 8026eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026ebc:	e03a      	b.n	8026f34 <_printf_i+0xa8>
 8026ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026ec2:	2b15      	cmp	r3, #21
 8026ec4:	d8f6      	bhi.n	8026eb4 <_printf_i+0x28>
 8026ec6:	a101      	add	r1, pc, #4	; (adr r1, 8026ecc <_printf_i+0x40>)
 8026ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026ecc:	08026f25 	.word	0x08026f25
 8026ed0:	08026f39 	.word	0x08026f39
 8026ed4:	08026eb5 	.word	0x08026eb5
 8026ed8:	08026eb5 	.word	0x08026eb5
 8026edc:	08026eb5 	.word	0x08026eb5
 8026ee0:	08026eb5 	.word	0x08026eb5
 8026ee4:	08026f39 	.word	0x08026f39
 8026ee8:	08026eb5 	.word	0x08026eb5
 8026eec:	08026eb5 	.word	0x08026eb5
 8026ef0:	08026eb5 	.word	0x08026eb5
 8026ef4:	08026eb5 	.word	0x08026eb5
 8026ef8:	08027045 	.word	0x08027045
 8026efc:	08026f69 	.word	0x08026f69
 8026f00:	08027027 	.word	0x08027027
 8026f04:	08026eb5 	.word	0x08026eb5
 8026f08:	08026eb5 	.word	0x08026eb5
 8026f0c:	08027067 	.word	0x08027067
 8026f10:	08026eb5 	.word	0x08026eb5
 8026f14:	08026f69 	.word	0x08026f69
 8026f18:	08026eb5 	.word	0x08026eb5
 8026f1c:	08026eb5 	.word	0x08026eb5
 8026f20:	0802702f 	.word	0x0802702f
 8026f24:	682b      	ldr	r3, [r5, #0]
 8026f26:	1d1a      	adds	r2, r3, #4
 8026f28:	681b      	ldr	r3, [r3, #0]
 8026f2a:	602a      	str	r2, [r5, #0]
 8026f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026f34:	2301      	movs	r3, #1
 8026f36:	e0a3      	b.n	8027080 <_printf_i+0x1f4>
 8026f38:	6820      	ldr	r0, [r4, #0]
 8026f3a:	6829      	ldr	r1, [r5, #0]
 8026f3c:	0606      	lsls	r6, r0, #24
 8026f3e:	f101 0304 	add.w	r3, r1, #4
 8026f42:	d50a      	bpl.n	8026f5a <_printf_i+0xce>
 8026f44:	680e      	ldr	r6, [r1, #0]
 8026f46:	602b      	str	r3, [r5, #0]
 8026f48:	2e00      	cmp	r6, #0
 8026f4a:	da03      	bge.n	8026f54 <_printf_i+0xc8>
 8026f4c:	232d      	movs	r3, #45	; 0x2d
 8026f4e:	4276      	negs	r6, r6
 8026f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026f54:	485e      	ldr	r0, [pc, #376]	; (80270d0 <_printf_i+0x244>)
 8026f56:	230a      	movs	r3, #10
 8026f58:	e019      	b.n	8026f8e <_printf_i+0x102>
 8026f5a:	680e      	ldr	r6, [r1, #0]
 8026f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026f60:	602b      	str	r3, [r5, #0]
 8026f62:	bf18      	it	ne
 8026f64:	b236      	sxthne	r6, r6
 8026f66:	e7ef      	b.n	8026f48 <_printf_i+0xbc>
 8026f68:	682b      	ldr	r3, [r5, #0]
 8026f6a:	6820      	ldr	r0, [r4, #0]
 8026f6c:	1d19      	adds	r1, r3, #4
 8026f6e:	6029      	str	r1, [r5, #0]
 8026f70:	0601      	lsls	r1, r0, #24
 8026f72:	d501      	bpl.n	8026f78 <_printf_i+0xec>
 8026f74:	681e      	ldr	r6, [r3, #0]
 8026f76:	e002      	b.n	8026f7e <_printf_i+0xf2>
 8026f78:	0646      	lsls	r6, r0, #25
 8026f7a:	d5fb      	bpl.n	8026f74 <_printf_i+0xe8>
 8026f7c:	881e      	ldrh	r6, [r3, #0]
 8026f7e:	2f6f      	cmp	r7, #111	; 0x6f
 8026f80:	4853      	ldr	r0, [pc, #332]	; (80270d0 <_printf_i+0x244>)
 8026f82:	bf0c      	ite	eq
 8026f84:	2308      	moveq	r3, #8
 8026f86:	230a      	movne	r3, #10
 8026f88:	2100      	movs	r1, #0
 8026f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026f8e:	6865      	ldr	r5, [r4, #4]
 8026f90:	2d00      	cmp	r5, #0
 8026f92:	60a5      	str	r5, [r4, #8]
 8026f94:	bfa2      	ittt	ge
 8026f96:	6821      	ldrge	r1, [r4, #0]
 8026f98:	f021 0104 	bicge.w	r1, r1, #4
 8026f9c:	6021      	strge	r1, [r4, #0]
 8026f9e:	b90e      	cbnz	r6, 8026fa4 <_printf_i+0x118>
 8026fa0:	2d00      	cmp	r5, #0
 8026fa2:	d04d      	beq.n	8027040 <_printf_i+0x1b4>
 8026fa4:	4615      	mov	r5, r2
 8026fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8026faa:	fb03 6711 	mls	r7, r3, r1, r6
 8026fae:	5dc7      	ldrb	r7, [r0, r7]
 8026fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026fb4:	4637      	mov	r7, r6
 8026fb6:	460e      	mov	r6, r1
 8026fb8:	42bb      	cmp	r3, r7
 8026fba:	d9f4      	bls.n	8026fa6 <_printf_i+0x11a>
 8026fbc:	2b08      	cmp	r3, #8
 8026fbe:	d10b      	bne.n	8026fd8 <_printf_i+0x14c>
 8026fc0:	6823      	ldr	r3, [r4, #0]
 8026fc2:	07de      	lsls	r6, r3, #31
 8026fc4:	d508      	bpl.n	8026fd8 <_printf_i+0x14c>
 8026fc6:	6923      	ldr	r3, [r4, #16]
 8026fc8:	6861      	ldr	r1, [r4, #4]
 8026fca:	4299      	cmp	r1, r3
 8026fcc:	bfde      	ittt	le
 8026fce:	2330      	movle	r3, #48	; 0x30
 8026fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026fd8:	1b52      	subs	r2, r2, r5
 8026fda:	6122      	str	r2, [r4, #16]
 8026fdc:	464b      	mov	r3, r9
 8026fde:	aa03      	add	r2, sp, #12
 8026fe0:	4621      	mov	r1, r4
 8026fe2:	4640      	mov	r0, r8
 8026fe4:	f8cd a000 	str.w	sl, [sp]
 8026fe8:	f7ff fee0 	bl	8026dac <_printf_common>
 8026fec:	3001      	adds	r0, #1
 8026fee:	d14c      	bne.n	802708a <_printf_i+0x1fe>
 8026ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8026ff4:	b004      	add	sp, #16
 8026ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ffa:	4835      	ldr	r0, [pc, #212]	; (80270d0 <_printf_i+0x244>)
 8026ffc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027000:	6829      	ldr	r1, [r5, #0]
 8027002:	6823      	ldr	r3, [r4, #0]
 8027004:	f851 6b04 	ldr.w	r6, [r1], #4
 8027008:	6029      	str	r1, [r5, #0]
 802700a:	061d      	lsls	r5, r3, #24
 802700c:	d514      	bpl.n	8027038 <_printf_i+0x1ac>
 802700e:	07df      	lsls	r7, r3, #31
 8027010:	bf44      	itt	mi
 8027012:	f043 0320 	orrmi.w	r3, r3, #32
 8027016:	6023      	strmi	r3, [r4, #0]
 8027018:	b91e      	cbnz	r6, 8027022 <_printf_i+0x196>
 802701a:	6823      	ldr	r3, [r4, #0]
 802701c:	f023 0320 	bic.w	r3, r3, #32
 8027020:	6023      	str	r3, [r4, #0]
 8027022:	2310      	movs	r3, #16
 8027024:	e7b0      	b.n	8026f88 <_printf_i+0xfc>
 8027026:	6823      	ldr	r3, [r4, #0]
 8027028:	f043 0320 	orr.w	r3, r3, #32
 802702c:	6023      	str	r3, [r4, #0]
 802702e:	2378      	movs	r3, #120	; 0x78
 8027030:	4828      	ldr	r0, [pc, #160]	; (80270d4 <_printf_i+0x248>)
 8027032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027036:	e7e3      	b.n	8027000 <_printf_i+0x174>
 8027038:	0659      	lsls	r1, r3, #25
 802703a:	bf48      	it	mi
 802703c:	b2b6      	uxthmi	r6, r6
 802703e:	e7e6      	b.n	802700e <_printf_i+0x182>
 8027040:	4615      	mov	r5, r2
 8027042:	e7bb      	b.n	8026fbc <_printf_i+0x130>
 8027044:	682b      	ldr	r3, [r5, #0]
 8027046:	6826      	ldr	r6, [r4, #0]
 8027048:	1d18      	adds	r0, r3, #4
 802704a:	6961      	ldr	r1, [r4, #20]
 802704c:	6028      	str	r0, [r5, #0]
 802704e:	0635      	lsls	r5, r6, #24
 8027050:	681b      	ldr	r3, [r3, #0]
 8027052:	d501      	bpl.n	8027058 <_printf_i+0x1cc>
 8027054:	6019      	str	r1, [r3, #0]
 8027056:	e002      	b.n	802705e <_printf_i+0x1d2>
 8027058:	0670      	lsls	r0, r6, #25
 802705a:	d5fb      	bpl.n	8027054 <_printf_i+0x1c8>
 802705c:	8019      	strh	r1, [r3, #0]
 802705e:	2300      	movs	r3, #0
 8027060:	4615      	mov	r5, r2
 8027062:	6123      	str	r3, [r4, #16]
 8027064:	e7ba      	b.n	8026fdc <_printf_i+0x150>
 8027066:	682b      	ldr	r3, [r5, #0]
 8027068:	2100      	movs	r1, #0
 802706a:	1d1a      	adds	r2, r3, #4
 802706c:	602a      	str	r2, [r5, #0]
 802706e:	681d      	ldr	r5, [r3, #0]
 8027070:	6862      	ldr	r2, [r4, #4]
 8027072:	4628      	mov	r0, r5
 8027074:	f000 fbc6 	bl	8027804 <memchr>
 8027078:	b108      	cbz	r0, 802707e <_printf_i+0x1f2>
 802707a:	1b40      	subs	r0, r0, r5
 802707c:	6060      	str	r0, [r4, #4]
 802707e:	6863      	ldr	r3, [r4, #4]
 8027080:	6123      	str	r3, [r4, #16]
 8027082:	2300      	movs	r3, #0
 8027084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027088:	e7a8      	b.n	8026fdc <_printf_i+0x150>
 802708a:	6923      	ldr	r3, [r4, #16]
 802708c:	462a      	mov	r2, r5
 802708e:	4649      	mov	r1, r9
 8027090:	4640      	mov	r0, r8
 8027092:	47d0      	blx	sl
 8027094:	3001      	adds	r0, #1
 8027096:	d0ab      	beq.n	8026ff0 <_printf_i+0x164>
 8027098:	6823      	ldr	r3, [r4, #0]
 802709a:	079b      	lsls	r3, r3, #30
 802709c:	d413      	bmi.n	80270c6 <_printf_i+0x23a>
 802709e:	68e0      	ldr	r0, [r4, #12]
 80270a0:	9b03      	ldr	r3, [sp, #12]
 80270a2:	4298      	cmp	r0, r3
 80270a4:	bfb8      	it	lt
 80270a6:	4618      	movlt	r0, r3
 80270a8:	e7a4      	b.n	8026ff4 <_printf_i+0x168>
 80270aa:	2301      	movs	r3, #1
 80270ac:	4632      	mov	r2, r6
 80270ae:	4649      	mov	r1, r9
 80270b0:	4640      	mov	r0, r8
 80270b2:	47d0      	blx	sl
 80270b4:	3001      	adds	r0, #1
 80270b6:	d09b      	beq.n	8026ff0 <_printf_i+0x164>
 80270b8:	3501      	adds	r5, #1
 80270ba:	68e3      	ldr	r3, [r4, #12]
 80270bc:	9903      	ldr	r1, [sp, #12]
 80270be:	1a5b      	subs	r3, r3, r1
 80270c0:	42ab      	cmp	r3, r5
 80270c2:	dcf2      	bgt.n	80270aa <_printf_i+0x21e>
 80270c4:	e7eb      	b.n	802709e <_printf_i+0x212>
 80270c6:	2500      	movs	r5, #0
 80270c8:	f104 0619 	add.w	r6, r4, #25
 80270cc:	e7f5      	b.n	80270ba <_printf_i+0x22e>
 80270ce:	bf00      	nop
 80270d0:	08029e69 	.word	0x08029e69
 80270d4:	08029e7a 	.word	0x08029e7a

080270d8 <_sbrk_r>:
 80270d8:	b538      	push	{r3, r4, r5, lr}
 80270da:	2300      	movs	r3, #0
 80270dc:	4d05      	ldr	r5, [pc, #20]	; (80270f4 <_sbrk_r+0x1c>)
 80270de:	4604      	mov	r4, r0
 80270e0:	4608      	mov	r0, r1
 80270e2:	602b      	str	r3, [r5, #0]
 80270e4:	f7db f8b6 	bl	8002254 <_sbrk>
 80270e8:	1c43      	adds	r3, r0, #1
 80270ea:	d102      	bne.n	80270f2 <_sbrk_r+0x1a>
 80270ec:	682b      	ldr	r3, [r5, #0]
 80270ee:	b103      	cbz	r3, 80270f2 <_sbrk_r+0x1a>
 80270f0:	6023      	str	r3, [r4, #0]
 80270f2:	bd38      	pop	{r3, r4, r5, pc}
 80270f4:	2004f99c 	.word	0x2004f99c

080270f8 <_raise_r>:
 80270f8:	291f      	cmp	r1, #31
 80270fa:	b538      	push	{r3, r4, r5, lr}
 80270fc:	4604      	mov	r4, r0
 80270fe:	460d      	mov	r5, r1
 8027100:	d904      	bls.n	802710c <_raise_r+0x14>
 8027102:	2316      	movs	r3, #22
 8027104:	6003      	str	r3, [r0, #0]
 8027106:	f04f 30ff 	mov.w	r0, #4294967295
 802710a:	bd38      	pop	{r3, r4, r5, pc}
 802710c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802710e:	b112      	cbz	r2, 8027116 <_raise_r+0x1e>
 8027110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027114:	b94b      	cbnz	r3, 802712a <_raise_r+0x32>
 8027116:	4620      	mov	r0, r4
 8027118:	f000 f830 	bl	802717c <_getpid_r>
 802711c:	462a      	mov	r2, r5
 802711e:	4601      	mov	r1, r0
 8027120:	4620      	mov	r0, r4
 8027122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027126:	f000 b817 	b.w	8027158 <_kill_r>
 802712a:	2b01      	cmp	r3, #1
 802712c:	d00a      	beq.n	8027144 <_raise_r+0x4c>
 802712e:	1c59      	adds	r1, r3, #1
 8027130:	d103      	bne.n	802713a <_raise_r+0x42>
 8027132:	2316      	movs	r3, #22
 8027134:	6003      	str	r3, [r0, #0]
 8027136:	2001      	movs	r0, #1
 8027138:	e7e7      	b.n	802710a <_raise_r+0x12>
 802713a:	2400      	movs	r4, #0
 802713c:	4628      	mov	r0, r5
 802713e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027142:	4798      	blx	r3
 8027144:	2000      	movs	r0, #0
 8027146:	e7e0      	b.n	802710a <_raise_r+0x12>

08027148 <raise>:
 8027148:	4b02      	ldr	r3, [pc, #8]	; (8027154 <raise+0xc>)
 802714a:	4601      	mov	r1, r0
 802714c:	6818      	ldr	r0, [r3, #0]
 802714e:	f7ff bfd3 	b.w	80270f8 <_raise_r>
 8027152:	bf00      	nop
 8027154:	20025898 	.word	0x20025898

08027158 <_kill_r>:
 8027158:	b538      	push	{r3, r4, r5, lr}
 802715a:	2300      	movs	r3, #0
 802715c:	4d06      	ldr	r5, [pc, #24]	; (8027178 <_kill_r+0x20>)
 802715e:	4604      	mov	r4, r0
 8027160:	4608      	mov	r0, r1
 8027162:	4611      	mov	r1, r2
 8027164:	602b      	str	r3, [r5, #0]
 8027166:	f7da ffed 	bl	8002144 <_kill>
 802716a:	1c43      	adds	r3, r0, #1
 802716c:	d102      	bne.n	8027174 <_kill_r+0x1c>
 802716e:	682b      	ldr	r3, [r5, #0]
 8027170:	b103      	cbz	r3, 8027174 <_kill_r+0x1c>
 8027172:	6023      	str	r3, [r4, #0]
 8027174:	bd38      	pop	{r3, r4, r5, pc}
 8027176:	bf00      	nop
 8027178:	2004f99c 	.word	0x2004f99c

0802717c <_getpid_r>:
 802717c:	f7da bfda 	b.w	8002134 <_getpid>

08027180 <__swbuf_r>:
 8027180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027182:	460e      	mov	r6, r1
 8027184:	4614      	mov	r4, r2
 8027186:	4605      	mov	r5, r0
 8027188:	b118      	cbz	r0, 8027192 <__swbuf_r+0x12>
 802718a:	6983      	ldr	r3, [r0, #24]
 802718c:	b90b      	cbnz	r3, 8027192 <__swbuf_r+0x12>
 802718e:	f000 fa33 	bl	80275f8 <__sinit>
 8027192:	4b21      	ldr	r3, [pc, #132]	; (8027218 <__swbuf_r+0x98>)
 8027194:	429c      	cmp	r4, r3
 8027196:	d12b      	bne.n	80271f0 <__swbuf_r+0x70>
 8027198:	686c      	ldr	r4, [r5, #4]
 802719a:	69a3      	ldr	r3, [r4, #24]
 802719c:	60a3      	str	r3, [r4, #8]
 802719e:	89a3      	ldrh	r3, [r4, #12]
 80271a0:	071a      	lsls	r2, r3, #28
 80271a2:	d52f      	bpl.n	8027204 <__swbuf_r+0x84>
 80271a4:	6923      	ldr	r3, [r4, #16]
 80271a6:	b36b      	cbz	r3, 8027204 <__swbuf_r+0x84>
 80271a8:	6923      	ldr	r3, [r4, #16]
 80271aa:	b2f6      	uxtb	r6, r6
 80271ac:	6820      	ldr	r0, [r4, #0]
 80271ae:	4637      	mov	r7, r6
 80271b0:	1ac0      	subs	r0, r0, r3
 80271b2:	6963      	ldr	r3, [r4, #20]
 80271b4:	4283      	cmp	r3, r0
 80271b6:	dc04      	bgt.n	80271c2 <__swbuf_r+0x42>
 80271b8:	4621      	mov	r1, r4
 80271ba:	4628      	mov	r0, r5
 80271bc:	f000 f988 	bl	80274d0 <_fflush_r>
 80271c0:	bb30      	cbnz	r0, 8027210 <__swbuf_r+0x90>
 80271c2:	68a3      	ldr	r3, [r4, #8]
 80271c4:	3001      	adds	r0, #1
 80271c6:	3b01      	subs	r3, #1
 80271c8:	60a3      	str	r3, [r4, #8]
 80271ca:	6823      	ldr	r3, [r4, #0]
 80271cc:	1c5a      	adds	r2, r3, #1
 80271ce:	6022      	str	r2, [r4, #0]
 80271d0:	701e      	strb	r6, [r3, #0]
 80271d2:	6963      	ldr	r3, [r4, #20]
 80271d4:	4283      	cmp	r3, r0
 80271d6:	d004      	beq.n	80271e2 <__swbuf_r+0x62>
 80271d8:	89a3      	ldrh	r3, [r4, #12]
 80271da:	07db      	lsls	r3, r3, #31
 80271dc:	d506      	bpl.n	80271ec <__swbuf_r+0x6c>
 80271de:	2e0a      	cmp	r6, #10
 80271e0:	d104      	bne.n	80271ec <__swbuf_r+0x6c>
 80271e2:	4621      	mov	r1, r4
 80271e4:	4628      	mov	r0, r5
 80271e6:	f000 f973 	bl	80274d0 <_fflush_r>
 80271ea:	b988      	cbnz	r0, 8027210 <__swbuf_r+0x90>
 80271ec:	4638      	mov	r0, r7
 80271ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80271f0:	4b0a      	ldr	r3, [pc, #40]	; (802721c <__swbuf_r+0x9c>)
 80271f2:	429c      	cmp	r4, r3
 80271f4:	d101      	bne.n	80271fa <__swbuf_r+0x7a>
 80271f6:	68ac      	ldr	r4, [r5, #8]
 80271f8:	e7cf      	b.n	802719a <__swbuf_r+0x1a>
 80271fa:	4b09      	ldr	r3, [pc, #36]	; (8027220 <__swbuf_r+0xa0>)
 80271fc:	429c      	cmp	r4, r3
 80271fe:	bf08      	it	eq
 8027200:	68ec      	ldreq	r4, [r5, #12]
 8027202:	e7ca      	b.n	802719a <__swbuf_r+0x1a>
 8027204:	4621      	mov	r1, r4
 8027206:	4628      	mov	r0, r5
 8027208:	f000 f80c 	bl	8027224 <__swsetup_r>
 802720c:	2800      	cmp	r0, #0
 802720e:	d0cb      	beq.n	80271a8 <__swbuf_r+0x28>
 8027210:	f04f 37ff 	mov.w	r7, #4294967295
 8027214:	e7ea      	b.n	80271ec <__swbuf_r+0x6c>
 8027216:	bf00      	nop
 8027218:	08029eb0 	.word	0x08029eb0
 802721c:	08029ed0 	.word	0x08029ed0
 8027220:	08029e90 	.word	0x08029e90

08027224 <__swsetup_r>:
 8027224:	4b32      	ldr	r3, [pc, #200]	; (80272f0 <__swsetup_r+0xcc>)
 8027226:	b570      	push	{r4, r5, r6, lr}
 8027228:	681d      	ldr	r5, [r3, #0]
 802722a:	4606      	mov	r6, r0
 802722c:	460c      	mov	r4, r1
 802722e:	b125      	cbz	r5, 802723a <__swsetup_r+0x16>
 8027230:	69ab      	ldr	r3, [r5, #24]
 8027232:	b913      	cbnz	r3, 802723a <__swsetup_r+0x16>
 8027234:	4628      	mov	r0, r5
 8027236:	f000 f9df 	bl	80275f8 <__sinit>
 802723a:	4b2e      	ldr	r3, [pc, #184]	; (80272f4 <__swsetup_r+0xd0>)
 802723c:	429c      	cmp	r4, r3
 802723e:	d10f      	bne.n	8027260 <__swsetup_r+0x3c>
 8027240:	686c      	ldr	r4, [r5, #4]
 8027242:	89a3      	ldrh	r3, [r4, #12]
 8027244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027248:	0719      	lsls	r1, r3, #28
 802724a:	d42c      	bmi.n	80272a6 <__swsetup_r+0x82>
 802724c:	06dd      	lsls	r5, r3, #27
 802724e:	d411      	bmi.n	8027274 <__swsetup_r+0x50>
 8027250:	2309      	movs	r3, #9
 8027252:	6033      	str	r3, [r6, #0]
 8027254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027258:	f04f 30ff 	mov.w	r0, #4294967295
 802725c:	81a3      	strh	r3, [r4, #12]
 802725e:	e03e      	b.n	80272de <__swsetup_r+0xba>
 8027260:	4b25      	ldr	r3, [pc, #148]	; (80272f8 <__swsetup_r+0xd4>)
 8027262:	429c      	cmp	r4, r3
 8027264:	d101      	bne.n	802726a <__swsetup_r+0x46>
 8027266:	68ac      	ldr	r4, [r5, #8]
 8027268:	e7eb      	b.n	8027242 <__swsetup_r+0x1e>
 802726a:	4b24      	ldr	r3, [pc, #144]	; (80272fc <__swsetup_r+0xd8>)
 802726c:	429c      	cmp	r4, r3
 802726e:	bf08      	it	eq
 8027270:	68ec      	ldreq	r4, [r5, #12]
 8027272:	e7e6      	b.n	8027242 <__swsetup_r+0x1e>
 8027274:	0758      	lsls	r0, r3, #29
 8027276:	d512      	bpl.n	802729e <__swsetup_r+0x7a>
 8027278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802727a:	b141      	cbz	r1, 802728e <__swsetup_r+0x6a>
 802727c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027280:	4299      	cmp	r1, r3
 8027282:	d002      	beq.n	802728a <__swsetup_r+0x66>
 8027284:	4630      	mov	r0, r6
 8027286:	f7ff fb57 	bl	8026938 <_free_r>
 802728a:	2300      	movs	r3, #0
 802728c:	6363      	str	r3, [r4, #52]	; 0x34
 802728e:	89a3      	ldrh	r3, [r4, #12]
 8027290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027294:	81a3      	strh	r3, [r4, #12]
 8027296:	2300      	movs	r3, #0
 8027298:	6063      	str	r3, [r4, #4]
 802729a:	6923      	ldr	r3, [r4, #16]
 802729c:	6023      	str	r3, [r4, #0]
 802729e:	89a3      	ldrh	r3, [r4, #12]
 80272a0:	f043 0308 	orr.w	r3, r3, #8
 80272a4:	81a3      	strh	r3, [r4, #12]
 80272a6:	6923      	ldr	r3, [r4, #16]
 80272a8:	b94b      	cbnz	r3, 80272be <__swsetup_r+0x9a>
 80272aa:	89a3      	ldrh	r3, [r4, #12]
 80272ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80272b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80272b4:	d003      	beq.n	80272be <__swsetup_r+0x9a>
 80272b6:	4621      	mov	r1, r4
 80272b8:	4630      	mov	r0, r6
 80272ba:	f000 fa63 	bl	8027784 <__smakebuf_r>
 80272be:	89a0      	ldrh	r0, [r4, #12]
 80272c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80272c4:	f010 0301 	ands.w	r3, r0, #1
 80272c8:	d00a      	beq.n	80272e0 <__swsetup_r+0xbc>
 80272ca:	2300      	movs	r3, #0
 80272cc:	60a3      	str	r3, [r4, #8]
 80272ce:	6963      	ldr	r3, [r4, #20]
 80272d0:	425b      	negs	r3, r3
 80272d2:	61a3      	str	r3, [r4, #24]
 80272d4:	6923      	ldr	r3, [r4, #16]
 80272d6:	b943      	cbnz	r3, 80272ea <__swsetup_r+0xc6>
 80272d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80272dc:	d1ba      	bne.n	8027254 <__swsetup_r+0x30>
 80272de:	bd70      	pop	{r4, r5, r6, pc}
 80272e0:	0781      	lsls	r1, r0, #30
 80272e2:	bf58      	it	pl
 80272e4:	6963      	ldrpl	r3, [r4, #20]
 80272e6:	60a3      	str	r3, [r4, #8]
 80272e8:	e7f4      	b.n	80272d4 <__swsetup_r+0xb0>
 80272ea:	2000      	movs	r0, #0
 80272ec:	e7f7      	b.n	80272de <__swsetup_r+0xba>
 80272ee:	bf00      	nop
 80272f0:	20025898 	.word	0x20025898
 80272f4:	08029eb0 	.word	0x08029eb0
 80272f8:	08029ed0 	.word	0x08029ed0
 80272fc:	08029e90 	.word	0x08029e90

08027300 <__register_exitproc>:
 8027300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027304:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80273c4 <__register_exitproc+0xc4>
 8027308:	4606      	mov	r6, r0
 802730a:	461f      	mov	r7, r3
 802730c:	460d      	mov	r5, r1
 802730e:	f8d8 0000 	ldr.w	r0, [r8]
 8027312:	4691      	mov	r9, r2
 8027314:	f000 fa0e 	bl	8027734 <__retarget_lock_acquire_recursive>
 8027318:	4b26      	ldr	r3, [pc, #152]	; (80273b4 <__register_exitproc+0xb4>)
 802731a:	681c      	ldr	r4, [r3, #0]
 802731c:	b934      	cbnz	r4, 802732c <__register_exitproc+0x2c>
 802731e:	4c26      	ldr	r4, [pc, #152]	; (80273b8 <__register_exitproc+0xb8>)
 8027320:	601c      	str	r4, [r3, #0]
 8027322:	4b26      	ldr	r3, [pc, #152]	; (80273bc <__register_exitproc+0xbc>)
 8027324:	b113      	cbz	r3, 802732c <__register_exitproc+0x2c>
 8027326:	681b      	ldr	r3, [r3, #0]
 8027328:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802732c:	6863      	ldr	r3, [r4, #4]
 802732e:	2b1f      	cmp	r3, #31
 8027330:	dd07      	ble.n	8027342 <__register_exitproc+0x42>
 8027332:	f8d8 0000 	ldr.w	r0, [r8]
 8027336:	f000 f9ff 	bl	8027738 <__retarget_lock_release_recursive>
 802733a:	f04f 30ff 	mov.w	r0, #4294967295
 802733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027342:	b35e      	cbz	r6, 802739c <__register_exitproc+0x9c>
 8027344:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027348:	b988      	cbnz	r0, 802736e <__register_exitproc+0x6e>
 802734a:	4b1d      	ldr	r3, [pc, #116]	; (80273c0 <__register_exitproc+0xc0>)
 802734c:	b923      	cbnz	r3, 8027358 <__register_exitproc+0x58>
 802734e:	f8d8 0000 	ldr.w	r0, [r8]
 8027352:	f000 f9f0 	bl	8027736 <__retarget_lock_release>
 8027356:	e7f0      	b.n	802733a <__register_exitproc+0x3a>
 8027358:	f44f 7084 	mov.w	r0, #264	; 0x108
 802735c:	f7ff fad4 	bl	8026908 <malloc>
 8027360:	2800      	cmp	r0, #0
 8027362:	d0f4      	beq.n	802734e <__register_exitproc+0x4e>
 8027364:	2300      	movs	r3, #0
 8027366:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802736a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802736e:	6863      	ldr	r3, [r4, #4]
 8027370:	2201      	movs	r2, #1
 8027372:	2e02      	cmp	r6, #2
 8027374:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027378:	fa02 f203 	lsl.w	r2, r2, r3
 802737c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027380:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027384:	ea43 0302 	orr.w	r3, r3, r2
 8027388:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802738c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027390:	bf02      	ittt	eq
 8027392:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027396:	4313      	orreq	r3, r2
 8027398:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802739c:	6863      	ldr	r3, [r4, #4]
 802739e:	f8d8 0000 	ldr.w	r0, [r8]
 80273a2:	1c5a      	adds	r2, r3, #1
 80273a4:	3302      	adds	r3, #2
 80273a6:	6062      	str	r2, [r4, #4]
 80273a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80273ac:	f000 f9c4 	bl	8027738 <__retarget_lock_release_recursive>
 80273b0:	2000      	movs	r0, #0
 80273b2:	e7c4      	b.n	802733e <__register_exitproc+0x3e>
 80273b4:	2004f994 	.word	0x2004f994
 80273b8:	2004f908 	.word	0x2004f908
 80273bc:	08029e8c 	.word	0x08029e8c
 80273c0:	08026909 	.word	0x08026909
 80273c4:	200258fc 	.word	0x200258fc

080273c8 <__sflush_r>:
 80273c8:	898a      	ldrh	r2, [r1, #12]
 80273ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273ce:	4605      	mov	r5, r0
 80273d0:	0710      	lsls	r0, r2, #28
 80273d2:	460c      	mov	r4, r1
 80273d4:	d458      	bmi.n	8027488 <__sflush_r+0xc0>
 80273d6:	684b      	ldr	r3, [r1, #4]
 80273d8:	2b00      	cmp	r3, #0
 80273da:	dc05      	bgt.n	80273e8 <__sflush_r+0x20>
 80273dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80273de:	2b00      	cmp	r3, #0
 80273e0:	dc02      	bgt.n	80273e8 <__sflush_r+0x20>
 80273e2:	2000      	movs	r0, #0
 80273e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80273ea:	2e00      	cmp	r6, #0
 80273ec:	d0f9      	beq.n	80273e2 <__sflush_r+0x1a>
 80273ee:	2300      	movs	r3, #0
 80273f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80273f4:	682f      	ldr	r7, [r5, #0]
 80273f6:	602b      	str	r3, [r5, #0]
 80273f8:	d032      	beq.n	8027460 <__sflush_r+0x98>
 80273fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80273fc:	89a3      	ldrh	r3, [r4, #12]
 80273fe:	075a      	lsls	r2, r3, #29
 8027400:	d505      	bpl.n	802740e <__sflush_r+0x46>
 8027402:	6863      	ldr	r3, [r4, #4]
 8027404:	1ac0      	subs	r0, r0, r3
 8027406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027408:	b10b      	cbz	r3, 802740e <__sflush_r+0x46>
 802740a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802740c:	1ac0      	subs	r0, r0, r3
 802740e:	2300      	movs	r3, #0
 8027410:	4602      	mov	r2, r0
 8027412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027414:	4628      	mov	r0, r5
 8027416:	6a21      	ldr	r1, [r4, #32]
 8027418:	47b0      	blx	r6
 802741a:	1c43      	adds	r3, r0, #1
 802741c:	89a3      	ldrh	r3, [r4, #12]
 802741e:	d106      	bne.n	802742e <__sflush_r+0x66>
 8027420:	6829      	ldr	r1, [r5, #0]
 8027422:	291d      	cmp	r1, #29
 8027424:	d82c      	bhi.n	8027480 <__sflush_r+0xb8>
 8027426:	4a29      	ldr	r2, [pc, #164]	; (80274cc <__sflush_r+0x104>)
 8027428:	40ca      	lsrs	r2, r1
 802742a:	07d6      	lsls	r6, r2, #31
 802742c:	d528      	bpl.n	8027480 <__sflush_r+0xb8>
 802742e:	2200      	movs	r2, #0
 8027430:	04d9      	lsls	r1, r3, #19
 8027432:	6062      	str	r2, [r4, #4]
 8027434:	6922      	ldr	r2, [r4, #16]
 8027436:	6022      	str	r2, [r4, #0]
 8027438:	d504      	bpl.n	8027444 <__sflush_r+0x7c>
 802743a:	1c42      	adds	r2, r0, #1
 802743c:	d101      	bne.n	8027442 <__sflush_r+0x7a>
 802743e:	682b      	ldr	r3, [r5, #0]
 8027440:	b903      	cbnz	r3, 8027444 <__sflush_r+0x7c>
 8027442:	6560      	str	r0, [r4, #84]	; 0x54
 8027444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027446:	602f      	str	r7, [r5, #0]
 8027448:	2900      	cmp	r1, #0
 802744a:	d0ca      	beq.n	80273e2 <__sflush_r+0x1a>
 802744c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027450:	4299      	cmp	r1, r3
 8027452:	d002      	beq.n	802745a <__sflush_r+0x92>
 8027454:	4628      	mov	r0, r5
 8027456:	f7ff fa6f 	bl	8026938 <_free_r>
 802745a:	2000      	movs	r0, #0
 802745c:	6360      	str	r0, [r4, #52]	; 0x34
 802745e:	e7c1      	b.n	80273e4 <__sflush_r+0x1c>
 8027460:	6a21      	ldr	r1, [r4, #32]
 8027462:	2301      	movs	r3, #1
 8027464:	4628      	mov	r0, r5
 8027466:	47b0      	blx	r6
 8027468:	1c41      	adds	r1, r0, #1
 802746a:	d1c7      	bne.n	80273fc <__sflush_r+0x34>
 802746c:	682b      	ldr	r3, [r5, #0]
 802746e:	2b00      	cmp	r3, #0
 8027470:	d0c4      	beq.n	80273fc <__sflush_r+0x34>
 8027472:	2b1d      	cmp	r3, #29
 8027474:	d001      	beq.n	802747a <__sflush_r+0xb2>
 8027476:	2b16      	cmp	r3, #22
 8027478:	d101      	bne.n	802747e <__sflush_r+0xb6>
 802747a:	602f      	str	r7, [r5, #0]
 802747c:	e7b1      	b.n	80273e2 <__sflush_r+0x1a>
 802747e:	89a3      	ldrh	r3, [r4, #12]
 8027480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027484:	81a3      	strh	r3, [r4, #12]
 8027486:	e7ad      	b.n	80273e4 <__sflush_r+0x1c>
 8027488:	690f      	ldr	r7, [r1, #16]
 802748a:	2f00      	cmp	r7, #0
 802748c:	d0a9      	beq.n	80273e2 <__sflush_r+0x1a>
 802748e:	0793      	lsls	r3, r2, #30
 8027490:	680e      	ldr	r6, [r1, #0]
 8027492:	600f      	str	r7, [r1, #0]
 8027494:	bf0c      	ite	eq
 8027496:	694b      	ldreq	r3, [r1, #20]
 8027498:	2300      	movne	r3, #0
 802749a:	eba6 0807 	sub.w	r8, r6, r7
 802749e:	608b      	str	r3, [r1, #8]
 80274a0:	f1b8 0f00 	cmp.w	r8, #0
 80274a4:	dd9d      	ble.n	80273e2 <__sflush_r+0x1a>
 80274a6:	4643      	mov	r3, r8
 80274a8:	463a      	mov	r2, r7
 80274aa:	6a21      	ldr	r1, [r4, #32]
 80274ac:	4628      	mov	r0, r5
 80274ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80274b0:	47b0      	blx	r6
 80274b2:	2800      	cmp	r0, #0
 80274b4:	dc06      	bgt.n	80274c4 <__sflush_r+0xfc>
 80274b6:	89a3      	ldrh	r3, [r4, #12]
 80274b8:	f04f 30ff 	mov.w	r0, #4294967295
 80274bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80274c0:	81a3      	strh	r3, [r4, #12]
 80274c2:	e78f      	b.n	80273e4 <__sflush_r+0x1c>
 80274c4:	4407      	add	r7, r0
 80274c6:	eba8 0800 	sub.w	r8, r8, r0
 80274ca:	e7e9      	b.n	80274a0 <__sflush_r+0xd8>
 80274cc:	20400001 	.word	0x20400001

080274d0 <_fflush_r>:
 80274d0:	b538      	push	{r3, r4, r5, lr}
 80274d2:	690b      	ldr	r3, [r1, #16]
 80274d4:	4605      	mov	r5, r0
 80274d6:	460c      	mov	r4, r1
 80274d8:	b913      	cbnz	r3, 80274e0 <_fflush_r+0x10>
 80274da:	2500      	movs	r5, #0
 80274dc:	4628      	mov	r0, r5
 80274de:	bd38      	pop	{r3, r4, r5, pc}
 80274e0:	b118      	cbz	r0, 80274ea <_fflush_r+0x1a>
 80274e2:	6983      	ldr	r3, [r0, #24]
 80274e4:	b90b      	cbnz	r3, 80274ea <_fflush_r+0x1a>
 80274e6:	f000 f887 	bl	80275f8 <__sinit>
 80274ea:	4b14      	ldr	r3, [pc, #80]	; (802753c <_fflush_r+0x6c>)
 80274ec:	429c      	cmp	r4, r3
 80274ee:	d11b      	bne.n	8027528 <_fflush_r+0x58>
 80274f0:	686c      	ldr	r4, [r5, #4]
 80274f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	d0ef      	beq.n	80274da <_fflush_r+0xa>
 80274fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80274fc:	07d0      	lsls	r0, r2, #31
 80274fe:	d404      	bmi.n	802750a <_fflush_r+0x3a>
 8027500:	0599      	lsls	r1, r3, #22
 8027502:	d402      	bmi.n	802750a <_fflush_r+0x3a>
 8027504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027506:	f000 f915 	bl	8027734 <__retarget_lock_acquire_recursive>
 802750a:	4628      	mov	r0, r5
 802750c:	4621      	mov	r1, r4
 802750e:	f7ff ff5b 	bl	80273c8 <__sflush_r>
 8027512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027514:	4605      	mov	r5, r0
 8027516:	07da      	lsls	r2, r3, #31
 8027518:	d4e0      	bmi.n	80274dc <_fflush_r+0xc>
 802751a:	89a3      	ldrh	r3, [r4, #12]
 802751c:	059b      	lsls	r3, r3, #22
 802751e:	d4dd      	bmi.n	80274dc <_fflush_r+0xc>
 8027520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027522:	f000 f909 	bl	8027738 <__retarget_lock_release_recursive>
 8027526:	e7d9      	b.n	80274dc <_fflush_r+0xc>
 8027528:	4b05      	ldr	r3, [pc, #20]	; (8027540 <_fflush_r+0x70>)
 802752a:	429c      	cmp	r4, r3
 802752c:	d101      	bne.n	8027532 <_fflush_r+0x62>
 802752e:	68ac      	ldr	r4, [r5, #8]
 8027530:	e7df      	b.n	80274f2 <_fflush_r+0x22>
 8027532:	4b04      	ldr	r3, [pc, #16]	; (8027544 <_fflush_r+0x74>)
 8027534:	429c      	cmp	r4, r3
 8027536:	bf08      	it	eq
 8027538:	68ec      	ldreq	r4, [r5, #12]
 802753a:	e7da      	b.n	80274f2 <_fflush_r+0x22>
 802753c:	08029eb0 	.word	0x08029eb0
 8027540:	08029ed0 	.word	0x08029ed0
 8027544:	08029e90 	.word	0x08029e90

08027548 <std>:
 8027548:	2300      	movs	r3, #0
 802754a:	b510      	push	{r4, lr}
 802754c:	4604      	mov	r4, r0
 802754e:	6083      	str	r3, [r0, #8]
 8027550:	8181      	strh	r1, [r0, #12]
 8027552:	4619      	mov	r1, r3
 8027554:	6643      	str	r3, [r0, #100]	; 0x64
 8027556:	81c2      	strh	r2, [r0, #14]
 8027558:	2208      	movs	r2, #8
 802755a:	6183      	str	r3, [r0, #24]
 802755c:	e9c0 3300 	strd	r3, r3, [r0]
 8027560:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027564:	305c      	adds	r0, #92	; 0x5c
 8027566:	f7ff f9df 	bl	8026928 <memset>
 802756a:	4b05      	ldr	r3, [pc, #20]	; (8027580 <std+0x38>)
 802756c:	6224      	str	r4, [r4, #32]
 802756e:	6263      	str	r3, [r4, #36]	; 0x24
 8027570:	4b04      	ldr	r3, [pc, #16]	; (8027584 <std+0x3c>)
 8027572:	62a3      	str	r3, [r4, #40]	; 0x28
 8027574:	4b04      	ldr	r3, [pc, #16]	; (8027588 <std+0x40>)
 8027576:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027578:	4b04      	ldr	r3, [pc, #16]	; (802758c <std+0x44>)
 802757a:	6323      	str	r3, [r4, #48]	; 0x30
 802757c:	bd10      	pop	{r4, pc}
 802757e:	bf00      	nop
 8027580:	08027839 	.word	0x08027839
 8027584:	0802785b 	.word	0x0802785b
 8027588:	08027893 	.word	0x08027893
 802758c:	080278b7 	.word	0x080278b7

08027590 <_cleanup_r>:
 8027590:	4901      	ldr	r1, [pc, #4]	; (8027598 <_cleanup_r+0x8>)
 8027592:	f000 b8af 	b.w	80276f4 <_fwalk_reent>
 8027596:	bf00      	nop
 8027598:	080274d1 	.word	0x080274d1

0802759c <__sfmoreglue>:
 802759c:	b570      	push	{r4, r5, r6, lr}
 802759e:	2268      	movs	r2, #104	; 0x68
 80275a0:	1e4d      	subs	r5, r1, #1
 80275a2:	460e      	mov	r6, r1
 80275a4:	4355      	muls	r5, r2
 80275a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80275aa:	f7ff fa31 	bl	8026a10 <_malloc_r>
 80275ae:	4604      	mov	r4, r0
 80275b0:	b140      	cbz	r0, 80275c4 <__sfmoreglue+0x28>
 80275b2:	2100      	movs	r1, #0
 80275b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80275b8:	e9c0 1600 	strd	r1, r6, [r0]
 80275bc:	300c      	adds	r0, #12
 80275be:	60a0      	str	r0, [r4, #8]
 80275c0:	f7ff f9b2 	bl	8026928 <memset>
 80275c4:	4620      	mov	r0, r4
 80275c6:	bd70      	pop	{r4, r5, r6, pc}

080275c8 <__sfp_lock_acquire>:
 80275c8:	4801      	ldr	r0, [pc, #4]	; (80275d0 <__sfp_lock_acquire+0x8>)
 80275ca:	f000 b8b3 	b.w	8027734 <__retarget_lock_acquire_recursive>
 80275ce:	bf00      	nop
 80275d0:	2004f99a 	.word	0x2004f99a

080275d4 <__sfp_lock_release>:
 80275d4:	4801      	ldr	r0, [pc, #4]	; (80275dc <__sfp_lock_release+0x8>)
 80275d6:	f000 b8af 	b.w	8027738 <__retarget_lock_release_recursive>
 80275da:	bf00      	nop
 80275dc:	2004f99a 	.word	0x2004f99a

080275e0 <__sinit_lock_acquire>:
 80275e0:	4801      	ldr	r0, [pc, #4]	; (80275e8 <__sinit_lock_acquire+0x8>)
 80275e2:	f000 b8a7 	b.w	8027734 <__retarget_lock_acquire_recursive>
 80275e6:	bf00      	nop
 80275e8:	2004f99b 	.word	0x2004f99b

080275ec <__sinit_lock_release>:
 80275ec:	4801      	ldr	r0, [pc, #4]	; (80275f4 <__sinit_lock_release+0x8>)
 80275ee:	f000 b8a3 	b.w	8027738 <__retarget_lock_release_recursive>
 80275f2:	bf00      	nop
 80275f4:	2004f99b 	.word	0x2004f99b

080275f8 <__sinit>:
 80275f8:	b510      	push	{r4, lr}
 80275fa:	4604      	mov	r4, r0
 80275fc:	f7ff fff0 	bl	80275e0 <__sinit_lock_acquire>
 8027600:	69a3      	ldr	r3, [r4, #24]
 8027602:	b11b      	cbz	r3, 802760c <__sinit+0x14>
 8027604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027608:	f7ff bff0 	b.w	80275ec <__sinit_lock_release>
 802760c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027610:	6523      	str	r3, [r4, #80]	; 0x50
 8027612:	4620      	mov	r0, r4
 8027614:	4b12      	ldr	r3, [pc, #72]	; (8027660 <__sinit+0x68>)
 8027616:	4a13      	ldr	r2, [pc, #76]	; (8027664 <__sinit+0x6c>)
 8027618:	681b      	ldr	r3, [r3, #0]
 802761a:	62a2      	str	r2, [r4, #40]	; 0x28
 802761c:	42a3      	cmp	r3, r4
 802761e:	bf04      	itt	eq
 8027620:	2301      	moveq	r3, #1
 8027622:	61a3      	streq	r3, [r4, #24]
 8027624:	f000 f820 	bl	8027668 <__sfp>
 8027628:	6060      	str	r0, [r4, #4]
 802762a:	4620      	mov	r0, r4
 802762c:	f000 f81c 	bl	8027668 <__sfp>
 8027630:	60a0      	str	r0, [r4, #8]
 8027632:	4620      	mov	r0, r4
 8027634:	f000 f818 	bl	8027668 <__sfp>
 8027638:	2200      	movs	r2, #0
 802763a:	2104      	movs	r1, #4
 802763c:	60e0      	str	r0, [r4, #12]
 802763e:	6860      	ldr	r0, [r4, #4]
 8027640:	f7ff ff82 	bl	8027548 <std>
 8027644:	2201      	movs	r2, #1
 8027646:	2109      	movs	r1, #9
 8027648:	68a0      	ldr	r0, [r4, #8]
 802764a:	f7ff ff7d 	bl	8027548 <std>
 802764e:	2202      	movs	r2, #2
 8027650:	2112      	movs	r1, #18
 8027652:	68e0      	ldr	r0, [r4, #12]
 8027654:	f7ff ff78 	bl	8027548 <std>
 8027658:	2301      	movs	r3, #1
 802765a:	61a3      	str	r3, [r4, #24]
 802765c:	e7d2      	b.n	8027604 <__sinit+0xc>
 802765e:	bf00      	nop
 8027660:	08029e54 	.word	0x08029e54
 8027664:	08027591 	.word	0x08027591

08027668 <__sfp>:
 8027668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802766a:	4607      	mov	r7, r0
 802766c:	f7ff ffac 	bl	80275c8 <__sfp_lock_acquire>
 8027670:	4b1e      	ldr	r3, [pc, #120]	; (80276ec <__sfp+0x84>)
 8027672:	681e      	ldr	r6, [r3, #0]
 8027674:	69b3      	ldr	r3, [r6, #24]
 8027676:	b913      	cbnz	r3, 802767e <__sfp+0x16>
 8027678:	4630      	mov	r0, r6
 802767a:	f7ff ffbd 	bl	80275f8 <__sinit>
 802767e:	3648      	adds	r6, #72	; 0x48
 8027680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027684:	3b01      	subs	r3, #1
 8027686:	d503      	bpl.n	8027690 <__sfp+0x28>
 8027688:	6833      	ldr	r3, [r6, #0]
 802768a:	b30b      	cbz	r3, 80276d0 <__sfp+0x68>
 802768c:	6836      	ldr	r6, [r6, #0]
 802768e:	e7f7      	b.n	8027680 <__sfp+0x18>
 8027690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027694:	b9d5      	cbnz	r5, 80276cc <__sfp+0x64>
 8027696:	4b16      	ldr	r3, [pc, #88]	; (80276f0 <__sfp+0x88>)
 8027698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802769c:	6665      	str	r5, [r4, #100]	; 0x64
 802769e:	60e3      	str	r3, [r4, #12]
 80276a0:	f000 f847 	bl	8027732 <__retarget_lock_init_recursive>
 80276a4:	f7ff ff96 	bl	80275d4 <__sfp_lock_release>
 80276a8:	2208      	movs	r2, #8
 80276aa:	4629      	mov	r1, r5
 80276ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80276b0:	6025      	str	r5, [r4, #0]
 80276b2:	61a5      	str	r5, [r4, #24]
 80276b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80276b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80276bc:	f7ff f934 	bl	8026928 <memset>
 80276c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80276c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80276c8:	4620      	mov	r0, r4
 80276ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276cc:	3468      	adds	r4, #104	; 0x68
 80276ce:	e7d9      	b.n	8027684 <__sfp+0x1c>
 80276d0:	2104      	movs	r1, #4
 80276d2:	4638      	mov	r0, r7
 80276d4:	f7ff ff62 	bl	802759c <__sfmoreglue>
 80276d8:	4604      	mov	r4, r0
 80276da:	6030      	str	r0, [r6, #0]
 80276dc:	2800      	cmp	r0, #0
 80276de:	d1d5      	bne.n	802768c <__sfp+0x24>
 80276e0:	f7ff ff78 	bl	80275d4 <__sfp_lock_release>
 80276e4:	230c      	movs	r3, #12
 80276e6:	603b      	str	r3, [r7, #0]
 80276e8:	e7ee      	b.n	80276c8 <__sfp+0x60>
 80276ea:	bf00      	nop
 80276ec:	08029e54 	.word	0x08029e54
 80276f0:	ffff0001 	.word	0xffff0001

080276f4 <_fwalk_reent>:
 80276f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80276f8:	4606      	mov	r6, r0
 80276fa:	4688      	mov	r8, r1
 80276fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027700:	2700      	movs	r7, #0
 8027702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027706:	f1b9 0901 	subs.w	r9, r9, #1
 802770a:	d505      	bpl.n	8027718 <_fwalk_reent+0x24>
 802770c:	6824      	ldr	r4, [r4, #0]
 802770e:	2c00      	cmp	r4, #0
 8027710:	d1f7      	bne.n	8027702 <_fwalk_reent+0xe>
 8027712:	4638      	mov	r0, r7
 8027714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027718:	89ab      	ldrh	r3, [r5, #12]
 802771a:	2b01      	cmp	r3, #1
 802771c:	d907      	bls.n	802772e <_fwalk_reent+0x3a>
 802771e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027722:	3301      	adds	r3, #1
 8027724:	d003      	beq.n	802772e <_fwalk_reent+0x3a>
 8027726:	4629      	mov	r1, r5
 8027728:	4630      	mov	r0, r6
 802772a:	47c0      	blx	r8
 802772c:	4307      	orrs	r7, r0
 802772e:	3568      	adds	r5, #104	; 0x68
 8027730:	e7e9      	b.n	8027706 <_fwalk_reent+0x12>

08027732 <__retarget_lock_init_recursive>:
 8027732:	4770      	bx	lr

08027734 <__retarget_lock_acquire_recursive>:
 8027734:	4770      	bx	lr

08027736 <__retarget_lock_release>:
 8027736:	4770      	bx	lr

08027738 <__retarget_lock_release_recursive>:
 8027738:	4770      	bx	lr

0802773a <__swhatbuf_r>:
 802773a:	b570      	push	{r4, r5, r6, lr}
 802773c:	460e      	mov	r6, r1
 802773e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027742:	b096      	sub	sp, #88	; 0x58
 8027744:	4614      	mov	r4, r2
 8027746:	2900      	cmp	r1, #0
 8027748:	461d      	mov	r5, r3
 802774a:	da08      	bge.n	802775e <__swhatbuf_r+0x24>
 802774c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027750:	2200      	movs	r2, #0
 8027752:	602a      	str	r2, [r5, #0]
 8027754:	061a      	lsls	r2, r3, #24
 8027756:	d410      	bmi.n	802777a <__swhatbuf_r+0x40>
 8027758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802775c:	e00e      	b.n	802777c <__swhatbuf_r+0x42>
 802775e:	466a      	mov	r2, sp
 8027760:	f000 f8d0 	bl	8027904 <_fstat_r>
 8027764:	2800      	cmp	r0, #0
 8027766:	dbf1      	blt.n	802774c <__swhatbuf_r+0x12>
 8027768:	9a01      	ldr	r2, [sp, #4]
 802776a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802776e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027772:	425a      	negs	r2, r3
 8027774:	415a      	adcs	r2, r3
 8027776:	602a      	str	r2, [r5, #0]
 8027778:	e7ee      	b.n	8027758 <__swhatbuf_r+0x1e>
 802777a:	2340      	movs	r3, #64	; 0x40
 802777c:	2000      	movs	r0, #0
 802777e:	6023      	str	r3, [r4, #0]
 8027780:	b016      	add	sp, #88	; 0x58
 8027782:	bd70      	pop	{r4, r5, r6, pc}

08027784 <__smakebuf_r>:
 8027784:	898b      	ldrh	r3, [r1, #12]
 8027786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027788:	079d      	lsls	r5, r3, #30
 802778a:	4606      	mov	r6, r0
 802778c:	460c      	mov	r4, r1
 802778e:	d507      	bpl.n	80277a0 <__smakebuf_r+0x1c>
 8027790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027794:	6023      	str	r3, [r4, #0]
 8027796:	6123      	str	r3, [r4, #16]
 8027798:	2301      	movs	r3, #1
 802779a:	6163      	str	r3, [r4, #20]
 802779c:	b002      	add	sp, #8
 802779e:	bd70      	pop	{r4, r5, r6, pc}
 80277a0:	ab01      	add	r3, sp, #4
 80277a2:	466a      	mov	r2, sp
 80277a4:	f7ff ffc9 	bl	802773a <__swhatbuf_r>
 80277a8:	9900      	ldr	r1, [sp, #0]
 80277aa:	4605      	mov	r5, r0
 80277ac:	4630      	mov	r0, r6
 80277ae:	f7ff f92f 	bl	8026a10 <_malloc_r>
 80277b2:	b948      	cbnz	r0, 80277c8 <__smakebuf_r+0x44>
 80277b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80277b8:	059a      	lsls	r2, r3, #22
 80277ba:	d4ef      	bmi.n	802779c <__smakebuf_r+0x18>
 80277bc:	f023 0303 	bic.w	r3, r3, #3
 80277c0:	f043 0302 	orr.w	r3, r3, #2
 80277c4:	81a3      	strh	r3, [r4, #12]
 80277c6:	e7e3      	b.n	8027790 <__smakebuf_r+0xc>
 80277c8:	4b0d      	ldr	r3, [pc, #52]	; (8027800 <__smakebuf_r+0x7c>)
 80277ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80277cc:	89a3      	ldrh	r3, [r4, #12]
 80277ce:	6020      	str	r0, [r4, #0]
 80277d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277d4:	6120      	str	r0, [r4, #16]
 80277d6:	81a3      	strh	r3, [r4, #12]
 80277d8:	9b00      	ldr	r3, [sp, #0]
 80277da:	6163      	str	r3, [r4, #20]
 80277dc:	9b01      	ldr	r3, [sp, #4]
 80277de:	b15b      	cbz	r3, 80277f8 <__smakebuf_r+0x74>
 80277e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80277e4:	4630      	mov	r0, r6
 80277e6:	f000 f89f 	bl	8027928 <_isatty_r>
 80277ea:	b128      	cbz	r0, 80277f8 <__smakebuf_r+0x74>
 80277ec:	89a3      	ldrh	r3, [r4, #12]
 80277ee:	f023 0303 	bic.w	r3, r3, #3
 80277f2:	f043 0301 	orr.w	r3, r3, #1
 80277f6:	81a3      	strh	r3, [r4, #12]
 80277f8:	89a0      	ldrh	r0, [r4, #12]
 80277fa:	4305      	orrs	r5, r0
 80277fc:	81a5      	strh	r5, [r4, #12]
 80277fe:	e7cd      	b.n	802779c <__smakebuf_r+0x18>
 8027800:	08027591 	.word	0x08027591

08027804 <memchr>:
 8027804:	b2c9      	uxtb	r1, r1
 8027806:	4402      	add	r2, r0
 8027808:	b510      	push	{r4, lr}
 802780a:	4290      	cmp	r0, r2
 802780c:	4603      	mov	r3, r0
 802780e:	d101      	bne.n	8027814 <memchr+0x10>
 8027810:	2300      	movs	r3, #0
 8027812:	e003      	b.n	802781c <memchr+0x18>
 8027814:	781c      	ldrb	r4, [r3, #0]
 8027816:	3001      	adds	r0, #1
 8027818:	428c      	cmp	r4, r1
 802781a:	d1f6      	bne.n	802780a <memchr+0x6>
 802781c:	4618      	mov	r0, r3
 802781e:	bd10      	pop	{r4, pc}

08027820 <__malloc_lock>:
 8027820:	4801      	ldr	r0, [pc, #4]	; (8027828 <__malloc_lock+0x8>)
 8027822:	f7ff bf87 	b.w	8027734 <__retarget_lock_acquire_recursive>
 8027826:	bf00      	nop
 8027828:	2004f999 	.word	0x2004f999

0802782c <__malloc_unlock>:
 802782c:	4801      	ldr	r0, [pc, #4]	; (8027834 <__malloc_unlock+0x8>)
 802782e:	f7ff bf83 	b.w	8027738 <__retarget_lock_release_recursive>
 8027832:	bf00      	nop
 8027834:	2004f999 	.word	0x2004f999

08027838 <__sread>:
 8027838:	b510      	push	{r4, lr}
 802783a:	460c      	mov	r4, r1
 802783c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027840:	f000 f894 	bl	802796c <_read_r>
 8027844:	2800      	cmp	r0, #0
 8027846:	bfab      	itete	ge
 8027848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802784a:	89a3      	ldrhlt	r3, [r4, #12]
 802784c:	181b      	addge	r3, r3, r0
 802784e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027852:	bfac      	ite	ge
 8027854:	6563      	strge	r3, [r4, #84]	; 0x54
 8027856:	81a3      	strhlt	r3, [r4, #12]
 8027858:	bd10      	pop	{r4, pc}

0802785a <__swrite>:
 802785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802785e:	461f      	mov	r7, r3
 8027860:	898b      	ldrh	r3, [r1, #12]
 8027862:	4605      	mov	r5, r0
 8027864:	460c      	mov	r4, r1
 8027866:	05db      	lsls	r3, r3, #23
 8027868:	4616      	mov	r6, r2
 802786a:	d505      	bpl.n	8027878 <__swrite+0x1e>
 802786c:	2302      	movs	r3, #2
 802786e:	2200      	movs	r2, #0
 8027870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027874:	f000 f868 	bl	8027948 <_lseek_r>
 8027878:	89a3      	ldrh	r3, [r4, #12]
 802787a:	4632      	mov	r2, r6
 802787c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027880:	4628      	mov	r0, r5
 8027882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027886:	81a3      	strh	r3, [r4, #12]
 8027888:	463b      	mov	r3, r7
 802788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802788e:	f000 b817 	b.w	80278c0 <_write_r>

08027892 <__sseek>:
 8027892:	b510      	push	{r4, lr}
 8027894:	460c      	mov	r4, r1
 8027896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802789a:	f000 f855 	bl	8027948 <_lseek_r>
 802789e:	1c43      	adds	r3, r0, #1
 80278a0:	89a3      	ldrh	r3, [r4, #12]
 80278a2:	bf15      	itete	ne
 80278a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80278a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80278aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80278ae:	81a3      	strheq	r3, [r4, #12]
 80278b0:	bf18      	it	ne
 80278b2:	81a3      	strhne	r3, [r4, #12]
 80278b4:	bd10      	pop	{r4, pc}

080278b6 <__sclose>:
 80278b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80278ba:	f000 b813 	b.w	80278e4 <_close_r>
	...

080278c0 <_write_r>:
 80278c0:	b538      	push	{r3, r4, r5, lr}
 80278c2:	4604      	mov	r4, r0
 80278c4:	4d06      	ldr	r5, [pc, #24]	; (80278e0 <_write_r+0x20>)
 80278c6:	4608      	mov	r0, r1
 80278c8:	4611      	mov	r1, r2
 80278ca:	2200      	movs	r2, #0
 80278cc:	602a      	str	r2, [r5, #0]
 80278ce:	461a      	mov	r2, r3
 80278d0:	f7da fc6f 	bl	80021b2 <_write>
 80278d4:	1c43      	adds	r3, r0, #1
 80278d6:	d102      	bne.n	80278de <_write_r+0x1e>
 80278d8:	682b      	ldr	r3, [r5, #0]
 80278da:	b103      	cbz	r3, 80278de <_write_r+0x1e>
 80278dc:	6023      	str	r3, [r4, #0]
 80278de:	bd38      	pop	{r3, r4, r5, pc}
 80278e0:	2004f99c 	.word	0x2004f99c

080278e4 <_close_r>:
 80278e4:	b538      	push	{r3, r4, r5, lr}
 80278e6:	2300      	movs	r3, #0
 80278e8:	4d05      	ldr	r5, [pc, #20]	; (8027900 <_close_r+0x1c>)
 80278ea:	4604      	mov	r4, r0
 80278ec:	4608      	mov	r0, r1
 80278ee:	602b      	str	r3, [r5, #0]
 80278f0:	f7da fc7b 	bl	80021ea <_close>
 80278f4:	1c43      	adds	r3, r0, #1
 80278f6:	d102      	bne.n	80278fe <_close_r+0x1a>
 80278f8:	682b      	ldr	r3, [r5, #0]
 80278fa:	b103      	cbz	r3, 80278fe <_close_r+0x1a>
 80278fc:	6023      	str	r3, [r4, #0]
 80278fe:	bd38      	pop	{r3, r4, r5, pc}
 8027900:	2004f99c 	.word	0x2004f99c

08027904 <_fstat_r>:
 8027904:	b538      	push	{r3, r4, r5, lr}
 8027906:	2300      	movs	r3, #0
 8027908:	4d06      	ldr	r5, [pc, #24]	; (8027924 <_fstat_r+0x20>)
 802790a:	4604      	mov	r4, r0
 802790c:	4608      	mov	r0, r1
 802790e:	4611      	mov	r1, r2
 8027910:	602b      	str	r3, [r5, #0]
 8027912:	f7da fc76 	bl	8002202 <_fstat>
 8027916:	1c43      	adds	r3, r0, #1
 8027918:	d102      	bne.n	8027920 <_fstat_r+0x1c>
 802791a:	682b      	ldr	r3, [r5, #0]
 802791c:	b103      	cbz	r3, 8027920 <_fstat_r+0x1c>
 802791e:	6023      	str	r3, [r4, #0]
 8027920:	bd38      	pop	{r3, r4, r5, pc}
 8027922:	bf00      	nop
 8027924:	2004f99c 	.word	0x2004f99c

08027928 <_isatty_r>:
 8027928:	b538      	push	{r3, r4, r5, lr}
 802792a:	2300      	movs	r3, #0
 802792c:	4d05      	ldr	r5, [pc, #20]	; (8027944 <_isatty_r+0x1c>)
 802792e:	4604      	mov	r4, r0
 8027930:	4608      	mov	r0, r1
 8027932:	602b      	str	r3, [r5, #0]
 8027934:	f7da fc75 	bl	8002222 <_isatty>
 8027938:	1c43      	adds	r3, r0, #1
 802793a:	d102      	bne.n	8027942 <_isatty_r+0x1a>
 802793c:	682b      	ldr	r3, [r5, #0]
 802793e:	b103      	cbz	r3, 8027942 <_isatty_r+0x1a>
 8027940:	6023      	str	r3, [r4, #0]
 8027942:	bd38      	pop	{r3, r4, r5, pc}
 8027944:	2004f99c 	.word	0x2004f99c

08027948 <_lseek_r>:
 8027948:	b538      	push	{r3, r4, r5, lr}
 802794a:	4604      	mov	r4, r0
 802794c:	4d06      	ldr	r5, [pc, #24]	; (8027968 <_lseek_r+0x20>)
 802794e:	4608      	mov	r0, r1
 8027950:	4611      	mov	r1, r2
 8027952:	2200      	movs	r2, #0
 8027954:	602a      	str	r2, [r5, #0]
 8027956:	461a      	mov	r2, r3
 8027958:	f7da fc6e 	bl	8002238 <_lseek>
 802795c:	1c43      	adds	r3, r0, #1
 802795e:	d102      	bne.n	8027966 <_lseek_r+0x1e>
 8027960:	682b      	ldr	r3, [r5, #0]
 8027962:	b103      	cbz	r3, 8027966 <_lseek_r+0x1e>
 8027964:	6023      	str	r3, [r4, #0]
 8027966:	bd38      	pop	{r3, r4, r5, pc}
 8027968:	2004f99c 	.word	0x2004f99c

0802796c <_read_r>:
 802796c:	b538      	push	{r3, r4, r5, lr}
 802796e:	4604      	mov	r4, r0
 8027970:	4d06      	ldr	r5, [pc, #24]	; (802798c <_read_r+0x20>)
 8027972:	4608      	mov	r0, r1
 8027974:	4611      	mov	r1, r2
 8027976:	2200      	movs	r2, #0
 8027978:	602a      	str	r2, [r5, #0]
 802797a:	461a      	mov	r2, r3
 802797c:	f7da fbfc 	bl	8002178 <_read>
 8027980:	1c43      	adds	r3, r0, #1
 8027982:	d102      	bne.n	802798a <_read_r+0x1e>
 8027984:	682b      	ldr	r3, [r5, #0]
 8027986:	b103      	cbz	r3, 802798a <_read_r+0x1e>
 8027988:	6023      	str	r3, [r4, #0]
 802798a:	bd38      	pop	{r3, r4, r5, pc}
 802798c:	2004f99c 	.word	0x2004f99c

08027990 <_init>:
 8027990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027992:	bf00      	nop
 8027994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027996:	bc08      	pop	{r3}
 8027998:	469e      	mov	lr, r3
 802799a:	4770      	bx	lr

0802799c <_fini>:
 802799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802799e:	bf00      	nop
 80279a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80279a2:	bc08      	pop	{r3}
 80279a4:	469e      	mov	lr, r3
 80279a6:	4770      	bx	lr
